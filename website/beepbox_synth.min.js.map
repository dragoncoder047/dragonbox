{
  "version": 3,
  "sources": ["../synth/synth.ts", "../synth/SynthConfig.ts", "../synth/Deque.ts", "../editor/EditorConfig.ts", "../synth/Channel.ts", "../synth/filtering.ts", "../synth/Filter.ts", "../synth/utils.ts", "../synth/Envelope.ts", "../synth/Effect.ts", "../synth/Instrument.ts", "../synth/Pattern.ts", "../synth/Song.ts", "../synth/ChannelState.ts", "../synth/FFT.ts", "../synth/EffectState.ts", "../node_modules/.pnpm/js-xxhash@4.0.0/node_modules/js-xxhash/dist/esm/xxHash32.js", "../synth/EnvelopeComputer.ts", "../synth/InstrumentState.ts", "../global/Events.ts"],
  "sourcesContent": ["// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { Dictionary, DictionaryArray, FilterType, EnvelopeType, InstrumentType, MDEffectType, EffectType, EnvelopeComputeIndex, Transition, Chord, Envelope, Config, getArpeggioPitchIndex, getPulseWidthRatio, effectsIncludePitchShift, effectsIncludeDetune, effectsIncludeVibrato, OperatorWave, GranularEnvelopeType } from \"./SynthConfig\";\nimport { Deque } from \"./Deque\";\nimport { Song, HeldMod } from \"./Song\";\nimport { Channel } from \"./Channel\";\nimport { ChannelState } from \"./ChannelState\";\nimport { Instrument } from \"./Instrument\";\nimport { Effect } from \"./Effect\";\nimport { EffectState } from \"./EffectState\";\nimport { PickedString, InstrumentState } from \"./InstrumentState\";\nimport { Note, NotePin, Pattern } from \"./Pattern\";\nimport { EnvelopeComputer } from \"./EnvelopeComputer\";\nimport { FilterSettings, FilterControlPoint } from \"./Filter\";\nimport { events } from \"../global/Events\";\nimport { FilterCoefficients, FrequencyResponse, DynamicBiquadFilter } from \"./filtering\";\nimport { clamp, detuneToCents, fittingPowerOfTwo } from \"./utils\";\n\ndeclare global {\n    interface Window {\n        AudioContext: any;\n        webkitAudioContext: any;\n    }\n}\n\nconst epsilon: number = (1.0e-24); // For detecting and avoiding float denormals, which have poor performance.\n\n// For performance debugging:\n//let samplesAccumulated: number = 0;\n//let samplePerformance: number = 0;\n\nexport class Tone {\n    instrumentIndex: number;\n    readonly pitches: number[] = Array(Config.maxChordSize + 2).fill(0);\n    pitchCount: number = 0;\n    chordSize: number = 0;\n    drumsetPitch: number | null = null;\n    note: Note | null = null;\n    prevNote: Note | null = null;\n    nextNote: Note | null = null;\n    prevNotePitchIndex: number = 0;\n    nextNotePitchIndex: number = 0;\n    freshlyAllocated: boolean = true;\n    atNoteStart: boolean = false;\n    isOnLastTick: boolean = false; // Whether the tone is finished fading out and ready to be freed.\n    passedEndOfNote: boolean = false;\n    forceContinueAtStart: boolean = false;\n    forceContinueAtEnd: boolean = false;\n    noteStartPart: number = 0;\n    noteEndPart: number = 0;\n    ticksSinceReleased: number = 0;\n    liveInputSamplesHeld: number = 0;\n    lastInterval: number = 0;\n    chipWaveStartOffset: number = 0;\n    noiseSample: number = 0.0;\n    noiseSampleA: number = 0.0;\n    noiseSampleB: number = 0.0;\n    stringSustainStart: number = 0;\n    stringSustainEnd: number = 0;\n    readonly noiseSamples: number[] = [];\n    readonly phases: number[] = [];\n    readonly operatorWaves: OperatorWave[] = [];\n    readonly phaseDeltas: number[] = [];\n\t\t\t// advloop addition\n        directions: number[] = [];\n        chipWaveCompletions: number[] = [];\n        chipWavePrevWavesL: number[] = [];\n        chipWavePrevWavesR: number[] = [];\n        chipWaveCompletionsLastWaveL: number[] = [];\n        chipWaveCompletionsLastWaveR: number[] = [];\n           // advloop addition\n    readonly phaseDeltaScales: number[] = [];\n    expression: number = 0.0;\n    expressionDelta: number = 0.0;\n    readonly operatorExpressions: number[] = [];\n    readonly operatorExpressionDeltas: number[] = [];\n    readonly prevPitchExpressions: Array<number | null> = Array(Config.maxPitchOrOperatorCount).fill(null);\n    prevVibrato: number | null = null;\n    prevStringDecay: number | null = null;\n    pulseWidth: number = 0.0;\n    pulseWidthDelta: number = 0.0;\n    decimalOffset: number = 0.0;\n    supersawDynamism: number = 0.0;\n    supersawDynamismDelta: number = 0.0;\n    supersawUnisonDetunes: number[] = []; // These can change over time, but slowly enough that I'm not including corresponding delta values within a tick run.\n    supersawShape: number = 0.0;\n    supersawShapeDelta: number = 0.0;\n    supersawDelayLength: number = 0.0;\n    supersawDelayLengthDelta: number = 0.0;\n    supersawDelayLine: Float32Array | null = null;\n    supersawDelayIndex: number = -1;\n    supersawPrevPhaseDelta: number | null = null;\n    readonly pickedStrings: PickedString[] = [];\n\n    readonly noteFiltersL: DynamicBiquadFilter[] = [];\n    readonly noteFiltersR: DynamicBiquadFilter[] = [];\n    noteFilterCount: number = 0;\n    initialNoteFilterInputL1: number = 0.0;\n    initialNoteFilterInputR1: number = 0.0;\n    initialNoteFilterInputL2: number = 0.0;\n    initialNoteFilterInputR2: number = 0.0;\n\n    specialIntervalExpressionMult: number = 1.0;\n    readonly feedbackOutputs: number[] = [];\n    feedbackMult: number = 0.0;\n    feedbackDelta: number = 0.0;\n    stereoVolumeLStart: number = 0.0;\n    stereoVolumeRStart: number = 0.0;\n    stereoVolumeLDelta: number = 0.0;\n    stereoVolumeRDelta: number = 0.0;\n    stereoDelayStart: number = 0.0;\n    stereoDelayEnd: number = 0.0;\n    stereoDelayDelta: number = 0.0;\n    customVolumeStart: number = 0.0;\n    customVolumeEnd: number = 0.0;\n    filterResonanceStart: number = 0.0;\n    filterResonanceDelta: number = 0.0;\n    isFirstOrder: boolean = false;\n\n    readonly envelopeComputer: EnvelopeComputer = new EnvelopeComputer(/*true*/);\n\n    constructor() {\n        this.reset();\n    }\n\n    reset(): void {\n        // this.noiseSample = 0.0;\n        for (let i: number = 0; i < Config.unisonVoicesMax; i++) {\n            this.noiseSamples[i] = 0.0;\n        }\n        for (let i: number = 0; i < Config.maxPitchOrOperatorCount; i++) {\n            this.phases[i] = 0.0;\n\t\t\t\t// advloop addition\n                this.directions[i] = 1;\n                this.chipWaveCompletions[i] = 0;\n                this.chipWavePrevWavesL[i] = 0;\n                this.chipWavePrevWavesR[i] = 0;\n                this.chipWaveCompletionsLastWaveL[i] = 0;\n                this.chipWaveCompletionsLastWaveR[i] = 0;\n                // advloop addition\n            this.operatorWaves[i] = Config.operatorWaves[0];\n            this.feedbackOutputs[i] = 0.0;\n            this.prevPitchExpressions[i] = null;\n        }\n        for (let i: number = 0; i < this.noteFilterCount; i++) {\n            this.noteFiltersL[i].resetOutput();\n            this.noteFiltersR[i].resetOutput();\n        }\n        this.noteFilterCount = 0;\n        this.initialNoteFilterInputL1 = 0.0;\n        this.initialNoteFilterInputR1 = 0.0;\n        this.initialNoteFilterInputL2 = 0.0;\n        this.initialNoteFilterInputR2 = 0.0;\n        this.liveInputSamplesHeld = 0;\n        this.supersawDelayIndex = -1;\n        for (const pickedString of this.pickedStrings) {\n            pickedString.reset();\n        }\n        this.envelopeComputer.reset();\n        this.prevVibrato = null;\n        this.prevStringDecay = null;\n        this.supersawPrevPhaseDelta = null;\n        this.drumsetPitch = null;\n    }\n}\n\nexport class Synth {\n\n    private syncSongState(): void {\n        const channelCount: number = this.song!.getChannelCount();\n        for (let i: number = this.channels.length; i < channelCount; i++) {\n            this.channels[i] = new ChannelState();\n        }\n        this.channels.length = channelCount;\n        for (let i: number = 0; i < channelCount; i++) {\n            const channel: Channel = this.song!.channels[i];\n            const channelState: ChannelState = this.channels[i];\n            for (let j: number = channelState.instruments.length; j < channel.instruments.length; j++) {\n                channelState.instruments[j] = new InstrumentState();\n            }\n            channelState.instruments.length = channel.instruments.length;\n\n            if (channelState.muted != channel.muted) {\n                channelState.muted = channel.muted;\n                if (channelState.muted) {\n                    for (const instrumentState of channelState.instruments) {\n                        instrumentState.resetAllEffects();\n                    }\n                }\n            }\n        }\n    }\n\n    initModFilters(song: Song | null): void {\n        if (song != null) {\n            song.tmpEqFilterStart = song.eqFilter;\n            song.tmpEqFilterEnd = null;\n            for (let channelIndex: number = 0; channelIndex < song.getChannelCount(); channelIndex++) {\n                for (let instrumentIndex: number = 0; instrumentIndex < song.channels[channelIndex].instruments.length; instrumentIndex++) {\n                    const instrument: Instrument = song.channels[channelIndex].instruments[instrumentIndex];\n                    for (let effectIndex: number = 0; effectIndex < song.channels[channelIndex].instruments[instrumentIndex].effects.length; effectIndex++) {\n                        const effect: Effect = song.channels[channelIndex].instruments[instrumentIndex].effects[effectIndex] as Effect;\n                        effect.tmpEqFilterStart = effect.eqFilter;\n                        effect.tmpEqFilterEnd = null;\n                    }\n                    instrument.tmpNoteFilterStart = instrument.noteFilter;\n                    instrument.tmpNoteFilterEnd = null;\n                }\n            }\n        }\n    }\n    warmUpSynthesizer(song: Song | null): void {\n        // Don't bother to generate the drum waves unless the song actually\n        // uses them, since they may require a lot of computation.\n        if (song != null) {\n            this.syncSongState();\n            const samplesPerTick: number = this.getSamplesPerTick();\n            for (let channelIndex: number = 0; channelIndex < song.getChannelCount(); channelIndex++) {\n                for (let instrumentIndex: number = 0; instrumentIndex < song.channels[channelIndex].instruments.length; instrumentIndex++) {\n                    const instrument: Instrument = song.channels[channelIndex].instruments[instrumentIndex];\n                    const instrumentState: InstrumentState = this.channels[channelIndex].instruments[instrumentIndex];\n                    Synth.getInstrumentSynthFunction(instrument);\n                    instrumentState.vibratoTime = 0;\n                    instrumentState.nextVibratoTime = 0;\n                    for (let envelopeIndex: number = 0; envelopeIndex < Config.maxEnvelopeCount + 1; envelopeIndex++) instrumentState.envelopeTime[envelopeIndex] = 0;\n                    instrumentState.arpTime = 0;\n                    instrumentState.updateWaves(instrument, this.samplesPerSecond);\n                    instrumentState.allocateNecessaryBuffers(this, instrument, samplesPerTick);\n                }\n\n            }\n        }\n        // JummBox needs to run synth functions for at least one sample (for JIT purposes)\n        // before starting audio callbacks to avoid skipping the initial output.\n        var dummyArray = new Float32Array(1);\n        this.isPlayingSong = true;\n        this.synthesize(dummyArray, dummyArray, 1, true);\n        this.isPlayingSong = false;\n    }\n\n\n    computeLatestModValues(): void {\n\n        if (this.song != null && this.song.modChannelCount > 0) {\n\n            // Clear all mod values, and set up temp variables for the time a mod would be set at.\n            let latestModTimes: (number | null)[] = [];\n            let latestModInsTimes: (number | null)[][][] = [];\n            this.modValues = [];\n            this.nextModValues = [];\n            this.modInsValues = [];\n            this.nextModInsValues = [];\n            this.heldMods = [];\n            for (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\n                latestModInsTimes[channel] = [];\n                this.modInsValues[channel] = [];\n                this.nextModInsValues[channel] = [];\n\n                for (let instrument: number = 0; instrument < this.song.channels[channel].instruments.length; instrument++) {\n                    this.modInsValues[channel][instrument] = [];\n                    this.nextModInsValues[channel][instrument] = [];\n                    latestModInsTimes[channel][instrument] = [];\n                }\n            }\n\n            // Find out where we're at in the fraction of the current bar.\n            let currentPart: number = this.beat * Config.partsPerBeat + this.part;\n\n            // For mod channels, calculate last set value for each mod\n            for (let channelIndex: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channelIndex < this.song.getChannelCount(); channelIndex++) {\n                if (!(this.song.channels[channelIndex].muted)) {\n\n                    let pattern: Pattern | null;\n\n                    for (let currentBar: number = this.bar; currentBar >= 0; currentBar--) {\n                        pattern = this.song.getPattern(channelIndex, currentBar);\n\n                        if (pattern != null) {\n                            let instrumentIdx: number = pattern.instruments[0];\n                            let instrument: Instrument = this.song.channels[channelIndex].instruments[instrumentIdx];\n                            let latestPinParts: number[] = [];\n                            let latestPinValues: number[] = [];\n\n                            let partsInBar: number = (currentBar == this.bar)\n                                ? currentPart\n                                : this.findPartsInBar(currentBar);\n\n                            for (const note of pattern.notes) {\n                                if (note.start <= partsInBar && (latestPinParts[Config.modCount - 1 - note.pitches[0]] == null || note.end > latestPinParts[Config.modCount - 1 - note.pitches[0]])) {\n                                    if (note.start == partsInBar) { // This can happen with next bar mods, and the value of the aligned note's start pin will be used.\n                                        latestPinParts[Config.modCount - 1 - note.pitches[0]] = note.start;\n                                        latestPinValues[Config.modCount - 1 - note.pitches[0]] = note.pins[0].size;\n                                    }\n                                    if (note.end <= partsInBar) {\n                                        latestPinParts[Config.modCount - 1 - note.pitches[0]] = note.end;\n                                        latestPinValues[Config.modCount - 1 - note.pitches[0]] = note.pins[note.pins.length - 1].size;\n                                    }\n                                    else {\n                                        latestPinParts[Config.modCount - 1 - note.pitches[0]] = partsInBar;\n                                        // Find the pin where bar change happens, and compute where pin volume would be at that time\n                                        for (let pinIdx = 0; pinIdx < note.pins.length; pinIdx++) {\n                                            if (note.pins[pinIdx].time + note.start > partsInBar) {\n                                                const transitionLength: number = note.pins[pinIdx].time - note.pins[pinIdx - 1].time;\n                                                const toNextBarLength: number = partsInBar - note.start - note.pins[pinIdx - 1].time;\n                                                const deltaVolume: number = note.pins[pinIdx].size - note.pins[pinIdx - 1].size;\n\n                                                latestPinValues[Config.modCount - 1 - note.pitches[0]] = Math.round(note.pins[pinIdx - 1].size + deltaVolume * toNextBarLength / transitionLength);\n                                                pinIdx = note.pins.length;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n\n                            // Set modulator value, if it wasn't set in another pattern already scanned\n                            for (let mod: number = 0; mod < Config.modCount; mod++) {\n                                if (latestPinParts[mod] != null) {\n                                    if (Config.modulators[instrument.modulators[mod]].forSong) {\n                                        const songFilterParam: boolean = instrument.modulators[mod] == Config.modulators.dictionary[\"song eq\"].index;\n                                        if (latestModTimes[instrument.modulators[mod]] == null || currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod] > (latestModTimes[instrument.modulators[mod]] as number)) {\n                                            if (songFilterParam) {\n                                                let tgtSong: Song = this.song\n                                                if (instrument.modFilterTypes[mod] == 0) {\n                                                    tgtSong.tmpEqFilterStart = tgtSong.eqSubFilters[latestPinValues[mod]];\n                                                } else {\n                                                    for (let i: number = 0; i < Config.filterMorphCount; i++) {\n                                                        if (tgtSong.tmpEqFilterStart != null && tgtSong.tmpEqFilterStart == tgtSong.eqSubFilters[i]) {\n                                                            tgtSong.tmpEqFilterStart = new FilterSettings();\n                                                            tgtSong.tmpEqFilterStart.fromJsonObject(tgtSong.eqSubFilters[i]!.toJsonObject());\n                                                            i = Config.filterMorphCount;\n                                                        }\n                                                    }\n                                                    if (tgtSong.tmpEqFilterStart != null && Math.floor((instrument.modFilterTypes[mod] - 1) / 2) < tgtSong.tmpEqFilterStart.controlPointCount) {\n                                                        if (instrument.modFilterTypes[mod] % 2)\n                                                            tgtSong.tmpEqFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].freq = latestPinValues[mod];\n                                                        else\n                                                            tgtSong.tmpEqFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].gain = latestPinValues[mod];\n                                                    }\n                                                }\n                                                tgtSong.tmpEqFilterEnd = tgtSong.tmpEqFilterStart;\n                                            }\n                                            for (let i: number = 0; i < instrument.modChannels[mod].length; i++) this.setModValue(latestPinValues[mod], latestPinValues[mod], instrument.modChannels[mod][i], instrument.modInstruments[mod][i], instrument.modulators[mod]);\n                                            latestModTimes[instrument.modulators[mod]] = currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod];\n                                        }\n                                    } else {\n                                        // Generate list of used channels + instruments\n                                        let usedChannels: number[] = [];\n                                        let usedInstruments: number[] = [];\n                                        // All\n                                        if (instrument.modInstruments[mod][0] == this.song.channels[instrument.modChannels[mod][0]].instruments.length) {\n                                            for (let i: number = 0; i < this.song.channels[instrument.modChannels[mod][0]].instruments.length; i++) {\n                                                usedChannels.push(instrument.modChannels[mod][0]);\n                                                usedInstruments.push(i);\n                                            }\n                                        } // Active\n                                        else if (instrument.modInstruments[mod][0] > this.song.channels[instrument.modChannels[mod][0]].instruments.length) {\n                                            const tgtPattern: Pattern | null = this.song.getPattern(instrument.modChannels[mod][0], currentBar);\n                                            if (tgtPattern != null) {\n                                                usedChannels.push(instrument.modChannels[mod][0]);\n                                                usedInstruments = tgtPattern.instruments;\n                                            }\n                                        } else {\n                                            for (let i: number = 0; i < instrument.modChannels[mod].length; i++) {\n                                                usedChannels.push(instrument.modChannels[mod][i]);\n                                                usedInstruments.push(instrument.modInstruments[mod][i]);\n                                            }\n                                        }\n                                        for (let instrumentIndex: number = 0; instrumentIndex < usedInstruments.length; instrumentIndex++) {\n                                            // Iterate through all used instruments by this modulator\n                                            // Special indices for mod filter targets, since they control multiple things.\n                                            const eqFilterParam: boolean = instrument.modulators[mod] == Config.modulators.dictionary[\"post eq\"].index;\n                                            const noteFilterParam: boolean = instrument.modulators[mod] == Config.modulators.dictionary[\"pre eq\"].index;\n                                            let modulatorAdjust: number = instrument.modulators[mod];\n                                            if (eqFilterParam) {\n                                                modulatorAdjust = Config.modulators.length + (instrument.modFilterTypes[mod] | 0);\n                                            } else if (noteFilterParam) {\n                                                // Skip all possible indices for eq filter\n                                                modulatorAdjust = Config.modulators.length + 1 + (2 * Config.filterMaxPoints) + (instrument.modFilterTypes[mod] | 0);\n                                            }\n\n                                            if (latestModInsTimes[instrument.modChannels[mod][instrumentIndex]][usedInstruments[instrumentIndex]][modulatorAdjust] == null\n                                                || currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod] > latestModInsTimes[instrument.modChannels[mod][instrumentIndex]][usedInstruments[instrumentIndex]][modulatorAdjust]!) {\n\n                                                if (eqFilterParam) {\n                                                    let tgtInstrument: Instrument = this.song.channels[instrument.modChannels[mod][instrumentIndex]].instruments[usedInstruments[instrumentIndex]];\n                                                    for (let effectIndex: number = 0; effectIndex < tgtInstrument.effects.length; effectIndex++) {\n                                                        let tgtEffect: Effect = tgtInstrument.effects[effectIndex] as Effect;\n                                                        if (instrument.modFilterTypes[mod] == 0) {\n                                                            tgtEffect.tmpEqFilterStart = tgtEffect.eqSubFilters[latestPinValues[mod]];\n                                                        } else {\n                                                            for (let i: number = 0; i < Config.filterMorphCount; i++) {\n                                                                if (tgtEffect.tmpEqFilterStart != null && tgtEffect.tmpEqFilterStart == tgtEffect.eqSubFilters[i]) {\n                                                                    tgtEffect.tmpEqFilterStart = new FilterSettings();\n                                                                    tgtEffect.tmpEqFilterStart.fromJsonObject(tgtEffect.eqSubFilters[i]!.toJsonObject());\n                                                                    i = Config.filterMorphCount;\n                                                                }\n                                                            }\n                                                            if (tgtEffect.tmpEqFilterStart != null && Math.floor((instrument.modFilterTypes[mod] - 1) / 2) < tgtEffect.tmpEqFilterStart.controlPointCount) {\n                                                                if (instrument.modFilterTypes[mod] % 2)\n                                                                    tgtEffect.tmpEqFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].freq = latestPinValues[mod];\n                                                                else\n                                                                    tgtEffect.tmpEqFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].gain = latestPinValues[mod];\n                                                            }\n                                                        }\n                                                        tgtEffect.tmpEqFilterEnd = tgtEffect.tmpEqFilterStart;\n                                                    }\n                                                } else if (noteFilterParam) {\n                                                    let tgtInstrument: Instrument = this.song.channels[instrument.modChannels[mod][instrumentIndex]].instruments[usedInstruments[instrumentIndex]];\n                                                    if (instrument.modFilterTypes[mod] == 0) {\n                                                        tgtInstrument.tmpNoteFilterStart = tgtInstrument.noteSubFilters[latestPinValues[mod]];\n                                                    } else {\n                                                        for (let i: number = 0; i < Config.filterMorphCount; i++) {\n                                                            if (tgtInstrument.tmpNoteFilterStart != null && tgtInstrument.tmpNoteFilterStart == tgtInstrument.noteSubFilters[i]) {\n                                                                tgtInstrument.tmpNoteFilterStart = new FilterSettings();\n                                                                tgtInstrument.tmpNoteFilterStart.fromJsonObject(tgtInstrument.noteSubFilters[i]!.toJsonObject());\n                                                                i = Config.filterMorphCount;\n                                                            }\n                                                        }\n                                                        if (tgtInstrument.tmpNoteFilterStart != null && Math.floor((instrument.modFilterTypes[mod] - 1) / 2) < tgtInstrument.tmpNoteFilterStart.controlPointCount) {\n                                                            if (instrument.modFilterTypes[mod] % 2)\n                                                                tgtInstrument.tmpNoteFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].freq = latestPinValues[mod];\n                                                            else\n                                                                tgtInstrument.tmpNoteFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].gain = latestPinValues[mod];\n                                                        }\n                                                    }\n                                                    tgtInstrument.tmpNoteFilterEnd = tgtInstrument.tmpNoteFilterStart;\n                                                }\n                                                else this.setModValue(latestPinValues[mod], latestPinValues[mod], instrument.modChannels[mod][instrumentIndex], usedInstruments[instrumentIndex], modulatorAdjust);\n\n                                                latestModInsTimes[instrument.modChannels[mod][instrumentIndex]][usedInstruments[instrumentIndex]][modulatorAdjust] = currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod];\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // Detects if a modulator is set, but not valid for the current effects/instrument type/filter type\n    // Note, setting 'none' or the intermediary steps when clicking to add a mod, like an unset channel/unset instrument, counts as valid.\n    // TODO: This kind of check is mirrored in SongEditor.ts' whenUpdated. Creates a lot of redundancy for adding new mods. Can be moved into new properties for mods, to avoid this later.\n    determineInvalidModulators(instrument: Instrument): void {\n        if (this.song == null)\n            return;\n        for (let mod: number = 0; mod < Config.modCount; mod++) {\n            instrument.invalidModulators[mod] = true;\n            // For song modulator, valid if any setting used\n            if (instrument.modChannels[mod][0] == -1) {\n                if (instrument.modulators[mod] != 0)\n                    instrument.invalidModulators[mod] = false;\n                continue;\n            }\n            for (let channelIndex: number = 0; channelIndex < instrument.modChannels[mod].length; channelIndex++) {\n                const channel: Channel | null = this.song.channels[instrument.modChannels[mod][channelIndex]];\n                if (channel == null) continue;\n                let tgtInstrumentList: Instrument[] = [];\n                if (instrument.modInstruments[mod][channelIndex] >= channel.instruments.length) { // All or active\n                    tgtInstrumentList = channel.instruments;\n                } else {\n                    tgtInstrumentList = [channel.instruments[instrument.modInstruments[mod][channelIndex]]];\n                }\n                for (let i: number = 0; i < tgtInstrumentList.length; i++) {\n                    const tgtInstrument: Instrument | null = tgtInstrumentList[i];\n                    const tgtEffect: Effect = tgtInstrument.effects[0] as Effect;\n                    if (tgtInstrument == null) continue;\n                    const str: string = Config.modulators[instrument.modulators[mod]].name;\n                    // Check effects\n                    if (!(Config.modulators[instrument.modulators[mod]].associatedEffect != EffectType.length && !(tgtInstrument.effectsIncludeType(Config.modulators[instrument.modulators[mod]].associatedEffect))) && !(Config.modulators[instrument.modulators[mod]].associatedMDEffect != MDEffectType.length && !(tgtInstrument.mdeffects & (1 << Config.modulators[instrument.modulators[mod]].associatedMDEffect)))\n                        // Instrument type specific\n                        || ((tgtInstrument.type != InstrumentType.fm && tgtInstrument.type != InstrumentType.fm6op) && (str == \"fm slider 1\" || str == \"fm slider 2\" || str == \"fm slider 3\" || str == \"fm slider 4\" || str == \"fm feedback\"))\n                        || tgtInstrument.type != InstrumentType.fm6op && (str == \"fm slider 5\" || str == \"fm slider 6\")\n                        || ((tgtInstrument.type != InstrumentType.pwm && tgtInstrument.type != InstrumentType.supersaw) && (str == \"pulse width\" || str == \"decimal offset\"))\n                        || ((tgtInstrument.type != InstrumentType.supersaw) && (str == \"dynamism\" || str == \"spread\" || str == \"saw shape\"))\n                        // Arp check\n                        || (!tgtInstrument.getChord().arpeggiates && (str == \"arp speed\" || str == \"reset arp\"))\n                        // EQ Filter check\n                        || (tgtEffect.eqFilterType && str == \"post eq\")\n                        || (!tgtEffect.eqFilterType && (str == \"post eq cut\" || str == \"post eq peak\"))\n                        || (str == \"post eq\" && Math.floor((instrument.modFilterTypes[mod] + 1) / 2) > tgtInstrument.getLargestControlPointCount(false))\n                        // Note Filter check\n                        || (tgtInstrument!.noteFilterType && str == \"pre eq\")\n                        || (!tgtInstrument!.noteFilterType && (str == \"pre eq cut\" || str == \"pre eq peak\"))\n                        || (str == \"pre eq\" && Math.floor((instrument.modFilterTypes[mod] + 1) / 2) > tgtInstrument.getLargestControlPointCount(true))) {\n\n                        instrument.invalidModulators[mod] = false;\n                        i = tgtInstrumentList.length;\n                    }\n                }\n            }\n        }\n    }\n\n    private static operatorAmplitudeCurve(amplitude: number): number {\n        return (Math.pow(16.0, amplitude / 15.0) - 1.0) / 15.0;\n    }\n\n    samplesPerSecond: number = 44100;\n    panningDelayBufferSize: number;\n    panningDelayBufferMask: number;\n    flangerDelayBufferSize: number;\n    flangerDelayBufferMask: number;\n    chorusDelayBufferSize: number;\n    chorusDelayBufferMask: number;\n    // TODO: reverb\n\n    song: Song | null = null;\n    preferLowerLatency: boolean = false; // enable when recording performances from keyboard or MIDI. Takes effect next time you activate audio.\n    anticipatePoorPerformance: boolean = false; // enable on mobile devices to reduce audio stutter glitches. Takes effect next time you activate audio.\n    liveInputDuration: number = 0;\n    liveBassInputDuration: number = 0;\n    liveInputStarted: boolean = false;\n    liveBassInputStarted: boolean = false;\n    liveInputPitches: number[] = [];\n    liveBassInputPitches: number[] = [];\n    liveInputChannel: number = 0;\n    liveBassInputChannel: number = 0;\n    liveInputInstruments: number[] = [];\n    liveBassInputInstruments: number[] = [];\n    loopRepeatCount: number = -1;\n    volume: number = 1.0;\n    oscRefreshEventTimer: number = 0;\n    oscEnabled: boolean = true;\n    enableMetronome: boolean = false;\n    countInMetronome: boolean = false;\n    renderingSong: boolean = false;\n    heldMods: HeldMod[] = [];\n    private wantToSkip: boolean = false;\n    private playheadInternal: number = 0.0;\n    private bar: number = 0;\n    private prevBar: number | null = null;\n    private nextBar: number | null = null;\n    private beat: number = 0;\n    private part: number = 0;\n    private tick: number = 0;\n    isAtStartOfTick: boolean = true;\n    isAtEndOfTick: boolean = true;\n    tickSampleCountdown: number = 0;\n    private modValues: (number | null)[] = [];\n    modInsValues: (number | null)[][][] = [];\n    private nextModValues: (number | null)[] = [];\n    nextModInsValues: (number | null)[][][] = [];\n    private isPlayingSong: boolean = false;\n    private isRecording: boolean = false;\n    private liveInputEndTime: number = 0.0;\n    private browserAutomaticallyClearsAudioBuffer: boolean = true; // Assume true until proven otherwise. Older Chrome does not clear the buffer so it needs to be cleared manually.\n\n    static readonly tempFilterStartCoefficients: FilterCoefficients = new FilterCoefficients();\n    static readonly tempFilterEndCoefficients: FilterCoefficients = new FilterCoefficients();\n    private tempDrumSetControlPoint: FilterControlPoint = new FilterControlPoint();\n    tempFrequencyResponse: FrequencyResponse = new FrequencyResponse();\n    loopBarStart: number = -1;\n    loopBarEnd: number = -1;\n\n    private static readonly fmSynthFunctionCache: Dictionary<Function> = {};\n    private static readonly fm6SynthFunctionCache: Dictionary<Function> = {};\n    private static readonly effectsFunctionCache: { [signature: string]: Function } = {};\n    private static readonly pickedStringFunctionCache: Function[] = Array(3).fill(undefined); // keep in sync with the number of unison voices.\n\t// TODO: re-implement slarmoo's changes to the instrument synths, but in stereo!\n    //private static readonly spectrumFunctionCache: Function[] = [];\n\t//private static readonly noiseFunctionCache: Function[] = [];\n    //private static readonly drumFunctionCache: Function[] = [];\n    //private static readonly chipFunctionCache: Function[] = [];\n    //private static readonly pulseFunctionCache: Function[] = [];\n    //private static readonly harmonicsFunctionCache: Function[] = [];\n    //private static readonly loopableChipFunctionCache: Function[][] = Array(Config.unisonVoicesMax + 1).fill([]); //For loopable chips, we have a matrix where the rows represent voices and the columns represent loop types\n\n    readonly channels: ChannelState[] = [];\n    private readonly tonePool: Deque<Tone> = new Deque<Tone>();\n    private readonly tempMatchedPitchTones: Array<Tone | null> = Array(Config.maxChordSize).fill(null);\n\n    private startedMetronome: boolean = false;\n    private metronomeSamplesRemaining: number = -1;\n    private metronomeAmplitude: number = 0.0;\n    private metronomePrevAmplitude: number = 0.0;\n    private metronomeFilter: number = 0.0;\n    private limit: number = 0.0;\n\n    songEqFilterVolume: number = 1.0;\n    songEqFilterVolumeDelta: number = 0.0;\n    readonly songEqFiltersL: DynamicBiquadFilter[] = [];\n    readonly songEqFiltersR: DynamicBiquadFilter[] = [];\n    songEqFilterCount: number = 0;\n    initialSongEqFilterInput1L: number = 0.0;\n    initialSongEqFilterInput2L: number = 0.0;\n    initialSongEqFilterInput1R: number = 0.0;\n    initialSongEqFilterInput2R: number = 0.0;\n\n    private tempInstrumentSampleBufferL: Float32Array | null = null;\n    private tempInstrumentSampleBufferR: Float32Array | null = null;\n\n    private audioCtx: any | null = null;\n    private scriptNode: any | null = null;\n\n    get playing(): boolean {\n        return this.isPlayingSong;\n    }\n\n    get recording(): boolean {\n        return this.isRecording;\n    }\n\n    get playhead(): number {\n        return this.playheadInternal;\n    }\n\n    set playhead(value: number) {\n        if (this.song != null) {\n            this.playheadInternal = Math.max(0, Math.min(this.song.barCount, value));\n            let remainder: number = this.playheadInternal;\n            this.bar = Math.floor(remainder);\n            remainder = this.song.beatsPerBar * (remainder - this.bar);\n            this.beat = Math.floor(remainder);\n            remainder = Config.partsPerBeat * (remainder - this.beat);\n            this.part = Math.floor(remainder);\n            remainder = Config.ticksPerPart * (remainder - this.part);\n            this.tick = Math.floor(remainder);\n            this.tickSampleCountdown = 0;\n            this.isAtStartOfTick = true;\n            this.prevBar = null;\n        }\n    }\n\n    getSamplesPerBar(): number {\n        if (this.song == null) throw new Error();\n        return this.getSamplesPerTick() * Config.ticksPerPart * Config.partsPerBeat * this.song.beatsPerBar;\n    }\n\n    getTicksIntoBar(): number {\n        return (this.beat * Config.partsPerBeat + this.part) * Config.ticksPerPart + this.tick;\n    }\n    getCurrentPart(): number {\n        return (this.beat * Config.partsPerBeat + this.part);\n    }\n\n    private findPartsInBar(bar: number): number {\n        if (this.song == null) return 0;\n        let partsInBar: number = Config.partsPerBeat * this.song.beatsPerBar;\n        for (let channel: number = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\n            let pattern: Pattern | null = this.song.getPattern(channel, bar);\n            if (pattern != null) {\n                let instrument: Instrument = this.song.channels[channel].instruments[pattern.instruments[0]];\n                for (let mod: number = 0; mod < Config.modCount; mod++) {\n                    if (instrument.modulators[mod] == Config.modulators.dictionary[\"next bar\"].index) {\n                        for (const note of pattern.notes) {\n                            if (note.pitches[0] == (Config.modCount - 1 - mod)) {\n                                // Find the earliest next bar note.\n                                if (partsInBar > note.start)\n                                    partsInBar = note.start;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return partsInBar;\n    }\n\n    // Returns the total samples in the song\n    getTotalSamples(enableIntro: boolean, enableOutro: boolean, loop: number): number {\n        if (this.song == null)\n            return -1;\n\n        // Compute the window to be checked (start bar to end bar)\n        let startBar: number = enableIntro ? 0 : this.song.loopStart;\n        let endBar: number = enableOutro ? this.song.barCount : (this.song.loopStart + this.song.loopLength);\n        let hasTempoMods: boolean = false;\n        let hasNextBarMods: boolean = false;\n        let prevTempo: number = this.song.tempo;\n\n        // Determine if any tempo or next bar mods happen anywhere in the window\n        for (let channel: number = this.song.getChannelCount() - 1; channel >= this.song.pitchChannelCount + this.song.noiseChannelCount; channel--) {\n            for (let bar: number = startBar; bar < endBar; bar++) {\n                let pattern: Pattern | null = this.song.getPattern(channel, bar);\n                if (pattern != null) {\n                    let instrument: Instrument = this.song.channels[channel].instruments[pattern.instruments[0]];\n                    for (let mod: number = 0; mod < Config.modCount; mod++) {\n                        if (instrument.modulators[mod] == Config.modulators.dictionary[\"tempo\"].index) {\n                            hasTempoMods = true;\n                        }\n                        if (instrument.modulators[mod] == Config.modulators.dictionary[\"next bar\"].index) {\n                            hasNextBarMods = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        // If intro is not zero length, determine what the \"entry\" tempo is going into the start part, by looking at mods that came before...\n        if (startBar > 0) {\n            let latestTempoPin: number | null = null;\n            let latestTempoValue: number = 0;\n\n            for (let bar: number = startBar - 1; bar >= 0; bar--) {\n                for (let channel: number = this.song.getChannelCount() - 1; channel >= this.song.pitchChannelCount + this.song.noiseChannelCount; channel--) {\n                    let pattern = this.song.getPattern(channel, bar);\n\n                    if (pattern != null) {\n                        let instrumentIdx: number = pattern.instruments[0];\n                        let instrument: Instrument = this.song.channels[channel].instruments[instrumentIdx];\n\n                        let partsInBar: number = this.findPartsInBar(bar);\n\n                        for (const note of pattern.notes) {\n                            if (instrument.modulators[Config.modCount - 1 - note.pitches[0]] == Config.modulators.dictionary[\"tempo\"].index) {\n                                if (note.start < partsInBar && (latestTempoPin == null || note.end > latestTempoPin)) {\n                                    if (note.end <= partsInBar) {\n                                        latestTempoPin = note.end;\n                                        latestTempoValue = note.pins[note.pins.length - 1].size;\n                                    }\n                                    else {\n                                        latestTempoPin = partsInBar;\n                                        // Find the pin where bar change happens, and compute where pin volume would be at that time\n                                        for (let pinIdx = 0; pinIdx < note.pins.length; pinIdx++) {\n                                            if (note.pins[pinIdx].time + note.start > partsInBar) {\n                                                const transitionLength: number = note.pins[pinIdx].time - note.pins[pinIdx - 1].time;\n                                                const toNextBarLength: number = partsInBar - note.start - note.pins[pinIdx - 1].time;\n                                                const deltaVolume: number = note.pins[pinIdx].size - note.pins[pinIdx - 1].size;\n\n                                                latestTempoValue = Math.round(note.pins[pinIdx - 1].size + deltaVolume * toNextBarLength / transitionLength);\n                                                pinIdx = note.pins.length;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // Done once you process a pattern where tempo mods happened, since the search happens backward\n                if (latestTempoPin != null) {\n                    prevTempo = latestTempoValue + Config.modulators.dictionary[\"tempo\"].convertRealFactor;\n                    bar = -1;\n                }\n            }\n        }\n\n        if (hasTempoMods || hasNextBarMods) {\n            // Run from start bar to end bar and observe looping, computing average tempo across each bar\n            let bar: number = startBar;\n            let ended: boolean = false;\n            let totalSamples: number = 0;\n\n            while (!ended) {\n                // Compute the subsection of the pattern that will play\n                let partsInBar: number = Config.partsPerBeat * this.song.beatsPerBar;\n                let currentPart: number = 0;\n\n                if (hasNextBarMods) {\n                    partsInBar = this.findPartsInBar(bar);\n                }\n\n                // Compute average tempo in this tick window, or use last tempo if nothing happened\n                if (hasTempoMods) {\n                    let foundMod: boolean = false;\n                    for (let channel: number = this.song.getChannelCount() - 1; channel >= this.song.pitchChannelCount + this.song.noiseChannelCount; channel--) {\n                        if (foundMod == false) {\n                            let pattern: Pattern | null = this.song.getPattern(channel, bar);\n                            if (pattern != null) {\n                                let instrument: Instrument = this.song.channels[channel].instruments[pattern.instruments[0]];\n                                for (let mod: number = 0; mod < Config.modCount; mod++) {\n                                    if (foundMod == false && instrument.modulators[mod] == Config.modulators.dictionary[\"tempo\"].index\n                                        && pattern.notes.find(n => n.pitches[0] == (Config.modCount - 1 - mod))) {\n                                        // Only the first tempo mod instrument for this bar will be checked (well, the first with a note in this bar).\n                                        foundMod = true;\n                                        // Need to re-sort the notes by start time to make the next part much less painful.\n                                        pattern.notes.sort(function (a, b) { return (a.start == b.start) ? a.pitches[0] - b.pitches[0] : a.start - b.start; });\n                                        for (const note of pattern.notes) {\n                                            if (note.pitches[0] == (Config.modCount - 1 - mod)) {\n                                                // Compute samples up to this note\n                                                totalSamples += (Math.min(partsInBar - currentPart, note.start - currentPart)) * Config.ticksPerPart * this.getSamplesPerTickSpecificBPM(prevTempo);\n\n                                                if (note.start < partsInBar) {\n                                                    for (let pinIdx: number = 1; pinIdx < note.pins.length; pinIdx++) {\n                                                        // Compute samples up to this pin\n                                                        if (note.pins[pinIdx - 1].time + note.start <= partsInBar) {\n                                                            const tickLength: number = Config.ticksPerPart * Math.min(partsInBar - (note.start + note.pins[pinIdx - 1].time), note.pins[pinIdx].time - note.pins[pinIdx - 1].time);\n                                                            const prevPinTempo: number = note.pins[pinIdx - 1].size + Config.modulators.dictionary[\"tempo\"].convertRealFactor;\n                                                            let currPinTempo: number = note.pins[pinIdx].size + Config.modulators.dictionary[\"tempo\"].convertRealFactor;\n                                                            if (note.pins[pinIdx].time + note.start > partsInBar) {\n                                                                // Compute an intermediary tempo since bar changed over mid-pin. Maybe I'm deep in \"what if\" territory now!\n                                                                currPinTempo = note.pins[pinIdx - 1].size + (note.pins[pinIdx].size - note.pins[pinIdx - 1].size) * (partsInBar - (note.start + note.pins[pinIdx - 1].time)) / (note.pins[pinIdx].time - note.pins[pinIdx - 1].time) + Config.modulators.dictionary[\"tempo\"].convertRealFactor;\n                                                            }\n                                                            let bpmScalar: number = Config.partsPerBeat * Config.ticksPerPart / 60;\n\n                                                            if (currPinTempo != prevPinTempo) {\n\n                                                                // Definite integral of SamplesPerTick w/r/t beats to find total samples from start point to end point for a variable tempo\n                                                                // The starting formula is\n                                                                // SamplesPerTick = SamplesPerSec / ((PartsPerBeat * TicksPerPart) / SecPerMin) * BeatsPerMin )\n                                                                //\n                                                                // This is an expression of samples per tick \"instantaneously\", and it can be multiplied by a number of ticks to get a sample count.\n                                                                // But this isn't the full story. BeatsPerMin, e.g. tempo, changes throughout the interval so it has to be expressed in terms of ticks, \"t\"\n                                                                // ( Also from now on PartsPerBeat, TicksPerPart, and SecPerMin are combined into one scalar, called \"BPMScalar\" )\n                                                                // Substituting BPM for a step variable that moves with respect to the current tick, we get\n                                                                // SamplesPerTick = SamplesPerSec / (BPMScalar * ( (EndTempo - StartTempo / TickLength) * t + StartTempo ) )\n                                                                //\n                                                                // When this equation is integrated from 0 to TickLength with respect to t, we get the following expression:\n                                                                //   Samples = - SamplesPerSec * TickLength * ( log( BPMScalar * EndTempo * TickLength ) - log( BPMScalar * StartTempo * TickLength ) ) / BPMScalar * ( StartTempo - EndTempo )\n\n                                                                totalSamples += - this.samplesPerSecond * tickLength * (Math.log(bpmScalar * currPinTempo * tickLength) - Math.log(bpmScalar * prevPinTempo * tickLength)) / (bpmScalar * (prevPinTempo - currPinTempo));\n\n                                                            }\n                                                            else {\n\n                                                                // No tempo change between the two pins.\n                                                                totalSamples += tickLength * this.getSamplesPerTickSpecificBPM(currPinTempo);\n\n                                                            }\n                                                            prevTempo = currPinTempo;\n                                                        }\n                                                        currentPart = Math.min(note.start + note.pins[pinIdx].time, partsInBar);\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // Compute samples for the rest of the bar\n                totalSamples += (partsInBar - currentPart) * Config.ticksPerPart * this.getSamplesPerTickSpecificBPM(prevTempo);\n\n                bar++;\n                if (loop != 0 && bar == this.song.loopStart + this.song.loopLength) {\n                    bar = this.song.loopStart;\n                    if (loop > 0) loop--;\n                }\n                if (bar >= endBar) {\n                    ended = true;\n                }\n\n            }\n\n            return Math.ceil(totalSamples);\n        }\n        else {\n            // No tempo or next bar mods... phew! Just calculate normally.\n            return this.getSamplesPerBar() * this.getTotalBars(enableIntro, enableOutro, loop);\n        }\n    }\n\n    getTotalBars(enableIntro: boolean, enableOutro: boolean, useLoopCount: number = this.loopRepeatCount): number {\n        if (this.song == null) throw new Error();\n        let bars: number = this.song.loopLength * (useLoopCount + 1);\n        if (enableIntro) bars += this.song.loopStart;\n        if (enableOutro) bars += this.song.barCount - (this.song.loopStart + this.song.loopLength);\n        return bars;\n    }\n\n    constructor(song: Song | string | null = null) {\n        this.computeDelayBufferSizes();\n        if (song != null) this.setSong(song);\n    }\n\n    setSong(song: Song | string): void {\n        if (typeof (song) == \"string\") {\n            this.song = new Song(song);\n        } else if (song instanceof Song) {\n            this.song = song;\n        }\n        this.prevBar = null;\n    }\n\n    private computeDelayBufferSizes(): void {\n        this.panningDelayBufferSize = fittingPowerOfTwo(this.samplesPerSecond * Config.panDelaySecondsMax);\n        this.panningDelayBufferMask = this.panningDelayBufferSize - 1;\n        this.flangerDelayBufferSize = fittingPowerOfTwo(this.samplesPerSecond * Config.flangerMaxDelay);\n        this.flangerDelayBufferMask = this.flangerDelayBufferSize - 1;\n        this.chorusDelayBufferSize = fittingPowerOfTwo(this.samplesPerSecond * Config.chorusMaxDelay);\n        this.chorusDelayBufferMask = this.chorusDelayBufferSize - 1;\n    }\n\n    private activateAudio(): void {\n        const bufferSize: number = this.anticipatePoorPerformance ? (this.preferLowerLatency ? 2048 : 4096) : (this.preferLowerLatency ? 512 : 2048);\n        if (this.audioCtx == null || this.scriptNode == null || this.scriptNode.bufferSize != bufferSize) {\n            if (this.scriptNode != null) this.deactivateAudio();\n            const latencyHint: string = this.anticipatePoorPerformance ? (this.preferLowerLatency ? \"balanced\" : \"playback\") : (this.preferLowerLatency ? \"interactive\" : \"balanced\");\n            this.audioCtx = this.audioCtx || new (window.AudioContext || window.webkitAudioContext)({ latencyHint: latencyHint });\n            this.samplesPerSecond = this.audioCtx.sampleRate;\n            this.scriptNode = this.audioCtx.createScriptProcessor ? this.audioCtx.createScriptProcessor(bufferSize, 0, 2) : this.audioCtx.createJavaScriptNode(bufferSize, 0, 2); // bufferSize samples per callback buffer, 0 input channels, 2 output channels (left/right)\n            this.scriptNode.onaudioprocess = this.audioProcessCallback;\n            this.scriptNode.channelCountMode = 'explicit';\n            this.scriptNode.channelInterpretation = 'speakers';\n            this.scriptNode.connect(this.audioCtx.destination);\n\n            this.computeDelayBufferSizes();\n        }\n        this.audioCtx.resume();\n    }\n\n    private deactivateAudio(): void {\n        if (this.audioCtx != null && this.scriptNode != null) {\n            this.scriptNode.disconnect(this.audioCtx.destination);\n            this.scriptNode = null;\n            if (this.audioCtx.close) this.audioCtx.close(); // firefox is missing this function?\n            this.audioCtx = null;\n        }\n    }\n\n    maintainLiveInput(): void {\n        this.activateAudio();\n        this.liveInputEndTime = performance.now() + 10000.0;\n    }\n\n    play(): void {\n        if (this.isPlayingSong) return;\n        this.initModFilters(this.song);\n        this.computeLatestModValues();\n        this.activateAudio();\n        this.warmUpSynthesizer(this.song);\n        this.isPlayingSong = true;\n    }\n\n    pause(): void {\n        if (!this.isPlayingSong) return;\n        this.isPlayingSong = false;\n        this.isRecording = false;\n        this.preferLowerLatency = false;\n        this.modValues = [];\n        this.nextModValues = [];\n        this.heldMods = [];\n        if (this.song != null) {\n            this.song.inVolumeCap = 0.0;\n            this.song.outVolumeCap = 0.0;\n            this.song.outVolumeCapL = 0.0;\n            this.song.outVolumeCapR = 0.0;\n            this.song.tmpEqFilterStart = null;\n            this.song.tmpEqFilterEnd = null;\n            for (let channelIndex: number = 0; channelIndex < this.song.pitchChannelCount + this.song.noiseChannelCount; channelIndex++) {\n                this.modInsValues[channelIndex] = [];\n                this.nextModInsValues[channelIndex] = [];\n            }\n        }\n    }\n\n    startRecording(): void {\n        this.preferLowerLatency = true;\n        this.isRecording = true;\n        this.play();\n    }\n\n    resetEffects(): void {\n        this.limit = 0.0;\n        this.freeAllTones();\n        if (this.song != null) {\n            for (const channelState of this.channels) {\n                for (const instrumentState of channelState.instruments) {\n                    instrumentState.resetAllEffects();\n                }\n            }\n        }\n    }\n\n    setModValue(volumeStart: number, volumeEnd: number, channelIndex: number, instrumentIndex: number, setting: number): number {\n        let val: number = volumeStart + Config.modulators[setting].convertRealFactor;\n        let nextVal: number = volumeEnd + Config.modulators[setting].convertRealFactor;\n        if (Config.modulators[setting].forSong) {\n            if (this.modValues[setting] == null || this.modValues[setting] != val || this.nextModValues[setting] != nextVal) {\n                this.modValues[setting] = val;\n                this.nextModValues[setting] = nextVal;\n            }\n        } else {\n            if (this.modInsValues[channelIndex][instrumentIndex][setting] == null\n                || this.modInsValues[channelIndex][instrumentIndex][setting] != val\n                || this.nextModInsValues[channelIndex][instrumentIndex][setting] != nextVal) {\n                this.modInsValues[channelIndex][instrumentIndex][setting] = val;\n                this.nextModInsValues[channelIndex][instrumentIndex][setting] = nextVal;\n            }\n        }\n\n        return val;\n    }\n\n    getModValue(setting: number, channel?: number | null, instrument?: number | null, nextVal?: boolean): number {\n        const forSong: boolean = Config.modulators[setting].forSong;\n        if (forSong) {\n            if (this.modValues[setting] != null && this.nextModValues[setting] != null) {\n                return nextVal ? this.nextModValues[setting]! : this.modValues[setting]!;\n            }\n        } else if (channel != undefined && instrument != undefined) {\n            if (this.modInsValues[channel][instrument][setting] != null && this.nextModInsValues[channel][instrument][setting] != null) {\n                return nextVal ? this.nextModInsValues[channel][instrument][setting]! : this.modInsValues[channel][instrument][setting]!;\n            }\n        }\n        return -1;\n    }\n\n    // Checks if any mod is active for the given channel/instrument OR if any mod is active for the song scope. Could split the logic if needed later.\n    isAnyModActive(channel: number, instrument: number): boolean {\n        for (let setting: number = 0; setting < Config.modulators.length; setting++) {\n            if ((this.modValues != undefined && this.modValues[setting] != null)\n                || (this.modInsValues != undefined && this.modInsValues[channel] != undefined && this.modInsValues[channel][instrument] != undefined && this.modInsValues[channel][instrument][setting] != null)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    unsetMod(setting: number, channel?: number, instrument?: number) {\n        if (this.isModActive(setting) || (channel != undefined && instrument != undefined && this.isModActive(setting, channel, instrument))) {\n            this.modValues[setting] = null;\n            this.nextModValues[setting] = null;\n            for (let i: number = 0; i < this.heldMods.length; i++) {\n                if (channel != undefined && instrument != undefined) {\n                    if (this.heldMods[i].channelIndex == channel && this.heldMods[i].instrumentIndex == instrument && this.heldMods[i].setting == setting)\n                        this.heldMods.splice(i, 1);\n                } else {\n                    if (this.heldMods[i].setting == setting)\n                        this.heldMods.splice(i, 1);\n                }\n            }\n            if (channel != undefined && instrument != undefined) {\n                this.modInsValues[channel][instrument][setting] = null;\n                this.nextModInsValues[channel][instrument][setting] = null;\n            }\n        }\n    }\n\n    isFilterModActive(forNoteFilter: boolean, channelIdx: number, instrumentIdx: number, forSong?: boolean) {\n        const instrument: Instrument = this.song!.channels[channelIdx].instruments[instrumentIdx];\n\n        if (forNoteFilter) {\n            if (instrument.noteFilterType)\n                return false;\n            if (instrument.tmpNoteFilterEnd != null)\n                return true;\n        }\n        else {\n            if (forSong) {\n                if (this?.song?.tmpEqFilterEnd != null)\n                    return true;\n            } else {\n                for (let i: number = 0; i < instrument.effects.length; i++) {\n                    let effect: Effect = instrument.effects[i] as Effect\n                    if (effect.eqFilterType)\n                        return false;\n                    if (effect.tmpEqFilterEnd != null)\n                        return true;\n                }\n            }\n        }  \n            \n        return false\n    }\n\n    isModActive(setting: number, channel?: number, instrument?: number): boolean {\n        const forSong: boolean = Config.modulators[setting].forSong;\n        if (forSong) {\n            return (this.modValues != undefined && this.modValues[setting] != null);\n        } else if (channel != undefined && instrument != undefined && this.modInsValues != undefined && this.modInsValues[channel] != null && this.modInsValues[channel][instrument] != null) {\n            return (this.modInsValues[channel][instrument][setting] != null);\n        }\n        return false;\n    }\n\n    // Force a modulator to be held at the given volumeStart for a brief duration.\n    forceHoldMods(volumeStart: number, channelIndex: number, instrumentIndex: number, setting: number): void {\n        let found: boolean = false;\n        for (let i: number = 0; i < this.heldMods.length; i++) {\n            if (this.heldMods[i].channelIndex == channelIndex && this.heldMods[i].instrumentIndex == instrumentIndex && this.heldMods[i].setting == setting) {\n                this.heldMods[i].volume = volumeStart;\n                this.heldMods[i].holdFor = 24;\n                found = true;\n            }\n        }\n        // Default: hold for 24 ticks / 12 parts (half a beat).\n        if (!found)\n            this.heldMods.push({ volume: volumeStart, channelIndex: channelIndex, instrumentIndex: instrumentIndex, setting: setting, holdFor: 24 });\n    }\n\n    snapToStart(): void {\n        this.bar = 0;\n        this.resetEffects();\n        this.snapToBar();\n    }\n\n    goToBar(bar: number): void {\n        this.bar = bar;\n        this.resetEffects();\n        this.playheadInternal = this.bar;\n    }\n\n    snapToBar(): void {\n        this.playheadInternal = this.bar;\n        this.beat = 0;\n        this.part = 0;\n        this.tick = 0;\n        this.tickSampleCountdown = 0;\n    }\n\n    jumpIntoLoop(): void {\n        if (!this.song) return;\n        if (this.bar < this.song.loopStart || this.bar >= this.song.loopStart + this.song.loopLength) {\n            const oldBar: number = this.bar;\n            this.bar = this.song.loopStart;\n            this.playheadInternal += this.bar - oldBar;\n\n            if (this.playing)\n                this.computeLatestModValues();\n        }\n    }\n\n    goToNextBar(): void {\n        if (!this.song) return;\n        this.prevBar = this.bar;\n        const oldBar: number = this.bar;\n        this.bar++;\n        if (this.bar >= this.song.barCount) {\n            this.bar = 0;\n        }\n        this.playheadInternal += this.bar - oldBar;\n\n        if (this.playing)\n            this.computeLatestModValues();\n    }\n\n    goToPrevBar(): void {\n        if (!this.song) return;\n        this.prevBar = null;\n        const oldBar: number = this.bar;\n        this.bar--;\n        if (this.bar < 0 || this.bar >= this.song.barCount) {\n            this.bar = this.song.barCount - 1;\n        }\n        this.playheadInternal += this.bar - oldBar;\n\n        if (this.playing)\n            this.computeLatestModValues();\n    }\n\n    private getNextBar(): number {\n        let nextBar: number = this.bar + 1;\n        if (this.isRecording) {\n            if (nextBar >= this.song!.barCount) {\n                nextBar = this.song!.barCount - 1;\n            }\n        } else if (this.bar == this.loopBarEnd && !this.renderingSong) {\n            nextBar = this.loopBarStart;\n        }\n        else if (this.loopRepeatCount != 0 && nextBar == Math.max(this.loopBarEnd + 1, this.song!.loopStart + this.song!.loopLength)) {\n            nextBar = this.song!.loopStart;\n        }\n        return nextBar;\n    }\n\n    skipBar(): void {\n        if (!this.song) return;\n        const samplesPerTick: number = this.getSamplesPerTick();\n        this.prevBar = this.bar; // Bugfix by LeoV\n        if (this.loopBarEnd != this.bar)\n            this.bar++;\n        else {\n            this.bar = this.loopBarStart;\n        }\n        this.beat = 0;\n        this.part = 0;\n        this.tick = 0;\n        this.tickSampleCountdown = samplesPerTick;\n        this.isAtStartOfTick = true;\n\n        if (this.loopRepeatCount != 0 && this.bar == Math.max(this.song.loopStart + this.song.loopLength, this.loopBarEnd)) {\n            this.bar = this.song.loopStart;\n            if (this.loopBarStart != -1)\n                this.bar = this.loopBarStart;\n            if (this.loopRepeatCount > 0) this.loopRepeatCount--;\n        }\n\n    }\n\n    private audioProcessCallback = (audioProcessingEvent: any): void => {\n        const outputBuffer = audioProcessingEvent.outputBuffer;\n        const outputDataL: Float32Array = outputBuffer.getChannelData(0);\n        const outputDataR: Float32Array = outputBuffer.getChannelData(1);\n\n        if (this.browserAutomaticallyClearsAudioBuffer && (outputDataL[0] != 0.0 || outputDataR[0] != 0.0 || outputDataL[outputBuffer.length - 1] != 0.0 || outputDataR[outputBuffer.length - 1] != 0.0)) {\n            // If the buffer is ever initially nonzero, then this must be an older browser that doesn't automatically clear the audio buffer.\n            this.browserAutomaticallyClearsAudioBuffer = false;\n        }\n        if (!this.browserAutomaticallyClearsAudioBuffer) {\n            // If this browser does not clear the buffer automatically, do so manually before continuing.\n            const length: number = outputBuffer.length;\n            for (let i: number = 0; i < length; i++) {\n                outputDataL[i] = 0.0;\n                outputDataR[i] = 0.0;\n            }\n        }\n\n        if (!this.isPlayingSong && performance.now() >= this.liveInputEndTime) {\n            this.deactivateAudio();\n        } else {\n            this.synthesize(outputDataL, outputDataR, outputBuffer.length, this.isPlayingSong);\n\n            if (this.oscEnabled) {\n                if (this.oscRefreshEventTimer <= 0) {\n                    events.raise(\"oscilloscopeUpdate\", outputDataL, outputDataR);\n                    this.oscRefreshEventTimer = 2;\n                } else {\n                    this.oscRefreshEventTimer--;\n                }\n            }\n        }\n    }\n\n    private computeSongState(samplesPerTick: number): void {\n                if (this.song == null) return;\n        \n                    const roundedSamplesPerTick: number = Math.ceil(samplesPerTick);\n                const samplesPerSecond: number = this.samplesPerSecond;\n        \n                    let eqFilterVolume: number = 1.0; //this.envelopeComputer.lowpassCutoffDecayVolumeCompensation;\n                if (this.song.eqFilterType) {\n                        // Simple EQ filter (old style). For analysis, using random filters from normal style since they are N/A in this context.\n                            const eqFilterSettingsStart: FilterSettings = this.song.eqFilter;\n                        if (this.song.eqSubFilters[1] == null)\n                                this.song.eqSubFilters[1] = new FilterSettings();\n                        const eqFilterSettingsEnd: FilterSettings = this.song.eqSubFilters[1];\n            \n                            // Change location based on slider values\n                            let startSimpleFreq: number = this.song.eqFilterSimpleCut;\n                        let startSimpleGain: number = this.song.eqFilterSimplePeak;\n                        let endSimpleFreq: number = this.song.eqFilterSimpleCut;\n                        let endSimpleGain: number = this.song.eqFilterSimplePeak;\n            \n                            let filterChanges: boolean = false;\n            \n                            // if (synth.isModActive(Config.modulators.dictionary[\"eq filt cut\"].index, channelIndex, instrumentIndex)) {\n                            //     startSimpleFreq = synth.getModValue(Config.modulators.dictionary[\"eq filt cut\"].index, channelIndex, instrumentIndex, false);\n                            //     endSimpleFreq = synth.getModValue(Config.modulators.dictionary[\"eq filt cut\"].index, channelIndex, instrumentIndex, true);\n                            //     filterChanges = true;\n                            // }\n                            // if (synth.isModActive(Config.modulators.dictionary[\"eq filt peak\"].index, channelIndex, instrumentIndex)) {\n                            //     startSimpleGain = synth.getModValue(Config.modulators.dictionary[\"eq filt peak\"].index, channelIndex, instrumentIndex, false);\n                            //     endSimpleGain = synth.getModValue(Config.modulators.dictionary[\"eq filt peak\"].index, channelIndex, instrumentIndex, true);\n                            //     filterChanges = true;\n                            // }\n                \n                            let startPoint: FilterControlPoint;\n            \n                            if (filterChanges) {\n                                    eqFilterSettingsStart.convertLegacySettingsForSynth(startSimpleFreq, startSimpleGain);\n                                    eqFilterSettingsEnd.convertLegacySettingsForSynth(endSimpleFreq, endSimpleGain);\n                    \n                                        startPoint = eqFilterSettingsStart.controlPoints[0];\n                                    let endPoint: FilterControlPoint = eqFilterSettingsEnd.controlPoints[0];\n                    \n                                        startPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, 1.0, 1.0);\n                                    endPoint.toCoefficients(Synth.tempFilterEndCoefficients, samplesPerSecond, 1.0, 1.0);\n                    \n                                        if (this.songEqFiltersL.length < 1) this.songEqFiltersL[0] = new DynamicBiquadFilter();\n                                    this.songEqFiltersL[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\n                                    if (this.songEqFiltersR.length < 1) this.songEqFiltersR[0] = new DynamicBiquadFilter();\n                                    this.songEqFiltersR[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\n                    \n                                    } else {\n                                eqFilterSettingsStart.convertLegacySettingsForSynth(startSimpleFreq, startSimpleGain, true);\n                \n                                    startPoint = eqFilterSettingsStart.controlPoints[0];\n                \n                                    startPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, 1.0, 1.0);\n                \n                                    if (this.songEqFiltersL.length < 1) this.songEqFiltersL[0] = new DynamicBiquadFilter();\n                                this.songEqFiltersL[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterStartCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\n                                if (this.songEqFiltersR.length < 1) this.songEqFiltersR[0] = new DynamicBiquadFilter();\n                                this.songEqFiltersR[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterStartCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\n                \n                                }\n            \n                            eqFilterVolume *= startPoint.getVolumeCompensationMult();\n            \n                            this.songEqFilterCount = 1;\n                        eqFilterVolume = Math.min(3.0, eqFilterVolume);\n                    } else {\n                        const eqFilterSettings: FilterSettings = (this.song.tmpEqFilterStart != null) ? this.song.tmpEqFilterStart : this.song.eqFilter;\n                        //const eqAllFreqsEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.eqFilterAllFreqs];\n                            //const eqAllFreqsEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.eqFilterAllFreqs];\n                            for (let i: number = 0; i < eqFilterSettings.controlPointCount; i++) {\n                                    //const eqFreqEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.eqFilterFreq0 + i];\n                                        //const eqFreqEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.eqFilterFreq0 + i];\n                                        //const eqPeakEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.eqFilterGain0 + i];\n                                        //const eqPeakEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.eqFilterGain0 + i];\n                                        let startPoint: FilterControlPoint = eqFilterSettings.controlPoints[i];\n                                    let endPoint: FilterControlPoint = (this.song.tmpEqFilterEnd != null && this.song.tmpEqFilterEnd.controlPoints[i] != null) ? this.song.tmpEqFilterEnd.controlPoints[i] : eqFilterSettings.controlPoints[i];\n                    \n                                        // If switching dot type, do it all at once and do not try to interpolate since no valid interpolation exists.\n                                        if (startPoint.type != endPoint.type) {\n                                                startPoint = endPoint;\n                                            }\n                    \n                                        startPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, /*eqAllFreqsEnvelopeStart * eqFreqEnvelopeStart*/ 1.0, /*eqPeakEnvelopeStart*/ 1.0);\n                                    endPoint.toCoefficients(Synth.tempFilterEndCoefficients, samplesPerSecond, /*eqAllFreqsEnvelopeEnd   * eqFreqEnvelopeEnd*/   1.0, /*eqPeakEnvelopeEnd*/   1.0);\n                                    if (this.songEqFiltersL.length <= i) this.songEqFiltersL[i] = new DynamicBiquadFilter();\n                                    this.songEqFiltersL[i].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\n                                    if (this.songEqFiltersR.length <= i) this.songEqFiltersR[i] = new DynamicBiquadFilter();\n                                    this.songEqFiltersR[i].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\n                                    eqFilterVolume *= startPoint.getVolumeCompensationMult();\n                    \n                                    }\n                        this.songEqFilterCount = eqFilterSettings.controlPointCount;\n                        eqFilterVolume = Math.min(3.0, eqFilterVolume);\n                    }\n        \n                    let eqFilterVolumeStart: number = eqFilterVolume;\n                let eqFilterVolumeEnd: number = eqFilterVolume;\n        \n                    this.songEqFilterVolume = eqFilterVolumeStart;\n                this.songEqFilterVolumeDelta = (eqFilterVolumeEnd - eqFilterVolumeStart) / roundedSamplesPerTick;\n            }\n\n    synthesize(outputDataL: Float32Array, outputDataR: Float32Array, outputBufferLength: number, playSong: boolean = true): void {\n        if (this.song == null) {\n            for (let i: number = 0; i < outputBufferLength; i++) {\n                outputDataL[i] = 0.0;\n                outputDataR[i] = 0.0;\n            }\n            this.deactivateAudio();\n            return;\n        }\n\n        const song: Song = this.song;\n        this.song.inVolumeCap = 0.0 // Reset volume cap for this run\n        this.song.outVolumeCap = 0.0;\n        this.song.outVolumeCapL = 0.0;\n        this.song.outVolumeCapR = 0.0;\n\n        let samplesPerTick: number = this.getSamplesPerTick();\n        let ended: boolean = false;\n\n        // Check the bounds of the playhead:\n        if (this.tickSampleCountdown <= 0 || this.tickSampleCountdown > samplesPerTick) {\n            this.tickSampleCountdown = samplesPerTick;\n            this.isAtStartOfTick = true;\n        }\n        if (playSong) {\n            if (this.beat >= song.beatsPerBar) {\n                this.beat = 0;\n                this.part = 0;\n                this.tick = 0;\n                this.tickSampleCountdown = samplesPerTick;\n                this.isAtStartOfTick = true;\n\n                this.prevBar = this.bar;\n                this.bar = this.getNextBar();\n                if (this.bar <= this.prevBar && this.loopRepeatCount > 0) this.loopRepeatCount--;\n\n            }\n            if (this.bar >= song.barCount) {\n                this.bar = 0;\n                if (this.loopRepeatCount != -1) {\n                    ended = true;\n                    this.pause();\n                }\n            }\n        }\n\n        //const synthStartTime: number = performance.now();\n\n        this.syncSongState();\n\n        if (this.tempInstrumentSampleBufferL == null || this.tempInstrumentSampleBufferL.length < outputBufferLength || this.tempInstrumentSampleBufferR == null || this.tempInstrumentSampleBufferR.length < outputBufferLength) {\n            this.tempInstrumentSampleBufferL = new Float32Array(outputBufferLength);\n            this.tempInstrumentSampleBufferR = new Float32Array(outputBufferLength);\n        }\n\n        // Post processing parameters:\n        const volume: number = +this.volume;\n        const limitDecay: number = 1.0 - Math.pow(0.5, this.song.limitDecay / this.samplesPerSecond);\n        const limitRise: number = 1.0 - Math.pow(0.5, this.song.limitRise / this.samplesPerSecond);\n        let limit: number = +this.limit;\n        let skippedBars = [];\n        let firstSkippedBufferIndex = -1;\n\n        let bufferIndex: number = 0;\n        while (bufferIndex < outputBufferLength && !ended) {\n\n            this.nextBar = this.getNextBar();\n            if (this.nextBar >= song.barCount) this.nextBar = null;\n\n            const samplesLeftInBuffer: number = outputBufferLength - bufferIndex;\n            const samplesLeftInTick: number = Math.ceil(this.tickSampleCountdown);\n            const runLength: number = Math.min(samplesLeftInTick, samplesLeftInBuffer);\n            const runEnd: number = bufferIndex + runLength;\n\n            // Handle mod synth\n            if (this.isPlayingSong || this.renderingSong) {\n\n                // First modulation pass. Determines active tones.\n                // Runs everything but Dot X/Y mods, to let them always come after morph.\n                for (let channelIndex: number = song.pitchChannelCount + song.noiseChannelCount; channelIndex < song.getChannelCount(); channelIndex++) {\n                    const channel: Channel = song.channels[channelIndex];\n                    const channelState: ChannelState = this.channels[channelIndex];\n\n                    this.determineCurrentActiveTones(song, channelIndex, samplesPerTick, playSong);\n                    for (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n                        const instrumentState: InstrumentState = channelState.instruments[instrumentIndex];\n                        for (let i: number = 0; i < instrumentState.activeModTones.count(); i++) {\n                            const tone: Tone = instrumentState.activeModTones.get(i);\n                            const channel: Channel = song.channels[channelIndex];\n                            const instrument: Instrument = channel.instruments[tone.instrumentIndex];\n                            let mod: number = Config.modCount - 1 - tone.pitches[0];\n\n                            if ((instrument.modulators[mod] == Config.modulators.dictionary[\"pre eq\"].index\n                                || instrument.modulators[mod] == Config.modulators.dictionary[\"post eq\"].index\n                                || instrument.modulators[mod] == Config.modulators.dictionary[\"song eq\"].index)\n                                && instrument.modFilterTypes[mod] != null && instrument.modFilterTypes[mod] > 0) {\n                                continue;\n                            }\n                            this.playModTone(song, channelIndex, samplesPerTick, bufferIndex, runLength, tone, false, false);\n                        }\n                    }\n                }\n\n                // Second modulation pass.\n                // Only for Dot X/Y mods.\n                for (let channelIndex: number = song.pitchChannelCount + song.noiseChannelCount; channelIndex < song.getChannelCount(); channelIndex++) {\n                    const channel: Channel = song.channels[channelIndex];\n                    const channelState: ChannelState = this.channels[channelIndex];\n\n                    for (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n                        const instrumentState: InstrumentState = channelState.instruments[instrumentIndex];\n                        for (let i: number = 0; i < instrumentState.activeModTones.count(); i++) {\n                            const tone: Tone = instrumentState.activeModTones.get(i);\n                            const channel: Channel = song.channels[channelIndex];\n                            const instrument: Instrument = channel.instruments[tone.instrumentIndex];\n                            let mod: number = Config.modCount - 1 - tone.pitches[0];\n\n                            if ((instrument.modulators[mod] == Config.modulators.dictionary[\"pre eq\"].index\n                                || instrument.modulators[mod] == Config.modulators.dictionary[\"post eq\"].index\n                                || instrument.modulators[mod] == Config.modulators.dictionary[\"song eq\"].index)\n                                && instrument.modFilterTypes[mod] != null && instrument.modFilterTypes[mod] > 0) {\n\n                                this.playModTone(song, channelIndex, samplesPerTick, bufferIndex, runLength, tone, false, false);\n                            }\n\n                        }\n                    }\n                }\n            }\n\n            // Handle next bar mods if they were set\n            if (this.wantToSkip) {\n                // Unable to continue, as we have skipped back to a previously visited bar without generating new samples, which means we are infinitely skipping.\n                // In this case processing will return before the designated number of samples are processed. In other words, silence will be generated.\n                let barVisited = skippedBars.includes(this.bar);\n                if (barVisited && bufferIndex == firstSkippedBufferIndex) {\n                    this.pause();\n                    return;\n                }\n                if (firstSkippedBufferIndex == -1) {\n                    firstSkippedBufferIndex = bufferIndex;\n                }\n                if (!barVisited)\n                    skippedBars.push(this.bar);\n                this.wantToSkip = false;\n                this.skipBar();\n                continue;\n            }\n\n            this.computeSongState(samplesPerTick);\n\n            for (let channelIndex: number = 0; channelIndex < song.pitchChannelCount + song.noiseChannelCount; channelIndex++) {\n                const channel: Channel = song.channels[channelIndex];\n                const channelState: ChannelState = this.channels[channelIndex];\n\n                if (this.isAtStartOfTick) {\n                    this.determineCurrentActiveTones(song, channelIndex, samplesPerTick, playSong && !this.countInMetronome);\n                    this.determineLiveInputTones(song, channelIndex, samplesPerTick);\n                }\n                for (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n                    const instrument: Instrument = channel.instruments[instrumentIndex];\n                    const instrumentState: InstrumentState = channelState.instruments[instrumentIndex];\n\n                    if (this.isAtStartOfTick) {\n                        let tonesPlayedInThisInstrument: number = instrumentState.activeTones.count() + instrumentState.liveInputTones.count();\n\n                        for (let i: number = 0; i < instrumentState.releasedTones.count(); i++) {\n                            const tone: Tone = instrumentState.releasedTones.get(i);\n                            if (tone.ticksSinceReleased >= Math.abs(instrument.getFadeOutTicks())) {\n                                this.freeReleasedTone(instrumentState, i);\n                                i--;\n                                continue;\n                            }\n                            const shouldFadeOutFast: boolean = (tonesPlayedInThisInstrument >= Config.maximumTonesPerChannel);\n                            this.computeTone(song, channelIndex, samplesPerTick, tone, true, shouldFadeOutFast);\n                            tonesPlayedInThisInstrument++;\n                        }\n\n                        if (instrumentState.awake) {\n                            if (!instrumentState.computed) {\n                                instrumentState.compute(this, instrument, samplesPerTick, Math.ceil(samplesPerTick), null, channelIndex, instrumentIndex);\n                            }\n\n                            instrumentState.computed = false;\n                            instrumentState.envelopeComputer.clearEnvelopes();\n                        }\n                    }\n\n                    for (let i: number = 0; i < instrumentState.activeTones.count(); i++) {\n                        const tone: Tone = instrumentState.activeTones.get(i);\n                        this.playTone(channelIndex, bufferIndex, runLength, tone);\n                    }\n\n                    for (let i: number = 0; i < instrumentState.liveInputTones.count(); i++) {\n                        const tone: Tone = instrumentState.liveInputTones.get(i);\n                        this.playTone(channelIndex, bufferIndex, runLength, tone);\n                    }\n\n                    for (let i: number = 0; i < instrumentState.releasedTones.count(); i++) {\n                        const tone: Tone = instrumentState.releasedTones.get(i);\n                        this.playTone(channelIndex, bufferIndex, runLength, tone);\n                    }\n\n                    if (instrumentState.awake) {\n                        Synth.effectsSynth(this, outputDataL, outputDataR, bufferIndex, runLength, instrumentState);\n                    }\n\n                    // Update LFO time for instruments (used to be deterministic based on bar position but now vibrato/arp speed messes that up!)\n\n                    const tickSampleCountdown: number = this.tickSampleCountdown;\n                    const startRatio: number = 1.0 - (tickSampleCountdown) / samplesPerTick;\n                    const endRatio: number = 1.0 - (tickSampleCountdown - runLength) / samplesPerTick;\n                    const ticksIntoBar: number = (this.beat * Config.partsPerBeat + this.part) * Config.ticksPerPart + this.tick;\n                    const partTimeTickStart: number = (ticksIntoBar) / Config.ticksPerPart;\n                    const partTimeTickEnd: number = (ticksIntoBar + 1) / Config.ticksPerPart;\n                    const partTimeStart: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * startRatio;\n                    const partTimeEnd: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * endRatio;\n                    let useVibratoSpeed: number = instrument.vibratoSpeed;\n\n                    instrumentState.vibratoTime = instrumentState.nextVibratoTime;\n\n                    //envelopeable vibrato speed?\n\n                    if (this.isModActive(Config.modulators.dictionary[\"vibrato speed\"].index, channelIndex, instrumentIndex)) {\n                        useVibratoSpeed = this.getModValue(Config.modulators.dictionary[\"vibrato speed\"].index, channelIndex, instrumentIndex);\n                    }\n\n                    if (useVibratoSpeed == 0) {\n                        instrumentState.vibratoTime = 0;\n                        instrumentState.nextVibratoTime = 0;\n                    }\n                    else {\n                        instrumentState.nextVibratoTime += useVibratoSpeed * 0.1 * (partTimeEnd - partTimeStart);\n                    }\n                }\n            }\n\n            if (this.enableMetronome || this.countInMetronome) {\n                if (this.part == 0) {\n                    if (!this.startedMetronome) {\n                        const midBeat: boolean = (song.beatsPerBar > 4 && (song.beatsPerBar % 2 == 0) && this.beat == song.beatsPerBar / 2);\n                        const periods: number = (this.beat == 0) ? 8 : midBeat ? 6 : 4;\n                        const hz: number = (this.beat == 0) ? 1600 : midBeat ? 1200 : 800;\n                        const amplitude: number = (this.beat == 0) ? 0.06 : midBeat ? 0.05 : 0.04;\n                        const samplesPerPeriod: number = this.samplesPerSecond / hz;\n                        const radiansPerSample: number = Math.PI * 2.0 / samplesPerPeriod;\n                        this.metronomeSamplesRemaining = Math.floor(samplesPerPeriod * periods);\n                        this.metronomeFilter = 2.0 * Math.cos(radiansPerSample);\n                        this.metronomeAmplitude = amplitude * Math.sin(radiansPerSample);\n                        this.metronomePrevAmplitude = 0.0;\n\n                        this.startedMetronome = true;\n                    }\n                    if (this.metronomeSamplesRemaining > 0) {\n                        const stopIndex: number = Math.min(runEnd, bufferIndex + this.metronomeSamplesRemaining);\n                        this.metronomeSamplesRemaining -= stopIndex - bufferIndex;\n                        for (let i: number = bufferIndex; i < stopIndex; i++) {\n                            outputDataL[i] += this.metronomeAmplitude;\n                            outputDataR[i] += this.metronomeAmplitude;\n                            const tempAmplitude: number = this.metronomeFilter * this.metronomeAmplitude - this.metronomePrevAmplitude;\n                            this.metronomePrevAmplitude = this.metronomeAmplitude;\n                            this.metronomeAmplitude = tempAmplitude;\n                        }\n                    }\n                } else {\n                    this.startedMetronome = false;\n                }\n            }\n\n            // Post processing:\n            for (let i: number = bufferIndex; i < runEnd; i++) {\n                //Song EQ\n                {\n                    let filtersL = this.songEqFiltersL;\n                    let filtersR = this.songEqFiltersR;\n                    const filterCount = this.songEqFilterCount | 0;\n                    let initialFilterInput1L = +this.initialSongEqFilterInput1L;\n                    let initialFilterInput2L = +this.initialSongEqFilterInput2L;\n                    let initialFilterInput1R = +this.initialSongEqFilterInput1R;\n                    let initialFilterInput2R = +this.initialSongEqFilterInput2R;\n                    const applyFilters = Synth.applyFilters;\n                    let eqFilterVolume = +this.songEqFilterVolume;\n                    const eqFilterVolumeDelta = +this.songEqFilterVolumeDelta;\n                    const inputSampleL = outputDataL[i];\n                    let sampleL = inputSampleL;\n                    sampleL = applyFilters(sampleL, initialFilterInput1L, initialFilterInput2L, filterCount, filtersL);\n                    initialFilterInput2L = initialFilterInput1L;\n                    initialFilterInput1L = inputSampleL;\n                    sampleL *= eqFilterVolume;\n                    outputDataL[i] = sampleL;\n                    const inputSampleR = outputDataR[i];\n                    let sampleR = inputSampleR;\n                    sampleR = applyFilters(sampleR, initialFilterInput1R, initialFilterInput2R, filterCount, filtersR);\n                    initialFilterInput2R = initialFilterInput1R;\n                    initialFilterInput1R = inputSampleR;\n                    sampleR *= eqFilterVolume;\n                    outputDataR[i] = sampleR;\n                    eqFilterVolume += eqFilterVolumeDelta;\n                    this.sanitizeFilters(filtersL);\n                    // The filter input here is downstream from another filter so we\n                        // better make sure it's safe too.\n                        if (!(initialFilterInput1L < 100) || !(initialFilterInput2L < 100)) {\n                                initialFilterInput1L = 0.0;\n                                initialFilterInput2L = 0.0;\n                            }\n                    if (Math.abs(initialFilterInput1L) < epsilon) initialFilterInput1L = 0.0;\n                    if (Math.abs(initialFilterInput2L) < epsilon) initialFilterInput2L = 0.0;\n                    this.initialSongEqFilterInput1L = initialFilterInput1L;\n                    this.initialSongEqFilterInput2L = initialFilterInput2L;\n                    this.sanitizeFilters(filtersR);\n                    if (!(initialFilterInput1R < 100) || !(initialFilterInput2R < 100)) {\n                            initialFilterInput1R = 0.0;\n                            initialFilterInput2R = 0.0;\n                        }\n                    if (Math.abs(initialFilterInput1R) < epsilon) initialFilterInput1R = 0.0;\n                    if (Math.abs(initialFilterInput2R) < epsilon) initialFilterInput2R = 0.0;\n                    this.initialSongEqFilterInput1R = initialFilterInput1R;\n                    this.initialSongEqFilterInput2R = initialFilterInput2R;\n                }\n\n                // A compressor/limiter.\n                const sampleL = outputDataL[i] * song.masterGain * song.masterGain;\n                const sampleR = outputDataR[i] * song.masterGain * song.masterGain;\n                const absL: number = sampleL < 0.0 ? -sampleL : sampleL;\n                const absR: number = sampleR < 0.0 ? -sampleR : sampleR;\n                const abs: number = absL > absR ? absL : absR;\n                this.song.inVolumeCap = (this.song.inVolumeCap > abs ? this.song.inVolumeCap : abs); // Analytics, spit out raw input volume\n                // Determines which formula to use. 0 when volume is between [0, compressionThreshold], 1 when between (compressionThreshold, limitThreshold], 2 above\n                const limitRange: number = (+(abs > song.compressionThreshold)) + (+(abs > song.limitThreshold));\n                // Determine the target amplification based on the range of the curve\n                const limitTarget: number =\n                    (+(limitRange == 0)) * (((abs + 1 - song.compressionThreshold) * 0.8 + 0.25) * song.compressionRatio + 1.05 * (1 - song.compressionRatio))\n                    + (+(limitRange == 1)) * (1.05)\n                    + (+(limitRange == 2)) * (1.05 * ((abs + 1 - song.limitThreshold) * song.limitRatio + (1 - song.limitThreshold)));\n                // Move the limit towards the target\n                limit += ((limitTarget - limit) * (limit < limitTarget ? limitRise : limitDecay));\n                const limitedVolume = volume / (limit >= 1 ? limit * 1.05 : limit * 0.8 + 0.25);\n                outputDataL[i] = sampleL * limitedVolume;\n                outputDataR[i] = sampleR * limitedVolume;\n\n                this.song.outVolumeCap = (this.song.outVolumeCap > abs * limitedVolume ? this.song.outVolumeCap : abs * limitedVolume); // Analytics, spit out limited output volume\n                this.song.outVolumeCapL = (this.song.outVolumeCapL > absL * limitedVolume ? this.song.outVolumeCapL : absL * limitedVolume);\n                this.song.outVolumeCapR = (this.song.outVolumeCapR > absR * limitedVolume ? this.song.outVolumeCapR : absR * limitedVolume);\n            }\n\n            bufferIndex += runLength;\n\n            this.isAtStartOfTick = false;\n            this.tickSampleCountdown -= runLength;\n            if (this.tickSampleCountdown <= 0) {\n                this.isAtStartOfTick = true;\n\n                // Track how long tones have been released, and free them if there are too many.\n                // Also reset awake InstrumentStates that didn't have any Tones during this tick.\n                for (const channelState of this.channels) {\n                    for (const instrumentState of channelState.instruments) {\n                        for (let i: number = 0; i < instrumentState.releasedTones.count(); i++) {\n                            const tone: Tone = instrumentState.releasedTones.get(i);\n                            if (tone.isOnLastTick) {\n                                this.freeReleasedTone(instrumentState, i);\n                                i--;\n                            } else {\n                                tone.ticksSinceReleased++;\n                            }\n                        }\n                        if (instrumentState.deactivateAfterThisTick) {\n                            instrumentState.deactivate();\n                        }\n                        instrumentState.tonesAddedInThisTick = false;\n                    }\n                }\n                const ticksIntoBar: number = this.getTicksIntoBar();\n                const tickTimeStart: number = ticksIntoBar;\n                const secondsPerTick: number = samplesPerTick / this.samplesPerSecond;\n                const currentPart: number = this.getCurrentPart();\n                for (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\n                    for (let instrumentIdx: number = 0; instrumentIdx < this.song.channels[channel].instruments.length; instrumentIdx++) {\n                        let instrument: Instrument = this.song.channels[channel].instruments[instrumentIdx];\n                        let instrumentState: InstrumentState = this.channels[channel].instruments[instrumentIdx];\n\n                        // Update envelope time, which is used to calculate (all envelopes') position\n                        const envelopeComputer: EnvelopeComputer = instrumentState.envelopeComputer;\n                        const envelopeSpeeds: number[] = [];\n                        for (let i: number = 0; i < Config.maxEnvelopeCount; i++) {\n                            envelopeSpeeds[i] = 0;\n                        }\n                        for (let envelopeIndex: number = 0; envelopeIndex < instrument.envelopeCount; envelopeIndex++) {\n                            let useEnvelopeSpeed: number = instrument.envelopeSpeed;\n                            let perEnvelopeSpeed: number = instrument.envelopes[envelopeIndex].perEnvelopeSpeed;\n                            if (this.isModActive(Config.modulators.dictionary[\"individual envelope speed\"].index, channel, instrumentIdx) && instrument.envelopes[envelopeIndex].tempEnvelopeSpeed != null) {\n                                perEnvelopeSpeed = instrument.envelopes[envelopeIndex].tempEnvelopeSpeed!;\n                            }\n                            if (this.isModActive(Config.modulators.dictionary[\"envelope speed\"].index, channel, instrumentIdx)) {\n                                useEnvelopeSpeed = Math.max(0, Math.min(Config.arpSpeedScale.length - 1, this.getModValue(Config.modulators.dictionary[\"envelope speed\"].index, channel, instrumentIdx, false)));\n                                if (Number.isInteger(useEnvelopeSpeed)) {\n                                    instrumentState.envelopeTime[envelopeIndex] += Config.arpSpeedScale[useEnvelopeSpeed] * perEnvelopeSpeed;\n                                } else {\n                                    // Linear interpolate envelope values\n                                    instrumentState.envelopeTime[envelopeIndex] += ((1 - (useEnvelopeSpeed % 1)) * Config.arpSpeedScale[Math.floor(useEnvelopeSpeed)] + (useEnvelopeSpeed % 1) * Config.arpSpeedScale[Math.ceil(useEnvelopeSpeed)]) * perEnvelopeSpeed;\n                                }\n                            }\n                            else {\n                                instrumentState.envelopeTime[envelopeIndex] += Config.arpSpeedScale[useEnvelopeSpeed] * perEnvelopeSpeed;\n                            }\n                        }\n\n                        if (instrumentState.activeTones.count() > 0) {\n                            const tone: Tone = instrumentState.activeTones.get(0);\n                            envelopeComputer.computeEnvelopes(instrument, currentPart, instrumentState.envelopeTime, tickTimeStart, secondsPerTick, tone, envelopeSpeeds, instrumentState, this, channel, instrumentIdx);\n                        }\n                        const envelopeStarts: number[] = envelopeComputer.envelopeStarts;\n                        //const envelopeEnds: number[] = envelopeComputer.envelopeEnds;\n\n                        // Update arpeggio time, which is used to calculate arpeggio position\n                        const arpEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.arpeggioSpeed]; //only discrete for now\n                        //const arpEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.arpeggioSpeed];\n                        let useArpeggioSpeed: number = instrument.arpeggioSpeed;\n                        if (this.isModActive(Config.modulators.dictionary[\"arp speed\"].index, channel, instrumentIdx)) {\n                            useArpeggioSpeed = clamp(0, Config.arpSpeedScale.length, arpEnvelopeStart * this.getModValue(Config.modulators.dictionary[\"arp speed\"].index, channel, instrumentIdx, false));\n                            if (Number.isInteger(useArpeggioSpeed)) {\n                                instrumentState.arpTime += Config.arpSpeedScale[useArpeggioSpeed];\n                            } else {\n                                // Linear interpolate arpeggio values\n                                instrumentState.arpTime += (1 - (useArpeggioSpeed % 1)) * Config.arpSpeedScale[Math.floor(useArpeggioSpeed)] + (useArpeggioSpeed % 1) * Config.arpSpeedScale[Math.ceil(useArpeggioSpeed)];\n                            }\n                        }\n                        else {\n                            useArpeggioSpeed = clamp(0, Config.arpSpeedScale.length, arpEnvelopeStart * useArpeggioSpeed);\n                            if (Number.isInteger(useArpeggioSpeed)) {\n                                instrumentState.arpTime += Config.arpSpeedScale[useArpeggioSpeed];\n                            } else {\n                                // Linear interpolate arpeggio values\n                                instrumentState.arpTime += (1 - (useArpeggioSpeed % 1)) * Config.arpSpeedScale[Math.floor(useArpeggioSpeed)] + (useArpeggioSpeed % 1) * Config.arpSpeedScale[Math.ceil(useArpeggioSpeed)];\n                            }\n                        }\n                        envelopeComputer.clearEnvelopes();\n\n                    }\n                }\n\n                // Update next-used filters after each run\n                for (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\n                    for (let instrumentIdx: number = 0; instrumentIdx < this.song.channels[channel].instruments.length; instrumentIdx++) {\n                        let instrument: Instrument = this.song.channels[channel].instruments[instrumentIdx];\n                        for (let effectIdx: number = 0; effectIdx < instrument.effects.length; effectIdx++) {\n                            let effect: Effect = instrument.effects[effectIdx] as Effect;\n                            if (effect.tmpEqFilterEnd != null) {\n                                effect.tmpEqFilterStart = effect.tmpEqFilterEnd;\n                            } else {\n                                effect.tmpEqFilterStart = effect.eqFilter;\n                            }\n                        }\n                        if (instrument.tmpNoteFilterEnd != null) {\n                            instrument.tmpNoteFilterStart = instrument.tmpNoteFilterEnd;\n                        } else {\n                            instrument.tmpNoteFilterStart = instrument.noteFilter;\n                        }\n                    }\n                }\n                if (song.tmpEqFilterEnd != null) {\n                    song.tmpEqFilterStart = song.tmpEqFilterEnd;\n                } else {\n                    song.tmpEqFilterStart = song.eqFilter;\n                }\n\n                this.tick++;\n                this.tickSampleCountdown += samplesPerTick;\n                if (this.tick == Config.ticksPerPart) {\n                    this.tick = 0;\n                    this.part++;\n                    this.liveInputDuration--;\n                    this.liveBassInputDuration--;\n                    // Decrement held modulator counters after each run\n                    for (let i: number = 0; i < this.heldMods.length; i++) {\n                        this.heldMods[i].holdFor--;\n                        if (this.heldMods[i].holdFor <= 0) {\n                            this.heldMods.splice(i, 1);\n                        }\n                    }\n\n                    if (this.part == Config.partsPerBeat) {\n                        this.part = 0;\n\n                        if (playSong) {\n                            this.beat++;\n                            if (this.beat == song.beatsPerBar) {\n                                // bar changed, reset for next bar:\n                                this.beat = 0;\n\n                                if (this.countInMetronome) {\n                                    this.countInMetronome = false;\n                                } else {\n                                    this.prevBar = this.bar;\n                                    this.bar = this.getNextBar();\n                                    if (this.bar <= this.prevBar && this.loopRepeatCount > 0) this.loopRepeatCount--;\n\n                                    if (this.bar >= song.barCount) {\n                                        this.bar = 0;\n                                        if (this.loopRepeatCount != -1) {\n                                            ended = true;\n                                            this.resetEffects();\n                                            this.pause();\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            // Update mod values so that next values copy to current values\n            for (let setting: number = 0; setting < Config.modulators.length; setting++) {\n                if (this.nextModValues != null && this.nextModValues[setting] != null)\n                    this.modValues[setting] = this.nextModValues[setting];\n            }\n\n            // Set samples per tick if song tempo mods changed it\n            if (this.isModActive(Config.modulators.dictionary[\"tempo\"].index)) {\n                samplesPerTick = this.getSamplesPerTick();\n                this.tickSampleCountdown = Math.min(this.tickSampleCountdown, samplesPerTick);\n            }\n\n            // Bound LFO times to be within their period (to keep values from getting large)\n            // I figured this modulo math probably doesn't have to happen every LFO tick.\n            for (let channelIndex: number = 0; channelIndex < this.song.pitchChannelCount + this.song.noiseChannelCount; channelIndex++) {\n                for (let instrumentIndex = 0; instrumentIndex < this.channels[channelIndex].instruments.length; instrumentIndex++) {\n                    const instrumentState: InstrumentState = this.channels[channelIndex].instruments[instrumentIndex];\n                    const instrument: Instrument = this.song.channels[channelIndex].instruments[instrumentIndex];\n                    instrumentState.nextVibratoTime = (instrumentState.nextVibratoTime % (Config.vibratoTypes[instrument.vibratoType].period / (Config.ticksPerPart * samplesPerTick / this.samplesPerSecond)));\n                    instrumentState.arpTime = (instrumentState.arpTime % (2520 * Config.ticksPerArpeggio)); // 2520 = LCM of 4, 5, 6, 7, 8, 9 (arp sizes)\n                    for (let envelopeIndex: number = 0; envelopeIndex < instrument.envelopeCount; envelopeIndex++) {\n                        instrumentState.envelopeTime[envelopeIndex] = (instrumentState.envelopeTime[envelopeIndex] % (Config.partsPerBeat * Config.ticksPerPart * this.song.beatsPerBar));\n                    }\n                }\n            }\n\n            const maxInstrumentsPerChannel = this.song.getMaxInstrumentsPerChannel();\n            for (let setting: number = 0; setting < Config.modulators.length; setting++) {\n                for (let channel: number = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\n                    for (let instrument: number = 0; instrument < maxInstrumentsPerChannel; instrument++) {\n                        if (this.nextModInsValues != null && this.nextModInsValues[channel] != null && this.nextModInsValues[channel][instrument] != null && this.nextModInsValues[channel][instrument][setting] != null) {\n                            this.modInsValues[channel][instrument][setting] = this.nextModInsValues[channel][instrument][setting];\n                        }\n                    }\n                }\n            }\n        }\n\n        // Optimization: Avoid persistent reverb values in the float denormal range.\n        if (!Number.isFinite(limit) || Math.abs(limit) < epsilon) limit = 0.0;\n        this.limit = limit;\n\n        if (playSong && !this.countInMetronome) {\n            this.playheadInternal = (((this.tick + 1.0 - this.tickSampleCountdown / samplesPerTick) / 2.0 + this.part) / Config.partsPerBeat + this.beat) / song.beatsPerBar + this.bar;\n        }\n\n        /*\n        const synthDuration: number = performance.now() - synthStartTime;\n        // Performance measurements:\n        samplesAccumulated += outputBufferLength;\n        samplePerformance += synthDuration;\n    \t\n        if (samplesAccumulated >= 44100 * 4) {\n            const secondsGenerated = samplesAccumulated / 44100;\n            const secondsRequired = samplePerformance / 1000;\n            const ratio = secondsRequired / secondsGenerated;\n            console.log(ratio);\n            samplePerformance = 0;\n            samplesAccumulated = 0;\n        }\n        */\n    }\n\n    private freeTone(tone: Tone): void {\n        this.tonePool.pushBack(tone);\n    }\n\n    private newTone(): Tone {\n        if (this.tonePool.count() > 0) {\n            const tone: Tone = this.tonePool.popBack();\n            tone.freshlyAllocated = true;\n            return tone;\n        }\n        return new Tone();\n    }\n\n    private releaseTone(instrumentState: InstrumentState, tone: Tone): void {\n        instrumentState.releasedTones.pushFront(tone);\n        tone.atNoteStart = false;\n        tone.passedEndOfNote = true;\n    }\n\n    private freeReleasedTone(instrumentState: InstrumentState, toneIndex: number): void {\n        this.freeTone(instrumentState.releasedTones.get(toneIndex));\n        instrumentState.releasedTones.remove(toneIndex);\n    }\n\n    freeAllTones(): void {\n        for (const channelState of this.channels) {\n            for (const instrumentState of channelState.instruments) {\n                while (instrumentState.activeTones.count() > 0) this.freeTone(instrumentState.activeTones.popBack());\n                while (instrumentState.activeModTones.count() > 0) this.freeTone(instrumentState.activeModTones.popBack());\n                while (instrumentState.releasedTones.count() > 0) this.freeTone(instrumentState.releasedTones.popBack());\n                while (instrumentState.liveInputTones.count() > 0) this.freeTone(instrumentState.liveInputTones.popBack());\n            }\n        }\n    }\n\n    private determineLiveInputTones(song: Song, channelIndex: number, samplesPerTick: number): void {\n        const channel: Channel = song.channels[channelIndex];\n        const channelState: ChannelState = this.channels[channelIndex];\n        const pitches: number[] = this.liveInputPitches;\n        const bassPitches: number[] = this.liveBassInputPitches;\n\n        if (this.liveInputPitches.length > 0 || this.liveBassInputPitches.length > 0) {\n            this.computeLatestModValues();\n        }\n\n        for (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n            const instrumentState: InstrumentState = channelState.instruments[instrumentIndex];\n            const toneList: Deque<Tone> = instrumentState.liveInputTones;\n            let toneCount: number = 0;\n            if (this.liveInputDuration > 0 && (channelIndex == this.liveInputChannel) && pitches.length > 0 && this.liveInputInstruments.indexOf(instrumentIndex) != -1) {\n                const instrument: Instrument = channel.instruments[instrumentIndex];\n\n                if (instrument.getChord().singleTone) {\n                    let tone: Tone;\n                    if (toneList.count() <= toneCount) {\n                        tone = this.newTone();\n                        toneList.pushBack(tone);\n                    } else if (!instrument.getTransition().isSeamless && this.liveInputStarted) {\n                        this.releaseTone(instrumentState, toneList.get(toneCount));\n                        tone = this.newTone();\n                        toneList.set(toneCount, tone);\n                    } else {\n                        tone = toneList.get(toneCount);\n                    }\n                    toneCount++;\n\n                    for (let i: number = 0; i < pitches.length; i++) {\n                        tone.pitches[i] = pitches[i];\n                    }\n                    tone.pitchCount = pitches.length;\n                    tone.chordSize = 1;\n                    tone.instrumentIndex = instrumentIndex;\n                    tone.note = tone.prevNote = tone.nextNote = null;\n                    tone.atNoteStart = this.liveInputStarted;\n                    tone.forceContinueAtStart = false;\n                    tone.forceContinueAtEnd = false;\n                    this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\n                } else {\n                    //const transition: Transition = instrument.getTransition();\n\n                    this.moveTonesIntoOrderedTempMatchedList(toneList, pitches);\n\n                    for (let i: number = 0; i < pitches.length; i++) {\n                        //const strumOffsetParts: number = i * instrument.getChord().strumParts;\n\n                        let tone: Tone;\n                        if (this.tempMatchedPitchTones[toneCount] != null) {\n                            tone = this.tempMatchedPitchTones[toneCount]!;\n                            this.tempMatchedPitchTones[toneCount] = null;\n                            if (tone.pitchCount != 1 || tone.pitches[0] != pitches[i]) {\n                                this.releaseTone(instrumentState, tone);\n                                tone = this.newTone();\n                            }\n                            toneList.pushBack(tone);\n                        } else {\n                            tone = this.newTone();\n                            toneList.pushBack(tone);\n                        }\n                        toneCount++;\n\n                        tone.pitches[0] = pitches[i];\n                        tone.pitchCount = 1;\n                        tone.chordSize = pitches.length;\n                        tone.instrumentIndex = instrumentIndex;\n                        tone.note = tone.prevNote = tone.nextNote = null;\n                        tone.atNoteStart = this.liveInputStarted;\n                        tone.forceContinueAtStart = false;\n                        tone.forceContinueAtEnd = false;\n                        this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\n                    }\n                }\n            }\n\n            if (this.liveBassInputDuration > 0 && (channelIndex == this.liveBassInputChannel) && bassPitches.length > 0 && this.liveBassInputInstruments.indexOf(instrumentIndex) != -1) {\n                const instrument: Instrument = channel.instruments[instrumentIndex];\n\n                if (instrument.getChord().singleTone) {\n                    let tone: Tone;\n                    if (toneList.count() <= toneCount) {\n                        tone = this.newTone();\n                        toneList.pushBack(tone);\n                    } else if (!instrument.getTransition().isSeamless && this.liveInputStarted) {\n                        this.releaseTone(instrumentState, toneList.get(toneCount));\n                        tone = this.newTone();\n                        toneList.set(toneCount, tone);\n                    } else {\n                        tone = toneList.get(toneCount);\n                    }\n                    toneCount++;\n\n                    for (let i: number = 0; i < bassPitches.length; i++) {\n                        tone.pitches[i] = bassPitches[i];\n                    }\n                    tone.pitchCount = bassPitches.length;\n                    tone.chordSize = 1;\n                    tone.instrumentIndex = instrumentIndex;\n                    tone.note = tone.prevNote = tone.nextNote = null;\n                    tone.atNoteStart = this.liveBassInputStarted;\n                    tone.forceContinueAtStart = false;\n                    tone.forceContinueAtEnd = false;\n                    this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\n                } else {\n                    //const transition: Transition = instrument.getTransition();\n\n                    this.moveTonesIntoOrderedTempMatchedList(toneList, bassPitches);\n\n                    for (let i: number = 0; i < bassPitches.length; i++) {\n                        //const strumOffsetParts: number = i * instrument.getChord().strumParts;\n\n                        let tone: Tone;\n                        if (this.tempMatchedPitchTones[toneCount] != null) {\n                            tone = this.tempMatchedPitchTones[toneCount]!;\n                            this.tempMatchedPitchTones[toneCount] = null;\n                            if (tone.pitchCount != 1 || tone.pitches[0] != bassPitches[i]) {\n                                this.releaseTone(instrumentState, tone);\n                                tone = this.newTone();\n                            }\n                            toneList.pushBack(tone);\n                        } else {\n                            tone = this.newTone();\n                            toneList.pushBack(tone);\n                        }\n                        toneCount++;\n\n                        tone.pitches[0] = bassPitches[i];\n                        tone.pitchCount = 1;\n                        tone.chordSize = bassPitches.length;\n                        tone.instrumentIndex = instrumentIndex;\n                        tone.note = tone.prevNote = tone.nextNote = null;\n                        tone.atNoteStart = this.liveBassInputStarted;\n                        tone.forceContinueAtStart = false;\n                        tone.forceContinueAtEnd = false;\n                        this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\n                    }\n                }\n            }\n\n            while (toneList.count() > toneCount) {\n                this.releaseTone(instrumentState, toneList.popBack());\n            }\n\n            this.clearTempMatchedPitchTones(toneCount, instrumentState);\n        }\n\n        this.liveInputStarted = false;\n        this.liveBassInputStarted = false;\n    }\n\n    // Returns the chord type of the instrument in the adjacent pattern if it is compatible for a\n    // seamless transition across patterns, otherwise returns null.\n    private adjacentPatternHasCompatibleInstrumentTransition(song: Song, channel: Channel, pattern: Pattern, otherPattern: Pattern, instrumentIndex: number, transition: Transition, chord: Chord, note: Note, otherNote: Note, forceContinue: boolean): Chord | null {\n        if (song.patternInstruments && otherPattern.instruments.indexOf(instrumentIndex) == -1) {\n            // The adjacent pattern does not contain the same instrument as the current pattern.\n\n            if (pattern.instruments.length > 1 || otherPattern.instruments.length > 1) {\n                // The current or adjacent pattern contains more than one instrument, don't bother\n                // trying to connect them.\n                return null;\n            }\n            // Otherwise, the two patterns each contain one instrument, but not the same instrument.\n            // Try to connect them.\n            const otherInstrument: Instrument = channel.instruments[otherPattern.instruments[0]];\n\n            if (forceContinue) {\n                // Even non-seamless instruments can be connected across patterns if forced.\n                return otherInstrument.getChord();\n            }\n\n            // Otherwise, check that both instruments are seamless across patterns.\n            const otherTransition: Transition = otherInstrument.getTransition();\n            if (transition.includeAdjacentPatterns && otherTransition.includeAdjacentPatterns && otherTransition.slides == transition.slides) {\n                return otherInstrument.getChord();\n            } else {\n                return null;\n            }\n        } else {\n            // If both patterns contain the same instrument, check that it is seamless across patterns.\n            return (forceContinue || transition.includeAdjacentPatterns) ? chord : null;\n        }\n    }\n\n    static adjacentNotesHaveMatchingPitches(firstNote: Note, secondNote: Note): boolean {\n        if (firstNote.pitches.length != secondNote.pitches.length) return false;\n        const firstNoteInterval: number = firstNote.pins[firstNote.pins.length - 1].interval;\n        for (const pitch of firstNote.pitches) {\n            if (secondNote.pitches.indexOf(pitch + firstNoteInterval) == -1) return false;\n        }\n        return true;\n    }\n\n    private moveTonesIntoOrderedTempMatchedList(toneList: Deque<Tone>, notePitches: number[]): void {\n        // The tones are about to seamlessly transition to a new note. The pitches\n        // from the old note may or may not match any of the pitches in the new\n        // note, and not necessarily in order, but if any do match, they'll sound\n        // better if those tones continue to have the same pitch. Attempt to find\n        // the right spot for each old tone in the new chord if possible.\n\n        for (let i: number = 0; i < toneList.count(); i++) {\n            const tone: Tone = toneList.get(i);\n            const pitch: number = tone.pitches[0] + tone.lastInterval;\n            for (let j: number = 0; j < notePitches.length; j++) {\n                if (notePitches[j] == pitch) {\n                    this.tempMatchedPitchTones[j] = tone;\n                    toneList.remove(i);\n                    i--;\n                    break;\n                }\n            }\n        }\n\n        // Any tones that didn't get matched should just fill in the gaps.\n        while (toneList.count() > 0) {\n            const tone: Tone = toneList.popFront();\n            for (let j: number = 0; j < this.tempMatchedPitchTones.length; j++) {\n                if (this.tempMatchedPitchTones[j] == null) {\n                    this.tempMatchedPitchTones[j] = tone;\n                    break;\n                }\n            }\n        }\n    }\n\n    private determineCurrentActiveTones(song: Song, channelIndex: number, samplesPerTick: number, playSong: boolean): void {\n        const channel: Channel = song.channels[channelIndex];\n        const channelState: ChannelState = this.channels[channelIndex];\n        const pattern: Pattern | null = song.getPattern(channelIndex, this.bar);\n        const currentPart: number = this.getCurrentPart();\n        const currentTick: number = this.tick + Config.ticksPerPart * currentPart;\n\n        if (playSong && song.getChannelIsMod(channelIndex)) {\n\n            // For mod channels, notes aren't strictly arranged chronologically. Also, each pitch value could play or not play at a given time. So... a bit more computation involved!\n            // The same transition logic should apply though, even though it isn't really used by mod channels.\n            let notes: (Note | null)[] = [];\n            let prevNotes: (Note | null)[] = [];\n            let nextNotes: (Note | null)[] = [];\n            let fillCount: number = Config.modCount;\n            while (fillCount--) {\n                notes.push(null);\n                prevNotes.push(null);\n                nextNotes.push(null);\n            }\n\n            if (pattern != null && !channel.muted) {\n                for (let i: number = 0; i < pattern.notes.length; i++) {\n                    if (pattern.notes[i].end <= currentPart) {\n                        // Actually need to check which note starts closer to the start of this note.\n                        if (prevNotes[pattern.notes[i].pitches[0]] == null || pattern.notes[i].end > (prevNotes[pattern.notes[i].pitches[0]] as Note).start) {\n                            prevNotes[pattern.notes[i].pitches[0]] = pattern.notes[i];\n                        }\n                    }\n                    else if (pattern.notes[i].start <= currentPart && pattern.notes[i].end > currentPart) {\n                        notes[pattern.notes[i].pitches[0]] = pattern.notes[i];\n                    }\n                    else if (pattern.notes[i].start > currentPart) {\n                        // Actually need to check which note starts closer to the end of this note.\n                        if (nextNotes[pattern.notes[i].pitches[0]] == null || pattern.notes[i].start < (nextNotes[pattern.notes[i].pitches[0]] as Note).start) {\n                            nextNotes[pattern.notes[i].pitches[0]] = pattern.notes[i];\n                        }\n                    }\n                }\n            }\n\n            let modToneCount: number = 0;\n            const newInstrumentIndex: number = (song.patternInstruments && (pattern != null)) ? pattern!.instruments[0] : 0;\n            const instrumentState: InstrumentState = channelState.instruments[newInstrumentIndex];\n            const toneList: Deque<Tone> = instrumentState.activeModTones;\n            for (let mod: number = 0; mod < Config.modCount; mod++) {\n                if (notes[mod] != null) {\n                    if (prevNotes[mod] != null && (prevNotes[mod] as Note).end != (notes[mod] as Note).start) prevNotes[mod] = null;\n                    if (nextNotes[mod] != null && (nextNotes[mod] as Note).start != (notes[mod] as Note).end) nextNotes[mod] = null;\n\n                }\n\n                if (channelState.singleSeamlessInstrument != null && channelState.singleSeamlessInstrument != newInstrumentIndex && channelState.singleSeamlessInstrument < channelState.instruments.length) {\n                    const sourceInstrumentState: InstrumentState = channelState.instruments[channelState.singleSeamlessInstrument];\n                    const destInstrumentState: InstrumentState = channelState.instruments[newInstrumentIndex];\n                    while (sourceInstrumentState.activeModTones.count() > 0) {\n                        destInstrumentState.activeModTones.pushFront(sourceInstrumentState.activeModTones.popBack());\n                    }\n                }\n                channelState.singleSeamlessInstrument = newInstrumentIndex;\n\n                if (notes[mod] != null) {\n                    let prevNoteForThisInstrument: Note | null = prevNotes[mod];\n                    let nextNoteForThisInstrument: Note | null = nextNotes[mod];\n\n                    let forceContinueAtStart: boolean = false;\n                    let forceContinueAtEnd: boolean = false;\n                    const atNoteStart: boolean = (Config.ticksPerPart * notes[mod]!.start == currentTick) && this.isAtStartOfTick;\n                    let tone: Tone;\n                    if (toneList.count() <= modToneCount) {\n                        tone = this.newTone();\n                        toneList.pushBack(tone);\n                    } else if (atNoteStart && (prevNoteForThisInstrument == null)) {\n                        const oldTone: Tone = toneList.get(modToneCount);\n                        if (oldTone.isOnLastTick) {\n                            this.freeTone(oldTone);\n                        } else {\n                            this.releaseTone(instrumentState, oldTone);\n                        }\n                        tone = this.newTone();\n                        toneList.set(modToneCount, tone);\n                    } else {\n                        tone = toneList.get(modToneCount);\n                    }\n                    modToneCount++;\n\n                    for (let i: number = 0; i < notes[mod]!.pitches.length; i++) {\n                        tone.pitches[i] = notes[mod]!.pitches[i];\n                    }\n                    tone.pitchCount = notes[mod]!.pitches.length;\n                    tone.chordSize = 1;\n                    tone.instrumentIndex = newInstrumentIndex;\n                    tone.note = notes[mod];\n                    tone.noteStartPart = notes[mod]!.start;\n                    tone.noteEndPart = notes[mod]!.end;\n                    tone.prevNote = prevNoteForThisInstrument;\n                    tone.nextNote = nextNoteForThisInstrument;\n                    tone.prevNotePitchIndex = 0;\n                    tone.nextNotePitchIndex = 0;\n                    tone.atNoteStart = atNoteStart;\n                    tone.passedEndOfNote = false;\n                    tone.forceContinueAtStart = forceContinueAtStart;\n                    tone.forceContinueAtEnd = forceContinueAtEnd;\n                }\n            }\n            // Automatically free or release seamless tones if there's no new note to take over.\n            while (toneList.count() > modToneCount) {\n                const tone: Tone = toneList.popBack();\n                const channel: Channel = song.channels[channelIndex];\n                if (tone.instrumentIndex < channel.instruments.length && !tone.isOnLastTick) {\n                    const instrumentState: InstrumentState = this.channels[channelIndex].instruments[tone.instrumentIndex];\n                    this.releaseTone(instrumentState, tone);\n                } else {\n                    this.freeTone(tone);\n                }\n            }\n\n        }\n        else if (!song.getChannelIsMod(channelIndex)) {\n\n            let note: Note | null = null;\n            let prevNote: Note | null = null;\n            let nextNote: Note | null = null;\n\n            if (playSong && pattern != null && !channel.muted && (!this.isRecording || this.liveInputChannel != channelIndex)) {\n                for (let i: number = 0; i < pattern.notes.length; i++) {\n                    if (pattern.notes[i].end <= currentPart) {\n                        prevNote = pattern.notes[i];\n                    } else if (pattern.notes[i].start <= currentPart && pattern.notes[i].end > currentPart) {\n                        note = pattern.notes[i];\n                    } else if (pattern.notes[i].start > currentPart) {\n                        nextNote = pattern.notes[i];\n                        break;\n                    }\n                }\n\n                if (note != null) {\n                    if (prevNote != null && prevNote.end != note.start) prevNote = null;\n                    if (nextNote != null && nextNote.start != note.end) nextNote = null;\n                }\n            }\n\n            // Seamless tones from a pattern with a single instrument can be transferred to a different single seamless instrument in the next pattern.\n            if (pattern != null && (!song.layeredInstruments || channel.instruments.length == 1 || (song.patternInstruments && pattern.instruments.length == 1))) {\n                const newInstrumentIndex: number = song.patternInstruments ? pattern.instruments[0] : 0;\n                if (channelState.singleSeamlessInstrument != null && channelState.singleSeamlessInstrument != newInstrumentIndex && channelState.singleSeamlessInstrument < channelState.instruments.length) {\n                    const sourceInstrumentState: InstrumentState = channelState.instruments[channelState.singleSeamlessInstrument];\n                    const destInstrumentState: InstrumentState = channelState.instruments[newInstrumentIndex];\n                    while (sourceInstrumentState.activeTones.count() > 0) {\n                        destInstrumentState.activeTones.pushFront(sourceInstrumentState.activeTones.popBack());\n                    }\n                }\n                channelState.singleSeamlessInstrument = newInstrumentIndex;\n            } else {\n                channelState.singleSeamlessInstrument = null;\n            }\n\n            for (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n                const instrumentState: InstrumentState = channelState.instruments[instrumentIndex];\n                const toneList: Deque<Tone> = instrumentState.activeTones;\n                let toneCount: number = 0;\n                if ((note != null) && (!song.patternInstruments || (pattern!.instruments.indexOf(instrumentIndex) != -1))) {\n                    const instrument: Instrument = channel.instruments[instrumentIndex];\n                    let prevNoteForThisInstrument: Note | null = prevNote;\n                    let nextNoteForThisInstrument: Note | null = nextNote;\n\n                    const partsPerBar: Number = Config.partsPerBeat * song.beatsPerBar;\n                    const transition: Transition = instrument.getTransition();\n                    const chord: Chord = instrument.getChord();\n                    let forceContinueAtStart: boolean = false;\n                    let forceContinueAtEnd: boolean = false;\n                    let tonesInPrevNote: number = 0;\n                    let tonesInNextNote: number = 0;\n                    if (note.start == 0) {\n                        // If the beginning of the note coincides with the beginning of the pattern,\n                        let prevPattern: Pattern | null = (this.prevBar == null) ? null : song.getPattern(channelIndex, this.prevBar);\n                        if (prevPattern != null) {\n                            const lastNote: Note | null = (prevPattern.notes.length <= 0) ? null : prevPattern.notes[prevPattern.notes.length - 1];\n                            if (lastNote != null && lastNote.end == partsPerBar) {\n                                const patternForcesContinueAtStart: boolean = note.continuesLastPattern && Synth.adjacentNotesHaveMatchingPitches(lastNote, note);\n                                const chordOfCompatibleInstrument: Chord | null = this.adjacentPatternHasCompatibleInstrumentTransition(song, channel, pattern!, prevPattern, instrumentIndex, transition, chord, note, lastNote, patternForcesContinueAtStart);\n                                if (chordOfCompatibleInstrument != null) {\n                                    prevNoteForThisInstrument = lastNote;\n                                    tonesInPrevNote = chordOfCompatibleInstrument.singleTone ? 1 : prevNoteForThisInstrument.pitches.length\n                                    forceContinueAtStart = patternForcesContinueAtStart;\n                                }\n                            }\n                        }\n                    } else if (prevNoteForThisInstrument != null) {\n                        tonesInPrevNote = chord.singleTone ? 1 : prevNoteForThisInstrument.pitches.length\n                    }\n                    if (note.end == partsPerBar) {\n                        // If the end of the note coincides with the end of the pattern, look for an\n                        // adjacent note at the beginning of the next pattern.\n                        let nextPattern: Pattern | null = (this.nextBar == null) ? null : song.getPattern(channelIndex, this.nextBar);\n                        if (nextPattern != null) {\n                            const firstNote: Note | null = (nextPattern.notes.length <= 0) ? null : nextPattern.notes[0];\n                            if (firstNote != null && firstNote.start == 0) {\n                                const nextPatternForcesContinueAtStart: boolean = firstNote.continuesLastPattern && Synth.adjacentNotesHaveMatchingPitches(note, firstNote);\n                                const chordOfCompatibleInstrument: Chord | null = this.adjacentPatternHasCompatibleInstrumentTransition(song, channel, pattern!, nextPattern, instrumentIndex, transition, chord, note, firstNote, nextPatternForcesContinueAtStart);\n                                if (chordOfCompatibleInstrument != null) {\n                                    nextNoteForThisInstrument = firstNote;\n                                    tonesInNextNote = chordOfCompatibleInstrument.singleTone ? 1 : nextNoteForThisInstrument.pitches.length\n                                    forceContinueAtEnd = nextPatternForcesContinueAtStart;\n                                }\n                            }\n                        }\n                    } else if (nextNoteForThisInstrument != null) {\n                        tonesInNextNote = chord.singleTone ? 1 : nextNoteForThisInstrument.pitches.length\n                    }\n\n                    if (chord.singleTone) {\n                        const atNoteStart: boolean = (Config.ticksPerPart * note.start == currentTick);\n                        let tone: Tone;\n                        if (toneList.count() <= toneCount) {\n                            tone = this.newTone();\n                            toneList.pushBack(tone);\n                        } else if (atNoteStart && ((!(transition.isSeamless || instrument.clicklessTransition) && !forceContinueAtStart) || prevNoteForThisInstrument == null)) {\n                            const oldTone: Tone = toneList.get(toneCount);\n                            if (oldTone.isOnLastTick) {\n                                this.freeTone(oldTone);\n                            } else {\n                                this.releaseTone(instrumentState, oldTone);\n                            }\n                            tone = this.newTone();\n                            toneList.set(toneCount, tone);\n                        } else {\n                            tone = toneList.get(toneCount);\n                        }\n                        toneCount++;\n\n                        for (let i: number = 0; i < note.pitches.length; i++) {\n                            tone.pitches[i] = note.pitches[i];\n                        }\n                        tone.pitchCount = note.pitches.length;\n                        tone.chordSize = 1;\n                        tone.instrumentIndex = instrumentIndex;\n                        tone.note = note;\n                        tone.noteStartPart = note.start;\n                        tone.noteEndPart = note.end;\n                        tone.prevNote = prevNoteForThisInstrument;\n                        tone.nextNote = nextNoteForThisInstrument;\n                        tone.prevNotePitchIndex = 0;\n                        tone.nextNotePitchIndex = 0;\n                        tone.atNoteStart = atNoteStart;\n                        tone.passedEndOfNote = false;\n                        tone.forceContinueAtStart = forceContinueAtStart;\n                        tone.forceContinueAtEnd = forceContinueAtEnd;\n                        this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\n                    } else {\n                        const transition: Transition = instrument.getTransition();\n\n                        if (((transition.isSeamless && !transition.slides && chord.strumParts == 0) || forceContinueAtStart) && (Config.ticksPerPart * note.start == currentTick) && prevNoteForThisInstrument != null) {\n                            this.moveTonesIntoOrderedTempMatchedList(toneList, note.pitches);\n                        }\n\n                        let strumOffsetParts: number = 0;\n                        for (let i: number = 0; i < note.pitches.length; i++) {\n\n                            let prevNoteForThisTone: Note | null = (tonesInPrevNote > i) ? prevNoteForThisInstrument : null;\n                            let noteForThisTone: Note = note;\n                            let nextNoteForThisTone: Note | null = (tonesInNextNote > i) ? nextNoteForThisInstrument : null;\n                            let noteStartPart: number = noteForThisTone.start + strumOffsetParts;\n                            let passedEndOfNote: boolean = false;\n\n                            // Strumming may mean that a note's actual start time may be after the\n                            // note's displayed start time. If the note start hasn't been reached yet,\n                            // carry over the previous tone if available and seamless, otherwise skip\n                            // the new tone until it is ready to start.\n                            if (noteStartPart > currentPart) {\n                                if (toneList.count() > i && (transition.isSeamless || forceContinueAtStart) && prevNoteForThisTone != null) {\n                                    // Continue the previous note's chord until the current one takes over.\n                                    nextNoteForThisTone = noteForThisTone;\n                                    noteForThisTone = prevNoteForThisTone;\n                                    prevNoteForThisTone = null;\n                                    noteStartPart = noteForThisTone.start + strumOffsetParts;\n                                    passedEndOfNote = true;\n                                } else {\n                                    // This and the rest of the tones in the chord shouldn't start yet.\n                                    break;\n                                }\n                            }\n\n                            let noteEndPart: number = noteForThisTone.end;\n                            if ((transition.isSeamless || forceContinueAtStart) && nextNoteForThisTone != null) {\n                                noteEndPart = Math.min(Config.partsPerBeat * this.song!.beatsPerBar, noteEndPart + strumOffsetParts);\n                            }\n                            if ((!transition.continues && !forceContinueAtStart) || prevNoteForThisTone == null) {\n                                strumOffsetParts += chord.strumParts;\n                            }\n\n                            const atNoteStart: boolean = (Config.ticksPerPart * noteStartPart == currentTick);\n                            let tone: Tone;\n                            if (this.tempMatchedPitchTones[toneCount] != null) {\n                                tone = this.tempMatchedPitchTones[toneCount]!;\n                                this.tempMatchedPitchTones[toneCount] = null;\n                                toneList.pushBack(tone);\n                            } else if (toneList.count() <= toneCount) {\n                                tone = this.newTone();\n                                toneList.pushBack(tone);\n                            } else if (atNoteStart && ((!transition.isSeamless && !forceContinueAtStart) || prevNoteForThisTone == null)) {\n                                const oldTone: Tone = toneList.get(toneCount);\n                                if (oldTone.isOnLastTick) {\n                                    this.freeTone(oldTone);\n                                } else {\n                                    this.releaseTone(instrumentState, oldTone);\n                                }\n                                tone = this.newTone();\n                                toneList.set(toneCount, tone);\n                            } else {\n                                tone = toneList.get(toneCount);\n                            }\n                            toneCount++;\n\n                            tone.pitches[0] = noteForThisTone.pitches[i];\n                            tone.pitchCount = 1;\n                            tone.chordSize = noteForThisTone.pitches.length;\n                            tone.instrumentIndex = instrumentIndex;\n                            tone.note = noteForThisTone;\n                            tone.noteStartPart = noteStartPart;\n                            tone.noteEndPart = noteEndPart;\n                            tone.prevNote = prevNoteForThisTone;\n                            tone.nextNote = nextNoteForThisTone;\n                            tone.prevNotePitchIndex = i;\n                            tone.nextNotePitchIndex = i;\n                            tone.atNoteStart = atNoteStart;\n                            tone.passedEndOfNote = passedEndOfNote;\n                            tone.forceContinueAtStart = forceContinueAtStart && prevNoteForThisTone != null;\n                            tone.forceContinueAtEnd = forceContinueAtEnd && nextNoteForThisTone != null;\n                            this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\n                        }\n                    }\n                    if (transition.continues && (toneList.count() <= 0) || (note.pitches.length <= 0)) instrumentState.envelopeComputer.reset(); //stop computing effects envelopes\n                }\n                // Automatically free or release seamless tones if there's no new note to take over.\n                while (toneList.count() > toneCount) {\n                    const tone: Tone = toneList.popBack();\n                    const channel: Channel = song.channels[channelIndex];\n                    if (tone.instrumentIndex < channel.instruments.length && !tone.isOnLastTick) {\n                        const instrumentState: InstrumentState = channelState.instruments[tone.instrumentIndex];\n                        this.releaseTone(instrumentState, tone);\n                    } else {\n                        this.freeTone(tone);\n                    }\n                }\n\n                this.clearTempMatchedPitchTones(toneCount, instrumentState);\n            }\n        }\n    }\n\n    private clearTempMatchedPitchTones(toneCount: number, instrumentState: InstrumentState): void {\n        for (let i: number = toneCount; i < this.tempMatchedPitchTones.length; i++) {\n            const oldTone: Tone | null = this.tempMatchedPitchTones[i];\n            if (oldTone != null) {\n                if (oldTone.isOnLastTick) {\n                    this.freeTone(oldTone);\n                } else {\n                    this.releaseTone(instrumentState, oldTone);\n                }\n                this.tempMatchedPitchTones[i] = null;\n            }\n        }\n    }\n\n\n    private playTone(channelIndex: number, bufferIndex: number, runLength: number, tone: Tone): void {\n        const channelState: ChannelState = this.channels[channelIndex];\n        const instrumentState: InstrumentState = channelState.instruments[tone.instrumentIndex];\n\n        if (instrumentState.synthesizer != null) instrumentState.synthesizer!(this, bufferIndex, runLength, tone, instrumentState);\n        tone.envelopeComputer.clearEnvelopes();\n        instrumentState.envelopeComputer.clearEnvelopes();\n    }\n\n    // Computes mod note position at the start and end of the window and \"plays\" the mod tone, setting appropriate mod data.\n    private playModTone(song: Song, channelIndex: number, samplesPerTick: number, bufferIndex: number, roundedSamplesPerTick: number, tone: Tone, released: boolean, shouldFadeOutFast: boolean): void {\n        const channel: Channel = song.channels[channelIndex];\n        const instrument: Instrument = channel.instruments[tone.instrumentIndex];\n\n        if (tone.note != null) {\n            const ticksIntoBar: number = this.getTicksIntoBar();\n            const partTimeTickStart: number = (ticksIntoBar) / Config.ticksPerPart;\n            const partTimeTickEnd: number = (ticksIntoBar + 1) / Config.ticksPerPart;\n            const tickSampleCountdown: number = this.tickSampleCountdown;\n            const startRatio: number = 1.0 - (tickSampleCountdown) / samplesPerTick;\n            const endRatio: number = 1.0 - (tickSampleCountdown - roundedSamplesPerTick) / samplesPerTick;\n            const partTimeStart: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * startRatio;\n            const partTimeEnd: number = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * endRatio;\n            const tickTimeStart: number = Config.ticksPerPart * partTimeStart;\n            const tickTimeEnd: number = Config.ticksPerPart * partTimeEnd;\n            const endPinIndex: number = tone.note.getEndPinIndex(this.getCurrentPart());\n            const startPin: NotePin = tone.note.pins[endPinIndex - 1];\n            const endPin: NotePin = tone.note.pins[endPinIndex];\n            const startPinTick: number = (tone.note.start + startPin.time) * Config.ticksPerPart;\n            const endPinTick: number = (tone.note.start + endPin.time) * Config.ticksPerPart;\n            const ratioStart: number = (tickTimeStart - startPinTick) / (endPinTick - startPinTick);\n            const ratioEnd: number = (tickTimeEnd - startPinTick) / (endPinTick - startPinTick);\n            tone.expression = startPin.size + (endPin.size - startPin.size) * ratioStart;\n            tone.expressionDelta = (startPin.size + (endPin.size - startPin.size) * ratioEnd) - tone.expression;\n\n            Synth.modSynth(this, bufferIndex, roundedSamplesPerTick, tone, instrument);\n        }\n    }\n\n    private static computeChordExpression(chordSize: number): number {\n        return 1.0 / ((chordSize - 1) * 0.25 + 1.0);\n    }\n\n    private computeTone(song: Song, channelIndex: number, samplesPerTick: number, tone: Tone, released: boolean, shouldFadeOutFast: boolean): void {\n        const roundedSamplesPerTick: number = Math.ceil(samplesPerTick);\n        const channel: Channel = song.channels[channelIndex];\n        const channelState: ChannelState = this.channels[channelIndex];\n        const instrument: Instrument = channel.instruments[tone.instrumentIndex];\n        const instrumentState: InstrumentState = channelState.instruments[tone.instrumentIndex];\n        instrumentState.awake = true;\n        instrumentState.tonesAddedInThisTick = true;\n        if (!instrumentState.computed) {\n            instrumentState.compute(this, instrument, samplesPerTick, roundedSamplesPerTick, tone, channelIndex, tone.instrumentIndex);\n        }\n        const transition: Transition = instrument.getTransition();\n        const chord: Chord = instrument.getChord();\n        const chordExpression: number = chord.singleTone ? 1.0 : Synth.computeChordExpression(tone.chordSize);\n        const isNoiseChannel: boolean = song.getChannelIsNoise(channelIndex);\n        const intervalScale: number = isNoiseChannel ? Config.noiseInterval : 1;\n        const secondsPerPart: number = Config.ticksPerPart * samplesPerTick / this.samplesPerSecond;\n        const sampleTime: number = 1.0 / this.samplesPerSecond;\n        const beatsPerPart: number = 1.0 / Config.partsPerBeat;\n        const ticksIntoBar: number = this.getTicksIntoBar();\n        const partTimeStart: number = (ticksIntoBar) / Config.ticksPerPart;\n        const partTimeEnd: number = (ticksIntoBar + 1.0) / Config.ticksPerPart;\n        const currentPart: number = this.getCurrentPart();\n\n        let specialIntervalMult: number = 1.0;\n        tone.specialIntervalExpressionMult = 1.0;\n\n        //if (synth.isModActive(ModSetting.mstPan, channelIndex, tone.instrumentIndex)) {\n        //    startPan = synth.getModValue(ModSetting.mstPan, false, channel, instrumentIdx, false);\n        //    endPan = synth.getModValue(ModSetting.mstPan, false, channel, instrumentIdx, true);\n        //}\n\n        let toneIsOnLastTick: boolean = shouldFadeOutFast;\n        let intervalStart: number = 0.0;\n        let intervalEnd: number = 0.0;\n        let fadeExpressionStart: number = 1.0;\n        let fadeExpressionEnd: number = 1.0;\n        let chordExpressionStart: number = chordExpression;\n        let chordExpressionEnd: number = chordExpression;\n\n        let expressionReferencePitch: number = 16; // A low \"E\" as a MIDI pitch.\n        let basePitch: number = Config.keys[song.key].basePitch + (Config.pitchesPerOctave * song.octave);\n        let baseExpression: number = 1.0;\n        let pitchDamping: number = 48;\n        if (instrument.type == InstrumentType.spectrum) {\n            baseExpression = Config.spectrumBaseExpression;\n            if (isNoiseChannel) {\n                basePitch = Config.spectrumBasePitch;\n                baseExpression *= 2.0; // Note: spectrum is louder for drum channels than pitch channels!\n            }\n            expressionReferencePitch = Config.spectrumBasePitch;\n            pitchDamping = 28;\n        } else if (instrument.type == InstrumentType.drumset) {\n            basePitch = Config.spectrumBasePitch;\n            baseExpression = Config.drumsetBaseExpression;\n            expressionReferencePitch = basePitch;\n        } else if (instrument.type == InstrumentType.noise) {\n            // dogebox2 code, makes basic noise affected by keys in pitch channels\n            basePitch = isNoiseChannel ? Config.chipNoises[instrument.chipNoise].basePitch : basePitch + Config.chipNoises[instrument.chipNoise].basePitch - 12;\n            // maybe also lower expression in pitch channels?\n            baseExpression = Config.noiseBaseExpression;\n            expressionReferencePitch = basePitch;\n            pitchDamping = Config.chipNoises[instrument.chipNoise].isSoft ? 24.0 : 60.0;\n        } else if (instrument.type == InstrumentType.fm || instrument.type == InstrumentType.fm6op) {\n            baseExpression = Config.fmBaseExpression;\n        } else if (instrument.type == InstrumentType.chip) {\n            baseExpression = Config.chipBaseExpression;\n            if (Config.chipWaves[instrument.chipWave].isCustomSampled) {\n                if (Config.chipWaves[instrument.chipWave].isPercussion) {\n                    basePitch = -84.37 + Math.log2(Config.chipWaves[instrument.chipWave].samples.length / Config.chipWaves[instrument.chipWave].sampleRate!) * -12 - (-60 + Config.chipWaves[instrument.chipWave].rootKey!);\n                } else {\n                    basePitch += -96.37 + Math.log2(Config.chipWaves[instrument.chipWave].samples.length / Config.chipWaves[instrument.chipWave].sampleRate!) * -12 - (-60 + Config.chipWaves[instrument.chipWave].rootKey!);\n                }\n            } else {\n                if (Config.chipWaves[instrument.chipWave].isSampled && !Config.chipWaves[instrument.chipWave].isPercussion) {\n                    basePitch = basePitch - 63 + Config.chipWaves[instrument.chipWave].extraSampleDetune!\n                } else if (Config.chipWaves[instrument.chipWave].isSampled && Config.chipWaves[instrument.chipWave].isPercussion) {\n                    basePitch = -51 + Config.chipWaves[instrument.chipWave].extraSampleDetune!;\n                }\n            }\n        } else if (instrument.type == InstrumentType.customChipWave) {\n            baseExpression = Config.chipBaseExpression;\n        } else if (instrument.type == InstrumentType.harmonics) {\n            baseExpression = Config.harmonicsBaseExpression;\n        } else if (instrument.type == InstrumentType.pwm) {\n            baseExpression = Config.pwmBaseExpression;\n        } else if (instrument.type == InstrumentType.supersaw) {\n            baseExpression = Config.supersawBaseExpression;\n        } else if (instrument.type == InstrumentType.pickedString) {\n            baseExpression = Config.pickedStringBaseExpression;\n        } else if (instrument.type == InstrumentType.mod) {\n            baseExpression = 1.0;\n            expressionReferencePitch = 0;\n            pitchDamping = 1.0;\n            basePitch = 0;\n        } else {\n            throw new Error(\"Unknown instrument type in computeTone.\");\n        }\n\n        if ((tone.atNoteStart && !transition.isSeamless && !tone.forceContinueAtStart) || tone.freshlyAllocated) {\n            tone.reset();\n            if (tone.note != null) tone.chipWaveStartOffset = tone.note.chipWaveStartOffset;\n            instrumentState.envelopeComputer.reset();\n            // advloop addition\n            if (instrument.type == InstrumentType.chip && instrument.isUsingAdvancedLoopControls) {\n                const chipWaveLength = Config.rawRawChipWaves[instrument.chipWave].samples.length - 1;\n                const firstOffset = (tone.chipWaveStartOffset + instrument.chipWaveStartOffset) / chipWaveLength;\n                // const lastOffset = (chipWaveLength - 0.01) / chipWaveLength;\n                // @TODO: This is silly and I should actually figure out how to\n                // properly keep lastOffset as 1.0 and not get it wrapped back\n                // to 0 once it's in `Synth.loopableChipSynth`.\n                const lastOffset = 0.999999999999999;\n                for (let i = 0; i < Config.maxPitchOrOperatorCount; i++) {\n                    tone.phases[i] = instrument.chipWavePlayBackwards ? Math.max(0, Math.min(lastOffset, firstOffset)) : Math.max(0, firstOffset);\n                    tone.directions[i] = instrument.chipWavePlayBackwards ? -1 : 1;\n                    tone.chipWaveCompletions[i] = 0;\n                    tone.chipWavePrevWavesL[i] = 0;\n                    tone.chipWavePrevWavesR[i] = 0;\n                    tone.chipWaveCompletionsLastWaveL[i] = 0;\n                    tone.chipWaveCompletionsLastWaveR[i] = 0;\n                }\n            }\n            // advloop addition\n        }\n        tone.freshlyAllocated = false;\n\n        for (let i: number = 0; i < Config.maxPitchOrOperatorCount; i++) {\n            tone.phaseDeltas[i] = 0.0;\n            tone.phaseDeltaScales[i] = 0.0;\n            tone.operatorExpressions[i] = 0.0;\n            tone.operatorExpressionDeltas[i] = 0.0;\n        }\n        tone.expression = 0.0;\n        tone.expressionDelta = 0.0;\n        for (let i: number = 0; i < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); i++) {\n            tone.operatorWaves[i] = Synth.getOperatorWave(instrument.operators[i].waveform, instrument.operators[i].pulseWidth);\n        }\n\n        if (released) {\n            const startTicksSinceReleased: number = tone.ticksSinceReleased;\n            const endTicksSinceReleased: number = tone.ticksSinceReleased + 1.0;\n            intervalStart = intervalEnd = tone.lastInterval;\n            const fadeOutTicks: number = Math.abs(instrument.getFadeOutTicks());\n            fadeExpressionStart = Synth.noteSizeToVolumeMult((1.0 - startTicksSinceReleased / fadeOutTicks) * Config.noteSizeMax);\n            fadeExpressionEnd = Synth.noteSizeToVolumeMult((1.0 - endTicksSinceReleased / fadeOutTicks) * Config.noteSizeMax);\n\n            if (shouldFadeOutFast) {\n                fadeExpressionEnd = 0.0;\n            }\n\n            if (tone.ticksSinceReleased + 1 >= fadeOutTicks) toneIsOnLastTick = true;\n        } else if (tone.note == null) {\n            fadeExpressionStart = fadeExpressionEnd = 1.0;\n            tone.lastInterval = 0;\n            tone.ticksSinceReleased = 0;\n            tone.liveInputSamplesHeld += roundedSamplesPerTick;\n        } else {\n            const note: Note = tone.note;\n            const nextNote: Note | null = tone.nextNote;\n\n            const noteStartPart: number = tone.noteStartPart;\n            const noteEndPart: number = tone.noteEndPart;\n\n\n            const endPinIndex: number = note.getEndPinIndex(currentPart);\n            const startPin: NotePin = note.pins[endPinIndex - 1];\n            const endPin: NotePin = note.pins[endPinIndex];\n            const noteStartTick: number = noteStartPart * Config.ticksPerPart;\n            const noteEndTick: number = noteEndPart * Config.ticksPerPart;\n            const pinStart: number = (note.start + startPin.time) * Config.ticksPerPart;\n            const pinEnd: number = (note.start + endPin.time) * Config.ticksPerPart;\n\n            tone.ticksSinceReleased = 0;\n\n            const tickTimeStart: number = currentPart * Config.ticksPerPart + this.tick;\n            const tickTimeEnd: number = tickTimeStart + 1.0;\n            const noteTicksPassedTickStart: number = tickTimeStart - noteStartTick;\n            const noteTicksPassedTickEnd: number = tickTimeEnd - noteStartTick;\n            const pinRatioStart: number = Math.min(1.0, (tickTimeStart - pinStart) / (pinEnd - pinStart));\n            const pinRatioEnd: number = Math.min(1.0, (tickTimeEnd - pinStart) / (pinEnd - pinStart));\n            fadeExpressionStart = 1.0;\n            fadeExpressionEnd = 1.0;\n            intervalStart = startPin.interval + (endPin.interval - startPin.interval) * pinRatioStart;\n            intervalEnd = startPin.interval + (endPin.interval - startPin.interval) * pinRatioEnd;\n            tone.lastInterval = intervalEnd;\n\n            if ((!transition.isSeamless && !tone.forceContinueAtEnd) || nextNote == null) {\n                const fadeOutTicks: number = -instrument.getFadeOutTicks();\n                if (fadeOutTicks > 0.0) {\n                    // If the tone should fade out before the end of the note, do so here.\n                    const noteLengthTicks: number = noteEndTick - noteStartTick;\n                    fadeExpressionStart *= Math.min(1.0, (noteLengthTicks - noteTicksPassedTickStart) / fadeOutTicks);\n                    fadeExpressionEnd *= Math.min(1.0, (noteLengthTicks - noteTicksPassedTickEnd) / fadeOutTicks);\n                    if (tickTimeEnd >= noteStartTick + noteLengthTicks) toneIsOnLastTick = true;\n                }\n            }\n\n        }\n\n        tone.isOnLastTick = toneIsOnLastTick;\n\n        let tmpNoteFilter: FilterSettings = instrument.noteFilter;\n        let startPoint: FilterControlPoint;\n        let endPoint: FilterControlPoint;\n\n        if (instrument.noteFilterType) {\n            // Simple EQ filter (old style). For analysis, using random filters from normal style since they are N/A in this context.\n            const noteFilterSettingsStart: FilterSettings = instrument.noteFilter;\n            if (instrument.noteSubFilters[1] == null)\n                instrument.noteSubFilters[1] = new FilterSettings();\n            const noteFilterSettingsEnd: FilterSettings = instrument.noteSubFilters[1];\n\n            // Change location based on slider values\n            let startSimpleFreq: number = instrument.noteFilterSimpleCut;\n            let startSimpleGain: number = instrument.noteFilterSimplePeak;\n            let endSimpleFreq: number = instrument.noteFilterSimpleCut;\n            let endSimpleGain: number = instrument.noteFilterSimplePeak;\n            let filterChanges: boolean = false;\n\n            if (this.isModActive(Config.modulators.dictionary[\"note filt cut\"].index, channelIndex, tone.instrumentIndex)) {\n                startSimpleFreq = this.getModValue(Config.modulators.dictionary[\"note filt cut\"].index, channelIndex, tone.instrumentIndex, false);\n                endSimpleFreq = this.getModValue(Config.modulators.dictionary[\"note filt cut\"].index, channelIndex, tone.instrumentIndex, true);\n                filterChanges = true;\n            }\n            if (this.isModActive(Config.modulators.dictionary[\"note filt peak\"].index, channelIndex, tone.instrumentIndex)) {\n                startSimpleGain = this.getModValue(Config.modulators.dictionary[\"note filt peak\"].index, channelIndex, tone.instrumentIndex, false);\n                endSimpleGain = this.getModValue(Config.modulators.dictionary[\"note filt peak\"].index, channelIndex, tone.instrumentIndex, true);\n                filterChanges = true;\n            }\n\n            noteFilterSettingsStart.convertLegacySettingsForSynth(startSimpleFreq, startSimpleGain, !filterChanges);\n            noteFilterSettingsEnd.convertLegacySettingsForSynth(endSimpleFreq, endSimpleGain, !filterChanges);\n\n            startPoint = noteFilterSettingsStart.controlPoints[0];\n            endPoint = noteFilterSettingsEnd.controlPoints[0];\n\n            // Temporarily override so that envelope computer uses appropriate computed note filter\n            instrument.noteFilter = noteFilterSettingsStart;\n            instrument.tmpNoteFilterStart = noteFilterSettingsStart;\n        }\n\n        // Compute envelopes *after* resetting the tone, otherwise the envelope computer gets reset too!\n        const envelopeComputer: EnvelopeComputer = tone.envelopeComputer;\n        const envelopeSpeeds: number[] = [];\n        for (let i: number = 0; i < Config.maxEnvelopeCount; i++) {\n            envelopeSpeeds[i] = 0;\n        }\n        for (let envelopeIndex: number = 0; envelopeIndex < instrument.envelopeCount; envelopeIndex++) {\n            let perEnvelopeSpeed: number = instrument.envelopes[envelopeIndex].perEnvelopeSpeed;\n            if (this.isModActive(Config.modulators.dictionary[\"individual envelope speed\"].index, channelIndex, tone.instrumentIndex) && instrument.envelopes[envelopeIndex].tempEnvelopeSpeed != null) {\n                perEnvelopeSpeed = instrument.envelopes[envelopeIndex].tempEnvelopeSpeed!;\n            }\n            let useEnvelopeSpeed: number = Config.arpSpeedScale[instrument.envelopeSpeed] * perEnvelopeSpeed;\n            if (this.isModActive(Config.modulators.dictionary[\"envelope speed\"].index, channelIndex, tone.instrumentIndex)) {\n                useEnvelopeSpeed = Math.max(0, Math.min(Config.arpSpeedScale.length - 1, this.getModValue(Config.modulators.dictionary[\"envelope speed\"].index, channelIndex, tone.instrumentIndex, false)));\n                if (Number.isInteger(useEnvelopeSpeed)) {\n                    useEnvelopeSpeed = Config.arpSpeedScale[useEnvelopeSpeed] * perEnvelopeSpeed;\n                } else {\n                    // Linear interpolate envelope values\n                    useEnvelopeSpeed = (1 - (useEnvelopeSpeed % 1)) * Config.arpSpeedScale[Math.floor(useEnvelopeSpeed)] + (useEnvelopeSpeed % 1) * Config.arpSpeedScale[Math.ceil(useEnvelopeSpeed)] * perEnvelopeSpeed;\n                }\n            }\n            envelopeSpeeds[envelopeIndex] = useEnvelopeSpeed;\n        }\n        envelopeComputer.computeEnvelopes(instrument, currentPart, instrumentState.envelopeTime, Config.ticksPerPart * partTimeStart, samplesPerTick / this.samplesPerSecond, tone, envelopeSpeeds, instrumentState, this, channelIndex, tone.instrumentIndex);\n        const envelopeStarts: number[] = tone.envelopeComputer.envelopeStarts;\n        const envelopeEnds: number[] = tone.envelopeComputer.envelopeEnds;\n        instrument.noteFilter = tmpNoteFilter;\n        if (transition.continues && (tone.prevNote == null || tone.note == null)) {\n            instrumentState.envelopeComputer.reset();\n        }\n\n        if (tone.note != null && transition.slides) {\n            // Slide interval and chordExpression at the start and/or end of the note if necessary.\n            const prevNote: Note | null = tone.prevNote;\n            const nextNote: Note | null = tone.nextNote;\n            if (prevNote != null) {\n                const intervalDiff: number = prevNote.pitches[tone.prevNotePitchIndex] + prevNote.pins[prevNote.pins.length - 1].interval - tone.pitches[0];\n                if (envelopeComputer.prevSlideStart) intervalStart += intervalDiff * envelopeComputer.prevSlideRatioStart;\n                if (envelopeComputer.prevSlideEnd) intervalEnd += intervalDiff * envelopeComputer.prevSlideRatioEnd;\n                if (!chord.singleTone) {\n                    const chordSizeDiff: number = prevNote.pitches.length - tone.chordSize;\n                    if (envelopeComputer.prevSlideStart) chordExpressionStart = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.prevSlideRatioStart);\n                    if (envelopeComputer.prevSlideEnd) chordExpressionEnd = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.prevSlideRatioEnd);\n                }\n            }\n            if (nextNote != null) {\n                const intervalDiff: number = nextNote.pitches[tone.nextNotePitchIndex] - (tone.pitches[0] + tone.note.pins[tone.note.pins.length - 1].interval);\n                if (envelopeComputer.nextSlideStart) intervalStart += intervalDiff * envelopeComputer.nextSlideRatioStart;\n                if (envelopeComputer.nextSlideEnd) intervalEnd += intervalDiff * envelopeComputer.nextSlideRatioEnd;\n                if (!chord.singleTone) {\n                    const chordSizeDiff: number = nextNote.pitches.length - tone.chordSize;\n                    if (envelopeComputer.nextSlideStart) chordExpressionStart = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.nextSlideRatioStart);\n                    if (envelopeComputer.nextSlideEnd) chordExpressionEnd = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.nextSlideRatioEnd);\n                }\n            }\n        }\n\n        if (effectsIncludePitchShift(instrument.mdeffects)) {\n            let pitchShift: number = Config.justIntonationSemitones[instrument.pitchShift] / intervalScale;\n            let pitchShiftScalarStart: number = 1.0;\n            let pitchShiftScalarEnd: number = 1.0;\n            if (this.isModActive(Config.modulators.dictionary[\"pitch shift\"].index, channelIndex, tone.instrumentIndex)) {\n                pitchShift = Config.justIntonationSemitones[Config.justIntonationSemitones.length - 1];\n                pitchShiftScalarStart = (this.getModValue(Config.modulators.dictionary[\"pitch shift\"].index, channelIndex, tone.instrumentIndex, false)) / (Config.pitchShiftCenter);\n                pitchShiftScalarEnd = (this.getModValue(Config.modulators.dictionary[\"pitch shift\"].index, channelIndex, tone.instrumentIndex, true)) / (Config.pitchShiftCenter);\n            }\n            const envelopeStart: number = envelopeStarts[EnvelopeComputeIndex.pitchShift];\n            const envelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.pitchShift];\n            intervalStart += pitchShift * envelopeStart * pitchShiftScalarStart;\n            intervalEnd += pitchShift * envelopeEnd * pitchShiftScalarEnd;\n        }\n        if (effectsIncludeDetune(instrument.mdeffects) || this.isModActive(Config.modulators.dictionary[\"song detune\"].index, channelIndex, tone.instrumentIndex)) {\n            const envelopeStart: number = envelopeStarts[EnvelopeComputeIndex.detune];\n            const envelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.detune];\n            let modDetuneStart: number = instrument.detune;\n            let modDetuneEnd: number = instrument.detune;\n            if (this.isModActive(Config.modulators.dictionary[\"detune\"].index, channelIndex, tone.instrumentIndex)) {\n                modDetuneStart = this.getModValue(Config.modulators.dictionary[\"detune\"].index, channelIndex, tone.instrumentIndex, false) + Config.detuneCenter;\n                modDetuneEnd = this.getModValue(Config.modulators.dictionary[\"detune\"].index, channelIndex, tone.instrumentIndex, true) + Config.detuneCenter;\n            }\n            if (this.isModActive(Config.modulators.dictionary[\"song detune\"].index, channelIndex, tone.instrumentIndex)) {\n                modDetuneStart += 4 * this.getModValue(Config.modulators.dictionary[\"song detune\"].index, channelIndex, tone.instrumentIndex, false);\n                modDetuneEnd += 4 * this.getModValue(Config.modulators.dictionary[\"song detune\"].index, channelIndex, tone.instrumentIndex, true);\n            }\n            intervalStart += detuneToCents(modDetuneStart) * envelopeStart * Config.pitchesPerOctave / (12.0 * 100.0);\n            intervalEnd += detuneToCents(modDetuneEnd) * envelopeEnd * Config.pitchesPerOctave / (12.0 * 100.0);\n        }\n\n        if (effectsIncludeVibrato(instrument.mdeffects)) {\n            let delayTicks: number;\n            let vibratoAmplitudeStart: number;\n            let vibratoAmplitudeEnd: number;\n            // Custom vibrato\n            if (instrument.vibrato == Config.vibratos.length) {\n                delayTicks = instrument.vibratoDelay * 2; // Delay was changed from parts to ticks in BB v9\n                // Special case: if vibrato delay is max, NEVER vibrato.\n                if (instrument.vibratoDelay == Config.modulators.dictionary[\"vibrato delay\"].maxRawVol)\n                    delayTicks = Number.POSITIVE_INFINITY;\n                vibratoAmplitudeStart = instrument.vibratoDepth;\n                vibratoAmplitudeEnd = vibratoAmplitudeStart;\n            } else {\n                delayTicks = Config.vibratos[instrument.vibrato].delayTicks;\n                vibratoAmplitudeStart = Config.vibratos[instrument.vibrato].amplitude;\n                vibratoAmplitudeEnd = vibratoAmplitudeStart;\n            }\n\n            if (this.isModActive(Config.modulators.dictionary[\"vibrato delay\"].index, channelIndex, tone.instrumentIndex)) {\n                delayTicks = this.getModValue(Config.modulators.dictionary[\"vibrato delay\"].index, channelIndex, tone.instrumentIndex, false) * 2; // Delay was changed from parts to ticks in BB v9\n                if (delayTicks == Config.modulators.dictionary[\"vibrato delay\"].maxRawVol * 2)\n                    delayTicks = Number.POSITIVE_INFINITY;\n\n            }\n\n            if (this.isModActive(Config.modulators.dictionary[\"vibrato depth\"].index, channelIndex, tone.instrumentIndex)) {\n                vibratoAmplitudeStart = this.getModValue(Config.modulators.dictionary[\"vibrato depth\"].index, channelIndex, tone.instrumentIndex, false) / 25;\n                vibratoAmplitudeEnd = this.getModValue(Config.modulators.dictionary[\"vibrato depth\"].index, channelIndex, tone.instrumentIndex, true) / 25;\n            }\n\n\n            // To maintain pitch continuity, (mostly for picked string which retriggers impulse\n            // otherwise) remember the vibrato at the end of this run and reuse it at the start\n            // of the next run if available.\n            let vibratoStart: number;\n            if (tone.prevVibrato != null) {\n                vibratoStart = tone.prevVibrato;\n            } else {\n                let vibratoLfoStart: number = Synth.getLFOAmplitude(instrument, secondsPerPart * instrumentState.vibratoTime);\n                const vibratoDepthEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.vibratoDepth];\n                vibratoStart = vibratoAmplitudeStart * vibratoLfoStart * vibratoDepthEnvelopeStart;\n                if (delayTicks > 0.0) {\n                    const ticksUntilVibratoStart: number = delayTicks - envelopeComputer.noteTicksStart;\n                    vibratoStart *= Math.max(0.0, Math.min(1.0, 1.0 - ticksUntilVibratoStart / 2.0));\n                }\n            }\n\n            let vibratoLfoEnd: number = Synth.getLFOAmplitude(instrument, secondsPerPart * instrumentState.nextVibratoTime);\n            const vibratoDepthEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.vibratoDepth];\n            if (instrument.type != InstrumentType.mod) {\n                let vibratoEnd: number = vibratoAmplitudeEnd * vibratoLfoEnd * vibratoDepthEnvelopeEnd;\n                if (delayTicks > 0.0) {\n                    const ticksUntilVibratoEnd: number = delayTicks - envelopeComputer.noteTicksEnd;\n                    vibratoEnd *= Math.max(0.0, Math.min(1.0, 1.0 - ticksUntilVibratoEnd / 2.0));\n                }\n\n                tone.prevVibrato = vibratoEnd;\n\n                intervalStart += vibratoStart;\n                intervalEnd += vibratoEnd;\n            }\n        }\n\n        if ((!transition.isSeamless && !tone.forceContinueAtStart) || tone.prevNote == null) {\n            // Fade in the beginning of the note.\n            const fadeInSeconds: number = instrument.getFadeInSeconds();\n            if (fadeInSeconds > 0.0) {\n                fadeExpressionStart *= Math.min(1.0, envelopeComputer.noteSecondsStartUnscaled / fadeInSeconds);\n                fadeExpressionEnd *= Math.min(1.0, envelopeComputer.noteSecondsEndUnscaled / fadeInSeconds);\n            }\n        }\n\n\n        if (instrument.type == InstrumentType.drumset && tone.drumsetPitch == null) {\n            // It's possible that the note will change while the user is editing it,\n            // but the tone's pitches don't get updated because the tone has already\n            // ended and is fading out. To avoid an array index out of bounds error, clamp the pitch.\n            tone.drumsetPitch = tone.pitches[0];\n            if (tone.note != null) tone.drumsetPitch += tone.note.pickMainInterval();\n            tone.drumsetPitch = Math.max(0, Math.min(Config.drumCount - 1, tone.drumsetPitch));\n        }\n\n        let noteFilterExpression: number = envelopeComputer.lowpassCutoffDecayVolumeCompensation;\n\n        const noteAllFreqsEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.noteFilterAllFreqs];\n        const noteAllFreqsEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.noteFilterAllFreqs];\n\n        // Simple note filter\n        if (instrument.noteFilterType) {\n            const noteFreqEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.noteFilterFreq0];\n            const noteFreqEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.noteFilterFreq0];\n            const notePeakEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.noteFilterGain0];\n            const notePeakEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.noteFilterGain0];\n\n            startPoint!.toCoefficients(Synth.tempFilterStartCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeStart * noteFreqEnvelopeStart, notePeakEnvelopeStart);\n            endPoint!.toCoefficients(Synth.tempFilterEndCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeEnd * noteFreqEnvelopeEnd, notePeakEnvelopeEnd);\n\n            if (tone.noteFiltersL.length < 1) tone.noteFiltersL[0] = new DynamicBiquadFilter();\n            if (tone.noteFiltersR.length < 1) tone.noteFiltersR[0] = new DynamicBiquadFilter();\n            tone.noteFiltersL[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint!.type == FilterType.lowPass);\n            tone.noteFiltersR[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint!.type == FilterType.lowPass);\n            noteFilterExpression *= startPoint!.getVolumeCompensationMult();\n\n            tone.noteFilterCount = 1;\n        } else {\n            const noteFilterSettings: FilterSettings = (instrument.tmpNoteFilterStart != null) ? instrument.tmpNoteFilterStart : instrument.noteFilter;\n\n            for (let i: number = 0; i < noteFilterSettings.controlPointCount; i++) {\n                const noteFreqEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.noteFilterFreq0 + i];\n                const noteFreqEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.noteFilterFreq0 + i];\n                const notePeakEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.noteFilterGain0 + i];\n                const notePeakEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.noteFilterGain0 + i];\n                let startPoint: FilterControlPoint = noteFilterSettings.controlPoints[i];\n                const endPoint: FilterControlPoint = (instrument.tmpNoteFilterEnd != null && instrument.tmpNoteFilterEnd.controlPoints[i] != null) ? instrument.tmpNoteFilterEnd.controlPoints[i] : noteFilterSettings.controlPoints[i];\n\n                // If switching dot type, do it all at once and do not try to interpolate since no valid interpolation exists.\n                if (startPoint.type != endPoint.type) {\n                    startPoint = endPoint;\n                }\n\n                startPoint.toCoefficients(Synth.tempFilterStartCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeStart * noteFreqEnvelopeStart, notePeakEnvelopeStart);\n                endPoint.toCoefficients(Synth.tempFilterEndCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeEnd * noteFreqEnvelopeEnd, notePeakEnvelopeEnd);\n                if (tone.noteFiltersL.length <= i) tone.noteFiltersL[i] = new DynamicBiquadFilter();\n                if (tone.noteFiltersR.length <= i) tone.noteFiltersR[i] = new DynamicBiquadFilter();\n                tone.noteFiltersL[i].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\n                tone.noteFiltersR[i].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\n                noteFilterExpression *= startPoint.getVolumeCompensationMult();\n            }\n            tone.noteFilterCount = noteFilterSettings.controlPointCount;\n        }\n\n        if (instrument.type == InstrumentType.drumset) {\n            const drumsetEnvelopeComputer: EnvelopeComputer = tone.envelopeComputer;\n\n            const drumsetFilterEnvelope: Envelope = instrument.getDrumsetEnvelope(tone.drumsetPitch!);\n\n            // If the drumset lowpass cutoff decays, compensate by increasing expression.\n            noteFilterExpression *= EnvelopeComputer.getLowpassCutoffDecayVolumeCompensation(drumsetFilterEnvelope);\n\n            drumsetEnvelopeComputer.computeDrumsetEnvelopes(instrument, drumsetFilterEnvelope, beatsPerPart, partTimeStart, partTimeEnd);\n\n            const drumsetFilterEnvelopeStart = drumsetEnvelopeComputer.drumsetFilterEnvelopeStart;\n            const drumsetFilterEnvelopeEnd = drumsetEnvelopeComputer.drumsetFilterEnvelopeEnd;\n\n            const point: FilterControlPoint = this.tempDrumSetControlPoint;\n            point.type = FilterType.lowPass;\n            point.gain = FilterControlPoint.getRoundedSettingValueFromLinearGain(0.50);\n            point.freq = FilterControlPoint.getRoundedSettingValueFromHz(8000.0);\n            // Drumset envelopes are warped to better imitate the legacy simplified 2nd order lowpass at ~48000Hz that I used to use.\n            point.toCoefficients(Synth.tempFilterStartCoefficients, this.samplesPerSecond, drumsetFilterEnvelopeStart * (1.0 + drumsetFilterEnvelopeStart), 1.0);\n            point.toCoefficients(Synth.tempFilterEndCoefficients, this.samplesPerSecond, drumsetFilterEnvelopeEnd * (1.0 + drumsetFilterEnvelopeEnd), 1.0);\n            if (tone.noteFiltersL.length == tone.noteFilterCount) tone.noteFiltersL[tone.noteFilterCount] = new DynamicBiquadFilter();\n            if (tone.noteFiltersR.length == tone.noteFilterCount) tone.noteFiltersR[tone.noteFilterCount] = new DynamicBiquadFilter();\n            tone.noteFiltersL[tone.noteFilterCount].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, true);\n            tone.noteFiltersR[tone.noteFilterCount].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, true);\n            tone.noteFilterCount++;\n        }\n\n        noteFilterExpression = Math.min(3.0, noteFilterExpression);\n\n        if (instrument.type == InstrumentType.fm || instrument.type == InstrumentType.fm6op) {\n            // phase modulation!\n\n            let sineExpressionBoost: number = 1.0;\n            let totalCarrierExpression: number = 0.0;\n\n            let arpeggioInterval: number = 0;\n            const arpeggiates: boolean = chord.arpeggiates;\n            const isMono: boolean = chord.name == \"monophonic\";\n            if (tone.pitchCount > 1 && arpeggiates) {\n                const arpeggio: number = Math.floor(instrumentState.arpTime / Config.ticksPerArpeggio);\n                arpeggioInterval = tone.pitches[getArpeggioPitchIndex(tone.pitchCount, instrument.fastTwoNoteArp, arpeggio)] - tone.pitches[0];\n            }\n\n\n            const carrierCount: number = (instrument.type == InstrumentType.fm6op ? instrument.customAlgorithm.carrierCount : Config.algorithms[instrument.algorithm].carrierCount);\n            for (let i: number = 0; i < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); i++) {\n\n                const associatedCarrierIndex: number = (instrument.type == InstrumentType.fm6op ? instrument.customAlgorithm.associatedCarrier[i] - 1 : Config.algorithms[instrument.algorithm].associatedCarrier[i] - 1);\n                const pitch: number = tone.pitches[arpeggiates ? 0 : isMono ? instrument.monoChordTone : ((i < tone.pitchCount) ? i : ((associatedCarrierIndex < tone.pitchCount) ? associatedCarrierIndex : 0))];\n                const freqMult = Config.operatorFrequencies[instrument.operators[i].frequency].mult;\n                const interval = Config.operatorCarrierInterval[associatedCarrierIndex] + arpeggioInterval;\n                const pitchStart: number = basePitch + (pitch + intervalStart) * intervalScale + interval;\n                const pitchEnd: number = basePitch + (pitch + intervalEnd) * intervalScale + interval;\n                const baseFreqStart: number = Instrument.frequencyFromPitch(pitchStart);\n                const baseFreqEnd: number = Instrument.frequencyFromPitch(pitchEnd);\n                const hzOffset: number = Config.operatorFrequencies[instrument.operators[i].frequency].hzOffset;\n                const targetFreqStart: number = freqMult * baseFreqStart + hzOffset;\n                const targetFreqEnd: number = freqMult * baseFreqEnd + hzOffset;\n\n\n                const freqEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.operatorFrequency0 + i];\n                const freqEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.operatorFrequency0 + i];\n                let freqStart: number;\n                let freqEnd: number;\n                if (freqEnvelopeStart != 1.0 || freqEnvelopeEnd != 1.0) {\n                    freqStart = Math.pow(2.0, Math.log2(targetFreqStart / baseFreqStart) * freqEnvelopeStart) * baseFreqStart;\n                    freqEnd = Math.pow(2.0, Math.log2(targetFreqEnd / baseFreqEnd) * freqEnvelopeEnd) * baseFreqEnd;\n                } else {\n                    freqStart = targetFreqStart;\n                    freqEnd = targetFreqEnd;\n                }\n                tone.phaseDeltas[i] = freqStart * sampleTime;\n                tone.phaseDeltaScales[i] = Math.pow(freqEnd / freqStart, 1.0 / roundedSamplesPerTick);\n\n                let amplitudeStart: number = instrument.operators[i].amplitude;\n                let amplitudeEnd: number = instrument.operators[i].amplitude;\n                if (i < 4) {\n                    if (this.isModActive(Config.modulators.dictionary[\"fm slider 1\"].index + i, channelIndex, tone.instrumentIndex)) {\n                        amplitudeStart *= this.getModValue(Config.modulators.dictionary[\"fm slider 1\"].index + i, channelIndex, tone.instrumentIndex, false) / 15.0;\n                        amplitudeEnd *= this.getModValue(Config.modulators.dictionary[\"fm slider 1\"].index + i, channelIndex, tone.instrumentIndex, true) / 15.0;\n                    }\n                } else {\n                    if (this.isModActive(Config.modulators.dictionary[\"fm slider 5\"].index + i - 4, channelIndex, tone.instrumentIndex)) {\n                        amplitudeStart *= this.getModValue(Config.modulators.dictionary[\"fm slider 5\"].index + i - 4, channelIndex, tone.instrumentIndex, false) / 15.0;\n                        amplitudeEnd *= this.getModValue(Config.modulators.dictionary[\"fm slider 5\"].index + i - 4, channelIndex, tone.instrumentIndex, true) / 15.0;\n                    }\n                }\n\n                const amplitudeCurveStart: number = Synth.operatorAmplitudeCurve(amplitudeStart);\n                const amplitudeCurveEnd: number = Synth.operatorAmplitudeCurve(amplitudeEnd);\n                const amplitudeMultStart: number = amplitudeCurveStart * Config.operatorFrequencies[instrument.operators[i].frequency].amplitudeSign;\n                const amplitudeMultEnd: number = amplitudeCurveEnd * Config.operatorFrequencies[instrument.operators[i].frequency].amplitudeSign;\n\n                let expressionStart: number = amplitudeMultStart;\n                let expressionEnd: number = amplitudeMultEnd;\n\n\n                if (i < carrierCount) {\n                    // carrier\n                    let pitchExpressionStart: number;\n                    if (tone.prevPitchExpressions[i] != null) {\n                        pitchExpressionStart = tone.prevPitchExpressions[i]!;\n                    } else {\n                        pitchExpressionStart = Math.pow(2.0, -(pitchStart - expressionReferencePitch) / pitchDamping);\n                    }\n                    const pitchExpressionEnd: number = Math.pow(2.0, -(pitchEnd - expressionReferencePitch) / pitchDamping);\n                    tone.prevPitchExpressions[i] = pitchExpressionEnd;\n                    expressionStart *= pitchExpressionStart;\n                    expressionEnd *= pitchExpressionEnd;\n\n                    totalCarrierExpression += amplitudeCurveEnd;\n                } else {\n                    // modulator\n                    expressionStart *= Config.sineWaveLength * 1.5;\n                    expressionEnd *= Config.sineWaveLength * 1.5;\n\n                    sineExpressionBoost *= 1.0 - Math.min(1.0, instrument.operators[i].amplitude / 15);\n                }\n\n                expressionStart *= envelopeStarts[EnvelopeComputeIndex.operatorAmplitude0 + i];\n                expressionEnd *= envelopeEnds[EnvelopeComputeIndex.operatorAmplitude0 + i];\n\n                // Check for mod-related volume delta\n                // @jummbus - This amplification is also applied to modulator FM operators which distorts the sound.\n                // The fix is to apply this only to carriers, but as this is a legacy bug and it can cause some interesting sounds, it's left in.\n                // You can use the post volume modulator instead to avoid this effect.\n\n                if (this.isModActive(Config.modulators.dictionary[\"pre volume\"].index, channelIndex, tone.instrumentIndex)) {\n                    // Linear falloff below 0, normal volume formula above 0. Seems to work best for scaling since the normal volume mult formula has a big gap from -25 to -24.\n                    const startVal: number = this.getModValue(Config.modulators.dictionary[\"pre volume\"].index, channelIndex, tone.instrumentIndex, false);\n                    const endVal: number = this.getModValue(Config.modulators.dictionary[\"pre volume\"].index, channelIndex, tone.instrumentIndex, true);\n                    expressionStart *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(startVal));\n                    expressionEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(endVal));\n                }\n\n                tone.operatorExpressions[i] = expressionStart;\n                tone.operatorExpressionDeltas[i] = (expressionEnd - expressionStart) / roundedSamplesPerTick;\n\n            }\n\n            sineExpressionBoost *= (Math.pow(2.0, (2.0 - 1.4 * instrument.feedbackAmplitude / 15.0)) - 1.0) / 3.0;\n            sineExpressionBoost *= 1.0 - Math.min(1.0, Math.max(0.0, totalCarrierExpression - 1) / 2.0);\n            sineExpressionBoost = 1.0 + sineExpressionBoost * 3.0;\n            let expressionStart: number = baseExpression * sineExpressionBoost * noteFilterExpression * fadeExpressionStart * chordExpressionStart * envelopeStarts[EnvelopeComputeIndex.noteVolume];\n            let expressionEnd: number = baseExpression * sineExpressionBoost * noteFilterExpression * fadeExpressionEnd * chordExpressionEnd * envelopeEnds[EnvelopeComputeIndex.noteVolume];\n            if (isMono && tone.pitchCount <= instrument.monoChordTone) { //silence if tone doesn't exist\n                expressionStart = 0;\n                expressionEnd = 0;\n            }\n            tone.expression = expressionStart;\n            tone.expressionDelta = (expressionEnd - expressionStart) / roundedSamplesPerTick;\n            \n\n\n            let useFeedbackAmplitudeStart: number = instrument.feedbackAmplitude;\n            let useFeedbackAmplitudeEnd: number = instrument.feedbackAmplitude;\n            if (this.isModActive(Config.modulators.dictionary[\"fm feedback\"].index, channelIndex, tone.instrumentIndex)) {\n                useFeedbackAmplitudeStart *= this.getModValue(Config.modulators.dictionary[\"fm feedback\"].index, channelIndex, tone.instrumentIndex, false) / 15.0;\n                useFeedbackAmplitudeEnd *= this.getModValue(Config.modulators.dictionary[\"fm feedback\"].index, channelIndex, tone.instrumentIndex, true) / 15.0;\n            }\n\n            let feedbackAmplitudeStart: number = Config.sineWaveLength * 0.3 * useFeedbackAmplitudeStart / 15.0;\n            const feedbackAmplitudeEnd: number = Config.sineWaveLength * 0.3 * useFeedbackAmplitudeEnd / 15.0;\n\n            let feedbackStart: number = feedbackAmplitudeStart * envelopeStarts[EnvelopeComputeIndex.feedbackAmplitude];\n            let feedbackEnd: number = feedbackAmplitudeEnd * envelopeEnds[EnvelopeComputeIndex.feedbackAmplitude];\n            tone.feedbackMult = feedbackStart;\n            tone.feedbackDelta = (feedbackEnd - feedbackStart) / roundedSamplesPerTick;\n\n\n        } else {\n            const freqEndRatio: number = Math.pow(2.0, (intervalEnd - intervalStart) * intervalScale / 12.0);\n            const basePhaseDeltaScale: number = Math.pow(freqEndRatio, 1.0 / roundedSamplesPerTick);\n            const isMono: boolean = chord.name == \"monophonic\";\n\n\n            let pitch: number = tone.pitches[0];\n            if (tone.pitchCount > 1 && (chord.arpeggiates || chord.customInterval || isMono)) {\n                const arpeggio: number = Math.floor(instrumentState.arpTime / Config.ticksPerArpeggio);\n                if (chord.customInterval) {\n                    const intervalOffset: number = tone.pitches[1 + getArpeggioPitchIndex(tone.pitchCount - 1, instrument.fastTwoNoteArp, arpeggio)] - tone.pitches[0];\n                    specialIntervalMult = Math.pow(2.0, intervalOffset / 12.0);\n                    tone.specialIntervalExpressionMult = Math.pow(2.0, -intervalOffset / pitchDamping);\n                } else if(chord.arpeggiates) {\n                    pitch = tone.pitches[getArpeggioPitchIndex(tone.pitchCount, instrument.fastTwoNoteArp, arpeggio)];\n                } else {\n                    pitch = tone.pitches[instrument.monoChordTone];\n                }\n            }\n\n            const startPitch: number = basePitch + (pitch + intervalStart) * intervalScale;\n            const endPitch: number = basePitch + (pitch + intervalEnd) * intervalScale;\n            let pitchExpressionStart: number;\n            // TODO: use the second element of prevPitchExpressions for the unison voice, compute a separate expression delta for it.\n            if (tone.prevPitchExpressions[0] != null) {\n                pitchExpressionStart = tone.prevPitchExpressions[0]!;\n            } else {\n                pitchExpressionStart = Math.pow(2.0, -(startPitch - expressionReferencePitch) / pitchDamping);\n            }\n            const pitchExpressionEnd: number = Math.pow(2.0, -(endPitch - expressionReferencePitch) / pitchDamping);\n            tone.prevPitchExpressions[0] = pitchExpressionEnd;\n            let settingsExpressionMult: number = baseExpression * noteFilterExpression;\n\n            if (instrument.type == InstrumentType.noise) {\n                settingsExpressionMult *= Config.chipNoises[instrument.chipNoise].expression;\n            }\n            if (instrument.type == InstrumentType.chip) {\n                settingsExpressionMult *= Config.chipWaves[instrument.chipWave].expression;\n            }\n            if (instrument.type == InstrumentType.pwm) {\n                const basePulseWidth: number = getPulseWidthRatio(instrument.pulseWidth);\n\n                // Check for PWM mods to this instrument\n                let pulseWidthModStart: number = basePulseWidth;\n                let pulseWidthModEnd: number = basePulseWidth;\n                if (this.isModActive(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex)) {\n                    pulseWidthModStart = (this.getModValue(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex, false)) / (Config.pulseWidthRange * 2);\n                    pulseWidthModEnd = (this.getModValue(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex, true)) / (Config.pulseWidthRange * 2);\n                }\n\n                const pulseWidthStart: number = pulseWidthModStart * envelopeStarts[EnvelopeComputeIndex.pulseWidth];\n                const pulseWidthEnd: number = pulseWidthModEnd * envelopeEnds[EnvelopeComputeIndex.pulseWidth];\n                tone.pulseWidth = pulseWidthStart;\n                tone.pulseWidthDelta = (pulseWidthEnd - pulseWidthStart) / roundedSamplesPerTick;\n\n                //decimal offset mods\n                let decimalOffsetModStart: number = instrument.decimalOffset;\n                if (this.isModActive(Config.modulators.dictionary[\"decimal offset\"].index, channelIndex, tone.instrumentIndex)) {\n                    decimalOffsetModStart = this.getModValue(Config.modulators.dictionary[\"decimal offset\"].index, channelIndex, tone.instrumentIndex, false);\n                }\n\n                const decimalOffsetStart: number = decimalOffsetModStart * envelopeStarts[EnvelopeComputeIndex.decimalOffset];\n                tone.decimalOffset = decimalOffsetStart;\n\n                tone.pulseWidth -= (tone.decimalOffset) / 10000;\n            }\n            if (instrument.type == InstrumentType.pickedString) {\n                // Check for sustain mods\n                let useSustainStart: number = instrument.stringSustain;\n                let useSustainEnd: number = instrument.stringSustain;\n                if (this.isModActive(Config.modulators.dictionary[\"sustain\"].index, channelIndex, tone.instrumentIndex)) {\n                    useSustainStart = this.getModValue(Config.modulators.dictionary[\"sustain\"].index, channelIndex, tone.instrumentIndex, false);\n                    useSustainEnd = this.getModValue(Config.modulators.dictionary[\"sustain\"].index, channelIndex, tone.instrumentIndex, true);\n                }\n\n                tone.stringSustainStart = useSustainStart;\n                tone.stringSustainEnd = useSustainEnd;\n\n                // Increase expression to compensate for string decay.\n                settingsExpressionMult *= Math.pow(2.0, 0.7 * (1.0 - useSustainStart / (Config.stringSustainRange - 1)));\n\n            }\n\n            const startFreq: number = Instrument.frequencyFromPitch(startPitch);\n            if (instrument.type == InstrumentType.chip || instrument.type == InstrumentType.customChipWave || instrument.type == InstrumentType.harmonics || instrument.type == InstrumentType.pickedString || instrument.type == InstrumentType.spectrum || instrument.type == InstrumentType.pwm || instrument.type == InstrumentType.noise || instrument.type == InstrumentType.drumset) {\n                const unisonVoices: number = instrument.unisonVoices;\n                const unisonSpread: number = instrument.unisonSpread;\n                const unisonOffset: number = instrument.unisonOffset;\n                const unisonExpression: number = instrument.unisonExpression;\n                const voiceCountExpression: number = (instrument.type == InstrumentType.pickedString) ? 1 : unisonVoices / 2.0;\n                settingsExpressionMult *= unisonExpression * voiceCountExpression;\n                const unisonEnvelopeStart = envelopeStarts[EnvelopeComputeIndex.unison];\n                const unisonEnvelopeEnd = envelopeEnds[EnvelopeComputeIndex.unison];\n                const unisonStartA: number = Math.pow(2.0, (unisonOffset + unisonSpread) * unisonEnvelopeStart / 12.0);\n                const unisonEndA: number = Math.pow(2.0, (unisonOffset + unisonSpread) * unisonEnvelopeEnd / 12.0);\n                tone.phaseDeltas[0] = startFreq * sampleTime * unisonStartA;\n                tone.phaseDeltaScales[0] = basePhaseDeltaScale * Math.pow(unisonEndA / unisonStartA, 1.0 / roundedSamplesPerTick);\n                const divisor = (unisonVoices == 1) ? 1 : (unisonVoices - 1);\n                for (let i: number = 1; i < unisonVoices; i++) {\n                    const unisonStart: number = Math.pow(2.0, (unisonOffset + unisonSpread - (2 * i * unisonSpread / divisor)) * unisonEnvelopeStart / 12.0) * (specialIntervalMult);\n                    const unisonEnd: number = Math.pow(2.0, (unisonOffset + unisonSpread - (2 * i * unisonSpread / divisor)) * unisonEnvelopeEnd / 12.0) * (specialIntervalMult);\n                    tone.phaseDeltas[i] = startFreq * sampleTime * unisonStart;\n                    tone.phaseDeltaScales[i] = basePhaseDeltaScale * Math.pow(unisonEnd / unisonStart, 1.0 / roundedSamplesPerTick);\n                }\n                for (let i: number = unisonVoices; i < Config.unisonVoicesMax; i++) {\n                    tone.phaseDeltas[i] = tone.phaseDeltas[0];\n                    tone.phaseDeltaScales[i] = tone.phaseDeltaScales[0];\n                }\n                \n            } else {\n                tone.phaseDeltas[0] = startFreq * sampleTime;\n                tone.phaseDeltaScales[0] = basePhaseDeltaScale;\n            }\n\n            // TODO: make expressionStart and expressionEnd variables earlier and modify those\n            // instead of these supersawExpression variables.\n            let supersawExpressionStart: number = 1.0;\n            let supersawExpressionEnd: number = 1.0;\n            if (instrument.type == InstrumentType.supersaw) {\n                const minFirstVoiceAmplitude: number = 1.0 / Math.sqrt(Config.supersawVoiceCount);\n\n                // Dynamism mods\n                let useDynamismStart: number = instrument.supersawDynamism / Config.supersawDynamismMax;\n                let useDynamismEnd: number = instrument.supersawDynamism / Config.supersawDynamismMax;\n                if (this.isModActive(Config.modulators.dictionary[\"dynamism\"].index, channelIndex, tone.instrumentIndex)) {\n                    useDynamismStart = (this.getModValue(Config.modulators.dictionary[\"dynamism\"].index, channelIndex, tone.instrumentIndex, false)) / Config.supersawDynamismMax;\n                    useDynamismEnd = (this.getModValue(Config.modulators.dictionary[\"dynamism\"].index, channelIndex, tone.instrumentIndex, true)) / Config.supersawDynamismMax;\n                }\n\n                const curvedDynamismStart: number = 1.0 - Math.pow(Math.max(0.0, 1.0 - useDynamismStart * envelopeStarts[EnvelopeComputeIndex.supersawDynamism]), 0.2);\n                const curvedDynamismEnd: number = 1.0 - Math.pow(Math.max(0.0, 1.0 - useDynamismEnd * envelopeEnds[EnvelopeComputeIndex.supersawDynamism]), 0.2);\n                const firstVoiceAmplitudeStart: number = Math.pow(2.0, Math.log2(minFirstVoiceAmplitude) * curvedDynamismStart);\n                const firstVoiceAmplitudeEnd: number = Math.pow(2.0, Math.log2(minFirstVoiceAmplitude) * curvedDynamismEnd);\n\n                const dynamismStart: number = Math.sqrt((1.0 / Math.pow(firstVoiceAmplitudeStart, 2.0) - 1.0) / (Config.supersawVoiceCount - 1.0));\n                const dynamismEnd: number = Math.sqrt((1.0 / Math.pow(firstVoiceAmplitudeEnd, 2.0) - 1.0) / (Config.supersawVoiceCount - 1.0));\n                tone.supersawDynamism = dynamismStart;\n                tone.supersawDynamismDelta = (dynamismEnd - dynamismStart) / roundedSamplesPerTick;\n\n                const initializeSupersaw: boolean = (tone.supersawDelayIndex == -1);\n                if (initializeSupersaw) {\n                    // Goal: generate sawtooth phases such that the combined initial amplitude\n                    // cancel out to minimize pop. Algorithm: generate sorted phases, iterate over\n                    // their sawtooth drop points to find a combined zero crossing, then offset the\n                    // phases so they start there.\n\n                    // Generate random phases in ascending order by adding positive randomly\n                    // sized gaps between adjacent phases. For a proper distribution of random\n                    // events, the gaps sizes should be an \"exponential distribution\", which is\n                    // just: -Math.log(Math.random()). At the end, normalize the phases to a 0-1\n                    // range by dividing by the final value of the accumulator.\n                    let accumulator: number = 0.0;\n                    for (let i: number = 0; i < Config.supersawVoiceCount; i++) {\n                        tone.phases[i] = accumulator;\n                        accumulator += -Math.log(Math.random());\n                    }\n\n                    const amplitudeSum: number = 1.0 + (Config.supersawVoiceCount - 1.0) * dynamismStart;\n                    const slope: number = amplitudeSum;\n\n                    // Find the initial amplitude of the sum of sawtooths with the normalized\n                    // set of phases.\n                    let sample: number = 0.0;\n                    for (let i: number = 0; i < Config.supersawVoiceCount; i++) {\n                        const amplitude: number = (i == 0) ? 1.0 : dynamismStart;\n                        const normalizedPhase: number = tone.phases[i] / accumulator;\n                        tone.phases[i] = normalizedPhase;\n                        sample += (normalizedPhase - 0.5) * amplitude;\n                    }\n\n                    // Find the phase of the zero crossing of the sum of the sawtooths. You can\n                    // use a constant slope and the distance between sawtooth drops to determine if\n                    // the zero crossing occurs between them. Note that a small phase means that\n                    // the corresponding drop for that wave is far away, and a big phase means the\n                    // drop is nearby, so to iterate forward through the drops we iterate backward\n                    // through the phases.\n                    let zeroCrossingPhase: number = 1.0;\n                    let prevDrop: number = 0.0;\n                    for (let i: number = Config.supersawVoiceCount - 1; i >= 0; i--) {\n                        const nextDrop: number = 1.0 - tone.phases[i];\n                        const phaseDelta: number = nextDrop - prevDrop;\n                        if (sample < 0.0) {\n                            const distanceToZeroCrossing: number = -sample / slope;\n                            if (distanceToZeroCrossing < phaseDelta) {\n                                zeroCrossingPhase = prevDrop + distanceToZeroCrossing;\n                                break;\n                            }\n                        }\n                        const amplitude: number = (i == 0) ? 1.0 : dynamismStart;\n                        sample += phaseDelta * slope - amplitude;\n                        prevDrop = nextDrop;\n                    }\n                    for (let i: number = 0; i < Config.supersawVoiceCount; i++) {\n                        tone.phases[i] += zeroCrossingPhase;\n                    }\n\n                    // Randomize the (initially sorted) order of the phases (aside from the\n                    // first one) so that they don't correlate to the detunes that are also\n                    // based on index.\n                    for (let i: number = 1; i < Config.supersawVoiceCount - 1; i++) {\n                        const swappedIndex: number = i + Math.floor(Math.random() * (Config.supersawVoiceCount - i));\n                        const temp: number = tone.phases[i];\n                        tone.phases[i] = tone.phases[swappedIndex];\n                        tone.phases[swappedIndex] = temp;\n                    }\n                }\n\n                const baseSpreadSlider: number = instrument.supersawSpread / Config.supersawSpreadMax;\n                // Spread mods\n                let useSpreadStart: number = baseSpreadSlider;\n                let useSpreadEnd: number = baseSpreadSlider;\n                if (this.isModActive(Config.modulators.dictionary[\"spread\"].index, channelIndex, tone.instrumentIndex)) {\n                    useSpreadStart = (this.getModValue(Config.modulators.dictionary[\"spread\"].index, channelIndex, tone.instrumentIndex, false)) / Config.supersawSpreadMax;\n                    useSpreadEnd = (this.getModValue(Config.modulators.dictionary[\"spread\"].index, channelIndex, tone.instrumentIndex, true)) / Config.supersawSpreadMax;\n                }\n\n                const spreadSliderStart: number = useSpreadStart * envelopeStarts[EnvelopeComputeIndex.supersawSpread];\n                const spreadSliderEnd: number = useSpreadEnd * envelopeEnds[EnvelopeComputeIndex.supersawSpread];\n                // Just use the average detune for the current tick in the below loop.\n                const averageSpreadSlider: number = (spreadSliderStart + spreadSliderEnd) * 0.5;\n                const curvedSpread: number = Math.pow(1.0 - Math.sqrt(Math.max(0.0, 1.0 - averageSpreadSlider)), 1.75);\n                for (let i = 0; i < Config.supersawVoiceCount; i++) {\n                    // Spread out the detunes around the center;\n                    const offset: number = (i == 0) ? 0.0 : Math.pow((((i + 1) >> 1) - 0.5 + 0.025 * ((i & 2) - 1)) / (Config.supersawVoiceCount >> 1), 1.1) * ((i & 1) * 2 - 1);\n                    tone.supersawUnisonDetunes[i] = Math.pow(2.0, curvedSpread * offset / 12.0);\n                }\n\n                const baseShape: number = instrument.supersawShape / Config.supersawShapeMax;\n                // Saw shape mods\n                let useShapeStart: number = baseShape * envelopeStarts[EnvelopeComputeIndex.supersawShape];\n                let useShapeEnd: number = baseShape * envelopeEnds[EnvelopeComputeIndex.supersawShape];\n                if (this.isModActive(Config.modulators.dictionary[\"saw shape\"].index, channelIndex, tone.instrumentIndex)) {\n                    useShapeStart = (this.getModValue(Config.modulators.dictionary[\"saw shape\"].index, channelIndex, tone.instrumentIndex, false)) / Config.supersawShapeMax;\n                    useShapeEnd = (this.getModValue(Config.modulators.dictionary[\"saw shape\"].index, channelIndex, tone.instrumentIndex, true)) / Config.supersawShapeMax;\n                }\n\n                const shapeStart: number = useShapeStart * envelopeStarts[EnvelopeComputeIndex.supersawShape];\n                const shapeEnd: number = useShapeEnd * envelopeEnds[EnvelopeComputeIndex.supersawShape];\n                tone.supersawShape = shapeStart;\n                tone.supersawShapeDelta = (shapeEnd - shapeStart) / roundedSamplesPerTick;\n\n                //decimal offset mods\n                let decimalOffsetModStart: number = instrument.decimalOffset;\n                if (this.isModActive(Config.modulators.dictionary[\"decimal offset\"].index, channelIndex, tone.instrumentIndex)) {\n                    decimalOffsetModStart = this.getModValue(Config.modulators.dictionary[\"decimal offset\"].index, channelIndex, tone.instrumentIndex, false);\n                }\n\n                const decimalOffsetStart: number = decimalOffsetModStart * envelopeStarts[EnvelopeComputeIndex.decimalOffset];\n                // ...is including tone.decimalOffset still necessary?\n                tone.decimalOffset = decimalOffsetStart;\n\n                const basePulseWidth: number = getPulseWidthRatio(instrument.pulseWidth);\n\n                // Check for PWM mods to this instrument\n                let pulseWidthModStart: number = basePulseWidth;\n                let pulseWidthModEnd: number = basePulseWidth;\n                if (this.isModActive(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex)) {\n                    pulseWidthModStart = (this.getModValue(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex, false)) / (Config.pulseWidthRange * 2);\n                    pulseWidthModEnd = (this.getModValue(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex, true)) / (Config.pulseWidthRange * 2);\n                }\n\n                let pulseWidthStart: number = pulseWidthModStart * envelopeStarts[EnvelopeComputeIndex.pulseWidth];\n                let pulseWidthEnd: number = pulseWidthModEnd * envelopeEnds[EnvelopeComputeIndex.pulseWidth];\n                pulseWidthStart -= decimalOffsetStart / 10000;\n                pulseWidthEnd -= decimalOffsetStart / 10000;\n                const phaseDeltaStart: number = (tone.supersawPrevPhaseDelta != null) ? tone.supersawPrevPhaseDelta : startFreq * sampleTime;\n                const phaseDeltaEnd: number = startFreq * sampleTime * freqEndRatio;\n                tone.supersawPrevPhaseDelta = phaseDeltaEnd;\n                const delayLengthStart = pulseWidthStart / phaseDeltaStart;\n                const delayLengthEnd = pulseWidthEnd / phaseDeltaEnd;\n                tone.supersawDelayLength = delayLengthStart;\n                tone.supersawDelayLengthDelta = (delayLengthEnd - delayLengthStart) / roundedSamplesPerTick;\n                const minBufferLength: number = Math.ceil(Math.max(delayLengthStart, delayLengthEnd)) + 2;\n\n                if (tone.supersawDelayLine == null || tone.supersawDelayLine.length <= minBufferLength) {\n                    // The delay line buffer will get reused for other tones so might as well\n                    // start off with a buffer size that is big enough for most notes.\n                    const likelyMaximumLength: number = Math.ceil(0.5 * this.samplesPerSecond / Instrument.frequencyFromPitch(24));\n                    const newDelayLine: Float32Array = new Float32Array(fittingPowerOfTwo(Math.max(likelyMaximumLength, minBufferLength)));\n                    if (!initializeSupersaw && tone.supersawDelayLine != null) {\n                        // If the tone has already started but the buffer needs to be reallocated,\n                        // transfer the old data to the new buffer.\n                        const oldDelayBufferMask: number = (tone.supersawDelayLine.length - 1) >> 0;\n                        const startCopyingFromIndex: number = tone.supersawDelayIndex;\n                        for (let i: number = 0; i < tone.supersawDelayLine.length; i++) {\n                            newDelayLine[i] = tone.supersawDelayLine[(startCopyingFromIndex + i) & oldDelayBufferMask];\n                        }\n                    }\n                    tone.supersawDelayLine = newDelayLine;\n                    tone.supersawDelayIndex = tone.supersawDelayLine.length;\n                } else if (initializeSupersaw) {\n                    tone.supersawDelayLine.fill(0.0);\n                    tone.supersawDelayIndex = tone.supersawDelayLine.length;\n                }\n\n                const pulseExpressionRatio: number = Config.pwmBaseExpression / Config.supersawBaseExpression;\n                supersawExpressionStart *= (1.0 + (pulseExpressionRatio - 1.0) * shapeStart) / Math.sqrt(1.0 + (Config.supersawVoiceCount - 1.0) * dynamismStart * dynamismStart);\n                supersawExpressionEnd *= (1.0 + (pulseExpressionRatio - 1.0) * shapeEnd) / Math.sqrt(1.0 + (Config.supersawVoiceCount - 1.0) * dynamismEnd * dynamismEnd);\n            }\n\n            let expressionStart: number = settingsExpressionMult * fadeExpressionStart * chordExpressionStart * pitchExpressionStart * envelopeStarts[EnvelopeComputeIndex.noteVolume] * supersawExpressionStart;\n            let expressionEnd: number = settingsExpressionMult * fadeExpressionEnd * chordExpressionEnd * pitchExpressionEnd * envelopeEnds[EnvelopeComputeIndex.noteVolume] * supersawExpressionEnd;\n\n            // Check for mod-related volume delta\n            if (this.isModActive(Config.modulators.dictionary[\"pre volume\"].index, channelIndex, tone.instrumentIndex)) {\n                // Linear falloff below 0, normal volume formula above 0. Seems to work best for scaling since the normal volume mult formula has a big gap from -25 to -24.\n                const startVal: number = this.getModValue(Config.modulators.dictionary[\"pre volume\"].index, channelIndex, tone.instrumentIndex, false);\n                const endVal: number = this.getModValue(Config.modulators.dictionary[\"pre volume\"].index, channelIndex, tone.instrumentIndex, true)\n                expressionStart *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(startVal));\n                expressionEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(endVal));\n            }\n            if (isMono && tone.pitchCount <= instrument.monoChordTone) { //silence if tone doesn't exist\n                expressionStart = 0;\n                expressionEnd = 0;\n                instrumentState.awake = false;\n            }\n\n            tone.expression = expressionStart;\n            tone.expressionDelta = (expressionEnd - expressionStart) / roundedSamplesPerTick;\n\n\n            if (instrument.type == InstrumentType.pickedString) {\n                let stringDecayStart: number;\n                if (tone.prevStringDecay != null) {\n                    stringDecayStart = tone.prevStringDecay;\n                } else {\n                    const sustainEnvelopeStart: number = tone.envelopeComputer.envelopeStarts[EnvelopeComputeIndex.stringSustain];\n                    stringDecayStart = 1.0 - Math.min(1.0, sustainEnvelopeStart * tone.stringSustainStart / (Config.stringSustainRange - 1));\n                }\n                const sustainEnvelopeEnd: number = tone.envelopeComputer.envelopeEnds[EnvelopeComputeIndex.stringSustain];\n                let stringDecayEnd: number = 1.0 - Math.min(1.0, sustainEnvelopeEnd * tone.stringSustainEnd / (Config.stringSustainRange - 1));\n                tone.prevStringDecay = stringDecayEnd;\n\n                //const unison: Unison = Config.unisons[instrument.unison];\n                const unisonVoices: number = instrument.unisonVoices;\n                for (let i: number = tone.pickedStrings.length; i < unisonVoices; i++) {\n                    tone.pickedStrings[i] = new PickedString();\n                }\n\n                if (tone.atNoteStart && !transition.continues && !tone.forceContinueAtStart) {\n                    for (const pickedString of tone.pickedStrings) {\n                        // Force the picked string to retrigger the attack impulse at the start of the note.\n                        pickedString.delayIndex = -1;\n                    }\n                }\n\n                for (let i: number = 0; i < unisonVoices; i++) {\n                    tone.pickedStrings[i].update(this, instrumentState, tone, i, roundedSamplesPerTick, stringDecayStart, stringDecayEnd, instrument.stringSustainType);\n                }\n            }\n        }\n    }\n\n    static getLFOAmplitude(instrument: Instrument, secondsIntoBar: number): number {\n        let effect: number = 0.0;\n        for (const vibratoPeriodSeconds of Config.vibratoTypes[instrument.vibratoType].periodsSeconds) {\n            effect += Math.sin(Math.PI * 2.0 * secondsIntoBar / vibratoPeriodSeconds);\n        }\n        return effect;\n    }\n\n\n    static getInstrumentSynthFunction(instrument: Instrument): Function {\n        if (instrument.type == InstrumentType.fm) {\n            const fingerprint: string = instrument.algorithm + \"_\" + instrument.feedbackType;\n            if (Synth.fmSynthFunctionCache[fingerprint] == undefined) {\n                const synthSource: string[] = [];\n\n                for (const line of Synth.fmSourceTemplate) {\n                    if (line.indexOf(\"// CARRIER OUTPUTS\") != -1) {\n                        const outputs: string[] = [];\n                        for (let j: number = 0; j < Config.algorithms[instrument.algorithm].carrierCount; j++) {\n                            outputs.push(\"operator\" + j + \"Scaled\");\n                        }\n                        synthSource.push(line.replace(\"/*operator#Scaled*/\", outputs.join(\" + \")));\n                    } else if (line.indexOf(\"// INSERT OPERATOR COMPUTATION HERE\") != -1) {\n                        for (let j: number = Config.operatorCount - 1; j >= 0; j--) {\n                            for (const operatorLine of Synth.operatorSourceTemplate) {\n                                if (operatorLine.indexOf(\"/* + operator@Scaled*/\") != -1) {\n                                    let modulators = \"\";\n                                    for (const modulatorNumber of Config.algorithms[instrument.algorithm].modulatedBy[j]) {\n                                        modulators += \" + operator\" + (modulatorNumber - 1) + \"Scaled\";\n                                    }\n\n                                    const feedbackIndices: ReadonlyArray<number> = Config.feedbacks[instrument.feedbackType].indices[j];\n                                    if (feedbackIndices.length > 0) {\n                                        modulators += \" + feedbackMult * (\";\n                                        const feedbacks: string[] = [];\n                                        for (const modulatorNumber of feedbackIndices) {\n                                            feedbacks.push(\"operator\" + (modulatorNumber - 1) + \"Output\");\n                                        }\n                                        modulators += feedbacks.join(\" + \") + \")\";\n                                    }\n                                    synthSource.push(operatorLine.replace(/\\#/g, j + \"\").replace(\"/* + operator@Scaled*/\", modulators));\n                                } else {\n                                    synthSource.push(operatorLine.replace(/\\#/g, j + \"\"));\n                                }\n                            }\n                        }\n                    } else if (line.indexOf(\"#\") != -1) {\n                        for (let j: number = 0; j < Config.operatorCount; j++) {\n                            synthSource.push(line.replace(/\\#/g, j + \"\"));\n                        }\n                    } else {\n                        synthSource.push(line);\n                    }\n                }\n\n                //console.log(synthSource.join(\"\\n\"));\n\n                const wrappedFmSynth: string = \"return (synth, bufferIndex, roundedSamplesPerTick, tone, instrument) => {\" + synthSource.join(\"\\n\") + \"}\";\n\n                Synth.fmSynthFunctionCache[fingerprint] = new Function(\"Config\", \"Synth\", wrappedFmSynth)(Config, Synth);\n\n            }\n            return Synth.fmSynthFunctionCache[fingerprint];\n        } else if (instrument.type == InstrumentType.chip) {\n            // advloop addition\n            if (instrument.isUsingAdvancedLoopControls) {\n                return Synth.loopableChipSynth;\n            }\n            // advloop addition\n            return Synth.chipSynth;\n        } else if (instrument.type == InstrumentType.customChipWave) {\n            return Synth.chipSynth;\n        } else if (instrument.type == InstrumentType.harmonics) {\n            return Synth.harmonicsSynth;\n        } else if (instrument.type == InstrumentType.pwm) {\n            return Synth.pulseWidthSynth;\n        } else if (instrument.type == InstrumentType.supersaw) {\n            return Synth.supersawSynth;\n        } else if (instrument.type == InstrumentType.pickedString) {\n            return Synth.pickedStringSynth;\n        } else if (instrument.type == InstrumentType.noise) {\n            return Synth.noiseSynth;\n        } else if (instrument.type == InstrumentType.spectrum) {\n            return Synth.spectrumSynth;\n        } else if (instrument.type == InstrumentType.drumset) {\n            return Synth.drumsetSynth;\n        } else if (instrument.type == InstrumentType.mod) {\n            return Synth.modSynth;\n        } else if (instrument.type == InstrumentType.fm6op) {\n            const fingerprint: string = instrument.customAlgorithm.name + \"_\" + instrument.customFeedbackType.name;\n            if (Synth.fm6SynthFunctionCache[fingerprint] == undefined) {\n                const synthSource: string[] = [];\n\n                for (const line of Synth.fmSourceTemplate) {\n                    if (line.indexOf(\"// CARRIER OUTPUTS\") != -1) {\n                        const outputs: string[] = [];\n                        for (let j: number = 0; j < instrument.customAlgorithm.carrierCount; j++) {\n                            outputs.push(\"operator\" + j + \"Scaled\");\n                        }\n                        synthSource.push(line.replace(\"/*operator#Scaled*/\", outputs.join(\" + \")));\n                    } else if (line.indexOf(\"// INSERT OPERATOR COMPUTATION HERE\") != -1) {\n                        for (let j: number = Config.operatorCount + 2 - 1; j >= 0; j--) {\n                            for (const operatorLine of Synth.operatorSourceTemplate) {\n                                if (operatorLine.indexOf(\"/* + operator@Scaled*/\") != -1) {\n                                    let modulators = \"\";\n                                    for (const modulatorNumber of instrument.customAlgorithm.modulatedBy[j]) {\n                                        modulators += \" + operator\" + (modulatorNumber - 1) + \"Scaled\";\n                                    }\n\n                                    const feedbackIndices: ReadonlyArray<number> = instrument.customFeedbackType.indices[j];\n                                    if (feedbackIndices.length > 0) {\n                                        modulators += \" + feedbackMult * (\";\n                                        const feedbacks: string[] = [];\n                                        for (const modulatorNumber of feedbackIndices) {\n                                            feedbacks.push(\"operator\" + (modulatorNumber - 1) + \"Output\");\n                                        }\n                                        modulators += feedbacks.join(\" + \") + \")\";\n                                    }\n                                    synthSource.push(operatorLine.replace(/\\#/g, j + \"\").replace(\"/* + operator@Scaled*/\", modulators));\n                                } else {\n                                    synthSource.push(operatorLine.replace(/\\#/g, j + \"\"));\n                                }\n                            }\n                        }\n                    } else if (line.indexOf(\"#\") != -1) {\n                        for (let j = 0; j < Config.operatorCount + 2; j++) {\n                            synthSource.push(line.replace(/\\#/g, j + \"\"));\n                        }\n                    } else {\n                        synthSource.push(line);\n                    }\n                }\n\n                //console.log(synthSource.join(\"\\n\"));\n\n                const wrappedFm6Synth: string = \"return (synth, bufferIndex, roundedSamplesPerTick, tone, instrument) => {\" + synthSource.join(\"\\n\") + \"}\";\n\n                Synth.fm6SynthFunctionCache[fingerprint] = new Function(\"Config\", \"Synth\", wrappedFm6Synth)(Config, Synth);\n            }\n            return Synth.fm6SynthFunctionCache[fingerprint];\n        } else {\n            throw new Error(\"Unrecognized instrument type: \" + instrument.type);\n        }\n    }\n    // advloop addition\n    static wrap(x: number, b: number): number {\n        return (x % b + b) % b;\n    }\n\tstatic loopableChipSynth(synth: Synth, bufferIndex: number, roundedSamplesPerTick: number, tone: Tone, instrumentState: InstrumentState): void {\n\t\t// @TODO:\n\t\t// - Longer declicking? This is more difficult than I thought.\n\t\t//   When determining this automatically is difficult (or the input\n\t\t//   samples are expected to vary too much), this is left up to the\n\t\t//   user.\n\t\tconst aliases: boolean = (instrumentState.effectsIncludeType(EffectType.distortion) && instrumentState.aliases);\n\t\t// const aliases = false;\n\t\tconst dataL: Float32Array = synth.tempInstrumentSampleBufferL!;\n\t\tconst dataR: Float32Array = synth.tempInstrumentSampleBufferR!;\n\t\tconst waveL: Float32Array = instrumentState.waveL!;\n\t\tconst waveR: Float32Array = instrumentState.waveR!;\n\t\tconst volumeScale: number = instrumentState.volumeScale;\n\t\tconst waveLength: number = (aliases && instrumentState.type == 8) ? waveL.length : waveL.length - 1;\n\t\tlet chipWaveLoopEnd: number = Math.max(0, Math.min(waveLength, instrumentState.chipWaveLoopEnd));\n\t\tlet chipWaveLoopStart: number = Math.max(0, Math.min(chipWaveLoopEnd - 1, instrumentState.chipWaveLoopStart));\n\t\t// @TODO: This is where to set things up for the release loop mode.\n\t\t// const ticksSinceReleased = tone.ticksSinceReleased;\n\t\t// if (ticksSinceReleased > 0) {\n\t\t//     chipWaveLoopStart = 0;\n\t\t//     chipWaveLoopEnd = waveLength - 1;\n\t\t// }\n\t\tlet chipWaveLoopLength: number = chipWaveLoopEnd - chipWaveLoopStart;\n\t\tif (chipWaveLoopLength < 2) {\n\t\t\tchipWaveLoopStart = 0;\n\t\t\tchipWaveLoopEnd = waveLength;\n\t\t\tchipWaveLoopLength = waveLength;\n\t\t}\n\t\tconst chipWaveLoopMode: number = instrumentState.chipWaveLoopMode;\n\t\tconst chipWavePlayBackwards: boolean = instrumentState.chipWavePlayBackwards;\n\t\tconst unisonSign: number = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\n\t\tif (instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord!.customInterval)\n\t\t\ttone.phases[1] = tone.phases[0];\n\t\tlet phaseDeltaA: number = tone.phaseDeltas[0] * waveLength;\n\t\tlet phaseDeltaB: number = tone.phaseDeltas[1] * waveLength;\n\t\tlet directionA: number = tone.directions[0];\n\t\tlet directionB: number = tone.directions[1];\n\t\tlet chipWaveCompletionA: number = tone.chipWaveCompletions[0];\n\t\tlet chipWaveCompletionB: number = tone.chipWaveCompletions[1];\n\t\tif (chipWaveLoopMode === 3 || chipWaveLoopMode === 2 || chipWaveLoopMode === 0) {\n\t\t\t// If playing once or looping, we force the correct direction,\n\t\t\t// since it shouldn't really change. This is mostly so that if\n\t\t\t// the mode is changed midway through playback, it won't get\n\t\t\t// stuck on the wrong direction.\n\t\t\tif (!chipWavePlayBackwards) {\n\t\t\t\tdirectionA = 1;\n\t\t\t\tdirectionB = 1;\n\t\t\t} else {\n\t\t\t\tdirectionA = -1;\n\t\t\t\tdirectionB = -1;\n\t\t\t}\n\t\t}\n\t\tif (chipWaveLoopMode === 0 || chipWaveLoopMode === 1) {\n\t\t\t// If looping or ping-ponging, we clear the completion status,\n\t\t\t// as it's not relevant anymore. This is mostly so that if the\n\t\t\t// mode is changed midway through playback, it won't get stuck\n\t\t\t// on zero volume.\n\t\t\tchipWaveCompletionA = 0;\n\t\t\tchipWaveCompletionB = 0;\n\t\t}\n\t\tlet lastWaveLA: number = tone.chipWaveCompletionsLastWaveL[0];\n\t\tlet lastWaveLB: number = tone.chipWaveCompletionsLastWaveL[1];\n\t\tlet lastWaveRA: number = tone.chipWaveCompletionsLastWaveR[0];\n\t\tlet lastWaveRB: number = tone.chipWaveCompletionsLastWaveR[1];\n\t\tconst chipWaveCompletionFadeLength: number = 1000;\n\t\tconst phaseDeltaScaleA: number = +tone.phaseDeltaScales[0];\n\t\tconst phaseDeltaScaleB: number = +tone.phaseDeltaScales[1];\n\t\tlet expression: number = +tone.expression;\n\t\tconst expressionDelta: number = +tone.expressionDelta;\n\t\tlet phaseA: number = Synth.wrap(tone.phases[0], 1) * waveLength;\n\t\tlet phaseB: number = Synth.wrap(tone.phases[1], 1) * waveLength;\n\t\tlet prevWaveIntegralLA: number = 0;\n\t\tlet prevWaveIntegralLB: number = 0;\n\t\tlet prevWaveIntegralRA: number = 0;\n\t\tlet prevWaveIntegralRB: number = 0;\n\t\tif (!aliases) {\n\t\t\tconst phaseAInt = Math.floor(phaseA);\n\t\t\tconst phaseBInt = Math.floor(phaseB);\n\t\t\tconst indexA = Synth.wrap(phaseAInt, waveLength);\n\t\t\tconst indexB = Synth.wrap(phaseBInt, waveLength);\n\t\t\tconst phaseRatioA = phaseA - phaseAInt;\n\t\t\tconst phaseRatioB = phaseB - phaseBInt;\n\t\t\tprevWaveIntegralLA = +waveL[indexA];\n\t\t\tprevWaveIntegralLB = +waveL[indexB];\n\t\t\tprevWaveIntegralRA = +waveR[indexA];\n\t\t\tprevWaveIntegralRB = +waveR[indexB];\n\t\t\tprevWaveIntegralLA += (waveL[Synth.wrap(indexA + 1, waveLength)] - prevWaveIntegralLA) * phaseRatioA;\n\t\t\tprevWaveIntegralLB += (waveL[Synth.wrap(indexB + 1, waveLength)] - prevWaveIntegralLB) * phaseRatioB;\n\t\t\tprevWaveIntegralRA += (waveR[Synth.wrap(indexA + 1, waveLength)] - prevWaveIntegralRA) * phaseRatioA;\n\t\t\tprevWaveIntegralRB += (waveR[Synth.wrap(indexB + 1, waveLength)] - prevWaveIntegralRB) * phaseRatioB;\n\t\t}\n\t\tconst filtersL = tone.noteFiltersL;\n\t\tconst filtersR = tone.noteFiltersR;\n\t\tconst filterCount: number = tone.noteFilterCount | 0;\n\t\tlet initialFilterInputL1: number = +tone.initialNoteFilterInputL1;\n\t\tlet initialFilterInputR1: number = +tone.initialNoteFilterInputR1;\n\t\tlet initialFilterInputL2: number = +tone.initialNoteFilterInputL2;\n\t\tlet initialFilterInputR2: number = +tone.initialNoteFilterInputR2;\n\t\tconst applyFilters: Function = Synth.applyFilters;\n\t\tconst stopIndex: number = bufferIndex + roundedSamplesPerTick;\n\t\tlet prevWaveLA: number = tone.chipWavePrevWavesL[0];\n\t\tlet prevWaveLB: number = tone.chipWavePrevWavesL[1];\n\t\tlet prevWaveRA: number = tone.chipWavePrevWavesR[0];\n\t\tlet prevWaveRB: number = tone.chipWavePrevWavesR[1];\n\t\tfor (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\tif (chipWaveCompletionA > 0 && chipWaveCompletionA < chipWaveCompletionFadeLength) {\n\t\t\t\tchipWaveCompletionA++;\n\t\t\t}\n\t\t\tif (chipWaveCompletionB > 0 && chipWaveCompletionB < chipWaveCompletionFadeLength) {\n\t\t\t\tchipWaveCompletionB++;\n\t\t\t}\n\t\t\tlet wrapped: number = 0;\n\t\t\tphaseA += phaseDeltaA * directionA;\n\t\t\tphaseB += phaseDeltaB * directionB;\n\t\t\tif (chipWaveLoopMode === 2) {\n\t\t\t\t// once\n\t\t\t\tif (directionA === 1) {\n\t\t\t\t\tif (phaseA > waveLength) {\n\t\t\t\t\t\tif (chipWaveCompletionA <= 0) {\n\t\t\t\t\t\t\tlastWaveLA = prevWaveLA;\n\t\t\t\t\t\t\tlastWaveRA = prevWaveRA;\n\t\t\t\t\t\t\tchipWaveCompletionA++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\twrapped = 1;\n\t\t\t\t\t}\n\t\t\t\t} else if (directionA === -1) {\n\t\t\t\t\tif (phaseA < 0) {\n\t\t\t\t\t\tif (chipWaveCompletionA <= 0) {\n\t\t\t\t\t\t\tlastWaveLA = prevWaveLA;\n\t\t\t\t\t\t\tlastWaveRA = prevWaveRA;\n\t\t\t\t\t\t\tchipWaveCompletionA++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\twrapped = 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (directionB === 1) {\n\t\t\t\t\tif (phaseB > waveLength) {\n\t\t\t\t\t\tif (chipWaveCompletionB <= 0) {\n\t\t\t\t\t\t\tlastWaveLB = prevWaveLB;\n\t\t\t\t\t\t\tlastWaveRB = prevWaveRB;\n\t\t\t\t\t\t\tchipWaveCompletionB++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\twrapped = 1;\n\t\t\t\t\t}\n\t\t\t\t} else if (directionA === -1) {\n\t\t\t\t\tif (phaseB < 0) {\n\t\t\t\t\t\tif (chipWaveCompletionB <= 0) {\n\t\t\t\t\t\t\tlastWaveLB = prevWaveLB;\n\t\t\t\t\t\t\tlastWaveRB = prevWaveRB;\n\t\t\t\t\t\t\tchipWaveCompletionB++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\twrapped = 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (chipWaveLoopMode === 3) {\n\t\t\t\t// loop once\n\t\t\t\tif (directionA === 1) {\n\t\t\t\t\tif (phaseA > chipWaveLoopEnd) {\n\t\t\t\t\t\tif (chipWaveCompletionA <= 0) {\n\t\t\t\t\t\t\tlastWaveLA = prevWaveLA;\n\t\t\t\t\t\t\tlastWaveRA = prevWaveRA;\n\t\t\t\t\t\t\tchipWaveCompletionA++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\twrapped = 1;\n\t\t\t\t\t}\n\t\t\t\t} else if (directionA === -1) {\n\t\t\t\t\tif (phaseA < chipWaveLoopStart) {\n\t\t\t\t\t\tif (chipWaveCompletionA <= 0) {\n\t\t\t\t\t\t\tlastWaveLA = prevWaveLA;\n\t\t\t\t\t\t\tlastWaveRA = prevWaveRA;\n\t\t\t\t\t\t\tchipWaveCompletionA++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\twrapped = 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (directionB === 1) {\n\t\t\t\t\tif (phaseB > chipWaveLoopEnd) {\n\t\t\t\t\t\tif (chipWaveCompletionB <= 0) {\n\t\t\t\t\t\t\tlastWaveLB = prevWaveLB;\n\t\t\t\t\t\t\tlastWaveRB = prevWaveRB;\n\t\t\t\t\t\t\tchipWaveCompletionB++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\twrapped = 1;\n\t\t\t\t\t}\n\t\t\t\t} else if (directionA === -1) {\n\t\t\t\t\tif (phaseB < chipWaveLoopStart) {\n\t\t\t\t\t\tif (chipWaveCompletionB <= 0) {\n\t\t\t\t\t\t\tlastWaveLB = prevWaveLB;\n\t\t\t\t\t\t\tlastWaveRB = prevWaveRB;\n\t\t\t\t\t\t\tchipWaveCompletionB++;\n\t\t\t\t\t\t}\n\t\t\t\t\t\twrapped = 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (chipWaveLoopMode === 0) {\n\t\t\t\t// loop\n\t\t\t\tif (directionA === 1) {\n\t\t\t\t\tif (phaseA > chipWaveLoopEnd) {\n\t\t\t\t\t\tphaseA = chipWaveLoopStart + Synth.wrap(phaseA - chipWaveLoopEnd, chipWaveLoopLength);\n\t\t\t\t\t\t// phaseA = chipWaveLoopStart;\n\t\t\t\t\t\twrapped = 1;\n\t\t\t\t\t}\n\t\t\t\t} else if (directionA === -1) {\n\t\t\t\t\tif (phaseA < chipWaveLoopStart) {\n\t\t\t\t\t\tphaseA = chipWaveLoopEnd - Synth.wrap(chipWaveLoopStart - phaseA, chipWaveLoopLength);\n\t\t\t\t\t\t// phaseA = chipWaveLoopEnd;\n\t\t\t\t\t\twrapped = 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (directionB === 1) {\n\t\t\t\t\tif (phaseB > chipWaveLoopEnd) {\n\t\t\t\t\t\tphaseB = chipWaveLoopStart + Synth.wrap(phaseB - chipWaveLoopEnd, chipWaveLoopLength);\n\t\t\t\t\t\t// phaseB = chipWaveLoopStart;\n\t\t\t\t\t\twrapped = 1;\n\t\t\t\t\t}\n\t\t\t\t} else if (directionB === -1) {\n\t\t\t\t\tif (phaseB < chipWaveLoopStart) {\n\t\t\t\t\t\tphaseB = chipWaveLoopEnd - Synth.wrap(chipWaveLoopStart - phaseB, chipWaveLoopLength);\n\t\t\t\t\t\t// phaseB = chipWaveLoopEnd;\n\t\t\t\t\t\twrapped = 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (chipWaveLoopMode === 1) {\n\t\t\t\t// ping-pong\n\t\t\t\tif (directionA === 1) {\n\t\t\t\t\tif (phaseA > chipWaveLoopEnd) {\n\t\t\t\t\t\tphaseA = chipWaveLoopEnd - Synth.wrap(phaseA - chipWaveLoopEnd, chipWaveLoopLength);\n\t\t\t\t\t\t// phaseA = chipWaveLoopEnd;\n\t\t\t\t\t\tdirectionA = -1;\n\t\t\t\t\t\twrapped = 1;\n\t\t\t\t\t}\n\t\t\t\t} else if (directionA === -1) {\n\t\t\t\t\tif (phaseA < chipWaveLoopStart) {\n\t\t\t\t\t\tphaseA = chipWaveLoopStart + Synth.wrap(chipWaveLoopStart - phaseA, chipWaveLoopLength);\n\t\t\t\t\t\t// phaseA = chipWaveLoopStart;\n\t\t\t\t\t\tdirectionA = 1;\n\t\t\t\t\t\twrapped = 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (directionB === 1) {\n\t\t\t\t\tif (phaseB > chipWaveLoopEnd) {\n\t\t\t\t\t\tphaseB = chipWaveLoopEnd - Synth.wrap(phaseB - chipWaveLoopEnd, chipWaveLoopLength);\n\t\t\t\t\t\t// phaseB = chipWaveLoopEnd;\n\t\t\t\t\t\tdirectionB = -1;\n\t\t\t\t\t\twrapped = 1;\n\t\t\t\t\t}\n\t\t\t\t} else if (directionB === -1) {\n\t\t\t\t\tif (phaseB < chipWaveLoopStart) {\n\t\t\t\t\t\tphaseB = chipWaveLoopStart + Synth.wrap(chipWaveLoopStart - phaseB, chipWaveLoopLength);\n\t\t\t\t\t\t// phaseB = chipWaveLoopStart;\n\t\t\t\t\t\tdirectionB = 1;\n\t\t\t\t\t\twrapped = 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tlet waveLA = 0;\n\t\t\tlet waveLB = 0;\n\t\t\tlet waveRA = 0;\n\t\t\tlet waveRB = 0;\n\t\t\tlet inputSampleL = 0;\n\t\t\tlet inputSampleR = 0;\n\t\t\tif (aliases) {\n\t\t\t\twaveLA = waveL[Synth.wrap(Math.floor(phaseA), waveLength)];\n\t\t\t\twaveLB = waveL[Synth.wrap(Math.floor(phaseB), waveLength)];\n\t\t\t\twaveRA = waveR[Synth.wrap(Math.floor(phaseA), waveLength)];\n\t\t\t\twaveRB = waveR[Synth.wrap(Math.floor(phaseB), waveLength)];\n\t\t\t\tprevWaveLA = waveLA;\n\t\t\t\tprevWaveLB = waveLB;\n\t\t\t\tprevWaveRA = waveRA;\n\t\t\t\tprevWaveRB = waveRB;\n\t\t\t\tconst completionFadeA: number = chipWaveCompletionA > 0 ? ((chipWaveCompletionFadeLength - Math.min(chipWaveCompletionA, chipWaveCompletionFadeLength)) / chipWaveCompletionFadeLength) : 1;\n\t\t\t\tconst completionFadeB: number = chipWaveCompletionB > 0 ? ((chipWaveCompletionFadeLength - Math.min(chipWaveCompletionB, chipWaveCompletionFadeLength)) / chipWaveCompletionFadeLength) : 1;\n\t\t\t\tinputSampleL = 0;\n\t\t\t\tif (chipWaveCompletionA > 0) {\n\t\t\t\t\tinputSampleL += lastWaveLA * completionFadeA;\n\t\t\t\t\tinputSampleR += lastWaveLA * completionFadeA;\n\t\t\t\t} else {\n\t\t\t\t\tinputSampleL += waveLA;\n\t\t\t\t\tinputSampleR += waveRA;\n\t\t\t\t}\n\t\t\t\tif (chipWaveCompletionB > 0) {\n\t\t\t\t\tinputSampleL += lastWaveLB * completionFadeB;\n\t\t\t\t\tinputSampleR += lastWaveRB * completionFadeB;\n\t\t\t\t} else {\n\t\t\t\t\tinputSampleL += waveLB;\n\t\t\t\t\tinputSampleR += waveRB;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst phaseAInt = Math.floor(phaseA);\n\t\t\t\tconst phaseBInt = Math.floor(phaseB);\n\t\t\t\tconst indexA = Synth.wrap(phaseAInt, waveLength);\n\t\t\t\tconst indexB = Synth.wrap(phaseBInt, waveLength);\n\t\t\t\tlet nextWaveIntegralLA = waveL[indexA];\n\t\t\t\tlet nextWaveIntegralLB = waveL[indexB];\n\t\t\t\tlet nextWaveIntegralRA = waveR[indexA];\n\t\t\t\tlet nextWaveIntegralRB = waveR[indexB];\n\t\t\t\tconst phaseRatioA = phaseA - phaseAInt;\n\t\t\t\tconst phaseRatioB = phaseB - phaseBInt;\n\t\t\t\tnextWaveIntegralLA += (waveL[Synth.wrap(indexA + 1, waveLength)] - nextWaveIntegralLA) * phaseRatioA;\n\t\t\t\tnextWaveIntegralLB += (waveL[Synth.wrap(indexB + 1, waveLength)] - nextWaveIntegralLB) * phaseRatioB;\n\t\t\t\tnextWaveIntegralRA += (waveR[Synth.wrap(indexA + 1, waveLength)] - nextWaveIntegralRA) * phaseRatioA;\n\t\t\t\tnextWaveIntegralRB += (waveR[Synth.wrap(indexB + 1, waveLength)] - nextWaveIntegralRB) * phaseRatioB;\n\t\t\t\tif (!(chipWaveLoopMode === 0 && chipWaveLoopStart === 0 && chipWaveLoopEnd === waveLength) && wrapped !== 0) {\n\t\t\t\t\tlet pwila = 0;\n\t\t\t\t\tlet pwilb = 0;\n\t\t\t\t\tlet pwira = 0;\n\t\t\t\t\tlet pwirb = 0;\n\t\t\t\t\tconst phaseA_ = Math.max(0, phaseA - phaseDeltaA * directionA);\n\t\t\t\t\tconst phaseB_ = Math.max(0, phaseB - phaseDeltaB * directionB);\n\t\t\t\t\tconst phaseAInt = Math.floor(phaseA_);\n\t\t\t\t\tconst phaseBInt = Math.floor(phaseB_);\n\t\t\t\t\tconst indexA = Synth.wrap(phaseAInt, waveLength);\n\t\t\t\t\tconst indexB = Synth.wrap(phaseBInt, waveLength);\n\t\t\t\t\tpwila = waveL[indexA];\n\t\t\t\t\tpwilb = waveL[indexB];\n\t\t\t\t\tpwira = waveR[indexA];\n\t\t\t\t\tpwirb = waveR[indexB];\n\t\t\t\t\tpwila += (waveL[Synth.wrap(indexA + 1, waveLength)] - pwila) * (phaseA_ - phaseAInt) * directionA;\n\t\t\t\t\tpwilb += (waveL[Synth.wrap(indexB + 1, waveLength)] - pwilb) * (phaseB_ - phaseBInt) * directionB;\n\t\t\t\t\tpwira += (waveR[Synth.wrap(indexA + 1, waveLength)] - pwira) * (phaseA_ - phaseAInt) * directionA;\n\t\t\t\t\tpwirb += (waveR[Synth.wrap(indexB + 1, waveLength)] - pwirb) * (phaseB_ - phaseBInt) * directionB;\n\t\t\t\t\tprevWaveIntegralLA = pwila;\n\t\t\t\t\tprevWaveIntegralLB = pwilb;\n\t\t\t\t\tprevWaveIntegralRA = pwira;\n\t\t\t\t\tprevWaveIntegralRB = pwirb;\n\t\t\t\t}\n\t\t\t\tif (chipWaveLoopMode === 1 && wrapped !== 0) {\n\t\t\t\t\twaveLA = prevWaveLA;\n\t\t\t\t\twaveLB = prevWaveLB;\n\t\t\t\t\twaveRA = prevWaveRA;\n\t\t\t\t\twaveRB = prevWaveRB;\n\t\t\t\t} else {\n\t\t\t\t\twaveLA = (nextWaveIntegralLA - prevWaveIntegralLA) / (phaseDeltaA * directionA);\n\t\t\t\t\twaveLB = (nextWaveIntegralLB - prevWaveIntegralLB) / (phaseDeltaB * directionB);\n\t\t\t\t\twaveRA = (nextWaveIntegralRA - prevWaveIntegralRA) / (phaseDeltaA * directionA);\n\t\t\t\t\twaveRB = (nextWaveIntegralRB - prevWaveIntegralRB) / (phaseDeltaB * directionB);\n\t\t\t\t}\n\t\t\t\tprevWaveLA = waveLA;\n\t\t\t\tprevWaveLB = waveLB;\n\t\t\t\tprevWaveRA = waveRA;\n\t\t\t\tprevWaveRB = waveRB;\n\t\t\t\tprevWaveIntegralLA = nextWaveIntegralLA;\n\t\t\t\tprevWaveIntegralLB = nextWaveIntegralLB;\n\t\t\t\tprevWaveIntegralRA = nextWaveIntegralRA;\n\t\t\t\tprevWaveIntegralRB = nextWaveIntegralRB;\n\t\t\t\tconst completionFadeA = chipWaveCompletionA > 0 ? ((chipWaveCompletionFadeLength - Math.min(chipWaveCompletionA, chipWaveCompletionFadeLength)) / chipWaveCompletionFadeLength) : 1;\n\t\t\t\tconst completionFadeB = chipWaveCompletionB > 0 ? ((chipWaveCompletionFadeLength - Math.min(chipWaveCompletionB, chipWaveCompletionFadeLength)) / chipWaveCompletionFadeLength) : 1;\n\t\t\t\tif (chipWaveCompletionA > 0) {\n\t\t\t\t\tinputSampleL += lastWaveLA * completionFadeA;\n\t\t\t\t\tinputSampleR += lastWaveRA * completionFadeA;\n\t\t\t\t} else {\n\t\t\t\t\tinputSampleL += waveLA;\n\t\t\t\t\tinputSampleR += waveRA;\n\t\t\t\t}\n\t\t\t\tif (chipWaveCompletionB > 0) {\n\t\t\t\t\tinputSampleL += lastWaveLB * completionFadeB;\n\t\t\t\t\tinputSampleR += lastWaveRB * completionFadeB;\n\t\t\t\t} else {\n\t\t\t\t\tinputSampleL += waveLB * unisonSign;\n\t\t\t\t\tinputSampleR += waveRB * unisonSign;\n\t\t\t\t}\n\t\t\t}\n\t\t\tconst sampleL = applyFilters(inputSampleL * volumeScale, initialFilterInputL1, initialFilterInputL2, filterCount, filtersL);\n\t\t\tconst sampleR = applyFilters(inputSampleR * volumeScale, initialFilterInputR1, initialFilterInputR2, filterCount, filtersR);\n\t\t\tinitialFilterInputL2 = initialFilterInputL1;\n\t\t\tinitialFilterInputR2 = initialFilterInputR1;\n\t\t\tinitialFilterInputL1 = inputSampleL * volumeScale;\n\t\t\tinitialFilterInputR1 = inputSampleR * volumeScale;\n\t\t\tphaseDeltaA *= phaseDeltaScaleA;\n\t\t\tphaseDeltaB *= phaseDeltaScaleB;\n\t\t\tconst outputL = sampleL * expression;\n\t\t\tconst outputR = sampleR * expression;\n\t\t\texpression += expressionDelta;\n\t\t\tdataL[sampleIndex] += outputL;\n\t\t\tdataR[sampleIndex] += outputR;\n\t\t}\n\t\ttone.phases[0] = phaseA / waveLength;\n\t\ttone.phases[1] = phaseB / waveLength;\n\t\ttone.phaseDeltas[0] = phaseDeltaA / waveLength;\n\t\ttone.phaseDeltas[1] = phaseDeltaB / waveLength;\n\t\ttone.directions[0] = directionA;\n\t\ttone.directions[1] = directionB;\n\t\ttone.chipWaveCompletions[0] = chipWaveCompletionA;\n\t\ttone.chipWaveCompletions[1] = chipWaveCompletionB;\n\t\ttone.chipWavePrevWavesL[0] = prevWaveLA;\n\t\ttone.chipWavePrevWavesL[1] = prevWaveLB;\n\t\ttone.chipWavePrevWavesR[0] = prevWaveRA;\n\t\ttone.chipWavePrevWavesR[1] = prevWaveRB;\n\t\ttone.chipWaveCompletionsLastWaveL[0] = lastWaveLA;\n\t\ttone.chipWaveCompletionsLastWaveL[1] = lastWaveLB;\n\t\ttone.chipWaveCompletionsLastWaveR[0] = lastWaveRA;\n\t\ttone.chipWaveCompletionsLastWaveR[1] = lastWaveRB;\n\t\ttone.expression = expression;\n\t\tsynth.sanitizeFilters(filtersL);\n\t\tsynth.sanitizeFilters(filtersR);\n\t\ttone.initialNoteFilterInputL1 = initialFilterInputL1;\n\t\ttone.initialNoteFilterInputR1 = initialFilterInputR1;\n\t\ttone.initialNoteFilterInputL2 = initialFilterInputL2;\n\t\ttone.initialNoteFilterInputR2 = initialFilterInputR2;\n\t}\n    private static chipSynth(synth: Synth, bufferIndex: number, roundedSamplesPerTick: number, tone: Tone, instrumentState: InstrumentState): void {\n        const aliases: boolean = (instrumentState.effectsIncludeType(EffectType.eqFilter) && instrumentState.aliases);\n        const dataL: Float32Array = synth.tempInstrumentSampleBufferL!;\n        const dataR: Float32Array = synth.tempInstrumentSampleBufferR!;\n        const waveL: Float32Array = instrumentState.waveL!;\n        const waveR: Float32Array = instrumentState.waveR!;\n        const volumeScale = instrumentState.volumeScale;\n\n        const waveLength = (aliases && instrumentState.type == 8) ? waveL.length : waveL.length - 1;\n\n        const unisonSign: number = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\n        if (instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord!.customInterval) tone.phases[1] = tone.phases[0];\n        let phaseDeltaA: number = tone.phaseDeltas[0] * waveLength;\n        let phaseDeltaB: number = tone.phaseDeltas[1] * waveLength;\n        const phaseDeltaScaleA: number = +tone.phaseDeltaScales[0];\n        const phaseDeltaScaleB: number = +tone.phaseDeltaScales[1];\n        let expression: number = +tone.expression;\n        const expressionDelta: number = +tone.expressionDelta;\n        let phaseA: number = (tone.phases[0] % 1) * waveLength;\n        let phaseB: number = (tone.phases[1] % 1) * waveLength;\n\n        const filtersL: DynamicBiquadFilter[] = tone.noteFiltersL;\n        const filtersR: DynamicBiquadFilter[] = tone.noteFiltersR;\n        const filterCount: number = tone.noteFilterCount | 0;\n        let initialFilterInputL1: number = +tone.initialNoteFilterInputL1;\n        let initialFilterInputR1: number = +tone.initialNoteFilterInputR1;\n        let initialFilterInputL2: number = +tone.initialNoteFilterInputL2;\n        let initialFilterInputR2: number = +tone.initialNoteFilterInputR2;\n        const applyFilters: Function = Synth.applyFilters;\n        let prevWaveIntegralLA: number = 0;\n        let prevWaveIntegralLB: number = 0;\n        let prevWaveIntegralRA: number = 0;\n        let prevWaveIntegralRB: number = 0;\n\n        if (!aliases) {\n            const phaseAInt: number = phaseA | 0;\n            const phaseBInt: number = phaseB | 0;\n            const indexA: number = phaseAInt % waveLength;\n            const indexB: number = phaseBInt % waveLength;\n            const phaseRatioA: number = phaseA - phaseAInt;\n            const phaseRatioB: number = phaseB - phaseBInt;\n            prevWaveIntegralLA = +waveL[indexA];\n            prevWaveIntegralLB = +waveL[indexB];\n            prevWaveIntegralRA = +waveR[indexA];\n            prevWaveIntegralRB = +waveR[indexB];\n            prevWaveIntegralLA += (waveL[indexA + 1] - prevWaveIntegralLA) * phaseRatioA;\n            prevWaveIntegralLB += (waveL[indexB + 1] - prevWaveIntegralLB) * phaseRatioB;\n            prevWaveIntegralRA += (waveR[indexA + 1] - prevWaveIntegralRA) * phaseRatioA;\n            prevWaveIntegralRB += (waveR[indexB + 1] - prevWaveIntegralRB) * phaseRatioB;\n        }\n\n        const stopIndex: number = bufferIndex + roundedSamplesPerTick;\n        for (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\n            phaseA += phaseDeltaA;\n            phaseB += phaseDeltaB;\n\n            let waveLA: number;\n            let waveLB: number;\n            let waveRA: number;\n            let waveRB: number;\n            let inputSampleL: number;\n            let inputSampleR: number;\n\n            if (aliases) {\n                waveLA = waveL[(0 | phaseA) % waveLength];\n                waveLB = waveL[(0 | phaseB) % waveLength];\n                waveRA = waveR[(0 | phaseA) % waveLength];\n                waveRB = waveR[(0 | phaseB) % waveLength];\n                inputSampleL = waveLA + waveLB;\n                inputSampleR = waveRA + waveRB;\n            } else {\n                const phaseAInt: number = phaseA | 0;\n                const phaseBInt: number = phaseB | 0;\n                const indexA: number = phaseAInt % waveLength;\n                const indexB: number = phaseBInt % waveLength;\n                let nextWaveIntegralLA: number = waveL[indexA];\n                let nextWaveIntegralLB: number = waveL[indexB];\n                let nextWaveIntegralRA: number = waveR[indexA];\n                let nextWaveIntegralRB: number = waveR[indexB];\n                const phaseRatioA: number = phaseA - phaseAInt;\n                const phaseRatioB: number = phaseB - phaseBInt;\n                nextWaveIntegralLA += (waveL[indexA + 1] - nextWaveIntegralLA) * phaseRatioA;\n                nextWaveIntegralLB += (waveL[indexB + 1] - nextWaveIntegralLB) * phaseRatioB;\n                nextWaveIntegralRA += (waveR[indexA + 1] - nextWaveIntegralRA) * phaseRatioA;\n                nextWaveIntegralRB += (waveR[indexB + 1] - nextWaveIntegralRB) * phaseRatioB;\n                waveLA = (nextWaveIntegralLA - prevWaveIntegralLA) / phaseDeltaA;\n                waveLB = (nextWaveIntegralLB - prevWaveIntegralLB) / phaseDeltaB;\n                waveRA = (nextWaveIntegralRA - prevWaveIntegralRA) / phaseDeltaA;\n                waveRB = (nextWaveIntegralRB - prevWaveIntegralRB) / phaseDeltaB;\n                prevWaveIntegralLA = nextWaveIntegralLA;\n                prevWaveIntegralLB = nextWaveIntegralLB;\n                prevWaveIntegralRA = nextWaveIntegralRA;\n                prevWaveIntegralRB = nextWaveIntegralRB;\n                inputSampleL = waveLA + waveLB * unisonSign;\n                inputSampleR = waveRA + waveRB * unisonSign;\n            }\n\n            const sampleL: number = applyFilters(inputSampleL * volumeScale, initialFilterInputL1, initialFilterInputL2, filterCount, filtersL);\n            const sampleR: number = applyFilters(inputSampleR * volumeScale, initialFilterInputR1, initialFilterInputR2, filterCount, filtersR);\n            initialFilterInputL2 = initialFilterInputL1;\n            initialFilterInputR2 = initialFilterInputR1;\n            initialFilterInputL1 = inputSampleL * volumeScale;\n            initialFilterInputR1 = inputSampleR * volumeScale;\n\n            phaseDeltaA *= phaseDeltaScaleA;\n            phaseDeltaB *= phaseDeltaScaleB;\n\n            const outputL: number = sampleL * expression;\n            const outputR: number = sampleR * expression;\n            expression += expressionDelta;\n\n            dataL[sampleIndex] += outputL;\n            dataR[sampleIndex] += outputR;\n        }\n\n        tone.phases[0] = phaseA / waveLength;\n        tone.phases[1] = phaseB / waveLength;\n        tone.phaseDeltas[0] = phaseDeltaA / waveLength;\n        tone.phaseDeltas[1] = phaseDeltaB / waveLength;\n        tone.expression = expression;\n\n        synth.sanitizeFilters(filtersL);\n        synth.sanitizeFilters(filtersR);\n        tone.initialNoteFilterInputL1 = initialFilterInputL1;\n        tone.initialNoteFilterInputR1 = initialFilterInputR1;\n        tone.initialNoteFilterInputL2 = initialFilterInputL2;\n        tone.initialNoteFilterInputR2 = initialFilterInputR2;\n\t}\n\tprivate static harmonicsSynth(synth: Synth, bufferIndex: number, roundedSamplesPerTick: number, tone: Tone, instrumentState: InstrumentState): void {\n\t\tconst data: Float32Array = synth.tempInstrumentSampleBufferL!;\n\t\tconst wave: Float32Array = instrumentState.waveL!;\n\t\tconst waveLength: number = wave.length - 1; // The first sample is duplicated at the end, don't double-count it.\n\n\t\tconst unisonSign: number = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\n\t\tif (instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord!.customInterval) tone.phases[1] = tone.phases[0];\n\t\tlet phaseDeltaA: number = tone.phaseDeltas[0] * waveLength;\n\t\tlet phaseDeltaB: number = tone.phaseDeltas[1] * waveLength;\n\t\tconst phaseDeltaScaleA: number = +tone.phaseDeltaScales[0];\n\t\tconst phaseDeltaScaleB: number = +tone.phaseDeltaScales[1];\n\t\tlet expression: number = +tone.expression;\n\t\tconst expressionDelta: number = +tone.expressionDelta;\n\t\tlet phaseA: number = (tone.phases[0] % 1) * waveLength;\n\t\tlet phaseB: number = (tone.phases[1] % 1) * waveLength;\n\n\t\tconst filters: DynamicBiquadFilter[] = tone.noteFiltersL;\n\t\tconst filterCount: number = tone.noteFilterCount | 0;\n\t\tlet initialFilterInput1: number = +tone.initialNoteFilterInputL1;\n\t\tlet initialFilterInput2: number = +tone.initialNoteFilterInputL2;\n\t\tconst applyFilters: Function = Synth.applyFilters;\n\n\t\tconst phaseAInt: number = phaseA | 0;\n\t\tconst phaseBInt: number = phaseB | 0;\n\t\tconst indexA: number = phaseAInt % waveLength;\n\t\tconst indexB: number = phaseBInt % waveLength;\n\t\tconst phaseRatioA: number = phaseA - phaseAInt;\n\t\tconst phaseRatioB: number = phaseB - phaseBInt;\n\t\tlet prevWaveIntegralA: number = +wave[indexA];\n\t\tlet prevWaveIntegralB: number = +wave[indexB];\n\t\tprevWaveIntegralA += (wave[indexA + 1] - prevWaveIntegralA) * phaseRatioA;\n\t\tprevWaveIntegralB += (wave[indexB + 1] - prevWaveIntegralB) * phaseRatioB;\n\n\t\tconst stopIndex: number = bufferIndex + roundedSamplesPerTick;\n\t\tfor (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\n\t\t\tphaseA += phaseDeltaA;\n\t\t\tphaseB += phaseDeltaB;\n\n\t\t\tconst phaseAInt: number = phaseA | 0;\n\t\t\tconst phaseBInt: number = phaseB | 0;\n\t\t\tconst indexA: number = phaseAInt % waveLength;\n\t\t\tconst indexB: number = phaseBInt % waveLength;\n\t\t\tlet nextWaveIntegralA: number = wave[indexA];\n\t\t\tlet nextWaveIntegralB: number = wave[indexB];\n\t\t\tconst phaseRatioA: number = phaseA - phaseAInt;\n\t\t\tconst phaseRatioB: number = phaseB - phaseBInt;\n\t\t\tnextWaveIntegralA += (wave[indexA + 1] - nextWaveIntegralA) * phaseRatioA;\n\t\t\tnextWaveIntegralB += (wave[indexB + 1] - nextWaveIntegralB) * phaseRatioB;\n\t\t\tconst waveA: number = (nextWaveIntegralA - prevWaveIntegralA) / phaseDeltaA;\n\t\t\tconst waveB: number = (nextWaveIntegralB - prevWaveIntegralB) / phaseDeltaB;\n\t\t\tprevWaveIntegralA = nextWaveIntegralA;\n\t\t\tprevWaveIntegralB = nextWaveIntegralB;\n\n\t\t\tconst inputSample: number = waveA + waveB * unisonSign;\n\t\t\tconst sample: number = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\tinitialFilterInput1 = inputSample;\n\n\t\t\tphaseDeltaA *= phaseDeltaScaleA;\n\t\t\tphaseDeltaB *= phaseDeltaScaleB;\n\n\t\t\tconst output: number = sample * expression;\n\t\t\texpression += expressionDelta;\n\n\t\t\tdata[sampleIndex] += output;\n\t\t}\n\n\t\ttone.phases[0] = phaseA / waveLength;\n\t\ttone.phases[1] = phaseB / waveLength;\n\t\ttone.phaseDeltas[0] = phaseDeltaA / waveLength;\n\t\ttone.phaseDeltas[1] = phaseDeltaB / waveLength;\n\t\ttone.expression = expression;\n\n\t\tsynth.sanitizeFilters(filters);\n\t\ttone.initialNoteFilterInputL1 = initialFilterInput1;\n\t\ttone.initialNoteFilterInputL2 = initialFilterInput2;\n\t}\n\n    private static pickedStringSynth(synth: Synth, bufferIndex: number, roundedSamplesPerTick: number, tone: Tone, instrumentState: InstrumentState): void {\n        // This algorithm is similar to the Karpluss-Strong algorithm in principle, but with an\n        // all-pass filter for dispersion and with more control over the impulse harmonics.\n        // The source code is processed as a string before being compiled, in order to\n        // handle the unison feature. If unison is disabled or set to none, then only one\n        // string voice is required, otherwise two string voices are required. We only want\n        // to compute the minimum possible number of string voices, so omit the code for\n        // processing extra ones if possible. Any line containing a \"#\" is duplicated for\n        // each required voice, replacing the \"#\" with the voice index.\n\n        const voiceCount: number = instrumentState.unisonVoices;\n        let pickedStringFunction: Function = Synth.pickedStringFunctionCache[voiceCount];\n        if (pickedStringFunction == undefined) {\n            let pickedStringSource: string = \"return (synth, bufferIndex, runLength, tone, instrumentState) => {\";\n\n\n            pickedStringSource += `\n\t\t\t\tconst Config = beepbox.Config;\n\t\t\t\tconst Synth = beepbox.Synth;\n                const data = synth.tempInstrumentSampleBufferL;\n\t\t\t\t\n\t\t\t\tlet pickedString# = tone.pickedStrings[#];\n\t\t\t\tlet allPassSample# = +pickedString#.allPassSample;\n\t\t\t\tlet allPassPrevInput# = +pickedString#.allPassPrevInput;\n\t\t\t\tlet sustainFilterSample# = +pickedString#.sustainFilterSample;\n\t\t\t\tlet sustainFilterPrevOutput2# = +pickedString#.sustainFilterPrevOutput2;\n\t\t\t\tlet sustainFilterPrevInput1# = +pickedString#.sustainFilterPrevInput1;\n\t\t\t\tlet sustainFilterPrevInput2# = +pickedString#.sustainFilterPrevInput2;\n\t\t\t\tlet fractionalDelaySample# = +pickedString#.fractionalDelaySample;\n\t\t\t\tconst delayLine# = pickedString#.delayLine;\n\t\t\t\tconst delayBufferMask# = (delayLine#.length - 1) >> 0;\n\t\t\t\tlet delayIndex# = pickedString#.delayIndex|0;\n\t\t\t\tdelayIndex# = (delayIndex# & delayBufferMask#) + delayLine#.length;\n\t\t\t\tlet delayLength# = +pickedString#.prevDelayLength;\n\t\t\t\tconst delayLengthDelta# = +pickedString#.delayLengthDelta;\n\t\t\t\tlet allPassG# = +pickedString#.allPassG;\n\t\t\t\tlet sustainFilterA1# = +pickedString#.sustainFilterA1;\n\t\t\t\tlet sustainFilterA2# = +pickedString#.sustainFilterA2;\n\t\t\t\tlet sustainFilterB0# = +pickedString#.sustainFilterB0;\n\t\t\t\tlet sustainFilterB1# = +pickedString#.sustainFilterB1;\n\t\t\t\tlet sustainFilterB2# = +pickedString#.sustainFilterB2;\n\t\t\t\tconst allPassGDelta# = +pickedString#.allPassGDelta;\n\t\t\t\tconst sustainFilterA1Delta# = +pickedString#.sustainFilterA1Delta;\n\t\t\t\tconst sustainFilterA2Delta# = +pickedString#.sustainFilterA2Delta;\n\t\t\t\tconst sustainFilterB0Delta# = +pickedString#.sustainFilterB0Delta;\n\t\t\t\tconst sustainFilterB1Delta# = +pickedString#.sustainFilterB1Delta;\n\t\t\t\tconst sustainFilterB2Delta# = +pickedString#.sustainFilterB2Delta;\n\t\t\t\t\n\t\t\t\tlet expression = +tone.expression;\n\t\t\t\tconst expressionDelta = +tone.expressionDelta;\n\t\t\t\t\n\t\t\t\tconst unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\n\t\t\t\tconst delayResetOffset# = pickedString#.delayResetOffset|0;\n\t\t\t\t\n\t\t\t\tconst filters = tone.noteFiltersL;\n\t\t\t\tconst filterCount = tone.noteFilterCount|0;\n\t\t\t\tlet initialFilterInput1 = +tone.initialNoteFilterInputL1;\n\t\t\t\tlet initialFilterInput2 = +tone.initialNoteFilterInputL2;\n\t\t\t\tconst applyFilters = Synth.applyFilters;\n\t\t\t\t\n\t\t\t\tconst stopIndex = bufferIndex + runLength;\n\t\t\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\t\t\tconst targetSampleTime# = delayIndex# - delayLength#;\n\t\t\t\t\tconst lowerIndex# = (targetSampleTime# + 0.125) | 0; // Offset to improve stability of all-pass filter.\n\t\t\t\t\tconst upperIndex# = lowerIndex# + 1;\n\t\t\t\t\tconst fractionalDelay# = upperIndex# - targetSampleTime#;\n\t\t\t\t\tconst fractionalDelayG# = (1.0 - fractionalDelay#) / (1.0 + fractionalDelay#); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\t\tconst prevInput# = delayLine#[lowerIndex# & delayBufferMask#];\n\t\t\t\t\tconst input# = delayLine#[upperIndex# & delayBufferMask#];\n\t\t\t\t\tfractionalDelaySample# = fractionalDelayG# * input# + prevInput# - fractionalDelayG# * fractionalDelaySample#;\n\t\t\t\t\t\n\t\t\t\t\tallPassSample# = fractionalDelaySample# * allPassG# + allPassPrevInput# - allPassG# * allPassSample#;\n\t\t\t\t\tallPassPrevInput# = fractionalDelaySample#;\n\t\t\t\t\t\n\t\t\t\t\tconst sustainFilterPrevOutput1# = sustainFilterSample#;\n\t\t\t\t\tsustainFilterSample# = sustainFilterB0# * allPassSample# + sustainFilterB1# * sustainFilterPrevInput1# + sustainFilterB2# * sustainFilterPrevInput2# - sustainFilterA1# * sustainFilterSample# - sustainFilterA2# * sustainFilterPrevOutput2#;\n\t\t\t\t\tsustainFilterPrevOutput2# = sustainFilterPrevOutput1#;\n\t\t\t\t\tsustainFilterPrevInput2# = sustainFilterPrevInput1#;\n\t\t\t\t\tsustainFilterPrevInput1# = allPassSample#;\n\t\t\t\t\t\n\t\t\t\t\tdelayLine#[delayIndex# & delayBufferMask#] += sustainFilterSample#;\n\t\t\t\t\tdelayLine#[(delayIndex# + delayResetOffset#) & delayBufferMask#] = 0.0;\n\t\t\t\t\tdelayIndex#++;\n\t\t\t\t\t\n\t\t\t\t\tconst inputSample = (`\n\n            const sampleList: string[] = [];\n            for (let voice: number = 0; voice < voiceCount; voice++) {\n                sampleList.push(\"fractionalDelaySample\" + voice + (voice != 0 ? \" * unisonSign\" : \"\"));\n            }\n\n            pickedStringSource += sampleList.join(\" + \");\n\n            pickedStringSource += `) * expression;\n\t\t\t\t\tconst sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\t\t\tinitialFilterInput1 = inputSample;\n                    data[sampleIndex] += sample;\n\t\t\t\t\t\n\t\t\t\t\texpression += expressionDelta;\n\t\t\t\t\tdelayLength# += delayLengthDelta#;\n\t\t\t\t\tallPassG# += allPassGDelta#;\n\t\t\t\t\tsustainFilterA1# += sustainFilterA1Delta#;\n\t\t\t\t\tsustainFilterA2# += sustainFilterA2Delta#;\n\t\t\t\t\tsustainFilterB0# += sustainFilterB0Delta#;\n\t\t\t\t\tsustainFilterB1# += sustainFilterB1Delta#;\n\t\t\t\t\tsustainFilterB2# += sustainFilterB2Delta#;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Avoid persistent denormal or NaN values in the delay buffers and filter history.\n\t\t\t\tconst epsilon = (1.0e-24);\n\t\t\t\tif (!Number.isFinite(allPassSample#) || Math.abs(allPassSample#) < epsilon) allPassSample# = 0.0;\n\t\t\t\tif (!Number.isFinite(allPassPrevInput#) || Math.abs(allPassPrevInput#) < epsilon) allPassPrevInput# = 0.0;\n\t\t\t\tif (!Number.isFinite(sustainFilterSample#) || Math.abs(sustainFilterSample#) < epsilon) sustainFilterSample# = 0.0;\n\t\t\t\tif (!Number.isFinite(sustainFilterPrevOutput2#) || Math.abs(sustainFilterPrevOutput2#) < epsilon) sustainFilterPrevOutput2# = 0.0;\n\t\t\t\tif (!Number.isFinite(sustainFilterPrevInput1#) || Math.abs(sustainFilterPrevInput1#) < epsilon) sustainFilterPrevInput1# = 0.0;\n\t\t\t\tif (!Number.isFinite(sustainFilterPrevInput2#) || Math.abs(sustainFilterPrevInput2#) < epsilon) sustainFilterPrevInput2# = 0.0;\n\t\t\t\tif (!Number.isFinite(fractionalDelaySample#) || Math.abs(fractionalDelaySample#) < epsilon) fractionalDelaySample# = 0.0;\n\t\t\t\tpickedString#.allPassSample = allPassSample#;\n\t\t\t\tpickedString#.allPassPrevInput = allPassPrevInput#;\n\t\t\t\tpickedString#.sustainFilterSample = sustainFilterSample#;\n\t\t\t\tpickedString#.sustainFilterPrevOutput2 = sustainFilterPrevOutput2#;\n\t\t\t\tpickedString#.sustainFilterPrevInput1 = sustainFilterPrevInput1#;\n\t\t\t\tpickedString#.sustainFilterPrevInput2 = sustainFilterPrevInput2#;\n\t\t\t\tpickedString#.fractionalDelaySample = fractionalDelaySample#;\n\t\t\t\tpickedString#.delayIndex = delayIndex#;\n\t\t\t\tpickedString#.prevDelayLength = delayLength#;\n\t\t\t\tpickedString#.allPassG = allPassG#;\n\t\t\t\tpickedString#.sustainFilterA1 = sustainFilterA1#;\n\t\t\t\tpickedString#.sustainFilterA2 = sustainFilterA2#;\n\t\t\t\tpickedString#.sustainFilterB0 = sustainFilterB0#;\n\t\t\t\tpickedString#.sustainFilterB1 = sustainFilterB1#;\n\t\t\t\tpickedString#.sustainFilterB2 = sustainFilterB2#;\n\t\t\t\t\n\t\t\t\ttone.expression = expression;\n\t\t\t\t\n\t\t\t\tsynth.sanitizeFilters(filters);\n\t\t\t\ttone.initialNoteFilterInputL1 = initialFilterInput1;\n\t\t\t\ttone.initialNoteFilterInputL2 = initialFilterInput2;\n\t\t\t}`\n\n            // Duplicate lines containing \"#\" for each voice and replace the \"#\" with the voice index.\n            pickedStringSource = pickedStringSource.replace(/^.*\\#.*$/mg, line => {\n                const lines = [];\n                for (let voice: number = 0; voice < voiceCount; voice++) {\n                    lines.push(line.replace(/\\#/g, String(voice)));\n                }\n                return lines.join(\"\\n\");\n            });\n\n            //console.log(pickedStringSource);\n            pickedStringFunction = new Function(\"Config\", \"Synth\", pickedStringSource)(Config, Synth);\n            Synth.pickedStringFunctionCache[voiceCount] = pickedStringFunction;\n        }\n\n        pickedStringFunction(synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState);\n    }\n\n    private static effectsSynth(synth: Synth, outputDataL: Float32Array, outputDataR: Float32Array, bufferIndex: number, runLength: number, instrumentState: InstrumentState): void {\n        // TODO: If automation is involved, don't assume sliders will stay at zero.\n        // @jummbus - ^ Correct, removed the non-zero checks as modulation can change them.\n\n        const usesDistortion: boolean = instrumentState.effectsIncludeType(EffectType.distortion);\n        const usesBitcrusher: boolean = instrumentState.effectsIncludeType(EffectType.bitcrusher);\n        const usesEqFilter: boolean = instrumentState.effectsIncludeType(EffectType.eqFilter);\n        const usesGain: boolean = instrumentState.effectsIncludeType(EffectType.gain);\n        const usesPanning: boolean = instrumentState.effectsIncludeType(EffectType.panning);\n        const usesFlanger: boolean = instrumentState.effectsIncludeType(EffectType.flanger);\n        const usesChorus: boolean = instrumentState.effectsIncludeType(EffectType.chorus);\n        const usesEcho: boolean = instrumentState.effectsIncludeType(EffectType.echo);\n\t\tconst usesReverb: boolean = instrumentState.effectsIncludeType(EffectType.reverb);\n\t\tconst usesGranular: boolean = instrumentState.effectsIncludeType(EffectType.granular);\n\t\tconst usesRingModulation: boolean = instrumentState.effectsIncludeType(EffectType.ringModulation);\n        const isStereo: boolean = instrumentState.chipWaveInStereo && (instrumentState.synthesizer == Synth.loopableChipSynth || instrumentState.synthesizer == Synth.chipSynth); //TODO: make an instrumentIsStereo function\n        let signature: string = \"\";\n        for (let i of instrumentState.effects) {\n            if (i != null) {\n                signature = signature + i!.type.toString();\n                if (i!.type == EffectType.panning) signature = signature + i!.panningMode.toString();\n            }\n        }\n\n        let effectsFunction: Function = Synth.effectsFunctionCache[signature];\n        if (effectsFunction == undefined) {\n            let effectsSource: string = \"return (synth, outputDataL, outputDataR, bufferIndex, runLength, instrumentState) => {\";\n\n            const usesDelays: boolean = usesChorus || usesReverb || usesEcho || usesGranular || usesFlanger;\n\n            effectsSource += `\n            let effectState = instrumentState.effects[0]\n\n            const tempInstrumentSampleBufferL = synth.tempInstrumentSampleBufferL;\n            const tempInstrumentSampleBufferR = synth.tempInstrumentSampleBufferR;\n\n            let mixVolume = +instrumentState.mixVolume;\n            const mixVolumeDelta = +instrumentState.mixVolumeDelta;\n            `\n\n            if (usesDelays) {\n                effectsSource += `\n\n                let delayInputMult = +instrumentState.delayInputMult;\n                const delayInputMultDelta = +instrumentState.delayInputMultDelta;`\n            }\n\n            if (usesEqFilter) {\n                effectsSource += `\n\n                let filtersL = [];\n                let filtersR = [];\n\n                let filterCount = [];\n                let initialFilterInputL1 = [];\n                let initialFilterInputR1 = [];\n                let initialFilterInputL2 = [];\n                let initialFilterInputR2 = [];\n                let inputSampleL = [];\n                let inputSampleR = [];\n                const applyFilters = Synth.applyFilters;`\n\n                // this is *supposed* to always be included but it is rather inconvenient to do so...\n                effectsSource += `\n\n                let eqFilterVolume = [];\n                let eqFilterVolumeDelta = [];\n                `\n            }\n            if (usesDistortion) {\n\n                effectsSource += `\n\n                const distortionBaseVolume = +Config.distortionBaseVolume;\n                let distortion = [];\n                let distortionDelta = [];\n                let distortionDrive = [];\n                let distortionDriveDelta = [];\n                const distortionFractionalResolution = 4.0;\n                const distortionOversampleCompensation = distortionBaseVolume / distortionFractionalResolution;\n                const distortionFractionalDelay1 = 1.0 / distortionFractionalResolution;\n                const distortionFractionalDelay2 = 2.0 / distortionFractionalResolution;\n                const distortionFractionalDelay3 = 3.0 / distortionFractionalResolution;\n                const distortionFractionalDelayG1 = (1.0 - distortionFractionalDelay1) / (1.0 + distortionFractionalDelay1); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n                const distortionFractionalDelayG2 = (1.0 - distortionFractionalDelay2) / (1.0 + distortionFractionalDelay2); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n                const distortionFractionalDelayG3 = (1.0 - distortionFractionalDelay3) / (1.0 + distortionFractionalDelay3); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n                const distortionNextOutputWeight1 = Math.cos(Math.PI * distortionFractionalDelay1) * 0.5 + 0.5;\n                const distortionNextOutputWeight2 = Math.cos(Math.PI * distortionFractionalDelay2) * 0.5 + 0.5;\n                const distortionNextOutputWeight3 = Math.cos(Math.PI * distortionFractionalDelay3) * 0.5 + 0.5;\n                const distortionPrevOutputWeight1 = 1.0 - distortionNextOutputWeight1;\n                const distortionPrevOutputWeight2 = 1.0 - distortionNextOutputWeight2;\n                const distortionPrevOutputWeight3 = 1.0 - distortionNextOutputWeight3;\n\n                let distortionFractionalInputL1 = [];\n                let distortionFractionalInputL2 = [];\n                let distortionFractionalInputL3 = [];\n                let distortionFractionalInputR1 = [];\n                let distortionFractionalInputR2 = [];\n                let distortionFractionalInputR3 = [];\n                let distortionPrevInputL = [];\n                let distortionPrevInputR = [];\n                let distortionNextOutputL = [];\n                let distortionNextOutputR = [];\n\n                let distortionReverse = [];\n                let distortionNextInputL = [];\n                let distortionNextInputR = [];\n                let distortionOutputL1 = [];\n                let distortionOutputL2 = [];\n                let distortionOutputL3 = [];\n                let distortionOutputR1 = [];\n                let distortionOutputR2 = [];\n                let distortionOutputR3 = [];`\n            }\n            if (usesBitcrusher) {\n                effectsSource += `\n\n                let bitcrusherPrevInputL = [];\n                let bitcrusherPrevInputR = [];\n                let bitcrusherCurrentOutputL = [];\n                let bitcrusherCurrentOutputR = [];\n                let bitcrusherPhase = [];\n                let bitcrusherPhaseDelta = [];\n                let bitcrusherPhaseDeltaScale = [];\n                let bitcrusherScale = [];\n                let bitcrusherScaleScale = [];\n                let bitcrusherFoldLevel = [];\n                let bitcrusherFoldLevelScale = [];\n\n                let lerpedInputL = [];\n                let lerpedInputR = [];\n\n                let bitcrusherWrapLevel = [];\n                let wrappedSampleL = [];\n                let wrappedSampleR = [];\n                let foldedSampleL = [];\n                let foldedSampleR = [];\n                let scaledSampleL = [];\n                let scaledSampleR = [];\n                let oldValueL = [];\n                let oldValueR = [];\n                let newValueL = [];\n                let newValueR = [];`\n            }\n            if (usesFlanger) {\n                effectsSource += `\n\n                const flangerMask = synth.flangerDelayBufferMask >>> 0;\n                let flangerDelayLineL = [];\n                let flangerDelayLineR = [];\n                let flangerDelayPos = [];\n\n                let flanger = [];\n                let flangerDelta = [];\n                let flangerSpeed = [];\n                let flangerSpeedDelta = [];\n                let flangerDepth = [];\n                let flangerDepthDelta = [];\n                let flangerFeedback = [];\n                let flangerFeedbackDelta = [];\n\n                let flangerPhase = [];\n                let flangerRange = [];\n\n                let flangerTapIndexL = [];\n                let flangerTapIndexR = [];\n                let flangerTapEndL = [];\n                let flangerTapEndR = [];\n                let flangerTapDeltaL = [];\n                let flangerTapDeltaR = [];\n\n                let flangerTapRatioL = []; // you don't know how happy i am that this variable exists\n                let flangerTapRatioR = [];\n                let flangerTapLA = [];\n                let flangerTapLB = [];\n                let flangerTapRA = [];\n                let flangerTapRB = [];\n                let flangerTapL = [];\n                let flangerTapR = [];`\n            }\n            if (usesChorus) {\n                effectsSource += `\n\n                const chorusMask = synth.chorusDelayBufferMask >>> 0;\n                let chorusDelayLineL = [];\n                let chorusDelayLineR = [];\n                let chorusDelayPos = [];\n\n                let chorusVoiceMult = [];\n                let chorusVoiceMultDelta = [];\n                let chorusCombinedMult = [];\n                let chorusCombinedMultDelta = [];\n\n                const chorusDuration = +Config.chorusPeriodSeconds;\n                const chorusAngle = Math.PI * 2.0 / (chorusDuration * synth.samplesPerSecond);\n                const chorusRange = synth.samplesPerSecond * Config.chorusDelayRange;\n                const chorusOffset0 = synth.chorusDelayBufferSize - Config.chorusDelayOffsets[0][0] * chorusRange;\n                const chorusOffset1 = synth.chorusDelayBufferSize - Config.chorusDelayOffsets[0][1] * chorusRange;\n                const chorusOffset2 = synth.chorusDelayBufferSize - Config.chorusDelayOffsets[0][2] * chorusRange;\n                const chorusOffset3 = synth.chorusDelayBufferSize - Config.chorusDelayOffsets[1][0] * chorusRange;\n                const chorusOffset4 = synth.chorusDelayBufferSize - Config.chorusDelayOffsets[1][1] * chorusRange;\n                const chorusOffset5 = synth.chorusDelayBufferSize - Config.chorusDelayOffsets[1][2] * chorusRange;\n\n                let chorusPhase = [];\n                let chorusTap0Index = [];\n                let chorusTap1Index = [];\n                let chorusTap2Index = [];\n                let chorusTap3Index = [];\n                let chorusTap4Index = [];\n                let chorusTap5Index = [];\n                let chorusTap0End = [];\n                let chorusTap1End = [];\n                let chorusTap2End = [];\n                let chorusTap3End = [];\n                let chorusTap4End = [];\n                let chorusTap5End = [];\n                let chorusTap0Delta = [];\n                let chorusTap1Delta = [];\n                let chorusTap2Delta = [];\n                let chorusTap3Delta = [];\n                let chorusTap4Delta = [];\n                let chorusTap5Delta = [];\n\n                let chorusTap0Ratio = [];\n                let chorusTap1Ratio = [];\n                let chorusTap2Ratio = [];\n                let chorusTap3Ratio = [];\n                let chorusTap4Ratio = [];\n                let chorusTap5Ratio = [];\n                let chorusTap0A = [];\n                let chorusTap0B = [];\n                let chorusTap1A = [];\n                let chorusTap1B = [];\n                let chorusTap2A = [];\n                let chorusTap2B = [];\n                let chorusTap3A = [];\n                let chorusTap3B = [];\n                let chorusTap4A = [];\n                let chorusTap4B = [];\n                let chorusTap5A = [];\n                let chorusTap5B = [];\n                let chorusTap0 = [];\n                let chorusTap1 = [];\n                let chorusTap2 = [];\n                let chorusTap3 = [];\n                let chorusTap4 = [];\n                let chorusTap5 = [];`\n            }\n            if (usesEcho) {\n                effectsSource += `\n                let echoMult = [];\n                let echoMultDelta = [];\n\n                let echoDelayLineL = [];\n                let echoDelayLineR = [];\n                let echoMask = [];\n\n                let echoDelayPosL = [];\n                let echoDelayPosR = [];\n                let echoDelayOffsetStart = [];\n                let echoDelayOffsetEnd   = [];\n                let echoDelayOffsetRatio = [];\n                let echoDelayOffsetRatioDelta = [];\n                let echoPingPong = [];\n\n                let echoShelfA1 = [];\n                let echoShelfB0 = [];\n                let echoShelfB1 = [];\n                let echoShelfSampleL = [];\n                let echoShelfSampleR = [];\n                let echoShelfPrevInputL = [];\n                let echoShelfPrevInputR = [];\n\n                let echoNextInputL = [];\n                let echoNextInputR = [];\n                let echoTapStartIndexL = [];\n                let echoTapStartIndexR = [];\n                let echoTapEndIndexL   = [];\n                let echoTapEndIndexR   = [];\n                let echoTapStartL = [];\n                let echoTapEndL   = [];\n                let echoTapStartR = [];\n                let echoTapEndR   = [];\n                let echoTapL = [];\n                let echoTapR = [];`\n            }\n            if (usesReverb) {\n                effectsSource += `\n\n                const reverbMask = Config.reverbDelayBufferMask >>> 0; //TODO: Dynamic reverb buffer size.\n                let reverbDelayLine = [];\n                let reverbDelayPos = [];\n\n                let reverb = [];\n                let reverbDelta = [];\n\n                let reverbShelfA1 = [];\n                let reverbShelfB0 = [];\n                let reverbShelfB1 = [];\n                let reverbShelfSample0 = [];\n                let reverbShelfSample1 = [];\n                let reverbShelfSample2 = [];\n                let reverbShelfSample3 = [];\n                let reverbShelfPrevInput0 = [];\n                let reverbShelfPrevInput1 = [];\n                let reverbShelfPrevInput2 = [];\n                let reverbShelfPrevInput3 = [];\n\n                let reverbDelayPos1 = [];\n                let reverbDelayPos2 = [];\n                let reverbDelayPos3 = [];\n                let reverbSample0 = [];\n                let reverbSample1 = [];\n                let reverbSample2 = [];\n                let reverbSample3 = [];\n                let reverbTemp0 = [];\n                let reverbTemp1 = [];\n                let reverbTemp2 = [];\n                let reverbTemp3 = [];\n                let reverbShelfInput0 = [];\n                let reverbShelfInput1 = [];\n                let reverbShelfInput2 = [];\n                let reverbShelfInput3 = [];`\n            }\n            if (usesRingModulation) {\n                effectsSource += `\n\n                let ringModMix = [];\n                let ringModMixDelta = [];\n                let ringModPhase = [];\n                let ringModPhaseDelta = [];\n                let ringModPhaseDeltaScale = [];\n                let ringModWaveformIndex = [];\n                let ringModMixFade = [];\n                let ringModMixFadeDelta = [];\n\n                let ringModPulseWidth = [];\n\n                let waveform = [];\n                let waveformLength = [];\n                let ringModOutputL = [];\n                let ringModOutputR = [];\n                let ringModMixF = [];\n                `\n            }\n            if (usesPanning) {\n                effectsSource += `\n\n                const panningMask = synth.panningDelayBufferMask >>> 0;\n                let panningDelayLineL = [];\n                let panningDelayLineR = [];\n                let panningDelayPos = [];\n                let panningVolumeL      = [];\n                let panningVolumeR      = [];\n                let panningVolumeDeltaL = [];\n                let panningVolumeDeltaR = [];\n                let panningOffsetL      = [];\n                let panningOffsetR      = [];\n                let panningOffsetDeltaL = [];\n                let panningOffsetDeltaR = [];\n                let panningRatioL  = [];\n                let panningRatioR  = [];\n                let panningTapLA   = [];\n                let panningTapLB   = [];\n                let panningTapRA   = [];\n                let panningTapRB   = [];\n                let panningTapL    = [];\n                let panningTapR    = [];`\n            }\n            if (usesGain) {\n                effectsSource += `\n\n                let gain = [];\n                let gainDelta = [];`\n            }\n            if (usesGranular) {\n                effectsSource += `\n\n                let granularWet = [];\n                let granularMixDelta = [];\n                let granularDry = [];\n                let granularDelayLineL = [];\n                let granularDelayLineR = [];\n                let granularGrains = [];\n                let granularGrainCount = [];\n                let granularDelayLineLength = [];\n                let granularDelayLineMask = [];\n                let granularDelayLineIndex = [];\n                let usesRandomGrainLocation = [];\n                let computeGrains = [];\n                let granularOutputL = [];\n                let granularOutputR = [];\n                `\n            }\n\n            for (let i: number = 0; i < instrumentState.effects.length; i++) {\n                let effectState: EffectState = instrumentState.effects[i] as EffectState\n                effectsSource += `\n\n                effectState = instrumentState.effects[` + i + `];\n                effectIndex = ` + i + `;\n                `\n\n                if (usesGranular && effectState.type == EffectType.granular) {\n                    effectsSource += `\n\n                    granularWet[effectIndex] = effectState.granularMix;\n                    granularMixDelta[effectIndex] = effectState.granularMixDelta;\n                    granularDry[effectIndex] = 1.0 - granularWet[effectIndex];\n                    granularDelayLineL[effectIndex] = effectState.granularDelayLineL;\n                    granularDelayLineR[effectIndex] = effectState.granularDelayLineR;\n                    granularGrains[effectIndex] = effectState.granularGrains;\n                    granularGrainCount[effectIndex] = effectState.granularGrainsLength;\n                    granularDelayLineLength[effectIndex] = granularDelayLineL.length;\n                    granularDelayLineMask[effectIndex] = granularDelayLineLength[effectIndex] - 1;\n                    granularDelayLineIndex[effectIndex] = effectState.granularDelayLineIndex;\n                    usesRandomGrainLocation[effectIndex] = effectState.usesRandomGrainLocation;\n                    computeGrains[effectIndex] = effectState.computeGrains;\n                    effectState.granularDelayLineDirty = true;\n                    `\n                }\n                else if (usesDistortion && effectState.type == EffectType.distortion) {\n                    // Distortion can sometimes create noticeable aliasing.\n                    // It seems the established industry best practice for distortion antialiasing\n                    // is to upsample the inputs (\"zero stuffing\" followed by a brick wall lowpass\n                    // at the original nyquist frequency), perform the distortion, then downsample\n                    // (the lowpass again followed by dropping in-between samples). This is\n                    // \"mathematically correct\" in that it preserves only the intended frequencies,\n                    // but it has several unfortunate tradeoffs depending on the choice of filter,\n                    // introducing latency and/or time smearing, since no true brick wall filter\n                    // exists. For the time being, I've opted to instead generate in-between input\n                    // samples using fractional delay all-pass filters, and after distorting them,\n                    // I \"downsample\" these with a simple weighted sum.\n\n                    effectsSource += `\n\n                    distortion[effectIndex] = effectState.distortion;\n                    distortionDelta[effectIndex] = effectState.distortionDelta;\n                    distortionDrive[effectIndex] = effectState.distortionDrive;\n                    distortionDriveDelta[effectIndex] = effectState.distortionDriveDelta;\n                    distortionReverse[effectIndex] = 1.0 - distortion[effectIndex];\n\n                    distortionFractionalInputL1[effectIndex] = +effectState.distortionFractionalInputL1;\n                    distortionFractionalInputL2[effectIndex] = +effectState.distortionFractionalInputL2;\n                    distortionFractionalInputL3[effectIndex] = +effectState.distortionFractionalInputL3;\n                    distortionFractionalInputR1[effectIndex] = +effectState.distortionFractionalInputR1;\n                    distortionFractionalInputR2[effectIndex] = +effectState.distortionFractionalInputR2;\n                    distortionFractionalInputR3[effectIndex] = +effectState.distortionFractionalInputR3;\n                    distortionPrevInputL[effectIndex] = +effectState.distortionPrevInputL;\n                    distortionPrevInputR[effectIndex] = +effectState.distortionPrevInputR;\n                    distortionNextOutputL[effectIndex] = +effectState.distortionNextOutputL;\n                    distortionNextOutputR[effectIndex] = +effectState.distortionNextOutputR;`\n                }\n                else if (usesBitcrusher && effectState.type == EffectType.bitcrusher) {\n                    effectsSource += `\n\n                    bitcrusherPrevInputL[effectIndex] = +effectState.bitcrusherPrevInputL;\n                    bitcrusherPrevInputR[effectIndex] = +effectState.bitcrusherPrevInputR;\n                    bitcrusherCurrentOutputL[effectIndex] = +effectState.bitcrusherCurrentOutputL;\n                    bitcrusherCurrentOutputR[effectIndex] = +effectState.bitcrusherCurrentOutputR;\n                    bitcrusherPhase[effectIndex] = +effectState.bitcrusherPhase;\n                    bitcrusherPhaseDelta[effectIndex] = +effectState.bitcrusherPhaseDelta;\n                    bitcrusherPhaseDeltaScale[effectIndex] = +effectState.bitcrusherPhaseDeltaScale;\n                    bitcrusherScale[effectIndex] = +effectState.bitcrusherScale;\n                    bitcrusherScaleScale[effectIndex] = +effectState.bitcrusherScaleScale;\n                    bitcrusherFoldLevel[effectIndex] = +effectState.bitcrusherFoldLevel;\n                    bitcrusherFoldLevelScale[effectIndex] = +effectState.bitcrusherFoldLevelScale;`\n                }\n                else if (usesRingModulation && effectState.type == EffectType.ringModulation) {\n                    effectsSource += `\n\n                    ringModMix[effectIndex] = +effectState.ringModMix;\n                    ringModMixDelta[effectIndex] = +effectState.ringModMixDelta;\n                    ringModPhase[effectIndex] = +effectState.ringModPhase;\n                    ringModPhaseDelta[effectIndex] = +effectState.ringModPhaseDelta;\n                    ringModPhaseDeltaScale[effectIndex] = +effectState.ringModPhaseDeltaScale;\n                    ringModWaveformIndex[effectIndex] = +effectState.ringModWaveformIndex;\n                    ringModMixFade[effectIndex] = +effectState.ringModMixFade;\n                    ringModMixFadeDelta[effectIndex] = +effectState.ringModMixFadeDelta;\n\n                    ringModPulseWidth[effectIndex] = +effectState.ringModPulseWidth;\n\n                    waveform[effectIndex] = Config.operatorWaves[ringModWaveformIndex[effectIndex]].samples;\n                    if (ringModWaveformIndex[effectIndex] == 2) {\n                        waveform[effectIndex] = Synth.getOperatorWave(ringModWaveformIndex[effectIndex], ringModPulseWidth[effectIndex]).samples;\n                    }\n                    waveformLength[effectIndex] = waveform[effectIndex].length - 1;\n                    `\n                }\n                else if (usesEqFilter && effectState.type == EffectType.eqFilter) {\n                    effectsSource += `\n\n                    filtersL[effectIndex] = effectState.eqFiltersL;\n                    filtersR[effectIndex] = effectState.eqFiltersR;\n                    filterCount[effectIndex] = effectState.eqFilterCount|0;\n                    initialFilterInputL1[effectIndex] = +effectState.initialEqFilterInputL1;\n                    initialFilterInputR1[effectIndex] = +effectState.initialEqFilterInputR1;\n                    initialFilterInputL2[effectIndex] = +effectState.initialEqFilterInputL2;\n                    initialFilterInputR2[effectIndex] = +effectState.initialEqFilterInputR2;`\n\n                    // this is *supposed* to always be included but it is rather inconvenient to do so...\n                    effectsSource += `\n\n                    eqFilterVolume[effectIndex] = +effectState.eqFilterVolume;\n                    eqFilterVolumeDelta[effectIndex] = +effectState.eqFilterVolumeDelta;`\n                }\n                else if (usesPanning && effectState.type == EffectType.panning) {\n                    effectsSource += `\n\n                    panningDelayLineL[effectIndex] = effectState.panningDelayLineL;\n                    panningDelayLineR[effectIndex] = effectState.panningDelayLineR;\n                    panningDelayPos[effectIndex] = effectState.panningDelayPos & panningMask;\n                    panningVolumeL[effectIndex]      = +effectState.panningVolumeL;\n                    panningVolumeR[effectIndex]      = +effectState.panningVolumeR;\n                    panningVolumeDeltaL[effectIndex] = +effectState.panningVolumeDeltaL;\n                    panningVolumeDeltaR[effectIndex] = +effectState.panningVolumeDeltaR;\n                    panningOffsetL[effectIndex]      = +effectState.panningOffsetL;\n                    panningOffsetR[effectIndex]      = +effectState.panningOffsetR;\n                    panningOffsetDeltaL[effectIndex] = 1.0 - effectState.panningOffsetDeltaL;\n                    panningOffsetDeltaR[effectIndex] = 1.0 - effectState.panningOffsetDeltaR;`\n                }\n                else if (usesFlanger && effectState.type == EffectType.flanger) {\n                    effectsSource += `\n\n                    flangerDelayLineL[effectIndex] = effectState.flangerDelayLineL;\n                    flangerDelayLineR[effectIndex] = effectState.flangerDelayLineR;\n                    flangerDelayPos[effectIndex] = effectState.flangerDelayPos & flangerMask;\n\n                    flanger[effectIndex] = effectState.flanger;\n                    flangerDelta[effectIndex] = effectState.flangerDelta;\n                    flangerSpeed[effectIndex] = effectState.flangerSpeed;\n                    flangerSpeedDelta[effectIndex] = effectState.flangerSpeedDelta;\n                    flangerDepth[effectIndex] = effectState.flangerDepth;\n                    flangerDepthDelta[effectIndex] = effectState.flangerDepthDelta;\n                    flangerFeedback[effectIndex] = effectState.flangerFeedback;\n                    flangerFeedbackDelta[effectIndex] = effectState.flangerFeedbackDelta;\n\n                    flangerPhase[effectIndex] = effectState.flangerPhase % (Math.PI * 2.0);\n                    flangerRange[effectIndex] = flangerDepth[effectIndex];\n\n                    flangerTapIndexL[effectIndex] = flangerDelayPos[effectIndex] - flangerRange[effectIndex] - flangerRange[effectIndex] * Math.cos(flangerPhase[effectIndex]);\n                    flangerTapIndexR[effectIndex] = flangerDelayPos[effectIndex] - flangerRange[effectIndex] - flangerRange[effectIndex] * Math.sin(flangerPhase[effectIndex]);\n                    flangerPhase[effectIndex] += flangerSpeed[effectIndex] * Config.flangerPeriodMult * runLength;\n                    flangerTapEndL[effectIndex] = flangerDelayPos[effectIndex] - flangerRange[effectIndex] - flangerRange[effectIndex] * Math.cos(flangerPhase[effectIndex]) + runLength;\n                    flangerTapEndR[effectIndex] = flangerDelayPos[effectIndex] - flangerRange[effectIndex] - flangerRange[effectIndex] * Math.sin(flangerPhase[effectIndex]) + runLength;\n                    flangerTapDeltaL[effectIndex] = (flangerTapEndL[effectIndex] - flangerTapIndexL[effectIndex]) / runLength;\n                    flangerTapDeltaR[effectIndex] = (flangerTapEndR[effectIndex] - flangerTapIndexR[effectIndex]) / runLength;`\n                }\n                else if (usesChorus && effectState.type == EffectType.chorus) {\n                    effectsSource += `\n\n                    chorusDelayLineL[effectIndex] = effectState.chorusDelayLineL;\n                    chorusDelayLineR[effectIndex] = effectState.chorusDelayLineR;\n                    effectState.chorusDelayLineDirty = true;\n                    chorusDelayPos[effectIndex] = effectState.chorusDelayPos & chorusMask;\n\n                    chorusVoiceMult[effectIndex] = +effectState.chorusVoiceMult;\n                    chorusVoiceMultDelta[effectIndex] = +effectState.chorusVoiceMultDelta;\n                    chorusCombinedMult[effectIndex] = +effectState.chorusCombinedMult;\n                    chorusCombinedMultDelta[effectIndex] = +effectState.chorusCombinedMultDelta;\n\n                    chorusPhase[effectIndex] = effectState.chorusPhase % (Math.PI * 2.0);\n                    chorusTap0Index[effectIndex] = chorusDelayPos[effectIndex] + chorusOffset0 - chorusRange * Math.sin(chorusPhase[effectIndex] + Config.chorusPhaseOffsets[0][0]);\n                    chorusTap1Index[effectIndex] = chorusDelayPos[effectIndex] + chorusOffset1 - chorusRange * Math.sin(chorusPhase[effectIndex] + Config.chorusPhaseOffsets[0][1]);\n                    chorusTap2Index[effectIndex] = chorusDelayPos[effectIndex] + chorusOffset2 - chorusRange * Math.sin(chorusPhase[effectIndex] + Config.chorusPhaseOffsets[0][2]);\n                    chorusTap3Index[effectIndex] = chorusDelayPos[effectIndex] + chorusOffset3 - chorusRange * Math.sin(chorusPhase[effectIndex] + Config.chorusPhaseOffsets[1][0]);\n                    chorusTap4Index[effectIndex] = chorusDelayPos[effectIndex] + chorusOffset4 - chorusRange * Math.sin(chorusPhase[effectIndex] + Config.chorusPhaseOffsets[1][1]);\n                    chorusTap5Index[effectIndex] = chorusDelayPos[effectIndex] + chorusOffset5 - chorusRange * Math.sin(chorusPhase[effectIndex] + Config.chorusPhaseOffsets[1][2]);\n                    chorusPhase[effectIndex] += chorusAngle * runLength;\n                    chorusTap0End[effectIndex] = chorusDelayPos[effectIndex] + chorusOffset0 - chorusRange * Math.sin(chorusPhase[effectIndex] + Config.chorusPhaseOffsets[0][0]) + runLength;\n                    chorusTap1End[effectIndex] = chorusDelayPos[effectIndex] + chorusOffset1 - chorusRange * Math.sin(chorusPhase[effectIndex] + Config.chorusPhaseOffsets[0][1]) + runLength;\n                    chorusTap2End[effectIndex] = chorusDelayPos[effectIndex] + chorusOffset2 - chorusRange * Math.sin(chorusPhase[effectIndex] + Config.chorusPhaseOffsets[0][2]) + runLength;\n                    chorusTap3End[effectIndex] = chorusDelayPos[effectIndex] + chorusOffset3 - chorusRange * Math.sin(chorusPhase[effectIndex] + Config.chorusPhaseOffsets[1][0]) + runLength;\n                    chorusTap4End[effectIndex] = chorusDelayPos[effectIndex] + chorusOffset4 - chorusRange * Math.sin(chorusPhase[effectIndex] + Config.chorusPhaseOffsets[1][1]) + runLength;\n                    chorusTap5End[effectIndex] = chorusDelayPos[effectIndex] + chorusOffset5 - chorusRange * Math.sin(chorusPhase[effectIndex] + Config.chorusPhaseOffsets[1][2]) + runLength;\n                    chorusTap0Delta[effectIndex] = (chorusTap0End[effectIndex] - chorusTap0Index[effectIndex]) / runLength;\n                    chorusTap1Delta[effectIndex] = (chorusTap1End[effectIndex] - chorusTap1Index[effectIndex]) / runLength;\n                    chorusTap2Delta[effectIndex] = (chorusTap2End[effectIndex] - chorusTap2Index[effectIndex]) / runLength;\n                    chorusTap3Delta[effectIndex] = (chorusTap3End[effectIndex] - chorusTap3Index[effectIndex]) / runLength;\n                    chorusTap4Delta[effectIndex] = (chorusTap4End[effectIndex] - chorusTap4Index[effectIndex]) / runLength;\n                    chorusTap5Delta[effectIndex] = (chorusTap5End[effectIndex] - chorusTap5Index[effectIndex]) / runLength;`\n                }\n                else if (usesEcho && effectState.type == EffectType.echo) {\n                    effectsSource += `\n                    echoMult[effectIndex] = +effectState.echoMult;\n                    echoMultDelta[effectIndex] = +effectState.echoMultDelta;\n\n                    echoDelayLineL[effectIndex] = effectState.echoDelayLineL;\n                    echoDelayLineR[effectIndex] = effectState.echoDelayLineR;\n                    echoMask[effectIndex] = (echoDelayLineL[effectIndex].length - 1) >>> 0;\n                    effectState.echoDelayLineDirty = true;\n\n                    echoDelayPosL[effectIndex] = effectState.echoDelayPosL & echoMask[effectIndex];\n                    echoDelayPosR[effectIndex] = effectState.echoDelayPosR & echoMask[effectIndex];\n                    echoDelayOffsetStart[effectIndex] = (echoDelayLineL[effectIndex].length - effectState.echoDelayOffsetStart) & echoMask[effectIndex];\n                    echoDelayOffsetEnd[effectIndex]   = (echoDelayLineL[effectIndex].length - effectState.echoDelayOffsetEnd) & echoMask[effectIndex];\n                    echoDelayOffsetRatio[effectIndex] = +effectState.echoDelayOffsetRatio;\n                    echoDelayOffsetRatioDelta[effectIndex] = +effectState.echoDelayOffsetRatioDelta;\n                    echoPingPong[effectIndex] = effectState.echoPingPong;\n\n                    echoShelfA1[effectIndex] = +effectState.echoShelfA1;\n                    echoShelfB0[effectIndex] = +effectState.echoShelfB0;\n                    echoShelfB1[effectIndex] = +effectState.echoShelfB1;\n                    echoShelfSampleL[effectIndex] = +effectState.echoShelfSampleL;\n                    echoShelfSampleR[effectIndex] = +effectState.echoShelfSampleR;\n                    echoShelfPrevInputL[effectIndex] = +effectState.echoShelfPrevInputL;\n                    echoShelfPrevInputR[effectIndex] = +effectState.echoShelfPrevInputR;`\n                }\n                else if (usesReverb && effectState.type == EffectType.reverb) {\n                    effectsSource += `\n\n                    reverbDelayLine[effectIndex] = effectState.reverbDelayLine;\n                    effectState.reverbDelayLineDirty = true;\n                    reverbDelayPos[effectIndex] = effectState.reverbDelayPos & reverbMask;\n\n                    reverb[effectIndex] = +effectState.reverbMult;\n                    reverbDelta[effectIndex] = +effectState.reverbMultDelta;\n\n                    reverbShelfA1[effectIndex] = +effectState.reverbShelfA1;\n                    reverbShelfB0[effectIndex] = +effectState.reverbShelfB0;\n                    reverbShelfB1[effectIndex] = +effectState.reverbShelfB1;\n                    reverbShelfSample0[effectIndex] = +effectState.reverbShelfSample0;\n                    reverbShelfSample1[effectIndex] = +effectState.reverbShelfSample1;\n                    reverbShelfSample2[effectIndex] = +effectState.reverbShelfSample2;\n                    reverbShelfSample3[effectIndex] = +effectState.reverbShelfSample3;\n                    reverbShelfPrevInput0[effectIndex] = +effectState.reverbShelfPrevInput0;\n                    reverbShelfPrevInput1[effectIndex] = +effectState.reverbShelfPrevInput1;\n                    reverbShelfPrevInput2[effectIndex] = +effectState.reverbShelfPrevInput2;\n                    reverbShelfPrevInput3[effectIndex] = +effectState.reverbShelfPrevInput3;`\n                }\n                else if (usesGain && effectState.type == EffectType.gain) {\n                    effectsSource += `\n\n                    gain[effectIndex] = +effectState.gain;\n                    gainDelta[effectIndex] = +effectState.gainDelta;`\n                }\n            }\n\n\t\t\tif (isStereo) {\n                effectsSource += `\n\n                const stopIndex = bufferIndex + runLength;\n                for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n                    let sample = 0.0;\n                    let sampleL = tempInstrumentSampleBufferL[sampleIndex];\n                    let sampleR = tempInstrumentSampleBufferR[sampleIndex];\n                    tempInstrumentSampleBufferL[sampleIndex] = 0.0;\n                    tempInstrumentSampleBufferR[sampleIndex] = 0.0;`\n            } else {\n                effectsSource += `\n\n                const stopIndex = bufferIndex + runLength;\n                for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n                    let sampleL = tempInstrumentSampleBufferL[sampleIndex];\n                    let sampleR = tempInstrumentSampleBufferL[sampleIndex];\n                    tempInstrumentSampleBufferL[sampleIndex] = 0.0;\n                    tempInstrumentSampleBufferR[sampleIndex] = 0.0;`\n\t\t\t}\n\n\t\t\tfor (let i: number = 0; i < instrumentState.effects.length; i++) {\n                let effectState: EffectState = instrumentState.effects[i] as EffectState\n\n                effectsSource += `\n\n                effectIndex = ` + i + `;\n                `\n\n                if (usesBitcrusher && effectState.type == EffectType.bitcrusher) {\n                    effectsSource += `\n\n                    bitcrusherPhase[effectIndex] += bitcrusherPhaseDelta[effectIndex];\n                    if (bitcrusherPhase[effectIndex] < 1.0) {\n                        bitcrusherPrevInputL[effectIndex] = sampleL;\n                        bitcrusherPrevInputR[effectIndex] = sampleR;\n                        sampleL = bitcrusherCurrentOutputL[effectIndex];\n                        sampleR = bitcrusherCurrentOutputR[effectIndex];\n                    } else {\n                        bitcrusherPhase[effectIndex] = bitcrusherPhase[effectIndex] % 1.0;\n\n                        lerpedInputL[effectIndex] = sampleL + (bitcrusherPrevInputL[effectIndex] - sampleL) * (bitcrusherPhase[effectIndex] / bitcrusherPhaseDelta[effectIndex]);\n                        lerpedInputR[effectIndex] = sampleR + (bitcrusherPrevInputR[effectIndex] - sampleR) * (bitcrusherPhase[effectIndex] / bitcrusherPhaseDelta[effectIndex]);\n                        bitcrusherPrevInputL[effectIndex] = sampleL;\n                        bitcrusherPrevInputR[effectIndex] = sampleR;\n\n                        bitcrusherWrapLevel[effectIndex] = bitcrusherFoldLevel[effectIndex] * 4.0;\n                        wrappedSampleL[effectIndex] = (((lerpedInputL[effectIndex] + bitcrusherFoldLevel[effectIndex]) % bitcrusherWrapLevel[effectIndex]) + bitcrusherWrapLevel[effectIndex]) % bitcrusherWrapLevel[effectIndex];\n                        wrappedSampleR[effectIndex] = (((lerpedInputR[effectIndex] + bitcrusherFoldLevel[effectIndex]) % bitcrusherWrapLevel[effectIndex]) + bitcrusherWrapLevel[effectIndex]) % bitcrusherWrapLevel[effectIndex];\n                        foldedSampleL[effectIndex] = bitcrusherFoldLevel[effectIndex] - Math.abs(bitcrusherFoldLevel[effectIndex] * 2.0 - wrappedSampleL[effectIndex]);\n                        foldedSampleR[effectIndex] = bitcrusherFoldLevel[effectIndex] - Math.abs(bitcrusherFoldLevel[effectIndex] * 2.0 - wrappedSampleR[effectIndex]);\n                        scaledSampleL[effectIndex] = foldedSampleL[effectIndex] / bitcrusherScale[effectIndex];\n                        scaledSampleR[effectIndex] = foldedSampleR[effectIndex] / bitcrusherScale[effectIndex];\n                        oldValueL[effectIndex] = bitcrusherCurrentOutputL[effectIndex];\n                        oldValueR[effectIndex] = bitcrusherCurrentOutputR[effectIndex];\n                        newValueL[effectIndex] = (((scaledSampleL[effectIndex] > 0 ? scaledSampleL[effectIndex] + 1 : scaledSampleL[effectIndex])|0)-.5) * bitcrusherScale[effectIndex];\n                        newValueR[effectIndex] = (((scaledSampleR[effectIndex] > 0 ? scaledSampleR[effectIndex] + 1 : scaledSampleR[effectIndex])|0)-.5) * bitcrusherScale[effectIndex];\n\n                        sampleL = oldValueL[effectIndex] + (newValueL[effectIndex] - oldValueL[effectIndex]) * (bitcrusherPhase[effectIndex] / bitcrusherPhaseDelta[effectIndex]);\n                        sampleR = oldValueR[effectIndex] + (newValueR[effectIndex] - oldValueR[effectIndex]) * (bitcrusherPhase[effectIndex] / bitcrusherPhaseDelta[effectIndex]);\n                        bitcrusherCurrentOutputL[effectIndex] = newValueL[effectIndex];\n                        bitcrusherCurrentOutputR[effectIndex] = newValueR[effectIndex];\n                    }\n                    bitcrusherPhaseDelta[effectIndex] *= bitcrusherPhaseDeltaScale[effectIndex];\n                    bitcrusherScale[effectIndex] *= bitcrusherScaleScale[effectIndex];\n                    bitcrusherFoldLevel[effectIndex] *= bitcrusherFoldLevelScale[effectIndex];`\n                }\n                else if (usesDistortion && effectState.type == EffectType.distortion) {\n                    effectsSource += `\n\n                    distortionNextInputL[effectIndex] = sampleL * distortionDrive[effectIndex];\n                    distortionNextInputR[effectIndex] = sampleR * distortionDrive[effectIndex];\n                    sampleL = distortionNextOutputL[effectIndex];\n                    sampleR = distortionNextOutputR[effectIndex];\n                    distortionNextOutputL[effectIndex] = distortionNextInputL[effectIndex] / (distortionReverse[effectIndex] * Math.abs(distortionNextInputL[effectIndex]) + distortion[effectIndex]);\n                    distortionNextOutputR[effectIndex] = distortionNextInputR[effectIndex] / (distortionReverse[effectIndex] * Math.abs(distortionNextInputR[effectIndex]) + distortion[effectIndex]);\n                    distortionFractionalInputL1[effectIndex] = distortionFractionalDelayG1 * distortionNextInputL[effectIndex] + distortionPrevInputL[effectIndex] - distortionFractionalDelayG1 * distortionFractionalInputL1[effectIndex];\n                    distortionFractionalInputL2[effectIndex] = distortionFractionalDelayG2 * distortionNextInputL[effectIndex] + distortionPrevInputL[effectIndex] - distortionFractionalDelayG2 * distortionFractionalInputL2[effectIndex];\n                    distortionFractionalInputL3[effectIndex] = distortionFractionalDelayG3 * distortionNextInputL[effectIndex] + distortionPrevInputL[effectIndex] - distortionFractionalDelayG3 * distortionFractionalInputL3[effectIndex];\n                    distortionFractionalInputR1[effectIndex] = distortionFractionalDelayG1 * distortionNextInputR[effectIndex] + distortionPrevInputR[effectIndex] - distortionFractionalDelayG1 * distortionFractionalInputR1[effectIndex];\n                    distortionFractionalInputR2[effectIndex] = distortionFractionalDelayG2 * distortionNextInputR[effectIndex] + distortionPrevInputR[effectIndex] - distortionFractionalDelayG2 * distortionFractionalInputR2[effectIndex];\n                    distortionFractionalInputR3[effectIndex] = distortionFractionalDelayG3 * distortionNextInputR[effectIndex] + distortionPrevInputR[effectIndex] - distortionFractionalDelayG3 * distortionFractionalInputR3[effectIndex];\n                    distortionOutputL1[effectIndex] = distortionFractionalInputL1[effectIndex] / (distortionReverse[effectIndex] * Math.abs(distortionFractionalInputL1[effectIndex]) + distortion[effectIndex]);\n                    distortionOutputL2[effectIndex] = distortionFractionalInputL2[effectIndex] / (distortionReverse[effectIndex] * Math.abs(distortionFractionalInputL2[effectIndex]) + distortion[effectIndex]);\n                    distortionOutputL3[effectIndex] = distortionFractionalInputL3[effectIndex] / (distortionReverse[effectIndex] * Math.abs(distortionFractionalInputL3[effectIndex]) + distortion[effectIndex]);\n                    distortionOutputR1[effectIndex] = distortionFractionalInputR1[effectIndex] / (distortionReverse[effectIndex] * Math.abs(distortionFractionalInputR1[effectIndex]) + distortion[effectIndex]);\n                    distortionOutputR2[effectIndex] = distortionFractionalInputR2[effectIndex] / (distortionReverse[effectIndex] * Math.abs(distortionFractionalInputR2[effectIndex]) + distortion[effectIndex]);\n                    distortionOutputR3[effectIndex] = distortionFractionalInputR3[effectIndex] / (distortionReverse[effectIndex] * Math.abs(distortionFractionalInputR3[effectIndex]) + distortion[effectIndex]);\n                    distortionNextOutputL[effectIndex] += distortionOutputL1[effectIndex] * distortionNextOutputWeight1 + distortionOutputL2[effectIndex] * distortionNextOutputWeight2 + distortionOutputL3[effectIndex] * distortionNextOutputWeight3;\n                    distortionNextOutputR[effectIndex] += distortionOutputR1[effectIndex] * distortionNextOutputWeight1 + distortionOutputR2[effectIndex] * distortionNextOutputWeight2 + distortionOutputR3[effectIndex] * distortionNextOutputWeight3;\n                    sampleL += distortionOutputL1[effectIndex] * distortionPrevOutputWeight1 + distortionOutputL2[effectIndex] * distortionPrevOutputWeight2 + distortionOutputL3[effectIndex] * distortionPrevOutputWeight3;\n                    sampleR += distortionOutputR1[effectIndex] * distortionPrevOutputWeight1 + distortionOutputR2[effectIndex] * distortionPrevOutputWeight2 + distortionOutputR3[effectIndex] * distortionPrevOutputWeight3;\n                    sampleL *= distortionOversampleCompensation;\n                    sampleR *= distortionOversampleCompensation;\n                    distortionPrevInputL[effectIndex] = distortionNextInputL[effectIndex];\n                    distortionPrevInputR[effectIndex] = distortionNextInputR[effectIndex];\n                    distortion[effectIndex] += distortionDelta[effectIndex];\n                    distortionDrive[effectIndex] += distortionDriveDelta[effectIndex];`\n                }\n                else if (usesGain && effectState.type == EffectType.gain) {\n                    effectsSource += `\n\n                    sampleL *= gain[effectIndex];\n                    sampleR *= gain[effectIndex];\n                    `\n                }\n                else if (usesPanning && effectState.type == EffectType.panning) {\n                    effectsSource += `\n\n                    panningDelayLineL[effectIndex][panningDelayPos[effectIndex]] = sampleL;\n                    panningDelayLineR[effectIndex][panningDelayPos[effectIndex]] = sampleR;\n                    panningRatioL[effectIndex]  = panningOffsetL[effectIndex] % 1;\n                    panningRatioR[effectIndex]  = panningOffsetR[effectIndex] % 1;\n                    panningTapLA[effectIndex]   = panningDelayLineL[effectIndex][(panningOffsetL[effectIndex]) & panningMask];\n                    panningTapLB[effectIndex]   = panningDelayLineL[effectIndex][(panningOffsetL[effectIndex] + 1) & panningMask];\n                    panningTapRA[effectIndex]   = panningDelayLineR[effectIndex][(panningOffsetR[effectIndex]) & panningMask];\n                    panningTapRB[effectIndex]   = panningDelayLineR[effectIndex][(panningOffsetR[effectIndex] + 1) & panningMask];\n                    panningTapL[effectIndex]    = panningTapLA[effectIndex] + (panningTapLB[effectIndex] - panningTapLA[effectIndex]) * panningRatioL[effectIndex];\n                    panningTapR[effectIndex]    = panningTapRA[effectIndex] + (panningTapRB[effectIndex] - panningTapRA[effectIndex]) * panningRatioR[effectIndex];\n                    `\n                    if (effectState.panningMode == 0) {\n                        effectsSource += `\n\n                    sampleL = panningTapL[effectIndex] * panningVolumeL[effectIndex];\n                    sampleR = panningTapR[effectIndex] * panningVolumeR[effectIndex];\n                    panningDelayPos[effectIndex] = (panningDelayPos[effectIndex] + 1) & panningMask;\n                    panningVolumeL[effectIndex] += panningVolumeDeltaL[effectIndex];\n                    panningVolumeR[effectIndex] += panningVolumeDeltaR[effectIndex];\n                    panningOffsetL[effectIndex] += panningOffsetDeltaL[effectIndex];\n                    panningOffsetR[effectIndex] += panningOffsetDeltaR[effectIndex];`\n                    }\n                    else if (effectState.panningMode == 1) {\n                        effectsSource += `\n\n                    sampleL = panningTapL[effectIndex] * panningVolumeL[effectIndex] + Math.max(0, panningVolumeL[effectIndex] - panningVolumeR[effectIndex]) * panningTapR[effectIndex];\n                    sampleR = panningTapR[effectIndex] * panningVolumeR[effectIndex] + Math.max(0, panningVolumeR[effectIndex] - panningVolumeL[effectIndex]) * panningTapL[effectIndex];\n                    panningDelayPos[effectIndex] = (panningDelayPos[effectIndex] + 1) & panningMask;\n                    panningVolumeL[effectIndex] += panningVolumeDeltaL[effectIndex];\n                    panningVolumeR[effectIndex] += panningVolumeDeltaR[effectIndex];\n                    panningOffsetL[effectIndex] += panningOffsetDeltaL[effectIndex];\n                    panningOffsetR[effectIndex] += panningOffsetDeltaR[effectIndex];`\n                    }\n                    else if (effectState.panningMode == 2) {\n                        effectsSource += `\n\n                    sampleL = (panningTapL[effectIndex] + panningTapR[effectIndex]) / 2.0\n                    sampleR = sampleL\n                    sampleL *= panningVolumeL[effectIndex];\n                    sampleR *= panningVolumeR[effectIndex];\n                    panningDelayPos[effectIndex] = (panningDelayPos[effectIndex] + 1) & panningMask;\n                    panningVolumeL[effectIndex] += panningVolumeDeltaL[effectIndex];\n                    panningVolumeR[effectIndex] += panningVolumeDeltaR[effectIndex];\n                    panningOffsetL[effectIndex] += panningOffsetDeltaL[effectIndex];\n                    panningOffsetR[effectIndex] += panningOffsetDeltaR[effectIndex];`\n                    }\n                }\n                else if (usesFlanger && effectState.type == EffectType.flanger) {\n                    effectsSource += `\n\n                    flangerTapRatioL[effectIndex] = flangerTapIndexL[effectIndex] % 1;\n                    flangerTapRatioR[effectIndex] = flangerTapIndexR[effectIndex] % 1;\n                    flangerTapLA[effectIndex] = flangerDelayLineL[effectIndex][(flangerTapIndexL[effectIndex]) & flangerMask];\n                    flangerTapLB[effectIndex] = flangerDelayLineL[effectIndex][(flangerTapIndexL[effectIndex] + 1) & flangerMask];\n                    flangerTapRA[effectIndex] = flangerDelayLineR[effectIndex][(flangerTapIndexR[effectIndex]) & flangerMask];\n                    flangerTapRB[effectIndex] = flangerDelayLineR[effectIndex][(flangerTapIndexR[effectIndex] + 1) & flangerMask];\n                    flangerTapL[effectIndex] = flangerTapLA[effectIndex] + (flangerTapLB[effectIndex] - flangerTapLA[effectIndex]) * flangerTapRatioL[effectIndex];\n                    flangerTapR[effectIndex] = flangerTapRA[effectIndex] + (flangerTapRB[effectIndex] - flangerTapRA[effectIndex]) * flangerTapRatioR[effectIndex];\n\n                    flangerDelayLineL[effectIndex][flangerDelayPos[effectIndex]] = sampleL * delayInputMult;\n                    flangerDelayLineR[effectIndex][flangerDelayPos[effectIndex]] = sampleR * delayInputMult;\n                    sampleL = (sampleL + flanger[effectIndex] * flangerTapL[effectIndex]) * (1 - flanger[effectIndex] * Config.flangerVolumeMult);\n                    sampleR = (sampleR + flanger[effectIndex] * flangerTapR[effectIndex]) * (1 - flanger[effectIndex] * Config.flangerVolumeMult);\n                    flangerDelayLineL[effectIndex][flangerDelayPos[effectIndex]] = flangerDelayLineL[effectIndex][flangerDelayPos[effectIndex]] * (1 - flangerFeedback[effectIndex]) - sampleL * flangerFeedback[effectIndex];\n                    flangerDelayLineR[effectIndex][flangerDelayPos[effectIndex]] = flangerDelayLineR[effectIndex][flangerDelayPos[effectIndex]] * (1 - flangerFeedback[effectIndex]) - sampleR * flangerFeedback[effectIndex];\n                    flangerDelayPos[effectIndex] = (flangerDelayPos[effectIndex] + 1) & flangerMask;\n                    flangerTapIndexL[effectIndex] += flangerTapDeltaL[effectIndex];\n                    flangerTapIndexR[effectIndex] += flangerTapDeltaR[effectIndex];\n\n                    flanger[effectIndex] += flangerDelta[effectIndex];\n                    flangerSpeed[effectIndex] += flangerSpeedDelta[effectIndex];\n                    flangerDepth[effectIndex] += flangerDepthDelta[effectIndex];\n                    flangerFeedback[effectIndex] += flangerFeedbackDelta[effectIndex];`\n                }\n                else if (usesChorus && effectState.type == EffectType.chorus) {\n                    effectsSource += `\n\n                    chorusTap0Ratio[effectIndex] = chorusTap0Index[effectIndex] % 1;\n                    chorusTap1Ratio[effectIndex] = chorusTap1Index[effectIndex] % 1;\n                    chorusTap2Ratio[effectIndex] = chorusTap2Index[effectIndex] % 1;\n                    chorusTap3Ratio[effectIndex] = chorusTap3Index[effectIndex] % 1;\n                    chorusTap4Ratio[effectIndex] = chorusTap4Index[effectIndex] % 1;\n                    chorusTap5Ratio[effectIndex] = chorusTap5Index[effectIndex] % 1;\n                    chorusTap0A[effectIndex] = chorusDelayLineL[effectIndex][(chorusTap0Index[effectIndex]) & chorusMask];\n                    chorusTap0B[effectIndex] = chorusDelayLineL[effectIndex][(chorusTap0Index[effectIndex] + 1) & chorusMask];\n                    chorusTap1A[effectIndex] = chorusDelayLineL[effectIndex][(chorusTap1Index[effectIndex]) & chorusMask];\n                    chorusTap1B[effectIndex] = chorusDelayLineL[effectIndex][(chorusTap1Index[effectIndex] + 1) & chorusMask];\n                    chorusTap2A[effectIndex] = chorusDelayLineL[effectIndex][(chorusTap2Index[effectIndex]) & chorusMask];\n                    chorusTap2B[effectIndex] = chorusDelayLineL[effectIndex][(chorusTap2Index[effectIndex] + 1) & chorusMask];\n                    chorusTap3A[effectIndex] = chorusDelayLineR[effectIndex][(chorusTap3Index[effectIndex]) & chorusMask];\n                    chorusTap3B[effectIndex] = chorusDelayLineR[effectIndex][(chorusTap3Index[effectIndex] + 1) & chorusMask];\n                    chorusTap4A[effectIndex] = chorusDelayLineR[effectIndex][(chorusTap4Index[effectIndex]) & chorusMask];\n                    chorusTap4B[effectIndex] = chorusDelayLineR[effectIndex][(chorusTap4Index[effectIndex] + 1) & chorusMask];\n                    chorusTap5A[effectIndex] = chorusDelayLineR[effectIndex][(chorusTap5Index[effectIndex]) & chorusMask];\n                    chorusTap5B[effectIndex] = chorusDelayLineR[effectIndex][(chorusTap5Index[effectIndex] + 1) & chorusMask];\n                    chorusTap0[effectIndex] = chorusTap0A[effectIndex] + (chorusTap0B[effectIndex] - chorusTap0A[effectIndex]) * chorusTap0Ratio[effectIndex];\n                    chorusTap1[effectIndex] = chorusTap1A[effectIndex] + (chorusTap1B[effectIndex] - chorusTap1A[effectIndex]) * chorusTap1Ratio[effectIndex];\n                    chorusTap2[effectIndex] = chorusTap2A[effectIndex] + (chorusTap2B[effectIndex] - chorusTap2A[effectIndex]) * chorusTap2Ratio[effectIndex];\n                    chorusTap3[effectIndex] = chorusTap3A[effectIndex] + (chorusTap3B[effectIndex] - chorusTap3A[effectIndex]) * chorusTap3Ratio[effectIndex];\n                    chorusTap4[effectIndex] = chorusTap4A[effectIndex] + (chorusTap4B[effectIndex] - chorusTap4A[effectIndex]) * chorusTap4Ratio[effectIndex];\n                    chorusTap5[effectIndex] = chorusTap5A[effectIndex] + (chorusTap5B[effectIndex] - chorusTap5A[effectIndex]) * chorusTap5Ratio[effectIndex];\n                    chorusDelayLineL[effectIndex][chorusDelayPos[effectIndex]] = sampleL * delayInputMult;\n                    chorusDelayLineR[effectIndex][chorusDelayPos[effectIndex]] = sampleR * delayInputMult;\n                    sampleL = chorusCombinedMult[effectIndex] * (sampleL + chorusVoiceMult[effectIndex] * (chorusTap1[effectIndex] - chorusTap0[effectIndex] - chorusTap2[effectIndex]));\n                    sampleR = chorusCombinedMult[effectIndex] * (sampleR + chorusVoiceMult[effectIndex] * (chorusTap4[effectIndex] - chorusTap3[effectIndex] - chorusTap5[effectIndex]));\n                    chorusDelayPos[effectIndex] = (chorusDelayPos[effectIndex] + 1) & chorusMask;\n                    chorusTap0Index[effectIndex] += chorusTap0Delta[effectIndex];\n                    chorusTap1Index[effectIndex] += chorusTap1Delta[effectIndex];\n                    chorusTap2Index[effectIndex] += chorusTap2Delta[effectIndex];\n                    chorusTap3Index[effectIndex] += chorusTap3Delta[effectIndex];\n                    chorusTap4Index[effectIndex] += chorusTap4Delta[effectIndex];\n                    chorusTap5Index[effectIndex] += chorusTap5Delta[effectIndex];\n                    chorusVoiceMult[effectIndex] += chorusVoiceMultDelta[effectIndex];\n                    chorusCombinedMult[effectIndex] += chorusCombinedMultDelta[effectIndex];`\n                }\n                else if (usesEcho && effectState.type == EffectType.echo) {\n                    effectsSource += `\n\n                    echoNextInputL[effectIndex] = (sampleL + sampleR) / 2;\n                    echoNextInputR[effectIndex] = (sampleL + sampleR) / 2;\n                    echoTapStartIndexL[effectIndex] = (echoDelayPosL[effectIndex] + echoDelayOffsetStart[effectIndex]) & echoMask[effectIndex];\n                    echoTapStartIndexR[effectIndex] = (echoDelayPosR[effectIndex] + echoDelayOffsetStart[effectIndex]) & echoMask[effectIndex];\n                    echoTapEndIndexL[effectIndex]   = (echoDelayPosL[effectIndex] + echoDelayOffsetEnd[effectIndex]) & echoMask[effectIndex];\n                    echoTapEndIndexR[effectIndex]   = (echoDelayPosR[effectIndex] + echoDelayOffsetEnd[effectIndex]) & echoMask[effectIndex];\n                    echoTapStartL[effectIndex] = echoDelayLineL[effectIndex][echoTapStartIndexL[effectIndex]];\n                    echoTapEndL[effectIndex]   = echoDelayLineL[effectIndex][echoTapEndIndexL[effectIndex]];\n                    echoTapStartR[effectIndex] = echoDelayLineR[effectIndex][echoTapStartIndexR[effectIndex]];\n                    echoTapEndR[effectIndex]   = echoDelayLineR[effectIndex][echoTapEndIndexR[effectIndex]];\n                    echoTapL[effectIndex] = (echoTapStartL[effectIndex] + (echoTapEndL[effectIndex] - echoTapStartL[effectIndex]) * echoDelayOffsetRatio[effectIndex]) * echoMult[effectIndex];\n                    echoTapR[effectIndex] = (echoTapStartR[effectIndex] + (echoTapEndR[effectIndex] - echoTapStartR[effectIndex]) * echoDelayOffsetRatio[effectIndex]) * echoMult[effectIndex];\n\n                    echoShelfSampleL[effectIndex] = echoShelfB0[effectIndex] * echoTapL[effectIndex] + echoShelfB1[effectIndex] * echoShelfPrevInputL[effectIndex] - echoShelfA1[effectIndex] * echoShelfSampleL[effectIndex];\n                    echoShelfSampleR[effectIndex] = echoShelfB0[effectIndex] * echoTapR[effectIndex] + echoShelfB1[effectIndex] * echoShelfPrevInputR[effectIndex] - echoShelfA1[effectIndex] * echoShelfSampleR[effectIndex];\n                    echoShelfPrevInputL[effectIndex] = echoTapL[effectIndex];\n                    echoShelfPrevInputR[effectIndex] = echoTapR[effectIndex];\n                    sampleL += echoShelfSampleL[effectIndex];\n                    sampleR += echoShelfSampleR[effectIndex];\n\n                    echoDelayLineL[effectIndex][echoDelayPosL[effectIndex]] = (sampleL * (1 - Math.abs(echoPingPong[effectIndex])) + (echoNextInputL[effectIndex] * Math.max(0, echoPingPong[effectIndex]) + echoShelfSampleR[effectIndex]) * Math.abs(echoPingPong[effectIndex])) * delayInputMult;\n                    echoDelayLineR[effectIndex][echoDelayPosR[effectIndex]] = (sampleR * (1 - Math.abs(echoPingPong[effectIndex])) + (echoNextInputR[effectIndex] * Math.max(0, -echoPingPong[effectIndex]) + echoShelfSampleL[effectIndex]) * Math.abs(echoPingPong[effectIndex])) * delayInputMult;\n                    echoDelayPosL[effectIndex] = (echoDelayPosL[effectIndex] + 1) & echoMask[effectIndex];\n                    echoDelayPosR[effectIndex] = (echoDelayPosR[effectIndex] + 1) & echoMask[effectIndex];\n                    echoDelayOffsetRatio[effectIndex] += echoDelayOffsetRatioDelta[effectIndex];\n                    echoMult[effectIndex] += echoMultDelta[effectIndex];\n                    `\n                }\n                else if (usesReverb && effectState.type == EffectType.reverb) {\n                    effectsSource += `\n\n                    // Reverb, implemented using a feedback delay network with a Hadamard matrix and lowpass filters.\n                    // good ratios:    0.555235 + 0.618033 + 0.818 +   1.0 = 2.991268\n                    // Delay lengths:  3041     + 3385     + 4481  +  5477 = 16384 = 2^14\n                    // Buffer offsets: 3041    -> 6426   -> 10907 -> 16384\n                    reverbDelayPos1[effectIndex] = (reverbDelayPos[effectIndex] +  3041) & reverbMask;\n                    reverbDelayPos2[effectIndex] = (reverbDelayPos[effectIndex] +  6426) & reverbMask;\n                    reverbDelayPos3[effectIndex] = (reverbDelayPos[effectIndex] + 10907) & reverbMask;\n                    reverbSample0[effectIndex] = (reverbDelayLine[effectIndex][reverbDelayPos[effectIndex]]);\n                    reverbSample1[effectIndex] = reverbDelayLine[effectIndex][reverbDelayPos1[effectIndex]];\n                    reverbSample2[effectIndex] = reverbDelayLine[effectIndex][reverbDelayPos2[effectIndex]];\n                    reverbSample3[effectIndex] = reverbDelayLine[effectIndex][reverbDelayPos3[effectIndex]];\n                    reverbTemp0[effectIndex] = -(reverbSample0[effectIndex] + sampleL) + reverbSample1[effectIndex];\n                    reverbTemp1[effectIndex] = -(reverbSample0[effectIndex] + sampleR) - reverbSample1[effectIndex];\n                    reverbTemp2[effectIndex] = -reverbSample2[effectIndex] + reverbSample3[effectIndex];\n                    reverbTemp3[effectIndex] = -reverbSample2[effectIndex] - reverbSample3[effectIndex];\n                    reverbShelfInput0[effectIndex] = (reverbTemp0[effectIndex] + reverbTemp2[effectIndex]) * reverb[effectIndex];\n                    reverbShelfInput1[effectIndex] = (reverbTemp1[effectIndex] + reverbTemp3[effectIndex]) * reverb[effectIndex];\n                    reverbShelfInput2[effectIndex] = (reverbTemp0[effectIndex] - reverbTemp2[effectIndex]) * reverb[effectIndex];\n                    reverbShelfInput3[effectIndex] = (reverbTemp1[effectIndex] - reverbTemp3[effectIndex]) * reverb[effectIndex];\n                    reverbShelfSample0[effectIndex] = reverbShelfB0[effectIndex] * reverbShelfInput0[effectIndex] + reverbShelfB1[effectIndex] * reverbShelfPrevInput0[effectIndex] - reverbShelfA1[effectIndex] * reverbShelfSample0[effectIndex];\n                    reverbShelfSample1[effectIndex] = reverbShelfB0[effectIndex] * reverbShelfInput1[effectIndex] + reverbShelfB1[effectIndex] * reverbShelfPrevInput1[effectIndex] - reverbShelfA1[effectIndex] * reverbShelfSample1[effectIndex];\n                    reverbShelfSample2[effectIndex] = reverbShelfB0[effectIndex] * reverbShelfInput2[effectIndex] + reverbShelfB1[effectIndex] * reverbShelfPrevInput2[effectIndex] - reverbShelfA1[effectIndex] * reverbShelfSample2[effectIndex];\n                    reverbShelfSample3[effectIndex] = reverbShelfB0[effectIndex] * reverbShelfInput3[effectIndex] + reverbShelfB1[effectIndex] * reverbShelfPrevInput3[effectIndex] - reverbShelfA1[effectIndex] * reverbShelfSample3[effectIndex];\n                    reverbShelfPrevInput0[effectIndex] = reverbShelfInput0[effectIndex];\n                    reverbShelfPrevInput1[effectIndex] = reverbShelfInput1[effectIndex];\n                    reverbShelfPrevInput2[effectIndex] = reverbShelfInput2[effectIndex];\n                    reverbShelfPrevInput3[effectIndex] = reverbShelfInput3[effectIndex];\n                    reverbDelayLine[effectIndex][reverbDelayPos1[effectIndex]] = reverbShelfSample0[effectIndex] * delayInputMult;\n                    reverbDelayLine[effectIndex][reverbDelayPos2[effectIndex]] = reverbShelfSample1[effectIndex] * delayInputMult;\n                    reverbDelayLine[effectIndex][reverbDelayPos3[effectIndex]] = reverbShelfSample2[effectIndex] * delayInputMult;\n                    reverbDelayLine[effectIndex][reverbDelayPos[effectIndex] ] = reverbShelfSample3[effectIndex] * delayInputMult;\n                    reverbDelayPos[effectIndex] = (reverbDelayPos[effectIndex] + 1) & reverbMask;\n                    sampleL += reverbSample1[effectIndex] + reverbSample2[effectIndex] + reverbSample3[effectIndex];\n                    sampleR += reverbSample0[effectIndex] + reverbSample2[effectIndex] - reverbSample3[effectIndex];\n                    reverb[effectIndex] += reverbDelta[effectIndex];`\n                }\n                else if (usesEqFilter && effectState.type == EffectType.eqFilter) {\n                    effectsSource += `\n\n                    inputSampleL[effectIndex] = sampleL;\n                    inputSampleR[effectIndex] = sampleR;\n                    sampleL = applyFilters(inputSampleL[effectIndex], initialFilterInputL1[effectIndex], initialFilterInputL2[effectIndex], filterCount[effectIndex], filtersL[effectIndex]);\n                    sampleR = applyFilters(inputSampleR[effectIndex], initialFilterInputR1[effectIndex], initialFilterInputR2[effectIndex], filterCount[effectIndex], filtersR[effectIndex]);\n                    initialFilterInputL2[effectIndex] = initialFilterInputL1[effectIndex];\n                    initialFilterInputR2[effectIndex] = initialFilterInputR1[effectIndex];\n                    initialFilterInputL1[effectIndex] = inputSampleL[effectIndex];\n                    initialFilterInputR1[effectIndex] = inputSampleR[effectIndex];`\n\n                    effectsSource += `\n\n                    sampleL *= eqFilterVolume[effectIndex];\n                    sampleR *= eqFilterVolume[effectIndex];\n                    eqFilterVolume[effectIndex] += eqFilterVolumeDelta[effectIndex];`\n\t\t\t\t}\n\t\t\t\telse if (usesRingModulation && effectState.type == EffectType.ringModulation) {\n\t\t\t\t\teffectsSource += `\n\n\t\t\t\t\tringModOutputL[effectIndex] = sampleL * waveform[effectIndex][(ringModPhase[effectIndex]*waveformLength[effectIndex])|0];\n\t\t\t\t\tringModOutputR[effectIndex] = sampleR * waveform[effectIndex][(ringModPhase[effectIndex]*waveformLength[effectIndex])|0];\n\t\t\t\t\tringModMixF[effectIndex] = Math.max(0, ringModMix[effectIndex] * ringModMixFade[effectIndex]);\n\t\t\t\t\tsampleL = sampleL * (1 - ringModMixF[effectIndex]) + ringModOutputL[effectIndex] * ringModMixF[effectIndex];\n\t\t\t\t\tsampleR = sampleR * (1 - ringModMixF[effectIndex]) + ringModOutputR[effectIndex] * ringModMixF[effectIndex];\n\n\t\t\t\t\tringModMix[effectIndex] += ringModMixDelta[effectIndex];\n\t\t\t\t\tringModPhase[effectIndex] += ringModPhaseDelta[effectIndex];\n\t\t\t\t\tringModPhase[effectIndex] = ringModPhase[effectIndex] % 1.0;\n\t\t\t\t\tringModPhaseDelta[effectIndex] *= ringModPhaseDeltaScale[effectIndex];\n\t\t\t\t\tringModMixFade[effectIndex] += ringModMixFadeDelta[effectIndex];\n\t\t\t\t\t`\n\t\t\t\t}\n\t\t\t\telse if (usesGranular && effectState.type == EffectType.granular) {\n                    effectsSource += `\n                    granularOutputL[effectIndex] = 0;\n                    granularOutputR[effectIndex] = 0;\n                    for (let grainIndex = 0; grainIndex < granularGrainCount[effectIndex]; grainIndex++) {\n                        const grain = granularGrains[effectIndex][grainIndex];\n                        if(computeGrains[effectIndex]) {\n                            if(grain.delay > 0) {\n                                grain.delay--;\n                            } else {\n                                const grainDelayLinePosition = grain.delayLinePosition;\n                                const grainDelayLinePositionInt = grainDelayLinePosition | 0;\n                                let grainAgeInSamples = grain.ageInSamples;\n                                const grainMaxAgeInSamples = grain.maxAgeInSamples;\n                                let grainSampleL = granularDelayLineL[effectIndex][((granularDelayLineIndex[effectIndex] + (granularDelayLineLength[effectIndex] - grainDelayLinePositionInt))    ) & granularDelayLineMask];\n                                let grainSampleR = granularDelayLineR[effectIndex][((granularDelayLineIndex[effectIndex] + (granularDelayLineLength[effectIndex] - grainDelayLinePositionInt))    ) & granularDelayLineMask];\n                                `\n                                if (Config.granularEnvelopeType == GranularEnvelopeType.parabolic) {\n                                    effectsSource +=`\n                                    const grainEnvelope = grain.parabolicEnvelopeAmplitude;\n                                    `\n                                } else if (Config.granularEnvelopeType == GranularEnvelopeType.raisedCosineBell) {\n                                    effectsSource +=`\n                                    const grainEnvelope = grain.rcbEnvelopeAmplitude;\n                                    `\n                                }\n                                effectsSource +=`\n                                grainSampleL *= grainEnvelope;\n                                grainSampleR *= grainEnvelope;\n                                granularOutputL[effectIndex] += grainSampleL;\n                                granularOutputR[effectIndex] += grainSampleR;\n                                if (grainAgeInSamples > grainMaxAgeInSamples) {\n                                    if (granularGrainCount[effectIndex] > 0) {\n                                        // Faster equivalent of .pop, ignoring the order in the array.\n                                        const lastGrainIndex = granularGrainCount[effectIndex] - 1;\n                                        const lastGrain = granularGrains[effectIndex][lastGrainIndex];\n                                        granularGrains[effectIndex][grainIndex] = lastGrain;\n                                        granularGrains[effectIndex][lastGrainIndex] = grain;\n                                        granularGrainCount[effectIndex]--;\n                                        grainIndex--;\n                                        // ^ Dangerous, since this could end up causing an infinite loop,\n                                        // but should be okay in this case.\n                                    }\n                                } else {\n                                    grainAgeInSamples++;\n                                    `\n                                    if (Config.granularEnvelopeType == GranularEnvelopeType.parabolic) {\n                                        // grain.updateParabolicEnvelope();\n                                        // Inlined:\n                                        effectsSource +=`\n                                        grain.parabolicEnvelopeAmplitude += grain.parabolicEnvelopeSlope;\n                                        grain.parabolicEnvelopeSlope += grain.parabolicEnvelopeCurve;\n                                        `\n                                    } else if (Config.granularEnvelopeType == GranularEnvelopeType.raisedCosineBell) {\n                                        effectsSource +=`\n                                        grain.updateRCBEnvelope();\n                                        `\n                                    }\n                                    effectsSource +=`\n                                    grain.ageInSamples = grainAgeInSamples;\n                                }\n                            }\n                        }\n                    }\n                    granularWet[effectIndex] += granularMixDelta[effectIndex];\n                    granularDry[effectIndex] -= granularMixDelta[effectIndex];\n                    granularOutputL[effectIndex] *= Config.granularOutputLoudnessCompensation;\n                    granularOutputR[effectIndex] *= Config.granularOutputLoudnessCompensation;\n                    granularDelayLineL[effectIndex][granularDelayLineIndex[effectIndex]] = sampleL;\n                    granularDelayLineR[effectIndex][granularDelayLineIndex[effectIndex]] = sampleR;\n                    granularDelayLineIndex[effectIndex] = (granularDelayLineIndex[effectIndex] + 1) & granularDelayLineMask[effectIndex];\n                    sampleL = sampleL * granularDry[effectIndex] + granularOutputL[effectIndex] * granularWet[effectIndex];\n                    sampleR = sampleR * granularDry[effectIndex] + granularOutputR[effectIndex] * granularWet[effectIndex];\n                    `\n                }\n            }\n\n            effectsSource += `\n\n                    outputDataL[sampleIndex] += sampleL * mixVolume;\n                    outputDataR[sampleIndex] += sampleR * mixVolume;\n                    mixVolume += mixVolumeDelta;`\n\n            if (usesDelays) {\n                effectsSource += `\n\n                    delayInputMult += delayInputMultDelta;`\n            }\n\n            effectsSource += `\n                }\n\n                instrumentState.mixVolume = mixVolume;\n\n                // Avoid persistent denormal or NaN values in the delay buffers and filter history.\n                const epsilon = (1.0e-24);`\n\n            if (usesDelays) {\n                effectsSource += `\n\n                instrumentState.delayInputMult = delayInputMult;`\n            }\n\n            for (let i: number = 0; i < instrumentState.effects.length; i++) {\n                let effectState: EffectState = instrumentState.effects[i] as EffectState\n                effectsSource += `\n\n                effectState = instrumentState.effects[` + i + `];\n                effectIndex = ` + i + `;\n                `\n\n                if (usesGranular && effectState.type == EffectType.granular) {\n                    effectsSource += `\n                        effectState.granularMix = granularWet[effectIndex];\n                        effectState.granularGrainsLength = granularGrainCount[effectIndex];\n                        effectState.granularDelayLineIndex = granularDelayLineIndex[effectIndex];\n                    `\n                }\n                else if (usesDistortion && effectState.type == EffectType.distortion) {\n                    effectsSource += `\n\n                    effectState.distortion = distortion[effectIndex];\n                    effectState.distortionDrive = distortionDrive[effectIndex];\n\n                    if (!Number.isFinite(distortionFractionalInputL1[effectIndex]) || Math.abs(distortionFractionalInputL1[effectIndex]) < epsilon) distortionFractionalInputL1[effectIndex] = 0.0;\n                    if (!Number.isFinite(distortionFractionalInputL2[effectIndex]) || Math.abs(distortionFractionalInputL2[effectIndex]) < epsilon) distortionFractionalInputL2[effectIndex] = 0.0;\n                    if (!Number.isFinite(distortionFractionalInputL3[effectIndex]) || Math.abs(distortionFractionalInputL3[effectIndex]) < epsilon) distortionFractionalInputL3[effectIndex] = 0.0;\n                    if (!Number.isFinite(distortionFractionalInputR1[effectIndex]) || Math.abs(distortionFractionalInputR1[effectIndex]) < epsilon) distortionFractionalInputR1[effectIndex] = 0.0;\n                    if (!Number.isFinite(distortionFractionalInputR2[effectIndex]) || Math.abs(distortionFractionalInputR2[effectIndex]) < epsilon) distortionFractionalInputR2[effectIndex] = 0.0;\n                    if (!Number.isFinite(distortionFractionalInputR3[effectIndex]) || Math.abs(distortionFractionalInputR3[effectIndex]) < epsilon) distortionFractionalInputR3[effectIndex] = 0.0;\n                    if (!Number.isFinite(distortionPrevInputL[effectIndex]) || Math.abs(distortionPrevInputL[effectIndex]) < epsilon) distortionPrevInputL[effectIndex] = 0.0;\n                    if (!Number.isFinite(distortionPrevInputR[effectIndex]) || Math.abs(distortionPrevInputR[effectIndex]) < epsilon) distortionPrevInputR[effectIndex] = 0.0;\n                    if (!Number.isFinite(distortionNextOutputL[effectIndex]) || Math.abs(distortionNextOutputL[effectIndex]) < epsilon) distortionNextOutputL[effectIndex] = 0.0;\n                    if (!Number.isFinite(distortionNextOutputR[effectIndex]) || Math.abs(distortionNextOutputR[effectIndex]) < epsilon) distortionNextOutputR[effectIndex] = 0.0;\n\n                    effectState.distortionFractionalInputL1 = distortionFractionalInputL1[effectIndex];\n                    effectState.distortionFractionalInputL2 = distortionFractionalInputL2[effectIndex];\n                    effectState.distortionFractionalInputL3 = distortionFractionalInputL3[effectIndex];\n                    effectState.distortionFractionalInputR1 = distortionFractionalInputR1[effectIndex];\n                    effectState.distortionFractionalInputR2 = distortionFractionalInputR2[effectIndex];\n                    effectState.distortionFractionalInputR3 = distortionFractionalInputR3[effectIndex];\n                    effectState.distortionPrevInputL = distortionPrevInputL[effectIndex];\n                    effectState.distortionPrevInputR = distortionPrevInputR[effectIndex];\n                    effectState.distortionNextOutputL = distortionNextOutputL[effectIndex];\n                    effectState.distortionNextOutputR = distortionNextOutputR[effectIndex];`\n                }\n                else if (usesBitcrusher && effectState.type == EffectType.bitcrusher) {\n                    effectsSource += `\n\n                    if (Math.abs(bitcrusherPrevInputL[effectIndex]) < epsilon) bitcrusherPrevInputL[effectIndex] = 0.0;\n                    if (Math.abs(bitcrusherPrevInputR[effectIndex]) < epsilon) bitcrusherPrevInputR[effectIndex] = 0.0;\n                    if (Math.abs(bitcrusherCurrentOutputL[effectIndex]) < epsilon) bitcrusherCurrentOutputL[effectIndex] = 0.0;\n                    if (Math.abs(bitcrusherCurrentOutputR[effectIndex]) < epsilon) bitcrusherCurrentOutputR[effectIndex] = 0.0;\n                    effectState.bitcrusherPrevInputL = bitcrusherPrevInputL[effectIndex];\n                    effectState.bitcrusherPrevInputR = bitcrusherPrevInputR[effectIndex];\n                    effectState.bitcrusherCurrentOutputL = bitcrusherCurrentOutputL[effectIndex];\n                    effectState.bitcrusherCurrentOutputR = bitcrusherCurrentOutputR[effectIndex];\n                    effectState.bitcrusherPhase = bitcrusherPhase[effectIndex];\n                    effectState.bitcrusherPhaseDelta = bitcrusherPhaseDelta[effectIndex];\n                    effectState.bitcrusherScale = bitcrusherScale[effectIndex];\n                    effectState.bitcrusherFoldLevel = bitcrusherFoldLevel[effectIndex];`\n\n                }\n                else if (usesRingModulation && effectState.type == EffectType.ringModulation) {\n                    effectsSource += `\n                    effectState.ringModMix = ringModMix[effectIndex];\n                    effectState.ringModMixDelta = ringModMixDelta[effectIndex];\n                    effectState.ringModPhase = ringModPhase[effectIndex];\n                    effectState.ringModPhaseDelta = ringModPhaseDelta[effectIndex];\n                    effectState.ringModPhaseDeltaScale = ringModPhaseDeltaScale[effectIndex];\n                    effectState.ringModWaveformIndex = ringModWaveformIndex[effectIndex];\n                    effectState.ringModPulseWidth = ringModPulseWidth[effectIndex];\n                    effectState.ringModMixFade = ringModMixFade[effectIndex];\n                    `\n                }\n                else if (usesEqFilter && effectState.type == EffectType.eqFilter) {\n                    effectsSource += `\n\n                        synth.sanitizeFilters(filtersL[effectIndex]);\n                        synth.sanitizeFilters(filtersR[effectIndex]);\n                    // The filter input here is downstream from another filter so we\n                    // better make sure it's safe too.\n                    if (!(initialFilterInputL1[effectIndex] < 100) || !(initialFilterInputL2[effectIndex] < 100) || !(initialFilterInputR1[effectIndex] < 100) || !(initialFilterInputR2[effectIndex] < 100)) {\n                        initialFilterInputL1[effectIndex] = 0.0;\n                        initialFilterInputR2[effectIndex] = 0.0;\n                        initialFilterInputL1[effectIndex] = 0.0;\n                        initialFilterInputR2[effectIndex] = 0.0;\n                    }\n                    if (Math.abs(initialFilterInputL1[effectIndex]) < epsilon) initialFilterInputL1[effectIndex] = 0.0;\n                    if (Math.abs(initialFilterInputL2[effectIndex]) < epsilon) initialFilterInputL2[effectIndex] = 0.0;\n                    if (Math.abs(initialFilterInputR1[effectIndex]) < epsilon) initialFilterInputR1[effectIndex] = 0.0;\n                    if (Math.abs(initialFilterInputR2[effectIndex]) < epsilon) initialFilterInputR2[effectIndex] = 0.0;\n                    effectState.initialEqFilterInputL1 = initialFilterInputL1[effectIndex];\n                    effectState.initialEqFilterInputL2 = initialFilterInputL2[effectIndex];\n                    effectState.initialEqFilterInputR1 = initialFilterInputR1[effectIndex];\n                    effectState.initialEqFilterInputR2 = initialFilterInputR2[effectIndex];\n\n                    instrumentState.eqFilterVolume = eqFilterVolume[effectIndex];`\n                }\n                else if (usesGain && effectState.type == EffectType.gain) {\n                    effectsSource += `\n                    effectState.gain = gain[effectIndex];\n                    `\n                }\n                else if (usesPanning && effectState.type == EffectType.panning) {\n                    effectsSource += `\n\n                    Synth.sanitizeDelayLine(panningDelayLineL[effectIndex], panningDelayPos[effectIndex], panningMask);\n                    Synth.sanitizeDelayLine(panningDelayLineR[effectIndex], panningDelayPos[effectIndex], panningMask);\n                    effectState.panningDelayPos = panningDelayPos[effectIndex];\n                    effectState.panningVolumeL = panningVolumeL[effectIndex];\n                    effectState.panningVolumeR = panningVolumeR[effectIndex];\n                    effectState.panningOffsetL = panningOffsetL[effectIndex];\n                    effectState.panningOffsetR = panningOffsetR[effectIndex];`\n                }\n                else if (usesFlanger && effectState.type == EffectType.flanger) {\n                    effectsSource += `\n\n                    Synth.sanitizeDelayLine(flangerDelayLineL[effectIndex], flangerDelayPos[effectIndex], flangerMask);\n                    Synth.sanitizeDelayLine(flangerDelayLineR[effectIndex], flangerDelayPos[effectIndex], flangerMask);\n                    effectState.flangerPhase = flangerPhase[effectIndex];\n                    effectState.flangerDelayPos = flangerDelayPos[effectIndex];\n                    effectState.flanger = flanger[effectIndex];\n                    effectState.flangerSpeed = flangerSpeed[effectIndex];\n                    effectState.flangerDepth = flangerDepth[effectIndex];\n                    effectState.flangerFeedback = flangerFeedback[effectIndex];`\n                }\n                else if (usesChorus && effectState.type == EffectType.chorus) {\n                    effectsSource += `\n\n                    Synth.sanitizeDelayLine(chorusDelayLineL[effectIndex], chorusDelayPos[effectIndex], chorusMask);\n                    Synth.sanitizeDelayLine(chorusDelayLineR[effectIndex], chorusDelayPos[effectIndex], chorusMask);\n                    effectState.chorusPhase = chorusPhase[effectIndex];\n                    effectState.chorusDelayPos = chorusDelayPos[effectIndex];\n                    effectState.chorusVoiceMult = chorusVoiceMult[effectIndex];\n                    effectState.chorusCombinedMult = chorusCombinedMult[effectIndex];`\n                }\n                else if (usesEcho && effectState.type == EffectType.echo) {\n                    effectsSource += `\n\n                    Synth.sanitizeDelayLine(echoDelayLineL[effectIndex], echoDelayPosL[effectIndex], echoMask[effectIndex]);\n                    Synth.sanitizeDelayLine(echoDelayLineR[effectIndex], echoDelayPosR[effectIndex], echoMask[effectIndex]);\n                    effectState.echoDelayPosL = echoDelayPosL[effectIndex];\n                    effectState.echoDelayPosR = echoDelayPosR[effectIndex];\n                    effectState.echoMult = echoMult[effectIndex];\n                    effectState.echoDelayOffsetRatio = echoDelayOffsetRatio[effectIndex];\n\n                    if (!Number.isFinite(echoShelfSampleL[effectIndex]) || Math.abs(echoShelfSampleL[effectIndex]) < epsilon) echoShelfSampleL[effectIndex] = 0.0;\n                    if (!Number.isFinite(echoShelfSampleR[effectIndex]) || Math.abs(echoShelfSampleR[effectIndex]) < epsilon) echoShelfSampleR[effectIndex] = 0.0;\n                    if (!Number.isFinite(echoShelfPrevInputL[effectIndex]) || Math.abs(echoShelfPrevInputL[effectIndex]) < epsilon) echoShelfPrevInputL[effectIndex] = 0.0;\n                    if (!Number.isFinite(echoShelfPrevInputR[effectIndex]) || Math.abs(echoShelfPrevInputR[effectIndex]) < epsilon) echoShelfPrevInputR[effectIndex] = 0.0;\n                    effectState.echoShelfSampleL = echoShelfSampleL[effectIndex];\n                    effectState.echoShelfSampleR = echoShelfSampleR[effectIndex];\n                    effectState.echoShelfPrevInputL = echoShelfPrevInputL[effectIndex];\n                    effectState.echoShelfPrevInputR = echoShelfPrevInputR[effectIndex];`\n                }\n                else if (usesReverb && effectState.type == EffectType.reverb) {\n                    effectsSource += `\n\n                    Synth.sanitizeDelayLine(reverbDelayLine[effectIndex], reverbDelayPos[effectIndex]        , reverbMask);\n                    Synth.sanitizeDelayLine(reverbDelayLine[effectIndex], reverbDelayPos[effectIndex] +  3041, reverbMask);\n                    Synth.sanitizeDelayLine(reverbDelayLine[effectIndex], reverbDelayPos[effectIndex] +  6426, reverbMask);\n                    Synth.sanitizeDelayLine(reverbDelayLine[effectIndex], reverbDelayPos[effectIndex] + 10907, reverbMask);\n                    effectState.reverbDelayPos = reverbDelayPos[effectIndex];\n                    effectState.reverbMult = reverb[effectIndex];\n\n                    if (!Number.isFinite(reverbShelfSample0[effectIndex]) || Math.abs(reverbShelfSample0[effectIndex]) < epsilon) reverbShelfSample0[effectIndex] = 0.0;\n                    if (!Number.isFinite(reverbShelfSample1[effectIndex]) || Math.abs(reverbShelfSample1[effectIndex]) < epsilon) reverbShelfSample1[effectIndex] = 0.0;\n                    if (!Number.isFinite(reverbShelfSample2[effectIndex]) || Math.abs(reverbShelfSample2[effectIndex]) < epsilon) reverbShelfSample2[effectIndex] = 0.0;\n                    if (!Number.isFinite(reverbShelfSample3[effectIndex]) || Math.abs(reverbShelfSample3[effectIndex]) < epsilon) reverbShelfSample3[effectIndex] = 0.0;\n                    if (!Number.isFinite(reverbShelfPrevInput0[effectIndex]) || Math.abs(reverbShelfPrevInput0[effectIndex]) < epsilon) reverbShelfPrevInput0[effectIndex] = 0.0;\n                    if (!Number.isFinite(reverbShelfPrevInput1[effectIndex]) || Math.abs(reverbShelfPrevInput1[effectIndex]) < epsilon) reverbShelfPrevInput1[effectIndex] = 0.0;\n                    if (!Number.isFinite(reverbShelfPrevInput2[effectIndex]) || Math.abs(reverbShelfPrevInput2[effectIndex]) < epsilon) reverbShelfPrevInput2[effectIndex] = 0.0;\n                    if (!Number.isFinite(reverbShelfPrevInput3[effectIndex]) || Math.abs(reverbShelfPrevInput3[effectIndex]) < epsilon) reverbShelfPrevInput3[effectIndex] = 0.0;\n                    effectState.reverbShelfSample0 = reverbShelfSample0[effectIndex];\n                    effectState.reverbShelfSample1 = reverbShelfSample1[effectIndex];\n                    effectState.reverbShelfSample2 = reverbShelfSample2[effectIndex];\n                    effectState.reverbShelfSample3 = reverbShelfSample3[effectIndex];\n                    effectState.reverbShelfPrevInput0 = reverbShelfPrevInput0[effectIndex];\n                    effectState.reverbShelfPrevInput1 = reverbShelfPrevInput1[effectIndex];\n                    effectState.reverbShelfPrevInput2 = reverbShelfPrevInput2[effectIndex];\n                    effectState.reverbShelfPrevInput3 = reverbShelfPrevInput3[effectIndex];`\n                }\n            }\n\n            effectsSource += \"}\";\n\n            console.log(effectsSource);\n            effectsFunction = new Function(\"Config\", \"Synth\", effectsSource)(Config, Synth);\n            Synth.effectsFunctionCache[signature] = effectsFunction;\n        }\n\n        effectsFunction(synth, outputDataL, outputDataR, bufferIndex, runLength, instrumentState);\n    }\n\n    private static pulseWidthSynth(synth: Synth, bufferIndex: number, roundedSamplesPerTick: number, tone: Tone, instrumentState: InstrumentState): void {\n        const data: Float32Array = synth.tempInstrumentSampleBufferL!;\n\n        const unisonSign: number = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\n        if (instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord!.customInterval) tone.phases[1] = tone.phases[0];\n        let phaseDeltaA: number = tone.phaseDeltas[0];\n        let phaseDeltaB: number = tone.phaseDeltas[1];\n        const phaseDeltaScaleA: number = +tone.phaseDeltaScales[0];\n        const phaseDeltaScaleB: number = +tone.phaseDeltaScales[1];\n        let expression: number = +tone.expression;\n        const expressionDelta: number = +tone.expressionDelta;\n        let phaseA: number = (tone.phases[0] % 1);\n        let phaseB: number = (tone.phases[1] % 1);\n\n        let pulseWidth: number = tone.pulseWidth;\n        const pulseWidthDelta: number = tone.pulseWidthDelta;\n\n        const filters: DynamicBiquadFilter[] = tone.noteFiltersL;\n        const filterCount: number = tone.noteFilterCount | 0;\n        let initialFilterInput1: number = +tone.initialNoteFilterInputL1;\n        let initialFilterInput2: number = +tone.initialNoteFilterInputL2;\n        const applyFilters: Function = Synth.applyFilters;\n\n        const stopIndex: number = bufferIndex + roundedSamplesPerTick;\n        for (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\n            const sawPhaseA: number = phaseA % 1;\n            const sawPhaseB: number = (phaseA + pulseWidth) % 1;\n            const sawPhaseC: number = phaseB % 1;\n            const sawPhaseD: number = (phaseB + pulseWidth) % 1;\n\n            let pulseWaveA: number = sawPhaseB - sawPhaseA;\n            let pulseWaveB: number = sawPhaseD - sawPhaseC;\n\n            // This is a PolyBLEP, which smooths out discontinuities at any frequency to reduce aliasing.\n            if (!instrumentState.aliases) {\n                if (sawPhaseA < phaseDeltaA) {\n                    var t = sawPhaseA / phaseDeltaA;\n                    pulseWaveA += (t + t - t * t - 1) * 0.5;\n                } else if (sawPhaseA > 1.0 - phaseDeltaA) {\n                    var t = (sawPhaseA - 1.0) / phaseDeltaA;\n                    pulseWaveA += (t + t + t * t + 1) * 0.5;\n                }\n                if (sawPhaseB < phaseDeltaA) {\n                    var t = sawPhaseB / phaseDeltaA;\n                    pulseWaveA -= (t + t - t * t - 1) * 0.5;\n                } else if (sawPhaseB > 1.0 - phaseDeltaA) {\n                    var t = (sawPhaseB - 1.0) / phaseDeltaA;\n                    pulseWaveA -= (t + t + t * t + 1) * 0.5;\n                }\n\n                if (sawPhaseC < phaseDeltaB) {\n                    var t = sawPhaseC / phaseDeltaB;\n                    pulseWaveB += (t + t - t * t - 1) * 0.5;\n                } else if (sawPhaseC > 1.0 - phaseDeltaB) {\n                    var t = (sawPhaseC - 1.0) / phaseDeltaB;\n                    pulseWaveB += (t + t + t * t + 1) * 0.5;\n                }\n                if (sawPhaseD < phaseDeltaB) {\n                    var t = sawPhaseD / phaseDeltaB;\n                    pulseWaveB -= (t + t - t * t - 1) * 0.5;\n                } else if (sawPhaseD > 1.0 - phaseDeltaB) {\n                    var t = (sawPhaseD - 1.0) / phaseDeltaB;\n                    pulseWaveB -= (t + t + t * t + 1) * 0.5;\n                }\n            }\n\n            const inputSample: number = pulseWaveA + pulseWaveB * unisonSign;\n            const sample: number = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n            initialFilterInput2 = initialFilterInput1;\n            initialFilterInput1 = inputSample;\n\n            phaseA += phaseDeltaA;\n            phaseB += phaseDeltaB;\n            phaseDeltaA *= phaseDeltaScaleA;\n            phaseDeltaB *= phaseDeltaScaleB;\n            pulseWidth += pulseWidthDelta;\n\n            const output: number = sample * expression;\n            expression += expressionDelta;\n\n            data[sampleIndex] += output;\n        }\n\n        tone.phases[0] = phaseA;\n        tone.phases[1] = phaseB;\n        tone.phaseDeltas[0] = phaseDeltaA;\n        tone.phaseDeltas[1] = phaseDeltaB;\n        tone.expression = expression;\n        tone.pulseWidth = pulseWidth;\n\n        synth.sanitizeFilters(filters);\n        tone.initialNoteFilterInputL1 = initialFilterInput1;\n        tone.initialNoteFilterInputL2 = initialFilterInput2;\n    }\n\n    private static supersawSynth(synth: Synth, bufferIndex: number, runLength: number, tone: Tone, instrumentState: InstrumentState): void {\n\t\tconst data: Float32Array = synth.tempInstrumentSampleBufferL!;\n\t\tconst voiceCount: number = Config.supersawVoiceCount|0;\n\n\t\tlet phaseDelta: number = tone.phaseDeltas[0];\n\t\tconst phaseDeltaScale: number = +tone.phaseDeltaScales[0];\n\t\tlet expression: number = +tone.expression;\n\t\tconst expressionDelta: number = +tone.expressionDelta;\n\t\tlet phases: number[] = tone.phases;\n\n\t\tlet dynamism: number = +tone.supersawDynamism;\n\t\tconst dynamismDelta: number = +tone.supersawDynamismDelta;\n\t\tconst unisonDetunes: number[] = tone.supersawUnisonDetunes;\n\t\tlet shape: number = +tone.supersawShape;\n\t\tconst shapeDelta: number = +tone.supersawShapeDelta;\n\t\tlet delayLength: number = +tone.supersawDelayLength;\n\t\tconst delayLengthDelta: number = +tone.supersawDelayLengthDelta;\n\t\tconst delayLine: Float32Array = tone.supersawDelayLine!;\n\t\tconst delayBufferMask: number = (delayLine.length - 1) >> 0;\n\t\tlet delayIndex: number = tone.supersawDelayIndex|0;\n\t\tdelayIndex = (delayIndex & delayBufferMask) + delayLine.length;\n\n\t\tconst filters: DynamicBiquadFilter[] = tone.noteFiltersL;\n\t\tconst filterCount: number = tone.noteFilterCount|0;\n\t\tlet initialFilterInput1: number = +tone.initialNoteFilterInputL1;\n\t\tlet initialFilterInput2: number = +tone.initialNoteFilterInputL2;\n\t\tconst applyFilters: Function = Synth.applyFilters;\n\n\t\tconst stopIndex: number = bufferIndex + runLength;\n\t\tfor (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\t// The phase initially starts at a zero crossing so apply\n\t\t\t// the delta before first sample to get a nonzero value.\n\t\t\tlet phase: number = (phases[0] + phaseDelta) % 1.0;\n\t\t\tlet supersawSample: number = phase - 0.5 * (1.0 + (voiceCount - 1.0) * dynamism);\n\n\t\t\t// This is a PolyBLEP, which smooths out discontinuities at any frequency to reduce aliasing. \n            if (!instrumentState.aliases) {\n                if (phase < phaseDelta) {\n                    var t: number = phase / phaseDelta;\n                    supersawSample -= (t + t - t * t - 1) * 0.5;\n                } else if (phase > 1.0 - phaseDelta) {\n                    var t: number = (phase - 1.0) / phaseDelta;\n                    supersawSample -= (t + t + t * t + 1) * 0.5;\n                }\n            }\n\n            phases[0] = phase;\n\n            for (let i: number = 1; i < voiceCount; i++) {\n                const detunedPhaseDelta: number = phaseDelta * unisonDetunes[i];\n                // The phase initially starts at a zero crossing so apply\n                // the delta before first sample to get a nonzero value.\n                let phase: number = (phases[i] + detunedPhaseDelta) % 1.0;\n                supersawSample += phase * dynamism;\n\n                // This is a PolyBLEP, which smooths out discontinuities at any frequency to reduce aliasing. \n                if (!instrumentState.aliases) {\n                    if (phase < detunedPhaseDelta) {\n                        const t: number = phase / detunedPhaseDelta;\n                        supersawSample -= (t + t - t * t - 1) * 0.5 * dynamism;\n                    } else if (phase > 1.0 - detunedPhaseDelta) {\n                        const t: number = (phase - 1.0) / detunedPhaseDelta;\n                        supersawSample -= (t + t + t * t + 1) * 0.5 * dynamism;\n                    }\n                }\n\n                phases[i] = phase;\n            }\n\n            delayLine[delayIndex & delayBufferMask] = supersawSample;\n            const delaySampleTime: number = delayIndex - delayLength;\n            const lowerIndex: number = delaySampleTime | 0;\n            const upperIndex: number = lowerIndex + 1;\n            const delayRatio: number = delaySampleTime - lowerIndex;\n            const prevDelaySample: number = delayLine[lowerIndex & delayBufferMask];\n            const nextDelaySample: number = delayLine[upperIndex & delayBufferMask];\n            const delaySample: number = prevDelaySample + (nextDelaySample - prevDelaySample) * delayRatio;\n            delayIndex++;\n\n            const inputSample: number = supersawSample - delaySample * shape;\n            const sample: number = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n            initialFilterInput2 = initialFilterInput1;\n            initialFilterInput1 = inputSample;\n\n            phaseDelta *= phaseDeltaScale;\n            dynamism += dynamismDelta;\n            shape += shapeDelta;\n            delayLength += delayLengthDelta;\n\n            const output: number = sample * expression;\n            expression += expressionDelta;\n\n            data[sampleIndex] += output;\n        }\n\n        tone.phaseDeltas[0] = phaseDelta;\n        tone.expression = expression;\n        tone.supersawDynamism = dynamism;\n        tone.supersawShape = shape;\n        tone.supersawDelayLength = delayLength;\n        tone.supersawDelayIndex = delayIndex;\n\n\t\tsynth.sanitizeFilters(filters);\n\t\ttone.initialNoteFilterInputL1 = initialFilterInput1;\n\t\ttone.initialNoteFilterInputL2 = initialFilterInput2;\n\t}\n\n    private static fmSourceTemplate: string[] = (`\n\t\tconst data = synth.tempInstrumentSampleBufferL;\n\t\tconst sineWave = Config.sineWave;\n\t\t\t\n\t\t// I'm adding 1000 to the phase to ensure that it's never negative even when modulated by other waves because negative numbers don't work with the modulus operator very well.\n\t\tlet operator#Phase       = +((tone.phases[#] % 1) + 1000) * ` + Config.sineWaveLength + `;\n\t\tlet operator#PhaseDelta  = +tone.phaseDeltas[#] * ` + Config.sineWaveLength + `;\n\t\tlet operator#PhaseDeltaScale = +tone.phaseDeltaScales[#];\n\t\tlet operator#OutputMult  = +tone.operatorExpressions[#];\n\t\tconst operator#OutputDelta = +tone.operatorExpressionDeltas[#];\n\t\tlet operator#Output      = +tone.feedbackOutputs[#];\n        const operator#Wave      = tone.operatorWaves[#].samples;\n\t\tlet feedbackMult         = +tone.feedbackMult;\n\t\tconst feedbackDelta        = +tone.feedbackDelta;\n        let expression = +tone.expression;\n\t\tconst expressionDelta = +tone.expressionDelta;\n\t\t\n\t\tconst filters = tone.noteFiltersL;\n\t\tconst filterCount = tone.noteFilterCount|0;\n\t\tlet initialFilterInput1 = +tone.initialNoteFilterInputL1;\n\t\tlet initialFilterInput2 = +tone.initialNoteFilterInputL2;\n\t\tconst applyFilters = Synth.applyFilters;\n\t\t\n\t\tconst stopIndex = bufferIndex + roundedSamplesPerTick;\n\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\t\t// INSERT OPERATOR COMPUTATION HERE\n\t\t\t\tconst fmOutput = (/*operator#Scaled*/); // CARRIER OUTPUTS\n\t\t\t\t\n\t\t\tconst inputSample = fmOutput;\n\t\t\tconst sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\tinitialFilterInput1 = inputSample;\n\t\t\t\t\n\t\t\t\tfeedbackMult += feedbackDelta;\n\t\t\t\toperator#OutputMult += operator#OutputDelta;\n\t\t\t\toperator#Phase += operator#PhaseDelta;\n\t\t\toperator#PhaseDelta *= operator#PhaseDeltaScale;\n\t\t\t\n\t\t\tconst output = sample * expression;\n\t\t\texpression += expressionDelta;\n\n\t\t\tdata[sampleIndex] += output;\n\t\t\t}\n\t\t\t\n\t\t\ttone.phases[#] = operator#Phase / ` + Config.sineWaveLength + `;\n\t\t\ttone.phaseDeltas[#] = operator#PhaseDelta / ` + Config.sineWaveLength + `;\n\t\t\ttone.operatorExpressions[#] = operator#OutputMult;\n\t\t    tone.feedbackOutputs[#] = operator#Output;\n\t\t    tone.feedbackMult = feedbackMult;\n\t\t    tone.expression = expression;\n\t\t\t\n\t\tsynth.sanitizeFilters(filters);\n\t\ttone.initialNoteFilterInputL1 = initialFilterInput1;\n\t\ttone.initialNoteFilterInputL2 = initialFilterInput2;\n\t\t`).split(\"\\n\");\n\n\tprivate static operatorSourceTemplate: string[] = (`\n\t\tconst operator#PhaseMix = operator#Phase/* + operator@Scaled*/;\n\t\tconst operator#PhaseInt = operator#PhaseMix|0;\n\t\tconst operator#Index    = operator#PhaseInt & ` + Config.sineWaveMask + `;\n\t\tconst operator#Sample   = operator#Wave[operator#Index];\n\t\toperator#Output         = operator#Sample + (operator#Wave[operator#Index + 1] - operator#Sample) * (operator#PhaseMix - operator#PhaseInt);\n\t\tconst operator#Scaled   = operator#OutputMult * operator#Output;\n\t\t`).split(\"\\n\");\n\n\tprivate static noiseSynth(synth: Synth, bufferIndex: number, runLength: number, tone: Tone, instrumentState: InstrumentState): void {\n\t\tconst data: Float32Array = synth.tempInstrumentSampleBufferL!;\n\t\tconst wave: Float32Array = instrumentState.waveL!;\n\n\t\tconst unisonSign: number = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\n\t\tif (instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord!.customInterval) tone.phases[1] = tone.phases[0];\n\t\tlet phaseDeltaA: number = tone.phaseDeltas[0];\n\t\tlet phaseDeltaB: number = tone.phaseDeltas[1];\n\t\tconst phaseDeltaScaleA: number = +tone.phaseDeltaScales[0];\n\t\tconst phaseDeltaScaleB: number = +tone.phaseDeltaScales[1];\n\t\tlet expression: number = +tone.expression;\n\t\tconst expressionDelta: number = +tone.expressionDelta;\n\t\tlet phaseA: number = (tone.phases[0] % 1) * Config.chipNoiseLength;\n\t\tlet phaseB: number = (tone.phases[1] % 1) * Config.chipNoiseLength;\n\t\tif (tone.phases[0] == 0.0) {\n\t\t\t// Zero phase means the tone was reset, just give noise a random start phase instead.\n\t\t\tphaseA = Math.random() * Config.chipNoiseLength;\n\t\t\tif (instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord!.customInterval) phaseB = phaseA;\n\t\t}\n\t\tif (tone.phases[1] == 0.0 && !(instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord!.customInterval)) {\n\t\t\t// Zero phase means the tone was reset, just give noise a random start phase instead.\n\t\t\tphaseB = Math.random() * Config.chipNoiseLength;\n\t\t}\n\t\tconst phaseMask: number = Config.chipNoiseLength - 1;\n\t\tlet noiseSampleA: number = +tone.noiseSampleA;\n\t\tlet noiseSampleB: number = +tone.noiseSampleB;\n\n\t\tconst filters: DynamicBiquadFilter[] = tone.noteFiltersL;\n\t\tconst filterCount: number = tone.noteFilterCount | 0;\n\t\tlet initialFilterInput1: number = +tone.initialNoteFilterInputL1;\n\t\tlet initialFilterInput2: number = +tone.initialNoteFilterInputL2;\n\t\tconst applyFilters: Function = Synth.applyFilters;\n\n\t\t// This is for a \"legacy\" style simplified 1st order lowpass filter with\n\t\t// a cutoff frequency that is relative to the tone's fundamental frequency.\n\t\tconst pitchRelativefilterA: number = Math.min(1.0, phaseDeltaA * instrumentState.noisePitchFilterMult);\n\t\tconst pitchRelativefilterB: number = Math.min(1.0, phaseDeltaB * instrumentState.noisePitchFilterMult);\n\n\t\tconst stopIndex: number = bufferIndex + runLength;\n\t\tfor (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\tconst waveSampleA: number = wave[phaseA & phaseMask];\n\t\t\tconst waveSampleB: number = wave[phaseB & phaseMask];\n\n\t\t\tnoiseSampleA += (waveSampleA - noiseSampleA) * pitchRelativefilterA;\n\t\t\tnoiseSampleB += (waveSampleB - noiseSampleB) * pitchRelativefilterB;\n\n\t\t\tconst inputSample: number = noiseSampleA + noiseSampleB * unisonSign;\n\t\t\tconst sample: number = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\tinitialFilterInput1 = inputSample;\n\n\t\t\tphaseA += phaseDeltaA;\n\t\t\tphaseB += phaseDeltaB;\n\t\t\tphaseDeltaA *= phaseDeltaScaleA;\n\t\t\tphaseDeltaB *= phaseDeltaScaleB;\n\n\t\t\tconst output: number = sample * expression;\n\t\t\texpression += expressionDelta;\n\n\t\t\tdata[sampleIndex] += output;\n\t\t}\n\n\t\ttone.phases[0] = phaseA / Config.chipNoiseLength;\n\t\ttone.phases[1] = phaseB / Config.chipNoiseLength;\n\t\ttone.phaseDeltas[0] = phaseDeltaA;\n\t\ttone.phaseDeltas[1] = phaseDeltaB;\n\t\ttone.expression = expression;\n\t\ttone.noiseSampleA = noiseSampleA;\n\t\ttone.noiseSampleB = noiseSampleB;\n\n\t\tsynth.sanitizeFilters(filters);\n\t\ttone.initialNoteFilterInputL1 = initialFilterInput1;\n\t\ttone.initialNoteFilterInputL2 = initialFilterInput2;\n\t}\n\n\tprivate static spectrumSynth(synth: Synth, bufferIndex: number, runLength: number, tone: Tone, instrumentState: InstrumentState): void {\n\t\tconst data: Float32Array = synth.tempInstrumentSampleBufferL!;\n\t\tconst wave: Float32Array = instrumentState.waveL!;\n\t\tconst samplesInPeriod: number = (1 << 7);\n\n\t\tconst unisonSign: number = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\n\t\tif (instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord!.customInterval) tone.phases[1] = tone.phases[0];\n\t\tlet phaseDeltaA: number = tone.phaseDeltas[0] * samplesInPeriod;\n\t\tlet phaseDeltaB: number = tone.phaseDeltas[1] * samplesInPeriod;\n\t\tconst phaseDeltaScaleA: number = +tone.phaseDeltaScales[0];\n\t\tconst phaseDeltaScaleB: number = +tone.phaseDeltaScales[1];\n\t\tlet expression: number = +tone.expression;\n\t\tconst expressionDelta: number = +tone.expressionDelta;\n\t\tlet noiseSampleA: number = +tone.noiseSampleA;\n\t\tlet noiseSampleB: number = +tone.noiseSampleB;\n\n\t\tconst filters: DynamicBiquadFilter[] = tone.noteFiltersL;\n\t\tconst filterCount: number = tone.noteFilterCount | 0;\n\t\tlet initialFilterInput1: number = +tone.initialNoteFilterInputL1;\n\t\tlet initialFilterInput2: number = +tone.initialNoteFilterInputL2;\n\t\tconst applyFilters: Function = Synth.applyFilters;\n\n\t\tlet phaseA: number = (tone.phases[0] % 1) * Config.spectrumNoiseLength;\n\t\tlet phaseB: number = (tone.phases[1] % 1) * Config.spectrumNoiseLength;\n\t\tif (tone.phases[0] == 0.0) {\n\t\t\t// Zero phase means the tone was reset, just give noise a random start phase instead.\n\t\t\tphaseA = Synth.findRandomZeroCrossing(wave, Config.spectrumNoiseLength) + phaseDeltaA;\n\t\t\tif (instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord!.customInterval) phaseB = phaseA;\n\t\t}\n\t\tif (tone.phases[1] == 0.0 && !(instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord!.customInterval)) {\n\t\t\t// Zero phase means the tone was reset, just give noise a random start phase instead.\n\t\t\tphaseB = Synth.findRandomZeroCrossing(wave, Config.spectrumNoiseLength) + phaseDeltaB;\n\t\t}\n\t\tconst phaseMask: number = Config.spectrumNoiseLength - 1;\n\n\t\t// This is for a \"legacy\" style simplified 1st order lowpass filter with\n\t\t// a cutoff frequency that is relative to the tone's fundamental frequency.\n\t\tconst pitchRelativefilterA: number = Math.min(1.0, phaseDeltaA);\n\t\tconst pitchRelativefilterB: number = Math.min(1.0, phaseDeltaB);\n\n\t\tconst stopIndex: number = bufferIndex + runLength;\n\t\tfor (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\tconst phaseAInt: number = phaseA | 0;\n\t\t\tconst phaseBInt: number = phaseB | 0;\n\t\t\tconst indexA: number = phaseAInt & phaseMask;\n\t\t\tconst indexB: number = phaseBInt & phaseMask;\n\t\t\tlet waveSampleA: number = wave[indexA];\n\t\t\tlet waveSampleB: number = wave[indexB];\n\t\t\tconst phaseRatioA: number = phaseA - phaseAInt;\n\t\t\tconst phaseRatioB: number = phaseB - phaseBInt;\n\t\t\twaveSampleA += (wave[indexA + 1] - waveSampleA) * phaseRatioA;\n\t\t\twaveSampleB += (wave[indexB + 1] - waveSampleB) * phaseRatioB;\n\n\t\t\tnoiseSampleA += (waveSampleA - noiseSampleA) * pitchRelativefilterA;\n\t\t\tnoiseSampleB += (waveSampleB - noiseSampleB) * pitchRelativefilterB;\n\n\n\t\t\tconst inputSample: number = noiseSampleA + noiseSampleB * unisonSign;\n\t\t\tconst sample: number = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\tinitialFilterInput1 = inputSample;\n\n\t\t\tphaseA += phaseDeltaA;\n\t\t\tphaseB += phaseDeltaB;\n\t\t\tphaseDeltaA *= phaseDeltaScaleA;\n\t\t\tphaseDeltaB *= phaseDeltaScaleB;\n\n\t\t\tconst output: number = sample * expression;\n\t\t\texpression += expressionDelta;\n\n\t\t\tdata[sampleIndex] += output;\n\t\t}\n\n\t\ttone.phases[0] = phaseA / Config.spectrumNoiseLength;\n\t\ttone.phases[1] = phaseB / Config.spectrumNoiseLength;\n\t\ttone.phaseDeltas[0] = phaseDeltaA / samplesInPeriod;\n\t\ttone.phaseDeltas[1] = phaseDeltaB / samplesInPeriod;\n\t\ttone.expression = expression;\n\t\ttone.noiseSampleA = noiseSampleA;\n\t\ttone.noiseSampleB = noiseSampleB;\n\n\t\tsynth.sanitizeFilters(filters);\n\t\ttone.initialNoteFilterInputL1 = initialFilterInput1;\n\t\ttone.initialNoteFilterInputL2 = initialFilterInput2;\n\t}\n\n\tprivate static drumsetSynth(synth: Synth, bufferIndex: number, runLength: number, tone: Tone, instrumentState: InstrumentState): void {\n\t\tconst data: Float32Array = synth.tempInstrumentSampleBufferL!;\n\t\tlet wave: Float32Array = instrumentState.getDrumsetWave(tone.drumsetPitch!);\n\t\tconst referenceDelta: number = InstrumentState.drumsetIndexReferenceDelta(tone.drumsetPitch!);\n\t\tlet phaseDelta: number = tone.phaseDeltas[0] / referenceDelta;\n\t\tconst phaseDeltaScale: number = +tone.phaseDeltaScales[0];\n\t\tlet expression: number = +tone.expression;\n\t\tconst expressionDelta: number = +tone.expressionDelta;\n\n\t\tconst filters: DynamicBiquadFilter[] = tone.noteFiltersL;\n\t\tconst filterCount: number = tone.noteFilterCount | 0;\n\t\tlet initialFilterInput1: number = +tone.initialNoteFilterInputL1;\n\t\tlet initialFilterInput2: number = +tone.initialNoteFilterInputL2;\n\t\tconst applyFilters: Function = Synth.applyFilters;\n\n\t\tlet phase: number = (tone.phases[0] % 1) * Config.spectrumNoiseLength;\n\t\t// Zero phase means the tone was reset, just give noise a random start phase instead.\n\t\tif (tone.phases[0] == 0.0) phase = Synth.findRandomZeroCrossing(wave, Config.spectrumNoiseLength) + phaseDelta;\n\t\tconst phaseMask: number = Config.spectrumNoiseLength - 1;\n\n\t\tconst stopIndex: number = bufferIndex + runLength;\n\t\tfor (let sampleIndex: number = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\tconst phaseInt: number = phase | 0;\n\t\t\tconst index: number = phaseInt & phaseMask;\n\t\t\tlet noiseSample: number = wave[index];\n\t\t\tconst phaseRatio: number = phase - phaseInt;\n\t\t\tnoiseSample += (wave[index + 1] - noiseSample) * phaseRatio;\n\n\t\t\tconst inputSample: number = noiseSample;\n\t\t\tconst sample: number = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\tinitialFilterInput1 = inputSample;\n\n\t\t\tphase += phaseDelta;\n\t\t\tphaseDelta *= phaseDeltaScale;\n\n\t\t\tconst output: number = sample * expression;\n\t\t\texpression += expressionDelta;\n\n\t\t\tdata[sampleIndex] += output;\n\t\t}\n\n\t\ttone.phases[0] = phase / Config.spectrumNoiseLength;\n\t\ttone.phaseDeltas[0] = phaseDelta * referenceDelta;\n\t\ttone.expression = expression;\n\n\t\tsynth.sanitizeFilters(filters);\n\t\ttone.initialNoteFilterInputL1 = initialFilterInput1;\n\t\ttone.initialNoteFilterInputL2 = initialFilterInput2;\n\t}\n\n    private static modSynth(synth: Synth, stereoBufferIndex: number, roundedSamplesPerTick: number, tone: Tone, instrument: Instrument): void {\n        // Note: present modulator value is tone.expressionStarts[0].\n\n        if (!synth.song) return;\n\n        let mod: number = Config.modCount - 1 - tone.pitches[0];\n\n        // Flagged as invalid because unused by current settings, skip\n        if (instrument.invalidModulators[mod]) return;\n\n        let setting: number = instrument.modulators[mod];\n\n        // Generate list of used instruments\n        let usedChannels: number[] = [];\n        let usedInstruments: number[] = [];\n        if (Config.modulators[instrument.modulators[mod]].forSong) {\n            // Instrument doesn't matter for song, just push a random index to run the modsynth once\n            usedInstruments.push(0);\n        } else {\n            // All\n            if (instrument.modInstruments[mod][0] == synth.song.channels[instrument.modChannels[mod][0]].instruments.length) {\n                for (let i: number = 0; i < synth.song.channels[instrument.modChannels[mod][0]].instruments.length; i++) {\n                    usedInstruments.push(i);\n                    usedChannels.push(0);\n                }\n            }\n            // Active\n            else if (instrument.modInstruments[mod][0] > synth.song.channels[instrument.modChannels[mod][0]].instruments.length) {\n                if (synth.song.getPattern(instrument.modChannels[mod][0], synth.bar) != null) {\n                    usedInstruments = synth.song.getPattern(instrument.modChannels[mod][0], synth.bar)!.instruments;\n                    usedChannels.push(0);\n                }\n            } else {\n                for (let i: number = 0; i < instrument.modChannels[mod].length; i++) {\n                    usedChannels.push(instrument.modChannels[mod][i]);\n                    usedInstruments.push(instrument.modInstruments[mod][i]);\n                }\n            }\n        }\n\n        for (let instrumentIndex: number = 0; instrumentIndex < usedInstruments.length; instrumentIndex++) {\n\n            synth.setModValue(tone.expression, tone.expression + tone.expressionDelta, instrument.modChannels[mod][instrumentIndex], usedInstruments[instrumentIndex], setting);\n\n            // If mods are being held (for smoother playback while recording mods), use those values instead.\n            for (let i: number = 0; i < synth.heldMods.length; i++) {\n                if (Config.modulators[instrument.modulators[mod]].forSong) {\n                    if (synth.heldMods[i].setting == setting)\n                        synth.setModValue(synth.heldMods[i].volume, synth.heldMods[i].volume, instrument.modChannels[mod][instrumentIndex], usedInstruments[instrumentIndex], setting);\n                } else if (synth.heldMods[i].channelIndex == instrument.modChannels[mod][instrumentIndex] && synth.heldMods[i].instrumentIndex == usedInstruments[instrumentIndex] && synth.heldMods[i].setting == setting) {\n                    synth.setModValue(synth.heldMods[i].volume, synth.heldMods[i].volume, instrument.modChannels[mod][instrumentIndex], usedInstruments[instrumentIndex], setting);\n                }\n            }\n\n            // Reset arps, but only at the start of the note\n            if (setting == Config.modulators.dictionary[\"reset arp\"].index && synth.tick == 0 && tone.noteStartPart == synth.beat * Config.partsPerBeat + synth.part) {\n                synth.channels[instrument.modChannels[mod][instrumentIndex]].instruments[usedInstruments[instrumentIndex]].arpTime = 0;\n            }\n            // Reset envelope, but only at the start of the note\n            else if (setting == Config.modulators.dictionary[\"reset envelope\"].index && synth.tick == 0 && tone.noteStartPart == synth.beat * Config.partsPerBeat + synth.part) {\n                let envelopeTarget = instrument.modEnvelopeNumbers[mod];\n                const tgtInstrumentState: InstrumentState = synth.channels[instrument.modChannels[mod][instrumentIndex]].instruments[usedInstruments[instrumentIndex]];\n                const tgtInstrument: Instrument = synth.song.channels[instrument.modChannels[mod][instrumentIndex]].instruments[usedInstruments[instrumentIndex]];\n\n                if (tgtInstrument.envelopeCount > envelopeTarget) {\n                    tgtInstrumentState.envelopeTime[envelopeTarget] = 0;\n                }\n            }\n            // Denote next bar skip\n            else if (setting == Config.modulators.dictionary[\"next bar\"].index) {\n                synth.wantToSkip = true;\n            }\n            // do song eq filter first\n            else if (setting == Config.modulators.dictionary[\"song eq\"].index) {\n                const tgtSong = synth.song\n\n                let dotTarget = instrument.modFilterTypes[mod] | 0;\n\n                if (dotTarget == 0) { // Morph. Figure out the target filter's X/Y coords for this point. If no point exists with this index, or point types don't match, do lerp-out for this point and lerp-in of a new point\n\n                    let pinIdx: number = 0;\n                    const currentPart: number = synth.getTicksIntoBar() / Config.ticksPerPart;\n                    while (tone.note!.start + tone.note!.pins[pinIdx].time <= currentPart) pinIdx++;\n                    // 0 to 1 based on distance to next morph\n                    //let lerpStartRatio: number = (currentPart - tone.note!.pins[pinIdx - 1].time) / (tone.note!.pins[pinIdx].time - tone.note!.pins[pinIdx - 1].time);\n                    let lerpEndRatio: number = ((currentPart - tone.note!.start + (roundedSamplesPerTick / (synth.getSamplesPerTick() * Config.ticksPerPart)) * Config.ticksPerPart) - tone.note!.pins[pinIdx - 1].time) / (tone.note!.pins[pinIdx].time - tone.note!.pins[pinIdx - 1].time);\n\n                    // Compute the new settings to go to.\n                    if (tgtSong.eqSubFilters[tone.note!.pins[pinIdx - 1].size] != null || tgtSong.eqSubFilters[tone.note!.pins[pinIdx].size] != null) {\n                        tgtSong.tmpEqFilterEnd = FilterSettings.lerpFilters(tgtSong.eqSubFilters[tone.note!.pins[pinIdx - 1].size]!, tgtSong.eqSubFilters[tone.note!.pins[pinIdx].size]!, lerpEndRatio);\n                    } else {\n                        // No mutation will occur to the filter object so we can safely return it without copying\n                        tgtSong.tmpEqFilterEnd = tgtSong.eqFilter;\n                    }\n\n                } // Target (1 is dot 1 X, 2 is dot 1 Y, etc.)\n                else {\n                    // Since we are directly manipulating the filter, make sure it is a new one and not an actual one of the instrument's filters\n                    for (let i: number = 0; i < Config.filterMorphCount; i++) {\n                        if (tgtSong.tmpEqFilterEnd == tgtSong.eqSubFilters[i] && tgtSong.tmpEqFilterEnd != null) {\n                            tgtSong.tmpEqFilterEnd = new FilterSettings();\n                            tgtSong.tmpEqFilterEnd.fromJsonObject(tgtSong.eqSubFilters[i]!.toJsonObject());\n                        }\n                    }\n                    if (tgtSong.tmpEqFilterEnd == null) {\n                        tgtSong.tmpEqFilterEnd = new FilterSettings();\n                        tgtSong.tmpEqFilterEnd.fromJsonObject(tgtSong.eqFilter.toJsonObject());\n                    }\n\n                    if (tgtSong.tmpEqFilterEnd.controlPointCount > Math.floor((dotTarget - 1) / 2)) {\n                        if (dotTarget % 2) { // X\n                            tgtSong.tmpEqFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].freq = tone.expression + tone.expressionDelta;\n                        } else { // Y\n                            tgtSong.tmpEqFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].gain = tone.expression + tone.expressionDelta;\n                        }\n                    }\n                }\n            }\n            // Extra info for eq filter target needs to be set as well\n            else if (setting == Config.modulators.dictionary[\"post eq\"].index) {\n                const tgtInstrument = synth.song.channels[instrument.modChannels[mod][instrumentIndex]].instruments[usedInstruments[instrumentIndex]];\n                for (let effectIndex: number = 0; effectIndex < tgtInstrument.effects.length; effectIndex++) {\n                    const tgtEffect = tgtInstrument.effects[effectIndex] as Effect;\n\n                    if (!tgtEffect.eqFilterType) {\n\n                        let dotTarget = instrument.modFilterTypes[mod] | 0;\n\n                        if (dotTarget == 0) { // Morph. Figure out the target filter's X/Y coords for this point. If no point exists with this index, or point types don't match, do lerp-out for this point and lerp-in of a new point\n\n                            let pinIdx: number = 0;\n                            const currentPart: number = synth.getTicksIntoBar() / Config.ticksPerPart;\n                            while (tone.note!.start + tone.note!.pins[pinIdx].time <= currentPart) pinIdx++;\n                            // 0 to 1 based on distance to next morph\n                            //let lerpStartRatio: number = (currentPart - tone.note!.pins[pinIdx - 1].time) / (tone.note!.pins[pinIdx].time - tone.note!.pins[pinIdx - 1].time);\n                            let lerpEndRatio: number = ((currentPart - tone.note!.start + (roundedSamplesPerTick / (synth.getSamplesPerTick() * Config.ticksPerPart)) * Config.ticksPerPart) - tone.note!.pins[pinIdx - 1].time) / (tone.note!.pins[pinIdx].time - tone.note!.pins[pinIdx - 1].time);\n\n                            // Compute the new settings to go to.\n                            if (tgtEffect.eqSubFilters[tone.note!.pins[pinIdx - 1].size] != null || tgtEffect.eqSubFilters[tone.note!.pins[pinIdx].size] != null) {\n                                tgtEffect.tmpEqFilterEnd = FilterSettings.lerpFilters(tgtEffect.eqSubFilters[tone.note!.pins[pinIdx - 1].size]!, tgtEffect.eqSubFilters[tone.note!.pins[pinIdx].size]!, lerpEndRatio);\n                            } else {\n                                // No mutation will occur to the filter object so we can safely return it without copying\n                                tgtEffect.tmpEqFilterEnd = tgtEffect.eqFilter;\n                            }\n\n                        } // Target (1 is dot 1 X, 2 is dot 1 Y, etc.)\n                        else {\n                            // Since we are directly manipulating the filter, make sure it is a new one and not an actual one of the instrument's filters\n                            for (let i: number = 0; i < Config.filterMorphCount; i++) {\n                                if (tgtEffect.tmpEqFilterEnd == tgtEffect.eqSubFilters[i] && tgtEffect.tmpEqFilterEnd != null) {\n                                    tgtEffect.tmpEqFilterEnd = new FilterSettings();\n                                    tgtEffect.tmpEqFilterEnd.fromJsonObject(tgtEffect.eqSubFilters[i]!.toJsonObject());\n                                }\n                            }\n                            if (tgtEffect.tmpEqFilterEnd == null) {\n                                tgtEffect.tmpEqFilterEnd = new FilterSettings();\n                                tgtEffect.tmpEqFilterEnd.fromJsonObject(tgtEffect.eqFilter.toJsonObject());\n                            }\n\n                            if (tgtEffect.tmpEqFilterEnd.controlPointCount > Math.floor((dotTarget - 1) / 2)) {\n                                if (dotTarget % 2) { // X\n                                    tgtEffect.tmpEqFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].freq = tone.expression + tone.expressionDelta;\n                                } else { // Y\n                                    tgtEffect.tmpEqFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].gain = tone.expression + tone.expressionDelta;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            // Extra info for note filter target needs to be set as well\n            else if (setting == Config.modulators.dictionary[\"pre eq\"].index) {\n                const tgtInstrument = synth.song.channels[instrument.modChannels[mod][instrumentIndex]].instruments[usedInstruments[instrumentIndex]];\n\n                if (!tgtInstrument.noteFilterType) {\n                    let dotTarget = instrument.modFilterTypes[mod] | 0;\n\n                    if (dotTarget == 0) { // Morph. Figure out the target filter's X/Y coords for this point. If no point exists with this index, or point types don't match, do lerp-out for this point and lerp-in of a new point\n\n                        let pinIdx: number = 0;\n                        const currentPart: number = synth.getTicksIntoBar() / Config.ticksPerPart;\n                        while (tone.note!.start + tone.note!.pins[pinIdx].time <= currentPart) pinIdx++;\n                        // 0 to 1 based on distance to next morph\n                        //let lerpStartRatio: number = (currentPart - tone.note!.pins[pinIdx - 1].time) / (tone.note!.pins[pinIdx].time - tone.note!.pins[pinIdx - 1].time);\n                        let lerpEndRatio: number = ((currentPart - tone.note!.start + (roundedSamplesPerTick / (synth.getSamplesPerTick() * Config.ticksPerPart)) * Config.ticksPerPart) - tone.note!.pins[pinIdx - 1].time) / (tone.note!.pins[pinIdx].time - tone.note!.pins[pinIdx - 1].time);\n\n                        // Compute the new settings to go to.\n                        if (tgtInstrument.noteSubFilters[tone.note!.pins[pinIdx - 1].size] != null || tgtInstrument.noteSubFilters[tone.note!.pins[pinIdx].size] != null) {\n                            tgtInstrument.tmpNoteFilterEnd = FilterSettings.lerpFilters(tgtInstrument.noteSubFilters[tone.note!.pins[pinIdx - 1].size]!, tgtInstrument.noteSubFilters[tone.note!.pins[pinIdx].size]!, lerpEndRatio);\n                        } else {\n                            // No mutation will occur to the filter object so we can safely return it without copying\n                            tgtInstrument.tmpNoteFilterEnd = tgtInstrument.noteFilter;\n                        }\n\n                    } // Target (1 is dot 1 X, 2 is dot 1 Y, etc.)\n                    else {\n                        // Since we are directly manipulating the filter, make sure it is a new one and not an actual one of the instrument's filters\n\n                        for (let i: number = 0; i < Config.filterMorphCount; i++) {\n                            if (tgtInstrument.tmpNoteFilterEnd == tgtInstrument.noteSubFilters[i] && tgtInstrument.tmpNoteFilterEnd != null) {\n                                tgtInstrument.tmpNoteFilterEnd = new FilterSettings();\n                                tgtInstrument.tmpNoteFilterEnd.fromJsonObject(tgtInstrument.noteSubFilters[i]!.toJsonObject());\n                            }\n                        }\n                        if (tgtInstrument.tmpNoteFilterEnd == null) {\n                            tgtInstrument.tmpNoteFilterEnd = new FilterSettings();\n                            tgtInstrument.tmpNoteFilterEnd.fromJsonObject(tgtInstrument.noteFilter.toJsonObject());\n                        }\n\n                        if (tgtInstrument.tmpNoteFilterEnd.controlPointCount > Math.floor((dotTarget - 1) / 2)) {\n                            if (dotTarget % 2) { // X\n                                tgtInstrument.tmpNoteFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].freq = tone.expression + tone.expressionDelta;\n                            } else { // Y\n                                tgtInstrument.tmpNoteFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].gain = tone.expression + tone.expressionDelta;\n                            }\n                        }\n                    }\n                }\n            } else if (setting == Config.modulators.dictionary[\"individual envelope speed\"].index) {\n                const tgtInstrument = synth.song.channels[instrument.modChannels[mod][instrumentIndex]].instruments[usedInstruments[instrumentIndex]];\n                let envelopeTarget = instrument.modEnvelopeNumbers[mod];\n\n                let speed: number = tone.expression + tone.expressionDelta;\n                if (tgtInstrument.envelopeCount > envelopeTarget) {\n                    if (Number.isInteger(speed)) {\n                        tgtInstrument.envelopes[envelopeTarget].tempEnvelopeSpeed = Config.perEnvelopeSpeedIndices[speed];\n                    } else {\n                        //linear interpolation\n                        speed = (1 - (speed % 1)) * Config.perEnvelopeSpeedIndices[Math.floor(speed)] + (speed % 1) * Config.perEnvelopeSpeedIndices[Math.ceil(speed)];\n                        tgtInstrument.envelopes[envelopeTarget].tempEnvelopeSpeed = speed;\n                    }\n                }\n            } else if (setting == Config.modulators.dictionary[\"individual envelope lower bound\"].index) {\n                const tgtInstrument = synth.song.channels[instrument.modChannels[mod][instrumentIndex]].instruments[usedInstruments[instrumentIndex]];\n                let envelopeTarget = instrument.modEnvelopeNumbers[mod];\n\n                let bound: number = tone.expression + tone.expressionDelta;\n                if (tgtInstrument.envelopeCount > envelopeTarget) {\n                    tgtInstrument.envelopes[envelopeTarget].tempEnvelopeLowerBound = bound / 10;\n                }\n            } else if (setting == Config.modulators.dictionary[\"individual envelope upper bound\"].index) {\n                const tgtInstrument = synth.song.channels[instrument.modChannels[mod][instrumentIndex]].instruments[usedInstruments[instrumentIndex]];\n                let envelopeTarget = instrument.modEnvelopeNumbers[mod];\n\n                let bound: number = tone.expression + tone.expressionDelta;\n                if (tgtInstrument.envelopeCount > envelopeTarget) {\n                    tgtInstrument.envelopes[envelopeTarget].tempEnvelopeUpperBound = bound / 10;\n                }\n                console.log(tgtInstrument.envelopes[envelopeTarget]);\n            }\n        }\n    }\n\n    static findRandomZeroCrossing(wave: Float32Array, waveLength: number): number { //literally only public to let typescript compile\n        let phase: number = Math.random() * waveLength;\n        const phaseMask: number = waveLength - 1;\n\n        // Spectrum and drumset waves sounds best when they start at a zero crossing,\n        // otherwise they pop. Try to find a zero crossing.\n        let indexPrev: number = phase & phaseMask;\n        let wavePrev: number = wave[indexPrev];\n        const stride: number = 16;\n        for (let attemptsRemaining: number = 128; attemptsRemaining > 0; attemptsRemaining--) {\n            const indexNext: number = (indexPrev + stride) & phaseMask;\n            const waveNext: number = wave[indexNext];\n            if (wavePrev * waveNext <= 0.0) {\n                // Found a zero crossing! Now let's narrow it down to two adjacent sample indices.\n                for (let i: number = 0; i < stride; i++) {\n                    const innerIndexNext: number = (indexPrev + 1) & phaseMask;\n                    const innerWaveNext: number = wave[innerIndexNext];\n                    if (wavePrev * innerWaveNext <= 0.0) {\n                        // Found the zero crossing again! Now let's find the exact intersection.\n                        const slope: number = innerWaveNext - wavePrev;\n                        phase = indexPrev;\n                        if (Math.abs(slope) > 0.00000001) {\n                            phase += -wavePrev / slope;\n                        }\n                        phase = Math.max(0, phase) % waveLength;\n                        break;\n                    } else {\n                        indexPrev = innerIndexNext;\n                        wavePrev = innerWaveNext;\n                    }\n                }\n                break;\n            } else {\n                indexPrev = indexNext;\n                wavePrev = waveNext;\n            }\n        }\n\n        return phase;\n    }\n\n    static instrumentVolumeToVolumeMult(instrumentVolume: number): number {\n        return (instrumentVolume == -Config.volumeRange / 2.0) ? 0.0 : Math.pow(2, Config.volumeLogScale * instrumentVolume);\n    }\n    static volumeMultToInstrumentVolume(volumeMult: number): number {\n        return (volumeMult <= 0.0) ? -Config.volumeRange / 2 : Math.min(Config.volumeRange, (Math.log(volumeMult) / Math.LN2) / Config.volumeLogScale);\n    }\n    static noteSizeToVolumeMult(size: number): number {\n        return Math.pow(Math.max(0.0, size) / Config.noteSizeMax, 1.5);\n    }\n    static volumeMultToNoteSize(volumeMult: number): number {\n        return Math.pow(Math.max(0.0, volumeMult), 1 / 1.5) * Config.noteSizeMax;\n    }\n\n    static getOperatorWave(waveform: number, pulseWidth: number) {\n        if (waveform != 2) {\n            return Config.operatorWaves[waveform];\n        }\n        else {\n            return Config.pwmOperatorWaves[pulseWidth];\n        }\n    }\n\n    getSamplesPerTick(): number {\n        if (this.song == null) return 0;\n        let beatsPerMinute: number = this.song.getBeatsPerMinute();\n        if (this.isModActive(Config.modulators.dictionary[\"tempo\"].index)) {\n            beatsPerMinute = this.getModValue(Config.modulators.dictionary[\"tempo\"].index);\n        }\n        return this.getSamplesPerTickSpecificBPM(beatsPerMinute);\n    }\n\n    private getSamplesPerTickSpecificBPM(beatsPerMinute: number): number {\n        const beatsPerSecond: number = beatsPerMinute / 60.0;\n        const partsPerSecond: number = Config.partsPerBeat * beatsPerSecond;\n        const tickPerSecond: number = Config.ticksPerPart * partsPerSecond;\n        return this.samplesPerSecond / tickPerSecond;\n    }\n\n    private sanitizeFilters(filters: DynamicBiquadFilter[]): void {\n        let reset: boolean = false;\n        for (const filter of filters) {\n            const output1: number = Math.abs(filter.output1);\n            const output2: number = Math.abs(filter.output2);\n            // If either is a large value, Infinity, or NaN, then just reset all filter history.\n            if (!(output1 < 100) || !(output2 < 100)) {\n                reset = true;\n                break;\n            }\n            if (output1 < epsilon) filter.output1 = 0.0;\n            if (output2 < epsilon) filter.output2 = 0.0;\n        }\n        if (reset) {\n            for (const filter of filters) {\n                filter.output1 = 0.0;\n                filter.output2 = 0.0;\n            }\n        }\n    }\n\n    static sanitizeDelayLine(delayLine: Float32Array, lastIndex: number, mask: number): void {\n        while (true) {\n            lastIndex--;\n            const index: number = lastIndex & mask;\n            const sample: number = Math.abs(delayLine[index]);\n            if (Number.isFinite(sample) && (sample == 0.0 || sample >= epsilon)) break;\n            delayLine[index] = 0.0;\n        }\n    }\n\n    static applyFilters(sample: number, input1: number, input2: number, filterCount: number, filters: DynamicBiquadFilter[]): number {\n        for (let i: number = 0; i < filterCount; i++) {\n            const filter: DynamicBiquadFilter = filters[i];\n            const output1: number = filter.output1;\n            const output2: number = filter.output2;\n            const a1: number = filter.a1;\n            const a2: number = filter.a2;\n            const b0: number = filter.b0;\n            const b1: number = filter.b1;\n            const b2: number = filter.b2;\n            sample = b0 * sample + b1 * input1 + b2 * input2 - a1 * output1 - a2 * output2;\n            filter.a1 = a1 + filter.a1Delta;\n            filter.a2 = a2 + filter.a2Delta;\n            if (filter.useMultiplicativeInputCoefficients) {\n                filter.b0 = b0 * filter.b0Delta;\n                filter.b1 = b1 * filter.b1Delta;\n                filter.b2 = b2 * filter.b2Delta;\n            } else {\n                filter.b0 = b0 + filter.b0Delta;\n                filter.b1 = b1 + filter.b1Delta;\n                filter.b2 = b2 + filter.b2Delta;\n            }\n            filter.output2 = output1;\n            filter.output1 = sample;\n            // Updating the input values is waste if the next filter doesn't exist...\n            input2 = output2;\n            input1 = output1;\n        }\n        return sample;\n    }\n\n    computeTicksSinceStart(ofBar: boolean = false) {\n        const beatsPerBar = this.song?.beatsPerBar ? this.song?.beatsPerBar : 8;\n        if (ofBar) {\n            return Config.ticksPerPart * Config.partsPerBeat * beatsPerBar * this.bar;\n        } else {\n            return this.tick + Config.ticksPerPart * (this.part + Config.partsPerBeat * (this.beat + beatsPerBar * this.bar));\n        }\n    }\n}\n\n// When compiling synth.ts as a standalone module named \"beepbox\", expose these classes as members to JavaScript:\nexport { Dictionary, DictionaryArray, FilterType, EnvelopeType, InstrumentType, Transition, Chord, Envelope, Config };\n", "/*!\nCopyright (c) 2012-2022 John Nesky and contributing authors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of \nthis software and associated documentation files (the \"Software\"), to deal in \nthe Software without restriction, including without limitation the rights to \nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies \nof the Software, and to permit persons to whom the Software is furnished to do \nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all \ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, \nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE \nSOFTWARE.\n*/\n\nexport interface Dictionary<T> {\n    [K: string]: T;\n}\n\n// @TODO: Not ideal to make this writable like this.\n// export interface DictionaryArray<T> extends ReadonlyArray<T> {\nexport interface DictionaryArray<T> extends Array<T> {\n    dictionary: Dictionary<T>;\n}\n\nexport const enum FilterType {\n    lowPass,\n    highPass,\n    peak,\n    length,\n}\n\nexport const enum SustainType {\n    bright,\n    acoustic,\n    length,\n}\n\nexport const enum GranularEnvelopeType {\n    parabolic,\n    raisedCosineBell,\n    // trapezoid,\n    length\n}\n\nexport const enum EnvelopeType {\n    none,\n    noteSize,\n    pitch, //slarmoo's box 0.9\n    pseudorandom, //slarmoo's box 1.3\n    punch,\n    flare,\n    twang,\n    swell,\n    lfo, //renamed from tremolo in slarmoo's box 1.3\n    tremolo2, //deprecated as of slarmoo's box 1.3; Kept for updating integrity and drumsets\n    decay,\n    wibble,\n    linear,\n    rise,\n    blip,\n    fall, //slarmoo's box 1.2\n    //add new envelope types here\n}\n\nexport const enum InstrumentType {\n    chip,\n    fm,\n    noise,\n    spectrum,\n    drumset,\n    harmonics,\n    pwm,\n    pickedString,\n    supersaw,\n    customChipWave,\n    mod,\n    fm6op,\n    length,\n}\n\nexport const TypePresets: ReadonlyArray<string> = [\"chip\", \"FM\", \"noise\", \"spectrum\", \"drumset\", \"harmonics\", \"pulse width\", \"picked string\", \"supersaw\", \"chip (custom)\", \"mod\", \"FM (6-op)\"];\n\nexport const enum DropdownID {\n    Vibrato = 0,\n    Pan = 1,\n    Chord = 2,\n    Transition = 3,\n    FM = 4,\n    PulseWidth = 5,\n    Unison = 6,\n    Envelope = 7,\n    EnvelopeSettings = 8,\n}\n\nexport const enum MDEffectType { // not sure what to call these! i call them \"musical data effects\" based off of this wiki page: https://beepbox.miraheze.org/wiki/Modding_Guide/Adding_a_new_effect - theepie\n    pitchShift,\n    detune,\n    vibrato,\n    transition,\n    chord,\n    noteRange, //placeholder for ultrabox 2.3 update\n    length,\n}\n\nexport const enum EffectType {\n    reverb,\n    chorus,\n    panning,\n    distortion,\n    bitcrusher,\n    eqFilter,\n    echo,\n    ringModulation,\n    granular,\n    gain,\n    flanger,\n    length,\n}\n\nexport const enum EnvelopeComputeIndex {\n    noteVolume,\n    mixVolume,\n    noteFilterAllFreqs,\n    pulseWidth,\n    stringSustain,\n    unison,\n    operatorFrequency0, operatorFrequency1, operatorFrequency2, operatorFrequency3, operatorFrequency4, operatorFrequency5,\n    operatorAmplitude0, operatorAmplitude1, operatorAmplitude2, operatorAmplitude3, operatorAmplitude4, operatorAmplitude5,\n    feedbackAmplitude,\n    pitchShift,\n    detune,\n    vibratoDepth,\n    //vibratoSpeed, doesn't follow normal envelope pattern; will figure out. //if you fix this you need to update the url\n    noteFilterFreq0, noteFilterFreq1, noteFilterFreq2, noteFilterFreq3, noteFilterFreq4, noteFilterFreq5, noteFilterFreq6, noteFilterFreq7,\n    noteFilterGain0, noteFilterGain1, noteFilterGain2, noteFilterGain3, noteFilterGain4, noteFilterGain5, noteFilterGain6, noteFilterGain7,\n    decimalOffset,\n    supersawDynamism,\n    supersawSpread,\n    supersawShape,\n    panning,\n    distortion,\n    bitcrusherQuantization,\n    bitcrusherFrequency,\n    chorus,\n    echoSustain,\n    reverb,\n    arpeggioSpeed,\n    ringModulation,\n    ringModulationHz,\n    granular,\n    grainAmount,\n    grainSize,\n    grainRange,\n    echoDelay,\n    gain,\n    flanger,\n    flangerSpeed,\n    flangerDepth,\n    flangerFeedback,\n    //Add more here\n\n    length,\n}\n\nexport const enum LFOEnvelopeTypes {\n    sine,\n    square,\n    triangle,\n    sawtooth,\n    trapezoid,\n    steppedSaw,\n    steppedTri,\n    // ramp,\n    length,\n}\n\nexport const enum RandomEnvelopeTypes {\n    time,\n    pitch,\n    note,\n    timeSmooth,\n    length,\n}\n\nexport interface BeepBoxOption {\n    readonly index: number;\n    readonly name: string;\n}\n\nexport interface Scale extends BeepBoxOption {\n    readonly flags: ReadonlyArray<boolean>;\n    readonly realName: string;\n}\n\nexport interface Key extends BeepBoxOption {\n    readonly isWhiteKey: boolean;\n    readonly basePitch: number;\n}\n\nexport interface Rhythm extends BeepBoxOption {\n    readonly stepsPerBeat: number;\n    readonly roundUpThresholds: number[] | null;\n}\n\nexport interface ChipWave extends BeepBoxOption {\n    readonly expression: number;\n    samples: Float32Array;\n    samplesR?: Float32Array;\n    isPercussion?: boolean;\n    isCustomSampled?: boolean;\n    isSampled?: boolean;\n    extraSampleDetune?: number;\n    rootKey?: number;\n    sampleRate?: number;\n}\n\nexport interface OperatorWave extends BeepBoxOption {\n    samples: Float32Array;\n}\n\nexport interface ChipNoise extends BeepBoxOption {\n    readonly expression: number;\n    readonly basePitch: number;\n    readonly pitchFilterMult: number;\n    readonly isSoft: boolean;\n    samples: Float32Array | null;\n}\n\nexport interface Transition extends BeepBoxOption {\n    readonly isSeamless: boolean;\n    readonly continues: boolean;\n    readonly slides: boolean;\n    readonly slideTicks: number;\n    readonly includeAdjacentPatterns: boolean;\n}\n\nexport interface Vibrato extends BeepBoxOption {\n    readonly amplitude: number;\n    readonly type: number;\n    readonly delayTicks: number;\n}\n\nexport interface VibratoType extends BeepBoxOption {\n    readonly periodsSeconds: number[];\n    readonly period: number;\n}\n\nexport interface Unison extends BeepBoxOption {\n    readonly voices: number;\n    readonly spread: number;\n    readonly offset: number;\n    readonly expression: number;\n    readonly sign: number;\n}\n\nexport interface Modulator extends BeepBoxOption {\n    readonly name: string; // name that shows up in song editor UI\n    readonly pianoName: string; // short name that shows up in mod piano UI\n    readonly maxRawVol: number; // raw\n    readonly newNoteVol: number; // raw\n    readonly forSong: boolean; // true - setting is song scope\n    convertRealFactor: number; // offset that needs to be applied to get a \"real\" number display of value, for UI purposes\n    readonly associatedEffect: EffectType; // effect that should be enabled for this modulator to work properly. If unused, set to EffectType.length.\n    readonly associatedMDEffect: MDEffectType; // like above but for MD effects. If unused, set to MDEffectType.length.\n    readonly promptName: string; // long-as-needed name that shows up in tip prompt\n    readonly promptDesc: string[]; // paragraph(s) describing how to use this mod\n    invertSliderIndicator?: boolean; // for whether or not you want to invert the slider indicator\n    readonly maxIndex: number;\n}\n\nexport interface Chord extends BeepBoxOption {\n    readonly customInterval: boolean;\n    readonly arpeggiates: boolean;\n    readonly strumParts: number;\n    readonly singleTone: boolean;\n}\n\nexport interface Algorithm extends BeepBoxOption {\n    readonly carrierCount: number;\n    readonly associatedCarrier: ReadonlyArray<number>;\n    readonly modulatedBy: ReadonlyArray<ReadonlyArray<number>>;\n}\n\nexport interface OperatorFrequency extends BeepBoxOption {\n    readonly mult: number;\n    readonly hzOffset: number;\n    readonly amplitudeSign: number;\n}\n\nexport interface Feedback extends BeepBoxOption {\n    readonly indices: ReadonlyArray<ReadonlyArray<number>>;\n}\n\nexport interface Envelope extends BeepBoxOption {\n    readonly type: EnvelopeType;\n    readonly speed: number;\n}\n\nexport interface AutomationTarget extends BeepBoxOption {\n    readonly computeIndex: EnvelopeComputeIndex /*| InstrumentAutomationIndex*/ | null;\n    readonly displayName: string;\n    //readonly perNote: boolean; // Whether to compute envelopes on a per-note basis.\n    readonly interleave: boolean; // Whether to interleave this target with the next one in the menu (e.g. filter frequency and gain).\n    readonly isFilter: boolean; // Filters are special because the maxCount depends on other instrument settings.\n    //readonly range: number | null; // set if automation is allowed.\n    readonly maxCount: number;\n    readonly effect: EffectType | null;\n    readonly mdeffect: MDEffectType | null;\n    readonly compatibleInstruments: InstrumentType[] | null;\n}\n\nexport const enum SampleLoadingStatus {\n    loading,\n    loaded,\n    error,\n}\n\nexport function getSampleLoadingStatusName(status: SampleLoadingStatus): string {\n    switch (status) {\n        case SampleLoadingStatus.loading: return \"loading\";\n        case SampleLoadingStatus.loaded: return \"loaded\";\n        case SampleLoadingStatus.error: return \"error\";\n    }\n}\n\nexport class SampleLoadingState {\n    statusTable: Dictionary<SampleLoadingStatus>;\n    urlTable: Dictionary<string>;\n    totalSamples: number;\n    samplesLoaded: number;\n\n    constructor() {\n        this.statusTable = {};\n        this.urlTable = {};\n        this.totalSamples = 0;\n        this.samplesLoaded = 0;\n    }\n}\n\nexport const sampleLoadingState: SampleLoadingState = new SampleLoadingState();\n\nexport class SampleLoadedEvent extends Event {\n    readonly totalSamples: number;\n    readonly samplesLoaded: number;\n\n    constructor(totalSamples: number, samplesLoaded: number) {\n        super(\"sampleloaded\");\n        this.totalSamples = totalSamples;\n        this.samplesLoaded = samplesLoaded;\n    }\n}\n\nexport interface SampleLoadEventMap {\n    \"sampleloaded\": SampleLoadedEvent;\n}\n\nexport class SampleLoadEvents extends EventTarget {\n    constructor() {\n        super();\n    }\n}\n\nexport const sampleLoadEvents: SampleLoadEvents = new SampleLoadEvents();\n\nexport async function startLoadingSample(url: string, chipWaveIndex: number, presetSettings: Dictionary<any>, rawLoopOptions: any, customSampleRate: number): Promise<void> {\n    // @TODO: Make parts of the code that expect everything to already be\n    // in memory work correctly.\n    // It would be easy to only instantiate `SongEditor` and company after\n    // everything is loaded, but if dynamic sample loading without a reload\n    // is deemed necessary, anything that involves chip waves has to be\n    // revisited so as to be able to work with a changing list of chip\n    // waves that may or may not be ready to be used.\n    const sampleLoaderAudioContext = new AudioContext({ sampleRate: customSampleRate });\n    let closedSampleLoaderAudioContext: boolean = false;\n    const chipWave = Config.chipWaves[chipWaveIndex];\n    const rawChipWave = Config.rawChipWaves[chipWaveIndex];\n    const rawRawChipWave = Config.rawRawChipWaves[chipWaveIndex];\n    if (OFFLINE) {\n        if (url.slice(0, 5) === \"file:\") {\n            const dirname = await getDirname();\n            const joined = await pathJoin(dirname, url.slice(5));\n            url = joined;\n        }\n    }\n    fetch(url).then((response) => {\n        if (!response.ok) {\n            // @TODO: Be specific with the error handling.\n            sampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.error;\n            return Promise.reject(new Error(\"Couldn't load sample\"));\n        }\n        return response.arrayBuffer();\n    }).then((arrayBuffer) => {\n        return sampleLoaderAudioContext.decodeAudioData(arrayBuffer);\n    }).then((audioBuffer) => {\n        // @TODO: Downmix.\n        const samples = centerWave(Array.from(audioBuffer.getChannelData(0)));\n        var samplesR = samples;\n        if (audioBuffer.numberOfChannels > 1) samplesR = centerWave(Array.from(audioBuffer.getChannelData(1)));\n        else samplesR = samples;\n        const integratedSamples = performIntegral(samples);\n        const integratedSamplesR = performIntegral(samplesR);\n        chipWave.samples = integratedSamples;\n        chipWave.samplesR = integratedSamplesR;\n        rawChipWave.samples = samples;\n        rawChipWave.samplesR = samplesR;\n        rawRawChipWave.samples = samples;\n        rawRawChipWave.samplesR = samplesR;\n        if (rawLoopOptions[\"isUsingAdvancedLoopControls\"]) {\n            presetSettings[\"chipWaveLoopStart\"] = rawLoopOptions[\"chipWaveLoopStart\"] != null ? rawLoopOptions[\"chipWaveLoopStart\"] : 0;\n            presetSettings[\"chipWaveLoopEnd\"] = rawLoopOptions[\"chipWaveLoopEnd\"] != null ? rawLoopOptions[\"chipWaveLoopEnd\"] : samples.length - 1;\n            presetSettings[\"chipWaveLoopMode\"] = rawLoopOptions[\"chipWaveLoopMode\"] != null ? rawLoopOptions[\"chipWaveLoopMode\"] : 0;\n            presetSettings[\"chipWavePlayBackwards\"] = rawLoopOptions[\"chipWavePlayBackwards\"];\n            presetSettings[\"chipWaveStartOffset\"] = rawLoopOptions[\"chipWaveStartOffset\"] != null ? rawLoopOptions[\"chipWaveStartOffset\"] : 0;\n        }\n        sampleLoadingState.samplesLoaded++;\n        sampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.loaded;\n        sampleLoadEvents.dispatchEvent(new SampleLoadedEvent(\n            sampleLoadingState.totalSamples,\n            sampleLoadingState.samplesLoaded\n        ));\n        if (!closedSampleLoaderAudioContext) {\n            closedSampleLoaderAudioContext = true;\n            sampleLoaderAudioContext.close();\n        }\n    }).catch((error) => {\n        //console.error(error);\n        sampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.error;\n        alert(\"Failed to load \" + url + \":\\n\" + error);\n        if (!closedSampleLoaderAudioContext) {\n            closedSampleLoaderAudioContext = true;\n            sampleLoaderAudioContext.close();\n        }\n    });\n}\n\nexport function getLocalStorageItem<T>(key: string, defaultValue: T): T | string {\n    let value: T | string | null = localStorage.getItem(key);\n    if (value == null || value === \"null\" || value === \"undefined\") {\n        value = defaultValue;\n    }\n    return value;\n}\n\n// @HACK: This just assumes these exist, regardless of whether they actually do\n// or not.\ndeclare global {\n    const OFFLINE: boolean; // for UB offline\n    const getDirname: () => Promise<string>; // for UB offline\n    const pathJoin: (...parts: string[]) => Promise<string>; // for UB offline\n    const kicksample: number[];\n    const snaresample: number[];\n    const pianosample: number[];\n    const WOWsample: number[];\n    const overdrivesample: number[];\n    const trumpetsample: number[];\n    const saxophonesample: number[];\n    const orchhitsample: number[];\n    const detatchedviolinsample: number[];\n    const synthsample: number[];\n    const sonic3snaresample: number[];\n    const comeonsample: number[];\n    const choirsample: number[];\n    const overdrivensample: number[];\n    const flutesample: number[];\n    const legatoviolinsample: number[];\n    const tremoloviolinsample: number[];\n    const amenbreaksample: number[];\n    const pizzicatoviolinsample: number[];\n    const timallengruntsample: number[];\n    const tubasample: number[];\n    const loopingcymbalsample: number[];\n    const kickdrumsample: number[];\n    const snaredrumsample: number[];\n    const closedhihatsample: number[];\n    const foothihatsample: number[];\n    const openhihatsample: number[];\n    const crashsample: number[];\n    const pianoC4sample: number[];\n    const liverpadsample: number[];\n    const marimbasample: number[];\n    const susdotwavsample: number[];\n    const wackyboxttssample: number[];\n    const peppersteak1: number[];\n    const peppersteak2: number[];\n    const vinyl: number[];\n    const slapbass: number[];\n    const hdeboverdrive: number[];\n    const sunsoftbass: number[];\n    const masculinechoir: number[];\n    const femininechoir: number[];\n    const southtololoche: number[];\n    const harp: number[];\n    const panflute: number[];\n    const krumhorn: number[];\n    const timpani: number[];\n    const crowdhey: number[];\n    const warioland4brass: number[];\n    const warioland4organ: number[];\n    const warioland4daow: number[];\n    const warioland4hourchime: number[];\n    const warioland4tick: number[];\n    const kirbykick: number[];\n    const kirbysnare: number[];\n    const kirbybongo: number[];\n    const kirbyclick: number[];\n    const funkkick: number[];\n    const funksnare: number[];\n    const funksnareleft: number[];\n    const funksnareright: number[];\n    const funktomhigh: number[];\n    const funktomlow: number[];\n    const funkhihatclosed: number[];\n    const funkhihathalfopen: number[];\n    const funkhihatopen: number[];\n    const funkhihatopentip: number[];\n    const funkhihatfoot: number[];\n    const funkcrash: number[];\n    const funkcrashtip: number[];\n    const funkride: number[];\n    const chronoperc1finalsample: number[];\n    const synthkickfmsample: number[];\n    const woodclicksample: number[];\n    const acousticsnaresample: number[];\n    const catpaintboxsample: number[];\n    const gameboypaintboxsample: number[];\n    const mariopaintboxsample: number[];\n    const drumpaintboxsample: number[];\n    const yoshipaintboxsample: number[];\n    const starpaintboxsample: number[];\n    const fireflowerpaintboxsample: number[];\n    const dogpaintbox: number[];\n    const oinkpaintbox: number[];\n    const swanpaintboxsample: number[];\n    const facepaintboxsample: number[];\n}\n\nfunction loadScript(url: string): Promise<void> {\n    const result: Promise<void> = new Promise((resolve, reject) => {\n        if (!Config.willReloadForCustomSamples) {\n            const script = document.createElement(\"script\");\n            script.src = url;\n            document.head.appendChild(script);\n            script.addEventListener(\"load\", (event) => {\n                resolve();\n            });\n        } else {\n            // There's not really any errors that show up if the loading for\n            // this script is stopped early, but it won't really do anything\n            // particularly useful either in that case.\n        }\n    });\n    return result;\n}\n\nexport function loadBuiltInSamples(set: number): void {\n    const defaultIndex: number = 0;\n    const defaultIntegratedSamples: Float32Array = Config.chipWaves[defaultIndex].samples;\n    const defaultSamples: Float32Array = Config.rawRawChipWaves[defaultIndex].samples;\n\n    if (set == 0) {\n        // Create chip waves with the wrong sound.\n        const chipWaves = [\n            { name: \"paandorasbox kick\", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\n            { name: \"paandorasbox snare\", expression: 3.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\n            { name: \"paandorasbox piano1\", expression: 3.0, isSampled: true, isPercussion: false, extraSampleDetune: 2 },\n            { name: \"paandorasbox WOW\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: 0 },\n            { name: \"paandorasbox overdrive\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -2 },\n            { name: \"paandorasbox trumpet\", expression: 3.0, isSampled: true, isPercussion: false, extraSampleDetune: 1.2 },\n            { name: \"paandorasbox saxophone\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -5 },\n            { name: \"paandorasbox orchestrahit\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: 4.2 },\n            { name: \"paandorasbox detatched violin\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: 4.2 },\n            { name: \"paandorasbox synth\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -0.8 },\n            { name: \"paandorasbox sonic3snare\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\n            { name: \"paandorasbox come on\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: 0 },\n            { name: \"paandorasbox choir\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -3 },\n            { name: \"paandorasbox overdriveguitar\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -6.2 },\n            { name: \"paandorasbox flute\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -6 },\n            { name: \"paandorasbox legato violin\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -28 },\n            { name: \"paandorasbox tremolo violin\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -33 },\n            { name: \"paandorasbox amen break\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -55 },\n            { name: \"paandorasbox pizzicato violin\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -11 },\n            { name: \"paandorasbox tim allen grunt\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -20 },\n            { name: \"paandorasbox tuba\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: 44 },\n            { name: \"paandorasbox loopingcymbal\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -17 },\n            { name: \"paandorasbox standardkick\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: -7 },\n            { name: \"paandorasbox standardsnare\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\n            { name: \"paandorasbox closedhihat\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: 5 },\n            { name: \"paandorasbox foothihat\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: 4 },\n            { name: \"paandorasbox openhihat\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: -31 },\n            { name: \"paandorasbox crashcymbal\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: -43 },\n            { name: \"paandorasbox pianoC4\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -42.5 },\n            { name: \"paandorasbox liver pad\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -22.5 },\n            { name: \"paandorasbox marimba\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -15.5 },\n            { name: \"paandorasbox susdotwav\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -24.5 },\n            { name: \"paandorasbox wackyboxtts\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -17.5 },\n            { name: \"paandorasbox peppersteak_1\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -42.2 },\n            { name: \"paandorasbox peppersteak_2\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -47 },\n            { name: \"paandorasbox vinyl_noise\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: -50 },\n            { name: \"paandorasbeta slap bass\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -56 },\n            { name: \"paandorasbeta HD EB overdrive guitar\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -60 },\n            { name: \"paandorasbeta sunsoft bass\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -18.5 },\n            { name: \"paandorasbeta masculine choir\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -50 },\n            { name: \"paandorasbeta feminine choir\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -60.5 },\n            { name: \"paandorasbeta tololoche\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -29.5 },\n            { name: \"paandorasbeta harp\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -54 },\n            { name: \"paandorasbeta pan flute\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -58 },\n            { name: \"paandorasbeta krumhorn\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -46 },\n            { name: \"paandorasbeta timpani\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -50 },\n            { name: \"paandorasbeta crowd hey\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -29 },\n            { name: \"paandorasbeta wario land 4 brass\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -68 },\n            { name: \"paandorasbeta wario land 4 rock organ\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -63 },\n            { name: \"paandorasbeta wario land 4 DAOW\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -35 },\n            { name: \"paandorasbeta wario land 4 hour chime\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -47.5 },\n            { name: \"paandorasbeta wario land 4 tick\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -12.5 },\n            { name: \"paandorasbeta kirby kick\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46.5 },\n            { name: \"paandorasbeta kirby snare\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46.5 },\n            { name: \"paandorasbeta kirby bongo\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46.5 },\n            { name: \"paandorasbeta kirby click\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46.5 },\n            { name: \"paandorasbeta sonor kick\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -28.5 },\n            { name: \"paandorasbeta sonor snare\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -28.5 },\n            { name: \"paandorasbeta sonor snare (left hand)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -22.5 },\n            { name: \"paandorasbeta sonor snare (right hand)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -22.5 },\n            { name: \"paandorasbeta sonor high tom\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -41.5 },\n            { name: \"paandorasbeta sonor low tom\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -41.5 },\n            { name: \"paandorasbeta sonor hihat (closed)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -17 },\n            { name: \"paandorasbeta sonor hihat (half opened)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -21 },\n            { name: \"paandorasbeta sonor hihat (open)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -54.5 },\n            { name: \"paandorasbeta sonor hihat (open tip)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -43.5 },\n            { name: \"paandorasbeta sonor hihat (pedal)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -28 },\n            { name: \"paandorasbeta sonor crash\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -51 },\n            { name: \"paandorasbeta sonor crash (tip)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -50.5 },\n            { name: \"paandorasbeta sonor ride\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46 }\n        ];\n\n        sampleLoadingState.totalSamples += chipWaves.length;\n\n        // This assumes that Config.rawRawChipWaves and Config.chipWaves have\n        // the same number of elements.\n        const startIndex: number = Config.rawRawChipWaves.length;\n        for (const chipWave of chipWaves) {\n            const chipWaveIndex: number = Config.rawRawChipWaves.length;\n            const rawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\n            const rawRawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\n            const integratedChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultIntegratedSamples };\n            Config.rawRawChipWaves[chipWaveIndex] = rawRawChipWave;\n            Config.rawRawChipWaves.dictionary[chipWave.name] = rawRawChipWave;\n            Config.rawChipWaves[chipWaveIndex] = rawChipWave;\n            Config.rawChipWaves.dictionary[chipWave.name] = rawChipWave;\n            Config.chipWaves[chipWaveIndex] = integratedChipWave;\n            Config.chipWaves.dictionary[chipWave.name] = rawChipWave;\n            sampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.loading;\n            sampleLoadingState.urlTable[chipWaveIndex] = \"legacySamples\";\n        }\n\n        loadScript(\"samples.js\")\n            .then(() => loadScript(\"samples2.js\"))\n            .then(() => loadScript(\"samples3.js\"))\n            .then(() => loadScript(\"drumsamples.js\"))\n            .then(() => loadScript(\"wario_samples.js\"))\n            .then(() => loadScript(\"kirby_samples.js\"))\n            .then(() => {\n                // Now put the right sounds in there after everything\n                // got loaded.\n                const chipWaveSamples: Float32Array[] = [\n                    centerWave(kicksample),\n                    centerWave(snaresample),\n                    centerWave(pianosample),\n                    centerWave(WOWsample),\n                    centerWave(overdrivesample),\n                    centerWave(trumpetsample),\n                    centerWave(saxophonesample),\n                    centerWave(orchhitsample),\n                    centerWave(detatchedviolinsample),\n                    centerWave(synthsample),\n                    centerWave(sonic3snaresample),\n                    centerWave(comeonsample),\n                    centerWave(choirsample),\n                    centerWave(overdrivensample),\n                    centerWave(flutesample),\n                    centerWave(legatoviolinsample),\n                    centerWave(tremoloviolinsample),\n                    centerWave(amenbreaksample),\n                    centerWave(pizzicatoviolinsample),\n                    centerWave(timallengruntsample),\n                    centerWave(tubasample),\n                    centerWave(loopingcymbalsample),\n                    centerWave(kickdrumsample),\n                    centerWave(snaredrumsample),\n                    centerWave(closedhihatsample),\n                    centerWave(foothihatsample),\n                    centerWave(openhihatsample),\n                    centerWave(crashsample),\n                    centerWave(pianoC4sample),\n                    centerWave(liverpadsample),\n                    centerWave(marimbasample),\n                    centerWave(susdotwavsample),\n                    centerWave(wackyboxttssample),\n                    centerWave(peppersteak1),\n                    centerWave(peppersteak2),\n                    centerWave(vinyl),\n                    centerWave(slapbass),\n                    centerWave(hdeboverdrive),\n                    centerWave(sunsoftbass),\n                    centerWave(masculinechoir),\n                    centerWave(femininechoir),\n                    centerWave(southtololoche),\n                    centerWave(harp),\n                    centerWave(panflute),\n                    centerWave(krumhorn),\n                    centerWave(timpani),\n                    centerWave(crowdhey),\n                    centerWave(warioland4brass),\n                    centerWave(warioland4organ),\n                    centerWave(warioland4daow),\n                    centerWave(warioland4hourchime),\n                    centerWave(warioland4tick),\n                    centerWave(kirbykick),\n                    centerWave(kirbysnare),\n                    centerWave(kirbybongo),\n                    centerWave(kirbyclick),\n                    centerWave(funkkick),\n                    centerWave(funksnare),\n                    centerWave(funksnareleft),\n                    centerWave(funksnareright),\n                    centerWave(funktomhigh),\n                    centerWave(funktomlow),\n                    centerWave(funkhihatclosed),\n                    centerWave(funkhihathalfopen),\n                    centerWave(funkhihatopen),\n                    centerWave(funkhihatopentip),\n                    centerWave(funkhihatfoot),\n                    centerWave(funkcrash),\n                    centerWave(funkcrashtip),\n                    centerWave(funkride)\n                ];\n                let chipWaveIndexOffset: number = 0;\n                for (const chipWaveSample of chipWaveSamples) {\n                    const chipWaveIndex: number = startIndex + chipWaveIndexOffset;\n                    Config.rawChipWaves[chipWaveIndex].samples = chipWaveSample;\n                    Config.rawRawChipWaves[chipWaveIndex].samples = chipWaveSample;\n                    Config.chipWaves[chipWaveIndex].samples = performIntegral(chipWaveSample);\n                    sampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.loaded;\n                    sampleLoadingState.samplesLoaded++;\n                    sampleLoadEvents.dispatchEvent(new SampleLoadedEvent(\n                        sampleLoadingState.totalSamples,\n                        sampleLoadingState.samplesLoaded\n                    ));\n                    chipWaveIndexOffset++;\n                }\n            });\n        //EditorConfig.presetCategories[EditorConfig.presetCategories.length] = {name: \"Legacy Sample Presets\", presets:  { name: \"Earthbound O. Guitar\", midiProgram: 80, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"chord\": \"arpeggio\", \"wave\": \"paandorasbox overdrive\", \"unison\": \"none\", \"envelopes\": [] } }, index: EditorConfig.presetCategories.length,};\n    }\n    else if (set == 1) {\n        // Create chip waves with the wrong sound.\n        const chipWaves = [\n            { name: \"chronoperc1final\", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\n            { name: \"synthkickfm\", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\n            { name: \"mcwoodclick1\", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\n            { name: \"acoustic snare\", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 }\n        ];\n\n        sampleLoadingState.totalSamples += chipWaves.length;\n\n        // This assumes that Config.rawRawChipWaves and Config.chipWaves have\n        // the same number of elements.\n        const startIndex: number = Config.rawRawChipWaves.length;\n        for (const chipWave of chipWaves) {\n            const chipWaveIndex: number = Config.rawRawChipWaves.length;\n            const rawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\n            const rawRawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\n            const integratedChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultIntegratedSamples };\n            Config.rawRawChipWaves[chipWaveIndex] = rawRawChipWave;\n            Config.rawRawChipWaves.dictionary[chipWave.name] = rawRawChipWave;\n            Config.rawChipWaves[chipWaveIndex] = rawChipWave;\n            Config.rawChipWaves.dictionary[chipWave.name] = rawChipWave;\n            Config.chipWaves[chipWaveIndex] = integratedChipWave;\n            Config.chipWaves.dictionary[chipWave.name] = rawChipWave;\n            sampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.loading;\n            sampleLoadingState.urlTable[chipWaveIndex] = \"nintariboxSamples\";\n        }\n\n        loadScript(\"nintaribox_samples.js\")\n            .then(() => {\n                // Now put the right sounds in there after everything\n                // got loaded.\n                const chipWaveSamples: Float32Array[] = [\n                    centerWave(chronoperc1finalsample),\n                    centerWave(synthkickfmsample),\n                    centerWave(woodclicksample),\n                    centerWave(acousticsnaresample)\n                ];\n                let chipWaveIndexOffset: number = 0;\n                for (const chipWaveSample of chipWaveSamples) {\n                    const chipWaveIndex: number = startIndex + chipWaveIndexOffset;\n                    Config.rawChipWaves[chipWaveIndex].samples = chipWaveSample;\n                    Config.rawRawChipWaves[chipWaveIndex].samples = chipWaveSample;\n                    Config.chipWaves[chipWaveIndex].samples = performIntegral(chipWaveSample);\n                    sampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.loaded;\n                    sampleLoadingState.samplesLoaded++;\n                    sampleLoadEvents.dispatchEvent(new SampleLoadedEvent(\n                        sampleLoadingState.totalSamples,\n                        sampleLoadingState.samplesLoaded\n                    ));\n                    chipWaveIndexOffset++;\n                }\n            });\n    }\n    else if (set == 2) {\n        // Create chip waves with the wrong sound.\n        const chipWaves = [\n            { name: \"cat\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -3 },\n            { name: \"gameboy\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 7 },\n            { name: \"mario\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 0 },\n            { name: \"drum\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 4 },\n            { name: \"yoshi\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -16 },\n            { name: \"star\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -16 },\n            { name: \"fire flower\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -1 },\n            { name: \"dog\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -1 },\n            { name: \"oink\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 3 },\n            { name: \"swan\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 1 },\n            { name: \"face\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -12 }\n        ];\n\n        sampleLoadingState.totalSamples += chipWaves.length;\n\n        // This assumes that Config.rawRawChipWaves and Config.chipWaves have\n        // the same number of elements.\n        const startIndex: number = Config.rawRawChipWaves.length;\n        for (const chipWave of chipWaves) {\n            const chipWaveIndex: number = Config.rawRawChipWaves.length;\n            const rawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\n            const rawRawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\n            const integratedChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultIntegratedSamples };\n            Config.rawRawChipWaves[chipWaveIndex] = rawRawChipWave;\n            Config.rawRawChipWaves.dictionary[chipWave.name] = rawRawChipWave;\n            Config.rawChipWaves[chipWaveIndex] = rawChipWave;\n            Config.rawChipWaves.dictionary[chipWave.name] = rawChipWave;\n            Config.chipWaves[chipWaveIndex] = integratedChipWave;\n            Config.chipWaves.dictionary[chipWave.name] = rawChipWave;\n            sampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.loading;\n            sampleLoadingState.urlTable[chipWaveIndex] = \"marioPaintboxSamples\";\n        }\n\n        loadScript(\"mario_paintbox_samples.js\")\n            .then(() => {\n                // Now put the right sounds in there after everything\n                // got loaded.\n                const chipWaveSamples: Float32Array[] = [\n                    centerWave(catpaintboxsample),\n                    centerWave(gameboypaintboxsample),\n                    centerWave(mariopaintboxsample),\n                    centerWave(drumpaintboxsample),\n                    centerWave(yoshipaintboxsample),\n                    centerWave(starpaintboxsample),\n                    centerWave(fireflowerpaintboxsample),\n                    centerWave(dogpaintbox),\n                    centerWave(oinkpaintbox),\n                    centerWave(swanpaintboxsample),\n                    centerWave(facepaintboxsample)\n                ];\n                let chipWaveIndexOffset: number = 0;\n                for (const chipWaveSample of chipWaveSamples) {\n                    const chipWaveIndex: number = startIndex + chipWaveIndexOffset;\n                    Config.rawChipWaves[chipWaveIndex].samples = chipWaveSample;\n                    Config.rawRawChipWaves[chipWaveIndex].samples = chipWaveSample;\n                    Config.chipWaves[chipWaveIndex].samples = performIntegral(chipWaveSample);\n                    sampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.loaded;\n                    sampleLoadingState.samplesLoaded++;\n                    sampleLoadEvents.dispatchEvent(new SampleLoadedEvent(\n                        sampleLoadingState.totalSamples,\n                        sampleLoadingState.samplesLoaded\n                    ));\n                    chipWaveIndexOffset++;\n                }\n            });\n    }\n    else {\n        console.log(\"invalid set of built-in samples\");\n    }\n}\n\nexport class Config {\n    // Params for post-processing compressor\n    static thresholdVal: number = -10;\n    static kneeVal: number = 40;\n    static ratioVal: number = 12;\n    static attackVal: number = 0;\n    static releaseVal: number = 0.25;\n\n    static willReloadForCustomSamples: boolean = false;\n\n    static jsonFormat: string = \"DragonBox\";\n    // public static thurmboxImportUrl: string = \"https://file.garden/ZMQ0Om5nmTe-x2hq/PandoraArchive%20Samples/\";\n\n    static readonly scales: DictionaryArray<Scale> = toNameMap([\n\n        //   C     Db      D     Eb      E      F     F#      G     Ab      A     Bb      B      C\n        { name: \"Free\", realName: \"chromatic\", flags: [true, true, true, true, true, true, true, true, true, true, true, true] }, // Free\n        { name: \"Major\", realName: \"ionian\", flags: [true, false, true, false, true, true, false, true, false, true, false, true] }, // Major\n        { name: \"Minor\", realName: \"aeolian\", flags: [true, false, true, true, false, true, false, true, true, false, true, false] }, // Minor\n        { name: \"Mixolydian\", realName: \"mixolydian\", flags: [true, false, true, false, true, true, false, true, false, true, true, false] }, // Mixolydian\n        { name: \"Lydian\", realName: \"lydian\", flags: [true, false, true, false, true, false, true, true, false, true, false, true] }, // Lydian\n        { name: \"Dorian\", realName: \"dorian\", flags: [true, false, true, true, false, true, false, true, false, true, true, false] }, // Dorian\n        { name: \"Phrygian\", realName: \"phrygian\", flags: [true, true, false, true, false, true, false, true, true, false, true, false] }, // Phrygian\n        { name: \"Locrian\", realName: \"locrian\", flags: [true, true, false, true, false, true, true, false, true, false, true, false] }, // Locrian\n        { name: \"Lydian Dominant\", realName: \"lydian dominant\", flags: [true, false, true, false, true, false, true, true, false, true, true, false] }, // Lydian Dominant\n        { name: \"Phrygian Dominant\", realName: \"phrygian dominant\", flags: [true, true, false, false, true, true, false, true, true, false, true, false] }, // Phrygian Dominant\n        { name: \"Harmonic Major\", realName: \"harmonic major\", flags: [true, false, true, false, true, true, false, true, true, false, false, true] }, // Harmonic Major\n        { name: \"Harmonic Minor\", realName: \"harmonic minor\", flags: [true, false, true, true, false, true, false, true, true, false, false, true] }, // Harmonic Minor\n        { name: \"Melodic Minor\", realName: \"melodic minor\", flags: [true, false, true, true, false, true, false, true, false, true, false, true] }, // Melodic Minor\n        { name: \"Blues Major\", realName: \"blues major\", flags: [true, false, true, true, true, false, false, true, false, true, false, false] }, // Blues Major\n        { name: \"Blues\", realName: \"blues\", flags: [true, false, false, true, false, true, true, true, false, false, true, false] }, // Blues\n        { name: \"Altered\", realName: \"altered\", flags: [true, true, false, true, true, false, true, false, true, false, true, false] }, // Altered\n        { name: \"Major Pentatonic\", realName: \"major pentatonic\", flags: [true, false, true, false, true, false, false, true, false, true, false, false] }, // Major Pentatonic\n        { name: \"Minor Pentatonic\", realName: \"minor pentatonic\", flags: [true, false, false, true, false, true, false, true, false, false, true, false] }, // Minor Pentatonic\n        { name: \"Whole Tone\", realName: \"whole tone\", flags: [true, false, true, false, true, false, true, false, true, false, true, false] }, // Whole Tone\n        { name: \"Octatonic\", realName: \"octatonic\", flags: [true, false, true, true, false, true, true, false, true, true, false, true] }, // Octatonic\n        { name: \"Hexatonic\", realName: \"hexatonic\", flags: [true, false, false, true, true, false, false, true, true, false, false, true] }, // Hexatonic\n        // TODO: remove these with 2.3\n        // modbox\n        { name: \"No Dabbing (MB)\", realName: \"no dabbing\", flags: [true, true, false, true, true, true, true, true, true, false, true, false] },\n        // todbox\n        { name: \"Jacked Toad (TB)\", realName: \"jacked toad\", flags: [true, false, true, true, false, true, true, true, true, false, true, true] },\n        { name: \"Test Scale (TB)\", realName: \"**t\", flags: [true, true, false, false, false, true, true, false, false, true, true, false] },\n        { name: \"Custom\", realName: \"custom\", flags: [true, false, true, true, false, false, false, true, true, false, true, true] }, // Custom? considering allowing this one to be be completely configurable\n    ]);\n    static readonly keys: DictionaryArray<Key> = toNameMap([\n        { name: \"C\", isWhiteKey: true, basePitch: 12 }, // C0 has index 12 on the MIDI scale. C7 is 96, and C9 is 120. C10 is barely in the audible range.\n        { name: \"C\u266F\", isWhiteKey: false, basePitch: 13 },\n        { name: \"D\", isWhiteKey: true, basePitch: 14 },\n        { name: \"D\u266F\", isWhiteKey: false, basePitch: 15 },\n        { name: \"E\", isWhiteKey: true, basePitch: 16 },\n        { name: \"F\", isWhiteKey: true, basePitch: 17 },\n        { name: \"F\u266F\", isWhiteKey: false, basePitch: 18 },\n        { name: \"G\", isWhiteKey: true, basePitch: 19 },\n        { name: \"G\u266F\", isWhiteKey: false, basePitch: 20 },\n        { name: \"A\", isWhiteKey: true, basePitch: 21 },\n        { name: \"A\u266F\", isWhiteKey: false, basePitch: 22 },\n        { name: \"B\", isWhiteKey: true, basePitch: 23 },\n        // { name: \"C+\", isWhiteKey: false, basePitch: 24 },\n        //taken from todbox, called \"B#\" for some reason lol\n        // { name: \"G- (actually F#-)\", isWhiteKey: false, basePitch: 6 },\n        // { name: \"C-\", isWhiteKey: true, basePitch: 0 },\n        //brucebox\n        //g- isn't actually g-???\n        // { name: \"oh no (F-)\", isWhiteKey: true, basePitch: 5 },\n        //shitbox\n    ]);\n    static readonly blackKeyNameParents: ReadonlyArray<number> = [-1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1];\n    static readonly tempoMin: number = 1;\n    static readonly tempoMax: number = 2000;\n    static readonly octaveMin: number = -2;\n    static readonly octaveMax: number = 2;\n    static readonly echoDelayRange: number = 24;\n    static readonly echoDelayStepTicks: number = 4;\n    static readonly echoSustainRange: number = 24;\n    static readonly echoShelfHz: number = 4000.0; // The cutoff freq of the shelf filter that is used to decay echoes.\n    static readonly echoShelfGain: number = Math.pow(2.0, -0.5);\n    static readonly reverbShelfHz: number = 8000.0; // The cutoff freq of the shelf filter that is used to decay reverb.\n    static readonly reverbShelfGain: number = Math.pow(2.0, -1.5);\n    static readonly reverbRange: number = 32;\n    static readonly reverbDelayBufferSize: number = 16384; // TODO: Compute a buffer size based on sample rate.\n    static readonly reverbDelayBufferMask: number = Config.reverbDelayBufferSize - 1; // TODO: Compute a buffer size based on sample rate.\n    static readonly beatsPerBarMin: number = 1;\n    static readonly beatsPerBarMax: number = 64;\n    static readonly barCountMin: number = 1;\n    static readonly barCountMax: number = 1024;\n    static readonly instrumentCountMin: number = 1;\n    static readonly layeredInstrumentCountMax: number = 10;\n    static readonly patternInstrumentCountMax: number = 10;\n    static readonly partsPerBeat: number = 24;\n    static readonly ticksPerPart: number = 2;\n    static readonly ticksPerArpeggio: number = 3;\n    static readonly arpeggioPatterns: ReadonlyArray<ReadonlyArray<number>> = [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7]];\n    static readonly rhythms: DictionaryArray<Rhythm> = toNameMap([\n        { name: \"\u00F73 (triplets)\", stepsPerBeat: 3, /*ticksPerArpeggio: 4, arpeggioPatterns: [[0], [0, 0, 1, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: [/*0*/ 5, /*8*/ 12, /*16*/ 18 /*24*/] },\n        { name: \"\u00F74 (standard)\", stepsPerBeat: 4, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 0, 1, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: [/*0*/ 3, /*6*/ 9, /*12*/ 17, /*18*/ 21 /*24*/] },\n        { name: \"\u00F76\", stepsPerBeat: 6, /*ticksPerArpeggio: 4, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\n        { name: \"\u00F78\", stepsPerBeat: 8, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\n        { name: \"\u00F712\", stepsPerBeat: 12, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1]]*/ roundUpThresholds: null },\n        { name: \"freehand\", stepsPerBeat: 24, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\n    ]);\n\n    static readonly instrumentTypeNames: ReadonlyArray<string> = [\"chip\", \"FM\", \"noise\", \"spectrum\", \"drumset\", \"harmonics\", \"PWM\", \"Picked String\", \"supersaw\", \"custom chip\", \"mod\", \"FM6op\"];\n    static readonly instrumentTypeHasSpecialInterval: ReadonlyArray<boolean> = [true, true, false, false, false, true, false, false, false, false, false];\n    static readonly chipBaseExpression: number = 0.03375; // Doubled by unison feature, but affected by expression adjustments per unison setting and wave shape. Custom chip is multiplied by 0.05 in instrumentState.updateWaves\n    static readonly fmBaseExpression: number = 0.03;\n    static readonly noiseBaseExpression: number = 0.19;\n    static readonly spectrumBaseExpression: number = 0.3; // Spectrum can be in pitch or noise channels, the expression is doubled for noise.\n    static readonly drumsetBaseExpression: number = 0.45; // Drums tend to be loud but brief!\n    static readonly harmonicsBaseExpression: number = 0.025;\n    static readonly pwmBaseExpression: number = 0.04725; // It's actually closer to half of this, the synthesized pulse amplitude range is only .5 to -.5, but also note that the fundamental sine partial amplitude of a square wave is 4/\u03C0 times the measured square wave amplitude.\n    static readonly supersawBaseExpression: number = 0.061425; // It's actually closer to half of this, the synthesized sawtooth amplitude range is only .5 to -.5.\n    static readonly pickedStringBaseExpression: number = 0.025; // Same as harmonics.\n    static readonly distortionBaseVolume: number = 0.011; // Distortion is not affected by pitchDamping, which otherwise approximately halves expression for notes around the middle of the range.\n    static readonly bitcrusherBaseVolume: number = 0.010; // Also not affected by pitchDamping, used when bit crushing is maxed out (aka \"1-bit\" output).\n    static readonly granularOutputLoudnessCompensation: number = 0.5; //compensate for multiple grains playing at once\n    static rawChipWaves: DictionaryArray<ChipWave> = toNameMap([\n        { name: \"rounded\", expression: 0.94, samples: centerWave([0.0, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.85, 0.9, 0.95, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.95, 0.9, 0.85, 0.8, 0.7, 0.6, 0.5, 0.4, 0.2, 0.0, -0.2, -0.4, -0.5, -0.6, -0.7, -0.8, -0.85, -0.9, -0.95, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -0.95, -0.9, -0.85, -0.8, -0.7, -0.6, -0.5, -0.4, -0.2]) },\n        { name: \"triangle\", expression: 1.0, samples: centerWave([1.0 / 15.0, 3.0 / 15.0, 5.0 / 15.0, 7.0 / 15.0, 9.0 / 15.0, 11.0 / 15.0, 13.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 13.0 / 15.0, 11.0 / 15.0, 9.0 / 15.0, 7.0 / 15.0, 5.0 / 15.0, 3.0 / 15.0, 1.0 / 15.0, -1.0 / 15.0, -3.0 / 15.0, -5.0 / 15.0, -7.0 / 15.0, -9.0 / 15.0, -11.0 / 15.0, -13.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -13.0 / 15.0, -11.0 / 15.0, -9.0 / 15.0, -7.0 / 15.0, -5.0 / 15.0, -3.0 / 15.0, -1.0 / 15.0]) },\n        { name: \"square\", expression: 0.5, samples: centerWave([1.0, -1.0]) },\n        { name: \"1/4 pulse\", expression: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0]) },\n        { name: \"1/8 pulse\", expression: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },\n        { name: \"sawtooth\", expression: 0.65, samples: centerWave([1.0 / 31.0, 3.0 / 31.0, 5.0 / 31.0, 7.0 / 31.0, 9.0 / 31.0, 11.0 / 31.0, 13.0 / 31.0, 15.0 / 31.0, 17.0 / 31.0, 19.0 / 31.0, 21.0 / 31.0, 23.0 / 31.0, 25.0 / 31.0, 27.0 / 31.0, 29.0 / 31.0, 31.0 / 31.0, -31.0 / 31.0, -29.0 / 31.0, -27.0 / 31.0, -25.0 / 31.0, -23.0 / 31.0, -21.0 / 31.0, -19.0 / 31.0, -17.0 / 31.0, -15.0 / 31.0, -13.0 / 31.0, -11.0 / 31.0, -9.0 / 31.0, -7.0 / 31.0, -5.0 / 31.0, -3.0 / 31.0, -1.0 / 31.0]) },\n        { name: \"double saw\", expression: 0.5, samples: centerWave([0.0, -0.2, -0.4, -0.6, -0.8, -1.0, 1.0, -0.8, -0.6, -0.4, -0.2, 1.0, 0.8, 0.6, 0.4, 0.2]) },\n        { name: \"double pulse\", expression: 0.4, samples: centerWave([1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0]) },\n        { name: \"spiky\", expression: 0.4, samples: centerWave([1.0, -1.0, 1.0, -1.0, 1.0, 0.0]) },\n        { name: \"sine\", expression: 0.88, samples: centerAndNormalizeWave([8.0, 9.0, 11.0, 12.0, 13.0, 14.0, 15.0, 15.0, 15.0, 15.0, 14.0, 14.0, 13.0, 11.0, 10.0, 9.0, 7.0, 6.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 4.0, 5.0, 6.0]) },\n        { name: \"flute\", expression: 0.8, samples: centerAndNormalizeWave([3.0, 4.0, 6.0, 8.0, 10.0, 11.0, 13.0, 14.0, 15.0, 15.0, 14.0, 13.0, 11.0, 8.0, 5.0, 3.0]) },\n        { name: \"harp\", expression: 0.8, samples: centerAndNormalizeWave([0.0, 3.0, 3.0, 3.0, 4.0, 5.0, 5.0, 6.0, 7.0, 8.0, 9.0, 11.0, 11.0, 13.0, 13.0, 15.0, 15.0, 14.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 7.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0]) },\n        { name: \"sharp clarinet\", expression: 0.38, samples: centerAndNormalizeWave([0.0, 0.0, 0.0, 1.0, 1.0, 8.0, 8.0, 9.0, 9.0, 9.0, 8.0, 8.0, 8.0, 8.0, 8.0, 9.0, 9.0, 7.0, 9.0, 9.0, 10.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) },\n        { name: \"soft clarinet\", expression: 0.45, samples: centerAndNormalizeWave([0.0, 1.0, 5.0, 8.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 11.0, 11.0, 12.0, 13.0, 12.0, 10.0, 9.0, 7.0, 6.0, 4.0, 3.0, 3.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]) },\n        { name: \"alto sax\", expression: 0.3, samples: centerAndNormalizeWave([5.0, 5.0, 6.0, 4.0, 3.0, 6.0, 8.0, 7.0, 2.0, 1.0, 5.0, 6.0, 5.0, 4.0, 5.0, 7.0, 9.0, 11.0, 13.0, 14.0, 14.0, 14.0, 14.0, 13.0, 10.0, 8.0, 7.0, 7.0, 4.0, 3.0, 4.0, 2.0]) },\n        { name: \"bassoon\", expression: 0.35, samples: centerAndNormalizeWave([9.0, 9.0, 7.0, 6.0, 5.0, 4.0, 4.0, 4.0, 4.0, 5.0, 7.0, 8.0, 9.0, 10.0, 11.0, 13.0, 13.0, 11.0, 10.0, 9.0, 7.0, 6.0, 4.0, 2.0, 1.0, 1.0, 1.0, 2.0, 2.0, 5.0, 11.0, 14.0]) },\n        { name: \"trumpet\", expression: 0.22, samples: centerAndNormalizeWave([10.0, 11.0, 8.0, 6.0, 5.0, 5.0, 5.0, 6.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 7.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0, 8.0, 9.0, 11.0, 14.0]) },\n        { name: \"electric guitar\", expression: 0.2, samples: centerAndNormalizeWave([11.0, 12.0, 12.0, 10.0, 6.0, 6.0, 8.0, 0.0, 2.0, 4.0, 8.0, 10.0, 9.0, 10.0, 1.0, 7.0, 11.0, 3.0, 6.0, 6.0, 8.0, 13.0, 14.0, 2.0, 0.0, 12.0, 8.0, 4.0, 13.0, 11.0, 10.0, 13.0]) },\n        { name: \"organ\", expression: 0.2, samples: centerAndNormalizeWave([11.0, 10.0, 12.0, 11.0, 14.0, 7.0, 5.0, 5.0, 12.0, 10.0, 10.0, 9.0, 12.0, 6.0, 4.0, 5.0, 13.0, 12.0, 12.0, 10.0, 12.0, 5.0, 2.0, 2.0, 8.0, 6.0, 6.0, 5.0, 8.0, 3.0, 2.0, 1.0]) },\n        { name: \"pan flute\", expression: 0.35, samples: centerAndNormalizeWave([1.0, 4.0, 7.0, 6.0, 7.0, 9.0, 7.0, 7.0, 11.0, 12.0, 13.0, 15.0, 13.0, 11.0, 11.0, 12.0, 13.0, 10.0, 7.0, 5.0, 3.0, 6.0, 10.0, 7.0, 3.0, 3.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0]) },\n        { name: \"glitch\", expression: 0.5, samples: centerWave([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0]) },\n        { name: \"trapezoid\", expression: 1.0, samples: centerWave([1.0 / 15.0, 6.0 / 15.0, 10.0 / 15.0, 14.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 14.0 / 15.0, 10.0 / 15.0, 6.0 / 15.0, 1.0 / 15.0, -1.0 / 15.0, -6.0 / 15.0, -10.0 / 15.0, -14.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -14.0 / 15.0, -10.0 / 15.0, -6.0 / 15.0, -1.0 / 15.0,]) },\n        // modbox\n        { name: \"modbox 10% pulse\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },\n        { name: \"modbox sunsoft bass\", expression: 1.0, samples: centerAndNormalizeWave([0.0, 0.1875, 0.3125, 0.5625, 0.5, 0.75, 0.875, 1.0, 1.0, 0.6875, 0.5, 0.625, 0.625, 0.5, 0.375, 0.5625, 0.4375, 0.5625, 0.4375, 0.4375, 0.3125, 0.1875, 0.1875, 0.375, 0.5625, 0.5625, 0.5625, 0.5625, 0.5625, 0.4375, 0.25, 0.0]) },\n        { name: \"modbox loud pulse\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 0.7, 0.1, 0.1, 0, 0, 0, 0, 0, 0.1, 0.2, 0.15, 0.25, 0.125, 0.215, 0.345, 4.0]) },\n        { name: \"modbox sax\", expression: 0.5, samples: centerAndNormalizeWave([1.0 / 15.0, 3.0 / 15.0, 5.0 / 15.0, 9.0, 0.06]) },\n        { name: \"modbox guitar\", expression: 0.5, samples: centerAndNormalizeWave([-0.5, 3.5, 3.0, -0.5, -0.25, -1.0]) },\n        { name: \"modbox sine\", expression: 0.5, samples: centerAndNormalizeWave([0.0, 0.05, 0.125, 0.2, 0.25, 0.3, 0.425, 0.475, 0.525, 0.625, 0.675, 0.725, 0.775, 0.8, 0.825, 0.875, 0.9, 0.925, 0.95, 0.975, 0.98, 0.99, 0.995, 1, 0.995, 0.99, 0.98, 0.975, 0.95, 0.925, 0.9, 0.875, 0.825, 0.8, 0.775, 0.725, 0.675, 0.625, 0.525, 0.475, 0.425, 0.3, 0.25, 0.2, 0.125, 0.05, 0.0, -0.05, -0.125, -0.2, -0.25, -0.3, -0.425, -0.475, -0.525, -0.625, -0.675, -0.725, -0.775, -0.8, -0.825, -0.875, -0.9, -0.925, -0.95, -0.975, -0.98, -0.99, -0.995, -1, -0.995, -0.99, -0.98, -0.975, -0.95, -0.925, -0.9, -0.875, -0.825, -0.8, -0.775, -0.725, -0.675, -0.625, -0.525, -0.475, -0.425, -0.3, -0.25, -0.2, -0.125, -0.05]) },\n        { name: \"modbox atari bass\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0]) },\n        { name: \"modbox atari pulse\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]) },\n        { name: \"modbox 1% pulse\", expression: 0.5, samples: centerAndNormalizeWave},\n        { name: \"modbox curved sawtooth\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 1.0 / 2.0, 1.0 / 3.0, 1.0 / 4.0]) },\n        { name: \"modbox viola\", expression: 0.45, samples: centerAndNormalizeWave([-0.9, -1.0, -0.85, -0.775, -0.7, -0.6, -0.5, -0.4, -0.325, -0.225, -0.2, -0.125, -0.1, -0.11, -0.125, -0.15, -0.175, -0.18, -0.2, -0.21, -0.22, -0.21, -0.2, -0.175, -0.15, -0.1, -0.5, 0.75, 0.11, 0.175, 0.2, 0.25, 0.26, 0.275, 0.26, 0.25, 0.225, 0.2, 0.19, 0.18, 0.19, 0.2, 0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.275, 0.28, 0.29, 0.3, 0.29, 0.28, 0.27, 0.26, 0.25, 0.225, 0.2, 0.175, 0.15, 0.1, 0.075, 0.0, -0.01, -0.025, 0.025, 0.075, 0.2, 0.3, 0.475, 0.6, 0.75, 0.85, 0.85, 1.0, 0.99, 0.95, 0.8, 0.675, 0.475, 0.275, 0.01, -0.15, -0.3, -0.475, -0.5, -0.6, -0.71, -0.81, -0.9, -1.0, -0.9]) },\n        { name: \"modbox brass\", expression: 0.45, samples: centerAndNormalizeWave([-1.0, -0.95, -0.975, -0.9, -0.85, -0.8, -0.775, -0.65, -0.6, -0.5, -0.475, -0.35, -0.275, -0.2, -0.125, -0.05, 0.0, 0.075, 0.125, 0.15, 0.20, 0.21, 0.225, 0.25, 0.225, 0.21, 0.20, 0.19, 0.175, 0.125, 0.10, 0.075, 0.06, 0.05, 0.04, 0.025, 0.04, 0.05, 0.10, 0.15, 0.225, 0.325, 0.425, 0.575, 0.70, 0.85, 0.95, 1.0, 0.9, 0.675, 0.375, 0.2, 0.275, 0.4, 0.5, 0.55, 0.6, 0.625, 0.65, 0.65, 0.65, 0.65, 0.64, 0.6, 0.55, 0.5, 0.4, 0.325, 0.25, 0.15, 0.05, -0.05, -0.15, -0.275, -0.35, -0.45, -0.55, -0.65, -0.7, -0.78, -0.825, -0.9, -0.925, -0.95, -0.975]) },\n        { name: \"modbox acoustic bass\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 0.0, 0.1, -0.1, -0.2, -0.4, -0.3, -1.0]) },\n        { name: \"modbox lyre\", expression: 0.45, samples: centerAndNormalizeWave([1.0, -1.0, 4.0, 2.15, 4.13, 5.15, 0.0, -0.05, 1.0]) },\n        { name: \"modbox ramp pulse\", expression: 0.5, samples: centerAndNormalizeWave([6.1, -2.9, 1.4, -2.9]) },\n        { name: \"modbox piccolo\", expression: 0.5, samples: centerAndNormalizeWave([1, 4, 2, 1, -0.1, -1, -0.12]) },\n        { name: \"modbox squaretooth\", expression: 0.5, samples: centerAndNormalizeWave([0.2, 1.0, 2.6, 1.0, 0.0, -2.4]) },\n        { name: \"modbox flatline\", expression: 1.0, samples: centerAndNormalizeWave([1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]) },\n        { name: \"modbox pnryshk a (u5)\", expression: 0.4, samples: centerAndNormalizeWave([1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0]) },\n        { name: \"modbox pnryshk b (riff)\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -0.9, 0.8, -0.7, 0.6, -0.5, 0.4, -0.3, 0.2, -0.1, 0.0, -0.1, 0.2, -0.3, 0.4, -0.5, 0.6, -0.7, 0.8, -0.9, 1.0]) },\n        // sandbox\n        { name: \"sandbox shrill lute\", expression: 0.94, samples: centerAndNormalizeWave([1.0, 1.5, 1.25, 1.2, 1.3, 1.5]) },\n        { name: \"sandbox bassoon\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]) },\n        { name: \"sandbox shrill bass\", expression: 0.5, samples: centerAndNormalizeWave([0, 1, 0, 0, 1, 0, 1, 0, 0, 0]) },\n        { name: \"sandbox nes pulse\", expression: 0.4, samples: centerAndNormalizeWave([2.1, -2.2, 1.2, 3]) },\n        { name: \"sandbox saw bass\", expression: 0.25, samples: centerAndNormalizeWave([1, 1, 1, 1, 0, 2, 1, 2, 3, 1, -2, 1, 4, 1, 4, 2, 1, 6, -3, 4, 2, 1, 5, 1, 4, 1, 5, 6, 7, 1, 6, 1, 4, 1, 9]) },\n        { name: \"sandbox euphonium\", expression: 0.3, samples: centerAndNormalizeWave([0, 1, 2, 1, 2, 1, 4, 2, 5, 0, -2, 1, 5, 1, 2, 1, 2, 4, 5, 1, 5, -2, 5, 10, 1]) },\n        { name: \"sandbox shrill pulse\", expression: 0.3, samples: centerAndNormalizeWave([4 - 2, 0, 4, 1, 4, 6, 7, 3]) },\n        { name: \"sandbox r-sawtooth\", expression: 0.2, samples: centerAndNormalizeWave([6.1, -2.9, 1.4, -2.9]) },\n        { name: \"sandbox recorder\", expression: 0.2, samples: centerAndNormalizeWave([5.0, -5.1, 4.0, -4.1, 3.0, -3.1, 2.0, -2.1, 1.0, -1.1, 6.0]) },\n        { name: \"sandbox narrow saw\", expression: 1.2, samples: centerAndNormalizeWave([0.1, 0.13 / -0.1, 0.13 / -0.3, 0.13 / -0.5, 0.13 / -0.7, 0.13 / -0.9, 0.13 / -0.11, 0.13 / -0.31, 0.13 / -0.51, 0.13 / -0.71, 0.13 / -0.91, 0.13 / -0.12, 0.13 / -0.32, 0.13 / -0.52, 0.13 / -0.72, 0.13 / -0.92, 0.13 / -0.13, 0.13 / 0.13, 0.13 / 0.92, 0.13 / 0.72, 0.13 / 0.52, 0.13 / 0.32, 0.13 / 0.12, 0.13 / 0.91, 0.13 / 0.71, 0.13 / 0.51, 0.13 / 0.31, 0.13 / 0.11, 0.13 / 0.9, 0.13 / 0.7, 0.13 / 0.5, 0.13 / 0.3, 0.13]) },\n        { name: \"sandbox deep square\", expression: 1.0, samples: centerAndNormalizeWave([1.0, 2.25, 1.0, -1.0, -2.25, -1.0]) },\n        { name: \"sandbox ring pulse\", expression: 1.0, samples: centerAndNormalizeWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },\n        { name: \"sandbox double sine\", expression: 1.0, samples: centerAndNormalizeWave([1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.0, -1.0, -1.1, -1.2, -1.3, -1.4, -1.5, -1.6, -1.7, -1.8, -1.9, -1.8, -1.7, -1.6, -1.5, -1.4, -1.3, -1.2, -1.1, -1.0]) },\n        { name: \"sandbox contrabass\", expression: 0.5, samples: centerAndNormalizeWave([4.20, 6.9, 1.337, 6.66]) },\n        { name: \"sandbox double bass\", expression: 0.4, samples: centerAndNormalizeWave([0.0, 0.1875, 0.3125, 0.5625, 0.5, 0.75, 0.875, 1.0, -1.0, -0.6875, -0.5, -0.625, -0.625, -0.5, -0.375, -0.5625, -0.4375, -0.5625, -0.4375, -0.4375, -0.3125, -0.1875, 0.1875, 0.375, 0.5625, -0.5625, 0.5625, 0.5625, 0.5625, 0.4375, 0.25, 0.0]) },\n        // haileybox\n        { name: \"haileybox test1\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 0.5, -1.0]) },\n        //brucebox\n        { name: \"brucebox pokey 4bit lfsr\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, -1.0]) },\n        { name: \"brucebox pokey 5step bass\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, 1.0, -1.0, 1.0]) },\n        { name: \"brucebox isolated spiky\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, 1.0, -1.0, 1.0, -1.0]) },\n        // nerdbox\n        { name: \"nerdbox unnamed 1\", expression: 0.5, samples: centerAndNormalizeWave([0.2, 0.8 / 0.2, 0.7, -0.4, -1.0, 0.5, -0.5 / 0.6]) },\n        { name: \"nerdbox unnamed 2\", expression: 0.5, samples: centerAndNormalizeWave([2.0, 5.0 / 55.0, -9.0, 6.5 / 6.5, -55.0, 18.5 / -26.0]) },\n        // zefbox\n        { name: \"zefbox semi-square\", expression: 1.0, samples: centerAndNormalizeWave([1.0, 1.5, 2.0, 2.5, 2.5, 2.5, 2.0, 1.5, 1.0]) },\n        { name: \"zefbox deep square\", expression: 1.0, samples: centerAndNormalizeWave([1.0, 2.25, 1.0, -1.0, -2.25, -1.0]) },\n        { name: \"zefbox squaretal\", expression: 0.7, samples: centerAndNormalizeWave([1.5, 1.0, 1.5, -1.5, -1.0, -1.5]) },\n        { name: \"zefbox saw wide\", expression: 0.65, samples: centerAndNormalizeWave([0.0, -0.4, -0.8, -1.2, -1.6, -2.0, 0.0, -0.4, -0.8, -1.2, -1.6]) },\n        { name: \"zefbox saw narrow\", expression: 0.65, samples: centerAndNormalizeWave([1, 0.5, 1, 0.5, 1, 0.5, 1, 2, 1, 2, 1]) },\n        { name: \"zefbox deep sawtooth\", expression: 0.5, samples: centerAndNormalizeWave([0, 2, 3, 4, 4.5, 5, 5.5, 6, 6.25, 6.5, 6.75, 7, 6.75, 6.5, 6.25, 6, 5.5, 5, 4.5, 4, 3, 2, 1]) },\n        { name: \"zefbox sawtal\", expression: 0.3, samples: centerAndNormalizeWave([1.5, 1.0, 1.25, -0.5, 1.5, -0.5, 0.0, -1.5, 1.5, 0.0, 0.5, -1.5, 0.5, 1.25, -1.0, -1.5]) },\n        { name: \"zefbox deep sawtal\", expression: 0.7, samples: centerAndNormalizeWave([0.75, 0.25, 0.5, -0.5, 0.5, -0.5, -0.25, -0.75]) },\n        { name: \"zefbox pulse\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -2.0, -2.0, -1.5, -1.5, -1.25, -1.25, -1.0, -1.0]) },\n        { name: \"zefbox triple pulse\", expression: 0.4, samples: centerAndNormalizeWave([1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.5, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.5]) },\n        { name: \"zefbox high pulse\", expression: 0.2, samples: centerAndNormalizeWave([1, -2, 2, -3, 3, -4, 5, -4, 3, -3, 2, -2, 1]) },\n        { name: \"zefbox deep pulse\", expression: 0.2, samples: centerAndNormalizeWave([1, 2, 2, -2, -2, -3, -4, -4, -5, -5, -5, -5, 0, -1, -2]) },\n        // wackybox\n        { name: \"wackybox guitar string\", expression: 0.6, samples: centerAndNormalizeWave([0, 63, 63, 63, 63, 19, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 11, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 27, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 34, 63, 63, 63, 63]) },\n        { name: \"wackybox intense\", expression: 0.6, samples: centerAndNormalizeWave([36, 25, 33, 35, 18, 51, 22, 40, 27, 37, 31, 33, 25, 29, 41, 23, 31, 31, 45, 20, 37, 23, 29, 26, 42, 29, 33, 26, 31, 27, 40, 25, 40, 26, 37, 24, 41, 32, 0, 32, 33, 29, 32, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31]) },\n        { name: \"wackybox buzz wave\", expression: 0.6, samples: centerAndNormalizeWave([0, 1, 1, 2, 4, 4, 4, 4, 5, 5, 6, 6, 6, 7, 8, 8, 8, 9, 9, 9, 9, 9, 9, 8, 8, 8, 11, 15, 23, 62, 61, 60, 58, 56, 56, 54, 53, 52, 50, 49, 48, 47, 47, 45, 45, 45, 44, 44, 43, 43, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 53]) },\n        // todbox\n        { name: \"todbox 1/3 pulse\", expression: 0.5, samples: centerWave([1.0, -1.0, -1.0]) },\n        { name: \"todbox 1/5 pulse\", expression: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0, -1.0]) },\n        { name: \"todbox slap bass\", expression: 0.5, samples: centerAndNormalizeWave([1, 0.5, 0, 0.5, 1.25, 0.5, -0.25, 0.1, -0.1, 0.1, 1.1, 2.1, 3, 3.5, 2.9, 3.3, 2.7, 2.9, 2.3, 2, 1.9, 1.8, 1, 0.7, 0.9, 0.8, 0.4, 0.1, 0.0, 0.2, 0.4, 0.6, 0.5, 0.8]) },\n        { name: \"todbox harsh wave\", expression: 0.45, samples: centerAndNormalizeWave([1.0, -1.0, -1.0, -1.0, 0.5, 0.5, 0.5, 0.7, 0.39, 1.3, 0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },\n        { name: \"todbox accordian\", expression: 0.5, samples: centerAndNormalizeWave([0, 1, 1, 2, 2, 1.5, 1.5, 0.8, 0, -2, -3.25, -4, -4.5, -5.5, -6, -5.75, -5.5, -5, -5, -5, -6, -6, -6, -5, -4, -3, -2, -1, 0.75, 1, 2, 3, 4, 5, 6, 6.5, 7.5, 8, 7.75, 6, 5.25, 5, 5, 5, 5, 5, 4.25, 3.75, 3.25, 2.75, 1.25, -0.75, -2, -0.75, 1.25, 1.25, 2, 2, 2, 2, 1.5, -1, -2, -1, 1.5, 2, 2.75, 2.75, 2.75, 3, 2.75, -1, -2, -2.5, -2, -1, -2.25, -2.75, -2, -3, -1.75, 1, 2, 3.5, 4, 5.25, 6, 8, 9.75, 10, 9.5, 9, 8.5, 7.5, 6.5, 5.25, 5, 4.5, 4, 4, 4, 3.25, 2.5, 2, 1, -0.5, -2, -3.5, -4, -4, -4, -3.75, -3, -2, -1]) },\n        // todbox beta\n        { name: \"todbox beta banana wave\", expression: 0.8, samples: centerAndNormalizeWave([0.0, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.85, 0.9, 0.95, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.95, 0.9, 0.85, 0.8, 0.7, 0.6, 0.5, 0.4, 0.2, 0.0]) },\n        { name: \"todbox beta test wave\", expression: 0.5, samples: centerAndNormalizeWave([56, 0, -52, 16, 3, 3, 2, -35, 20, 147, -53, 0, 0, 5, -6]) },\n        { name: \"todbox beta real snare\", expression: 1.0, samples: centerAndNormalizeWave([0.00000, -0.01208, -0.02997, -0.04382, -0.06042, -0.07529, -0.09116, -0.10654, -0.12189, -0.13751, -0.15289, -0.16849, -0.18387, -0.19974, -0.21484, -0.23071, -0.24557, -0.26144, -0.27731, -0.29141, -0.30350, -0.32416, -0.34406, -0.32947, -0.31158, -0.33725, -0.37579, -0.39746, -0.40201, -0.40906, -0.44180, -0.47229, -0.47379, -0.47733, -0.45239, -0.33954, -0.22894, -0.22443, -0.32138, -0.46371, -0.57178, -0.61081, -0.59998, -0.61459, -0.62189, -0.43979, -0.19217, -0.12643, -0.17252, -0.20956, -0.20981, -0.19217, -0.22845, -0.34332, -0.50629, -0.64307, -0.72922, -0.81384, -0.87857, -0.90149, -0.88687, -0.86169, -0.87781, -0.80478, -0.52493, -0.31308, -0.33249, -0.39395, -0.39017, -0.30301, -0.19949, -0.13071, -0.02493, 0.14307, 0.34961, 0.52542, 0.63223, 0.68613, 0.74710, 0.87305, 0.98184, 0.98889, 0.97052, 0.99066, 0.99747, 0.99344, 0.99469, 0.99393, 0.99570, 0.99393, 0.99521, 0.99469, 0.99420, 0.99521, 0.99420, 0.99521, 0.99469, 0.99469, 0.99521, 0.99420, 0.99545, 0.99445, 0.99469, 0.99493, 0.99420, 0.99521, 0.99393, 0.99493, 0.99469, 0.99445, 0.99570, 0.99445, 0.99521, 0.99469, 0.99469, 0.99521, 0.99420, 0.99545, 0.99445, 0.99445, 0.99493, 0.99420, 0.99545, 0.99420, 0.99493, 0.99493, 0.99420, 0.99545, 0.99445, 0.99521, 0.99469, 0.99445, 0.99545, 0.99368, 0.99393, 0.99445, 0.99268, 0.97983, 0.97229, 0.95944, 0.88486, 0.76773, 0.64481, 0.53098, 0.39847, 0.19318, -0.03827, -0.20325, -0.39319, -0.68765, -0.88461, -0.93448, -0.96069, -0.97681, -0.98715, -0.99042, -0.99142, -0.99091, -0.99142, -0.99219, -0.99091, -0.99219, -0.99066, -0.99142, -0.99142, -0.99118, -0.99191, -0.99066, -0.99191, -0.99142, -0.99142, -0.99191, -0.99091, -0.99219, -0.99118, -0.99142, -0.99167, -0.99091, -0.99219, -0.99091, -0.99167, -0.99142, -0.99091, -0.99191, -0.99091, -0.99191, -0.99142, -0.99118, -0.99191, -0.99066, -0.99191, -0.99118, -0.99142, -0.99191, -0.99066, -0.99191, -0.99091, -0.99167, -0.99191, -0.99118, -0.99219, -0.99091, -0.99191, -0.99142, -0.99142, -0.99243, -0.98865, -0.98764, -0.99219, -0.98083, -0.92517, -0.92770, -0.91486, -0.59042, -0.15189, 0.02945, 0.05667, 0.06195, 0.00629, -0.18008, -0.56497, -0.88010, -0.92770, -0.92871, -0.97705, -0.99167, -0.98663, -0.99118, -0.99042, -0.99219, -0.99142, -0.99118, -0.98941, -0.99219, -1.00000, -0.97580, -0.95993, -0.99948, -0.98236, -0.84659, -0.74860, -0.70679, -0.59747, -0.48035, -0.41687, -0.36826, -0.29745, -0.18185, -0.06219, 0.02164, 0.07907, 0.13123, 0.18033, 0.19620, 0.15692, 0.14053, 0.20251, 0.27530, 0.30905, 0.29092, 0.27252, 0.30402, 0.32416, 0.32214, 0.35239, 0.39670, 0.43198, 0.49420, 0.58487, 0.64154, 0.65967, 0.67050, 0.67026, 0.66522, 0.65540, 0.66119, 0.70627, 0.75842, 0.78738, 0.78940, 0.78763, 0.80402, 0.85944, 0.94559, 0.98990, 0.98160, 0.98007, 0.99368, 0.99393, 0.98538, 0.97580, 0.97101, 0.93802, 0.81812, 0.64633, 0.46649, 0.28613, 0.14685, 0.08966, 0.12543, 0.20325, 0.24557, 0.18866, 0.02795, -0.20175, -0.44205, -0.58713, -0.57629, -0.41385, -0.14255, 0.18033, 0.47882, 0.68311, 0.72314, 0.62064, 0.48309, 0.43073, 0.53577, 0.72794, 0.90250, 0.97354, 0.97000, 0.98083, 0.99191, 0.99319, 0.99493, 0.99393, 0.99521, 0.99393, 0.99545, 0.99420, 0.99493, 0.99493, 0.99445, 0.99545, 0.99420, 0.99545, 0.99243, 0.98917, 0.98386, 0.97781, 0.95844, 0.89066, 0.81561, 0.78134, 0.77277, 0.75995, 0.73022, 0.67126, 0.57178, 0.47000, 0.38361, 0.29419, 0.20703, 0.14734, 0.15866, 0.25162, 0.35818, 0.45062, 0.56750, 0.69748, 0.81232, 0.89697, 0.95062, 0.97656, 0.98615, 0.99191, 0.99219, 0.99243, 0.99368, 0.99368, 0.97028, 0.95566, 0.94559, 0.82617, 0.59973, 0.38361, 0.23901, 0.15338, 0.12921, 0.11206, 0.04382, -0.12946, -0.43552, -0.72644, -0.89847, -0.95465, -0.95541, -0.97229, -0.99268, -0.99319, -0.98840, -0.99142, -0.99167, -0.99091, -0.98840, -0.98965, -0.99368, -0.97455, -0.95010, -0.94684, -0.96219, -0.98514, -0.99243, -0.98889, -0.98917, -0.99142, -0.99219, -0.99091, -0.99191, -0.99142, -0.99142, -0.99191, -0.99066, -0.99167, -0.99091, -0.99142, -0.99191, -0.99091, -0.99191, -0.99091, -0.99167, -0.99167, -0.99091, -0.99219, -0.99091, -0.99191, -0.99142, -0.99118, -0.99191, -0.99066, -0.99191, -0.99091, -0.99118, -0.99243, -0.98941, -0.98462, -0.96976, -0.96320, -0.96194, -0.87305, -0.66196, -0.44809, -0.29495, -0.18085, -0.11813, -0.11334, -0.18564, -0.34885, -0.58237, -0.80450, -0.93726, -0.97806, -0.97354, -0.97531, -0.98990, -0.99368, -0.98941, -0.99219, -0.99091, -0.99142, -0.99167, -0.99091, -0.99191, -0.99118, -0.99219, -0.98236, -0.97781, -0.97656, -0.95135, -0.87204, -0.71335, -0.52139, -0.34232, -0.17783, -0.00906, 0.14886, 0.30450, 0.48889, 0.67404, 0.84030, 0.94128, 0.97681, 0.98462, 0.98337, 0.99142, 0.99521, 0.99493, 0.99420, 0.99445, 0.99521, 0.99393, 0.99545, 0.99445, 0.99521, 0.99521, 0.99445, 0.99570, 0.99445, 0.99521, 0.99469, 0.99445, 0.99521, 0.99420, 0.99521, 0.99445, 0.99445, 0.99521, 0.99445, 0.99545, 0.99445, 0.99469, 0.99493, 0.99393, 0.99493, 0.99445, 0.99393, 0.98285, 0.97781, 0.97479, 0.92844, 0.82114, 0.66095, 0.52417, 0.46826, 0.46722, 0.47934, 0.47379, 0.47076, 0.48209, 0.42014, 0.25439, 0.10074, -0.00302, -0.08966, -0.16068, -0.21436, -0.22040, -0.15137, -0.00476, 0.18536, 0.37631, 0.52292, 0.62164, 0.70425, 0.74835, 0.72366, 0.63928, 0.52567, 0.40805, 0.35666, 0.42896, 0.60175, 0.80200, 0.92743, 0.96548, 0.97632, 0.98337, 0.99066, 0.99521, 0.99420, 0.99368, 0.99292, 0.98840, 0.98083, 0.96774, 0.93323, 0.85440, 0.69470, 0.47202, 0.20425, -0.08890, -0.36423, -0.60025, -0.77481, -0.90173, -0.96017, -0.97028, -0.98108, -0.98840, -0.99219, -0.98990, -0.99219, -0.99142, -0.99142, -0.99219, -0.99091, -0.99243, -0.99066, -0.99142, -0.99142, -0.99118, -0.99191, -0.99066, -0.99167, -0.99142, -0.99142, -0.99219, -0.99091, -0.99191, -0.99118, -0.99142, -0.99191, -0.99091, -0.99191, -0.99091, -0.99167, -0.99191, -0.99118, -0.99219, -0.99091, -0.99167, -0.99142, -0.99142, -0.99219, -0.99091, -0.99191, -0.99142, -0.99118, -0.98917, -0.99042, -0.99445, -0.97330, -0.95590, -0.96219, -0.89670, -0.72241, -0.55112, -0.44809, -0.39319, -0.37833, -0.35641, -0.26270, -0.14230, -0.11282, -0.13525, -0.11536, -0.09671, -0.11511, -0.18060, -0.26874, -0.33374, -0.42215, -0.51358, -0.44785, -0.30450, -0.28613, -0.30527, -0.25037, -0.15390, -0.08286, -0.11157, -0.12592, -0.00327, 0.13803, 0.19141, 0.12820, 0.01788, -0.03952, -0.12592, -0.26773, -0.34634, -0.31384, -0.18060, -0.01080, 0.13574, 0.26120, 0.36975, 0.46573, 0.55087, 0.63626, 0.73022, 0.83072, 0.92014, 0.97177, 0.98587, 0.98413, 0.99167, 0.99445, 0.99292, 0.99219, 0.98740, 0.98007, 0.96472, 0.92239, 0.82166, 0.69067, 0.57959, 0.54962, 0.59695, 0.64255, 0.64633, 0.60629, 0.55942, 0.54910, 0.58966, 0.61887, 0.56952, 0.54181, 0.59518, 0.63248, 0.63876, 0.65463, 0.73398, 0.88312, 0.96927, 0.97101, 0.97958, 0.99344, 0.99420, 0.99268, 0.99493, 0.99469, 0.99445, 0.99521, 0.99445, 0.99545, 0.99420, 0.99493, 0.99493, 0.99420, 0.99545, 0.99420, 0.99493, 0.99420, 0.99393, 0.99420, 0.98840, 0.98309, 0.98309, 0.96069, 0.88461, 0.79370, 0.72064, 0.65765, 0.59998, 0.53247, 0.49268, 0.48615, 0.44205, 0.38034, 0.36447, 0.38715, 0.39294, 0.32645, 0.19595, 0.07782, -0.05893, -0.27832, -0.48309, -0.62619, -0.72995, -0.79999, -0.84583, -0.82166, -0.73575, -0.67227, -0.65491, -0.64960, -0.66397, -0.70175, -0.72894, -0.74658, -0.76724, -0.79520, -0.82846, -0.86523, -0.90527, -0.94382, -0.89948, -0.69849, -0.47479, -0.31662, -0.15414, -0.00729, 0.07077, 0.08237, 0.04431, -0.02292, -0.11761, -0.24307, -0.36926, -0.45087, -0.46170, -0.40250, -0.30679, -0.17529, 0.00000, 0.14331, 0.24179, 0.36774, 0.49545, 0.56522, 0.57907, 0.56775, 0.53851, 0.51132, 0.48688, 0.41913, 0.26044, 0.00955, -0.26297, -0.46396, -0.62341, -0.82214, -0.94684, -0.96774, -0.97531, -0.98413, -0.99017, -0.98990, -0.99219, -0.99066, -0.99142, -0.99167, -0.99118, -0.99219, -0.98990, -0.99118, -0.99368, -0.99142, -0.97757, -0.97403, -0.98007, -0.96170, -0.86826, -0.67783, -0.52719, -0.48788, -0.45490, -0.43146, -0.47681, -0.54105, -0.57983, -0.60904, -0.62317, -0.59949, -0.55566, -0.52063, -0.52115, -0.55112, -0.56244, -0.58337, -0.65540, -0.73373, -0.77228, -0.74759, -0.68890, -0.64609, -0.61887, -0.58060, -0.50351, -0.40729, -0.33929, -0.35110, -0.42944, -0.47028, -0.42267, -0.32718, -0.20224, -0.05640, 0.04556, 0.10529, 0.17630, 0.26169, 0.33197, 0.32138, 0.23776, 0.20956, 0.23148, 0.20352, 0.23325, 0.39267, 0.52719, 0.58438, 0.62289, 0.66345, 0.70023, 0.66296, 0.54330, 0.42618, 0.33475, 0.24533, 0.14105, 0.03851, 0.01358, 0.09143, 0.22845, 0.34961, 0.41711, 0.48740, 0.58914, 0.69519, 0.78186, 0.84357, 0.89822, 0.95389, 0.98135, 0.98615, 0.99167, 0.99243, 0.99445, 0.99420, 0.99469, 0.99493, 0.99393, 0.99545, 0.99445, 0.99521, 0.99469, 0.99445, 0.99521, 0.99420, 0.99469, 0.98965, 0.98715, 0.98563, 0.96295, 0.91736, 0.86624, 0.82367, 0.77554, 0.68411, 0.53549, 0.38916, 0.26120, 0.11435, -0.04053, -0.18161, -0.23172, -0.19394, -0.15237, -0.10730, -0.02997, 0.08588, 0.22620, 0.34305, 0.44104, 0.55740, 0.65765, 0.71259, 0.69217, 0.65363, 0.69748, 0.79572, 0.89368, 0.95514, 0.97733, 0.98413, 0.98816, 0.99243, 0.99445, 0.99243, 0.97302, 0.96674, 0.97983, 0.90378, 0.71005, 0.51056, 0.40451, 0.40982, 0.41559, 0.32996, 0.24356, 0.18866, 0.11411, 0.05365, 0.01157, -0.03247, -0.09216, -0.16095, -0.23248, -0.31662, -0.39771, -0.48663, -0.59647, -0.71536, -0.82013, -0.85287, -0.82947, -0.84937, -0.92215, -0.97177, -0.98663, -0.98816, -0.98438, -0.99091, -0.99219, -0.99091, -0.99191, -0.99042, -0.99191, -0.99091, -0.99142, -0.99191, -0.99091, -0.99191, -0.99091, -0.99167, -0.99142]) },\n        // based off an old mp3 in #modded-beepbox where someone tried to shorten the overdrive guitar into the size of other chip waves \n        // search \"normie alert\" in beepcord\n        { name: \"ultrabox shortened od guitar\", expression: 0.5, samples: centerAndNormalizeWave([-0.82785, -0.67621, -0.40268, -0.43817, -0.45468, -0.22531, -0.18329, 0.24750, 0.71246, 0.52155, 0.56082, 0.48395, 0.33990, 0.46957, 0.27744, 0.42313, 0.47104, 0.18796, 0.12930, -0.13901, -0.07431, -0.16348, -0.74857, -0.73206, -0.35181, -0.26227, -0.41882, -0.27786, -0.19806, -0.19867, 0.18643, 0.24808, 0.08847, -0.06964, 0.06912, 0.20474, -0.05304, 0.29416, 0.31967, 0.14243, 0.27521, -0.23932, -0.14752, 0.12360, -0.26123, -0.26111, 0.06616, 0.26520, 0.08090, 0.15240, 0.16254, -0.12061, 0.04562, 0.00131, 0.04050, 0.08182, -0.21729, -0.17041, -0.16312, -0.08563, 0.06390, 0.05099, 0.05627, 0.02728, 0.00726, -0.13028, -0.05673, -0.14969, -0.17645, 0.35492, 0.16766, -0.00897, 0.24326, -0.00461, -0.04456, 0.01776, -0.04950, -0.01221, 0.02039, 0.07684, 0.13397, 0.39850, 0.35962, 0.13754, 0.42310, 0.27161, -0.17609, 0.03659, 0.10635, -0.21909, -0.22046, -0.20258, -0.40973, -0.40280, -0.40521, -0.66284]) },\n    ]);\n    static chipWaves: DictionaryArray<ChipWave> = rawChipToIntegrated(Config.rawChipWaves);\n    static rawRawChipWaves: DictionaryArray<ChipWave> = Config.rawChipWaves;\n\n    static firstIndexForSamplesInChipWaveList: number = Config.chipWaves.length;\n\n    // Noise waves have too many samples to write by hand, they're generated on-demand by getDrumWave instead.\n    static readonly chipNoises: DictionaryArray<ChipNoise> = toNameMap([\n        { name: \"retro\", expression: 0.25, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n        { name: \"white\", expression: 1.0, basePitch: 69, pitchFilterMult: 8.0, isSoft: true, samples: null },\n        // The \"clang\" and \"buzz\" noises are based on similar noises in the modded beepbox! :D\n        { name: \"clang\", expression: 0.4, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n        { name: \"buzz\", expression: 0.3, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n        { name: \"hollow\", expression: 1.5, basePitch: 96, pitchFilterMult: 1.0, isSoft: true, samples: null },\n        { name: \"shine\", expression: 1.0, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null }, // Identical to buzz but louder. For now we're keeping it...\n        { name: \"deep\", expression: 1.5, basePitch: 120, pitchFilterMult: 1024.0, isSoft: true, samples: null },\n        { name: \"cutter\", expression: 0.005, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n        { name: \"metallic\", expression: 1.0, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n        { name: \"static\", expression: 1.0, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n        // technically these are from the pandorasbox beta but whatever\n        { name: \"1-bit white\", expression: 0.5, basePitch: 74.41, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n        { name: \"1-bit metallic\", expression: 0.5, basePitch: 86.41, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n        // ultrabox noises\n        { name: \"crackling\", expression: 0.9, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n        { name: \"pink\", expression: 1.0, basePitch: 69, pitchFilterMult: 8.0, isSoft: true, samples: null },\n        { name: \"brownian\", expression: 1.0, basePitch: 69, pitchFilterMult: 8.0, isSoft: true, samples: null },\n    ]);\n\n    static readonly filterFreqStep: number = 1.0 / 4.0;\n    static readonly filterFreqRange: number = 34;\n    static readonly filterFreqReferenceSetting: number = 28;\n    static readonly filterFreqReferenceHz: number = 8000.0;\n    static readonly filterFreqMaxHz: number = Config.filterFreqReferenceHz * Math.pow(2.0, Config.filterFreqStep * (Config.filterFreqRange - 1 - Config.filterFreqReferenceSetting)); // ~19khz\n    static readonly filterFreqMinHz: number = 8.0;\n    static readonly filterGainRange: number = 15;\n    static readonly filterGainCenter: number = 7;\n    static readonly filterGainStep: number = 1.0 / 2.0;\n    static readonly filterMaxPoints: number = 8;\n    static readonly filterTypeNames: ReadonlyArray<string> = [\"low-pass\", \"high-pass\", \"peak\"]; // See FilterType enum above.\n    static readonly filterMorphCount: number = 10; // Number of filter shapes allowed for modulating between. Counts the 0/default position.\n\n    static readonly filterSimpleCutRange: number = 11;\n    static readonly filterSimplePeakRange: number = 8;\n\n    static readonly fadeInRange: number = 10;\n    static readonly fadeOutTicks: ReadonlyArray<number> = [-24, -12, -6, -3, -1, 6, 12, 24, 48, 72, 96];\n    static readonly fadeOutNeutral: number = 4;\n    static readonly drumsetFadeOutTicks: number = 48;\n    static readonly transitions: DictionaryArray<Transition> = toNameMap([\n        { name: \"normal\", isSeamless: false, continues: false, slides: false, slideTicks: 3, includeAdjacentPatterns: false },\n        { name: \"interrupt\", isSeamless: true, continues: false, slides: false, slideTicks: 3, includeAdjacentPatterns: true },\n        { name: \"continue\", isSeamless: true, continues: true, slides: false, slideTicks: 3, includeAdjacentPatterns: true },\n        { name: \"slide\", isSeamless: true, continues: false, slides: true, slideTicks: 3, includeAdjacentPatterns: true },\n        { name: \"slide in pattern\", isSeamless: true, continues: false, slides: true, slideTicks: 3, includeAdjacentPatterns: false }\n    ]);\n    static readonly vibratos: DictionaryArray<Vibrato> = toNameMap([\n        { name: \"none\", amplitude: 0.0, type: 0, delayTicks: 0 },\n        { name: \"light\", amplitude: 0.15, type: 0, delayTicks: 0 },\n        { name: \"delayed\", amplitude: 0.3, type: 0, delayTicks: 37 }, // It will fade in over the previous two ticks.\n        { name: \"heavy\", amplitude: 0.45, type: 0, delayTicks: 0 },\n        { name: \"shaky\", amplitude: 0.1, type: 1, delayTicks: 0 },\n        //    { name: \"very shaky\", amplitude: 1, type: 0, delayTicks: 0 },\n        //{ name: \"insane\", amplitude: 10, type: 1, delayTicks: 0 },\n        //todbox vibratos\n        //\t{ name: \"super insane\", amplitude: 30, type: 1, delayTicks: 1 },\n        //wackybox\n        //\t { name: \"quiver\", amplitude: 0.001, type: 0, delayTicks: 0 },\n        //  { name: \"wub-wub\", amplitude: 10.0, type: 0, delayTicks: 0 },\n        //     { name: \"quiver delayed\", amplitude: 0.001, type: 0, delayTicks: 18 },\n        //  { name: \"vibrate\", amplitude: 0.08, type: 0, delayTicks: 0 },\n        //    { name: \"too much wub\", amplitude: 30.0, type: 0, delayTicks: 18 },\n        //too much wub breaks things just a little bit at it's original amplitude\n        //sandbox\n    ]);\n    static readonly vibratoTypes: DictionaryArray<VibratoType> = toNameMap([\n        { name: \"normal\", periodsSeconds: [0.14], period: 0.14 },\n        { name: \"shaky\", periodsSeconds: [0.11, 1.618 * 0.11, 3 * 0.11], period: 266.97 }, // LCM of all periods\n    ]);\n    // This array is more or less a linear step by 0.1 but there's a bit of range added at the start to hit specific ratios, and the end starts to grow faster.\n    //                                                             0       1      2    3     4      5    6    7      8     9   10   11 12   13   14   15   16   17   18   19   20   21 22   23   24   25   26   27   28   29   30   31 32   33   34   35   36   37   38    39  40   41 42    43   44   45   46 47   48 49 50\n    static readonly arpSpeedScale: ReadonlyArray<number> = [0, 0.0625, 0.125, 0.2, 0.25, 1 / 3, 0.4, 0.5, 2 / 3, 0.75, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4, 4.15, 4.3, 4.5, 4.8, 5, 5.5, 6, 8];\n    static readonly unisons: DictionaryArray<Unison> = toNameMap([\n        { name: \"none\", voices: 1, spread: 0.0, offset: 0.0, expression: 1.4, sign: 1.0 },\n        { name: \"shimmer\", voices: 2, spread: 0.018, offset: 0.0, expression: 0.8, sign: 1.0 },\n        { name: \"hum\", voices: 2, spread: 0.045, offset: 0.0, expression: 1.0, sign: 1.0 },\n        { name: \"honky tonk\", voices: 2, spread: 0.09, offset: 0.0, expression: 1.0, sign: 1.0 },\n        { name: \"dissonant\", voices: 2, spread: 0.25, offset: 0.0, expression: 0.9, sign: 1.0 },\n        { name: \"fifth\", voices: 2, spread: 3.5, offset: 3.5, expression: 0.9, sign: 1.0 },\n        { name: \"octave\", voices: 2, spread: 6.0, offset: 6.0, expression: 0.8, sign: 1.0 },\n        { name: \"bowed\", voices: 2, spread: 0.02, offset: 0.0, expression: 1.0, sign: -1.0 },\n        { name: \"piano\", voices: 2, spread: 0.01, offset: 0.0, expression: 1.0, sign: 0.7 },\n        { name: \"warbled\", voices: 2, spread: 0.25, offset: 0.05, expression: 0.9, sign: -0.8 },\n        { name: \"hecking gosh\", voices: 2, spread: 6.25, offset: -6.0, expression: 0.8, sign: -0.7 },\n        { name: \"spinner\", voices: 2, spread: 0.02, offset: 0.0, expression: 1.0, sign: 1.0 },\n        { name: \"detune\", voices: 1, spread: 0.0, offset: 0.25, expression: 1.0, sign: 1.0 },\n        { name: \"rising\", voices: 2, spread: 1.0, offset: 0.7, expression: 0.95, sign: 1.0 },\n        { name: \"vibrate\", voices: 2, spread: 3.5, offset: 7, expression: 0.975, sign: 1.0 },\n        { name: \"fourths\", voices: 2, spread: 4, offset: 4, expression: 0.95, sign: 1.0 },\n        { name: \"bass\", voices: 1, spread: 0, offset: -7, expression: 1.0, sign: 1.0 },\n        { name: \"dirty\", voices: 2, spread: 0, offset: 0.1, expression: 0.975, sign: 1.0 },\n        { name: \"stationary\", voices: 2, spread: 3.5, offset: 0.0, expression: 0.9, sign: 1.0 },\n        { name: \"recurve\", voices: 2, spread: 0.005, offset: 0.0, expression: 1.0, sign: 1.0 },\n        { name: \"voiced\", voices: 2, spread: 9.5, offset: 0.0, expression: 1.0, sign: 1.0 },\n        { name: \"fluctuate\", voices: 2, spread: 12, offset: 0.0, expression: 1.0, sign: 1.0 },\n        { name: \"thin\", voices: 1, spread: 0.0, offset: 50.0, expression: 1.0, sign: 1.0 },\n        { name: \"inject\", voices: 2, spread: 6.0, offset: 0.4, expression: 1.0, sign: 1.0 },\n        { name: \"askewed\", voices: 2, spread: 0.0, offset: 0.42, expression: 0.7, sign: 1.0 },\n        { name: \"resonance\", voices: 2, spread: 0.0025, offset: 0.1, expression: 0.8, sign: -1.5 },\n        { name: \"FART\", voices: 2, spread: 13, offset: -5, expression: 1.0, sign: -3 },\n        { name: \"augmented\", voices: 4, spread: 6, offset: 6, expression: 0.5, sign: 1.0 },\n        { name: \"diminished\", voices: 5, spread: 6, offset: 6, expression: 0.4, sign: 1.0 },\n        { name: \"chorus\", voices: 9, spread: 0.22, offset: 0, expression: 0.15, sign: 1.0 },\n        { name: \"block\", voices: 9, spread: 6, offset: 6, expression: 0.15, sign: 0.8 },\n        { name: \"extraterrestrial\", voices: 6, spread: 15.2, offset: -6, expression: 0.35, sign: 0.7 },\n        { name: \"bow\", voices: 9, spread: 0.006, offset: 0, expression: 0.15, sign: 0.5 }\n\n        //for modbox; voices = riffapp, spread = intervals, offset = offsets, expression = volume, and sign = signs\n    ]);\n    static readonly effectNames: ReadonlyArray<string> = [\"reverb\", \"chorus\", \"panning\", \"distortion\", \"bitcrusher\", \"post eq\", \"echo\", \"ring mod\", \"granular\", \"gain\", \"flanger\"];\n    static readonly effectDisplayNames: ReadonlyArray<string> = [\"Reverb\", \"Chorus\", \"Panning\", \"Distortion\", \"Bitcrusher\", \"Post EQ\", \"Echo\", \"Ring Mod\", \"Granular\", \"Gain\", \"Flanger\"];\n    static readonly effectOrder: ReadonlyArray<EffectType> = [EffectType.reverb, EffectType.chorus, EffectType.panning, EffectType.distortion, EffectType.bitcrusher, EffectType.eqFilter, EffectType.echo, EffectType.ringModulation, EffectType.granular, EffectType.gain, EffectType.flanger];\n    static readonly effectCount: 11\n    static readonly mdeffectNames: ReadonlyArray<string> = [\"pitch shift\", \"detune\", \"vibrato\", \"transition type\", \"chord type\", \"note range\"];\n    static readonly mdeffectOrder: ReadonlyArray<MDEffectType> = [MDEffectType.transition, MDEffectType.chord, MDEffectType.pitchShift, MDEffectType.detune, MDEffectType.vibrato, MDEffectType.noteRange];\n    static readonly mdeffectCount: 6\n    static readonly noteSizeMax: number = 6;\n    static readonly volumeRange: number = 100;\n    // Beepbox's old volume scale used factor -0.5 and was [0~7] had roughly value 6 = 0.125 power. This new value is chosen to have -21 be the same,\n    // given that the new scale is [-25~25]. This is such that conversion between the scales is roughly equivalent by satisfying (0.5*6 = 0.1428*21)\n    static readonly volumeLogScale: number = 0.0714;\n    static readonly gainRangeMult: number = 2;\n    static readonly panCenter: number = 50;\n    static readonly panMax: number = Config.panCenter * 2;\n    static readonly panDelaySecondsMax: number = 0.001;\n    static readonly ringModRange: number = 8;\n    static readonly ringModHzRange: number = 64;\n    static readonly ringModMinHz: number = 20;\n    static readonly ringModMaxHz: number = 4400;\n    static readonly rmHzOffsetCenter: number = 200;\n    static readonly rmHzOffsetMax: number = 400;\n    static readonly rmHzOffsetMin: number = 0;\n    static readonly granularRange: number = 10;\n    static readonly grainSizeMin: number = 40;\n    static readonly grainSizeMax: number = 2000;\n    static readonly grainSizeStep: number = 40;\n    static readonly grainRangeMax: number = 1600;\n    static readonly grainAmountsMax: number = 10; //2^grainAmountsMax is what is actually used\n    static readonly granularEnvelopeType: number = GranularEnvelopeType.parabolic; //here you can change which envelope implementation is used for grains (RaisedCosineBell still needs work)\n    static readonly flangerRange: number = 24;\n    static readonly flangerSpeedRange: number = 16;\n    static readonly flangerDepthRange: number = 16;\n    static readonly flangerFeedbackRange: number = 16;\n    static readonly flangerMaxDelay: number = 0.0034 * 4.35;\n    static readonly flangerPeriodMult: number = 0.000004;\n    static readonly flangerVolumeMult: number = 0.45;\n    static readonly chorusRange: number = 24;\n    static readonly chorusPeriodSeconds: number = 2.0;\n    static readonly chorusDelayRange: number = 0.0034;\n    static readonly chorusDelayOffsets: ReadonlyArray<ReadonlyArray<number>> = [[1.51, 2.10, 3.35], [1.47, 2.15, 3.25]];\n    static readonly chorusPhaseOffsets: ReadonlyArray<ReadonlyArray<number>> = [[0.0, 2.1, 4.2], [3.2, 5.3, 1.0]];\n    static readonly chorusMaxDelay: number = Config.chorusDelayRange * (1.0 + Config.chorusDelayOffsets[0].concat(Config.chorusDelayOffsets[1]).reduce((x, y) => Math.max(x, y)));\n    static readonly chords: DictionaryArray<Chord> = toNameMap([\n        { name: \"simultaneous\", customInterval: false, arpeggiates: false, strumParts: 0, singleTone: false },\n        { name: \"strum\", customInterval: false, arpeggiates: false, strumParts: 1, singleTone: false },\n        { name: \"arpeggio\", customInterval: false, arpeggiates: true, strumParts: 0, singleTone: true },\n        { name: \"custom interval\", customInterval: true, arpeggiates: false, strumParts: 0, singleTone: true },\n        { name: \"monophonic\", customInterval: false, arpeggiates: false, strumParts: 0, singleTone: true }\n    ]);\n    static readonly maxChordSize: number = 9;\n    static readonly operatorCount: number = 4;\n    static readonly maxPitchOrOperatorCount: number = Math.max(Config.maxChordSize, Config.operatorCount + 2);\n    static readonly algorithms: DictionaryArray<Algorithm> = toNameMap([\n        { name: \"1\u2190(2\u20023\u20024)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3, 4], [], [], []] },\n        { name: \"1\u2190(2\u20023\u21904)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3], [], [4], []] },\n        { name: \"1\u21902\u2190(3\u20024)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2], [3, 4], [], []] },\n        { name: \"1\u2190(2\u20023)\u21904\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3], [4], [4], []] },\n        { name: \"1\u21902\u21903\u21904\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2], [3], [4], []] },\n        { name: \"1\u21903\u20032\u21904\", carrierCount: 2, associatedCarrier: [1, 2, 1, 2], modulatedBy: [[3], [4], [], []] },\n        { name: \"1\u20032\u2190(3\u20024)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[], [3, 4], [], []] },\n        { name: \"1\u20032\u21903\u21904\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[], [3], [4], []] },\n        { name: \"(1\u20022)\u21903\u21904\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[3], [3], [4], []] },\n        { name: \"(1\u20022)\u2190(3\u20024)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[3, 4], [3, 4], [], []] },\n        { name: \"1\u20032\u20033\u21904\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[], [], [4], []] },\n        { name: \"(1\u20022\u20023)\u21904\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[4], [4], [4], []] },\n        { name: \"1\u20032\u20033\u20034\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4], modulatedBy: [[], [], [], []] },\n        { name: \"1\u2190(2 3)\u20032\u21904\", carrierCount: 2, associatedCarrier: [1, 2, 1, 2], modulatedBy: [[2, 3], [4], [], []] },\n        { name: \"1\u2190(2 (3 (4\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[2, 3, 4], [3, 4], [4], []] },\n    ]);\n    static readonly algorithms6Op: DictionaryArray<Algorithm> = toNameMap([\n        //placeholder makes life easier for later\n        { name: \"Custom\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4, 5, 6], [], [], [], [], []] },\n        //yoinked from SynthBox\n        //algortihm Section 1\n        { name: \"1\u21902\u21903\u21904\u21905\u21906\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2], [3], [4], [5], [6], []] },\n        { name: \"1\u21903\u20032\u21904\u21905\u21906\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4], [], [5], [6], []] },\n        { name: \"1\u21903\u21904\u20032\u21905\u21906\", carrierCount: 2, associatedCarrier: [1, 1, 1, 2, 2, 2], modulatedBy: [[3], [5], [4], [], [6], []] },\n        { name: \"1\u21904\u20032\u21905\u20033\u21906\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[4], [5], [6], [], [], []] },\n        //Algorithm Section 2\n        { name: \"1\u21903\u20022\u2190(4\u20025\u21906)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4, 5], [], [], [6], []] },\n        { name: \"1\u2190(3\u20024)\u20022\u21905\u21906\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3, 4], [5], [], [], [6], []] },\n        { name: \"1\u21903\u20022\u2190(4\u20025\u20026)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4, 5, 6], [], [], [], []] },\n        { name: \"1\u21903\u20022\u2190(4\u20025)\u21906\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4, 5], [], [6], [6], []] },\n        { name: \"1\u21903\u20022\u21904\u2190(5\u20026)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4], [], [5, 6], [], []] },\n        { name: \"1\u2190(2\u20023\u20024\u20025\u20026)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4, 5, 6], [], [], [], [], []] },\n        { name: \"1\u2190(2\u20023\u21905\u20024\u21906)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4], [], [5], [6], [], []] },\n        { name: \"1\u2190(2\u20023\u20024\u21905\u21906)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4], [], [], [5], [6], []] },\n        //Algorithm Section 3\n        { name: \"1\u21904\u21905\u2003(2\u20033)\u21906\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[4], [6], [6], [5], [], []] },\n        { name: \"1\u2190(3\u20034)\u21905 2\u21906\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3, 4], [6], [5], [5], [], []] },\n        { name: \"(1\u20032)\u21904\u20033\u2190(5\u20036)\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[4], [4], [5, 6], [], [], []] },\n        { name: \"(1\u20032)\u21905\u2003(3\u20034)\u21906\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[5], [5], [6], [6], [], []] },\n        { name: \"(1\u20032\u20033)\u2190(4\u20035\u20036)\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[4, 5, 6], [4, 5, 6], [4, 5, 6], [], [], []] },\n        { name: \"1\u21905\u2003(2\u20033\u20034)\u21906\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[5], [6], [6], [6], [], []] },\n        { name: \"1\u20032\u21905\u2003(3\u20034)\u21906\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[], [5], [6], [6], [], []] },\n        { name: \"1\u20032\u2003(3\u20034\u20035)\u21906\", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[], [], [6], [6], [6], []] },\n        { name: \"1\u20032\u20033\u2003(4\u20035)\u21906\", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[], [], [], [6], [6], []] },\n        //Algorithm Section 3\n        { name: \"1\u20032\u21904\u20033\u2190(5\u20036)\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3, 3, 3], modulatedBy: [[], [4], [5, 6], [], [], []] },\n        { name: \"1\u21904\u20032\u2190(5\u20036)\u20033\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3, 3, 3,], modulatedBy: [[4], [5, 6], [], [], [], []] },\n        { name: \"1\u20032\u20033\u21905\u20034\u21906\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[], [], [5], [6], [], []] },\n        { name: \"1\u2003(2\u20033)\u21905\u21906\u20034\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4,], modulatedBy: [[], [5], [5], [], [6], []] },\n        { name: \"1\u20032\u20033\u21905\u21906\u20034\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[], [], [5, 6], [], [], []] },\n        { name: \"(1\u20032\u20033\u20034\u20035)\u21906\", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[6], [6], [6], [6], [6], []] },\n        { name: \"1\u20032\u20033\u20034\u20035\u21906\", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[], [], [], [], [6], []] },\n        { name: \"1\u20032\u20033\u20034\u20035\u20036\", carrierCount: 6, associatedCarrier: [1, 2, 3, 4, 5, 6], modulatedBy: [[], [], [], [], [], []] },\n        //Section 4 where we take our own previous ones for 4op and it gets weird\n        { name: \"1\u2190(2 (3 (4 (5 (6\", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[2, 3, 4, 5, 6], [3, 4, 5, 6], [4, 5, 6], [5, 6], [6], []] },\n        { name: \"1\u2190(2(3(4(5(6\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4, 5, 6], [3, 4, 5, 6], [4, 5, 6], [5, 6], [6], []] },\n        { name: \"1\u21904(2\u21905(3\u21906\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[2, 3, 4], [3, 5], [6], [], [], []] },\n        { name: \"1\u21904(2\u21905 3\u21906\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[2, 3, 4], [5], [6], [], [], []] },\n    ]);\n    static readonly operatorCarrierInterval: ReadonlyArray<number> = [0.0, 0.04, -0.073, 0.091, 0.061, 0.024];\n    static readonly operatorAmplitudeMax: number = 15;\n    static readonly operatorFrequencies: DictionaryArray<OperatorFrequency> = toNameMap([\n        { name: \"0.12\u00D7\", mult: 0.125, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"0.25\u00D7\", mult: 0.25, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"0.5\u00D7\", mult: 0.5, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"0.75\u00D7\", mult: 0.75, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"1\u00D7\", mult: 1.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"~1\u00D7\", mult: 1.0, hzOffset: 1.5, amplitudeSign: -1.0 },\n        { name: \"2\u00D7\", mult: 2.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"~2\u00D7\", mult: 2.0, hzOffset: -1.3, amplitudeSign: -1.0 },\n        { name: \"3\u00D7\", mult: 3.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"3.5\u00D7\", mult: 3.5, hzOffset: -0.05, amplitudeSign: 1.0 },\n        { name: \"4\u00D7\", mult: 4.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"~4\u00D7\", mult: 4.0, hzOffset: -2.4, amplitudeSign: -1.0 },\n        { name: \"5\u00D7\", mult: 5.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"6\u00D7\", mult: 6.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"7\u00D7\", mult: 7.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"8\u00D7\", mult: 8.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"9\u00D7\", mult: 9.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"10\u00D7\", mult: 10.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"11\u00D7\", mult: 11.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"12\u00D7\", mult: 12.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"13\u00D7\", mult: 13.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"14\u00D7\", mult: 14.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"15\u00D7\", mult: 15.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        //ultrabox\n        { name: \"16\u00D7\", mult: 16.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"17\u00D7\", mult: 17.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        //ultrabox\n        { name: \"18\u00D7\", mult: 18.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"19\u00D7\", mult: 19.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        //ultrabox\n        { name: \"20\u00D7\", mult: 20.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"~20\u00D7\", mult: 20.0, hzOffset: -5.0, amplitudeSign: -1.0 },\n        // dogebox (maybe another mod also adds this? I got it from dogebox)\n        { name: \"25\u00D7\", mult: 25.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"50\u00D7\", mult: 50.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"75\u00D7\", mult: 75.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"100\u00D7\", mult: 100.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        //50 and 100 are from dogebox\n        //128 and 256 from slarmoo's box\n        { name: \"128\u00D7\", mult: 128.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"256\u00D7\", mult: 250.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    ]);\n\n    //still used for drumsets\n    static readonly envelopes: DictionaryArray<Envelope> = toNameMap([\n        { name: \"none\", type: EnvelopeType.none, speed: 0.0 },\n        { name: \"note size\", type: EnvelopeType.noteSize, speed: 0.0 },\n        { name: \"pitch\", type: EnvelopeType.pitch, speed: 0.0 }, // Slarmoo's box (fairly useless on drumsets)\n        { name: \"punch\", type: EnvelopeType.punch, speed: 0.0 },\n        { name: \"flare -1\", type: EnvelopeType.flare, speed: 128.0 },\n        { name: \"flare 1\", type: EnvelopeType.flare, speed: 32.0 },\n        { name: \"flare 2\", type: EnvelopeType.flare, speed: 8.0 },\n        { name: \"flare 3\", type: EnvelopeType.flare, speed: 2.0 },\n        { name: \"twang -1\", type: EnvelopeType.twang, speed: 128.0 },\n        { name: \"twang 1\", type: EnvelopeType.twang, speed: 32.0 },\n        { name: \"twang 2\", type: EnvelopeType.twang, speed: 8.0 },\n        { name: \"twang 3\", type: EnvelopeType.twang, speed: 2.0 },\n        { name: \"swell -1\", type: EnvelopeType.swell, speed: 128.0 },\n        { name: \"swell 1\", type: EnvelopeType.swell, speed: 32.0 },\n        { name: \"swell 2\", type: EnvelopeType.swell, speed: 8.0 },\n        { name: \"swell 3\", type: EnvelopeType.swell, speed: 2.0 },\n        { name: \"tremolo0\", type: EnvelopeType.lfo, speed: 8.0 },\n        { name: \"tremolo1\", type: EnvelopeType.lfo, speed: 4.0 },\n        { name: \"tremolo2\", type: EnvelopeType.lfo, speed: 2.0 },\n        { name: \"tremolo3\", type: EnvelopeType.lfo, speed: 1.0 },\n        { name: \"tremolo4\", type: EnvelopeType.tremolo2, speed: 4.0 },\n        { name: \"tremolo5\", type: EnvelopeType.tremolo2, speed: 2.0 },\n        { name: \"tremolo6\", type: EnvelopeType.tremolo2, speed: 1.0 },\n        { name: \"decay -1\", type: EnvelopeType.decay, speed: 40.0 },\n        { name: \"decay 1\", type: EnvelopeType.decay, speed: 10.0 },\n        { name: \"decay 2\", type: EnvelopeType.decay, speed: 7.0 },\n        { name: \"decay 3\", type: EnvelopeType.decay, speed: 4.0 },\n        { name: \"wibble-1\", type: EnvelopeType.wibble, speed: 128.0 }, //Changed speed from 96 to 128. I forgot to include a 96 earlier, and now it's too late to add one, so we have this now. Hopefully no one notices\n        { name: \"wibble 1\", type: EnvelopeType.wibble, speed: 24.0 },\n        { name: \"wibble 2\", type: EnvelopeType.wibble, speed: 12.0 },\n        { name: \"wibble 3\", type: EnvelopeType.wibble, speed: 4.0 },\n        { name: \"linear-2\", type: EnvelopeType.linear, speed: 256.0 },\n        { name: \"linear-1\", type: EnvelopeType.linear, speed: 128.0 },\n        { name: \"linear 1\", type: EnvelopeType.linear, speed: 32.0 },\n        { name: \"linear 2\", type: EnvelopeType.linear, speed: 8.0 },\n        { name: \"linear 3\", type: EnvelopeType.linear, speed: 2.0 },\n        { name: \"rise -2\", type: EnvelopeType.rise, speed: 256.0 },\n        { name: \"rise -1\", type: EnvelopeType.rise, speed: 128.0 },\n        { name: \"rise 1\", type: EnvelopeType.rise, speed: 32.0 },\n        { name: \"rise 2\", type: EnvelopeType.rise, speed: 8.0 },\n        { name: \"rise 3\", type: EnvelopeType.rise, speed: 2.0 },\n        // modbox\n        { name: \"flute 1\", type: EnvelopeType.wibble, speed: 16.0 },\n        { name: \"flute 2\", type: EnvelopeType.wibble, speed: 8.0 },\n        { name: \"flute 3\", type: EnvelopeType.wibble, speed: 4.0 },\n        // sandbox\n        { name: \"tripolo1\", type: EnvelopeType.lfo, speed: 9.0 },\n        { name: \"tripolo2\", type: EnvelopeType.lfo, speed: 6.0 },\n        { name: \"tripolo3\", type: EnvelopeType.lfo, speed: 3.0 },\n        { name: \"tripolo4\", type: EnvelopeType.tremolo2, speed: 9.0 },\n        { name: \"tripolo5\", type: EnvelopeType.tremolo2, speed: 6.0 },\n        { name: \"tripolo6\", type: EnvelopeType.tremolo2, speed: 3.0 },\n        { name: \"pentolo1\", type: EnvelopeType.lfo, speed: 10.0 },\n        { name: \"pentolo2\", type: EnvelopeType.lfo, speed: 5.0 },\n        { name: \"pentolo3\", type: EnvelopeType.lfo, speed: 2.5 },\n        { name: \"pentolo4\", type: EnvelopeType.tremolo2, speed: 10.0 },\n        { name: \"pentolo5\", type: EnvelopeType.tremolo2, speed: 5.0 },\n        { name: \"pentolo6\", type: EnvelopeType.tremolo2, speed: 2.5 },\n        // todbox\n        { name: \"flutter 1\", type: EnvelopeType.lfo, speed: 14.0 },\n        { name: \"flutter 2\", type: EnvelopeType.tremolo2, speed: 11.0 },\n        { name: \"water-y flutter\", type: EnvelopeType.lfo, speed: 9.0 },\n        // new jummbox\n        { name: \"blip 1\", type: EnvelopeType.blip, speed: 6.0 },\n        { name: \"blip 2\", type: EnvelopeType.blip, speed: 16.0 },\n        { name: \"blip 3\", type: EnvelopeType.blip, speed: 32.0 },\n        // Slarmoo's Box\n        { name: \"fall 1\", type: EnvelopeType.fall, speed: 8.0 },\n        { name: \"fall 2\", type: EnvelopeType.fall, speed: 4.0 },\n        { name: \"fall 3\", type: EnvelopeType.fall, speed: 2.0 },\n    ]);\n\n    static readonly newEnvelopes: DictionaryArray<Envelope> = toNameMap([\n        { name: \"none\", type: EnvelopeType.none, speed: 0.0 },\n        { name: \"note size\", type: EnvelopeType.noteSize, speed: 0.0 },\n        { name: \"pitch\", type: EnvelopeType.pitch, speed: 0.0 },\n        { name: \"random\", type: EnvelopeType.pseudorandom, speed: 4.0 }, //Slarmoo's box 1.3\n        { name: \"punch\", type: EnvelopeType.punch, speed: 0.0 },\n        { name: \"flare\", type: EnvelopeType.flare, speed: 32.0 },\n        { name: \"twang\", type: EnvelopeType.twang, speed: 32.0 },\n        { name: \"swell\", type: EnvelopeType.swell, speed: 32.0 },\n        { name: \"lfo\", type: EnvelopeType.lfo, speed: 4.0 }, //replaced tremolo and tremolo2\n        // { name: \"tremolo2\", type: EnvelopeType.tremolo2, speed: 4.0 }, //removed Slarmoo's Box 1.3\n        { name: \"decay\", type: EnvelopeType.decay, speed: 10.0 },\n        { name: \"wibble\", type: EnvelopeType.wibble, speed: 24.0 },\n        { name: \"linear\", type: EnvelopeType.linear, speed: 32.0 },\n        { name: \"rise\", type: EnvelopeType.rise, speed: 32.0 },\n        { name: \"blip\", type: EnvelopeType.blip, speed: 6.0 },\n        { name: \"fall\", type: EnvelopeType.fall, speed: 2.0 },\n    ]);\n\n\n\n    static readonly feedbacks: DictionaryArray<Feedback> = toNameMap([\n        { name: \"1\u27F2\", indices: [[1], [], [], []] },\n        { name: \"2\u27F2\", indices: [[], [2], [], []] },\n        { name: \"3\u27F2\", indices: [[], [], [3], []] },\n        { name: \"4\u27F2\", indices: [[], [], [], [4]] },\n        { name: \"1\u27F2\u20032\u27F2\", indices: [[1], [2], [], []] },\n        { name: \"3\u27F2\u20034\u27F2\", indices: [[], [], [3], [4]] },\n        { name: \"1\u27F2\u20032\u27F2\u20033\u27F2\", indices: [[1], [2], [3], []] },\n        { name: \"2\u27F2\u20033\u27F2\u20034\u27F2\", indices: [[], [2], [3], [4]] },\n        { name: \"1\u27F2 2\u27F2 3\u27F2 4\u27F2\", indices: [[1], [2], [3], [4]] },\n        { name: \"1\u21922\", indices: [[], [1], [], []] },\n        { name: \"1\u21923\", indices: [[], [], [1], []] },\n        { name: \"1\u21924\", indices: [[], [], [], [1]] },\n        { name: \"2\u21923\", indices: [[], [], [2], []] },\n        { name: \"2\u21924\", indices: [[], [], [], [2]] },\n        { name: \"3\u21924\", indices: [[], [], [], [3]] },\n        { name: \"1\u21923\u20032\u21924\", indices: [[], [], [1], [2]] },\n        { name: \"1\u21924\u20032\u21923\", indices: [[], [], [2], [1]] },\n        { name: \"1\u21922\u21923\u21924\", indices: [[], [1], [2], [3]] },\n        { name: \"1\u21942 3\u21944\", indices: [[2], [1], [4], [3]] },\n        { name: \"1\u21944 2\u21943\", indices: [[4], [3], [2], [1]] },\n        { name: \"2\u21921\u21924\u21923\u21922\", indices: [[2], [3], [4], [1]] },\n        { name: \"1\u21922\u21923\u21924\u21921\", indices: [[4], [1], [2], [3]] },\n        { name: \"(1 2 3)\u21924\", indices: [[], [], [], [1, 2, 3]] },\n        { name: \"ALL\", indices: [[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]] },\n    ]);\n    static readonly feedbacks6Op: DictionaryArray<Feedback> = toNameMap([\n        //placeholder makes life easier for later\n        { name: \"Custom\", indices: [[2, 3, 4, 5, 6], [], [], [], [], []] },\n\n        { name: \"1\u27F2\", indices: [[1], [], [], [], [], []] },\n        { name: \"2\u27F2\", indices: [[], [2], [], [], [], []] },\n        { name: \"3\u27F2\", indices: [[], [], [3], [], [], []] },\n        { name: \"4\u27F2\", indices: [[], [], [], [4], [], []] },\n        { name: \"5\u27F2\", indices: [[], [], [], [], [5], []] },\n        { name: \"6\u27F2\", indices: [[], [], [], [], [], [6]] },\n        { name: \"1\u27F2\u20022\u27F2\", indices: [[1], [2], [], [], [], []] },\n        { name: \"3\u27F2\u20024\u27F2\", indices: [[], [], [3], [4], [], []] },\n        { name: \"1\u27F2\u20022\u27F2\u20023\u27F2\", indices: [[1], [2], [3], [], [], []] },\n        { name: \"2\u27F2\u20023\u27F2\u20024\u27F2\", indices: [[], [2], [3], [4], [], []] },\n        { name: \"1\u27F2 2\u27F2 3\u27F2 4\u27F2\", indices: [[1], [2], [3], [4], [], []] },\n        { name: \"1\u27F2 2\u27F2 3\u27F2 4\u27F2 5\u27F2\", indices: [[1], [2], [3], [4], [5], []] },\n        { name: \"1\u27F2 2\u27F2 3\u27F2 4\u27F2 5\u27F2 6\u27F2\", indices: [[1], [2], [3], [4], [5], [6]] },\n        { name: \"1\u21922\", indices: [[], [1], [], [], [], []] },\n        { name: \"1\u21923\", indices: [[], [], [1], [], [], []] },\n        { name: \"1\u21924\", indices: [[], [], [], [1], [], []] },\n        { name: \"1\u21925\", indices: [[], [], [], [], [1], []] },\n        { name: \"1\u21926\", indices: [[], [], [], [], [], [1]] },\n        { name: \"2\u21923\", indices: [[], [], [2], [], [], []] },\n        { name: \"2\u21924\", indices: [[], [], [], [2], [], []] },\n        { name: \"3\u21924\", indices: [[], [], [], [3], [], []] },\n        { name: \"4\u21925\", indices: [[], [], [], [], [4], []] },\n        { name: \"1\u21924\u20022\u21925 3\u21926\", indices: [[], [], [], [1], [2], [3]] },\n        { name: \"1\u21925\u20022\u21926 3\u21924\", indices: [[], [], [], [3], [1], [2]] },\n        { name: \"1\u21922\u21923\u21924\u21925\u21926\", indices: [[], [1], [2], [3], [4], [5]] },\n        { name: \"2\u21921\u21926\u21925\u21924\u21923\u21922\", indices: [[2], [3], [4], [5], [6], [1]] },\n        { name: \"1\u21922\u21923\u21924\u21925\u21926\u21921\", indices: [[6], [1], [2], [3], [4], [5]] },\n        { name: \"1\u21942 3\u21944 5\u21946\", indices: [[2], [1], [4], [3], [6], [5]] },\n        { name: \"1\u21944 2\u21945 3\u21946\", indices: [[4], [5], [6], [1], [2], [3]] },\n        { name: \"(1,2,3,4,5)\u21926\", indices: [[], [], [], [], [], [1, 2, 3, 4, 5]] },\n        { name: \"ALL\", indices: [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]] },\n    ]);\n    static readonly chipNoiseLength: number = 1 << 15; // 32768\n    static readonly spectrumNoiseLength: number = 1 << 15; // 32768\n    static readonly spectrumBasePitch: number = 24;\n    static readonly spectrumControlPoints: number = 30;\n    static readonly spectrumControlPointsPerOctave: number = 7;\n    static readonly spectrumControlPointBits: number = 3;\n    static readonly spectrumMax: number = (1 << Config.spectrumControlPointBits) - 1;\n    static readonly harmonicsControlPoints: number = 28;\n    static readonly harmonicsRendered: number = 64;\n    static readonly harmonicsRenderedForPickedString: number = 1 << 8; // 256\n    static readonly harmonicsControlPointBits: number = 3;\n    static readonly harmonicsMax: number = (1 << Config.harmonicsControlPointBits) - 1;\n    static readonly harmonicsWavelength: number = 1 << 11; // 2048\n    static readonly pulseWidthRange: number = 50;\n    static readonly pulseWidthStepPower: number = 0.5;\n    static readonly supersawVoiceCount: number = 7;\n    static readonly supersawDynamismMax: number = 6;\n    static readonly supersawSpreadMax: number = 12;\n    static readonly supersawShapeMax: number = 6;\n    static readonly pitchChannelCountMin: number = 1;\n    static readonly pitchChannelCountMax: number = 60;\n    static readonly noiseChannelCountMin: number = 0;\n    static readonly noiseChannelCountMax: number = 60;\n    static readonly modChannelCountMin: number = 0;\n    static readonly modChannelCountMax: number = 60;\n    static readonly noiseInterval: number = 6;\n    static readonly pitchesPerOctave: number = 12; // TODO: Use this for converting pitch to frequency.\n    static readonly drumCount: number = 12;\n    static readonly pitchOctaves: number = 8;\n    static readonly modCount: number = 6;\n    static readonly maxPitch: number = Config.pitchOctaves * Config.pitchesPerOctave;\n    static readonly maximumTonesPerChannel: number = Config.maxChordSize * 2;\n    static readonly justIntonationSemitones: number[] = [1.0 / 2.0, 8.0 / 15.0, 9.0 / 16.0, 3.0 / 5.0, 5.0 / 8.0, 2.0 / 3.0, 32.0 / 45.0, 3.0 / 4.0, 4.0 / 5.0, 5.0 / 6.0, 8.0 / 9.0, 15.0 / 16.0, 1.0, 16.0 / 15.0, 9.0 / 8.0, 6.0 / 5.0, 5.0 / 4.0, 4.0 / 3.0, 45.0 / 32.0, 3.0 / 2.0, 8.0 / 5.0, 5.0 / 3.0, 16.0 / 9.0, 15.0 / 8.0, 2.0].map(x => Math.log2(x) * Config.pitchesPerOctave);\n    static readonly pitchShiftRange: number = Config.justIntonationSemitones.length;\n    static readonly pitchShiftCenter: number = Config.pitchShiftRange >> 1;\n    static readonly detuneCenter: number = 200;\n    static readonly detuneMax: number = 400;\n    static readonly detuneMin: number = 0;\n    static readonly songDetuneMin: number = 0;\n    static readonly songDetuneMax: number = 500;\n    static readonly unisonVoicesMin: number = 1;\n    static readonly unisonVoicesMax: number = 9;\n    static readonly unisonSpreadMin: number = -96;\n    static readonly unisonSpreadMax: number = 96;\n    static readonly unisonOffsetMin: number = -96;\n    static readonly unisonOffsetMax: number = 96;\n    static readonly unisonExpressionMin: number = -2;\n    static readonly unisonExpressionMax: number = 2;\n    static readonly unisonSignMin: number = -2;\n    static readonly unisonSignMax: number = 2;\n    static readonly sineWaveLength: number = 1 << 8; // 256\n    static readonly sineWaveMask: number = Config.sineWaveLength - 1;\n\n    static generateSineWave(): Float32Array {\n        const wave: Float32Array = new Float32Array(Config.sineWaveLength + 1);\n        for (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\n            wave[i] = Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength);\n        }\n        return wave;\n    }\n    static generateTriWave(): Float32Array {\n        const wave: Float32Array = new Float32Array(Config.sineWaveLength + 1);\n        for (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\n            wave[i] = Math.asin(Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength)) / (Math.PI / 2);\n        }\n        return wave;\n    }\n    static generateTrapezoidWave(drive: number = 2): Float32Array {\n        const wave: Float32Array = new Float32Array(Config.sineWaveLength + 1);\n        for (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\n            wave[i] = Math.max(-1.0, Math.min(1.0, Math.asin(Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength)) * drive));\n        }\n        return wave;\n    }\n    static generateSquareWave(phaseWidth: number = 0): Float32Array {\n        const wave: Float32Array = new Float32Array(Config.sineWaveLength + 1);\n        const centerPoint: number = Config.sineWaveLength / 4;\n        for (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\n            wave[i] = +((Math.abs(i - centerPoint) < phaseWidth * Config.sineWaveLength / 2)\n                || ((Math.abs(i - Config.sineWaveLength - centerPoint) < phaseWidth * Config.sineWaveLength / 2))) * 2 - 1;\n        }\n        return wave;\n    }\n    static generateSawWave(inverse: boolean = false): Float32Array {\n        const wave: Float32Array = new Float32Array(Config.sineWaveLength + 1);\n        for (let i: number = 0; i < Config.sineWaveLength + 1; i++) {\n            wave[i] = ((i + (Config.sineWaveLength / 4.0)) * 2.0 / Config.sineWaveLength) % 2 - 1;\n            wave[i] = inverse ? -wave[i] : wave[i];\n        }\n        return wave;\n    }\n    // public static generateWhiteNoiseFmWave() {\n    // const wave = new Float32Array(Config.sineWaveLength + 1);\n    // for (let i = 0; i < Config.sineWaveLength + 1; i++) {\n    // wave[i] = Math.random() * 2.0 - 1.0;\n    // }\n    // return wave;\n    // }\n    // public static generateOneBitWhiteNoiseFmWave() {\n    // const wave = new Float32Array(Config.sineWaveLength + 1);\n    // for (let i = 0; i < Config.sineWaveLength + 1; i++) {\n    // wave[i] = Math.round(Math.random());\n    // }\n    // return wave;\n    // }\n    static generateQuasiSineWave() {\n        const wave = new Float32Array(Config.sineWaveLength + 1);\n        for (let i = 0; i < Config.sineWaveLength + 1; i++) {\n            wave[i] = Math.round(Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength));\n        }\n        return wave;\n    }\n    static readonly sineWave: Float32Array = Config.generateSineWave();\n\n    static readonly perEnvelopeSpeedIndices: number[] = [0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.2, 0.25, 0.3, 0.3333, 0.4, 0.5, 0.6, 0.6667, 0.7, 0.75, 0.8, 0.9, 1, 1.25, 1.3333, 1.5, 1.6667, 1.75, 2, 2.25, 2.5, 2.75, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 32, 40, 64, 128, 256];\n    static readonly perEnvelopeSpeedToIndices: Dictionary<number> = { //used to convert speeds back into indices\n        0: 0,\n        0.01: 1,\n        0.02: 2,\n        0.03: 3,\n        0.04: 4,\n        0.05: 5,\n        0.06: 6,\n        0.07: 7,\n        0.08: 8,\n        0.09: 9,\n        0.1: 10,\n        0.2: 11,\n        0.25: 12,\n        0.3: 13,\n        0.3333: 14,\n        0.4: 15,\n        0.5: 16,\n        0.6: 17,\n        0.6667: 18,\n        0.7: 19,\n        0.75: 20,\n        0.8: 21,\n        0.9: 22,\n        1: 23,\n        1.25: 24,\n        1.3333: 25,\n        1.5: 26,\n        1.6667: 27,\n        1.75: 28,\n        2: 29,\n        2.25: 30,\n        2.5: 31,\n        2.75: 32,\n        3: 33,\n        3.5: 34,\n        4: 35,\n        4.5: 36,\n        5: 37,\n        5.5: 38,\n        6: 39,\n        6.5: 40,\n        7: 41,\n        7.5: 42,\n        8: 43,\n        8.5: 44,\n        9: 45,\n        9.5: 46,\n        10: 47,\n        11: 48,\n        12: 49,\n        13: 50,\n        14: 51,\n        15: 52,\n        16: 53,\n        17: 54,\n        18: 55,\n        19: 56,\n        20: 57,\n        24: 58,\n        32: 59,\n        40: 60,\n        64: 61,\n        128: 62,\n        256: 63,\n    }\n\n    static readonly perEnvelopeBoundMin: number = 0; //probably should leave at 0. Negative envelopes are problematic right now\n    static readonly perEnvelopeBoundMax: number = 2; //max of 6.3 unless you update url\n    static readonly randomEnvelopeSeedMax: number = 63; //if you increase this you'll need to update the url to support it\n    static readonly randomEnvelopeStepsMax: number = 24;\n\n    // Picked strings have an all-pass filter with a corner frequency based on the tone fundamental frequency, in order to add a slight inharmonicity. (Which is important for distortion.)\n    static readonly pickedStringDispersionCenterFreq: number = 6000.0; // The tone fundamental freq is pulled toward this freq for computing the all-pass corner freq.\n    static readonly pickedStringDispersionFreqScale: number = 0.3; // The tone fundamental freq freq moves this much toward the center freq for computing the all-pass corner freq.\n    static readonly pickedStringDispersionFreqMult: number = 4.0; // The all-pass corner freq is based on this times the adjusted tone fundamental freq.\n    static readonly pickedStringShelfHz: number = 4000.0; // The cutoff freq of the shelf filter that is used to decay the high frequency energy in the picked string.\n\n    static readonly distortionRange: number = 16;\n    static readonly stringSustainRange: number = 15;\n    static readonly stringDecayRate: number = 0.12;\n    static readonly enableAcousticSustain: boolean = false;\n    static readonly sustainTypeNames: ReadonlyArray<string> = [\"bright\", \"acoustic\"]; // See SustainType enum above.\n\n    static readonly bitcrusherFreqRange: number = 14;\n    static readonly bitcrusherOctaveStep: number = 0.5;\n    static readonly bitcrusherQuantizationRange: number = 8;\n\n    static readonly maxEnvelopeCount: number = 16;\n    static readonly defaultAutomationRange: number = 13;\n    static readonly instrumentAutomationTargets: DictionaryArray<AutomationTarget> = toNameMap([\n        { name: \"none\", computeIndex: null, displayName: \"none\",             /*perNote: false,*/ interleave: false, isFilter: false, /*range: 0,                              */    maxCount: 1, effect: null, mdeffect: null, compatibleInstruments: null },\n        { name: \"noteVolume\", computeIndex: EnvelopeComputeIndex.noteVolume, displayName: \"pre volume\",      /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.volumeRange,             */    maxCount: 1, effect: null, mdeffect: null, compatibleInstruments: null },\n        { name: \"mixVolume\", computeIndex: EnvelopeComputeIndex.mixVolume, displayName: \"post volume\",      /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.volumeRange,             */    maxCount: 1, effect: null, mdeffect: null, compatibleInstruments: null },\n        { name: \"pulseWidth\", computeIndex: EnvelopeComputeIndex.pulseWidth, displayName: \"pulse width\",      /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.pulseWidthRange,         */    maxCount: 1, effect: null, mdeffect: null, compatibleInstruments: [InstrumentType.pwm, InstrumentType.supersaw] },\n        { name: \"stringSustain\", computeIndex: EnvelopeComputeIndex.stringSustain, displayName: \"sustain\",          /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.stringSustainRange,      */    maxCount: 1, effect: null, mdeffect: null, compatibleInstruments: [InstrumentType.pickedString] },\n        { name: \"unison\", computeIndex: EnvelopeComputeIndex.unison, displayName: \"unison\",           /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.defaultAutomationRange,  */    maxCount: 1, effect: null, mdeffect: null, compatibleInstruments: [InstrumentType.chip, InstrumentType.harmonics, InstrumentType.pickedString, InstrumentType.customChipWave, InstrumentType.pwm, InstrumentType.noise, InstrumentType.spectrum, InstrumentType.drumset] },\n        { name: \"operatorFrequency\", computeIndex: EnvelopeComputeIndex.operatorFrequency0, displayName: \"fm# freq\",         /*perNote:  true,*/ interleave: true, isFilter: false, /*range: Config.defaultAutomationRange,  */    maxCount: Config.operatorCount + 2, effect: null, mdeffect: null, compatibleInstruments: [InstrumentType.fm, InstrumentType.fm6op] },\n        { name: \"operatorAmplitude\", computeIndex: EnvelopeComputeIndex.operatorAmplitude0, displayName: \"fm# volume\",       /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.operatorAmplitudeMax + 1,*/    maxCount: Config.operatorCount + 2, effect: null, mdeffect: null, compatibleInstruments: [InstrumentType.fm, InstrumentType.fm6op] },\n        { name: \"feedbackAmplitude\", computeIndex: EnvelopeComputeIndex.feedbackAmplitude, displayName: \"fm feedback\",      /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.operatorAmplitudeMax + 1,*/    maxCount: 1, effect: null, mdeffect: null, compatibleInstruments: [InstrumentType.fm, InstrumentType.fm6op] },\n        { name: \"pitchShift\", computeIndex: EnvelopeComputeIndex.pitchShift, displayName: \"pitch shift\",      /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.pitchShiftRange,         */    maxCount: 1, effect: null, mdeffect: MDEffectType.pitchShift, compatibleInstruments: null },\n        { name: \"detune\", computeIndex: EnvelopeComputeIndex.detune, displayName: \"detune\",           /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.detuneMax + 1,           */    maxCount: 1, effect: null, mdeffect: MDEffectType.detune, compatibleInstruments: null },\n        { name: \"vibratoDepth\", computeIndex: EnvelopeComputeIndex.vibratoDepth, displayName: \"vibrato depth\",    /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.defaultAutomationRange,  */    maxCount: 1, effect: null, mdeffect: MDEffectType.vibrato, compatibleInstruments: null },\n        //{ name: \"vibratoSpeed\", computeIndex: EnvelopeComputeIndex.vibratoSpeed, displayName: \"vibrato speed\", /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.defaultAutomationRange,  */    maxCount: 1, effect: EffectType.vibrato, compatibleInstruments: null },\n        { name: \"noteFilterAllFreqs\", computeIndex: EnvelopeComputeIndex.noteFilterAllFreqs, displayName: \"pre eq freqs\",  /*perNote:  true,*/ interleave: false, isFilter: true, /*range: null,                           */    maxCount: 1, effect: null, mdeffect: null, compatibleInstruments: null },\n        { name: \"noteFilterFreq\", computeIndex: EnvelopeComputeIndex.noteFilterFreq0, displayName: \"pre eq # freq\", /*perNote:  true,*/ interleave: false/*true*/, isFilter: true, /*range: Config.filterFreqRange,     */        maxCount: Config.filterMaxPoints, effect: null, mdeffect: null, compatibleInstruments: null },\n        { name: \"decimalOffset\", computeIndex: EnvelopeComputeIndex.decimalOffset, displayName: \"decimal offset\",      /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.pulseWidthRange,         */    maxCount: 1, effect: null, mdeffect: null, compatibleInstruments: [InstrumentType.pwm, InstrumentType.supersaw] },\n        { name: \"supersawDynamism\", computeIndex: EnvelopeComputeIndex.supersawDynamism, displayName: \"dynamism\",         /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.supersawDynamismMax + 1, */    maxCount: 1, effect: null, mdeffect: null, compatibleInstruments: [InstrumentType.supersaw] },\n        { name: \"supersawSpread\", computeIndex: EnvelopeComputeIndex.supersawSpread, displayName: \"spread\",           /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.supersawSpreadMax + 1,   */    maxCount: 1, effect: null, mdeffect: null, compatibleInstruments: [InstrumentType.supersaw] },\n        { name: \"supersawShape\", computeIndex: EnvelopeComputeIndex.supersawShape, displayName: \"saw\u2194pulse\",        /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.supersawShapeMax + 1,    */    maxCount: 1, effect: null, mdeffect: null, compatibleInstruments: [InstrumentType.supersaw] },\n        { name: \"gain\", computeIndex: EnvelopeComputeIndex.gain, displayName: \"gain\",  /*perNote:  false,*/                  interleave: false, isFilter: false, /*range: Config.chorusRange,    */  maxCount: 1, effect: EffectType.gain, mdeffect: null, compatibleInstruments: null },\n        { name: \"panning\", computeIndex: EnvelopeComputeIndex.panning, displayName: \"panning\",  /*perNote:  false,*/                  interleave: false, isFilter: false, /*range: Config.chorusRange,    */  maxCount: 1, effect: EffectType.panning, mdeffect: null, compatibleInstruments: null },\n        { name: \"distortion\", computeIndex: EnvelopeComputeIndex.distortion, displayName: \"distortion\", /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.defaultAutomationRange,  */    maxCount: 1, effect: EffectType.distortion, mdeffect: null, compatibleInstruments: null },\n        { name: \"bitcrusherQuantization\", computeIndex: EnvelopeComputeIndex.bitcrusherQuantization, displayName: \"bitcrush\", /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.defaultAutomationRange,  */    maxCount: 1, effect: EffectType.bitcrusher, mdeffect: null, compatibleInstruments: null },\n        { name: \"bitcrusherFrequency\", computeIndex: EnvelopeComputeIndex.bitcrusherFrequency, displayName: \"freq crush\", /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.defaultAutomationRange,  */    maxCount: 1, effect: EffectType.bitcrusher, mdeffect: null, compatibleInstruments: null },\n        { name: \"flanger\", computeIndex: EnvelopeComputeIndex.flanger, displayName: \"flanger\", /*perNote:  false,*/                      interleave: false, isFilter: false, /*range: Config.chorusRange,    */  maxCount: 1, effect: EffectType.flanger, mdeffect: null, compatibleInstruments: null },\n        { name: \"flangerSpeed\", computeIndex: EnvelopeComputeIndex.flanger, displayName: \"flanger speed\", /*perNote:  false,*/                      interleave: false, isFilter: false, /*range: Config.chorusRange,    */  maxCount: 1, effect: EffectType.flanger, mdeffect: null, compatibleInstruments: null },\n        { name: \"flangerDepth\", computeIndex: EnvelopeComputeIndex.flanger, displayName: \"flanger depth\", /*perNote:  false,*/                      interleave: false, isFilter: false, /*range: Config.chorusRange,    */  maxCount: 1, effect: EffectType.flanger, mdeffect: null, compatibleInstruments: null },\n        { name: \"flangerFeedback\", computeIndex: EnvelopeComputeIndex.flanger, displayName: \"flanger feedback\", /*perNote:  false,*/                      interleave: false, isFilter: false, /*range: Config.chorusRange,    */  maxCount: 1, effect: EffectType.flanger, mdeffect: null, compatibleInstruments: null },\n        { name: \"chorus\", computeIndex: EnvelopeComputeIndex.chorus, displayName: \"chorus\", /*perNote:  false,*/                      interleave: false, isFilter: false, /*range: Config.chorusRange,    */  maxCount: 1, effect: EffectType.chorus, mdeffect: null, compatibleInstruments: null },\n        { name: \"echoSustain\", computeIndex: EnvelopeComputeIndex.echoSustain, displayName: \"echo\", /*perNote:  false,*/              interleave: false, isFilter: false,  /*range: Config.chorusRange,    */  maxCount: 1, effect: EffectType.echo, mdeffect: null, compatibleInstruments: null },\n        { name: \"reverb\", computeIndex: EnvelopeComputeIndex.reverb, displayName: \"reverb\", /*perNote:  false,*/              interleave: false, isFilter: false,  /*range: Config.chorusRange,    */  maxCount: 1, effect: EffectType.reverb, mdeffect: null, compatibleInstruments: null },\n        { name: \"arpeggioSpeed\", computeIndex: EnvelopeComputeIndex.arpeggioSpeed, displayName: \"arpeggio speed\", /*perNote:  false,*/              interleave: false, isFilter: false,  /*range: Config.chorusRange,    */  maxCount: 1, effect: null, mdeffect: MDEffectType.chord, compatibleInstruments: null },\n        { name: \"ringModulation\", computeIndex: EnvelopeComputeIndex.ringModulation, displayName: \"ring mod\", interleave: false, isFilter: false, maxCount: 1, effect: EffectType.ringModulation, mdeffect: null, compatibleInstruments: null },\n        { name: \"ringModulationHz\", computeIndex: EnvelopeComputeIndex.ringModulationHz, displayName: \"ring mod hz\", interleave: false, isFilter: false, maxCount: 1, effect: EffectType.ringModulation, mdeffect: null, compatibleInstruments: null },\n        { name: \"granular\", computeIndex: EnvelopeComputeIndex.granular, displayName: \"granular\", interleave: false, isFilter: false, maxCount: 1, effect: EffectType.granular, mdeffect: null, compatibleInstruments: null },\n        { name: \"grainFreq\", computeIndex: EnvelopeComputeIndex.grainAmount, displayName: \"grain freq\", interleave: false, isFilter: false, maxCount: 1, effect: EffectType.granular, mdeffect: null, compatibleInstruments: null },\n        { name: \"grainSize\", computeIndex: EnvelopeComputeIndex.grainSize, displayName: \"grain size\", interleave: false, isFilter: false, maxCount: 1, effect: EffectType.granular, mdeffect: null, compatibleInstruments: null },\n        { name: \"grainRange\", computeIndex: EnvelopeComputeIndex.grainRange, displayName: \"grain range\", interleave: false, isFilter: false, maxCount: 1, effect: EffectType.granular, mdeffect: null, compatibleInstruments: null },\n        { name: \"echoDelay\", computeIndex: EnvelopeComputeIndex.echoDelay, displayName: \"echo delay\", interleave: false, isFilter: false, maxCount: 1, effect: EffectType.echo, mdeffect: null, compatibleInstruments: null },\n        // Controlling filter gain is less obvious and intuitive than controlling filter freq, so to avoid confusion I've disabled it for now...\n        //{name: \"noteFilterGain\",         computeIndex:       EnvelopeComputeIndex.noteFilterGain0,        displayName: \"n. filter # vol\",  /*perNote:  true,*/ interleave: false, isFilter:  true, range: Config.filterGainRange,             maxCount: Config.filterMaxPoints, effect: EffectType.eqFilter, compatibleInstruments: null},\n        /*\n        {name: \"eqFilterAllFreqs\",       computeIndex: InstrumentAutomationIndex.eqFilterAllFreqs,       displayName: \"eq filter freqs\",  perNote: false, interleave: false, isFilter:  true, range: null,                               maxCount: 1,    effect: null,                    compatibleInstruments: null},\n        {name: \"eqFilterFreq\",           computeIndex: InstrumentAutomationIndex.eqFilterFreq0,          displayName: \"eq filter # freq\", perNote: false, interleave:  true, isFilter:  true, range: Config.filterFreqRange,             maxCount: Config.filterMaxPoints, effect: null,  compatibleInstruments: null},\n        {name: \"eqFilterGain\",           computeIndex: InstrumentAutomationIndex.eqFilterGain0,          displayName: \"eq filter # vol\",  perNote: false, interleave: false, isFilter:  true, range: Config.filterGainRange,             maxCount: Config.filterMaxPoints, effect: null,  compatibleInstruments: null},\n        {name: \"envelope#\",              computeIndex: null,                                             displayName: \"envelope\",         perNote: false, interleave: false, isFilter: false, range: Config.defaultAutomationRange,      maxCount: Config.maxEnvelopeCount, effect: null, compatibleInstruments: null}, // maxCount special case for envelopes to be allowed to target earlier ones.\n        */\n    ]);\n    static readonly operatorWaves: DictionaryArray<OperatorWave> = toNameMap([\n        { name: \"sine\", samples: Config.sineWave },\n        { name: \"triangle\", samples: Config.generateTriWave() },\n        { name: \"pulse width\", samples: Config.generateSquareWave(0.5) },\n        { name: \"sawtooth\", samples: Config.generateSawWave() },\n        { name: \"ramp\", samples: Config.generateSawWave(true) },\n        { name: \"trapezoid\", samples: Config.generateTrapezoidWave(2) },\n        { name: \"quasi-sine\", samples: Config.generateQuasiSineWave() },\n        //{ name: \"white noise\", samples: generateWhiteNoiseFmWave() },\n        //{ name: \"1-bit white noise\", samples: generateOneBitWhiteNoiseFmWave() },\n    ]);\n    static readonly pwmOperatorWaves: DictionaryArray<OperatorWave> = toNameMap([\n        { name: \"1%\", samples: Config.generateSquareWave(0.01) },\n        { name: \"5%\", samples: Config.generateSquareWave(0.05) },\n        { name: \"12.5%\", samples: Config.generateSquareWave(0.125) },\n        { name: \"25%\", samples: Config.generateSquareWave(0.25) },\n        { name: \"33%\", samples: Config.generateSquareWave(1 / 3) },\n        { name: \"50%\", samples: Config.generateSquareWave(0.5) },\n        { name: \"66%\", samples: Config.generateSquareWave(2 / 3) },\n        { name: \"75%\", samples: Config.generateSquareWave(0.75) },\n        { name: \"87.5%\", samples: Config.generateSquareWave(0.875) },\n        { name: \"95%\", samples: Config.generateSquareWave(0.95) },\n        { name: \"99%\", samples: Config.generateSquareWave(0.99) },\n    ]);\n\n\n    // Height of the small editor column for inserting/deleting rows, in pixels.\n    static readonly barEditorHeight: number = 10;\n\n    // Careful about changing index ordering for this. Index is stored in URL/JSON etc.\n    static readonly modulators: DictionaryArray<Modulator> = toNameMap([\n        {\n            name: \"none\", pianoName: \"None\", maxRawVol: 6, newNoteVol: 6, forSong: true, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"No Mod Setting\", promptDesc: [\"No setting has been chosen yet, so this modulator will have no effect. Try choosing a setting with the dropdown, then click this '?' again for more info.\", \"[$LO - $HI]\"]\n        },\n        {\n            name: \"song volume\", pianoName: \"Volume\", maxRawVol: 100, newNoteVol: 100, forSong: true, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Song Volume\", promptDesc: [\"This setting affects the overall volume of the song, just like the main volume slider.\", \"At $HI, the volume will be unchanged from default, and it will get gradually quieter down to $LO.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"]\n        },\n        {\n            name: \"tempo\", pianoName: \"Tempo\", maxRawVol: Config.tempoMax - Config.tempoMin, newNoteVol: Math.ceil((Config.tempoMax - Config.tempoMin) / 2), forSong: true, convertRealFactor: Config.tempoMin, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Song Tempo\", promptDesc: [\"This setting controls the speed your song plays at, just like the tempo slider.\", \"When you first make a note for this setting, it will default to your current tempo. Raising it speeds up the song, up to $HI BPM, and lowering it slows it down, to a minimum of $LO BPM.\", \"Note that you can make a 'swing' effect by rapidly changing between two tempo values.\", \"[OVERWRITING] [$LO - $HI] [BPM]\"]\n        },\n        {\n            name: \"song reverb\", pianoName: \"Reverb\", maxRawVol: Config.reverbRange * 2, newNoteVol: Config.reverbRange, forSong: true, convertRealFactor: -Config.reverbRange, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Song Reverb\", promptDesc: [\"This setting affects the overall reverb of your song. It works by multiplying existing reverb for instruments, so those with no reverb set will be unaffected.\", \"At $MID, all instruments' reverb will be unchanged from default. This increases up to double the reverb value at $HI, or down to no reverb at $LO.\", \"[MULTIPLICATIVE] [$LO - $HI]\"]\n        },\n        {\n            name: \"next bar\", pianoName: \"Next Bar\", maxRawVol: 1, newNoteVol: 1, forSong: true, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Go To Next Bar\", promptDesc: [\"This setting functions a little different from most. Wherever a note is placed, the song will jump immediately to the next bar when it is encountered.\", \"This jump happens at the very start of the note, so the length of a next-bar note is irrelevant. Also, the note can be value 0 or 1, but the value is also irrelevant - wherever you place a note, the song will jump.\", \"You can make mixed-meter songs or intro sections by cutting off unneeded beats with a next-bar modulator.\", \"[$LO - $HI]\"]\n        },\n        {\n            name: \"pre volume\", pianoName: \"Note Vol.\", maxRawVol: Config.volumeRange, newNoteVol: Math.ceil(Config.volumeRange / 2), forSong: false, convertRealFactor: Math.ceil(-Config.volumeRange / 2.0), associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Instrument Pre Volume\", promptDesc: [\"This setting affects the volume of your instrument as if its note size had been scaled.\", \"At $MID, an instrument's volume will be unchanged from default. This means you can still use the volume sliders to mix the base volume of instruments. The volume gradually increases up to $HI, or decreases down to mute at $LO.\", \"This setting was the default for volume modulation in JummBox for a long time. Due to some new effects like distortion and bitcrush, pre volume doesn't always allow fine volume control. Also, this modulator affects the value of FM modulator waves instead of just carriers. This can distort the sound which may be useful, but also may be undesirable. In those cases, use the 'post volume' modulator instead, which will always just scale the volume with no added effects.\", \"For display purposes, this mod will show up on the instrument volume slider, as long as there is not also an active 'post volume' modulator anyhow. However, as mentioned, it works more like changing pre volume.\", \"[MULTIPLICATIVE] [$LO - $HI]\"]\n        },\n        {\n            name: \"gain\", pianoName: \"Gain\", maxRawVol: Config.volumeRange / 2 * Config.gainRangeMult, newNoteVol: Math.ceil(Config.volumeRange / 2 * Config.gainRangeMult / 2), forSong: false, convertRealFactor: 0, associatedEffect: EffectType.gain, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Instrument Gain\", promptDesc: [\"This setting controls the gain of your instrument.\", \"At $LO, the instrument is muted, at $MID it will be unchanged, and at $HI, it will have maximum gain.\", \"[OVERWRITING] [$LO - $HI] [L-R]\"]\n        },\n        {\n            name: \"pan\", pianoName: \"Pan\", maxRawVol: Config.panMax, newNoteVol: Math.ceil(Config.panMax / 2), forSong: false, convertRealFactor: 0, associatedEffect: EffectType.panning, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Instrument Panning\", promptDesc: [\"This setting controls the panning of your instrument, just like the panning slider.\", \"At $LO, your instrument will sound like it is coming fully from the left-ear side. At $MID it will be right in the middle, and at $HI, it will sound like it's on the right.\", \"[OVERWRITING] [$LO - $HI] [L-R]\"]\n        },\n        {\n            name: \"reverb\", pianoName: \"Reverb\", maxRawVol: Config.reverbRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.reverb, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Instrument Reverb\", promptDesc: [\"This setting controls the reverb of your insturment, just like the reverb slider.\", \"At $LO, your instrument will have no reverb. At $HI, it will be at maximum.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"distortion\", pianoName: \"Distortion\", maxRawVol: Config.distortionRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.distortion, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Instrument Distortion\", promptDesc: [\"This setting controls the amount of distortion for your instrument, just like the distortion slider.\", \"At $LO, your instrument will have no distortion. At $HI, it will be at maximum.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"fm slider 1\", pianoName: \"FM 1\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"FM Slider 1\", promptDesc: [\"This setting affects the strength of the first FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"]\n        },\n        {\n            name: \"fm slider 2\", pianoName: \"FM 2\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"FM Slider 2\", promptDesc: [\"This setting affects the strength of the second FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"]\n        },\n        {\n            name: \"fm slider 3\", pianoName: \"FM 3\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"FM Slider 3\", promptDesc: [\"This setting affects the strength of the third FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"]\n        },\n        {\n            name: \"fm slider 4\", pianoName: \"FM 4\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"FM Slider 4\", promptDesc: [\"This setting affects the strength of the fourth FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"]\n        },\n        {\n            name: \"fm feedback\", pianoName: \"FM Feedbck\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"FM Feedback\", promptDesc: [\"This setting affects the strength of the FM feedback slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"]\n        },\n        {\n            name: \"pulse width\", pianoName: \"Pulse Width\", maxRawVol: Config.pulseWidthRange, newNoteVol: Config.pulseWidthRange, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Pulse Width\", promptDesc: [\"This setting controls the width of this instrument's pulse wave, just like the pulse width slider.\", \"At $HI, your instrument will sound like a pure square wave (on 50% of the time). It will gradually sound narrower down to $LO, where it will be inaudible (as it is on 0% of the time).\", \"Changing pulse width randomly between a few values is a common strategy in chiptune music to lend some personality to a lead instrument.\", \"[OVERWRITING] [$LO - $HI] [%Duty]\"]\n        },\n        {\n            name: \"detune\", pianoName: \"Detune\", maxRawVol: Config.detuneMax - Config.detuneMin, newNoteVol: Config.detuneCenter, forSong: false, convertRealFactor: -Config.detuneCenter, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.detune, maxIndex: 0,\n            promptName: \"Instrument Detune\", promptDesc: [\"This setting controls the detune for this instrument, just like the detune slider.\", \"At $MID, your instrument will have no detune applied. Each tick corresponds to one cent, or one-hundredth of a pitch. Thus, each change of 100 ticks corresponds to one half-step of detune, up to two half-steps up at $HI, or two half-steps down at $LO.\", \"[OVERWRITING] [$LO - $HI] [cents]\"]\n        },\n        {\n            name: \"vibrato depth\", pianoName: \"Vibrato Depth\", maxRawVol: 50, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.vibrato, maxIndex: 0,\n            promptName: \"Vibrato Depth\", promptDesc: [\"This setting controls the amount that your pitch moves up and down by during vibrato, just like the vibrato depth slider.\", \"At $LO, your instrument will have no vibrato depth so its vibrato would be inaudible. This increases up to $HI, where an extreme pitch change will be noticeable.\", \"[OVERWRITING] [$LO - $HI] [pitch \u00F725]\"]\n        },\n        {\n            name: \"song detune\", pianoName: \"Detune\", maxRawVol: Config.songDetuneMax - Config.songDetuneMin, newNoteVol: Math.ceil((Config.songDetuneMax - Config.songDetuneMin) / 2), forSong: true, convertRealFactor: -250, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Song Detune\", promptDesc: [\"This setting controls the overall detune of the entire song. There is no associated slider.\", \"At $MID, your song will have no extra detune applied and sound unchanged from default. Each tick corresponds to four cents, or four hundredths of a pitch. Thus, each change of 25 ticks corresponds to one half-step of detune, up to 10 half-steps up at $HI, or 10 half-steps down at $LO.\", \"[MULTIPLICATIVE] [$LO - $HI] [cents x4]\"]\n        },\n        {\n            name: \"vibrato speed\", pianoName: \"Vibrato Speed\", maxRawVol: 30, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.vibrato, maxIndex: 0,\n            promptName: \"Vibrato Speed\", promptDesc: [\"This setting controls the speed your instrument will vibrato at, just like the slider.\", \"A setting of $LO means there will be no oscillation, and vibrato will be disabled. Higher settings will increase the speed, up to a dramatic trill at the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"vibrato delay\", pianoName: \"Vibrato Delay\", maxRawVol: 50, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.vibrato, maxIndex: 0,\n            promptName: \"Vibrato Delay\", promptDesc: [\"This setting controls the amount of time vibrato will be held off for before triggering for every new note, just like the slider.\", \"A setting of $LO means there will be no delay. A setting of 24 corresponds to one full beat of delay. As a sole exception to this scale, setting delay to $HI will completely disable vibrato (as if it had infinite delay).\", \"[OVERWRITING] [$LO - $HI] [beats \u00F724]\"]\n        },\n        {\n            name: \"arp speed\", pianoName: \"Arp Speed\", maxRawVol: 50, newNoteVol: 12, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.chord, maxIndex: 0,\n            promptName: \"Arpeggio Speed\", promptDesc: [\"This setting controls the speed at which your instrument's chords arpeggiate, just like the arpeggio speed slider.\", \"Each setting corresponds to a different speed, from the slowest to the fastest. The speeds are listed below.\",\n                \"[0-4]: x0, x1/16, x\u215B, x\u2155, x\u00BC,\", \"[5-9]: x\u2153, x\u2156, x\u00BD, x\u2154, x\u00BE,\", \"[10-14]: x\u2158, x0.9, x1, x1.1, x1.2,\", \"[15-19]: x1.3, x1.4, x1.5, x1.6, x1.7,\", \"[20-24]: x1.8, x1.9, x2, x2.1, x2.2,\", \"[25-29]: x2.3, x2.4, x2.5, x2.6, x2.7,\", \"[30-34]: x2.8, x2.9, x3, x3.1, x3.2,\", \"[35-39]: x3.3, x3.4, x3.5, x3.6, x3.7,\", \"[40-44]: x3.8, x3.9, x4, x4.15, x4.3,\", \"[45-50]: x4.5, x4.8, x5, x5.5, x6, x8\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"pan delay\", pianoName: \"Pan Delay\", maxRawVol: 20, newNoteVol: 10, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.panning, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Panning Delay\", promptDesc: [\"This setting controls the delay applied to panning for your instrument, just like the pan delay slider.\", \"With more delay, the panning effect will generally be more pronounced. $MID is the default value, whereas $LO will remove any delay at all. No delay can be desirable for chiptune songs.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"reset arp\", pianoName: \"Reset Arp\", maxRawVol: 1, newNoteVol: 1, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.chord, maxIndex: 0,\n            promptName: \"Reset Arpeggio\", promptDesc: [\"This setting functions a little different from most. Wherever a note is placed, the arpeggio of this instrument will reset at the very start of that note. This is most noticeable with lower arpeggio speeds. The lengths and values of notes for this setting don't matter, just the note start times.\", \"This mod can be used to sync up your apreggios so that they always sound the same, even if you are using an odd-ratio arpeggio speed or modulating arpeggio speed.\", \"[$LO - $HI]\"]\n        },\n        {\n            name: \"post eq\", pianoName: \"PostEQ\", maxRawVol: 10, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"EQ Filter\", promptDesc: [\"This setting controls a few separate things for your instrument's EQ filter.\", \"When the option 'morph' is selected, your modulator values will indicate a sub-filter index of your EQ filter to 'morph' to over time. For example, a change from 0 to 1 means your main filter (default) will morph to sub-filter 1 over the specified duration. You can shape the main filter and sub-filters in the large filter editor ('+' button). If your two filters' number, type, and order of filter dots all match up, the morph will happen smoothly and you'll be able to hear them changing. If they do not match up, the filters will simply jump between each other.\", \"Note that filters will morph based on endpoints in the pattern editor. So, if you specify a morph from sub-filter 1 to 4 but do not specifically drag in new endpoints for 2 and 3, it will morph directly between 1 and 4 without going through the others.\", \"If you target Dot X or Dot Y, you can finely tune the coordinates of a single dot for your filter. The number of available dots to choose is dependent on your main filter's dot count.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"pre eq\", pianoName: \"PreEQ\", maxRawVol: 10, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.eqFilter, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Note Filter\", promptDesc: [\"This setting controls a few separate things for your instrument's note filter.\", \"When the option 'morph' is selected, your modulator values will indicate a sub-filter index of your note filter to 'morph' to over time. For example, a change from 0 to 1 means your main filter (default) will morph to sub-filter 1 over the specified duration. You can shape the main filter and sub-filters in the large filter editor ('+' button). If your two filters' number, type, and order of filter dots all match up, the morph will happen smoothly and you'll be able to hear them changing. If they do not match up, the filters will simply jump between each other.\", \"Note that filters will morph based on endpoints in the pattern editor. So, if you specify a morph from sub-filter 1 to 4 but do not specifically drag in new endpoints for 2 and 3, it will morph directly between 1 and 4 without going through the others.\", \"If you target Dot X or Dot Y, you can finely tune the coordinates of a single dot for your filter. The number of available dots to choose is dependent on your main filter's dot count.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"bit crush\", pianoName: \"Bitcrush\", maxRawVol: Config.bitcrusherQuantizationRange - 1, newNoteVol: Math.round(Config.bitcrusherQuantizationRange / 2), forSong: false, convertRealFactor: 0, associatedEffect: EffectType.bitcrusher, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Instrument Bit Crush\", promptDesc: [\"This setting controls the bit crush of your instrument, just like the bit crush slider.\", \"At a value of $LO, no bit crush will be applied. This increases and the bit crush effect gets more noticeable up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"freq crush\", pianoName: \"Freq Crush\", maxRawVol: Config.bitcrusherFreqRange - 1, newNoteVol: Math.round(Config.bitcrusherFreqRange / 2), forSong: false, convertRealFactor: 0, associatedEffect: EffectType.bitcrusher, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Instrument Frequency Crush\", promptDesc: [\"This setting controls the frequency crush of your instrument, just like the freq crush slider.\", \"At a value of $LO, no frequency crush will be applied. This increases and the frequency crush effect gets more noticeable up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"echo\", pianoName: \"Echo\", maxRawVol: Config.echoSustainRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.echo, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Instrument Echo Sustain\", promptDesc: [\"This setting controls the echo sustain (echo loudness) of your instrument, just like the echo slider.\", \"At $LO, your instrument will have no echo sustain and echo will not be audible. Echo sustain increases and the echo effect gets more noticeable up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"echo delay\", pianoName: \"Echo Delay\", maxRawVol: Config.echoDelayRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.echo, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Instrument Echo Delay\", promptDesc: [\"This setting controls the echo delay of your instrument, just like the echo delay slider.\", \"At $LO, your instrument will have very little echo delay, and this increases up to 2 beats of delay at $HI.\", \"[OVERWRITING] [$LO - $HI] [~beats \u00F712]\"]\n        },\n        {\n            name: \"echo ping pong\", pianoName: \"Ping-Pong\", maxRawVol: Config.panMax, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.echo, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Instrument Ping Pong\", promptDesc: [\"This setting controls the echo ping-pong of your instrument, just like the echo delay slider.\", \"At $LO, the echo will start fully from the left-ear side. At $MID there will be no echo ping pong, and at $HI, it will start coming fully from the right.\", \"[OVERWRITING] [$LO - $HI] [L-R]\"]\n        },\n        {\n            name: \"flanger\", pianoName: \"Flanger\", maxRawVol: Config.flangerRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.flanger, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Instrument Flanger\", promptDesc: [\"This setting controls the flanger strength of your instrument, just like the flanger slider.\", \"At $LO, the flanger effect will be disabled. The strength of the flanger effect increases up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"flanger speed\", pianoName: \"Flanger Spd\", maxRawVol: Config.flangerSpeedRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.flanger, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Instrument Flanger Speed\", promptDesc: [\"This setting controls the flanger speed of your instrument, just like the flanger speed slider.\"]\n        },\n        {\n            name: \"flanger depth\", pianoName: \"Flanger Dpth\", maxRawVol: Config.flangerDepthRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.flanger, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Instrument Flanger Depth\", promptDesc: [\"This setting controls the flanger depth of your instrument, just like the flanger depth slider.\"]\n        },\n        {\n            name: \"flanger feedback\", pianoName: \"Flanger Fbck\", maxRawVol: Config.flangerFeedbackRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.flanger, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Instrument Flanger Feedback\", promptDesc: [\"This setting controls the flanger feedback of your instrument, just like the flanger feedback slider.\"]\n        },\n        {\n            name: \"chorus\", pianoName: \"Chorus\", maxRawVol: Config.chorusRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.chorus, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Instrument Chorus\", promptDesc: [\"This setting controls the chorus strength of your instrument, just like the chorus slider.\", \"At $LO, the chorus effect will be disabled. The strength of the chorus effect increases up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"post eq cut\", pianoName: \"PostEQ Cut\", maxRawVol: Config.filterSimpleCutRange - 1, newNoteVol: Config.filterSimpleCutRange - 1, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"EQ Filter Cutoff Frequency\", promptDesc: [\"This setting controls the filter cut position of your instrument, just like the filter cut slider.\", \"This setting is roughly analagous to the horizontal position of a single low-pass dot on the advanced filter editor. At lower values, a wider range of frequencies is cut off.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"post eq peak\", pianoName: \"PostEQ Peak\", maxRawVol: Config.filterSimplePeakRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"EQ Filter Peak Gain\", promptDesc: [\"This setting controls the filter peak position of your instrument, just like the filter peak slider.\", \"This setting is roughly analagous to the vertical position of a single low-pass dot on the advanced filter editor. At lower values, the cutoff frequency will not be emphasized, and at higher values you will hear emphasis on the cutoff frequency.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"pre eq cut\", pianoName: \"PreEQ Cut\", maxRawVol: Config.filterSimpleCutRange - 1, newNoteVol: Config.filterSimpleCutRange - 1, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.eqFilter, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Note Filter Cutoff Frequency\", promptDesc: [\"This setting controls the filter cut position of your instrument, just like the filter cut slider.\", \"This setting is roughly analagous to the horizontal position of a single low-pass dot on the advanced filter editor. At lower values, a wider range of frequencies is cut off.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"pre eq peak\", pianoName: \"PreEQ Peak\", maxRawVol: Config.filterSimplePeakRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.eqFilter, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Note Filter Peak Gain\", promptDesc: [\"This setting controls the filter peak position of your instrument, just like the filter peak slider.\", \"This setting is roughly analagous to the vertical position of a single low-pass dot on the advanced filter editor. At lower values, the cutoff frequency will not be emphasized, and at higher values you will hear emphasis on the cutoff frequency.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"pitch shift\", pianoName: \"Pitch Shift\", maxRawVol: Config.pitchShiftRange - 1, newNoteVol: Config.pitchShiftCenter, forSong: false, convertRealFactor: -Config.pitchShiftCenter, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.pitchShift, maxIndex: 0,\n            promptName: \"Pitch Shift\", promptDesc: [\"This setting controls the pitch offset of your instrument, just like the pitch shift slider.\", \"At $MID your instrument will have no pitch shift. This increases as you decrease toward $LO pitches (half-steps) at the low end, or increases towards +$HI pitches at the high end.\", \"[OVERWRITING] [$LO - $HI] [pitch]\"]\n        },\n        {\n            name: \"sustain\", pianoName: \"Sustain\", maxRawVol: Config.stringSustainRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Picked String Sustain\", promptDesc: [\"This setting controls the sustain of your picked string instrument, just like the sustain slider.\", \"At $LO, your instrument will have minimum sustain and sound 'plucky'. This increases to a more held sound as your modulator approaches the maximum, $HI.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"post volume\", pianoName: \"Mix Vol.\", maxRawVol: Config.volumeRange, newNoteVol: Math.ceil(Config.volumeRange / 2), forSong: false, convertRealFactor: Math.ceil(-Config.volumeRange / 2.0), associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Instrument Post Volume\", promptDesc: [\"This setting affects the volume of your instrument as if its volume slider had been moved.\", \"At $MID, an instrument's volume will be unchanged from default. This means you can still use the volume sliders to mix the base volume of instruments, since this setting and the default value work multiplicatively. The volume gradually increases up to $HI, or decreases down to mute at $LO.\", \"Unlike the 'note volume' setting, mix volume is very straightforward and simply affects the resultant instrument volume after all effects are applied.\", \"[MULTIPLICATIVE] [$LO - $HI]\"]\n        },\n        {\n            name: \"fm slider 5\", pianoName: \"FM 5\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"FM Slider 5\", promptDesc: [\"This setting affects the strength of the fifth FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"]\n        },\n        {\n            name: \"fm slider 6\", pianoName: \"FM 6\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"FM Slider 6\", promptDesc: [\"This setting affects the strength of the sixth FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"]\n        },\n        {\n            name: \"decimal offset\", pianoName: \"Decimal Offset\", maxRawVol: 99, newNoteVol: 0, forSong: false, convertRealFactor: 0, invertSliderIndicator: true, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Decimal Offset\", promptDesc: [\"This setting controls the decimal offset that is subtracted from the pulse width; use this for creating values like 12.5 or 6.25.\", \"[$LO - $HI]\"]\n        },\n        {\n            name: \"envelope speed\", pianoName: \"EnvelopeSpd\", maxRawVol: 50, newNoteVol: 12, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Envelope Speed\", promptDesc: [\"This setting controls how fast all of the envelopes for the instrument play.\", \"At $LO, your instrument's envelopes will be frozen, and at values near there they will change very slowly. At 12, the envelopes will work as usual, performing at normal speed. This increases up to $HI, where the envelopes will change very quickly. The speeds are given below:\",\n                \"[0-4]: x0, x1/16, x\u215B, x\u2155, x\u00BC,\", \"[5-9]: x\u2153, x\u2156, x\u00BD, x\u2154, x\u00BE,\", \"[10-14]: x\u2158, x0.9, x1, x1.1, x1.2,\", \"[15-19]: x1.3, x1.4, x1.5, x1.6, x1.7,\", \"[20-24]: x1.8, x1.9, x2, x2.1, x2.2,\", \"[25-29]: x2.3, x2.4, x2.5, x2.6, x2.7,\", \"[30-34]: x2.8, x2.9, x3, x3.1, x3.2,\", \"[35-39]: x3.3, x3.4, x3.5, x3.6, x3.7,\", \"[40-44]: x3.8, x3.9, x4, x4.15, x4.3,\", \"[45-50]: x4.5, x4.8, x5, x5.5, x6, x8\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"dynamism\", pianoName: \"Dynamism\", maxRawVol: Config.supersawDynamismMax, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Supersaw Dynamism\", promptDesc: [\"This setting controls the supersaw dynamism of your instrument, just like the dynamism slider.\", \"At $LO, your instrument will have only a single pulse contributing. Increasing this will raise the contribution of other waves which is similar to a chorus effect. The effect gets more noticeable up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"spread\", pianoName: \"Spread\", maxRawVol: Config.supersawSpreadMax, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Supersaw Spread\", promptDesc: [\"This setting controls the supersaw spread of your instrument, just like the spread slider.\", \"At $LO, all the pulses in your supersaw will be at the same frequency. Increasing this value raises the frequency spread of the contributing waves, up to a dissonant spread at the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"saw shape\", pianoName: \"Saw Shape\", maxRawVol: Config.supersawShapeMax, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Supersaw Shape\", promptDesc: [\"This setting controls the supersaw shape of your instrument, just like the Saw\u2194Pulse slider.\", \"As the slider's name implies, this effect will give you a sawtooth wave at $LO, and a full pulse width wave at $HI. Values in between will be a blend of the two.\", \"[OVERWRITING] [$LO - $HI] [%]\"]\n        },\n        {\n            name: \"individual envelope speed\", pianoName: \"IndvEnvSpd\", maxRawVol: 63, newNoteVol: 23, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: this.maxEnvelopeCount - 1,\n            promptName: \"Individual Envelope Speed\", promptDesc: [\"This setting controls how fast the specified envelope of the instrument will play.\", \"At $LO, your the envelope will be frozen, and at values near there they will change very slowly. At 23, the envelope will work as usual, performing at normal speed. This increases up to $HI, where the envelope will change very quickly. The speeds are given below:\",\n                \"[0-4]: x0, x0.01, x0.02, x0.03, x0.04,\", \"[5-9]: x0.05, x0.06, x0.07, x0.08, x0.09,\", \"[10-14]: x0.1, x0.2, x0.25, x0.3, x0.33,\", \"[15-19]: x0.4, x0.5, x0.6, x0.6667, x0.7,\", \"[20-24]: x0.75, x0.8, x0.9, x1, x1.25,\", \"[25-29]: x1.3333, x1.5, x1.6667, x1.75, x2,\", \"[30-34]: x2.25, x2.5, x2.75, x3, x3.5,\", \"[35-39]: x4, x4.5, x5, x5.5, x6,\", \"[40-44]: x6.5, x7, x7.5, x8, x8.5,\", \"[45-49]: x9, x9.5, x10, x11, x12\", \"[50-54]: x13, x14, x15, x16, x17\", \"[55-59]: x18, x19, x20, x24, x32\", \"[60-63]: x40, x64, x128, x256\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"song eq\", pianoName: \"Song EQ\", maxRawVol: 10, newNoteVol: 0, forSong: true, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Song EQ Filter\", promptDesc: [\"This setting overwrites every instrument's eq filter. You can do this in a few separate ways, similar to the per instrument eq filter modulator.\", \"When the option 'morph' is selected, your modulator values will indicate a sub-filter index of your EQ filter to 'morph' to over time. For example, a change from 0 to 1 means your main filter (default) will morph to sub-filter 1 over the specified duration. You can shape the main filter and sub-filters in the large filter editor ('+' button). If your two filters' number, type, and order of filter dots all match up, the morph will happen smoothly and you'll be able to hear them changing. If they do not match up, the filters will simply jump between each other.\", \"Note that filters will morph based on endpoints in the pattern editor. So, if you specify a morph from sub-filter 1 to 4 but do not specifically drag in new endpoints for 2 and 3, it will morph directly between 1 and 4 without going through the others.\", \"If you target Dot X or Dot Y, you can finely tune the coordinates of a single dot for your filter. The number of available dots to choose is dependent on your main filter's dot count.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"reset envelope\", pianoName: \"ResetEnv\", maxRawVol: 1, newNoteVol: 1, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: this.maxEnvelopeCount - 1,\n            promptName: \"Reset Envelope\", promptDesc: [\"This setting functions a lot like the reset arp modulator. Wherever a note is placed, the envelope of this instrument at the specified index will reset at the very start of that note. \", \"[$LO - $HI]\",]\n        },\n        {\n            name: \"ring modulation\", pianoName: \"Ring Mod\", maxRawVol: Config.ringModRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.ringModulation, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Ring Modulation\", promptDesc: [\"This setting controls the Ring Modulation effect in your instrument.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"ring mod hertz\", pianoName: \"Ring Mod(Hz)\", maxRawVol: Config.ringModHzRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.ringModulation, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Ring Modulation (Hertz)\", promptDesc: [\"This setting controls the Hertz (Hz) used in the Ring Modulation effect in your instrument.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"granular\", pianoName: \"Granular\", maxRawVol: Config.granularRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.granular, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Granular\", promptDesc: [\"This setting controls the granular effect in your instrument.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"grain freq\", pianoName: \"Grain #\", maxRawVol: Config.grainAmountsMax, newNoteVol: 8, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.granular, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Grain Count\", promptDesc: [\"This setting controls the density of grains for the granular effect on your instrument.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"grain size\", pianoName: \"Grain Size\", maxRawVol: Config.grainSizeMax / Config.grainSizeStep, newNoteVol: Config.grainSizeMin / Config.grainSizeStep, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.granular, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Grain Size\", promptDesc: [\"This setting controls the grain size of the granular effect in your instrument.\", \"The number shown in the mod channel is multiplied by \" + Config.grainSizeStep + \" to get the actual grain size.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"grain range\", pianoName: \"Grain Range\", maxRawVol: Config.grainRangeMax / Config.grainSizeStep, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.granular, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Grain Range\", promptDesc: [\"This setting controls the range of values for your grain size of the granular effect in your instrument, from no variation to a lot\", \"The number shown in the mod channel is multiplied by \" + Config.grainSizeStep + \" to get the actual grain size.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"individual envelope lower bound\", pianoName: \"IndvEnvLow\", maxRawVol: Config.perEnvelopeBoundMax * 10, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: this.maxEnvelopeCount - 1,\n            promptName: \"Individual Envelope Lower Bound\", promptDesc: [\"This setting controls the envelope lower bound\", \"At $LO, your the envelope will output an upper envelope bound to 0, and at $HI your envelope will output an upper envelope bound to 2.\", \"This settings will not work if your lower envelope bound is higher than your upper envelope bound\",]\n        },\n        {\n            name: \"individual envelope upper bound\", pianoName: \"IndvEnvUp\", maxRawVol: Config.perEnvelopeBoundMax * 10, newNoteVol: 10, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: this.maxEnvelopeCount - 1,\n            promptName: \"Individual Envelope Upper Bound\", promptDesc: [\"This setting controls the envelope upper bound\", \"At $LO, your the envelope will output a 0 to lower envelope bound, and at $HI your envelope will output a 2 to lower envelope bound.\", \"This settings will not work if your lower envelope bound is higher than your upper envelope bound\",]\n        },\n    ]);\n}\n\nfunction centerWave(wave: Array<number>): Float32Array {\n    let sum: number = 0.0;\n    for (let i: number = 0; i < wave.length; i++) sum += wave[i];\n    const average: number = sum / wave.length;\n    for (let i: number = 0; i < wave.length; i++) wave[i] -= average;\n    performIntegral(wave);\n    // The first sample should be zero, and we'll duplicate it at the end for easier interpolation.\n    wave.push(0);\n    return new Float32Array(wave);\n}\nfunction centerAndNormalizeWave(wave: Array<number>): Float32Array {\n    let magn: number = 0.0;\n\n    centerWave(wave);\n\n    // Going to length-1 because an extra 0 sample is added on the end as part of centerWave, which shouldn't impact magnitude calculation.\n    for (let i: number = 0; i < wave.length - 1; i++) {\n        magn += Math.abs(wave[i]);\n    }\n    const magnAvg: number = magn / (wave.length - 1);\n\n    for (let i: number = 0; i < wave.length - 1; i++) {\n        wave[i] = wave[i] / magnAvg;\n    }\n\n    return new Float32Array(wave);\n\n}\nexport function performIntegral(wave: { length: number, [index: number]: number }): Float32Array {\n    // Perform the integral on the wave. The synth function will perform the derivative to get the original wave back but with antialiasing.\n    let cumulative: number = 0.0;\n    let newWave: Float32Array = new Float32Array(wave.length);\n    for (let i: number = 0; i < wave.length; i++) {\n        newWave[i] = cumulative;\n        cumulative += wave[i];\n    }\n\n    return newWave;\n}\nexport function performIntegralOld(wave: { length: number, [index: number]: number }): void {\n    // Old ver used in harmonics/picked string instruments, manipulates wave in place.\n    let cumulative: number = 0.0;\n    for (let i: number = 0; i < wave.length; i++) {\n        const temp = wave[i];\n        wave[i] = cumulative;\n        cumulative += temp;\n    }\n}\n\nexport function getPulseWidthRatio(pulseWidth: number): number {\n    // BeepBox formula for reference\n    //return Math.pow(0.5, (Config.pulseWidthRange - 1 - pulseWidth) * Config.pulseWidthStepPower) * 0.5;\n\n    return pulseWidth / (Config.pulseWidthRange * 2);\n}\n\n\n// The function arguments will be defined in FFT.ts, but I want\n// SynthConfig.ts to be at the top of the compiled JS so I won't directly\n// depend on FFT here. synth.ts will take care of importing FFT.ts.\n//function inverseRealFourierTransform(array: {length: number, [index: number]: number}, fullArrayLength: number): void;\n//function scaleElementsByFactor(array: {length: number, [index: number]: number}, factor: number): void;\nexport function getDrumWave(index: number, inverseRealFourierTransform: Function | null, scaleElementsByFactor: Function | null): Float32Array {\n    let wave: Float32Array | null = Config.chipNoises[index].samples;\n    if (wave == null) {\n        wave = new Float32Array(Config.chipNoiseLength + 1);\n        Config.chipNoises[index].samples = wave;\n\n        if (index == 0) {\n            // The \"retro\" drum uses a \"Linear Feedback Shift Register\" similar to the NES noise channel.\n            let drumBuffer: number = 1;\n            for (let i: number = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = (drumBuffer & 1) * 2.0 - 1.0;\n                let newBuffer: number = drumBuffer >> 1;\n                if (((drumBuffer + newBuffer) & 1) == 1) {\n                    newBuffer += 1 << 14;\n                }\n                drumBuffer = newBuffer;\n            }\n        } else if (index == 1) {\n            // White noise is just random values for each sample.\n            for (let i: number = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = Math.random() * 2.0 - 1.0;\n            }\n        } else if (index == 2) {\n            // The \"clang\" noise wave is based on a similar noise wave in the modded beepbox made by DAzombieRE.\n            let drumBuffer: number = 1;\n            for (let i: number = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = (drumBuffer & 1) * 2.0 - 1.0;\n                let newBuffer: number = drumBuffer >> 1;\n                if (((drumBuffer + newBuffer) & 1) == 1) {\n                    newBuffer += 2 << 14;\n                }\n                drumBuffer = newBuffer;\n            }\n        } else if (index == 3) {\n            // The \"buzz\" noise wave is based on a similar noise wave in the modded beepbox made by DAzombieRE.\n            let drumBuffer: number = 1;\n            for (let i: number = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = (drumBuffer & 1) * 2.0 - 1.0;\n                let newBuffer: number = drumBuffer >> 1;\n                if (((drumBuffer + newBuffer) & 1) == 1) {\n                    newBuffer += 10 << 2;\n                }\n                drumBuffer = newBuffer;\n            }\n        } else if (index == 4) {\n            // \"hollow\" drums, designed in frequency space and then converted via FFT:\n            drawNoiseSpectrum(wave, Config.chipNoiseLength, 10, 11, 1, 1, 0);\n            drawNoiseSpectrum(wave, Config.chipNoiseLength, 11, 14, .6578, .6578, 0);\n            inverseRealFourierTransform!(wave, Config.chipNoiseLength);\n            scaleElementsByFactor!(wave, 1.0 / Math.sqrt(Config.chipNoiseLength));\n        } else if (index == 5) {\n            // \"Shine\" drums from modbox!\n            var drumBuffer = 1;\n            for (var i = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = (drumBuffer & 1) * 2.0 - 1.0;\n                var newBuffer = drumBuffer >> 1;\n                if (((drumBuffer + newBuffer) & 1) == 1) {\n                    newBuffer += 10 << 2;\n                }\n                drumBuffer = newBuffer;\n            }\n        } else if (index == 6) {\n            // \"Deep\" drums from modbox!\n            drawNoiseSpectrum(wave, Config.chipNoiseLength, 1, 10, 1, 1, 0);\n            drawNoiseSpectrum(wave, Config.chipNoiseLength, 20, 14, -2, -2, 0);\n            inverseRealFourierTransform!(wave, Config.chipNoiseLength);\n            scaleElementsByFactor!(wave, 1.0 / Math.sqrt(Config.chipNoiseLength));\n        } else if (index == 7) {\n            // \"Cutter\" drums from modbox!\n            var drumBuffer = 1;\n            for (var i = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = (drumBuffer & 1) * 4.0 * (Math.random() * 14 + 1) - 8.0;\n                var newBuffer = drumBuffer >> 1;\n                if (((drumBuffer + newBuffer) & 1) == 1) {\n                    newBuffer += 15 << 2;\n                }\n                drumBuffer = newBuffer;\n            }\n        } else if (index == 8) {\n            // \"Metallic\" drums from modbox!\n            var drumBuffer = 1;\n            for (var i = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = (drumBuffer & 1) / 2.0 - 0.5;\n                var newBuffer = drumBuffer >> 1;\n                if (((drumBuffer + newBuffer) & 1) == 1) {\n                    newBuffer -= 10 << 2;\n                }\n                drumBuffer = newBuffer;\n            }\n        } else if (index == 9) {\n            // a noise more like old static than white noise\n            let drumBuffer: number = 1;\n            for (let i: number = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = (drumBuffer & 1) * 2.0 - 1.1;\n                let newBuffer: number = drumBuffer >> 1;\n                if (((drumBuffer + newBuffer) & 1) == 1) {\n                    newBuffer += 8 ^ 2 << 16;\n                }\n                drumBuffer = newBuffer;\n            }\n        }\n        else if (index == 10) {\n            for (let i = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = Math.round(Math.random());\n            }\n        }\n        else if (index == 11) {\n            var drumBuffer = 1;\n            for (var i = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = Math.round((drumBuffer & 1));\n                var newBuffer = drumBuffer >> 1;\n                if (((drumBuffer + newBuffer) & 1) == 1) {\n                    newBuffer -= 10 << 2;\n                }\n                drumBuffer = newBuffer;\n            }\n        }\n        else if (index == 12) {\n            for (let i = 0; i < Config.chipNoiseLength; i++) {\n                var ultraboxnewchipnoiserand = Math.random();\n                wave[i] = Math.pow(ultraboxnewchipnoiserand, Math.clz32(ultraboxnewchipnoiserand));\n            }\n        }\n        else if (index == 13) {\n            // https://noisehack.com/generate-noise-web-audio-api/\n            var b0 = 0, b1 = 0, b2 = 0, b3, b4, b5, b6;\n            b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;\n\n            for (let i = 0; i < Config.chipNoiseLength; i++) {\n                var white = Math.random() * 2 - 1;\n                b0 = 0.99886 * b0 + white * 0.0555179;\n                b1 = 0.99332 * b1 + white * 0.0750759;\n                b2 = 0.96900 * b2 + white * 0.1538520;\n                b3 = 0.86650 * b3 + white * 0.3104856;\n                b4 = 0.55000 * b4 + white * 0.5329522;\n                b5 = -0.7616 * b5 - white * 0.0168980;\n                wave[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n                wave[i] *= 0.44;\n                b6 = white * 0.115926;\n            }\n        }\n        else if (index == 14) {\n            var lastOut = 0.0;\n\n            for (let i = 0; i < Config.chipNoiseLength; i++) {\n                var white = Math.random() * 2 - 1;\n                wave[i] = (lastOut + (0.02 * white)) / 1.02;\n                lastOut = wave[i];\n                wave[i] *= 14;\n            }\n        }\n\n        else {\n            throw new Error(\"Unrecognized drum index: \" + index);\n        }\n\n        wave[Config.chipNoiseLength] = wave[0];\n    }\n\n    return wave;\n}\n\nexport function drawNoiseSpectrum(wave: Float32Array, waveLength: number, lowOctave: number, highOctave: number, lowPower: number, highPower: number, overallSlope: number): number {\n    const referenceOctave: number = 11;\n    const referenceIndex: number = 1 << referenceOctave;\n    const lowIndex: number = Math.pow(2, lowOctave) | 0;\n    const highIndex: number = Math.min(waveLength >> 1, Math.pow(2, highOctave) | 0);\n    const retroWave: Float32Array = getDrumWave(0, null, null);\n    let combinedAmplitude: number = 0.0;\n    for (let i: number = lowIndex; i < highIndex; i++) {\n\n        let lerped: number = lowPower + (highPower - lowPower) * (Math.log2(i) - lowOctave) / (highOctave - lowOctave);\n        let amplitude: number = Math.pow(2, (lerped - 1) * 7 + 1) * lerped;\n\n        amplitude *= Math.pow(i / referenceIndex, overallSlope);\n\n        combinedAmplitude += amplitude;\n\n        // Add two different sources of psuedo-randomness to the noise\n        // (individually they aren't random enough) but in a deterministic\n        // way so that live spectrum editing doesn't result in audible pops.\n        // Multiply all the sine wave amplitudes by 1 or -1 based on the\n        // LFSR retro wave (effectively random), and also rotate the phase\n        // of each sine wave based on the golden angle to disrupt the symmetry.\n        amplitude *= retroWave[i];\n        const radians: number = 0.61803398875 * i * i * Math.PI * 2.0;\n\n        wave[i] = Math.cos(radians) * amplitude;\n        wave[waveLength - i] = Math.sin(radians) * amplitude;\n    }\n\n    return combinedAmplitude;\n}\n\nexport function getArpeggioPitchIndex(pitchCount: number, useFastTwoNoteArp: boolean, arpeggio: number): number {\n    let arpeggioPattern: ReadonlyArray<number> = Config.arpeggioPatterns[pitchCount - 1];\n    if (arpeggioPattern != null) {\n        if (pitchCount == 2 && useFastTwoNoteArp == false) {\n            arpeggioPattern = [0, 0, 1, 1];\n        }\n        return arpeggioPattern[arpeggio % arpeggioPattern.length];\n    } else {\n        return arpeggio % pitchCount;\n    }\n}\n\n// Pardon the messy type casting. This allows accessing array members by numerical index or string name.\nexport function toNameMap<T extends BeepBoxOption>(array: Array<Pick<T, Exclude<keyof T, \"index\">>>): DictionaryArray<T> {\n    const dictionary: Dictionary<T> = {};\n    for (let i: number = 0; i < array.length; i++) {\n        const value: any = array[i];\n        value.index = i;\n        dictionary[value.name] = <T>value;\n    }\n    const result: DictionaryArray<T> = <DictionaryArray<T>><any>array;\n    result.dictionary = dictionary;\n    return result;\n}\n\nexport function effectsIncludeTransition(effects: number): boolean {\n    return (effects & (1 << MDEffectType.transition)) != 0;\n}\nexport function effectsIncludeChord(effects: number): boolean {\n    return (effects & (1 << MDEffectType.chord)) != 0;\n}\nexport function effectsIncludePitchShift(effects: number): boolean {\n    return (effects & (1 << MDEffectType.pitchShift)) != 0;\n}\nexport function effectsIncludeDetune(effects: number): boolean {\n    return (effects & (1 << MDEffectType.detune)) != 0;\n}\nexport function effectsIncludeVibrato(effects: number): boolean {\n    return (effects & (1 << MDEffectType.vibrato)) != 0;\n}\nexport function effectsIncludeNoteRange(effects: number): boolean {\n    return (effects & (1 << MDEffectType.noteRange)) != 0;\n}\n\nexport function calculateRingModHertz(sliderHz: number, sliderHzOffset: number = 0): number {\n    //replaces the value 21 with 0\n    if (sliderHz == 0) return 0;\n    if (sliderHz > 0) sliderHz -= 1 / Config.ringModHzRange;\n    if (sliderHz > 1 / Config.ringModHzRange) sliderHz += 1 / Config.ringModHzRange;\n    //calculate ring mod\n    return Math.floor(Config.ringModMinHz * Math.pow(Config.ringModMaxHz / Config.ringModMinHz, sliderHz))\n}\nexport function rawChipToIntegrated(raw: DictionaryArray<ChipWave>): DictionaryArray<ChipWave> {\n    const newArray: Array<ChipWave> = new Array<ChipWave>(raw.length);\n    const dictionary: Dictionary<ChipWave> = {};\n    for (let i: number = 0; i < newArray.length; i++) {\n        newArray[i] = Object.assign([], raw[i]);\n        const value: any = newArray[i];\n        value.index = i;\n        dictionary[value.name] = <ChipWave>value;\n    }\n    for (let key in dictionary) {\n        dictionary[key].samples = performIntegral(dictionary[key].samples);\n    }\n    const result: DictionaryArray<ChipWave> = <DictionaryArray<ChipWave>><any>newArray;\n    result.dictionary = dictionary;\n    return result;\n}\n", "// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nexport class Deque<T> {\n\tprivate _capacity: number = 1;\n\tprivate _buffer: Array<T | undefined> = [undefined];\n\tprivate _mask: number = 0;\n\tprivate _offset: number = 0;\n\tprivate _count: number = 0;\n\n\tpushFront(element: T): void {\n\t\tif (this._count >= this._capacity) this._embiggen();\n\t\tthis._offset = (this._offset - 1) & this._mask;\n\t\tthis._buffer[this._offset] = element;\n\t\tthis._count++;\n\t}\n\tpushBack(element: T): void {\n\t\tif (this._count >= this._capacity) this._embiggen();\n\t\tthis._buffer[(this._offset + this._count) & this._mask] = element;\n\t\tthis._count++;\n\t}\n\tpopFront(): T {\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\n\t\tconst element: T = <T>this._buffer[this._offset];\n\t\tthis._buffer[this._offset] = undefined;\n\t\tthis._offset = (this._offset + 1) & this._mask;\n\t\tthis._count--;\n\t\treturn element;\n\t}\n\tpopBack(): T {\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\n\t\tthis._count--;\n\t\tconst index: number = (this._offset + this._count) & this._mask;\n\t\tconst element: T = <T>this._buffer[index];\n\t\tthis._buffer[index] = undefined;\n\t\treturn element;\n\t}\n\tpeakFront(): T {\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\n\t\treturn <T>this._buffer[this._offset];\n\t}\n\tpeakBack(): T {\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\n\t\treturn <T>this._buffer[(this._offset + this._count - 1) & this._mask];\n\t}\n\tcount(): number {\n\t\treturn this._count;\n\t}\n\tset(index: number, element: T): void {\n\t\tif (index < 0 || index >= this._count) throw new Error(\"Invalid index\");\n\t\tthis._buffer[(this._offset + index) & this._mask] = element;\n\t}\n\tget(index: number): T {\n\t\tif (index < 0 || index >= this._count) throw new Error(\"Invalid index\");\n\t\treturn <T>this._buffer[(this._offset + index) & this._mask];\n\t}\n\tremove(index: number): void {\n\t\tif (index < 0 || index >= this._count) throw new Error(\"Invalid index\");\n\t\tif (index <= (this._count >> 1)) {\n\t\t\twhile (index > 0) {\n\t\t\t\tthis.set(index, this.get(index - 1));\n\t\t\t\tindex--;\n\t\t\t}\n\t\t\tthis.popFront();\n\t\t} else {\n\t\t\tindex++;\n\t\t\twhile (index < this._count) {\n\t\t\t\tthis.set(index - 1, this.get(index));\n\t\t\t\tindex++;\n\t\t\t}\n\t\t\tthis.popBack();\n\t\t}\n\t}\n\tprivate _embiggen(): void {\n\t\tif (this._capacity >= 0x40000000)\n            throw new Error(`wtf?? requested more than ${this._capacity} elements in deque`);\n\t\tthis._capacity = this._capacity << 1;\n\t\tconst oldBuffer: Array<T | undefined> = this._buffer;\n\t\tconst newBuffer: Array<T | undefined> = new Array(this._capacity);\n\t\tconst size: number = this._count | 0;\n\t\tconst offset: number = this._offset | 0;\n\t\tfor (let i = 0; i < size; i++) {\n\t\t\tnewBuffer[i] = oldBuffer[(offset + i) & this._mask];\n\t\t}\n\t\tfor (let i = size; i < this._capacity; i++) {\n\t\t\tnewBuffer[i] = undefined;\n\t\t}\n\t\tthis._offset = 0;\n\t\tthis._buffer = newBuffer;\n\t\tthis._mask = this._capacity - 1;\n\t}\n}", "// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { DictionaryArray, BeepBoxOption, InstrumentType, toNameMap, TypePresets } from \"../synth/SynthConfig\";\n\nexport interface PresetCategory extends BeepBoxOption {\n    readonly presets: DictionaryArray<Preset>;\n}\n\nexport interface Preset extends BeepBoxOption {\n    readonly isNoise?: boolean;\n    readonly isMod?: boolean;\n    readonly generalMidi?: boolean;\n    readonly midiProgram?: number;\n    readonly midiSubharmonicOctaves?: number;\n    readonly customType?: InstrumentType;\n    readonly settings?: any;\n}\n\nexport const isMobile: boolean = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|android|ipad|playbook|silk/i.test(navigator.userAgent);\n\nexport function prettyNumber(value: number): string {\n    return value.toFixed(2).replace(/\\.?0*$/, \"\");\n}\n\nexport class EditorConfig {\n    static readonly version: string = \"v1\";\n    static readonly versionDisplayName: string = \"DragonBox!\";\n\n    static readonly releaseNotesURL: string = \"./patch_notes.html\";\n\n    static readonly isOnMac: boolean = /^Mac/i.test(navigator.platform) || /Mac OS X/i.test(navigator.userAgent) || /^(iPhone|iPad|iPod)/i.test(navigator.platform) || /(iPhone|iPad|iPod)/i.test(navigator.userAgent);\n    static readonly ctrlSymbol: string = EditorConfig.isOnMac ? \"\u2318\" : \"Ctrl+\";\n    static readonly ctrlName: string = EditorConfig.isOnMac ? \"command\" : \"control\";\n\n    static customSamples: string[] | null;\n\n    static readonly presetCategories: DictionaryArray<PresetCategory> = toNameMap([\n        {\n            // The order of this array needs to line up with the order of the InstrumentType declarations in SynthConfig.ts. (changes.ts' random instrument generation relies on this, for one.)\n            name: \"Custom Instruments\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: TypePresets[InstrumentType.chip], customType: InstrumentType.chip },\n                { name: TypePresets[InstrumentType.fm], customType: InstrumentType.fm },\n                { name: TypePresets[InstrumentType.noise], customType: InstrumentType.noise },\n                { name: TypePresets[InstrumentType.spectrum], customType: InstrumentType.spectrum },\n                { name: TypePresets[InstrumentType.drumset], customType: InstrumentType.drumset },\n                { name: TypePresets[InstrumentType.harmonics], customType: InstrumentType.harmonics },\n                { name: TypePresets[InstrumentType.pwm], customType: InstrumentType.pwm },\n                { name: TypePresets[InstrumentType.pickedString], customType: InstrumentType.pickedString },\n                { name: TypePresets[InstrumentType.supersaw], customType: InstrumentType.supersaw },\n                { name: TypePresets[InstrumentType.customChipWave], customType: InstrumentType.customChipWave },\n                { name: TypePresets[InstrumentType.fm6op], customType: InstrumentType.fm6op },\n            ])\n        },\n        {\n            name: \"Retro Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"square wave\", midiProgram: 80, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"aliasing\"], \"transition\": \"interrupt\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"chord\": \"arpeggio\", \"wave\": \"square\", \"unison\": \"none\", \"envelopes\": [] } },\n                { name: \"triangle wave\", midiProgram: 71, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"aliasing\"], \"transition\": \"interrupt\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"chord\": \"arpeggio\", \"wave\": \"triangle\", \"unison\": \"none\", \"envelopes\": [] } },\n                { name: \"square lead\", midiProgram: 80, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.3536 }], \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"wave\": \"square\", \"unison\": \"hum\", \"envelopes\": [] } },\n                { name: \"sawtooth lead 1\", midiProgram: 81, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"shimmer\", \"envelopes\": [] } },\n                { name: \"sawtooth lead 2\", midiProgram: 81, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 1 }], \"effects\": [\"vibrato\", \"aliasing\"], \"vibrato\": \"light\", \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"hum\", \"envelopes\": [] } },\n                { name: \"chip noise\", midiProgram: 116, isNoise: true, settings: { \"type\": \"noise\", \"transition\": \"hard\", \"effects\": [\"aliasing\"], \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"wave\": \"retro\" } },\n                { name: \"supersaw lead\", midiProgram: 81, settings: { \"type\": \"supersaw\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 2 }], \"effects\": [\"reverb\"], \"reverb\": 67, \"fadeInSeconds\": 0, \"fadeOutTicks\": -6, \"pulseWidth\": 50, \"dynamism\": 100, \"spread\": 58, \"shape\": 0, \"envelopes\": [] } },\n                { name: \"FM twang\", midiProgram: 32, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 15 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 1 }] } },\n                { name: \"FM bass\", midiProgram: 36, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"custom interval\", \"algorithm\": \"1\u2190(2\u20023\u21904)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"2\u00D7\", \"amplitude\": 11 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 7 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 9 }, { \"frequency\": \"20\u00D7\", \"amplitude\": 3 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 3 }] } },\n                { name: \"FM flute\", midiProgram: 73, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 6 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 1 }] } },\n                { name: \"FM organ\", midiProgram: 16, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"vibrato\"], \"vibrato\": \"delayed\", \"transition\": \"normal\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"custom interval\", \"algorithm\": \"1\u21903\u20032\u21904\", \"feedbackType\": \"1\u27F2\u20032\u27F2\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 14 }, { \"frequency\": \"2\u00D7\", \"amplitude\": 14 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 11 }, { \"frequency\": \"2\u00D7\", \"amplitude\": 11 }], \"envelopes\": [] } },\n                { name: \"FM sine\", midiProgram: 55, settings: { \"type\": \"FM\",\"eqFilter\":[],\"eqFilterType\":true,\"eqSimpleCut\":10,\"eqSimplePeak\":0,\"envelopeSpeed\":12,\"discreteEnvelope\":false,\"effects\":[],\"panDelay\":10,\"fadeInSeconds\":0,\"fadeOutTicks\":-1,\"algorithm\":\"1\u20032\u20033\u20034\",\"feedbackType\":\"1\u27F2\",\"feedbackAmplitude\":0,\"operators\":[{\"frequency\":\"1\u00D7\",\"amplitude\":15,\"waveform\":\"sine\",\"pulseWidth\":5},{\"frequency\":\"1\u00D7\",\"amplitude\":0,\"waveform\":\"sine\",\"pulseWidth\":5},{\"frequency\":\"1\u00D7\",\"amplitude\":0,\"waveform\":\"sine\"},{\"frequency\":\"1\u00D7\",\"amplitude\":0,\"waveform\":\"sine\"},{\"frequency\":\"1\u00D7\",\"amplitude\":0,\"waveform\":\"sine\"},{\"frequency\":\"1\u00D7\",\"amplitude\":0,\"waveform\":\"sine\"}],\"envelopes\":[]} },\n                { name: \"NES Pulse\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"vibrato\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -24, -24, -24, -23, -23, -23, -23, -22, -22, -22, -22, -21, -21, -21, -21, -20, -20, -20, -20, -19, -19, -19, -19, -18, -18, -18, -18, -17, -17, -17, -17, 24, 24, 24, 24, 23, 23, 23, 23, 22, 22, 22, 22, 21, 21, 21, 21, 20, 20, 20, 20, 19, 19, 19, 19, 18, 18, 18, 18, 17, 17, 17, 17] } },\n                { name: \"Gameboy Pulse\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -20, -17, -15, -13, -13, -11, -11, -11, -9, -9, -9, -9, -7, -7, -7, -7, -7, -5, -5, -5, -5, -5, -5, -3, -3, -3, -3, -3, -3, -3, -3, 24, 20, 17, 15, 13, 13, 11, 11, 11, 9, 9, 9, 9, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3] } },\n                { name: \"VRC6 Sawtooth\", midiProgram: 81, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -20, -16, -13, -10, -8, -6, -5, -4, -4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 12, 12, 12, 12, 12, 12, 12, 12, 16, 16, 16, 16, 16, 16, 16, 16, 20, 20, 20, 20, 20, 20, 20, 20, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24] } },\n                { name: \"Atari Square\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -24, -24, -23, -23, -23, -22, -22, -22, -21, -21, -21, -20, -20, -20, -19, -19, -19, -18, -18, -18, -17, -17, -17, -16, -16, -16, -15, -15, -15, -14, -14, -14, -13, -13, -13, 24, 24, 24, 23, 23, 23, 22, 22, 22, 21, 21, 21, 20, 20, 20, 19, 19, 19, 18, 18, 18, 17, 17, 17, 16, 16, 15, 15] } },\n                { name: \"Atari Bass\", midiProgram: 36, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"interrupt\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, -24, -24, -24, 24, 24, 24, -24, -24, -24, 24, 24, 24, -24, -24, -24, 24, 24, -24, -24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, -24, -24, 24, 24, 24, 24, 24, -24, -24, -24, -24, 24, 24, -24, -24, 24, 24] } },\n                { name: \"Sunsoft Bass\", midiProgram: 36, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [24, 24, 15, 15, 9, 9, -4, -4, 0, 0, -13, -13, -19, -19, -24, -24, -24, -24, -10, -10, 0, 0, -7, -7, -7, -7, 0, 0, 6, 6, -4, -4, 3, 3, -4, -4, 3, 3, 3, 3, 9, 9, 15, 15, 15, 15, 6, 6, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, 3, 3, 12, 12, 24, 24] } },\n            ])\n        },\n        {\n            name: \"Keyboard Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"grand piano 1\", midiProgram: 0, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.7071 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 2.8284 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.125 }], \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [100, 100, 86, 86, 86, 71, 71, 71, 0, 86, 71, 71, 71, 57, 57, 71, 57, 14, 57, 57, 57, 57, 57, 57, 57, 57, 29, 57], \"unison\": \"piano\", \"stringSustain\": 79, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"note size\" }] } },\n                { name: \"bright piano\", midiProgram: 1, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.7071 }, { \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 3363.59, \"linearGain\": 1.4142 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"chord\": \"simultaneous\", \"harmonics\": [100, 100, 86, 86, 71, 71, 0, 71, 71, 71, 71, 71, 71, 14, 57, 57, 57, 57, 57, 57, 29, 57, 57, 57, 57, 57, 57, 57], \"unison\": \"piano\", \"stringSustain\": 86, \"envelopes\": [] } },\n                { name: \"electric grand\", midiProgram: 2, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.5 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"wave\": \"1/8 pulse\", \"unison\": \"shimmer\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }] } },\n                { name: \"honky-tonk piano\", midiProgram: 3, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 0.3536 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [100, 100, 86, 71, 86, 71, 43, 71, 43, 43, 57, 57, 57, 29, 57, 57, 57, 57, 57, 57, 43, 57, 57, 57, 43, 43, 43, 43], \"unison\": \"honky tonk\", \"stringSustain\": 71, \"envelopes\": [] } },\n                { name: \"electric piano 1\", midiProgram: 4, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 0.5 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"harmonics\": [86, 100, 100, 71, 71, 57, 57, 43, 43, 43, 29, 29, 29, 14, 14, 14, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 2\" }] } },\n                { name: \"electric piano 2\", midiProgram: 5, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"algorithm\": \"1\u21903\u20032\u21904\", \"feedbackType\": \"1\u27F2\u20032\u27F2\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 12 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 6 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 9 }, { \"frequency\": \"16\u00D7\", \"amplitude\": 6 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 3 }] } },\n                { name: \"harpsichord\", midiProgram: 6, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 11313.71, \"linearGain\": 2.8284 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"chord\": \"simultaneous\", \"harmonics\": [100, 100, 100, 86, 57, 86, 86, 86, 86, 57, 57, 71, 71, 86, 86, 71, 71, 86, 86, 71, 71, 71, 71, 71, 71, 71, 71, 71], \"unison\": \"none\", \"stringSustain\": 79, \"envelopes\": [] } },\n                { name: \"clavinet\", midiProgram: 7, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.3536 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"3\u27F2\", \"feedbackAmplitude\": 6, \"operators\": [{ \"frequency\": \"3\u00D7\", \"amplitude\": 15 }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 6 }, { \"frequency\": \"8\u00D7\", \"amplitude\": 4 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 2\" }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 2\" }] } },\n                { name: \"dulcimer\", midiProgram: 15, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.3536 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"harmonics\": [100, 100, 100, 86, 100, 86, 57, 100, 100, 86, 100, 86, 100, 86, 100, 71, 57, 71, 71, 100, 86, 71, 86, 86, 100, 86, 86, 86], \"unison\": \"piano\", \"stringSustain\": 79, \"envelopes\": [] } },\n                { name: \"grand piano 2\", midiProgram: 0, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.7071 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 2.8284 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.125 }], \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [100, 86, 86, 86, 86, 71, 71, 57, 0, 57, 29, 43, 57, 57, 57, 43, 43, 0, 29, 43, 43, 43, 43, 43, 43, 29, 0, 29], \"unison\": \"piano\", \"stringSustain\": 79, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"note size\" }] } },\n                { name: \"grand piano 3\", midiProgram: 0, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.7071 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 4 }, { \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.1768 }, { \"type\": \"peak\", \"cutoffHz\": 3363.59, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 2378.41, \"linearGain\": 0.25 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 125, \"linearGain\": 0.0884 }], \"reverb\": 67, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"harmonics\": [100, 100, 86, 86, 86, 71, 71, 71, 0, 71, 71, 71, 71, 57, 57, 71, 57, 14, 57, 57, 57, 57, 57, 57, 57, 57, 29, 57], \"unison\": \"piano\", \"stringSustain\": 86, \"stringSustainType\": \"acoustic\", \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"note size\", \"index\": 0 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"twang 1\", \"index\": 1 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"twang 1\", \"index\": 1 }] } },\n\n            ])\n        },\n        {\n            name: \"Idiophone Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"celesta\", midiProgram: 8, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"(1\u20022)\u2190(3\u20024)\", \"feedbackType\": \"1\u27F2\u20032\u27F2\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~1\u00D7\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"8\u00D7\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"20\u00D7\", \"amplitude\": 3, \"envelope\": \"twang 1\" }, { \"frequency\": \"3\u00D7\", \"amplitude\": 1, \"envelope\": \"twang 2\" }] } },\n                { name: \"glockenspiel\", midiProgram: 9, generalMidi: true, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"preset\": 193, \"effects\": [\"panning\", \"chord type\", \"note filter\", \"reverb\"], \"chord\": \"strum\", \"fastTwoNoteArp\": true, \"arpeggioSpeed\": 12, \"noteFilterType\": true, \"noteSimpleCut\": 9, \"noteSimplePeak\": 1, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.5 }], \"pan\": 0, \"panDelay\": 10, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"algorithm\": \"(1\u20022\u20023)\u21904\", \"feedbackType\": \"1\u27F2\u20032\u27F2\u20033\u27F2\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 7, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"5\u00D7\", \"amplitude\": 11, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"8\u00D7\", \"amplitude\": 7, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"20\u00D7\", \"amplitude\": 2, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 8, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 10, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n                { name: \"music box 1\", midiProgram: 10, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.5 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"harmonics\": [100, 0, 0, 100, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 71, 0], \"unison\": \"none\", \"stringSustain\": 64, \"envelopes\": [] } },\n                { name: \"music box 2\", midiProgram: 10, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 0.7071 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"harmonics\": [100, 57, 57, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0], \"unison\": \"none\", \"stringSustain\": 29, \"envelopes\": [] } },\n                { name: \"vibraphone\", midiProgram: 11, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1\u20032\u20033\u20034\", \"feedbackType\": \"1\u21922\u21923\u21924\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"9\u00D7\", \"amplitude\": 3, \"envelope\": \"custom\" }, { \"frequency\": \"4\u00D7\", \"amplitude\": 9, \"envelope\": \"custom\" }] } },\n                { name: \"marimba\", midiProgram: 12, generalMidi: true, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"preset\": 197, \"effects\": [\"panning\", \"chord type\", \"note filter\", \"reverb\"], \"chord\": \"strum\", \"fastTwoNoteArp\": true, \"arpeggioSpeed\": 12, \"noteFilterType\": true, \"noteSimpleCut\": 6, \"noteSimplePeak\": 2, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.7071 }], \"pan\": 0, \"panDelay\": 10, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"algorithm\": \"1\u20032\u2190(3\u20024)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 10, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"4\u00D7\", \"amplitude\": 6, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"13\u00D7\", \"amplitude\": 6, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 10, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 2 }], \"isDrum\": false } },\n                { name: \"kalimba\", midiProgram: 108, generalMidi: true, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"preset\": 198, \"effects\": [\"panning\", \"chord type\", \"note filter\", \"reverb\"], \"chord\": \"strum\", \"fastTwoNoteArp\": true, \"arpeggioSpeed\": 12, \"noteFilterType\": true, \"noteSimpleCut\": 7, \"noteSimplePeak\": 1, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 0.5 }], \"pan\": 0, \"panDelay\": 10, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 11, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"5\u00D7\", \"amplitude\": 3, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"20\u00D7\", \"amplitude\": 3, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 10, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 8, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 2 }], \"isDrum\": false } },\n                { name: \"xylophone\", midiProgram: 13, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1\u20022\u20023)\u21904\", \"feedbackType\": \"1\u27F2\u20032\u27F2\u20033\u27F2\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"6\u00D7\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"11\u00D7\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"20\u00D7\", \"amplitude\": 6, \"envelope\": \"twang 1\" }] } },\n                { name: \"tubular bell\", midiProgram: 14, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }, { \"type\": \"high-pass\", \"cutoffHz\": 105.11, \"linearGain\": 0.3536 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 96, \"chord\": \"strum\", \"harmonics\": [43, 71, 0, 100, 0, 100, 0, 86, 0, 0, 86, 0, 14, 71, 14, 14, 57, 14, 14, 43, 14, 14, 43, 14, 14, 43, 14, 14], \"unison\": \"shimmer\", \"stringSustain\": 86, \"envelopes\": [] } },\n                { name: \"bell synth\", midiProgram: 14, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~2\u00D7\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"7\u00D7\", \"amplitude\": 6, \"envelope\": \"twang 3\" }, { \"frequency\": \"20\u00D7\", \"amplitude\": 1, \"envelope\": \"twang 1\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n                { name: \"rain drop\", midiProgram: 96, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1\u20022)\u2190(3\u20024)\", \"feedbackType\": \"1\u27F2\u20032\u27F2\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"6\u00D7\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"20\u00D7\", \"amplitude\": 3, \"envelope\": \"twang 1\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 6, \"envelope\": \"tremolo1\" }] } },\n                { name: \"crystal\", midiProgram: 98, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"delayed\", \"algorithm\": \"1\u20032\u20033\u20034\", \"feedbackType\": \"1\u27F2 2\u27F2 3\u27F2 4\u27F2\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"3\u00D7\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"6\u00D7\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"13\u00D7\", \"amplitude\": 4, \"envelope\": \"custom\" }] } },\n                { name: \"tinkle bell\", midiProgram: 112, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1\u20032\u20033\u20034\", \"feedbackType\": \"1\u21922\u21923\u21924\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"~2\u00D7\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"5\u00D7\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"7\u00D7\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"16\u00D7\", \"amplitude\": 7, \"envelope\": \"custom\" }] } },\n                { name: \"agogo\", midiProgram: 113, generalMidi: true, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"preset\": 205, \"effects\": [\"panning\", \"chord type\", \"note filter\", \"reverb\"], \"chord\": \"strum\", \"fastTwoNoteArp\": true, \"arpeggioSpeed\": 12, \"noteFilterType\": true, \"noteSimpleCut\": 8, \"noteSimplePeak\": 1, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.5 }], \"pan\": 0, \"panDelay\": 10, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"algorithm\": \"1\u20032\u20033\u20034\", \"feedbackType\": \"1\u21924\", \"feedbackAmplitude\": 15, \"operators\": [{ \"frequency\": \"2\u00D7\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"5\u00D7\", \"amplitude\": 6, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"8\u00D7\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"13\u00D7\", \"amplitude\": 11, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 10, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 10, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n            ])\n        },\n        {\n            name: \"Guitar Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"nylon guitar\", midiProgram: 24, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1\u21902\u21903\u21904\", \"feedbackType\": \"3\u27F2\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"5\u00D7\", \"amplitude\": 2, \"envelope\": \"steady\" }, { \"frequency\": \"7\u00D7\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\n                { name: \"steel guitar\", midiProgram: 25, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"harmonics\": [100, 100, 86, 71, 71, 71, 86, 86, 71, 57, 43, 43, 43, 57, 57, 57, 57, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43], \"unison\": \"none\", \"stringSustain\": 71, \"envelopes\": [] } },\n                { name: \"jazz guitar\", midiProgram: 26, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 57, 71, 71, 43, 57, 71, 57, 43, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0] } },\n                { name: \"clean guitar\", midiProgram: 27, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 100, 100, 100, 86, 57, 86, 100, 100, 100, 71, 57, 43, 71, 86, 71, 57, 57, 71, 71, 71, 71, 57, 57, 57, 57, 57, 43] } },\n                { name: \"muted guitar\", midiProgram: 28, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1\u2190(2\u20023\u21904)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 4, \"envelope\": \"twang 3\" }, { \"frequency\": \"4\u00D7\", \"amplitude\": 4, \"envelope\": \"twang 2\" }, { \"frequency\": \"16\u00D7\", \"amplitude\": 4, \"envelope\": \"twang 1\" }] } },\n            ])\n        },\n        {\n            name: \"Picked Bass Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"acoustic bass\", midiProgram: 32, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14] } },\n                { name: \"fingered bass\", midiProgram: 33, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 71, 57, 71, 43, 57, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 0] } },\n                { name: \"picked bass\", midiProgram: 34, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1\u2190(2\u20023\u21904)\", \"feedbackType\": \"3\u27F2\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"11\u00D7\", \"amplitude\": 1, \"envelope\": \"twang 3\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 9, \"envelope\": \"steady\" }] } },\n                { name: \"fretless bass\", midiProgram: 35, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 1000, \"filterResonance\": 14, \"filterEnvelope\": \"flare 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 71, 57, 57, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 29, 14] } },\n                { name: \"slap bass 1\", midiProgram: 36, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 100, 100, 86, 71, 57, 29, 29, 43, 43, 57, 71, 57, 29, 29, 43, 57, 57, 57, 43, 43, 43, 57, 71, 71, 71, 71] } },\n                { name: \"slap bass 2\", midiProgram: 37, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1\u21902\u21903\u21904\", \"feedbackType\": \"3\u27F2\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"3\u00D7\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"13\u00D7\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\n                { name: \"bass synth 1\", midiProgram: 38, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1\u21903\u20032\u21904\", \"feedbackType\": \"3\u27F2\u20034\u27F2\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 14, \"envelope\": \"twang 1\" }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 13, \"envelope\": \"twang 2\" }] } },\n                { name: \"bass synth 2\", midiProgram: 39, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 1000, \"filterResonance\": 57, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"1\u21922\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 9, \"envelope\": \"steady\" }, { \"frequency\": \"3\u00D7\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n                { name: \"bass & lead\", midiProgram: 87, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 86, \"filterEnvelope\": \"twang 2\", \"wave\": \"sawtooth\", \"interval\": \"shimmer\", \"vibrato\": \"none\" } },\n                { name: \"dubstep yoi yoi\", midiProgram: 87, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.7071 }], \"effects\": [\"note filter\", \"bitcrusher\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 594.6, \"linearGain\": 11.3137 }], \"bitcrusherOctave\": 1.5, \"bitcrusherQuantization\": 0, \"transition\": \"slide\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"wave\": \"sawtooth\", \"unison\": \"none\", \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"flare 2\", \"index\": 0 }] } },\n            ])\n        },\n        {\n            name: \"Picked String Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"pizzicato strings\", midiProgram: 45, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1\u20022\u20023)\u21904\", \"feedbackType\": \"1\u27F2 2\u27F2 3\u27F2 4\u27F2\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"3\u00D7\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"6\u00D7\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 10, \"envelope\": \"steady\" }] } },\n                { name: \"harp\", midiProgram: 46, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"hard fade\", \"effects\": \"reverb\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1\u21903\u20032\u21904\", \"feedbackType\": \"3\u27F2\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"4\u00D7\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"~2\u00D7\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 6, \"envelope\": \"steady\" }] } },\n                { name: \"sitar\", midiProgram: 104, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"hard fade\", \"effects\": \"reverb\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 57, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 14, \"envelope\": \"twang 3\" }, { \"frequency\": \"9\u00D7\", \"amplitude\": 3, \"envelope\": \"twang 3\" }, { \"frequency\": \"16\u00D7\", \"amplitude\": 9, \"envelope\": \"swell 3\" }] } },\n                { name: \"banjo\", midiProgram: 105, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1\u2190(2\u20023\u21904)\", \"feedbackType\": \"2\u27F2\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4\u00D7\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 10, \"envelope\": \"steady\" }, { \"frequency\": \"11\u00D7\", \"amplitude\": 3, \"envelope\": \"twang 3\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\n                { name: \"ukulele\", midiProgram: 105, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1\u2190(2\u20023\u21904)\", \"feedbackType\": \"3\u27F2\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"2\u00D7\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"9\u00D7\", \"amplitude\": 4, \"envelope\": \"twang 2\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\n                { name: \"shamisen\", midiProgram: 106, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1\u2190(2\u20023\u21904)\", \"feedbackType\": \"3\u27F2\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 12, \"envelope\": \"steady\" }, { \"frequency\": \"16\u00D7\", \"amplitude\": 4, \"envelope\": \"twang 3\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 7, \"envelope\": \"steady\" }] } },\n                { name: \"koto\", midiProgram: 107, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1\u21903\u20032\u21904\", \"feedbackType\": \"1\u27F2\u20032\u27F2\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"~1\u00D7\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"6\u00D7\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"4\u00D7\", \"amplitude\": 8, \"envelope\": \"twang 3\" }, { \"frequency\": \"~2\u00D7\", \"amplitude\": 8, \"envelope\": \"twang 3\" }] } },\n            ])\n        },\n        {\n            name: \"Distortion Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"overdrive guitar\", midiProgram: 29, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.7071 }, { \"type\": \"high-pass\", \"cutoffHz\": 210.22, \"linearGain\": 1 }, { \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.5 }], \"effects\": [\"note filter\", \"distortion\"], \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 2 }, { \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.7071 }], \"distortion\": 71, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"chord\": \"strum\", \"harmonics\": [86, 100, 100, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57], \"unison\": \"none\", \"stringSustain\": 71, \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"note size\", \"index\": 1 }] } },\n                { name: \"distortion guitar\", midiProgram: 30, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.7071 }, { \"type\": \"high-pass\", \"cutoffHz\": 210.22, \"linearGain\": 1 }, { \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 0.25 }], \"effects\": [\"note filter\", \"distortion\", \"reverb\"], \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 353.55, \"linearGain\": 2 }, { \"type\": \"low-pass\", \"cutoffHz\": 2000, \"linearGain\": 1 }], \"distortion\": 86, \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"chord\": \"strum\", \"harmonics\": [86, 100, 100, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57], \"unison\": \"none\", \"stringSustain\": 71, \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"note size\", \"index\": 1 }] } },\n                { name: \"charango synth\", midiProgram: 84, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 1 }], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"algorithm\": \"1\u2190(2\u20023\u21904)\", \"feedbackType\": \"1\u21922\u21923\u21924\", \"feedbackAmplitude\": 8, \"operators\": [{ \"frequency\": \"3\u00D7\", \"amplitude\": 13 }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 5 }, { \"frequency\": \"4\u00D7\", \"amplitude\": 6 }, { \"frequency\": \"3\u00D7\", \"amplitude\": 7 }], \"envelopes\": [{ \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\n                { name: \"guitar harmonics\", midiProgram: 31, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 2 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"algorithm\": \"1\u2190(2\u20023)\u21904\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"4\u00D7\", \"amplitude\": 12 }, { \"frequency\": \"16\u00D7\", \"amplitude\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 2 }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 12 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 1\", \"index\": 3 }] } },\n                { name: \"PWM overdrive\", midiProgram: 29, settings: { \"type\": \"PWM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1.4142 }], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"pulseWidth\": 17.67767, \"envelopes\": [{ \"target\": \"pulseWidth\", \"envelope\": \"punch\" }] } },\n                { name: \"PWM distortion\", midiProgram: 30, settings: { \"type\": \"PWM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 2 }], \"effects\": [\"vibrato\"], \"vibrato\": \"delayed\", \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"pulseWidth\": 50, \"envelopes\": [{ \"target\": \"pulseWidth\", \"envelope\": \"swell 1\" }] } },\n                { name: \"FM overdrive\", midiProgram: 29, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 1 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"algorithm\": \"1\u2190(2\u20023\u21904)\", \"feedbackType\": \"1\u21922\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"~1\u00D7\", \"amplitude\": 15 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 12 }, { \"frequency\": \"~2\u00D7\", \"amplitude\": 6 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 12 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"twang 1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 3\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"punch\" }] } },\n                { name: \"FM distortion\", midiProgram: 30, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 2 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"algorithm\": \"1\u2190(2\u20023\u21904)\", \"feedbackType\": \"1\u21922\", \"feedbackAmplitude\": 4, \"operators\": [{ \"frequency\": \"~1\u00D7\", \"amplitude\": 15 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 11 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 9 }, { \"frequency\": \"~2\u00D7\", \"amplitude\": 4 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 3\", \"index\": 3 }] } },\n            ])\n        },\n        {\n            name: \"Bellows Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"drawbar organ 1\", midiProgram: 16, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 86, 0, 86, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\n                { name: \"drawbar organ 2\", midiProgram: 16, midiSubharmonicOctaves: 1, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 29, 71, 86, 71, 14, 0, 100, 0, 0, 0, 86, 0, 0, 0, 71, 0, 0, 0, 57, 0, 0, 0, 29, 0, 0, 0, 0] } },\n                { name: \"percussive organ\", midiProgram: 17, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"preset\": 515, \"effects\": [\"panning\", \"vibrato\", \"note filter\", \"chorus\", \"reverb\"], \"vibrato\": \"delayed\", \"vibratoDepth\": 0.3, \"vibratoDelay\": 18.5, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": true, \"noteSimpleCut\": 8, \"noteSimplePeak\": 1, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 0.5 }], \"pan\": 0, \"panDelay\": 10, \"chorus\": 100, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"algorithm\": \"(1\u20022\u20023)\u21904\", \"feedbackType\": \"1\u27F2\u20032\u27F2\u20033\u27F2\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"4\u00D7\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"6\u00D7\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"2\u00D7\", \"amplitude\": 5, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"punch\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n                { name: \"rock organ\", midiProgram: 18, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"delayed\", \"algorithm\": \"(1\u20022\u20023)\u21904\", \"feedbackType\": \"1\u27F2\u20032\u27F2\u20033\u27F2\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"flare 1\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"4\u00D7\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"6\u00D7\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"2\u00D7\", \"amplitude\": 5, \"envelope\": \"steady\" }] } },\n                { name: \"pipe organ\", midiProgram: 19, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"transition\": \"cross fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1\u20032\u20033\u20034\", \"feedbackType\": \"1\u27F2 2\u27F2 3\u27F2 4\u27F2\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"2\u00D7\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"4\u00D7\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"8\u00D7\", \"amplitude\": 8, \"envelope\": \"custom\" }] } },\n                { name: \"reed organ\", midiProgram: 20, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [71, 86, 100, 86, 71, 100, 57, 71, 71, 71, 43, 43, 43, 71, 43, 71, 57, 57, 57, 57, 57, 57, 57, 29, 43, 29, 29, 14] } },\n                { name: \"accordion\", midiProgram: 21, generalMidi: true, settings: { \"type\": \"chip\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"swell 1\", \"wave\": \"double saw\", \"interval\": \"honky tonk\", \"vibrato\": \"none\" } },\n                { name: \"bandoneon\", midiProgram: 23, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"interval\": \"hum\", \"vibrato\": \"none\", \"harmonics\": [86, 86, 86, 57, 71, 86, 57, 71, 71, 71, 57, 43, 57, 43, 71, 43, 71, 57, 57, 43, 43, 43, 57, 43, 43, 29, 29, 29] } },\n                { name: \"bagpipe\", midiProgram: 109, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"punch\", \"interval\": \"hum\", \"vibrato\": \"none\", \"harmonics\": [71, 86, 86, 100, 100, 86, 57, 100, 86, 71, 71, 71, 57, 57, 57, 71, 57, 71, 57, 71, 43, 57, 57, 43, 43, 43, 43, 43] } },\n            ])\n        },\n        {\n            name: \"String Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"violin 1\", midiProgram: 40, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 105.11, \"linearGain\": 0.3536 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"delayed\", \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 6, \"chord\": \"simultaneous\", \"algorithm\": \"(1\u20022)\u2190(3\u20024)\", \"feedbackType\": \"1\u21922\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"4\u00D7\", \"amplitude\": 9 }, { \"frequency\": \"3\u00D7\", \"amplitude\": 9 }, { \"frequency\": \"2\u00D7\", \"amplitude\": 7 }, { \"frequency\": \"7\u00D7\", \"amplitude\": 5 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\n                { name: \"viola\", midiProgram: 41, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1\u20022\u20023)\u21904\", \"feedbackType\": \"1\u27F2\u20032\u27F2\u20033\u27F2\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"2\u00D7\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"7\u00D7\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"13\u00D7\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 5, \"envelope\": \"steady\" }] } },\n                { name: \"cello\", midiProgram: 42, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.1768 }, { \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 0.7071 }, { \"type\": \"peak\", \"cutoffHz\": 4756.83, \"linearGain\": 5.6569 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.0884 }], \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 12, \"chord\": \"simultaneous\", \"algorithm\": \"(1\u20022)\u21903\u21904\", \"feedbackType\": \"1\u27F2\u20032\u27F2\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"16\u00D7\", \"amplitude\": 5 }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 10 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 9 }, { \"frequency\": \"6\u00D7\", \"amplitude\": 3 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 1\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 3 }] } },\n                { name: \"contrabass\", midiProgram: 43, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1\u20022)\u21903\u21904\", \"feedbackType\": \"1\u27F2\u20032\u27F2\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"16\u00D7\", \"amplitude\": 5, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 10, \"envelope\": \"steady\" }, { \"frequency\": \"6\u00D7\", \"amplitude\": 3, \"envelope\": \"swell 1\" }] } },\n                { name: \"fiddle\", midiProgram: 110, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1\u20022)\u2190(3\u20024)\", \"feedbackType\": \"3\u27F2\u20034\u27F2\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"2\u00D7\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"8\u00D7\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"16\u00D7\", \"amplitude\": 3, \"envelope\": \"steady\" }] } },\n                { name: \"tremolo strings\", midiProgram: 44, generalMidi: true, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"effects\": [\"panning\", \"note filter\", \"chorus\", \"reverb\"], \"noteFilterType\": true, \"noteSimpleCut\": 6, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 0.1768 }], \"pan\": 0, \"panDelay\": 10, \"chorus\": 100, \"reverb\": 0, \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"algorithm\": \"1\u20032\u20033\u20034\", \"feedbackType\": \"1\u21922\u21923\u21924\", \"feedbackAmplitude\": 12, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2\u00D7\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"4\u00D7\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"7\u00D7\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 4, \"perEnvelopeLowerBound\": 0.5, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n                { name: \"strings\", midiProgram: 48, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"(1\u20022)\u2190(3\u20024)\", \"feedbackType\": \"4\u27F2\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"4\u00D7\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"3\u00D7\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"2\u00D7\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7\u00D7\", \"amplitude\": 3, \"envelope\": \"swell 1\" }] } },\n                { name: \"slow strings\", midiProgram: 49, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 0, \"filterEnvelope\": \"swell 2\", \"vibrato\": \"none\", \"algorithm\": \"(1\u20022)\u2190(3\u20024)\", \"feedbackType\": \"4\u27F2\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"flare 3\", \"operators\": [{ \"frequency\": \"4\u00D7\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"3\u00D7\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"2\u00D7\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7\u00D7\", \"amplitude\": 4, \"envelope\": \"swell 1\" }] } },\n                { name: \"strings synth 1\", midiProgram: 50, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"soft fade\", \"effects\": \"chorus & reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"wave\": \"sawtooth\", \"interval\": \"hum\", \"vibrato\": \"delayed\" } },\n                { name: \"strings synth 2\", midiProgram: 51, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1\u20032\u20033\u20034\", \"feedbackType\": \"1\u27F2 2\u27F2 3\u27F2 4\u27F2\", \"feedbackAmplitude\": 12, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"3\u00D7\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"2\u00D7\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 9, \"envelope\": \"custom\" }] } },\n                { name: \"orchestra hit 1\", midiProgram: 55, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"custom\", \"vibrato\": \"none\", \"algorithm\": \"1\u20032\u20033\u20034\", \"feedbackType\": \"1\u27F2 2\u27F2 3\u27F2 4\u27F2\", \"feedbackAmplitude\": 14, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"envelope\": \"twang 3\" }, { \"frequency\": \"2\u00D7\", \"amplitude\": 15, \"envelope\": \"flare 3\" }, { \"frequency\": \"4\u00D7\", \"amplitude\": 15, \"envelope\": \"flare 2\" }, { \"frequency\": \"8\u00D7\", \"amplitude\": 15, \"envelope\": \"flare 1\" }] } },\n                { name: \"violin 2\", midiProgram: 40, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 105.11, \"linearGain\": 0.3536 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"light\", \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 6, \"chord\": \"simultaneous\", \"algorithm\": \"(1\u20022)\u2190(3\u20024)\", \"feedbackType\": \"4\u27F2\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"4\u00D7\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"3\u00D7\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"2\u00D7\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7\u00D7\", \"amplitude\": 8, \"envelope\": \"swell 1\" }] } },\n                { name: \"orchestra hit 2\", midiProgram: 55, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"preset\": 588, \"effects\": [\"panning\", \"vibrato\", \"note filter\", \"chorus\", \"reverb\"], \"vibrato\": \"delayed\", \"vibratoDepth\": 0.3, \"vibratoDelay\": 18.5, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": true, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.5 }], \"pan\": 0, \"panDelay\": 10, \"chorus\": 100, \"reverb\": 0, \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"algorithm\": \"1\u20032\u20033\u20034\", \"feedbackType\": \"1\u27F2 2\u27F2 3\u27F2 4\u27F2\", \"feedbackAmplitude\": 14, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 12, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"2\u00D7\", \"amplitude\": 14, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"3\u00D7\", \"amplitude\": 12, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"4\u00D7\", \"amplitude\": 14, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 10, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n                { name: \"supersaw string\", midiProgram: 41, settings: { \"type\": \"supersaw\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 1.4142 }, { \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 0.1768 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 500, \"linearGain\": 0.1768 }], \"reverb\": 33, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": 6, \"pulseWidth\": 35.35534, \"dynamism\": 83, \"spread\": 8, \"shape\": 50, \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"twang 1\", \"index\": 0 }] } },\n                { name: \"supersaw string 2\", midiProgram: 41, settings: { \"type\": \"supersaw\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.5 }, { \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 4756.83, \"linearGain\": 2 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.5 }, { \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 4756.83, \"linearGain\": 2 }], \"effects\": [\"note filter\", \"chorus\", \"reverb\"], \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 1 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 1 }], \"chorus\": 57, \"reverb\": 42, \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": -6, \"pulseWidth\": 50, \"dynamism\": 67, \"spread\": 58, \"shape\": 0, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"punch\" }, { \"target\": \"pulseWidth\", \"envelope\": \"flare 2\" }] } },\n            ])\n        },\n        {\n            name: \"Vocal Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"choir soprano\", midiProgram: 94, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 5.6569 }, { \"type\": \"high-pass\", \"cutoffHz\": 707.11, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.25 }, { \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 11.3137 }], \"effects\": [\"vibrato\", \"chorus\", \"reverb\"], \"vibrato\": \"shaky\", \"chorus\": 100, \"reverb\": 33, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 24, \"harmonics\": [100, 100, 86, 57, 29, 29, 57, 71, 57, 29, 14, 14, 14, 29, 43, 57, 43, 29, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [] } },\n                { name: \"choir tenor\", midiProgram: 52, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 11.3137 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 0.7071 }, { \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 11.3137 }], \"effects\": [\"vibrato\", \"chorus\", \"reverb\"], \"vibrato\": \"shaky\", \"chorus\": 100, \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [86, 100, 100, 86, 71, 57, 43, 29, 29, 29, 29, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14], \"unison\": \"none\", \"envelopes\": [] } },\n                { name: \"choir bass\", midiProgram: 52, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 11.3137 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 11.3137 }], \"effects\": [\"vibrato\", \"chorus\", \"reverb\"], \"vibrato\": \"shaky\", \"chorus\": 100, \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [71, 86, 100, 100, 86, 86, 57, 43, 29, 29, 29, 29, 29, 29, 43, 43, 43, 43, 43, 29, 29, 29, 29, 14, 14, 14, 14, 14], \"unison\": \"none\", \"envelopes\": [] } },\n                { name: \"solo soprano\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 5.6569 }, { \"type\": \"high-pass\", \"cutoffHz\": 707.11, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.25 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"shaky\", \"reverb\": 33, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 12, \"harmonics\": [86, 100, 86, 43, 14, 14, 57, 71, 57, 14, 14, 14, 14, 14, 43, 57, 43, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [] } },\n                { name: \"solo tenor\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 11.3137 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 0.7071 }, { \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 11.3137 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"shaky\", \"reverb\": 33, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 12, \"harmonics\": [86, 100, 100, 86, 71, 57, 43, 29, 29, 29, 29, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14], \"unison\": \"none\", \"envelopes\": [] } },\n                { name: \"solo bass\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 8 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 8 }, { \"type\": \"high-pass\", \"cutoffHz\": 210.22, \"linearGain\": 1.4142 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"shaky\", \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": 12, \"chord\": \"simultaneous\", \"harmonics\": [71, 86, 100, 100, 86, 86, 57, 43, 29, 29, 29, 29, 29, 29, 43, 43, 43, 43, 43, 29, 29, 29, 29, 14, 14, 14, 14, 14], \"unison\": \"none\", \"envelopes\": [] } },\n                { name: \"voice ooh\", midiProgram: 53, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [100, 57, 43, 43, 14, 14, 0, 0, 0, 14, 29, 29, 14, 0, 14, 29, 29, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\n                { name: \"voice synth\", midiProgram: 54, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"medium fade\", \"effects\": \"chorus & reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"wave\": \"rounded\", \"interval\": \"union\", \"vibrato\": \"light\" } },\n                { name: \"vox synth lead\", midiProgram: 85, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"(1\u20022\u20023)\u21904\", \"feedbackType\": \"1\u21922\u21923\u21924\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"punch\", \"operators\": [{ \"frequency\": \"2\u00D7\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"9\u00D7\", \"amplitude\": 5, \"envelope\": \"custom\" }, { \"frequency\": \"20\u00D7\", \"amplitude\": 1, \"envelope\": \"custom\" }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\n                { name: \"tiny robot\", midiProgram: 85, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"delayed\", \"reverb\": 33, \"transition\": \"slide\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"2\u00D7\", \"amplitude\": 15 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 7 }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 7 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 1 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\n                { name: \"yowie\", midiProgram: 85, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"effects\": [\"panning\", \"note filter\", \"reverb\"], \"noteFilterType\": true, \"noteSimpleCut\": 6, \"noteSimplePeak\": 6, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2000, \"linearGain\": 4 }], \"pan\": 0, \"panDelay\": 10, \"reverb\": 0, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 6, \"algorithm\": \"1\u21902\u2190(3\u20024)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 12, \"operators\": [{ \"frequency\": \"2\u00D7\", \"amplitude\": 12, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"16\u00D7\", \"amplitude\": 5, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 5, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 2, \"perEnvelopeLowerBound\": 0.5, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 1, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n                { name: \"mouse\", midiProgram: 85, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"light\", \"reverb\": 33, \"transition\": \"slide in pattern\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1\u20032\u20033\u20034\", \"feedbackType\": \"1\u27F2\u20032\u27F2\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"2\u00D7\", \"amplitude\": 13 }, { \"frequency\": \"5\u00D7\", \"amplitude\": 12 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"note size\" }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 2\" }] } },\n                { name: \"gumdrop\", midiProgram: 85, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"(1\u20022\u20023)\u21904\", \"feedbackType\": \"1\u27F2\u20032\u27F2\u20033\u27F2\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2\u00D7\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"4\u00D7\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"7\u00D7\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 10, \"envelope\": \"twang 1\" }] } },\n                { name: \"echo drop\", midiProgram: 102, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1\u2190(2\u20023\u21904)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~2\u00D7\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"11\u00D7\", \"amplitude\": 2, \"envelope\": \"steady\" }, { \"frequency\": \"16\u00D7\", \"amplitude\": 5, \"envelope\": \"swell 3\" }] } },\n                { name: \"dark choir\", midiProgram: 85, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"spectrum\": [43, 14, 14, 14, 14, 14, 14, 100, 14, 14, 14, 57, 14, 14, 100, 14, 43, 14, 43, 14, 14, 43, 14, 29, 14, 29, 14, 14, 29, 0] } },\n            ])\n        },\n        {\n            name: \"Brass Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"trumpet\", midiProgram: 56, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 5, \"envelope\": \"flare 2\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n                { name: \"trombone\", midiProgram: 57, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"2\u27F2\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n                { name: \"tuba\", midiProgram: 58, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"2\u27F2\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n                { name: \"muted trumpet\", midiProgram: 59, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 4000, \"linearGain\": 2.8284 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 1 }], \"reverb\": 33, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1\u2190(2\u20023\u21904)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 13 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 5 }, { \"frequency\": \"9\u00D7\", \"amplitude\": 5 }, { \"frequency\": \"13\u00D7\", \"amplitude\": 7 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 1\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 2\" }] } },\n                { name: \"french horn\", midiProgram: 60, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 2378.41, \"linearGain\": 2.8284 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1\u21903\u20032\u21904\", \"feedbackType\": \"1\u27F2\u20032\u27F2\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 12 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 10 }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 8 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 2\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"swell 1\" }] } },\n                { name: \"brass section\", midiProgram: 61, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1\u21903\u20032\u21904\", \"feedbackType\": \"1\u27F2\u20032\u27F2\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 10, \"envelope\": \"swell 1\" }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 10, \"envelope\": \"swell 1\" }] } },\n                { name: \"brass synth 1\", midiProgram: 62, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1\u21903\u20032\u21904\", \"feedbackType\": \"1\u27F2\u20032\u27F2\", \"feedbackAmplitude\": 11, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 12, \"envelope\": \"flare 1\" }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 8, \"envelope\": \"flare 2\" }] } },\n                { name: \"brass synth 2\", midiProgram: 63, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"soft\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1\u21903\u20032\u21904\", \"feedbackType\": \"1\u27F2\u20032\u27F2\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 10, \"envelope\": \"flare 1\" }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 7, \"envelope\": \"flare 1\" }] } },\n                { name: \"pulse brass\", midiProgram: 62, settings: { \"type\": \"PWM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"pulseWidth\": 50, \"pulseEnvelope\": \"flare 3\", \"vibrato\": \"none\" } },\n            ])\n        },\n        {\n            name: \"Reed Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"soprano sax\", midiProgram: 64, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1\u21902\u21903\u21904\", \"feedbackType\": \"4\u27F2\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"4\u00D7\", \"amplitude\": 4, \"envelope\": \"swell 1\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"5\u00D7\", \"amplitude\": 4, \"envelope\": \"punch\" }] } },\n                { name: \"alto sax\", midiProgram: 65, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1\u2190(2\u20023\u21904)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"punch\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"4\u00D7\", \"amplitude\": 6, \"envelope\": \"swell 1\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 12, \"envelope\": \"steady\" }] } },\n                { name: \"tenor sax\", midiProgram: 66, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1\u21902\u21903\u21904\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"2\u00D7\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"3\u00D7\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"8\u00D7\", \"amplitude\": 3, \"envelope\": \"steady\" }] } },\n                { name: \"baritone sax\", midiProgram: 67, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1\u2190(2\u20023\u21904)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"swell 2\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"8\u00D7\", \"amplitude\": 4, \"envelope\": \"steady\" }, { \"frequency\": \"4\u00D7\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 4, \"envelope\": \"punch\" }] } },\n                { name: \"sax synth\", midiProgram: 64, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"1\u27F2\u20032\u27F2\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4\u00D7\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"envelope\": \"steady\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n                { name: \"shehnai\", midiProgram: 111, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4\u00D7\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n                { name: \"oboe\", midiProgram: 68, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 1\", \"vibrato\": \"none\", \"algorithm\": \"1\u20032\u2190(3\u20024)\", \"feedbackType\": \"2\u27F2\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"tremolo5\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"4\u00D7\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"6\u00D7\", \"amplitude\": 2, \"envelope\": \"steady\" }] } },\n                { name: \"english horn\", midiProgram: 69, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1\u20032\u2190(3\u20024)\", \"feedbackType\": \"2\u27F2\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4\u00D7\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"2\u00D7\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 8, \"envelope\": \"punch\" }, { \"frequency\": \"8\u00D7\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\n                { name: \"bassoon\", midiProgram: 70, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 707, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1\u2190(2\u20023\u21904)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2\u00D7\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"6\u00D7\", \"amplitude\": 6, \"envelope\": \"swell 1\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n                { name: \"clarinet\", midiProgram: 71, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 43, 86, 57, 86, 71, 86, 71, 71, 71, 71, 71, 71, 43, 71, 71, 57, 57, 57, 57, 57, 57, 43, 43, 43, 29, 14, 0] } },\n                { name: \"harmonica\", midiProgram: 22, generalMidi: true, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"preset\": 778, \"effects\": [\"panning\", \"note filter\", \"reverb\"], \"noteFilterType\": true, \"noteSimpleCut\": 9, \"noteSimplePeak\": 2, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 7231.23, \"linearGain\": 1 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 7231.23, \"linearGain\": 1 }], \"pan\": 0, \"panDelay\": 10, \"reverb\": 0, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1\u2190(2\u20023\u21904)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 9, \"operators\": [{ \"frequency\": \"2\u00D7\", \"amplitude\": 14, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2\u00D7\", \"amplitude\": 2, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 2, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 2 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"tremolo2\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 2, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n            ])\n        },\n        {\n            name: \"Flute Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"flute 1\", midiProgram: 73, generalMidi: true, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9656.85, \"linearGain\": 0.5 }], \"eqFilterType\": true, \"eqSimpleCut\": 9, \"eqSimplePeak\": 1, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"preset\": 832, \"eqSubFilters1\": [], \"effects\": [\"panning\", \"reverb\"], \"pan\": 0, \"panDelay\": 10, \"reverb\": 0, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"4\u27F2\", \"feedbackAmplitude\": 7, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"2\u00D7\", \"amplitude\": 4, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 3, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 1, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 7, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n                { name: \"recorder\", midiProgram: 74, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 43, 57, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0] } },\n                { name: \"whistle\", midiProgram: 78, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"chorus & reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"delayed\", \"harmonics\": [100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\n                { name: \"ocarina\", midiProgram: 79, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 14, 57, 14, 29, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\n                { name: \"piccolo\", midiProgram: 72, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1\u21903\u20032\u21904\", \"feedbackType\": \"4\u27F2\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"~2\u00D7\", \"amplitude\": 3, \"envelope\": \"punch\" }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 5, \"envelope\": \"punch\" }] } },\n                { name: \"shakuhachi\", midiProgram: 77, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"1\u2190(2\u20023\u21904)\", \"feedbackType\": \"3\u21924\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"2\u00D7\", \"amplitude\": 3, \"envelope\": \"punch\" }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 4, \"envelope\": \"twang 1\" }, { \"frequency\": \"20\u00D7\", \"amplitude\": 15, \"envelope\": \"steady\" }] } },\n                { name: \"pan flute\", midiProgram: 75, generalMidi: true, settings: { \"type\": \"spectrum\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 5.6569 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.7071 }], \"reverb\": 33, \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -3, \"spectrum\": [100, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 71, 0, 0, 14, 0, 57, 0, 29, 14, 29, 14, 14, 29, 14, 29, 14, 14, 29, 14], \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"twang 1\", \"index\": 0 }, { \"target\": \"noteVolume\", \"envelope\": \"punch\" }] } },\n                { name: \"blown bottle\", midiProgram: 76, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1\u20032\u20033\u20034\", \"feedbackType\": \"1\u27F2 2\u27F2 3\u27F2 4\u27F2\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"3\u00D7\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"6\u00D7\", \"amplitude\": 2, \"envelope\": \"custom\" }, { \"frequency\": \"11\u00D7\", \"amplitude\": 2, \"envelope\": \"custom\" }] } },\n                { name: \"calliope\", midiProgram: 82, generalMidi: true, settings: { \"type\": \"spectrum\", \"transition\": \"cross fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"spectrum\": [100, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 71, 0, 0, 57, 0, 43, 0, 29, 14, 14, 29, 14, 14, 14, 14, 14, 14, 14, 14] } },\n                { name: \"chiffer\", midiProgram: 83, generalMidi: true, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"spectrum\": [86, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 71, 0, 0, 57, 0, 57, 0, 43, 14, 14, 43, 14, 29, 14, 29, 29, 29, 29, 14] } },\n                { name: \"breath noise\", midiProgram: 121, generalMidi: true, settings: { \"type\": \"spectrum\", \"eqFilter\": [], \"effects\": [\"chord type\", \"note filter\", \"reverb\"], \"chord\": \"strum\", \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 840.9, \"linearGain\": 0.3536 }, { \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.3536 }], \"reverb\": 33, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 12, \"spectrum\": [71, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 71, 0, 0, 29, 0, 100, 29, 14, 29, 100, 29, 100, 14, 14, 71, 0, 29, 0, 0], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 1\" }] } },\n                { name: \"flute 2\", midiProgram: 73, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"seamless\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"delayed\", \"harmonics\": [100, 43, 86, 57, 86, 71, 86, 71, 71, 71, 71, 71, 71, 43, 71, 71, 57, 57, 57, 57, 57, 57, 43, 43, 43, 29, 14, 0] } },\n            ])\n        },\n        {\n            name: \"Pad Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"new age pad\", midiProgram: 88, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"chorus\"], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"algorithm\": \"1\u2190(2\u20023\u21904)\", \"feedbackType\": \"1\u27F2\u20032\u27F2\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"2\u00D7\", \"amplitude\": 14 }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 4 }, { \"frequency\": \"6\u00D7\", \"amplitude\": 3 }, { \"frequency\": \"13\u00D7\", \"amplitude\": 3 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 2\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"swell 3\" }] } },\n                { name: \"warm pad\", midiProgram: 89, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 1 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"simultaneous\", \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 7, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 14 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 6 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 1 }] } },\n                { name: \"polysynth pad\", midiProgram: 90, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"vibrato\", \"note filter\", \"chorus\"], \"vibrato\": \"delayed\", \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 1 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"honky tonk\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }] } },\n                { name: \"space voice pad\", midiProgram: 91, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 1414.21, \"linearGain\": 0.1768 }], \"effects\": [\"chorus\"], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"algorithm\": \"(1\u20022\u20023)\u21904\", \"feedbackType\": \"1\u27F2 2\u27F2 3\u27F2 4\u27F2\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 10 }, { \"frequency\": \"2\u00D7\", \"amplitude\": 8 }, { \"frequency\": \"3\u00D7\", \"amplitude\": 7 }, { \"frequency\": \"11\u00D7\", \"amplitude\": 2 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"swell 2\" }] } },\n                { name: \"bowed glass pad\", midiProgram: 92, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.5 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"simultaneous\", \"algorithm\": \"1\u21903\u20032\u21904\", \"feedbackType\": \"1\u27F2\u20032\u27F2\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 10 }, { \"frequency\": \"2\u00D7\", \"amplitude\": 12 }, { \"frequency\": \"3\u00D7\", \"amplitude\": 7 }, { \"frequency\": \"7\u00D7\", \"amplitude\": 4 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 3\", \"index\": 3 }] } },\n                { name: \"metallic pad\", midiProgram: 93, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.5 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"algorithm\": \"1\u21903\u20032\u21904\", \"feedbackType\": \"1\u27F2\u20032\u27F2\", \"feedbackAmplitude\": 13, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15 }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 9 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 7 }, { \"frequency\": \"11\u00D7\", \"amplitude\": 7 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 2\", \"index\": 2 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\n                { name: \"sweep pad\", midiProgram: 95, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 4 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"hum\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"flare 3\" }] } },\n                { name: \"atmosphere\", midiProgram: 99, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 1 }], \"effects\": [\"chorus\", \"reverb\"], \"chorus\": 100, \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"3\u27F2\u20034\u27F2\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 14 }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 10 }, { \"frequency\": \"3\u00D7\", \"amplitude\": 7 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 7 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 3\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 3 }] } },\n                { name: \"brightness\", midiProgram: 100, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 2 }], \"effects\": [\"chorus\"], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"harmonics\": [100, 86, 86, 86, 43, 57, 43, 71, 43, 43, 43, 57, 43, 43, 57, 71, 57, 43, 29, 43, 57, 57, 43, 29, 29, 29, 29, 14], \"unison\": \"octave\", \"stringSustain\": 86, \"envelopes\": [] } },\n                { name: \"goblins\", midiProgram: 101, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 11.3137 }], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.5 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"simultaneous\", \"algorithm\": \"1\u21902\u21903\u21904\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 10, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15 }, { \"frequency\": \"4\u00D7\", \"amplitude\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 10 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 2\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 3\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"tremolo1\", \"index\": 2 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 3\" }] } },\n                { name: \"sci-fi\", midiProgram: 103, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 9513.66, \"linearGain\": 2.8284 }], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.5 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"algorithm\": \"(1\u20022)\u21903\u21904\", \"feedbackType\": \"1\u27F2 2\u27F2 3\u27F2 4\u27F2\", \"feedbackAmplitude\": 8, \"operators\": [{ \"frequency\": \"~1\u00D7\", \"amplitude\": 13 }, { \"frequency\": \"2\u00D7\", \"amplitude\": 10 }, { \"frequency\": \"5\u00D7\", \"amplitude\": 5 }, { \"frequency\": \"11\u00D7\", \"amplitude\": 8 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"tremolo5\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\n                { name: \"flutter pad\", midiProgram: 90, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"vibrato\", \"note filter\", \"chorus\"], \"vibrato\": \"delayed\", \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 4 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"algorithm\": \"(1\u20022)\u2190(3\u20024)\", \"feedbackType\": \"1\u27F2\u20032\u27F2\u20033\u27F2\", \"feedbackAmplitude\": 9, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 13 }, { \"frequency\": \"5\u00D7\", \"amplitude\": 7 }, { \"frequency\": \"7\u00D7\", \"amplitude\": 5 }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 6 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"tremolo1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 3 }] } },\n                { name: \"feedback pad\", midiProgram: 89, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 2378.41, \"linearGain\": 8 }], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"custom interval\", \"algorithm\": \"1\u20032\u20033\u20034\", \"feedbackType\": \"1\u27F2 2\u27F2 3\u27F2 4\u27F2\", \"feedbackAmplitude\": 8, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 15 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 15 }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 15 }], \"envelopes\": [{ \"target\": \"feedbackAmplitude\", \"envelope\": \"swell 2\" }] } },\n                { name: \"supersaw pad\", midiProgram: 93, settings: { \"type\": \"supersaw\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.1768 }], \"effects\": [\"reverb\"], \"reverb\": 100, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": 24, \"pulseWidth\": 50, \"dynamism\": 100, \"spread\": 58, \"shape\": 0, \"envelopes\": [] } },\n            ])\n        },\n        {\n            name: \"Drum Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"standard drumset\", midiProgram: 116, isNoise: true, settings: { \"type\": \"drumset\", \"effects\": \"reverb\", \"drums\": [{ \"filterEnvelope\": \"twang 1\", \"spectrum\": [57, 71, 71, 86, 86, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 100, 71, 71, 57, 86, 57, 57, 57, 71, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 0, 100, 57, 43, 43, 29, 57, 43, 29, 71, 43, 43, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 43, 43, 43] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 0, 0, 71, 57, 43, 43, 43, 57, 57, 43, 29, 57, 43, 43, 43, 29, 43, 57, 43, 43, 43, 43, 43, 43, 29, 43, 43] }, { \"filterEnvelope\": \"decay 2\", \"spectrum\": [0, 14, 29, 43, 86, 71, 29, 43, 43, 43, 43, 29, 71, 29, 71, 29, 43, 43, 43, 43, 57, 43, 43, 57, 43, 43, 43, 57, 57, 57] }, { \"filterEnvelope\": \"decay 1\", \"spectrum\": [0, 0, 14, 14, 14, 14, 29, 29, 29, 43, 43, 43, 57, 57, 57, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43] }, { \"filterEnvelope\": \"twang 3\", \"spectrum\": [43, 43, 43, 71, 29, 29, 43, 43, 43, 29, 43, 43, 43, 29, 29, 43, 43, 29, 29, 29, 57, 14, 57, 43, 43, 57, 43, 43, 57, 57] }, { \"filterEnvelope\": \"decay 3\", \"spectrum\": [29, 43, 43, 43, 43, 29, 29, 43, 29, 29, 43, 29, 14, 29, 43, 29, 43, 29, 57, 29, 43, 57, 43, 71, 43, 71, 57, 57, 71, 71] }, { \"filterEnvelope\": \"twang 3\", \"spectrum\": [43, 29, 29, 43, 29, 29, 29, 57, 29, 29, 29, 57, 43, 43, 29, 29, 57, 43, 43, 43, 71, 43, 43, 71, 57, 71, 71, 71, 71, 71] }, { \"filterEnvelope\": \"decay 3\", \"spectrum\": [57, 57, 57, 43, 57, 57, 43, 43, 57, 43, 43, 43, 71, 57, 43, 57, 86, 71, 57, 86, 71, 57, 86, 100, 71, 86, 86, 86, 86, 86] }, { \"filterEnvelope\": \"flare 1\", \"spectrum\": [0, 0, 14, 14, 14, 14, 29, 29, 29, 43, 43, 43, 57, 57, 71, 71, 86, 86, 100, 100, 100, 100, 100, 100, 100, 100, 86, 57, 29, 0] }, { \"filterEnvelope\": \"decay 2\", \"spectrum\": [14, 14, 14, 14, 29, 14, 14, 29, 14, 43, 14, 43, 57, 86, 57, 57, 100, 57, 43, 43, 57, 100, 57, 43, 29, 14, 0, 0, 0, 0] }] } },\n                { name: \"steel pan\", midiProgram: 114, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 0.1768 }], \"effects\": [\"note filter\", \"chorus\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }], \"chorus\": 67, \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"chord\": \"simultaneous\", \"algorithm\": \"1\u2190(2\u20023\u21904)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"~1\u00D7\", \"amplitude\": 14 }, { \"frequency\": \"7\u00D7\", \"amplitude\": 3 }, { \"frequency\": \"3\u00D7\", \"amplitude\": 5 }, { \"frequency\": \"4\u00D7\", \"amplitude\": 4 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"decay 2\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 1\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 2\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 2\", \"index\": 3 }] } },\n                { name: \"steel pan synth\", midiProgram: 114, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1\u20032\u20033\u21904\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"~1\u00D7\", \"amplitude\": 12 }, { \"frequency\": \"2\u00D7\", \"amplitude\": 15 }, { \"frequency\": \"4\u00D7\", \"amplitude\": 14 }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 3 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 1\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 0 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 2\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 1\" }] } },\n                { name: \"timpani\", midiProgram: 47, generalMidi: true, settings: { \"type\": \"spectrum\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 6727.17, \"linearGain\": 5.6569 }], \"effects\": [\"pitch shift\", \"note filter\", \"reverb\"], \"pitchShiftSemitones\": 15, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.5 }], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"spectrum\": [100, 0, 0, 0, 86, 0, 0, 71, 0, 14, 43, 14, 43, 43, 0, 29, 43, 29, 29, 29, 43, 29, 43, 29, 43, 43, 43, 43, 43, 43], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 1\" }, { \"target\": \"pitchShift\", \"envelope\": \"twang 1\" }] } },\n                { name: \"dark strike\", midiProgram: 47, settings: { \"type\": \"spectrum\", \"eqFilter\": [], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.7071 }], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"spectrum\": [0, 0, 14, 14, 14, 29, 29, 43, 43, 86, 43, 43, 43, 29, 86, 29, 29, 29, 86, 29, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 2\" }] } },\n                { name: \"woodblock\", midiProgram: 115, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 14, 29, 43, 43, 57, 86, 86, 71, 57, 57, 43, 43, 57, 86, 86, 43, 43, 71, 57, 57, 57, 57, 57, 86, 86, 71, 71, 71, 71] } },\n                { name: \"taiko drum\", midiProgram: 116, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -0.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"twang 1\", \"spectrum\": [71, 100, 100, 43, 43, 71, 71, 43, 43, 43, 43, 43, 43, 57, 29, 57, 43, 57, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43] } },\n                { name: \"melodic drum\", midiProgram: 117, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -1.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"twang 1\", \"spectrum\": [100, 71, 71, 57, 57, 43, 43, 71, 43, 43, 43, 57, 43, 43, 57, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] } },\n                { name: \"drum synth\", midiProgram: 118, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"decay 1\", \"spectrum\": [100, 86, 71, 57, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] } },\n                { name: \"tom-tom\", midiProgram: 116, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"spectrum\": [100, 29, 14, 0, 0, 86, 14, 43, 29, 86, 29, 14, 29, 57, 43, 43, 43, 43, 57, 43, 43, 43, 29, 57, 43, 43, 43, 43, 43, 43] } },\n                { name: \"metal pipe\", midiProgram: 117, isNoise: true, midiSubharmonicOctaves: -1.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"spectrum\": [29, 43, 86, 43, 43, 43, 43, 43, 100, 29, 14, 14, 100, 14, 14, 0, 0, 0, 0, 0, 14, 29, 29, 14, 0, 0, 14, 29, 0, 0] } },\n                { name: \"synth kick\", midiProgram: 47, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -6, \"chord\": \"simultaneous\", \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"8\u00D7\", \"amplitude\": 15 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"operatorFrequency\", \"envelope\": \"twang 1\", \"index\": 0 }, { \"target\": \"noteVolume\", \"envelope\": \"twang 2\" }] } },\n            ])\n        },\n        {\n            name: \"Novelty Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"guitar fret noise\", midiProgram: 120, generalMidi: true, settings: { \"type\": \"spectrum\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 1000, \"linearGain\": 0.1768 }], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 5.6569 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"spectrum\": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 29, 14, 0, 0, 43, 0, 43, 0, 71, 43, 0, 57, 0], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"flare 1\" }, { \"target\": \"noteVolume\", \"envelope\": \"twang 2\" }] } },\n                { name: \"fifth saw lead\", midiProgram: 86, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 1.4142 }], \"chorus\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"fifth\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }] } },\n                { name: \"fifth swell\", midiProgram: 86, midiSubharmonicOctaves: 1, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2000, \"linearGain\": 2 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"fifth\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 3\" }] } },\n                { name: \"soundtrack\", midiProgram: 97, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.5 }], \"chorus\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"fifth\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"flare 3\" }] } },\n                { name: \"reverse cymbal\", midiProgram: 119, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"effects\": \"none\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 3\", \"spectrum\": [29, 57, 57, 29, 57, 57, 29, 29, 43, 29, 29, 43, 29, 29, 57, 57, 14, 57, 14, 57, 71, 71, 57, 86, 57, 100, 86, 86, 86, 86] } },\n                { name: \"seashore\", midiProgram: 122, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"transition\": \"soft fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"swell 3\", \"spectrum\": [14, 14, 29, 29, 43, 43, 43, 57, 57, 57, 57, 57, 57, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57] } },\n                { name: \"bird tweet\", midiProgram: 123, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [], \"effects\": [\"chord type\", \"vibrato\", \"reverb\"], \"chord\": \"strum\", \"vibrato\": \"heavy\", \"reverb\": 67, \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": -6, \"harmonics\": [0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"unison\": \"hum\", \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"decay 1\" }] } },\n                { name: \"telephone ring\", midiProgram: 124, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"2\u00D7\", \"amplitude\": 12 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 4 }, { \"frequency\": \"20\u00D7\", \"amplitude\": 1 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"tremolo4\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"tremolo1\", \"index\": 1 }] } },\n                { name: \"helicopter\", midiProgram: 125, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -0.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"seamless\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"tremolo4\", \"spectrum\": [14, 43, 43, 57, 57, 57, 71, 71, 71, 71, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 57, 57] } },\n                { name: \"applause\", midiProgram: 126, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 3\", \"spectrum\": [14, 14, 29, 29, 29, 43, 43, 57, 71, 71, 86, 86, 86, 71, 71, 57, 57, 57, 71, 86, 86, 86, 86, 86, 71, 71, 57, 57, 57, 57] } },\n                { name: \"gunshot\", midiProgram: 127, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 1414, \"filterResonance\": 29, \"filterEnvelope\": \"twang 1\", \"spectrum\": [14, 29, 43, 43, 57, 57, 57, 71, 71, 71, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43] } },\n                { name: \"scoot\", midiProgram: 92, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 707.11, \"linearGain\": 4 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"wave\": \"double saw\", \"unison\": \"shimmer\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"flare 1\" }] } },\n                { name: \"buzz saw\", midiProgram: 30, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.5 }], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"custom interval\", \"algorithm\": \"1\u21902\u21903\u21904\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 4, \"operators\": [{ \"frequency\": \"5\u00D7\", \"amplitude\": 13 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 10 }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 6 }, { \"frequency\": \"11\u00D7\", \"amplitude\": 12 }], \"envelopes\": [] } },\n                { name: \"mosquito\", midiProgram: 93, settings: { \"type\": \"PWM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 2 }], \"effects\": [\"vibrato\"], \"vibrato\": \"shaky\", \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": -6, \"chord\": \"simultaneous\", \"pulseWidth\": 4.41942, \"envelopes\": [{ \"target\": \"pulseWidth\", \"envelope\": \"tremolo6\" }] } },\n                { name: \"breathing\", midiProgram: 126, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 2\", \"spectrum\": [14, 14, 14, 29, 29, 29, 29, 29, 43, 29, 29, 43, 43, 43, 29, 29, 71, 43, 86, 86, 57, 100, 86, 86, 86, 86, 71, 86, 71, 57] } },\n                { name: \"klaxon synth\", midiProgram: 125, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"noise\", \"effects\": \"reverb\", \"transition\": \"slide\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"wave\": \"buzz\" } },\n                { name: \"theremin\", midiProgram: 40, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.7071 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"heavy\", \"reverb\": 33, \"transition\": \"slide in pattern\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -6, \"chord\": \"simultaneous\", \"harmonics\": [100, 71, 57, 43, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [] } },\n                { name: \"sonar ping\", midiProgram: 121, settings: { \"type\": \"spectrum\", \"eqFilter\": [], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.5 }], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"spectrum\": [100, 43, 29, 29, 14, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 2\" }] } },\n            ])\n        },\n        {\n            name: \"UltraBox Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"nes white\", midiProgram: 116, generalMidi: true, isNoise: true, settings: { \"type\": \"noise\", \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 8, \"eqSimplePeak\": 0, \"eqSubFilters1\": [], \"effects\": [\"panning\"], \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": 0, \"wave\": \"1-bit white\", \"envelopes\": [] } },\n                { name: \"nes ping\", midiProgram: 116, generalMidi: true, isNoise: true, settings: { \"type\": \"noise\", \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 8, \"eqSimplePeak\": 0, \"eqSubFilters1\": [], \"effects\": [\"panning\"], \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": 0, \"wave\": \"1-bit metallic\", \"envelopes\": [] } },\n                //\n                { name: \"distorted pulse vocal\", generalMidi: false, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.0884 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.0884 }], \"effects\": [\"panning\", \"transition type\", \"pitch shift\", \"vibrato\", \"note filter\", \"bitcrusher\", \"echo\", \"reverb\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"pitchShiftSemitones\": 0, \"vibrato\": \"delayed\", \"vibratoDepth\": 0.3, \"vibratoDelay\": 18.5, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 840.9, \"linearGain\": 11.3137 }, { \"type\": \"low-pass\", \"cutoffHz\": 297.3, \"linearGain\": 8 }, { \"type\": \"peak\", \"cutoffHz\": 500, \"linearGain\": 11.3137 }, { \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 1.4142 }, { \"type\": \"peak\", \"cutoffHz\": 176.78, \"linearGain\": 11.3137 }, { \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 11.3137 }], \"noteSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 840.9, \"linearGain\": 11.3137 }, { \"type\": \"low-pass\", \"cutoffHz\": 297.3, \"linearGain\": 8 }, { \"type\": \"peak\", \"cutoffHz\": 500, \"linearGain\": 11.3137 }, { \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 1.4142 }, { \"type\": \"peak\", \"cutoffHz\": 176.78, \"linearGain\": 11.3137 }, { \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 11.3137 }], \"bitcrusherOctave\": 6.5, \"bitcrusherQuantization\": 71, \"pan\": 0, \"panDelay\": 10, \"echoSustain\": 14, \"echoDelayBeats\": 0.167, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"wave\": \"1/8 pulse\", \"unison\": \"none\", \"envelopes\": [] } },\n                // from lognes\n                { name: \"dubsteb bwah\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.7071 }], \"eqFilterType\": true, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters1\": [], \"effects\": [\"panning\", \"transition type\", \"chord type\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"chord\": \"custom interval\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 10, \"operators\": [{ \"frequency\": \"2\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"4\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 11, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 13, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"note size\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 2\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 3 }] } },\n                //\n                { name: \"FM cool bass\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 1 }, { \"type\": \"high-pass\", \"cutoffHz\": 88.39, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 0.7071 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 1 }, { \"type\": \"high-pass\", \"cutoffHz\": 88.39, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 0.7071 }], \"effects\": [\"panning\", \"transition type\", \"note filter\", \"reverb\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"noteFilterType\": true, \"noteSimpleCut\": 9, \"noteSimplePeak\": 2, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 7231.23, \"linearGain\": 1 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 7231.23, \"linearGain\": 1 }], \"pan\": 0, \"panDelay\": 10, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1\u2190(2\u20023\u21904)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"2\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 7, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"13\u00D7\", \"amplitude\": 11, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"punch\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 3 }] } },\n                //\n                { name: \"FM funky bass\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.1768 }], \"eqFilterType\": true, \"eqSimpleCut\": 5, \"eqSimplePeak\": 0, \"eqSubFilters1\": [], \"effects\": [\"panning\", \"transition type\", \"reverb\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"pan\": 0, \"panDelay\": 10, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"punch\" }, { \"target\": \"noteVolume\", \"envelope\": \"note size\" }] } },\n                //\n                { name: \"talking bass\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"chord type\"], \"chord\": \"custom interval\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"algorithm\": \"1\u2190(2\u20023)\u21904\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 15, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15 }, { \"frequency\": \"2\u00D7\", \"amplitude\": 8 }, { \"frequency\": \"2\u00D7\", \"amplitude\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 12 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"note size\" }] } },\n                // from main\n                { name: \"synth marimba\", generalMidi: false, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 176.78, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"effects\": [\"note filter\", \"echo\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 1.4142 }], \"echoSustain\": 71, \"echoDelayBeats\": 0.5, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"harmonics\": [86, 100, 29, 29, 0, 0, 0, 100, 0, 0, 0, 86, 29, 0, 14, 100, 0, 0, 0, 0, 0, 14, 0, 0, 14, 0, 0, 86], \"unison\": \"fifth\", \"stringSustain\": 7, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"punch\" }] } },\n                // from neputendo\n                { name: \"italian accordian\", generalMidi: false, settings: { \"type\": \"custom chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6000, \"linearGain\": 0.5 }], \"eqFilterType\": true, \"eqSimpleCut\": 8, \"eqSimplePeak\": 1, \"eqSubFilters1\": [], \"effects\": [\"panning\", \"chorus\", \"reverb\"], \"pan\": 0, \"panDelay\": 10, \"chorus\": 71, \"reverb\": 45, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"wave\": \"square\", \"unison\": \"honky tonk\", \"customChipWave\": { \"0\": -24, \"1\": -24, \"2\": -24, \"3\": -24, \"4\": -24, \"5\": -24, \"6\": -24, \"7\": -24, \"8\": -24, \"9\": -24, \"10\": -24, \"11\": -24, \"12\": -24, \"13\": -24, \"14\": -24, \"15\": -24, \"16\": 24, \"17\": 24, \"18\": 24, \"19\": 24, \"20\": 24, \"21\": 24, \"22\": 24, \"23\": 24, \"24\": -24, \"25\": -24, \"26\": -24, \"27\": -24, \"28\": -24, \"29\": -24, \"30\": -24, \"31\": -24, \"32\": -24, \"33\": -24, \"34\": -24, \"35\": -24, \"36\": -24, \"37\": -24, \"38\": -24, \"39\": -24, \"40\": 24, \"41\": 24, \"42\": 24, \"43\": 24, \"44\": 24, \"45\": 24, \"46\": 24, \"47\": 24, \"48\": -24, \"49\": -24, \"50\": -24, \"51\": -24, \"52\": -24, \"53\": -24, \"54\": -24, \"55\": -24, \"56\": -24, \"57\": -24, \"58\": -24, \"59\": -24, \"60\": -24, \"61\": -24, \"62\": -24, \"63\": -24 }, \"customChipWaveIntegral\": { \"0\": 0, \"1\": 0, \"2\": 0, \"3\": 0, \"4\": 0, \"5\": 0, \"6\": 0, \"7\": 0, \"8\": 0, \"9\": 0, \"10\": 0, \"11\": 0, \"12\": 0, \"13\": 0, \"14\": 0, \"15\": 0, \"16\": 0, \"17\": 0, \"18\": 0, \"19\": 0, \"20\": 0, \"21\": 0, \"22\": 0, \"23\": 0, \"24\": 0, \"25\": 0, \"26\": 0, \"27\": 0, \"28\": 0, \"29\": 0, \"30\": 0, \"31\": 0, \"32\": 0, \"33\": 0, \"34\": 0, \"35\": 0, \"36\": 0, \"37\": 0, \"38\": 0, \"39\": 0, \"40\": 0, \"41\": 0, \"42\": 0, \"43\": 0, \"44\": 0, \"45\": 0, \"46\": 0, \"47\": 0, \"48\": 0, \"49\": 0, \"50\": 0, \"51\": 0, \"52\": 0, \"53\": 0, \"54\": 0, \"55\": 0, \"56\": 0, \"57\": 0, \"58\": 0, \"59\": 0, \"60\": 0, \"61\": 0, \"62\": 0, \"63\": 0, \"64\": 0 }, \"envelopes\": [] } },\n                // from neputendo\n                { name: \"chip supersaw\", generalMidi: false, settings: { \"type\": \"custom chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.7071 }], \"eqFilterType\": true, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters1\": [], \"effects\": [\"panning\", \"transition type\", \"vibrato\", \"chorus\", \"reverb\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"vibrato\": \"delayed\", \"vibratoDepth\": 0.3, \"vibratoDelay\": 18.5, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"pan\": 0, \"panDelay\": 10, \"chorus\": 29, \"reverb\": 29, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"wave\": \"square\", \"unison\": \"dissonant\", \"customChipWave\": { \"0\": 22, \"1\": 22, \"2\": 16, \"3\": 6, \"4\": 0, \"5\": -3, \"6\": -8, \"7\": -10, \"8\": -13, \"9\": -16, \"10\": -19, \"11\": -19, \"12\": -20, \"13\": -22, \"14\": -22, \"15\": -24, \"16\": -24, \"17\": -24, \"18\": -24, \"19\": -24, \"20\": -24, \"21\": -24, \"22\": -24, \"23\": -24, \"24\": -24, \"25\": -24, \"26\": -24, \"27\": -24, \"28\": -24, \"29\": -24, \"30\": -24, \"31\": 24, \"32\": 24, \"33\": 16, \"34\": 9, \"35\": 6, \"36\": 4, \"37\": 2, \"38\": 0, \"39\": -1, \"40\": -3, \"41\": -4, \"42\": -4, \"43\": -6, \"44\": -6, \"45\": -6, \"46\": -6, \"47\": -5, \"48\": -5, \"49\": -4, \"50\": -2, \"51\": -2, \"52\": 1, \"53\": 4, \"54\": 6, \"55\": 8, \"56\": 10, \"57\": 12, \"58\": 14, \"59\": 16, \"60\": 18, \"61\": 19, \"62\": 22, \"63\": 24 }, \"customChipWaveIntegral\": { \"0\": 0, \"1\": 0, \"2\": 0, \"3\": 0, \"4\": 0, \"5\": 0, \"6\": 0, \"7\": 0, \"8\": 0, \"9\": 0, \"10\": 0, \"11\": 0, \"12\": 0, \"13\": 0, \"14\": 0, \"15\": 0, \"16\": 0, \"17\": 0, \"18\": 0, \"19\": 0, \"20\": 0, \"21\": 0, \"22\": 0, \"23\": 0, \"24\": 0, \"25\": 0, \"26\": 0, \"27\": 0, \"28\": 0, \"29\": 0, \"30\": 0, \"31\": 0, \"32\": 0, \"33\": 0, \"34\": 0, \"35\": 0, \"36\": 0, \"37\": 0, \"38\": 0, \"39\": 0, \"40\": 0, \"41\": 0, \"42\": 0, \"43\": 0, \"44\": 0, \"45\": 0, \"46\": 0, \"47\": 0, \"48\": 0, \"49\": 0, \"50\": 0, \"51\": 0, \"52\": 0, \"53\": 0, \"54\": 0, \"55\": 0, \"56\": 0, \"57\": 0, \"58\": 0, \"59\": 0, \"60\": 0, \"61\": 0, \"62\": 0, \"63\": 0, \"64\": 0 }, \"envelopes\": [] } },\n                // THANKS TO ANSWEARING MACHINE for the FM supersaw\n                { name: \"fm supersaw\", generalMidi: false, settings: { \"type\": \"FM6op\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.7071 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.7071 }], \"effects\": [\"panning\", \"transition type\", \"pitch shift\", \"note filter\", \"chorus\", \"reverb\"], \"transition\": \"continue\", \"clicklessTransition\": false, \"pitchShiftSemitones\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [], \"noteSubFilters0\": [], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 1 }], \"pan\": 0, \"panDelay\": 10, \"chorus\": 71, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1\u20032\u20033\u20034\u20035\u20036\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 13, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 15, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"2\u00D7\", \"amplitude\": 10, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"3\u00D7\", \"amplitude\": 7, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"4\u00D7\", \"amplitude\": 9, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"8\u00D7\", \"amplitude\": 6, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }], \"envelopes\": [] } },\n                // based off of the todbox wind preset that was removed\n                { name: \"wind\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 250.03, \"linearGain\": 11.3137 }], \"eqFilterType\": true, \"eqSimpleCut\": 0, \"eqSimplePeak\": 7, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters1\": [], \"effects\": [\"transition type\", \"reverb\"], \"transition\": \"continue\", \"clicklessTransition\": false, \"panDelay\": 10, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"1\u21923\u20032\u21924\", \"feedbackAmplitude\": 15, \"operators\": [{ \"frequency\": \"16\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"16\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"16\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"16\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [] } },\n                // this meow is from nobo\n                { name: \"mrow\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters0\": [], \"effects\": [\"panning\", \"chord type\", \"reverb\"], \"chord\": \"custom interval\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"pan\": 0, \"panDelay\": 10, \"reverb\": 35, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1\u21903\u20032\u21904\", \"feedbackType\": \"1\u27F2 2\u27F2 3\u27F2 4\u27F2\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"4\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2\u00D7\", \"amplitude\": 13, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2\u00D7\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2\u00D7\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"flare 1\", \"index\": 0 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 3\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 1\" }] } },\n                // based off of the \"obama why\" beepcord inside joke so thanks to nobo ig\n                { name: \"vocal why\", generalMidi: false, settings: { \"type\": \"harmonics\", \"eqFilter\": [], \"effects\": [\"note filter\", \"panning\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 840.9, \"linearGain\": 11.3137 }], \"pan\": 0, \"reverb\": 0, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"harmonics\": [100, 86, 29, 29, 14, 14, 0, 14, 14, 43, 71, 100, 100, 86, 71, 71, 57, 57, 43, 43, 43, 43, 43, 0, 0, 0, 0, 0], \"unison\": \"octave\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"note size\" }] } },\n            ])\n        },\n        {\n            name: \"Slarmoo's Box Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                // custom presets from this mod\t\n                // all created by Slarmoo\n                { name: \"radio fm\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1189.21, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 74.33, \"linearGain\": 0.3536 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1189.21, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 74.33, \"linearGain\": 0.3536 }], \"effects\": [\"panning\", \"detune\", \"vibrato\", \"bitcrusher\", \"reverb\"], \"detuneCents\": 0, \"vibrato\": \"none\", \"vibratoDepth\": 0, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"bitcrusherOctave\": 6.5, \"bitcrusherQuantization\": 43, \"pan\": 0, \"panDelay\": 10, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": 6, \"algorithm\": \"1\u20032\u20033\u20034\", \"feedbackType\": \"1\u27F2\u20032\u27F2\", \"feedbackAmplitude\": 4, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 13, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"0.12\u00D7\", \"amplitude\": 7, \"waveform\": \"trapezoid\", \"pulseWidth\": 5 }, { \"frequency\": \"0.5\u00D7\", \"amplitude\": 10, \"waveform\": \"triangle\", \"pulseWidth\": 5 }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 5, \"waveform\": \"triangle\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [], \"isDrum\": false } },\n                { name: \"anguished underworld\", generalMidi: false, settings: { \"type\": \"FM6op\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.5 }], \"effects\": [\"panning\", \"note filter\", \"distortion\", \"bitcrusher\", \"reverb\"], \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 2 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 2 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.5 }], \"distortion\": 43, \"aliases\": false, \"bitcrusherOctave\": 4.5, \"bitcrusherQuantization\": 43, \"pan\": 0, \"panDelay\": 10, \"reverb\": 0, \"fadeInSeconds\": 0.075, \"fadeOutTicks\": 6, \"algorithm\": \"1\u20032\u21904\u20033\u2190(5\u20036)\", \"feedbackType\": \"1\u21925\u20022\u21926 3\u21924\", \"feedbackAmplitude\": 4, \"operators\": [{ \"frequency\": \"0.25\u00D7\", \"amplitude\": 14, \"waveform\": \"triangle\", \"pulseWidth\": 5 }, { \"frequency\": \"0.5\u00D7\", \"amplitude\": 13, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 12, \"waveform\": \"trapezoid\", \"pulseWidth\": 5 }, { \"frequency\": \"8\u00D7\", \"amplitude\": 5, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2\u00D7\", \"amplitude\": 10, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"0.75\u00D7\", \"amplitude\": 3, \"waveform\": \"ramp\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"punch\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"decay -1\", \"index\": 5 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"wibble 3\" }], \"isDrum\": false } },\n                { name: \"faint sorrow\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4240.89, \"linearGain\": 2 }], \"eqFilterType\": true, \"eqSimpleCut\": 8, \"eqSimplePeak\": 4, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters1\": [], \"effects\": [\"panning\", \"detune\", \"vibrato\", \"echo\", \"reverb\"], \"detuneCents\": 22, \"vibrato\": \"light\", \"vibratoDepth\": 0.15, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"pan\": 0, \"panDelay\": 10, \"echoSustain\": 100, \"echoDelayBeats\": 0.667, \"reverb\": 87, \"fadeInSeconds\": 0.075, \"fadeOutTicks\": 48, \"algorithm\": \"1\u20032\u20033\u20034\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [], \"isDrum\": false } },\n                { name: \"bright sorrow fm\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [], \"effects\": [\"panning\", \"chord type\", \"note filter\", \"echo\", \"reverb\"], \"chord\": \"strum\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2000, \"linearGain\": 2.8284 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2000, \"linearGain\": 2.8284 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1414.21, \"linearGain\": 1.4142 }], \"pan\": 0, \"panDelay\": 10, \"echoSustain\": 71, \"echoDelayBeats\": 1.333, \"reverb\": 61, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"algorithm\": \"(1\u20022\u20023)\u21904\", \"feedbackType\": \"1\u27F2\u20032\u27F2\u20033\u27F2\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 13, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"5\u00D7\", \"amplitude\": 10, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"5\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"2\u00D7\", \"amplitude\": 7, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [], \"isDrum\": false } },\n                { name: \"wet sorrow fm\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.7071 }], \"eqFilterType\": true, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters1\": [], \"effects\": [\"panning\", \"vibrato\", \"reverb\"], \"vibrato\": \"light\", \"vibratoDepth\": 0.15, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"pan\": 0, \"panDelay\": 10, \"reverb\": 23, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 4, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 3, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 2, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"decay 3\", \"index\": 2 }], \"isDrum\": false } },\n                { name: \"scream fm\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 2 }, { \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 0.125 }, { \"type\": \"peak\", \"cutoffHz\": 353.55, \"linearGain\": 0.7071 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 2 }, { \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 0.125 }, { \"type\": \"peak\", \"cutoffHz\": 353.55, \"linearGain\": 0.7071 }], \"effects\": [\"panning\", \"detune\", \"note filter\", \"distortion\", \"reverb\"], \"detuneCents\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.125 }, { \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 11.3137 }], \"noteSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.125 }, { \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 11.3137 }], \"distortion\": 0, \"aliases\": false, \"pan\": 0, \"panDelay\": 10, \"reverb\": 87, \"fadeInSeconds\": 0.135, \"fadeOutTicks\": -3, \"algorithm\": \"(1\u20022\u20023)\u21904\", \"feedbackType\": \"1\u27F2 2\u27F2 3\u27F2 4\u27F2\", \"feedbackAmplitude\": 11, \"operators\": [{ \"frequency\": \"4\u00D7\", \"amplitude\": 13, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 10, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"2\u00D7\", \"amplitude\": 3, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"7\u00D7\", \"amplitude\": 5, \"waveform\": \"triangle\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"detune\", \"envelope\": \"swell 1\" }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"tremolo4\" }], \"isDrum\": false } },\n                { name: \"anguished radio fm pad\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 9513.66, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 353.55, \"linearGain\": 0.0884 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 62.5, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 9513.66, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 353.55, \"linearGain\": 0.0884 }], \"eqSubFilters4\": [], \"effects\": [\"panning\", \"detune\", \"note filter\", \"bitcrusher\", \"chorus\", \"echo\", \"reverb\"], \"detuneCents\": -16, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [], \"noteSubFilters0\": [], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 11313.71, \"linearGain\": 11.3137 }], \"noteSubFilters2\": [{ \"type\": \"low-pass\", \"cutoffHz\": 105.11, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 11313.71, \"linearGain\": 11.3137 }], \"noteSubFilters4\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 11313.71, \"linearGain\": 11.3137 }], \"bitcrusherOctave\": 5.5, \"bitcrusherQuantization\": 43, \"pan\": 0, \"panDelay\": 10, \"chorus\": 29, \"echoSustain\": 43, \"echoDelayBeats\": 1, \"reverb\": 58, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"algorithm\": \"1\u21903\u20032\u21904\", \"feedbackType\": \"1\u21923\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2\u00D7\", \"amplitude\": 7, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [], \"isDrum\": false } },\n                { name: \"juicy kick\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 11.3137 }, { \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 0.0884 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 11.3137 }, { \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 0.0884 }], \"effects\": [\"panning\"], \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": -6, \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"20\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"operatorFrequency\", \"envelope\": \"twang 1\", \"index\": 0 }, { \"target\": \"noteVolume\", \"envelope\": \"twang 2\" }], \"isDrum\": false } },\n                { name: \"good vibes supersaw\", generalMidi: false, settings: { \"type\": \"supersaw\", \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 6, \"discreteEnvelope\": false, \"pitchEnvelopeStart\": 37, \"pitchEnvelopeEnd\": 96, \"pitchEnvelopeInverse\": true, \"eqSubFilters0\": [], \"effects\": [\"panning\", \"transition type\", \"detune\", \"chorus\", \"reverb\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"detuneCents\": 30, \"pan\": 0, \"panDelay\": 10, \"chorus\": 14, \"reverb\": 23, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": 12, \"pulseWidth\": 26, \"decimalOffset\": 0, \"dynamism\": 33, \"spread\": 33, \"shape\": 17, \"envelopes\": [{ \"target\": \"supersawShape\", \"envelope\": \"pitch\" }, { \"target\": \"detune\", \"envelope\": \"tremolo2\" }], \"isDrum\": false } },\n                { name: \"ethereal\", generalMidi: false, isNoise: false, settings: { \"type\": \"spectrum\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 4000, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 6727.17, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 88.39, \"linearGain\": 1.4142 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 4, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"peak\", \"cutoffHz\": 4000, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 6727.17, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 88.39, \"linearGain\": 1.4142 }], \"eqSubFilters1\": [], \"effects\": [\"panning\", \"transition type\", \"chord type\", \"pitch shift\", \"detune\", \"vibrato\", \"note filter\", \"bitcrusher\", \"chorus\", \"reverb\"], \"transition\": \"continue\", \"clicklessTransition\": false, \"chord\": \"simultaneous\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"pitchShiftSemitones\": 12, \"detuneCents\": 36, \"vibrato\": \"custom\", \"vibratoDepth\": 0.12, \"vibratoDelay\": 36, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 0.0884 }, { \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 0.7071 }], \"noteSubFilters0\": [{ \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 0.0884 }, { \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 0.7071 }], \"bitcrusherOctave\": 4.5, \"bitcrusherQuantization\": 43, \"pan\": 0, \"panDelay\": 10, \"chorus\": 71, \"reverb\": 100, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"spectrum\": [43, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 57, 0, 0, 57, 0, 43, 0, 43, 0, 0, 29, 0, 29, 0, 14, 14, 14, 0, 0], \"unison\": \"none\", \"pitchEnvelopeStart0\": 0, \"pitchEnvelopeEnd0\": 96, \"envelopeInverse0\": false, \"pitchEnvelopeStart1\": 0, \"pitchEnvelopeEnd1\": 96, \"envelopeInverse1\": false, \"pitchEnvelopeStart2\": 0, \"pitchEnvelopeEnd2\": 96, \"envelopeInverse2\": false, \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"note size\" }, { \"target\": \"detune\", \"envelope\": \"tremolo3\" }, { \"target\": \"bitcrusherQuantization\", \"envelope\": \"note size\" }], \"isDrum\": false } },\n                { name: \"walrus wuh\", generalMidi: false, settings: { \"type\": \"supersaw\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }, { \"type\": \"high-pass\", \"cutoffHz\": 353.55, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 4756.83, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 3363.59, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 74.33, \"linearGain\": 2.8284 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"pitchEnvelopeInverse\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }, { \"type\": \"high-pass\", \"cutoffHz\": 353.55, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 4756.83, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 3363.59, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 74.33, \"linearGain\": 2.8284 }], \"effects\": [\"panning\", \"note filter\", \"bitcrusher\", \"chorus\", \"reverb\"], \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 0.125 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 0.125 }], \"bitcrusherOctave\": 4, \"bitcrusherQuantization\": 71, \"pan\": 0, \"panDelay\": 10, \"chorus\": 86, \"reverb\": 32, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": 48, \"pulseWidth\": 50, \"decimalOffset\": 0, \"dynamism\": 100, \"spread\": 50, \"shape\": 0, \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"punch\" }, { \"target\": \"bitcrusherQuantization\", \"envelope\": \"decay 3\" }], \"isDrum\": false } },\n                { name: \"saturnic\", generalMidi: false, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4240.89, \"linearGain\": 2 }], \"eqFilterType\": true, \"eqSimpleCut\": 8, \"eqSimplePeak\": 4, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters1\": [], \"effects\": [\"panning\", \"vibrato\", \"chorus\", \"echo\", \"reverb\"], \"vibrato\": \"light\", \"vibratoDepth\": 0.15, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"pan\": 0, \"panDelay\": 10, \"chorus\": 100, \"echoSustain\": 71, \"echoDelayBeats\": 0.5, \"reverb\": 45, \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 15, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [], \"isDrum\": false } },\n                { name: \"glassy harmonics\", generalMidi: false, settings: { \"type\": \"harmonics\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1000, \"linearGain\": 11.3137 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1000, \"linearGain\": 11.3137 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.5 }], \"effects\": [\"panning\", \"detune\", \"note filter\", \"chorus\", \"reverb\"], \"detuneCents\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [], \"noteSubFilters0\": [], \"pan\": 0, \"panDelay\": 10, \"chorus\": 14, \"reverb\": 29, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"harmonics\": [100, 0, 43, 29, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 14, 29, 14, 0, 14, 0, 0, 0, 0, 100, 0, 0, 14, 0], \"unison\": \"none\", \"envelopes\": [], \"isDrum\": false } },\n                { name: \"plucked\", generalMidi: false, settings: { \"type\": \"Picked String\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.0884 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.0884 }], \"effects\": [\"panning\", \"transition type\", \"echo\", \"reverb\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"pan\": 0, \"panDelay\": 10, \"echoSustain\": 100, \"echoDelayBeats\": 1.333, \"reverb\": 26, \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"harmonics\": [100, 86, 57, 0, 0, 57, 57, 57, 86, 57, 57, 43, 43, 43, 29, 29, 14, 14, 29, 14, 14, 14, 29, 100, 57, 43, 14, 14], \"unison\": \"none\", \"stringSustain\": 14, \"envelopes\": [], \"isDrum\": false } },\n                //1.1.1 noise presets\n                { name: \"spectrum wind\", generalMidi: false, isNoise: true, settings: { \"type\": \"spectrum\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.7071 }], \"eqFilterType\": true, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters1\": [], \"effects\": [\"panning\", \"note filter\", \"reverb\"], \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 1.4142 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 1.4142 }], \"pan\": 0, \"panDelay\": 10, \"reverb\": 87, \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"spectrum\": [29, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 14, 57, 14, 0, 57, 57, 0, 0, 57, 0, 71, 14, 29, 100, 71, 0, 100, 14, 86], \"unison\": \"none\", \"envelopes\": [], \"isDrum\": true } },\n                { name: \"hi-hat\", generalMidi: false, isNoise: true, settings: { \"type\": \"noise\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.1768 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.1768 }], \"eqSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.1768 }], \"eqSubFilters2\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.1768 }], \"eqSubFilters3\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.1768 }, { \"type\": \"high-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.1768 }], \"effects\": [\"panning\"], \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"wave\": \"white\", \"unison\": \"none\", \"envelopes\": [], \"isDrum\": true } },\n                //1.2 presets\n                { name: \"jungle bass\", generalMidi: false, isNoise: false, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 148.65, \"linearGain\": 0.0884 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 148.65, \"linearGain\": 0.0884 }], \"effects\": [\"panning\", \"vibrato\", \"note filter\", \"chorus\", \"reverb\"], \"vibrato\": \"none\", \"vibratoDepth\": 0, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 297.3, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 74.33, \"linearGain\": 0.0884 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 297.3, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 74.33, \"linearGain\": 0.0884 }], \"pan\": 0, \"panDelay\": 10, \"chorus\": 14, \"reverb\": 3, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"algorithm\": \"1\u21903\u20032\u21904\", \"feedbackType\": \"1\u21942 3\u21944\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 13, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"2\u00D7\", \"amplitude\": 5, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"8\u00D7\", \"amplitude\": 11, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"pitchEnvelopeStart0\": 0, \"pitchEnvelopeEnd0\": 96, \"envelopeInverse0\": false, \"pitchEnvelopeStart1\": 0, \"pitchEnvelopeEnd1\": 96, \"envelopeInverse1\": false, \"pitchEnvelopeStart2\": 12, \"pitchEnvelopeEnd2\": 28, \"envelopeInverse2\": false, \"envelopes\": [{ \"target\": \"operatorFrequency\", \"envelope\": \"swell 3\", \"index\": 0 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 3\", \"index\": 1 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"pitch\", \"index\": 0 }], \"isDrum\": false } },\n                { name: \"beach tide\", generalMidi: false, isNoise: false, settings: { \"type\": \"harmonics\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.3536 }, { \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.1768 }, { \"type\": \"peak\", \"cutoffHz\": 8000, \"linearGain\": 0.0884 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.3536 }, { \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.1768 }, { \"type\": \"peak\", \"cutoffHz\": 8000, \"linearGain\": 0.0884 }], \"effects\": [\"panning\", \"transition type\", \"chord type\", \"note filter\", \"chorus\", \"reverb\"], \"transition\": \"continue\", \"clicklessTransition\": false, \"chord\": \"simultaneous\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 0.1768 }], \"noteSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 0.1768 }], \"pan\": 0, \"panDelay\": 10, \"chorus\": 14, \"reverb\": 32, \"fadeInSeconds\": 0.0938, \"fadeOutTicks\": 72, \"harmonics\": [86, 86, 71, 57, 57, 43, 43, 43, 29, 29, 14, 14, 14, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"unison\": \"none\", \"pitchEnvelopeStart0\": 0, \"pitchEnvelopeEnd0\": 96, \"envelopeInverse0\": false, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"pitch\" }], \"isDrum\": false } },\n                { name: \"starlight\", generalMidi: false, isNoise: false, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.0884 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.0884 }], \"effects\": [\"panning\", \"transition type\", \"vibrato\", \"bitcrusher\", \"echo\", \"reverb\"], \"transition\": \"continue\", \"clicklessTransition\": false, \"vibrato\": \"light\", \"vibratoDepth\": 0.15, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"bitcrusherOctave\": 5.5, \"bitcrusherQuantization\": 29, \"pan\": 0, \"panDelay\": 10, \"echoSustain\": 29, \"echoDelayBeats\": 1, \"reverb\": 13, \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 6, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [], \"isDrum\": false } },\n                { name: \"distant monument\", generalMidi: false, isNoise: false, settings: { \"type\": \"chip\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 11313.71, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 500, \"linearGain\": 0.125 }, { \"type\": \"peak\", \"cutoffHz\": 210.22, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 5.6569 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 11313.71, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 500, \"linearGain\": 0.125 }, { \"type\": \"peak\", \"cutoffHz\": 210.22, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 5.6569 }], \"effects\": [\"panning\", \"transition type\", \"chord type\", \"detune\", \"bitcrusher\", \"chorus\", \"echo\", \"reverb\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"chord\": \"strum\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"detuneCents\": 24, \"bitcrusherOctave\": 2.5, \"bitcrusherQuantization\": 14, \"pan\": 0, \"panDelay\": 10, \"chorus\": 86, \"echoSustain\": 71, \"echoDelayBeats\": 1, \"reverb\": 35, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 12, \"wave\": \"modbox pnryshk a (u5)\", \"unison\": \"detune\", \"isUsingAdvancedLoopControls\": false, \"chipWaveLoopStart\": 0, \"chipWaveLoopEnd\": 11, \"chipWaveLoopMode\": 0, \"chipWavePlayBackwards\": false, \"chipWaveStartOffset\": 0, \"pitchEnvelopeStart0\": 0, \"pitchEnvelopeEnd0\": 96, \"envelopeInverse0\": false, \"pitchEnvelopeStart1\": 0, \"pitchEnvelopeEnd1\": 96, \"envelopeInverse1\": false, \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"punch\" }, { \"target\": \"noteVolume\", \"envelope\": \"twang 1\" }], \"isDrum\": false } },\n                { name: \"mercurial\", generalMidi: false, isNoise: false, settings: { \"type\": \"FM6op\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 88.39, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.1768 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 88.39, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.1768 }], \"eqSubFilters1\": [], \"effects\": [\"panning\", \"distortion\", \"chorus\"], \"distortion\": 43, \"aliases\": false, \"pan\": 0, \"panDelay\": 10, \"chorus\": 43, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"Custom\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 8, \"customAlgorithm\": { \"mods\": [[3], [5], [4], [], [6], []], \"carrierCount\": 2 }, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"0.5\u00D7\", \"amplitude\": 10, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 5, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 2, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"operatorFrequency\", \"envelope\": \"linear\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 2, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 3 }, { \"target\": \"distortion\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 20, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n                { name: \"air hiss\", generalMidi: false, isNoise: true, settings: { \"type\": \"spectrum\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }], \"eqFilterType\": true, \"eqSimpleCut\": 7, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters1\": [], \"effects\": [\"panning\", \"note filter\", \"distortion\", \"reverb\"], \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.25 }, { \"type\": \"high-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 0.3536 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.25 }, { \"type\": \"high-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 0.3536 }], \"distortion\": 71, \"aliases\": false, \"pan\": 0, \"panDelay\": 10, \"reverb\": 6, \"fadeInSeconds\": 0, \"fadeOutTicks\": -24, \"spectrum\": [57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 57, 71, 86, 100, 100, 100, 100, 86, 71, 71, 43], \"unison\": \"none\", \"envelopes\": [], \"isDrum\": true } },\n                //1.3 presets\n                { name: \"spectral phaser\", generalMidi: false, settings: { \"type\": \"spectrum\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 74.33, \"linearGain\": 0.25 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 10, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.3536 }], \"effects\": [\"panning\", \"note filter\", \"distortion\", \"bitcrusher\", \"chorus\", \"echo\", \"reverb\"], \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 9513.66, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 1414.21, \"linearGain\": 0.125 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 353.55, \"linearGain\": 0.1768 }, { \"type\": \"peak\", \"cutoffHz\": 148.65, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 88.39, \"linearGain\": 0.1768 }], \"noteSubFilters0\": [{ \"type\": \"peak\", \"cutoffHz\": 9513.66, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 1414.21, \"linearGain\": 0.125 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 353.55, \"linearGain\": 0.1768 }, { \"type\": \"peak\", \"cutoffHz\": 148.65, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 88.39, \"linearGain\": 0.1768 }], \"distortion\": 14, \"aliases\": false, \"bitcrusherOctave\": 6, \"bitcrusherQuantization\": 14, \"pan\": 0, \"panDelay\": 10, \"chorus\": 100, \"echoSustain\": 86, \"echoDelayBeats\": 1, \"reverb\": 32, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"spectrum\": [86, 0, 0, 0, 57, 0, 0, 71, 0, 0, 0, 86, 0, 0, 57, 0, 43, 0, 43, 0, 0, 43, 0, 29, 0, 29, 14, 14, 29, 14], \"unison\": \"piano\", \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0.07, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 0 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0.06, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 1 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0.05, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 2 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0.04, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 3 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0.09, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 4 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0.08, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 5 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0.1, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 6 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0.03, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 7 }, { \"target\": \"distortion\", \"envelope\": \"none\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 0.3 }], \"isDrum\": false } },\n                { name: \"shaker\", generalMidi: false, isNoise: true, settings: { \"type\": \"noise\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 4000, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 4756.83, \"linearGain\": 0.0884 }, { \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 8 }, { \"type\": \"peak\", \"cutoffHz\": 2378.41, \"linearGain\": 0.25 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 6, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 4000, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 4756.83, \"linearGain\": 0.0884 }, { \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 8 }, { \"type\": \"peak\", \"cutoffHz\": 2378.41, \"linearGain\": 0.25 }], \"effects\": [\"panning\", \"transition type\", \"detune\", \"distortion\", \"bitcrusher\", \"chorus\", \"echo\", \"reverb\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"detuneCents\": 30, \"distortion\": 43, \"aliases\": false, \"bitcrusherOctave\": 2.5, \"bitcrusherQuantization\": 43, \"pan\": 0, \"panDelay\": 10, \"chorus\": 43, \"echoSustain\": 29, \"echoDelayBeats\": 1, \"reverb\": 23, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": 96, \"wave\": \"deep\", \"unison\": \"none\", \"envelopes\": [{ \"target\": \"detune\", \"envelope\": \"tremolo2\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 2, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"bitcrusherQuantization\", \"envelope\": \"note size\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"noteVolume\", \"envelope\": \"note size\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"noteVolume\", \"envelope\": \"flare\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 12, \"inverse\": false, \"perEnvelopeSpeed\": 64, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": true } },\n                { name: \"distant sorrow\", generalMidi: false, settings: { \"type\": \"harmonics\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 707.11, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 707.11, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 0.5 }], \"effects\": [\"panning\", \"transition type\", \"detune\", \"vibrato\", \"note filter\", \"echo\", \"reverb\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"detuneCents\": 0, \"vibrato\": \"custom\", \"vibratoDepth\": 0.2, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.25 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.25 }], \"pan\": 0, \"panDelay\": 10, \"echoSustain\": 100, \"echoDelayBeats\": 1, \"reverb\": 74, \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"harmonics\": [86, 71, 57, 43, 43, 29, 57, 0, 14, 0, 29, 29, 29, 29, 29, 43, 43, 43, 43, 43, 57, 57, 57, 0, 57, 57, 0, 0], \"unison\": \"none\", \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"fall\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 10, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 2.5, \"perEnvelopeLowerBound\": 0.5, \"perEnvelopeUpperBound\": 2 }], \"isDrum\": false } },\n                { name: \"metallic kick\", generalMidi: false, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 28, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.5 }], \"effects\": [\"panning\"], \"pan\": 0, \"panDelay\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"1\u21922\u21923\u21924\", \"feedbackAmplitude\": 15, \"operators\": [{ \"frequency\": \"8\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"256x\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"128x\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"256x\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"operatorFrequency\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 16, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 0 }, { \"target\": \"noteVolume\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 3.5, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 256, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 256, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 256, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 3 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 256, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 2 }], \"isDrum\": false } },\n                //1.4 presets\n                { name: \"chimes\", generalMidi: false, settings: { \"type\": \"Picked String\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 8000, \"linearGain\": 2.8284 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 8000, \"linearGain\": 2.8284 }], \"effects\": [\"panning\", \"chord type\", \"detune\", \"note filter\", \"bitcrusher\", \"chorus\", \"echo\", \"reverb\"], \"chord\": \"strum\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"detuneCents\": 24, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.5 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.5 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 1 }], \"bitcrusherOctave\": 4, \"bitcrusherQuantization\": 29, \"pan\": 0, \"panDelay\": 0, \"chorus\": 29, \"echoSustain\": 86, \"echoDelayBeats\": 0.667, \"reverb\": 84, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"harmonics\": [0, 100, 71, 71, 29, 0, 57, 86, 0, 0, 0, 0, 71, 29, 0, 0, 57, 0, 0, 86, 0, 0, 0, 100, 0, 100, 0, 57], \"unison\": \"none\", \"stringSustain\": 36, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 2, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"bitcrusherQuantization\", \"envelope\": \"swell\", \"inverse\": false, \"perEnvelopeSpeed\": 4.5, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"bitcrusherQuantization\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"noteVolume\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"stringSustain\", \"envelope\": \"random\", \"inverse\": false, \"perEnvelopeSpeed\": 16, \"perEnvelopeLowerBound\": 0.5, \"perEnvelopeUpperBound\": 1, \"steps\": 14, \"seed\": 2, \"waveform\": 0 }, { \"target\": \"detune\", \"envelope\": \"pitch\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96 }], \"isDrum\": false } },\n                { name: \"supersaw bass\", generalMidi: false, settings: { \"type\": \"supersaw\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.5 }], \"effects\": [\"panning\", \"note filter\", \"distortion\", \"chorus\", \"reverb\"], \"noteFilterType\": true, \"noteSimpleCut\": 9, \"noteSimplePeak\": 2, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 7231.23, \"linearGain\": 1 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 7231.23, \"linearGain\": 1 }], \"distortion\": 14, \"aliases\": false, \"pan\": 0, \"panDelay\": 10, \"chorus\": 29, \"reverb\": 0, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"pulseWidth\": 50, \"decimalOffset\": 0, \"dynamism\": 100, \"spread\": 67, \"shape\": 0, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell\", \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n                { name: \"ascension\", generalMidi: false, isNoise: false, settings: { \"type\": \"spectrum\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 0.25 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 0.25 }], \"eqSubFilters1\": [], \"effects\": [\"panning\", \"granular\", \"chorus\", \"reverb\"], \"granular\": 7, \"grainSize\": 44, \"grainAmounts\": 9, \"grainRange\": 37, \"pan\": 0, \"panDelay\": 10, \"chorus\": 71, \"reverb\": 19, \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"spectrum\": [43, 0, 0, 57, 0, 0, 14, 100, 29, 0, 0, 100, 29, 0, 100, 0, 57, 29, 86, 14, 14, 100, 14, 0, 14, 14, 0, 0, 43, 0], \"unison\": \"voiced\", \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"swell\", \"inverse\": false, \"perEnvelopeSpeed\": 0.7, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"panning\", \"envelope\": \"lfo\", \"inverse\": false, \"perEnvelopeSpeed\": 0.3, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false, \"waveform\": 2, \"steps\": 6 }], \"isDrum\": false } },    \n                { name: \"liminal\", generalMidi: false, isNoise: false, settings: { \"type\": \"supersaw\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 840.9, \"linearGain\": 0.25 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 840.9, \"linearGain\": 0.25 }], \"effects\": [\"panning\", \"detune\", \"vibrato\", \"note filter\", \"granular\", \"distortion\", \"bitcrusher\", \"chorus\", \"reverb\"], \"detuneCents\": 8, \"vibrato\": \"custom\", \"vibratoDepth\": 0.48, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": true, \"noteSimpleCut\": 6, \"noteSimplePeak\": 2, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2196.8, \"linearGain\": 1 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2196.8, \"linearGain\": 1 }], \"granular\": 6, \"grainSize\": 49, \"grainAmounts\": 10, \"grainRange\": 40, \"distortion\": 57, \"aliases\": false, \"bitcrusherOctave\": 5, \"bitcrusherQuantization\": 0, \"pan\": 38, \"panDelay\": 10, \"chorus\": 29, \"reverb\": 48, \"fadeInSeconds\": 0, \"fadeOutTicks\": 72, \"pulseWidth\": 30, \"decimalOffset\": 0, \"dynamism\": 17, \"spread\": 83, \"shape\": 67, \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 17, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"pulseWidth\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 1.3333, \"perEnvelopeLowerBound\": 0.1, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"distortion\", \"envelope\": \"random\", \"inverse\": false, \"perEnvelopeSpeed\": 1, \"perEnvelopeLowerBound\": 0.2, \"perEnvelopeUpperBound\": 1, \"discrete\": true, \"steps\": 8, \"seed\": 2, \"waveform\": 2 }, { \"target\": \"panning\", \"envelope\": \"lfo\", \"inverse\": false, \"perEnvelopeSpeed\": 0.3333, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false, \"waveform\": 2, \"steps\": 2 }, { \"target\": \"noteVolume\", \"envelope\": \"swell\", \"inverse\": false, \"perEnvelopeSpeed\": 18, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"noteVolume\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"granular\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }], \"isDrum\": false } },\n                \n            ])\n        },\n        {\n            name: \"Slarmoo's Box Chip Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                //Made by Slarmoo\n                { name: \"Slarmoo's Pulse\", midiProgram: 80, settings: { \"type\": \"PWM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [], \"effects\": [\"panning\", \"transition type\", \"chord type\", \"detune\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"chord\": \"arpeggio\", \"fastTwoNoteArp\": true, \"arpeggioSpeed\": 8, \"detuneCents\": 24, \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"pulseWidth\": 50, \"decimalOffset\": 0, \"unison\": \"none\", \"pitchEnvelopeStart0\": 0, \"pitchEnvelopeEnd0\": 96, \"envelopeInverse0\": false, \"envelopes\": [{ \"target\": \"detune\", \"envelope\": \"pitch\" }], \"isDrum\": false } },\n                { name: \"discovery square\", midiProgram: 80, settings: { \"type\": \"chip\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.3536 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.3536 }], \"effects\": [\"panning\", \"bitcrusher\"], \"bitcrusherOctave\": 5.5, \"bitcrusherQuantization\": 57, \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"wave\": \"square\", \"unison\": \"octave\", \"isUsingAdvancedLoopControls\": false, \"chipWaveLoopStart\": 0, \"chipWaveLoopEnd\": 2, \"chipWaveLoopMode\": 0, \"chipWavePlayBackwards\": false, \"chipWaveStartOffset\": 0, \"envelopes\": [], \"isDrum\": false } },\n                //I got this from masked eternity, though I believe that someone else made it\n                { name: \"VRC6 Sawtooth alt\", midiProgram: 81, settings: { \"type\": \"custom chip\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 0.5 }], \"effects\": [\"panning\", \"transition type\", \"chord type\", \"pitch shift\", \"detune\", \"vibrato\", \"distortion\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"chord\": \"arpeggio\", \"fastTwoNoteArp\": true, \"arpeggioSpeed\": 12, \"pitchShiftSemitones\": 12, \"detuneCents\": 0, \"vibrato\": \"none\", \"vibratoDepth\": 0, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"distortion\": 0, \"aliases\": false, \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"wave\": \"square\", \"unison\": \"none\", \"customChipWave\": { \"0\": -1, \"1\": -1, \"2\": -1, \"3\": -1, \"4\": -1, \"5\": -1, \"6\": -1, \"7\": -1, \"8\": -1, \"9\": -5, \"10\": -5, \"11\": -5, \"12\": -4, \"13\": -4, \"14\": -4, \"15\": -3, \"16\": -3, \"17\": -3, \"18\": -7, \"19\": -7, \"20\": -6, \"21\": -6, \"22\": -5, \"23\": -5, \"24\": -4, \"25\": -4, \"26\": -4, \"27\": -7, \"28\": -7, \"29\": -6, \"30\": -6, \"31\": -5, \"32\": -5, \"33\": -4, \"34\": -4, \"35\": -4, \"36\": -8, \"37\": -8, \"38\": -7, \"39\": -7, \"40\": -6, \"41\": -6, \"42\": -5, \"43\": -5, \"44\": -4, \"45\": -4, \"46\": 21, \"47\": 20, \"48\": 18, \"49\": 17, \"50\": 16, \"51\": 14, \"52\": 13, \"53\": 12, \"54\": 11, \"55\": 7, \"56\": 6, \"57\": 6, \"58\": 5, \"59\": 5, \"60\": 5, \"61\": 4, \"62\": 4, \"63\": 4 }, \"customChipWaveIntegral\": { \"0\": 0, \"1\": 0, \"2\": 0, \"3\": 0, \"4\": 0, \"5\": 0, \"6\": 0, \"7\": 0, \"8\": 0, \"9\": 0, \"10\": 0, \"11\": 0, \"12\": 0, \"13\": 0, \"14\": 0, \"15\": 0, \"16\": 0, \"17\": 0, \"18\": 0, \"19\": 0, \"20\": 0, \"21\": 0, \"22\": 0, \"23\": 0, \"24\": 0, \"25\": 0, \"26\": 0, \"27\": 0, \"28\": 0, \"29\": 0, \"30\": 0, \"31\": 0, \"32\": 0, \"33\": 0, \"34\": 0, \"35\": 0, \"36\": 0, \"37\": 0, \"38\": 0, \"39\": 0, \"40\": 0, \"41\": 0, \"42\": 0, \"43\": 0, \"44\": 0, \"45\": 0, \"46\": 0, \"47\": 0, \"48\": 0, \"49\": 0, \"50\": 0, \"51\": 0, \"52\": 0, \"53\": 0, \"54\": 0, \"55\": 0, \"56\": 0, \"57\": 0, \"58\": 0, \"59\": 0, \"60\": 0, \"61\": 0, \"62\": 0, \"63\": 0, \"64\": 0 }, \"envelopes\": [], \"isDrum\": false } },\n                //Made by Slarmoo\n                { name: \"pulse arps\", midiProgram: 80, settings: { \"type\": \"PWM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.125 }, { \"type\": \"high-pass\", \"cutoffHz\": 840.9, \"linearGain\": 2 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 7, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.125 }, { \"type\": \"high-pass\", \"cutoffHz\": 840.9, \"linearGain\": 2 }], \"effects\": [\"panning\", \"transition type\", \"chord type\", \"detune\", \"chorus\", \"echo\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"chord\": \"arpeggio\", \"fastTwoNoteArp\": true, \"arpeggioSpeed\": 8, \"detuneCents\": 64, \"pan\": 58, \"panDelay\": 10, \"chorus\": 43, \"echoSustain\": 71, \"echoDelayBeats\": 0.333, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"pulseWidth\": 50, \"decimalOffset\": 0, \"unison\": \"none\", \"envelopes\": [{ \"target\": \"detune\", \"envelope\": \"pitch\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96 }, { \"target\": \"pulseWidth\", \"envelope\": \"pitch\", \"inverse\": true, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"pitchEnvelopeStart\": 24, \"pitchEnvelopeEnd\": 83 }, { \"target\": \"panning\", \"envelope\": \"lfo\", \"inverse\": false, \"perEnvelopeSpeed\": 1, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"waveform\": 0, \"steps\": 2 }, { \"target\": \"noteVolume\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"chorus\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n            ])\n        },\n        {\n            name: \"Slarmoo's Box Instrumental Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                //Made by Slarmoo\n                { name: \"rusty flute\", midiProgram: 73, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 13454.34, \"linearGain\": 2.8284 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"peak\", \"cutoffHz\": 13454.34, \"linearGain\": 2.8284 }], \"effects\": [\"panning\", \"transition type\", \"detune\", \"distortion\", \"reverb\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"detuneCents\": -7, \"distortion\": 14, \"aliases\": false, \"pan\": 0, \"panDelay\": 10, \"reverb\": 100, \"fadeInSeconds\": 0, \"fadeOutTicks\": 96, \"algorithm\": \"1\u21902\u21903\u21904\", \"feedbackType\": \"3\u21924\", \"feedbackAmplitude\": 8, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"2\u00D7\", \"amplitude\": 5, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"2\u00D7\", \"amplitude\": 4, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"20\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [], \"isDrum\": false } },\n                { name: \"bitcrushed piano\", midiProgram: 4, settings: { \"type\": \"chip\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 2.8284 }, { \"type\": \"high-pass\", \"cutoffHz\": 74.33, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 2.8284 }, { \"type\": \"high-pass\", \"cutoffHz\": 74.33, \"linearGain\": 0.5 }], \"effects\": [\"panning\", \"transition type\", \"detune\", \"distortion\", \"bitcrusher\", \"reverb\"], \"transition\": \"continue\", \"clicklessTransition\": false, \"detuneCents\": 0, \"distortion\": 29, \"aliases\": true, \"bitcrusherOctave\": 4, \"bitcrusherQuantization\": 43, \"pan\": 0, \"panDelay\": 0, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"wave\": \"triangle\", \"unison\": \"none\", \"isUsingAdvancedLoopControls\": true, \"chipWaveLoopStart\": 0, \"chipWaveLoopEnd\": 32, \"chipWaveLoopMode\": 0, \"chipWavePlayBackwards\": false, \"chipWaveStartOffset\": 0, \"envelopes\": [{ \"target\": \"bitcrusherQuantization\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0.6, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"noteVolume\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }], \"isDrum\": false } },\n                { name: \"detuned piano\", midiProgram: 3, settings: { \"type\": \"Picked String\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 2.8284 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 2.8284 }], \"effects\": [\"panning\", \"transition type\", \"detune\", \"vibrato\", \"note filter\", \"bitcrusher\"], \"transition\": \"continue\", \"clicklessTransition\": false, \"detuneCents\": 44, \"vibrato\": \"custom\", \"vibratoDepth\": 0.04, \"vibratoDelay\": 13, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 1 }], \"noteSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 1 }], \"bitcrusherOctave\": 4, \"bitcrusherQuantization\": 14, \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"harmonics\": [86, 86, 71, 71, 57, 57, 43, 29, 14, 29, 29, 29, 29, 29, 29, 29, 29, 43, 43, 43, 43, 43, 29, 14, 14, 0, 0, 0], \"unison\": \"custom\", \"unisonVoices\": 2, \"unisonSpread\": 0.26, \"unisonOffset\": 0, \"unisonExpression\": 1, \"unisonSign\": 1, \"stringSustain\": 79, \"envelopes\": [{ \"target\": \"detune\", \"envelope\": \"random\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 1, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"steps\": 2, \"seed\": 49, \"waveform\": 1 }, { \"target\": \"noteVolume\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 1.6667, \"perEnvelopeLowerBound\": 0.4, \"perEnvelopeUpperBound\": 1, \"steps\": 2, \"seed\": 2, \"waveform\": 0 }, { \"target\": \"unison\", \"envelope\": \"random\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 1, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"steps\": 2, \"seed\": 20, \"waveform\": 1 }, { \"target\": \"noteFilterAllFreqs\", \"envelope\": \"pitch\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": true, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"steps\": 2, \"seed\": 2, \"waveform\": 0 }], \"isDrum\": false } },\n                { name: \"pan flute 2\", midiProgram: 75, isNoise: false, settings: { \"type\": \"spectrum\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 2 }, { \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.3536 }, { \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 2 }, { \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.3536 }, { \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.5 }], \"effects\": [\"panning\", \"transition type\", \"note filter\", \"bitcrusher\", \"reverb\"], \"transition\": \"continue\", \"clicklessTransition\": false, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.5 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.5 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.5 }], \"bitcrusherOctave\": 6, \"bitcrusherQuantization\": 57, \"pan\": 0, \"panDelay\": 10, \"reverb\": 16, \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -6, \"spectrum\": [100, 29, 14, 14, 57, 0, 0, 71, 0, 86, 57, 43, 57, 71, 14, 29, 14, 14, 14, 100, 71, 14, 14, 14, 14, 86, 43, 14, 0, 0], \"unison\": \"none\", \"pitchEnvelopeStart0\": 0, \"pitchEnvelopeEnd0\": 96, \"envelopeInverse0\": false, \"pitchEnvelopeStart1\": 0, \"pitchEnvelopeEnd1\": 96, \"envelopeInverse1\": false, \"pitchEnvelopeStart2\": 0, \"pitchEnvelopeEnd2\": 96, \"envelopeInverse2\": false, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"note size\" }, { \"target\": \"bitcrusherQuantization\", \"envelope\": \"note size\" }, { \"target\": \"noteVolume\", \"envelope\": \"note size\" }], \"isDrum\": false } },\n                { name: \"trumpet 2\", midiProgram: 56, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3049.17, \"linearGain\": 1.4142 }], \"eqFilterType\": true, \"eqSimpleCut\": 7, \"eqSimplePeak\": 3, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters1\": [], \"effects\": [\"panning\", \"detune\", \"vibrato\", \"note filter\", \"distortion\", \"chorus\", \"reverb\"], \"detuneCents\": -64, \"vibrato\": \"custom\", \"vibratoDepth\": 0.68, \"vibratoDelay\": 17, \"vibratoSpeed\": 12, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 3363.59, \"linearGain\": 0.1768 }, { \"type\": \"high-pass\", \"cutoffHz\": 1000, \"linearGain\": 0.1768 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 3363.59, \"linearGain\": 0.1768 }, { \"type\": \"high-pass\", \"cutoffHz\": 1000, \"linearGain\": 0.1768 }], \"distortion\": 29, \"aliases\": false, \"pan\": 0, \"panDelay\": 10, \"chorus\": 14, \"reverb\": 0, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1\u20032\u2190(3\u20024)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 9, \"operators\": [{ \"frequency\": \"0.75\u00D7\", \"amplitude\": 14, \"waveform\": \"pulse width\", \"pulseWidth\": 2 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 14, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 5, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"flare\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 8, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"swell\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"operatorFrequency\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 128, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 0 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"swell\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 2.5, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 2 }, { \"target\": \"noteVolume\", \"envelope\": \"note size\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"detune\", \"envelope\": \"note size\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": true, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n                { name: \"harp 2\", midiProgram: 46, settings: { \"type\": \"FM6op\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 2.8284 }, { \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 0.25 }, { \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 2.8284 }, { \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 0.25 }, { \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.5 }], \"eqSubFilters1\": [], \"effects\": [\"panning\", \"detune\", \"note filter\", \"echo\", \"reverb\"], \"detuneCents\": -23, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 105.11, \"linearGain\": 2.8284 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 105.11, \"linearGain\": 2.8284 }], \"pan\": 0, \"panDelay\": 10, \"echoSustain\": 29, \"echoDelayBeats\": 1.083, \"reverb\": 74, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1\u21904\u20032\u21905\u20033\u21906\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 10, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 5, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 10, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"4\u00D7\", \"amplitude\": 6, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"6\u00D7\", \"amplitude\": 12, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 2, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 4, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"operatorFrequency\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 8, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 1 }, { \"target\": \"detune\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 7, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"tremolo2\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 1, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 0 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 8, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 4 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": true, \"perEnvelopeSpeed\": 8, \"perEnvelopeLowerBound\": 0.4, \"perEnvelopeUpperBound\": 1, \"index\": 0 }, { \"target\": \"noteVolume\", \"envelope\": \"punch\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n                { name: \"electric guitar 1\", midiProgram: 30, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 1189.21, \"linearGain\": 2 }, { \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 1.4142 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 0.0884 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 1189.21, \"linearGain\": 2 }, { \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 1.4142 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 0.0884 }], \"effects\": [\"panning\", \"chord type\", \"vibrato\", \"note filter\", \"distortion\", \"reverb\"], \"chord\": \"monophonic\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"monoChordTone\": 0, \"vibrato\": \"delayed\", \"vibratoDepth\": 0.3, \"vibratoDelay\": 18.5, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1414.21, \"linearGain\": 4 }, { \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 1 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1414.21, \"linearGain\": 4 }, { \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 1 }], \"distortion\": 100, \"aliases\": false, \"pan\": 0, \"panDelay\": 0, \"reverb\": 6, \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"algorithm\": \"1\u20032\u20033\u20034\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"2\u00D7\", \"amplitude\": 0, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"4\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"0.25\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"punch\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"vibratoDepth\", \"envelope\": \"rise\", \"inverse\": false, \"perEnvelopeSpeed\": 9, \"perEnvelopeLowerBound\": 1, \"perEnvelopeUpperBound\": 2, \"discrete\": false }, { \"target\": \"noteVolume\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"distortion\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }], \"isDrum\": false } },\n                { name: \"electric guitar 2\", midiProgram: 30, settings: { \"type\": \"PWM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 5.6569 }, { \"type\": \"high-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 2 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 5.6569 }, { \"type\": \"high-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 2 }], \"effects\": [\"panning\", \"chord type\", \"vibrato\", \"note filter\", \"distortion\", \"bitcrusher\", \"chorus\", \"reverb\"], \"chord\": \"monophonic\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"monoChordTone\": 0, \"vibrato\": \"custom\", \"vibratoDepth\": 0.68, \"vibratoDelay\": 22, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1000, \"linearGain\": 2.8284 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1000, \"linearGain\": 2.8284 }], \"distortion\": 43, \"aliases\": false, \"bitcrusherOctave\": 6.5, \"bitcrusherQuantization\": 71, \"pan\": 0, \"panDelay\": 0, \"chorus\": 14, \"reverb\": 13, \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"pulseWidth\": 50, \"decimalOffset\": 0, \"unison\": \"none\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"rise\", \"inverse\": false, \"perEnvelopeSpeed\": 0.3333, \"perEnvelopeLowerBound\": 0.8, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"pulseWidth\", \"envelope\": \"twang\", \"inverse\": true, \"perEnvelopeSpeed\": 2.25, \"perEnvelopeLowerBound\": 0.5, \"perEnvelopeUpperBound\": 0.9, \"discrete\": false }, { \"target\": \"noteVolume\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"bitcrusherQuantization\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }], \"isDrum\": false } },\n                ])\n        },\n        {\n            name: \"Slarmoo's Box Novelty Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                //Made by Slarmoo\n                { name: \"bitcrushed artifacts\", generalMidi: false, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9656.85, \"linearGain\": 0.5 }], \"eqFilterType\": true, \"eqSimpleCut\": 9, \"eqSimplePeak\": 1, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters1\": [], \"effects\": [\"panning\", \"distortion\", \"bitcrusher\", \"echo\"], \"distortion\": 71, \"aliases\": false, \"bitcrusherOctave\": 2, \"bitcrusherQuantization\": 86, \"pan\": 0, \"panDelay\": 10, \"echoSustain\": 0, \"echoDelayBeats\": 1, \"fadeInSeconds\": 0, \"fadeOutTicks\": -6, \"harmonics\": [0, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 100, 43, 0, 0, 14, 86, 0, 14, 0, 0, 0, 0, 0, 86], \"unison\": \"none\", \"stringSustain\": 14, \"envelopes\": [], \"isDrum\": false } },\n                { name: \"whistle 2\", midiProgram: 78, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2110.37, \"linearGain\": 1.4142 }], \"eqFilterType\": true, \"eqSimpleCut\": 6, \"eqSimplePeak\": 3, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters1\": [], \"effects\": [\"panning\", \"transition type\", \"pitch shift\", \"note filter\", \"distortion\", \"echo\", \"reverb\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"pitchShiftSemitones\": 11, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1414.21, \"linearGain\": 2 }, { \"type\": \"high-pass\", \"cutoffHz\": 88.39, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 4 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1414.21, \"linearGain\": 2 }, { \"type\": \"high-pass\", \"cutoffHz\": 88.39, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 4 }], \"distortion\": 43, \"aliases\": false, \"pan\": 0, \"panDelay\": 10, \"echoSustain\": 57, \"echoDelayBeats\": 1.083, \"reverb\": 87, \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": -1, \"harmonics\": [57, 0, 0, 0, 0, 0, 0, 0, 0, 86, 57, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 57, 29, 0, 29, 100, 0], \"unison\": \"none\", \"envelopes\": [{ \"target\": \"pitchShift\", \"envelope\": \"decay 1\" }], \"isDrum\": false } },\n                { name: \"frog wuh\", generalMidi: false, settings: { \"type\": \"spectrum\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 6727.17, \"linearGain\": 8 }, { \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.125 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 6727.17, \"linearGain\": 8 }, { \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.125 }], \"eqSubFilters1\": [], \"effects\": [\"panning\", \"pitch shift\", \"note filter\"], \"pitchShiftSemitones\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1000, \"linearGain\": 1 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1000, \"linearGain\": 1 }], \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"spectrum\": [100, 29, 14, 29, 0, 14, 0, 71, 0, 43, 14, 71, 0, 0, 71, 14, 100, 0, 71, 0, 43, 86, 43, 0, 43, 0, 0, 43, 29, 29], \"envelopes\": [{ \"target\": \"pitchShift\", \"envelope\": \"twang 1\" }, { \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 1\" }], \"isDrum\": false } },\n                { name: \"stationary harmonics\", generalMidi: false, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 353.55, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 353.55, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.5 }], \"effects\": [\"panning\", \"transition type\", \"chord type\", \"vibrato\"], \"transition\": \"continue\", \"clicklessTransition\": false, \"chord\": \"simultaneous\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"vibrato\": \"shaky\", \"vibratoDepth\": 0.1, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 1, \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"harmonics\": [100, 0, 57, 29, 14, 57, 29, 29, 14, 14, 29, 43, 14, 14, 14, 0, 14, 29, 29, 14, 0, 0, 14, 0, 0, 29, 14, 14], \"unison\": \"stationary\", \"envelopes\": [], \"isDrum\": false } },\n                { name: \"dead souls\", generalMidi: false, settings: { \"type\": \"spectrum\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.1768 }, { \"type\": \"high-pass\", \"cutoffHz\": 353.55, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 1.4142 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": true, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.1768 }, { \"type\": \"high-pass\", \"cutoffHz\": 353.55, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 1.4142 }], \"effects\": [\"panning\", \"transition type\", \"chord type\", \"pitch shift\", \"detune\", \"distortion\", \"chorus\", \"reverb\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"chord\": \"arpeggio\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"pitchShiftSemitones\": 24, \"detuneCents\": -200, \"distortion\": 100, \"aliases\": false, \"pan\": 0, \"panDelay\": 10, \"chorus\": 14, \"reverb\": 35, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"spectrum\": [100, 71, 43, 43, 29, 29, 29, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 14, 14, 0, 0], \"unison\": \"none\", \"envelopes\": [{ \"target\": \"pitchShift\", \"envelope\": \"random\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 24, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1.2, \"steps\": 16, \"seed\": 37, \"waveform\": 0 }, { \"target\": \"noteVolume\", \"envelope\": \"note size\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"steps\": 2, \"seed\": 2, \"waveform\": 0 }, { \"target\": \"detune\", \"envelope\": \"note size\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": true, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"steps\": 2, \"seed\": 2, \"waveform\": 0 }, { \"target\": \"distortion\", \"envelope\": \"note size\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"steps\": 2, \"seed\": 2, \"waveform\": 0 }], \"isDrum\": false } },\n                { name: \"flutter\", generalMidi: false, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 707.11, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 6727.17, \"linearGain\": 2.8284 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 707.11, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 6727.17, \"linearGain\": 2.8284 }], \"effects\": [\"panning\", \"transition type\", \"chorus\", \"reverb\", \"ring mod\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"ringMod\": 100, \"ringModHz\": 100, \"ringModWaveformIndex\": 0, \"pan\": 0, \"panDelay\": 0, \"chorus\": 14, \"reverb\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"algorithm\": \"1\u21903\u20032\u21904\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 10, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"ringModulationHz\", \"envelope\": \"fall\", \"inverse\": false, \"perEnvelopeSpeed\": 1.5, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1.9 }, { \"target\": \"noteVolume\", \"envelope\": \"blip\", \"inverse\": false, \"perEnvelopeSpeed\": 0.25, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n                { name: \"vinyl\", generalMidi: false, settings: { \"type\": \"noise\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 1414.21, \"linearGain\": 0.3536 }, { \"type\": \"low-pass\", \"cutoffHz\": 1189.21, \"linearGain\": 0.25 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 1414.21, \"linearGain\": 0.3536 }, { \"type\": \"low-pass\", \"cutoffHz\": 1189.21, \"linearGain\": 0.25 }], \"effects\": [\"panning\", \"transition type\", \"note filter\", \"distortion\", \"bitcrusher\", \"chorus\", \"echo\", \"reverb\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 0.5 }, { \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 1 }], \"noteSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 0.5 }, { \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 1 }], \"distortion\": 14, \"aliases\": false, \"bitcrusherOctave\": 5.5, \"bitcrusherQuantization\": 14, \"pan\": 0, \"panDelay\": 10, \"chorus\": 29, \"echoSustain\": 14, \"echoDelayBeats\": 0.083, \"reverb\": 32, \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"wave\": \"crackling\", \"unison\": \"none\", \"envelopes\": [], \"isDrum\": false } },\n                // { name: \"glass\", generalMidi: false, isNoise: true, settings: { \"type\": \"spectrum\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 2000, \"linearGain\": 2.8284 }, { \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 2000, \"linearGain\": 2.8284 }, { \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1 }], \"effects\": [\"panning\", \"chord type\", \"note filter\", \"bitcrusher\", \"reverb\"], \"chord\": \"strum\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 2000, \"linearGain\": 0.5 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 2000, \"linearGain\": 0.5 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 1 }], \"bitcrusherOctave\": 3.5, \"bitcrusherQuantization\": 29, \"pan\": 0, \"panDelay\": 0, \"reverb\": 23, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"spectrum\": [100, 0, 0, 0, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"random\", \"inverse\": false, \"perEnvelopeSpeed\": 6.5, \"perEnvelopeLowerBound\": 0.8, \"perEnvelopeUpperBound\": 1, \"steps\": 2, \"seed\": 2, \"waveform\": 3 }, { \"target\": \"bitcrusherFrequency\", \"envelope\": \"random\", \"inverse\": false, \"perEnvelopeSpeed\": 1.5, \"perEnvelopeLowerBound\": 0.8, \"perEnvelopeUpperBound\": 1, \"steps\": 2, \"seed\": 1, \"waveform\": 3 }, { \"target\": \"noteVolume\", \"envelope\": \"random\", \"inverse\": false, \"perEnvelopeSpeed\": 4, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"steps\": 2, \"seed\": 6, \"waveform\": 3 }, { \"target\": \"noteVolume\", \"envelope\": \"random\", \"inverse\": false, \"perEnvelopeSpeed\": 4, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"steps\": 2, \"seed\": 10, \"waveform\": 3 }], \"isDrum\": true } },\n            ])\n        }\n    ]);\n\n    static valueToPreset(presetValue: number): Preset | null {\n        const categoryIndex: number = presetValue >> 6;\n        const presetIndex: number = presetValue & 0x3F;\n        return EditorConfig.presetCategories[categoryIndex]?.presets[presetIndex];\n    }\n\n    static midiProgramToPresetValue(program: number): number | null {\n        for (let categoryIndex: number = 0; categoryIndex < EditorConfig.presetCategories.length; categoryIndex++) {\n            const category: PresetCategory = EditorConfig.presetCategories[categoryIndex];\n            for (let presetIndex: number = 0; presetIndex < category.presets.length; presetIndex++) {\n                const preset: Preset = category.presets[presetIndex];\n                if (preset.generalMidi && preset.midiProgram == program) return (categoryIndex << 6) + presetIndex;\n            }\n        }\n        return null;\n    }\n\n    static nameToPresetValue(presetName: string): number | null {\n        for (let categoryIndex: number = 0; categoryIndex < EditorConfig.presetCategories.length; categoryIndex++) {\n            const category: PresetCategory = EditorConfig.presetCategories[categoryIndex];\n            for (let presetIndex: number = 0; presetIndex < category.presets.length; presetIndex++) {\n                const preset: Preset = category.presets[presetIndex];\n                if (preset.name == presetName) return (categoryIndex << 6) + presetIndex;\n            }\n        }\n        return null;\n    }\n\n    static instrumentToPreset(instrument: InstrumentType): Preset | null {\n        return EditorConfig.presetCategories[0].presets.dictionary?.[TypePresets?.[instrument]];\n    }\n}\n", "// Copyright (c) John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { Instrument } from \"./Instrument\";\nimport { Pattern } from \"./Pattern\";\n\nexport class Channel {\n    octave: number = 0;\n    readonly instruments: Instrument[] = [];\n    readonly patterns: Pattern[] = [];\n    readonly bars: number[] = [];\n    muted: boolean = false;\n    visible: boolean = true;\n    name: string = \"\";\n    color: number = 0;\n}\n", "/*\nThis file contains code to compute digital audio filter coefficients based on\nthe desired type, cutoff frequency, and other parameters. You can use these\ncoefficients to apply the filter to audio samples. It also contains code to\nanalyze these filters, which is useful for graphically displaying their effects.\n\nAll of the filters in this file are known as \"Infinite Impulse Response\" or IIR\nfilters, because older output samples contribute feedback to newer output\nsamples and thus contribute to all future samples, although typically filters\nare design to reduce the contribution of older samples over time.\n\nLow-pass filters aka high-cut filters preserve audio signals below the cutoff\nfrequency, and attenuate audio signals above the cutoff frequency. High-pass\nfilters aka low-cut filters are the reverse. All-pass filters do not affect the\nvolume of the signal at all but induce phase changes above the cutoff frequency.\nPeak/Notch filters maintain the volume on either side of the cutoff frequency,\nbut raise or lower the volume at that frequency. \n\nThe number of old samples used in the filter determines the \"order\" of the\nfilter. First-order filters generally have shallower slopes, and second-order\nfilters generally have steeper slopes and can be configured to \"resonate\",\nmeaning they have a louder peak at the cutoff frequency. This file contains\nfirst-order filters and second-order filters, meaning one or two older samples\nare involved, as well as the current input sample.\n\nThe class FilterCoefficients is defined lower in this file. You can use it to\nset up a first order filter like this:\n\n\tconst cutoffRadiansPerSample: number = 2 * Math.PI * cutoffHz / sampleRate;\n\tconst filter: FilterCoefficients = new FilterCoefficients();\n\tfilter.lowPass1stOrderButterworth(cutoffRadiansPerSample);\n\t// output sample coefficients are conventionally called a0, a1, etc. Note\n\t// that a[0] is typically normalized to 1.0 and need not be used directly.\n\tconst a: number[] = filter.a;\n\t// input sample coefficients are conventionally called b0, b1, etc\n\tconst b: number[] = filter.b;\n\t// filter input samples, x[0] is the most recent, x[1] is the previous one, etc.\n\tconst x: number[] = [0, 0, 0];\n\t// filter output samples, y[0] will be computed by the filter based on input\n\t// samples and older output samples.\n\tconst y: number[] = [0, 0, 0];\n\nThen to apply the first-order filter to samples inside a loop, using the current\ninput sample (x[0]) as well as previous input and output samples, do this:\n\n\t// Compute the next output sample y[0]:\n\ty[0] = b[0] * x[0] + b[1] * x[1] - a[1] * y[1];\n\t// Remember the input and output samples for next time:\n\tx[1] = x[0];\n\ty[1] = y[0];\n\n2nd order filters are similar, but have more parameters and require more old\nsamples:\n\n\t// Compute the next output sample y[0]:\n\ty[0] = b[0] * x[0] + b[1] * x[1] + b[2] * x[2] - a[1] * y[1] - a[2] * y[2];\n\t// Remember the input and output samples for next time:\n\tx[2] = x[1];\n\tx[1] = x[0];\n\ty[2] = y[1];\n\ty[1] = y[0];\n\nYou can compose multiple filters into a higher order filter, although doing so\nreduces the numerical stability of the filter:\n\n\tfilter3.combination(filter1, filter2);\n\t// filter3.order will equal: filter1.order + filter2.order\n\t// The number of coefficients in filter3.a and filter3.b will be: order + 1\n\nThis file also contains a class called FrequencyResponse. You can use it to\ndetermine how much gain or attenuation a filter would apply to sounds at a\nspecific input frequency, as well as the phase offset:\n\n\tconst inputRadians: number = 2 * Math.PI * cutoffHz / sampleRate;\n\tconst response: FrequencyResponse = new FrequencyResponse();\n\tresponse.analyze(filter, inputRadians);\n\tconst gainResponse = response.magnitude();\n\tconst phaseResponse = response.angle();\n\nThat's basically all you need to know to use this code, but I'll also explain\nhow the analysis works.\n\nA first-order digital IIR filter is ordinarily implemented in a form like this:\n\n\toutput = inputCoeff * input + prevInputCoeff * prevInput - prevOutputCoeff * prevOutput;\n\nIf we adopt standard naming conventions for audio filters, this same code would\ninstead look like:\n\n\t// x0 = current input, x1 = prevInput, y0 = current output, y1 = prevOutput\n\ty0 = b0*x0 + b1*x1 - a1*y1;\n\nLeaving behind the world of code for a moment and entering the world of algebra,\nwe can rewrite this equation by moving all the output terms to the left side,\nand we can add a coefficient to the y0 term called a0 (which is typically\nnormalized to 1.0, which is why I didn't bother including it until now):\n\n\ta0*y0 + a1*y1 = b0*x0 + b1*x1\n\nThis is known as the symmetrical form of the filter, and it will help us analyze\nthe impact of the filter on an input audio signal. Here's a lesson that helped\nme understand the symmetrical form:\nhttps://web.archive.org/web/20200626183458/http://123.physics.ucdavis.edu/week_5_files/filters/digital_filter.pdf\n\nThe end of that lesson introduces a concept called the \"delay operator\" which\nlooks like \"z^-1\", which (magically) turns a sample into the previous sample\nwhen you multiply them. For example:\n\n\tx0 * z^-1 = x1\n\nThe lesson doesn't explain how it actually works. Audio signals aren't always\npredictable, which means that you generally can't do math on a single sample to\ncompute what the previous sample was. However, some audio signals ARE\npredictable, such as pure sine waves. Fortunately, all audio signals can be\nbroken down into a sum of independent sine waves. We can pick one sine wave at a\ntime, and use it to analyze the filter's impact on waves at that frequency. In\npractice, this tells us what the filter will do to unpredictable input samples\nthat contain a partial sine wave at that frequency.\n\nTechnically, you can't just use a single sine wave sample to determine the\nprevious sine wave sample, because each possible value is passed going upwards\nand downwards once per period and the direction is ambigous. This is where we\nneed to move into the complex number domain, where the real and imaginary\ncomponents can provide enough information to compute the previous position on\nthe input signal. So now instead of talking about sine waves, we're talking\nabout waves where the imaginary component is a sine wave and the real component\nis a cosine wave at the same frequency. Together, they trace around a unit\ncircle in the complex domain, and each sample is just a consistent rotation\napplied to the previous sample. The \"delay operator\" described above, z^-1, is\nthis same rotation applied in reverse, and it can be computed as:\n\n\tz^-1 = cos(radiansPerSample) - i * sin(radiansPerSample)\n\nMath nerds may be interested to know that \"Euler's formula\" was used here, but\nexplaining what that means is probably beyond the scope of this documentation\naside from noting that a complex number on the unit circle represents a 2D\nrotation that you can apply via multiplication.\n\nNow we can rewrite the symmetrical form using the delay operator and algebra:\n\n\ta0*y0 + a1*y0*z^-1 = b0*x0 + b1*x0*z^-1\n\ty0 * (a0 + a1*z^-1) = x0 * (b0 + b1*z^-1)\n\ty0 = x0 * (b0 + b1*z^-1) / (a0 + a1*z^-1)\n\ty0 / x0 = (b0 + b1*z^-1) / (a0 + a1*z^-1)\n\nThat last equation expresses the relationship between the input and output\nsignals (y0/x0) in terms of the filter coefficients and delay operator. At this\npoint, the specific values of the input and output samples don't even matter!\nThis is called the \"transfer function\", and it's conventionally named \"H(z)\":\n\n\tH(z) = (b0 + b1*z^-1) / (a0 + a1*z^-1)\n\nIf you plug in actual filter coefficients and express the delay operators as\ncomplex numbers with the appropriate trigonometry functions, the transfer\nfunction can be computed and produces a complex number that represents the\nrelationship between the input and output signals, whose magnitude represents\nthe volume gain (or attenuation) of signals at that frequency, and whose angle\nrepresents how much phase shift is applied by the filter to signals at that\nfrequency.\n\n(Note that in order to compute the transfer function, you'll need to do\nsomething about the complex number in the denominator. It turns out you can turn\nthe denominator into a real number by multiplying both the numerator and\ndenominator by the complex conjugate of the denominator, which is just the\ndenominator with the imaginary component negated.)\n\nFinally, I'll list some of the links that helped me understand filters and\nprovided some of the algorithms I that use here.\n\nHere's where I found accurate 2nd order low-pass, high-pass, and high-shelf\ndigital filters:\nhttps://web.archive.org/web/20120531011328/http://www.musicdsp.org/files/Audio-EQ-Cookbook.txt\n\nThis page is how I found a link to the cookbook article above. It claims these\nfilters are Butterworth filters:\nhttp://web.archive.org/web/20191213120120/https://crypto.stanford.edu/~blynn/sound/analog.html\n\nI found the first-order digital Butterworth filter coefficients at:\nhttps://www.researchgate.net/publication/338022014_Digital_Implementation_of_Butterworth_First-Order_Filter_Type_IIR\n\nThis meta-paper helped me understand how to make 2nd order peak/notch filters:\nhttps://web.archive.org/web/20170706085655/https://www.thesounddesign.com/MIO/EQ-Coefficients.pdf\n\nBeepBox originally used simpler low-pass filters that I adapted from SFXR:\nhttps://www.drpetter.se/project_sfxr.html\nFor low cutoff frequencies, the simpler filters and the Butterworth filters are\nnearly identical, but when closer to the nyquist frequency the simpler filters\ncreate extra resonance.\n*/\n\nexport class FilterCoefficients {\n\treadonly a: number[] = [1.0]; // output coefficients (negated, keep a[0]=1)\n\treadonly b: number[] = [1.0]; // input coefficients\n\torder: number = 0;\n\t\n\tlinearGain0thOrder(linearGain: number): void {\n\t\t//a[0] = 1.0; // a0 should always be normalized to 1.0, no need to assign it directly.\n\t\tthis.b[0] = linearGain;\n\t\tthis.order = 0;\n\t}\n\t\n\tlowPass1stOrderButterworth(cornerRadiansPerSample: number): void {\n\t\t// First-order Butterworth low-pass filter according to:\n\t\t// https://www.researchgate.net/publication/338022014_Digital_Implementation_of_Butterworth_First-Order_Filter_Type_IIR\n\t\t// A butterworth filter is one where the amplitude response is equal to:\n\t\t// 1 / \u221A(1 + (freq / cutoffFreq)^(2 * order))\n\t\tconst g: number = 1.0 / Math.tan(cornerRadiansPerSample * 0.5);\n\t\tconst a0: number = 1.0 + g;\n\t\tthis.a[1] = (1.0 - g) / a0;\n\t\tthis.b[1] = this.b[0] = 1 / a0;\n\t\tthis.order = 1;\n\t}\n\t\n\tlowPass1stOrderSimplified(cornerRadiansPerSample: number): void {\n\t\t// The output of this filter is nearly identical to the 1st order\n\t\t// Butterworth low-pass above, except if the cutoff is set to nyquist/3,\n\t\t// then the output is the same as the input, and if the cutoff is higher\n\t\t// than that, then the output actually resonates at high frequencies\n\t\t// instead of attenuating.\n\t\t// I'm guessing this filter was converted from analog to digital using\n\t\t// the \"matched z-transform\" method instead of the \"bilinear transform\"\n\t\t// method. The difference is that the bilinear transform warps\n\t\t// frequencies so that the lowpass response of zero at analogue \u221Ehz maps\n\t\t// to the digital nyquist frequency, whereas the matched z-transform\n\t\t// preserves the frequency of the filter response but also adds the\n\t\t// reflected response from above the nyquist frequency.\n\t\tconst g: number = 2.0 * Math.sin(cornerRadiansPerSample * 0.5);\n\t\tthis.a[1] = g - 1.0;\n\t\tthis.b[0] = g;\n\t\tthis.b[1] = 0.0;\n\t\t/*\n\t\t// Alternatively:\n\t\tconst g: number = 1.0 / (2.0 * Math.sin(cornerRadiansPerSample / 2));\n\t\tconst a0: number = g;\n\t\tthis.a[1] = (1.0 - g) / a0;\n\t\tthis.b[0] = 1.0 / a0;\n\t\tthis.b[1] = 0.0 / a0;\n\t\t*/\n\t\tthis.order = 1;\n\t}\n\t\n\thighPass1stOrderButterworth(cornerRadiansPerSample: number): void {\n\t\t// First-order Butterworth high-pass filter according to:\n\t\t// https://www.researchgate.net/publication/338022014_Digital_Implementation_of_Butterworth_First-Order_Filter_Type_IIR\n\t\tconst g: number = 1.0 / Math.tan(cornerRadiansPerSample * 0.5);\n\t\tconst a0: number = 1.0 + g;\n\t\tthis.a[1] = (1.0 - g) / a0;\n\t\tthis.b[0] = g / a0;\n\t\tthis.b[1] = -g / a0;\n\t\tthis.order = 1;\n\t}\n\t/*\n\thighPass1stOrderSimplified(cornerRadiansPerSample: number): void {\n\t\t// The output of this filter is nearly identical to the 1st order\n\t\t// Butterworth high-pass above, except it resonates when the cutoff\n\t\t// appoaches the nyquist.\n\t\tconst g: number = 2.0 * Math.sin(cornerRadiansPerSample * 0.5);\n\t\tthis.a[1] = g - 1.0;\n\t\tthis.b[0] = 1.0;\n\t\tthis.b[1] = -1.0;\n\t\tthis.order = 1;\n\t}\n\t*/\n\thighShelf1stOrder(cornerRadiansPerSample: number, shelfLinearGain: number): void {\n\t\t// I had trouble figuring this one out because I couldn't find any\n\t\t// online algorithms that I understood. There are 3 degrees of freedom\n\t\t// and I could narrow down a couple of them based on the desired gain at\n\t\t// DC and nyquist, but getting the cutoff frequency correct took a\n\t\t// little bit of trial and error in my attempts to interpret page 53 of\n\t\t// this chapter: http://www.music.mcgill.ca/~ich/classes/FiltersChap2.pdf\n\t\t// Obviously I don't fully understand the bilinear transform yet!\n\t\tconst tan: number = Math.tan(cornerRadiansPerSample * 0.5);\n\t\tconst sqrtGain: number = Math.sqrt(shelfLinearGain);\n\t\tconst g: number = (tan * sqrtGain - 1) / (tan * sqrtGain + 1.0);\n\t\tconst a0: number = 1.0;\n\t\tthis.a[1] = g / a0;\n\t\tthis.b[0] = (1.0 + g + shelfLinearGain * (1.0 - g)) / (2.0 * a0);\n\t\tthis.b[1] = (1.0 + g - shelfLinearGain * (1.0 - g)) / (2.0 * a0);\n\t\tthis.order = 1;\n\t}\n\t\n\tallPass1stOrderInvertPhaseAbove(cornerRadiansPerSample: number): void {\n\t\tconst g: number = (Math.sin(cornerRadiansPerSample) - 1.0) / Math.cos(cornerRadiansPerSample);\n\t\tthis.a[1] = g;\n\t\tthis.b[0] = g;\n\t\tthis.b[1] = 1.0;\n\t\tthis.order = 1;\n\t}\n\t\n\t/*\n\t// I haven't found a practical use for this version of the all pass filter.\n\t// It seems to create a weird subharmonic when used in a delay feedback loop.\n\tallPass1stOrderInvertPhaseBelow(cornerRadiansPerSample: number): void {\n\t\tconst g: number = (Math.sin(cornerRadiansPerSample) - 1.0) / Math.cos(cornerRadiansPerSample);\n\t\tthis.a[1] = g;\n\t\tthis.b[0] = -g;\n\t\tthis.b[1] = -1.0;\n\t\tthis.order = 1;\n\t}\n\t*/\n\t\n\tallPass1stOrderFractionalDelay(delay: number) {\n\t\t// Very similar to allPass1stOrderInvertPhaseAbove, but configured\n\t\t// differently and for a different purpose! Useful for interpolating\n\t\t// between samples in a delay line.\n\t\tconst g: number = (1.0 - delay) / (1.0 + delay);\n\t\tthis.a[1] = g;\n\t\tthis.b[0] = g;\n\t\tthis.b[1] = 1.0;\n\t\tthis.order = 1;\n\t}\n\t\n\tlowPass2ndOrderButterworth(cornerRadiansPerSample: number, peakLinearGain: number): void {\n\t\t// This is Butterworth if peakLinearGain=1/\u221A2 according to:\n\t\t// http://web.archive.org/web/20191213120120/https://crypto.stanford.edu/~blynn/sound/analog.html\n\t\t// An interesting property is that if peakLinearGain=1/16 then the\n\t\t// output resembles a first-order lowpass at a cutoff 4 octaves lower,\n\t\t// although it gets distorted near the nyquist.\n\t\tconst alpha: number = Math.sin(cornerRadiansPerSample) / (2.0 * peakLinearGain);\n\t\tconst cos: number = Math.cos(cornerRadiansPerSample);\n\t\tconst a0: number = 1.0 + alpha;\n\t\tthis.a[1] = -2.0*cos / a0;\n\t\tthis.a[2] = (1 - alpha) / a0;\n\t\tthis.b[2] = this.b[0] = (1 - cos) / (2.0*a0);\n\t\tthis.b[1] = (1 - cos) / a0;\n\t\tthis.order = 2;\n\t}\n\t\n\tlowPass2ndOrderSimplified(cornerRadiansPerSample: number, peakLinearGain: number): void {\n\t\t// This filter is adapted from the one in the SFXR source code:\n\t\t// https://www.drpetter.se/project_sfxr.html\n\t\t// The output is nearly identical to the resonant Butterworth low-pass\n\t\t// above, except it resonates too much when the cutoff appoaches the\n\t\t// nyquist. If the resonance is set to zero and the cutoff is set to\n\t\t// nyquist/3, then the output is the same as the input.\n\t\tconst g: number = 2.0 * Math.sin(cornerRadiansPerSample / 2.0);\n\t\tconst filterResonance: number = 1.0 - 1.0 / (2.0 * peakLinearGain);\n\t\tconst feedback: number = filterResonance + filterResonance / (1.0 - g);\n\t\tthis.a[1] = 2.0*g + (g - 1.0) * g*feedback - 2.0;\n\t\tthis.a[2] = (g - 1.0) * (g - g*feedback - 1.0);\n\t\tthis.b[0] = g*g;\n\t\tthis.b[1] = 0;\n\t\tthis.b[2] = 0;\n\t\tthis.order = 2;\n\t}\n\t\n\thighPass2ndOrderButterworth(cornerRadiansPerSample: number, peakLinearGain: number): void {\n\t\tconst alpha: number = Math.sin(cornerRadiansPerSample) / (2 * peakLinearGain);\n\t\tconst cos: number = Math.cos(cornerRadiansPerSample);\n\t\tconst a0: number = 1.0 + alpha;\n\t\tthis.a[1] = -2.0*cos / a0;\n\t\tthis.a[2] = (1.0 - alpha) / a0;\n\t\tthis.b[2] = this.b[0] = (1.0 + cos) / (2.0*a0);\n\t\tthis.b[1] = -(1.0 + cos) / a0;\n\t\tthis.order = 2;\n\t}\n\t/*\n\thighPass2ndOrderSimplified(cornerRadiansPerSample: number, peakLinearGain: number): void {\n\t\tconst g: number = 2.0 * Math.sin(cornerRadiansPerSample * 0.5);\n\t\tconst filterResonance: number = 1.0 - 1.0 / (2.0 * peakLinearGain);\n\t\tconst feedback: number = filterResonance + filterResonance / (1.0 - g);\n\t\tthis.a[1] = 2.0*g + (g - 1.0) * g*feedback - 2.0;\n\t\tthis.a[2] = (g - 1.0) * (g - g*feedback - 1.0);\n\t\tthis.b[0] = 1.0;\n\t\tthis.b[1] = -2.0;\n\t\tthis.b[2] = 1.0;\n\t\tthis.order = 2;\n\t}\n\t*/\n\thighShelf2ndOrder(cornerRadiansPerSample: number, shelfLinearGain: number, slope: number): void {\n\t\tconst A: number = Math.sqrt(shelfLinearGain);\n\t\tconst c: number = Math.cos(cornerRadiansPerSample);\n\t\tconst Aplus: number = A + 1.0;\n\t\tconst Aminus: number = A - 1.0;\n\t\tconst alpha: number = Math.sin(cornerRadiansPerSample) * 0.5 * Math.sqrt((Aplus / A) * (1.0 / slope - 1.0) + 2.0);\n\t\tconst sqrtA2Alpha: number = 2.0 * Math.sqrt(A) * alpha;\n\t\tconst a0: number =   (Aplus  - Aminus * c + sqrtA2Alpha);\n\t\tthis.a[1] =  2 *     (Aminus - Aplus  * c              ) / a0;\n\t\tthis.a[2] =          (Aplus  - Aminus * c - sqrtA2Alpha) / a0;\n\t\tthis.b[0] =      A * (Aplus  + Aminus * c + sqrtA2Alpha) / a0;\n\t\tthis.b[1] = -2 * A * (Aminus + Aplus  * c              ) / a0;\n\t\tthis.b[2] =      A * (Aplus  + Aminus * c - sqrtA2Alpha) / a0;\n\t\tthis.order = 2;\n\t}\n\n\tpeak2ndOrder(cornerRadiansPerSample: number, peakLinearGain: number, bandWidthScale: number): void {\n\t\tconst sqrtGain: number = Math.sqrt(peakLinearGain);\n\t\tconst bandWidth: number = bandWidthScale * cornerRadiansPerSample / (sqrtGain >= 1 ? sqrtGain : 1/sqrtGain);\n\t\t//const bandWidth: number = bandWidthScale * cornerRadiansPerSample / Math.max(sqrtGain, 1.0);\n\t\tconst alpha: number = Math.tan(bandWidth * 0.5);\n\t\tconst a0: number = 1.0 + alpha / sqrtGain;\n\t\tthis.b[0] = (1.0 + alpha * sqrtGain) / a0;\n\t\tthis.b[1] = this.a[1] = -2.0 * Math.cos(cornerRadiansPerSample) / a0;\n\t\tthis.b[2] = (1.0 - alpha * sqrtGain) / a0;\n\t\tthis.a[2] = (1.0 - alpha / sqrtGain) / a0;\n\t\tthis.order = 2;\n\t}\n\t/*\n\t// Create a higher order filter by combining two lower order filters.\n\t// However, making high order filters in this manner results in instability.\n\t// It is recommended to apply the 2nd order filters (biquads) in sequence instead.\n\tcombination(filter1: FilterCoefficients, filter2: FilterCoefficients): void {\n\t\tthis.order = filter1.order + filter2.order;\n\t\tfor (let i: number = 0; i <= this.order; i++) {\n\t\t\tthis.a[i] = 0.0;\n\t\t\tthis.b[i] = 0.0;\n\t\t}\n\t\tfor (let i: number = 0; i <= filter1.order; i++) {\n\t\t\tfor (let j: number = 0; j <= filter2.order; j++) {\n\t\t\t\tthis.a[i + j] += filter1.a[i] * filter2.a[j];\n\t\t\t\tthis.b[i + j] += filter1.b[i] * filter2.b[j];\n\t\t\t}\n\t\t}\n\t}\n\t\n\tscaledDifference(other: FilterCoefficients, scale: number): void {\n\t\tif (other.order != this.order) throw new Error();\n\t\tfor (let i: number = 0; i <= this.order; i++) {\n\t\t\tthis.a[i] = (this.a[i] - other.a[i]) * scale;\n\t\t\tthis.b[i] = (this.b[i] - other.b[i]) * scale;\n\t\t}\n\t}\n\t\n\tcopy(other: FilterCoefficients): void {\n\t\tthis.order = other.order;\n\t\tfor (let i: number = 0; i <= this.order; i++) {\n\t\t\tthis.a[i] = other.a[i];\n\t\t\tthis.b[i] = other.b[i];\n\t\t}\n\t}\n\t*/\n}\n\nexport class FrequencyResponse {\n\treal: number = 0.0;\n\timag: number = 0.0;\n\tdenom: number = 1.0;\n\t\n\tanalyze(filter: FilterCoefficients, radiansPerSample: number): void {\n\t\tthis.analyzeComplex(filter, Math.cos(radiansPerSample), Math.sin(radiansPerSample));\n\t}\n\t\n\tanalyzeComplex(filter: FilterCoefficients, real: number, imag: number): void {\n\t\tconst a: number[] = filter.a;\n\t\tconst b: number[] = filter.b;\n\t\tconst realZ1: number = real;\n\t\tconst imagZ1: number = -imag;\n\t\tlet realNum: number = b[0] + b[1] * realZ1;\n\t\tlet imagNum: number = b[1] * imagZ1;\n\t\tlet realDenom: number = 1.0 + a[1] * realZ1;\n\t\tlet imagDenom: number = a[1] * imagZ1;\n\t\tlet realZ: number = realZ1;\n\t\tlet imagZ: number = imagZ1;\n\t\tfor (let i: number = 2; i <= filter.order; i++) {\n\t\t\tconst realTemp: number = realZ * realZ1 - imagZ * imagZ1;\n\t\t\tconst imagTemp: number = realZ * imagZ1 + imagZ * realZ1;\n\t\t\trealZ = realTemp;\n\t\t\timagZ = imagTemp;\n\t\t\trealNum += b[i] * realZ;\n\t\t\timagNum += b[i] * imagZ;\n\t\t\trealDenom += a[i] * realZ;\n\t\t\timagDenom += a[i] * imagZ;\n\t\t}\n\t\tthis.denom = realDenom * realDenom + imagDenom * imagDenom;\n\t\tthis.real = realNum * realDenom + imagNum * imagDenom;\n\t\tthis.imag = imagNum * realDenom - realNum * imagDenom;\n\t}\n\t\n\tmagnitude(): number {\n\t\treturn Math.sqrt(this.real * this.real + this.imag * this.imag) / this.denom;\n\t}\n\t\n\tangle(): number {\n\t\treturn Math.atan2(this.imag, this.real);\n\t}\n}\n\nexport class DynamicBiquadFilter {\n\ta1: number = 0.0;\n\ta2: number = 0.0;\n\tb0: number = 1.0;\n\tb1: number = 0.0;\n\tb2: number = 0.0;\n\ta1Delta: number = 0.0;\n\ta2Delta: number = 0.0;\n\tb0Delta: number = 0.0;\n\tb1Delta: number = 0.0;\n\tb2Delta: number = 0.0;\n\toutput1: number = 0.0;\n\toutput2: number = 0.0;\n\t\n\t// Some filter types are more stable when interpolating between coefficients\n\t// if the \"b\" coefficient interpolation is multiplicative. Don't enable this\n\t// for filter types where the \"b\" coefficients might change sign!\n\tuseMultiplicativeInputCoefficients: boolean = false;\n\t\n\tresetOutput(): void {\n\t\tthis.output1 = 0.0;\n\t\tthis.output2 = 0.0;\n\t}\n\t\n\tloadCoefficientsWithGradient(start: FilterCoefficients, end: FilterCoefficients, deltaRate: number, useMultiplicativeInputCoefficients: boolean): void {\n\t\tif (start.order != 2 || end.order != 2) throw new Error();\n\t\tthis.a1 = start.a[1];\n\t\tthis.a2 = start.a[2];\n\t\tthis.b0 = start.b[0];\n\t\tthis.b1 = start.b[1];\n\t\tthis.b2 = start.b[2];\n\t\tthis.a1Delta = (end.a[1] - start.a[1]) * deltaRate;\n\t\tthis.a2Delta = (end.a[2] - start.a[2]) * deltaRate;\n\t\tif (useMultiplicativeInputCoefficients) {\n\t\t\tthis.b0Delta = Math.pow(end.b[0] / start.b[0], deltaRate);\n\t\t\tthis.b1Delta = Math.pow(end.b[1] / start.b[1], deltaRate);\n\t\t\tthis.b2Delta = Math.pow(end.b[2] / start.b[2], deltaRate);\n\t\t} else {\n\t\t\tthis.b0Delta = (end.b[0] - start.b[0]) * deltaRate;\n\t\t\tthis.b1Delta = (end.b[1] - start.b[1]) * deltaRate;\n\t\t\tthis.b2Delta = (end.b[2] - start.b[2]) * deltaRate;\n\t\t}\n\t\tthis.useMultiplicativeInputCoefficients = useMultiplicativeInputCoefficients;\n\t}\n}\n\n// Filters are typically designed as analog filters first, then converted to\n// digital filters using one of two methods: the \"matched z-transform\" or the\n// \"bilinear transform\". The \"bilinear transform\" does a better job of\n// preserving the magnitudes of the frequency response, but warps the frequency\n// range such that the nyquist frequency of the digital filter (\u03C0) maps to the\n// infinity frequency of the analog filter. You can use the below functions to\n// manually perform this warping in either direction.\nexport function warpNyquistToInfinity(radians: number): number {\n\treturn 2.0 * Math.tan(radians * 0.5);\n}\nexport function warpInfinityToNyquist(radians: number): number {\n\treturn 2.0 * Math.atan(radians * 0.5);\n}\n", "// Copyright (c) John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { EnvelopeType, FilterType, Config, Envelope } from \"./SynthConfig\";\nimport { FilterCoefficients, FrequencyResponse } from \"./filtering\";\n\nexport class FilterSettings {\n    readonly controlPoints: FilterControlPoint[] = [];\n    controlPointCount: number = 0;\n\n    constructor() {\n        this.reset();\n    }\n\n    reset(): void {\n        this.controlPointCount = 0;\n    }\n\n    addPoint(type: FilterType, freqSetting: number, gainSetting: number): void {\n        let controlPoint: FilterControlPoint;\n        if (this.controlPoints.length <= this.controlPointCount) {\n            controlPoint = new FilterControlPoint();\n            this.controlPoints[this.controlPointCount] = controlPoint;\n        } else {\n            controlPoint = this.controlPoints[this.controlPointCount];\n        }\n        this.controlPointCount++;\n        controlPoint.type = type;\n        controlPoint.set(freqSetting, gainSetting);\n    }\n\n    toJsonObject(): Object {\n        const filterArray: any[] = [];\n        for (let i: number = 0; i < this.controlPointCount; i++) {\n            const point: FilterControlPoint = this.controlPoints[i];\n            filterArray.push({\n                \"type\": Config.filterTypeNames[point.type],\n                \"cutoffHz\": Math.round(point.getHz() * 100) / 100,\n                             \"linearGain\": Math.round(point.getLinearGain() * 10000) / 10000,\n            });\n        }\n        return filterArray;\n    }\n\n    fromJsonObject(filterObject: any): void {\n        this.controlPoints.length = 0;\n        if (filterObject) {\n            for (const pointObject of filterObject) {\n                const point: FilterControlPoint = new FilterControlPoint();\n                point.type = Config.filterTypeNames.indexOf(pointObject[\"type\"]);\n                if (<any>point.type == -1) point.type = FilterType.peak;\n                if (pointObject[\"cutoffHz\"] != undefined) {\n                    point.freq = FilterControlPoint.getRoundedSettingValueFromHz(pointObject[\"cutoffHz\"]);\n                } else {\n                    point.freq = 0;\n                }\n                if (pointObject[\"linearGain\"] != undefined) {\n                    point.gain = FilterControlPoint.getRoundedSettingValueFromLinearGain(pointObject[\"linearGain\"]);\n                } else {\n                    point.gain = Config.filterGainCenter;\n                }\n                this.controlPoints.push(point);\n            }\n        }\n        this.controlPointCount = this.controlPoints.length;\n    }\n\n    // Returns true if all filter control points match in number and type (but not freq/gain)\n    static filtersCanMorph(filterA: FilterSettings, filterB: FilterSettings): boolean {\n        if (filterA.controlPointCount != filterB.controlPointCount)\n            return false;\n        for (let i: number = 0; i < filterA.controlPointCount; i++) {\n            if (filterA.controlPoints[i].type != filterB.controlPoints[i].type)\n                return false;\n        }\n        return true;\n    }\n\n    // Interpolate two FilterSettings, where pos=0 is filterA and pos=1 is filterB\n    static lerpFilters(filterA: FilterSettings, filterB: FilterSettings, pos: number): FilterSettings {\n\n        let lerpedFilter: FilterSettings = new FilterSettings();\n\n        // One setting or another is null, return the other.\n        if (filterA == null) {\n            return filterA;\n        }\n        if (filterB == null) {\n            return filterB;\n        }\n\n        pos = Math.max(0, Math.min(1, pos));\n\n        // Filter control points match in number and type\n        if (this.filtersCanMorph(filterA, filterB)) {\n            for (let i: number = 0; i < filterA.controlPointCount; i++) {\n                lerpedFilter.controlPoints[i] = new FilterControlPoint();\n                lerpedFilter.controlPoints[i].type = filterA.controlPoints[i].type;\n                lerpedFilter.controlPoints[i].freq = filterA.controlPoints[i].freq + (filterB.controlPoints[i].freq - filterA.controlPoints[i].freq) * pos;\n                lerpedFilter.controlPoints[i].gain = filterA.controlPoints[i].gain + (filterB.controlPoints[i].gain - filterA.controlPoints[i].gain) * pos;\n            }\n\n            lerpedFilter.controlPointCount = filterA.controlPointCount;\n\n            return lerpedFilter;\n        }\n        else {\n            // Not allowing morph of unmatching filters for now. It's a hornet's nest of problems, and I had it implemented and mostly working and it didn't sound very interesting since the shape becomes \"mushy\" in between\n            return (pos >= 1) ? filterB : filterA;\n        }\n    }\n\n    convertLegacySettings(legacyCutoffSetting: number, legacyResonanceSetting: number, legacyEnv: Envelope): void {\n        this.reset();\n\n        const legacyFilterCutoffMaxHz: number = 8000; // This was carefully calculated to correspond to no change in response when filtering at 48000 samples per second... when using the legacy simplified low-pass filter.\n        const legacyFilterMax: number = 0.95;\n        const legacyFilterMaxRadians: number = Math.asin(legacyFilterMax / 2.0) * 2.0;\n        const legacyFilterMaxResonance: number = 0.95;\n        const legacyFilterCutoffRange: number = 11;\n        const legacyFilterResonanceRange: number = 8;\n\n        const resonant: boolean = (legacyResonanceSetting > 1);\n        const firstOrder: boolean = (legacyResonanceSetting == 0);\n        const cutoffAtMax: boolean = (legacyCutoffSetting == legacyFilterCutoffRange - 1);\n        const envDecays: boolean = (legacyEnv.type == EnvelopeType.flare || legacyEnv.type == EnvelopeType.twang || legacyEnv.type == EnvelopeType.decay || legacyEnv.type == EnvelopeType.noteSize);\n\n        const standardSampleRate: number = 48000;\n        const legacyHz: number = legacyFilterCutoffMaxHz * Math.pow(2.0, (legacyCutoffSetting - (legacyFilterCutoffRange - 1)) * 0.5);\n        const legacyRadians: number = Math.min(legacyFilterMaxRadians, 2 * Math.PI * legacyHz / standardSampleRate);\n\n        if (legacyEnv.type == EnvelopeType.none && !resonant && cutoffAtMax) {\n            // The response is flat and there's no envelopes, so don't even bother adding any control points.\n        } else if (firstOrder) {\n            // In general, a 1st order lowpass can be approximated by a 2nd order lowpass\n            // with a cutoff ~4 octaves higher (*16) and a gain of 1/16.\n            // However, BeepBox's original lowpass filters behaved oddly as they\n            // approach the nyquist frequency, so I've devised this curved conversion\n            // to guess at a perceptually appropriate new cutoff frequency and gain.\n            const extraOctaves: number = 3.5;\n            const targetRadians: number = legacyRadians * Math.pow(2.0, extraOctaves);\n            const curvedRadians: number = targetRadians / (1.0 + targetRadians / Math.PI);\n            const curvedHz: number = standardSampleRate * curvedRadians / (2.0 * Math.PI)\n            const freqSetting: number = FilterControlPoint.getRoundedSettingValueFromHz(curvedHz);\n            const finalHz: number = FilterControlPoint.getHzFromSettingValue(freqSetting);\n            const finalRadians: number = 2.0 * Math.PI * finalHz / standardSampleRate;\n\n            const legacyFilter: FilterCoefficients = new FilterCoefficients();\n            legacyFilter.lowPass1stOrderSimplified(legacyRadians);\n            const response: FrequencyResponse = new FrequencyResponse();\n            response.analyze(legacyFilter, finalRadians);\n            const legacyFilterGainAtNewRadians: number = response.magnitude();\n\n            let logGain: number = Math.log2(legacyFilterGainAtNewRadians);\n            // Bias slightly toward 2^(-extraOctaves):\n            logGain = -extraOctaves + (logGain + extraOctaves) * 0.82;\n            // Decaying envelopes move the cutoff frequency back into an area where the best approximation of the first order slope requires a lower gain setting.\n            if (envDecays) logGain = Math.min(logGain, -1.0);\n            const convertedGain: number = Math.pow(2.0, logGain);\n            const gainSetting: number = FilterControlPoint.getRoundedSettingValueFromLinearGain(convertedGain);\n\n            this.addPoint(FilterType.lowPass, freqSetting, gainSetting);\n        } else {\n            const intendedGain: number = 0.5 / (1.0 - legacyFilterMaxResonance * Math.sqrt(Math.max(0.0, legacyResonanceSetting - 1.0) / (legacyFilterResonanceRange - 2.0)));\n            const invertedGain: number = 0.5 / intendedGain;\n            const maxRadians: number = 2.0 * Math.PI * legacyFilterCutoffMaxHz / standardSampleRate;\n            const freqRatio: number = legacyRadians / maxRadians;\n            const targetRadians: number = legacyRadians * (freqRatio * Math.pow(invertedGain, 0.9) + 1.0);\n            const curvedRadians: number = legacyRadians + (targetRadians - legacyRadians) * invertedGain;\n            let curvedHz: number;\n            if (envDecays) {\n                curvedHz = standardSampleRate * Math.min(curvedRadians, legacyRadians * Math.pow(2, 0.25)) / (2.0 * Math.PI);\n            } else {\n                curvedHz = standardSampleRate * curvedRadians / (2.0 * Math.PI);\n            }\n            const freqSetting: number = FilterControlPoint.getRoundedSettingValueFromHz(curvedHz);\n\n            let legacyFilterGain: number;\n            if (envDecays) {\n                legacyFilterGain = intendedGain;\n            } else {\n                const legacyFilter: FilterCoefficients = new FilterCoefficients();\n                legacyFilter.lowPass2ndOrderSimplified(legacyRadians, intendedGain);\n                const response: FrequencyResponse = new FrequencyResponse();\n                response.analyze(legacyFilter, curvedRadians);\n                legacyFilterGain = response.magnitude();\n            }\n            if (!resonant) legacyFilterGain = Math.min(legacyFilterGain, Math.sqrt(0.5));\n            const gainSetting: number = FilterControlPoint.getRoundedSettingValueFromLinearGain(legacyFilterGain);\n\n            this.addPoint(FilterType.lowPass, freqSetting, gainSetting);\n        }\n\n        // Added for JummBox - making a 0 point filter does not truncate control points!\n        this.controlPoints.length = this.controlPointCount;\n    }\n\n    // Similar to above, but purpose-fit for quick conversions in synth calls.\n    convertLegacySettingsForSynth(legacyCutoffSetting: number, legacyResonanceSetting: number, allowFirstOrder: boolean = false): void {\n        this.reset();\n\n        const legacyFilterCutoffMaxHz: number = 8000; // This was carefully calculated to correspond to no change in response when filtering at 48000 samples per second... when using the legacy simplified low-pass filter.\n        const legacyFilterMax: number = 0.95;\n        const legacyFilterMaxRadians: number = Math.asin(legacyFilterMax / 2.0) * 2.0;\n        const legacyFilterMaxResonance: number = 0.95;\n        const legacyFilterCutoffRange: number = 11;\n        const legacyFilterResonanceRange: number = 8;\n\n        const firstOrder: boolean = (legacyResonanceSetting == 0 && allowFirstOrder);\n        const standardSampleRate: number = 48000;\n        const legacyHz: number = legacyFilterCutoffMaxHz * Math.pow(2.0, (legacyCutoffSetting - (legacyFilterCutoffRange - 1)) * 0.5);\n        const legacyRadians: number = Math.min(legacyFilterMaxRadians, 2 * Math.PI * legacyHz / standardSampleRate);\n\n        if (firstOrder) {\n            // In general, a 1st order lowpass can be approximated by a 2nd order lowpass\n            // with a cutoff ~4 octaves higher (*16) and a gain of 1/16.\n            // However, BeepBox's original lowpass filters behaved oddly as they\n            // approach the nyquist frequency, so I've devised this curved conversion\n            // to guess at a perceptually appropriate new cutoff frequency and gain.\n            const extraOctaves: number = 3.5;\n            const targetRadians: number = legacyRadians * Math.pow(2.0, extraOctaves);\n            const curvedRadians: number = targetRadians / (1.0 + targetRadians / Math.PI);\n            const curvedHz: number = standardSampleRate * curvedRadians / (2.0 * Math.PI)\n            const freqSetting: number = FilterControlPoint.getRoundedSettingValueFromHz(curvedHz);\n            const finalHz: number = FilterControlPoint.getHzFromSettingValue(freqSetting);\n            const finalRadians: number = 2.0 * Math.PI * finalHz / standardSampleRate;\n\n            const legacyFilter: FilterCoefficients = new FilterCoefficients();\n            legacyFilter.lowPass1stOrderSimplified(legacyRadians);\n            const response: FrequencyResponse = new FrequencyResponse();\n            response.analyze(legacyFilter, finalRadians);\n            const legacyFilterGainAtNewRadians: number = response.magnitude();\n\n            let logGain: number = Math.log2(legacyFilterGainAtNewRadians);\n            // Bias slightly toward 2^(-extraOctaves):\n            logGain = -extraOctaves + (logGain + extraOctaves) * 0.82;\n            const convertedGain: number = Math.pow(2.0, logGain);\n            const gainSetting: number = FilterControlPoint.getRoundedSettingValueFromLinearGain(convertedGain);\n\n            this.addPoint(FilterType.lowPass, freqSetting, gainSetting);\n        } else {\n            const intendedGain: number = 0.5 / (1.0 - legacyFilterMaxResonance * Math.sqrt(Math.max(0.0, legacyResonanceSetting - 1.0) / (legacyFilterResonanceRange - 2.0)));\n            const invertedGain: number = 0.5 / intendedGain;\n            const maxRadians: number = 2.0 * Math.PI * legacyFilterCutoffMaxHz / standardSampleRate;\n            const freqRatio: number = legacyRadians / maxRadians;\n            const targetRadians: number = legacyRadians * (freqRatio * Math.pow(invertedGain, 0.9) + 1.0);\n            const curvedRadians: number = legacyRadians + (targetRadians - legacyRadians) * invertedGain;\n            let curvedHz: number;\n\n            curvedHz = standardSampleRate * curvedRadians / (2.0 * Math.PI);\n            const freqSetting: number = FilterControlPoint.getSettingValueFromHz(curvedHz);\n\n            let legacyFilterGain: number;\n\n            const legacyFilter: FilterCoefficients = new FilterCoefficients();\n            legacyFilter.lowPass2ndOrderSimplified(legacyRadians, intendedGain);\n            const response: FrequencyResponse = new FrequencyResponse();\n            response.analyze(legacyFilter, curvedRadians);\n            legacyFilterGain = response.magnitude();\n            const gainSetting: number = FilterControlPoint.getRoundedSettingValueFromLinearGain(legacyFilterGain);\n\n            this.addPoint(FilterType.lowPass, freqSetting, gainSetting);\n        }\n\n    }\n}\n\nexport class FilterControlPoint {\n    freq: number = 0;\n    gain: number = Config.filterGainCenter;\n    type: FilterType = FilterType.peak;\n\n    set(freqSetting: number, gainSetting: number): void {\n        this.freq = freqSetting;\n        this.gain = gainSetting;\n    }\n\n    getHz(): number {\n        return FilterControlPoint.getHzFromSettingValue(this.freq);\n    }\n\n    static getHzFromSettingValue(value: number): number {\n        return Config.filterFreqReferenceHz * Math.pow(2.0, (value - Config.filterFreqReferenceSetting) * Config.filterFreqStep);\n    }\n    static getSettingValueFromHz(hz: number): number {\n        return Math.log2(hz / Config.filterFreqReferenceHz) / Config.filterFreqStep + Config.filterFreqReferenceSetting;\n    }\n    static getRoundedSettingValueFromHz(hz: number): number {\n        return Math.max(0, Math.min(Config.filterFreqRange - 1, Math.round(FilterControlPoint.getSettingValueFromHz(hz))));\n    }\n\n    getLinearGain(peakMult: number = 1.0): number {\n        const power: number = (this.gain - Config.filterGainCenter) * Config.filterGainStep;\n        const neutral: number = (this.type == FilterType.peak) ? 0.0 : -0.5;\n        const interpolatedPower: number = neutral + (power - neutral) * peakMult;\n        return Math.pow(2.0, interpolatedPower);\n    }\n    static getRoundedSettingValueFromLinearGain(linearGain: number): number {\n        return Math.max(0, Math.min(Config.filterGainRange - 1, Math.round(Math.log2(linearGain) / Config.filterGainStep + Config.filterGainCenter)));\n    }\n\n    toCoefficients(filter: FilterCoefficients, sampleRate: number, freqMult: number = 1.0, peakMult: number = 1.0): void {\n        const cornerRadiansPerSample: number = 2.0 * Math.PI * Math.max(Config.filterFreqMinHz, Math.min(Config.filterFreqMaxHz, freqMult * this.getHz())) / sampleRate;\n        const linearGain: number = this.getLinearGain(peakMult);\n        switch (this.type) {\n            case FilterType.lowPass:\n                filter.lowPass2ndOrderButterworth(cornerRadiansPerSample, linearGain);\n                break;\n            case FilterType.highPass:\n                filter.highPass2ndOrderButterworth(cornerRadiansPerSample, linearGain);\n                break;\n            case FilterType.peak:\n                filter.peak2ndOrder(cornerRadiansPerSample, linearGain, 1.0);\n                break;\n            default:\n                throw new Error();\n        }\n    }\n\n    getVolumeCompensationMult(): number {\n        const octave: number = (this.freq - Config.filterFreqReferenceSetting) * Config.filterFreqStep;\n        const gainPow: number = (this.gain - Config.filterGainCenter) * Config.filterGainStep;\n        switch (this.type) {\n            case FilterType.lowPass:\n                const freqRelativeTo8khz: number = Math.pow(2.0, octave) * Config.filterFreqReferenceHz / 8000.0;\n                // Reverse the frequency warping from importing legacy simplified filters to imitate how the legacy filter cutoff setting affected volume.\n                const warpedFreq: number = (Math.sqrt(1.0 + 4.0 * freqRelativeTo8khz) - 1.0) / 2.0;\n                const warpedOctave: number = Math.log2(warpedFreq);\n                return Math.pow(0.5, 0.2 * Math.max(0.0, gainPow + 1.0) + Math.min(0.0, Math.max(-3.0, 0.595 * warpedOctave + 0.35 * Math.min(0.0, gainPow + 1.0))));\n            case FilterType.highPass:\n                return Math.pow(0.5, 0.125 * Math.max(0.0, gainPow + 1.0) + Math.min(0.0, 0.3 * (-octave - Math.log2(Config.filterFreqReferenceHz / 125.0)) + 0.2 * Math.min(0.0, gainPow + 1.0)));\n            case FilterType.peak:\n                const distanceFromCenter: number = octave + Math.log2(Config.filterFreqReferenceHz / 2000.0);\n                const freqLoudness: number = Math.pow(1.0 / (1.0 + Math.pow(distanceFromCenter / 3.0, 2.0)), 2.0);\n                return Math.pow(0.5, 0.125 * Math.max(0.0, gainPow) + 0.1 * freqLoudness * Math.min(0.0, gainPow));\n            default:\n                throw new Error();\n        }\n    }\n}\n", "// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { Config } from \"./SynthConfig\";\n\nexport function clamp(min: number, max: number, val: number): number {\n\tmax = max - 1;\n\tif (val <= max) {\n\t\tif (val >= min) return val;\n\t\telse return min;\n\t} else {\n\t\treturn max;\n\t}\n}\n\nexport function validateRange(min: number, max: number, val: number): number {\n\tif (min <= val && val <= max) return val;\n\tthrow new Error(`Value ${val} not in range [${min}, ${max}]`);\n}\n\nexport function parseFloatWithDefault<T>(s: string, defaultValue: T): number | T {\n\tlet result: number | T = parseFloat(s);\n\tif (Number.isNaN(result)) result = defaultValue;\n\treturn result;\n}\n\nexport function parseIntWithDefault<T>(s: string, defaultValue: T): number | T {\n\tlet result: number | T = parseInt(s);\n\tif (Number.isNaN(result)) result = defaultValue;\n\treturn result;\n}\n\nexport function fadeInSettingToSeconds(setting: number): number {\n\treturn 0.0125 * (0.95 * setting + 0.05 * setting * setting);\n}\n\nexport function secondsToFadeInSetting(seconds: number): number {\n\treturn clamp(0, Config.fadeInRange, Math.round((-0.95 + Math.sqrt(0.9025 + 0.2 * seconds / 0.0125)) / 0.1));\n}\n\nexport function fadeOutSettingToTicks(setting: number): number {\n\treturn Config.fadeOutTicks[setting];\n}\n\nexport function ticksToFadeOutSetting(ticks: number): number {\n\tlet lower: number = Config.fadeOutTicks[0];\n\tif (ticks <= lower) return 0;\n\tfor (let i: number = 1; i < Config.fadeOutTicks.length; i++) {\n\t\tlet upper: number = Config.fadeOutTicks[i];\n\t\tif (ticks <= upper) return (ticks < (lower + upper) / 2) ? i - 1 : i;\n\t\tlower = upper;\n\t}\n\treturn Config.fadeOutTicks.length - 1;\n}\n\n// public static lerp(t: number, a: number, b: number): number {\n//     return a + (b - a) * t;\n// }\n\n// public static unlerp(x: number, a: number, b: number): number {\n//     return (x - a) / (b - a);\n// }\n\nexport function detuneToCents(detune: number): number {\n\t// BeepBox formula, for reference:\n\t// return detune * (Math.abs(detune) + 1) / 2;\n\treturn detune - Config.detuneCenter;\n}\n\nexport function centsToDetune(cents: number): number {\n\t// BeepBox formula, for reference:\n\t// return Math.sign(cents) * (Math.sqrt(1 + 8 * Math.abs(cents)) - 1) / 2.0;\n\treturn cents + Config.detuneCenter;\n}\n\nexport function fittingPowerOfTwo(x: number): number {\n\treturn 1 << (32 - Math.clz32(Math.ceil(x) - 1));\n}\n", "// Copyright (c) John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { Config, LFOEnvelopeTypes, EnvelopeType, Envelope, AutomationTarget } from \"./SynthConfig\";\nimport { clamp } from \"./utils\";\nexport class EnvelopeSettings {\n    target: number = 0;\n    index: number = 0;\n    envelope: number = 0;\n    //slarmoo's box 1.0\n    pitchEnvelopeStart: number;\n    pitchEnvelopeEnd: number;\n    inverse: boolean;\n    //midbox\n    perEnvelopeSpeed: number = Config.envelopes[this.envelope].speed;\n    perEnvelopeLowerBound: number = 0;\n    perEnvelopeUpperBound: number = 1;\n    //modulation support\n    tempEnvelopeSpeed: number | null = null;\n    tempEnvelopeLowerBound: number | null = null;\n    tempEnvelopeUpperBound: number | null = null;\n    //pseudo random\n    steps: number = 2;\n    seed: number = 2;\n    //lfo and random types\n    waveform: number = LFOEnvelopeTypes.sine;\n    //moved discrete into here\n    discrete: boolean = false;\n\n    constructor(public isNoiseEnvelope: boolean) {\n        this.reset();\n    }\n\n    reset(): void {\n        this.target = 0;\n        this.index = 0;\n        this.envelope = 0;\n        this.pitchEnvelopeStart = 0;\n        this.pitchEnvelopeEnd = this.isNoiseEnvelope ? Config.drumCount - 1 : Config.maxPitch;\n        this.inverse = false;\n        this.isNoiseEnvelope = false;\n        this.perEnvelopeSpeed = Config.envelopes[this.envelope].speed;\n        this.perEnvelopeLowerBound = 0;\n        this.perEnvelopeUpperBound = 1;\n        this.tempEnvelopeSpeed = null;\n        this.tempEnvelopeLowerBound = null;\n        this.tempEnvelopeUpperBound = null;\n        this.steps = 2;\n        this.seed = 2;\n        this.waveform = LFOEnvelopeTypes.sine;\n        this.discrete = false;\n    }\n\n    toJsonObject(): Object {\n        const envelopeObject: any = {\n            \"target\": Config.instrumentAutomationTargets[this.target].name,\n            \"envelope\": Config.newEnvelopes[this.envelope].name,\n            \"inverse\": this.inverse,\n            \"perEnvelopeSpeed\": this.perEnvelopeSpeed,\n            \"perEnvelopeLowerBound\": this.perEnvelopeLowerBound,\n            \"perEnvelopeUpperBound\": this.perEnvelopeUpperBound,\n            \"discrete\": this.discrete,\n        };\n        if (Config.instrumentAutomationTargets[this.target].maxCount > 1) {\n            envelopeObject[\"index\"] = this.index;\n        }\n        if (Config.newEnvelopes[this.envelope].name == \"pitch\") {\n            envelopeObject[\"pitchEnvelopeStart\"] = this.pitchEnvelopeStart;\n            envelopeObject[\"pitchEnvelopeEnd\"] = this.pitchEnvelopeEnd;\n        } else if (Config.newEnvelopes[this.envelope].name == \"random\") {\n            envelopeObject[\"steps\"] = this.steps;\n            envelopeObject[\"seed\"] = this.seed;\n            envelopeObject[\"waveform\"] = this.waveform;\n        } else if (Config.newEnvelopes[this.envelope].name == \"lfo\") {\n            envelopeObject[\"waveform\"] = this.waveform;\n            envelopeObject[\"steps\"] = this.steps;\n        }\n        return envelopeObject;\n    }\n\n    fromJsonObject(envelopeObject: any, format: string): void {\n        this.reset();\n\n        let target: AutomationTarget = Config.instrumentAutomationTargets.dictionary[envelopeObject[\"target\"]];\n        if (target == null) target = Config.instrumentAutomationTargets.dictionary[\"noteVolume\"];\n        this.target = target.index;\n\n        let envelope: Envelope = Config.envelopes.dictionary[\"none\"];\n        let isTremolo2: Boolean = false;\n        if (format == \"slarmoosbox\") {\n            if (envelopeObject[\"envelope\"] == \"tremolo2\") {\n                envelope = Config.newEnvelopes[EnvelopeType.lfo];\n                isTremolo2 = true;\n            } else if (envelopeObject[\"envelope\"] == \"tremolo\") {\n                envelope = Config.newEnvelopes[EnvelopeType.lfo];\n                isTremolo2 = false;\n            } else {\n                envelope = Config.newEnvelopes.dictionary[envelopeObject[\"envelope\"]];\n            }\n        } else {\n            if (Config.envelopes.dictionary[envelopeObject[\"envelope\"]].type == EnvelopeType.tremolo2) {\n                envelope = Config.newEnvelopes[EnvelopeType.lfo];\n                isTremolo2 = true;\n            } else if (Config.newEnvelopes[Math.max(Config.envelopes.dictionary[envelopeObject[\"envelope\"]].type - 1, 0)].index > EnvelopeType.lfo){\n                envelope = Config.newEnvelopes[Config.envelopes.dictionary[envelopeObject[\"envelope\"]].type - 1];\n            } else {\n                envelope = Config.newEnvelopes[Config.envelopes.dictionary[envelopeObject[\"envelope\"]].type];\n            }\n        }\n\n        if (envelope == undefined) {\n            if (Config.envelopes.dictionary[envelopeObject[\"envelope\"]].type == EnvelopeType.tremolo2) {\n                envelope = Config.newEnvelopes[EnvelopeType.lfo];\n                isTremolo2 = true;\n            } else if (Config.newEnvelopes[Math.max(Config.envelopes.dictionary[envelopeObject[\"envelope\"]].type - 1, 0)].index > EnvelopeType.lfo) {\n                envelope = Config.newEnvelopes[Config.envelopes.dictionary[envelopeObject[\"envelope\"]].type - 1];\n            } else {\n                envelope = Config.newEnvelopes[Config.envelopes.dictionary[envelopeObject[\"envelope\"]].type];\n            }\n        }\n        if (envelope == null) envelope = Config.envelopes.dictionary[\"none\"];\n        this.envelope = envelope.index;\n\n        if (envelopeObject[\"index\"] != undefined) {\n            this.index = clamp(0, Config.instrumentAutomationTargets[this.target].maxCount, envelopeObject[\"index\"] | 0);\n        } else {\n            this.index = 0;\n        }\n\n        if (envelopeObject[\"pitchEnvelopeStart\"] != undefined) {\n            this.pitchEnvelopeStart = clamp(0, this.isNoiseEnvelope ? Config.drumCount : Config.maxPitch + 1, envelopeObject[\"pitchEnvelopeStart\"]);\n        } else {\n            this.pitchEnvelopeStart = 0;\n        }\n\n        if (envelopeObject[\"pitchEnvelopeEnd\"] != undefined) {\n            this.pitchEnvelopeEnd = clamp(0, this.isNoiseEnvelope ? Config.drumCount : Config.maxPitch + 1, envelopeObject[\"pitchEnvelopeEnd\"]);\n        } else {\n            this.pitchEnvelopeEnd = this.isNoiseEnvelope ? Config.drumCount : Config.maxPitch;\n        }\n\n        this.inverse = Boolean(envelopeObject[\"inverse\"]);\n\n        if (envelopeObject[\"perEnvelopeSpeed\"] != undefined) {\n            this.perEnvelopeSpeed = envelopeObject[\"perEnvelopeSpeed\"];\n        } else {\n            this.perEnvelopeSpeed = Config.envelopes.dictionary[envelopeObject[\"envelope\"]].speed;\n        }\n\n        if (envelopeObject[\"perEnvelopeLowerBound\"] != undefined) {\n            this.perEnvelopeLowerBound = clamp(Config.perEnvelopeBoundMin, Config.perEnvelopeBoundMax + 1, envelopeObject[\"perEnvelopeLowerBound\"]);\n        } else {\n            this.perEnvelopeLowerBound = 0;\n        }\n\n        if (envelopeObject[\"perEnvelopeUpperBound\"] != undefined) {\n            this.perEnvelopeUpperBound = clamp(Config.perEnvelopeBoundMin, Config.perEnvelopeBoundMax + 1, envelopeObject[\"perEnvelopeUpperBound\"]);\n        } else {\n            this.perEnvelopeUpperBound = 1;\n        }\n\n        //convert tremolo2 settings into lfo\n        if (isTremolo2) {\n            if (this.inverse) {\n                this.perEnvelopeUpperBound = Math.floor((this.perEnvelopeUpperBound / 2) * 10) / 10;\n                this.perEnvelopeLowerBound = Math.floor((this.perEnvelopeLowerBound / 2) * 10) / 10;\n            } else {\n                this.perEnvelopeUpperBound = Math.floor((0.5 + (this.perEnvelopeUpperBound - this.perEnvelopeLowerBound) / 2) * 10) / 10;\n                this.perEnvelopeLowerBound = 0.5;\n            }\n        }\n\n        if (envelopeObject[\"steps\"] != undefined) {\n            this.steps = clamp(1, Config.randomEnvelopeStepsMax + 1, envelopeObject[\"steps\"]);\n        } else {\n            this.steps = 2;\n        }\n\n        if (envelopeObject[\"seed\"] != undefined) {\n            this.seed = clamp(1, Config.randomEnvelopeSeedMax + 1, envelopeObject[\"seed\"]);\n        } else {\n            this.seed = 2;\n        }\n\n        if (envelopeObject[\"waveform\"] != undefined) {\n            this.waveform = envelopeObject[\"waveform\"];\n        } else {\n            this.waveform = LFOEnvelopeTypes.sine;\n        }\n\n        if (envelopeObject[\"discrete\"] != undefined) {\n            this.discrete = envelopeObject[\"discrete\"];\n        } else {\n            this.discrete = false;\n        }\n    }\n}\n", "// Copyright (c) John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { EffectType, Config } from \"./SynthConfig\";\nimport { FilterSettings } from \"./Filter\";\n\nexport class Effect {\n\ttype: EffectType = EffectType.reverb;\n\twetDryMix: number = 0.5;\n\tsend: number = 1;\n\n\teqFilter: FilterSettings = new FilterSettings();\n\teqFilterType: boolean = false;\n\teqFilterSimpleCut: number = Config.filterSimpleCutRange - 1;\n\teqFilterSimplePeak: number = 0;\n\teqSubFilters: (FilterSettings | null)[] = [];\n\ttmpEqFilterStart: FilterSettings | null;\n\ttmpEqFilterEnd: FilterSettings | null;\n\t//public envelopes: EnvelopeSettings[] = [];\n\t//public envelopeCount: number = 0;\n\t//public envelopeSpeed: number = 12;\n\n\tgain: number = Config.volumeRange / 2;\n\tpan: number = Config.panCenter;\n\tpanDelay: number = 0;\n\tpanMode: number = 0;\n\taliases: boolean = false;\n\tdistortion: number = 0;\n\tbitcrusherFreq: number = 0;\n\tbitcrusherQuantization: number = 0;\n\tringModulation: number = Math.floor(Config.ringModRange/2);\n\tringModulationHz: number = Math.floor(Config.ringModHzRange / 2);\n\tringModWaveformIndex: number = 0;\n\tringModPulseWidth: number = 0;\n\tringModHzOffset: number = 200;\n\tgranular: number = 4;\n\tgrainSize: number = (Config.grainSizeMax-Config.grainSizeMin)/Config.grainSizeStep;\n\tgrainAmounts: number = Config.grainAmountsMax;\n\tgrainRange: number = 40;\n\tflanger: number = 0;\n\tflangerSpeed: number = 0;\n\tflangerDepth: number = 0;\n\tflangerFeedback: number = 0;\n\tchorus: number = 0;\n\treverb: number = 0;\n\techoSustain: number = 0;\n\techoDelay: number = 0;\n\techoPingPong: number = Config.panCenter;\n\n\tconstructor(type: EffectType) {\n\t\tthis.type = type;\n\t}\n}\n", "// Copyright (c) John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { Dictionary, DictionaryArray, toNameMap, SustainType, EnvelopeType, InstrumentType, EffectType, MDEffectType, Transition, Unison, Chord, Vibrato, Envelope, AutomationTarget, Config, effectsIncludeTransition, effectsIncludeChord, effectsIncludePitchShift, effectsIncludeDetune, effectsIncludeVibrato, LFOEnvelopeTypes } from \"./SynthConfig\";\nimport { FilterSettings } from \"./Filter\";\nimport { EnvelopeSettings } from \"./Envelope\";\nimport { Effect } from \"./Effect\";\nimport { clamp, fadeInSettingToSeconds, secondsToFadeInSetting, fadeOutSettingToTicks, ticksToFadeOutSetting, detuneToCents, centsToDetune, fittingPowerOfTwo } from \"./utils\";\n\n// Settings that were available to old versions of BeepBox but are no longer available in the\n// current version that need to be reinterpreted as a group to determine the best way to\n// represent them in the current version.\nexport interface LegacySettings {\n    filterCutoff?: number;\n    filterResonance?: number;\n    filterEnvelope?: Envelope;\n    pulseEnvelope?: Envelope;\n    operatorEnvelopes?: Envelope[];\n    feedbackEnvelope?: Envelope;\n}\n\nexport class Operator {\n    frequency: number = 4;\n    amplitude: number = 0;\n    waveform: number = 0;\n    pulseWidth: number = 0.5;\n\n    constructor(index: number) {\n        this.reset(index);\n    }\n\n    reset(index: number): void {\n        this.frequency = 4; //defualt to 1x\n        this.amplitude = (index <= 1) ? Config.operatorAmplitudeMax : 0;\n        this.waveform = 0;\n        this.pulseWidth = 5;\n    }\n\n    copy(other: Operator): void {\n        this.frequency = other.frequency;\n        this.amplitude = other.amplitude;\n        this.waveform = other.waveform;\n        this.pulseWidth = other.pulseWidth;\n    }\n}\n\nexport class CustomAlgorithm {\n    name: string = \"\";\n    carrierCount: number = 0;\n    modulatedBy: number[][] = [[], [], [], [], [], []];\n    associatedCarrier: number[] = [];\n\n    constructor() {\n        this.fromPreset(1);\n    }\n\n    set(carriers: number, modulation: number[][]) {\n        this.reset();\n        this.carrierCount = carriers;\n        for (let i = 0; i < this.modulatedBy.length; i++) {\n            this.modulatedBy[i] = modulation[i];\n            if (i < carriers) {\n                this.associatedCarrier[i] = i + 1;\n            }\n            this.name += (i + 1);\n            for (let j = 0; j < modulation[i].length; j++) {\n                this.name += modulation[i][j];\n                if (modulation[i][j] > carriers - 1) {\n                    this.associatedCarrier[modulation[i][j] - 1] = i + 1;\n                }\n                this.name += \",\";\n            }\n            if (i < carriers) {\n                this.name += \"|\";\n            } else {\n                this.name += \".\";\n            }\n        }\n    }\n\n    reset(): void {\n        this.name = \"\"\n        this.carrierCount = 1;\n        this.modulatedBy = [[2, 3, 4, 5, 6], [], [], [], [], []];\n        this.associatedCarrier = [1, 1, 1, 1, 1, 1];\n    }\n\n    copy(other: CustomAlgorithm): void {\n        this.name = other.name;\n        this.carrierCount = other.carrierCount;\n        this.modulatedBy = other.modulatedBy;\n        this.associatedCarrier = other.associatedCarrier;\n    }\n\n    fromPreset(other: number): void {\n        this.reset();\n        let preset = Config.algorithms6Op[other]\n        this.name = preset.name;\n        this.carrierCount = preset.carrierCount;\n        for (var i = 0; i < preset.modulatedBy.length; i++) {\n            this.modulatedBy[i] = Array.from(preset.modulatedBy[i]);\n            this.associatedCarrier[i] = preset.associatedCarrier[i];\n        }\n    }\n}\n\nexport class CustomFeedBack { //feels redunant\n    name: string = \"\";\n    indices: number[][] = [[], [], [], [], [], []];\n\n    constructor() {\n        this.fromPreset(1);\n    }\n\n    set(inIndices: number[][]) {\n        this.reset();\n        for (let i = 0; i < this.indices.length; i++) {\n            this.indices[i] = inIndices[i];\n            for (let j = 0; j < inIndices[i].length; j++) {\n                this.name += inIndices[i][j];\n                this.name += \",\";\n            }\n            this.name += \".\";\n        }\n    }\n\n    reset(): void {\n        this.reset;\n        this.name = \"\";\n        this.indices = [[1], [], [], [], [], []];\n    }\n\n    copy(other: CustomFeedBack): void {\n        this.name = other.name;\n        this.indices = other.indices;\n    }\n\n    fromPreset(other: number): void {\n        this.reset();\n        let preset = Config.feedbacks6Op[other]\n        for (var i = 0; i < preset.indices.length; i++) {\n            this.indices[i] = Array.from(preset.indices[i]);\n            for (let j = 0; j < preset.indices[i].length; j++) {\n                this.name += preset.indices[i][j];\n                this.name += \",\";\n            }\n            this.name += \".\";\n        }\n    }\n}\n\nexport class SpectrumWave {\n    spectrum: number[] = [];\n    hash: number = -1;\n\n    constructor(isNoiseChannel: boolean) {\n        this.reset(isNoiseChannel);\n    }\n\n    reset(isNoiseChannel: boolean): void {\n        for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n            if (isNoiseChannel) {\n                this.spectrum[i] = Math.round(Config.spectrumMax * (1 / Math.sqrt(1 + i / 3)));\n            } else {\n                const isHarmonic: boolean = i == 0 || i == 7 || i == 11 || i == 14 || i == 16 || i == 18 || i == 21 || i == 23 || i >= 25;\n                this.spectrum[i] = isHarmonic ? Math.max(0, Math.round(Config.spectrumMax * (1 - i / 30))) : 0;\n            }\n        }\n        this.markCustomWaveDirty();\n    }\n\n    markCustomWaveDirty(): void {\n        const hashMult: number = fittingPowerOfTwo(Config.spectrumMax + 2) - 1;\n        let hash: number = 0;\n        for (const point of this.spectrum) hash = ((hash * hashMult) + point) >>> 0;\n        this.hash = hash;\n    }\n}\n\nexport class HarmonicsWave {\n    harmonics: number[] = [];\n    hash: number = -1;\n\n    constructor() {\n        this.reset();\n    }\n\n    reset(): void {\n        for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\n            this.harmonics[i] = 0;\n        }\n        this.harmonics[0] = Config.harmonicsMax;\n        this.harmonics[3] = Config.harmonicsMax;\n        this.harmonics[6] = Config.harmonicsMax;\n        this.markCustomWaveDirty();\n    }\n\n    markCustomWaveDirty(): void {\n        const hashMult: number = fittingPowerOfTwo(Config.harmonicsMax + 2) - 1;\n        let hash: number = 0;\n        for (const point of this.harmonics) hash = ((hash * hashMult) + point) >>> 0;\n        this.hash = hash;\n    }\n}\n\nexport class Instrument {\n    type: InstrumentType = InstrumentType.chip;\n    preset: number = 0;\n    chipWave: number = 2;\n    // advloop addition\n    isUsingAdvancedLoopControls: boolean = false;\n    chipWaveLoopStart: number = 0;\n    chipWaveLoopEnd = Config.rawRawChipWaves[this.chipWave].samples.length - 1;\n    chipWaveLoopMode: number = 0; // 0: loop, 1: ping-pong, 2: once, 3: play loop once\n    chipWavePlayBackwards: boolean = false;\n    chipWaveStartOffset: number = 0;\n    // advloop addition\n    chipWaveInStereo: boolean = false;\n    chipNoise: number = 1;\n    noteFilter: FilterSettings = new FilterSettings();\n    noteFilterType: boolean = false;\n    noteFilterSimpleCut: number = Config.filterSimpleCutRange - 1;\n    noteFilterSimplePeak: number = 0;\n    noteSubFilters: (FilterSettings | null)[] = [];\n    tmpNoteFilterStart: FilterSettings | null;\n    tmpNoteFilterEnd: FilterSettings | null;\n    envelopes: EnvelopeSettings[] = [];\n    fadeIn: number = 0;\n    fadeOut: number = Config.fadeOutNeutral;\n    envelopeCount: number = 0;\n    transition: number = Config.transitions.dictionary[\"normal\"].index;\n    pitchShift: number = 0;\n    detune: number = 0;\n    vibrato: number = 0;\n    interval: number = 0;\n    vibratoDepth: number = 0;\n    vibratoSpeed: number = 10;\n    vibratoDelay: number = 0;\n    vibratoType: number = 0;\n    envelopeSpeed: number = 12;\n    unison: number = 0;\n    unisonVoices: number = 1;\n    unisonSpread: number = 0.0;\n    unisonOffset: number = 0.0;\n    unisonExpression: number = 1.4;\n    unisonSign: number = 1.0;\n    effects: Effect[] = [];\n    effectCount: number = 0;\n    mdeffects: number = 0;\n    chord: number = 1;\n    volume: number = 0;\n    arpeggioSpeed: number = 12;\n    monoChordTone: number = 0;\n    fastTwoNoteArp: boolean = false;\n    legacyTieOver: boolean = false;\n    clicklessTransition: boolean = false;\n    aliases: boolean = false;\n    pulseWidth: number = Config.pulseWidthRange;\n    decimalOffset: number = 0;\n    supersawDynamism: number = Config.supersawDynamismMax;\n    supersawSpread: number = Math.ceil(Config.supersawSpreadMax / 2.0);\n    supersawShape: number = 0;\n    stringSustain: number = 10;\n    stringSustainType: SustainType = SustainType.acoustic;\n    algorithm: number = 0;\n    feedbackType: number = 0;\n    algorithm6Op: number = 1;\n    feedbackType6Op: number = 1;//default to not custom\n    customAlgorithm: CustomAlgorithm = new CustomAlgorithm(); //{ name: \"1\u21904(2\u21905 3\u21906\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[2, 3, 4], [5], [6], [], [], []] };\n    customFeedbackType: CustomFeedBack = new CustomFeedBack(); //{ name: \"1\u21944 2\u21945 3\u21946\", indices: [[3], [5], [6], [1], [2], [3]] };\n    feedbackAmplitude: number = 0;\n    customChipWave: Float32Array = new Float32Array(64);\n    customChipWaveIntegral: Float32Array = new Float32Array(65); // One extra element for wrap-around in chipSynth.\n    readonly operators: Operator[] = [];\n    readonly spectrumWave: SpectrumWave;\n    readonly harmonicsWave: HarmonicsWave = new HarmonicsWave();\n    readonly drumsetEnvelopes: number[] = [];\n    readonly drumsetSpectrumWaves: SpectrumWave[] = [];\n    modChannels: number[][] = [];\n    modInstruments: number[][] = [];\n    modulators: number[] = [];\n    modFilterTypes: number[] = [];\n    modEnvelopeNumbers: number[] = [];\n    invalidModulators: boolean[] = [];\n\n    //Literally just for pitch envelopes.\n    isNoiseInstrument: boolean = false;\n    constructor(isNoiseChannel: boolean, isModChannel: boolean) {\n\n        // @jummbus - My screed on how modulator arrays for instruments work, for the benefit of myself in the future, or whoever else.\n        //\n        // modulators[mod] is the index in Config.modulators to use, with \"none\" being the first entry.\n        //\n        // modChannels[mod] gives the index of a channel set for this mod. Two special values:\n        //   -2 \"none\"\n        //   -1 \"song\"\n        //   0+ actual channel index\n        //\n        // modInstruments[mod] gives the index of an instrument within the channel set for this mod.\n        //   [0 ~ channel.instruments.length-1]     channel's instrument index\n        //\n        // in Theepbox, the channel and instrument is given as a list because many channel-instrument pairs can be enabled at once :3\n        //\n        // modFilterTypes[mod] gives some info about the filter type: 0 is morph, 1+ is index in the dot selection array (dot 1 x, dot 1 y, dot 2 x...)\n        //   0  filter morph\n        //   1+ filter dot target, starting from dot 1 x and then dot 1 y, then repeating x, y for all dots in order. Note: odd values are always \"x\" targets, even are \"y\".\n\n        if (isModChannel) {\n            for (let mod: number = 0; mod < Config.modCount; mod++) {\n                this.modChannels.push([-2]);\n                this.modInstruments.push([0]);\n                this.modulators.push(Config.modulators.dictionary[\"none\"].index);\n            }\n        }\n\n        this.spectrumWave = new SpectrumWave(isNoiseChannel);\n        for (let i: number = 0; i < Config.operatorCount + 2; i++) {//hopefully won't break everything\n            this.operators[i] = new Operator(i);\n        }\n        for (let i: number = 0; i < Config.drumCount; i++) {\n            this.drumsetEnvelopes[i] = Config.envelopes.dictionary[\"twang 2\"].index;\n            this.drumsetSpectrumWaves[i] = new SpectrumWave(true);\n        }\n\n        for (let i = 0; i < 64; i++) {\n            this.customChipWave[i] = 24 - Math.floor(i * (48 / 64));\n        }\n\n        let sum: number = 0.0;\n        for (let i: number = 0; i < this.customChipWave.length; i++) {\n            sum += this.customChipWave[i];\n        }\n        const average: number = sum / this.customChipWave.length;\n\n        // Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\n        let cumulative: number = 0;\n        let wavePrev: number = 0;\n        for (let i: number = 0; i < this.customChipWave.length; i++) {\n            cumulative += wavePrev;\n            wavePrev = this.customChipWave[i] - average;\n            this.customChipWaveIntegral[i] = cumulative;\n        }\n\n        // 65th, last sample is for anti-aliasing\n        this.customChipWaveIntegral[64] = 0.0;\n\n        //properly sets the isNoiseInstrument value\n        this.isNoiseInstrument = isNoiseChannel;\n\n    }\n\n    setTypeAndReset(type: InstrumentType, isNoiseChannel: boolean, isModChannel: boolean): void {\n        // Mod channels are forced to one type.\n        if (isModChannel) type = InstrumentType.mod;\n        this.type = type;\n        this.preset = type;\n        this.volume = 0;\n        this.effects = [];\n        this.effectCount = 0;\n        this.mdeffects = 0;\n        for (let i: number = 0; i < Config.filterMorphCount; i++) {\n            this.noteSubFilters[i] = null;\n        }\n        this.noteFilter.reset();\n        this.noteFilterType = false;\n        this.noteFilterSimpleCut = Config.filterSimpleCutRange - 1;\n        this.noteFilterSimplePeak = 0;\n        this.pitchShift = Config.pitchShiftCenter;\n        this.detune = Config.detuneCenter;\n        this.vibrato = 0;\n        this.unison = 0;\n        this.stringSustain = 10;\n        this.stringSustainType = Config.enableAcousticSustain ? SustainType.acoustic : SustainType.bright;\n        this.clicklessTransition = false;\n        this.arpeggioSpeed = 12;\n        this.monoChordTone = 1;\n        this.envelopeSpeed = 12;\n        this.legacyTieOver = false;\n        this.aliases = false;\n        this.fadeIn = 0;\n        this.fadeOut = Config.fadeOutNeutral;\n        this.transition = Config.transitions.dictionary[\"normal\"].index;\n        this.envelopeCount = 0;\n        this.isNoiseInstrument = isNoiseChannel;\n        switch (type) {\n            case InstrumentType.chip:\n                this.chipWave = 2;\n                // TODO: enable the chord effect?\n                this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                // advloop addition\n                this.isUsingAdvancedLoopControls = false;\n                this.chipWaveLoopStart = 0;\n                this.chipWaveLoopEnd = Config.rawRawChipWaves[this.chipWave].samples.length - 1;\n                this.chipWaveLoopMode = 0;\n                this.chipWavePlayBackwards = false;\n                this.chipWaveInStereo = false;\n                this.chipWaveStartOffset = 0;\n                // advloop addition\n                break;\n            case InstrumentType.customChipWave:\n                this.chipWave = 2;\n                this.chipWaveInStereo = false;\n                this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                for (let i: number = 0; i < 64; i++) {\n                    this.customChipWave[i] = 24 - (Math.floor(i * (48 / 64)));\n                }\n\n                let sum: number = 0.0;\n                for (let i: number = 0; i < this.customChipWave.length; i++) {\n                    sum += this.customChipWave[i];\n                }\n                const average: number = sum / this.customChipWave.length;\n\n                // Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\n                let cumulative: number = 0;\n                let wavePrev: number = 0;\n                for (let i: number = 0; i < this.customChipWave.length; i++) {\n                    cumulative += wavePrev;\n                    wavePrev = this.customChipWave[i] - average;\n                    this.customChipWaveIntegral[i] = cumulative;\n                }\n\n                this.customChipWaveIntegral[64] = 0.0;\n                break;\n            case InstrumentType.fm:\n                this.chord = Config.chords.dictionary[\"custom interval\"].index;\n                this.algorithm = 0;\n                this.feedbackType = 0;\n                this.feedbackAmplitude = 0;\n                for (let i: number = 0; i < this.operators.length; i++) {\n                    this.operators[i].reset(i);\n                }\n                break;\n            case InstrumentType.fm6op:\n                this.transition = 1;\n                this.vibrato = 0;\n                this.chord = 3;\n                this.algorithm = 0;\n                this.feedbackType = 0;\n                this.algorithm6Op = 1;\n                this.feedbackType6Op = 1;\n                this.customAlgorithm.fromPreset(1);\n                this.feedbackAmplitude = 0;\n                for (let i: number = 0; i < this.operators.length; i++) {\n                    this.operators[i].reset(i);\n                }\n                break;\n            case InstrumentType.noise:\n                this.chipNoise = 1;\n                this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                break;\n            case InstrumentType.spectrum:\n                this.chord = Config.chords.dictionary[\"simultaneous\"].index;\n                this.spectrumWave.reset(isNoiseChannel);\n                break;\n            case InstrumentType.drumset:\n                this.chord = Config.chords.dictionary[\"simultaneous\"].index;\n                for (let i: number = 0; i < Config.drumCount; i++) {\n                    this.drumsetEnvelopes[i] = Config.envelopes.dictionary[\"twang 2\"].index;\n                    if (this.drumsetSpectrumWaves[i] == undefined) {\n                        this.drumsetSpectrumWaves[i] = new SpectrumWave(true);\n                    }\n                    this.drumsetSpectrumWaves[i].reset(isNoiseChannel);\n                }\n                break;\n            case InstrumentType.harmonics:\n                this.chord = Config.chords.dictionary[\"simultaneous\"].index;\n                this.harmonicsWave.reset();\n                break;\n            case InstrumentType.pwm:\n                this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                this.pulseWidth = Config.pulseWidthRange;\n                this.decimalOffset = 0;\n                break;\n            case InstrumentType.pickedString:\n                this.chord = Config.chords.dictionary[\"strum\"].index;\n                this.harmonicsWave.reset();\n                break;\n            case InstrumentType.mod:\n                this.transition = 0;\n                this.vibrato = 0;\n                this.interval = 0;\n                this.chord = 0;\n                this.modChannels = [];\n                this.modInstruments = [];\n                this.modulators = [];\n                for (let mod: number = 0; mod < Config.modCount; mod++) {\n                    this.modChannels.push([-2]);\n                    this.modInstruments.push([0]);\n                    this.modulators.push(Config.modulators.dictionary[\"none\"].index);\n                    this.invalidModulators[mod] = false;\n                    this.modFilterTypes[mod] = 0;\n                    this.modEnvelopeNumbers[mod] = 0;\n                }\n                break;\n            case InstrumentType.supersaw:\n                this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                this.supersawDynamism = Config.supersawDynamismMax;\n                this.supersawSpread = Math.ceil(Config.supersawSpreadMax / 2.0);\n                this.supersawShape = 0;\n                this.pulseWidth = Config.pulseWidthRange - 1;\n                this.decimalOffset = 0;\n                break;\n            default:\n                throw new Error(\"Unrecognized instrument type: \" + type);\n        }\n        // Chip/noise instruments had arpeggio and FM had custom interval but neither\n        // explicitly saved the chorus setting beforeSeven so enable it here. The effects\n        // will otherwise get overridden when reading SongTagCode.startInstrument.\n        if (this.chord != Config.chords.dictionary[\"simultaneous\"].index) {\n            // Enable chord if it was used.\n            this.mdeffects = (this.mdeffects | (1 << MDEffectType.chord));\n        }\n    }\n\n    // (only) difference for JummBox: Returns whether or not the note filter was chosen for filter conversion.\n    convertLegacySettings(legacySettings: LegacySettings, forceSimpleFilter: boolean): void {\n        let legacyCutoffSetting: number | undefined = legacySettings.filterCutoff;\n        let legacyResonanceSetting: number | undefined = legacySettings.filterResonance;\n        let legacyFilterEnv: Envelope | undefined = legacySettings.filterEnvelope;\n        let legacyPulseEnv: Envelope | undefined = legacySettings.pulseEnvelope;\n        let legacyOperatorEnvelopes: Envelope[] | undefined = legacySettings.operatorEnvelopes;\n        let legacyFeedbackEnv: Envelope | undefined = legacySettings.feedbackEnvelope;\n\n        // legacy defaults:\n        if (legacyCutoffSetting == undefined) legacyCutoffSetting = (this.type == InstrumentType.chip) ? 6 : 10;\n        if (legacyResonanceSetting == undefined) legacyResonanceSetting = 0;\n        if (legacyFilterEnv == undefined) legacyFilterEnv = Config.envelopes.dictionary[\"none\"];\n        if (legacyPulseEnv == undefined) legacyPulseEnv = Config.envelopes.dictionary[(this.type == InstrumentType.pwm) ? \"twang 2\" : \"none\"];\n        if (legacyOperatorEnvelopes == undefined) legacyOperatorEnvelopes = [Config.envelopes.dictionary[(this.type == InstrumentType.fm) ? \"note size\" : \"none\"], Config.envelopes.dictionary[\"none\"], Config.envelopes.dictionary[\"none\"], Config.envelopes.dictionary[\"none\"]];\n        if (legacyFeedbackEnv == undefined) legacyFeedbackEnv = Config.envelopes.dictionary[\"none\"];\n\n        // The \"punch\" envelope is special: it goes *above* the chosen cutoff. But if the cutoff was already at the max, it couldn't go any higher... except in the current version of BeepBox I raised the max cutoff so it *can* but then it sounds different, so to preserve the original sound let's just remove the punch envelope.\n        const legacyFilterCutoffRange: number = 11;\n        const cutoffAtMax: boolean = (legacyCutoffSetting == legacyFilterCutoffRange - 1);\n        if (cutoffAtMax && legacyFilterEnv.type == EnvelopeType.punch) legacyFilterEnv = Config.envelopes.dictionary[\"none\"];\n\n        const carrierCount: number = Config.algorithms[this.algorithm].carrierCount;\n        let noCarriersControlledByNoteSize: boolean = true;\n        let allCarriersControlledByNoteSize: boolean = true;\n        let noteSizeControlsSomethingElse: boolean = (legacyFilterEnv.type == EnvelopeType.noteSize) || (legacyPulseEnv.type == EnvelopeType.noteSize);\n        if (this.type == InstrumentType.fm || this.type == InstrumentType.fm6op) {\n            noteSizeControlsSomethingElse = noteSizeControlsSomethingElse || (legacyFeedbackEnv.type == EnvelopeType.noteSize);\n            for (let i: number = 0; i < legacyOperatorEnvelopes.length; i++) {\n                if (i < carrierCount) {\n                    if (legacyOperatorEnvelopes[i].type != EnvelopeType.noteSize) {\n                        allCarriersControlledByNoteSize = false;\n                    } else {\n                        noCarriersControlledByNoteSize = false;\n                    }\n                } else {\n                    noteSizeControlsSomethingElse = noteSizeControlsSomethingElse || (legacyOperatorEnvelopes[i].type == EnvelopeType.noteSize);\n                }\n            }\n        }\n\n        this.envelopeCount = 0;\n\n        if (this.type == InstrumentType.fm || this.type == InstrumentType.fm6op) {\n            if (allCarriersControlledByNoteSize && noteSizeControlsSomethingElse) {\n                this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"noteVolume\"].index, 0, Config.envelopes.dictionary[\"note size\"].index, false);\n            } else if (noCarriersControlledByNoteSize && !noteSizeControlsSomethingElse) {\n                this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"none\"].index, 0, Config.envelopes.dictionary[\"note size\"].index, false);\n            }\n        }\n\n        /*\n        if (legacyFilterEnv.type == EnvelopeType.none) {\n            this.noteFilter.reset();\n            this.noteFilterType = false;\n            this.eqFilter.convertLegacySettings(legacyCutoffSetting, legacyResonanceSetting, legacyFilterEnv);\n            this.addEffect(EffectType.eqFilter);\n            if (forceSimpleFilter || this.eqFilterType) {\n                this.eqFilterType = true;\n                this.eqFilterSimpleCut = legacyCutoffSetting;\n                this.eqFilterSimplePeak = legacyResonanceSetting;\n            }\n        } else {\n            this.eqFilter.reset();\n\n            this.eqFilterType = false;\n            this.noteFilterType = false;\n            this.noteFilter.convertLegacySettings(legacyCutoffSetting, legacyResonanceSetting, legacyFilterEnv);\n            this.removeEffect(EffectType.eqFilter);\n            this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"noteFilterAllFreqs\"].index, 0, legacyFilterEnv.index, false);\n            if (forceSimpleFilter || this.noteFilterType) {\n                this.noteFilterType = true;\n                this.noteFilterSimpleCut = legacyCutoffSetting;\n                this.noteFilterSimplePeak = legacyResonanceSetting;\n            }\n        }\n        */\n\n        if (legacyPulseEnv.type != EnvelopeType.none) {\n            this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"pulseWidth\"].index, 0, legacyPulseEnv.index, false);\n        }\n\n        for (let i: number = 0; i < legacyOperatorEnvelopes.length; i++) {\n            if (i < carrierCount && allCarriersControlledByNoteSize) continue;\n            if (legacyOperatorEnvelopes[i].type != EnvelopeType.none) {\n                this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"operatorAmplitude\"].index, i, legacyOperatorEnvelopes[i].index, false);\n            }\n        }\n\n        if (legacyFeedbackEnv.type != EnvelopeType.none) {\n            this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"feedbackAmplitude\"].index, 0, legacyFeedbackEnv.index, false);\n        }\n    }\n\n    toJsonObject(): Object {\n        const instrumentObject: any = {\n            \"type\": Config.instrumentTypeNames[this.type],\n            \"volume\": this.volume,\n            \"noteFilter\": this.noteFilter.toJsonObject(),\n            \"noteFilterType\": this.noteFilterType,\n            \"noteSimpleCut\": this.noteFilterSimpleCut,\n            \"noteSimplePeak\": this.noteFilterSimplePeak,\n            \"envelopeSpeed\": this.envelopeSpeed,\n        };\n\n        if (this.preset != this.type) {\n            instrumentObject[\"preset\"] = this.preset;\n        }\n\n        for (let i: number = 0; i < Config.filterMorphCount; i++) {\n            if (this.noteSubFilters[i] != null)\n                instrumentObject[\"noteSubFilters\" + i] = this.noteSubFilters[i]!.toJsonObject();\n        }\n\n        //instrumentObject[\"effects\"] = this.effects;\n        instrumentObject[\"mdeffects\"] = this.mdeffects;\n\n        if (effectsIncludeTransition(this.mdeffects)) {\n            instrumentObject[\"transition\"] = Config.transitions[this.transition].name;\n            instrumentObject[\"clicklessTransition\"] = this.clicklessTransition;\n        }\n        if (effectsIncludeChord(this.mdeffects)) {\n            instrumentObject[\"chord\"] = this.getChord().name;\n            instrumentObject[\"fastTwoNoteArp\"] = this.fastTwoNoteArp;\n            instrumentObject[\"arpeggioSpeed\"] = this.arpeggioSpeed;\n            instrumentObject[\"monoChordTone\"] = this.monoChordTone;\n        }\n        if (effectsIncludePitchShift(this.mdeffects)) {\n            instrumentObject[\"pitchShiftSemitones\"] = this.pitchShift;\n        }\n        if (effectsIncludeDetune(this.mdeffects)) {\n            instrumentObject[\"detuneCents\"] = detuneToCents(this.detune);\n        }\n        if (effectsIncludeVibrato(this.mdeffects)) {\n            if (this.vibrato == -1) {\n                this.vibrato = 5;\n            }\n            if (this.vibrato != 5) {\n                instrumentObject[\"vibrato\"] = Config.vibratos[this.vibrato].name;\n            } else {\n                instrumentObject[\"vibrato\"] = \"custom\";\n            }\n            instrumentObject[\"vibratoDepth\"] = this.vibratoDepth;\n            instrumentObject[\"vibratoDelay\"] = this.vibratoDelay;\n            instrumentObject[\"vibratoSpeed\"] = this.vibratoSpeed;\n            instrumentObject[\"vibratoType\"] = this.vibratoType;\n        }\n        /*\n        for (let i: number = 0; i < this.effectCount; i++) {\n            let effect: Effect | null = this.effects[i]\n            if (effect == null) continue;\n            if (effect.type == EffectType.eqFilter) {\n                instrumentObject[\"eqFilterType\"] = effect.eqFilterType;\n                instrumentObject[\"eqSimpleCut\"] = effect.eqFilterSimpleCut;\n                instrumentObject[\"eqSimplePeak\"] = effect.eqFilterSimplePeak;\n                instrumentObject[\"eqFilter\"] = effect.eqFilter.toJsonObject();\n\n                for (let j: number = 0; j < Config.filterMorphCount; j++) {\n                    if (effect.eqSubFilters[j] != null)\n                        instrumentObject[\"eqSubFilters\" + j] = effect.eqSubFilters[j]!.toJsonObject();\n                }\n            }\n            else if (effect.type == EffectType.granular) {\n                instrumentObject[\"granular\"] = effect.granular;\n                instrumentObject[\"grainSize\"] = effect.grainSize;\n                instrumentObject[\"grainAmounts\"] = effect.grainAmounts;\n                instrumentObject[\"grainRange\"] = effect.grainRange;\n            }\n            else if (effect.type == EffectType.ringModulation) {\n                instrumentObject[\"ringMod\"] = Math.round(100 * effect.ringModulation / (Config.ringModRange - 1));\n                instrumentObject[\"ringModHz\"] = Math.round(100 * effect.ringModulationHz / (Config.ringModHzRange - 1));\n                instrumentObject[\"ringModWaveformIndex\"] = effect.ringModWaveformIndex;\n                instrumentObject[\"ringModPulseWidth\"] = Math.round(100 * effect.ringModPulseWidth / (Config.pulseWidthRange - 1));\n                instrumentObject[\"ringModHzOffset\"] = Math.round(100 * effect.ringModHzOffset / (Config.rmHzOffsetMax));\n            }\n            else if (effect.type == EffectType.distortion) {\n                instrumentObject[\"distortion\"] = Math.round(100 * effect.distortion / (Config.distortionRange - 1));\n                instrumentObject[\"aliases\"] = this.aliases;\n            }\n            else if (effect.type == EffectType.bitcrusher) {\n                instrumentObject[\"bitcrusherOctave\"] = (Config.bitcrusherFreqRange - 1 - effect.bitcrusherFreq) * Config.bitcrusherOctaveStep;\n                instrumentObject[\"bitcrusherQuantization\"] = Math.round(100 * effect.bitcrusherQuantization / (Config.bitcrusherQuantizationRange - 1));\n            }\n            else if (effect.type == EffectType.panning) {\n                instrumentObject[\"pan\"] = Math.round(100 * (effect.pan - Config.panCenter) / Config.panCenter);\n                instrumentObject[\"panDelay\"] = effect.panDelay;\n            }\n            else if (effect.type == EffectType.chorus) {\n                instrumentObject[\"chorus\"] = Math.round(100 * effect.chorus / (Config.chorusRange - 1));\n            }\n            else if (effect.type == EffectType.echo) {\n                instrumentObject[\"echoSustain\"] = Math.round(100 * effect.echoSustain / (Config.echoSustainRange - 1));\n                instrumentObject[\"echoDelayBeats\"] = Math.round(1000 * (effect.echoDelay + 1) * Config.echoDelayStepTicks / (Config.ticksPerPart * Config.partsPerBeat)) / 1000;\n                instrumentObject[\"echoPingPong\"] = Math.round(100 * (effect.echoPingPong - Config.panCenter) / Config.panCenter);\n            }\n            else if (effect.type == EffectType.reverb) {\n                instrumentObject[\"reverb\"] = Math.round(100 * effect.reverb / (Config.reverbRange - 1));\n            }\n        }\n        */\n\n        if (this.type != InstrumentType.drumset) {\n            instrumentObject[\"fadeInSeconds\"] = Math.round(10000 * fadeInSettingToSeconds(this.fadeIn)) / 10000;\n            instrumentObject[\"fadeOutTicks\"] = fadeOutSettingToTicks(this.fadeOut);\n        }\n\n        if (this.type == InstrumentType.harmonics || this.type == InstrumentType.pickedString) {\n            instrumentObject[\"harmonics\"] = [];\n            for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\n                instrumentObject[\"harmonics\"][i] = Math.round(100 * this.harmonicsWave.harmonics[i] / Config.harmonicsMax);\n            }\n        }\n\n        if (this.type == InstrumentType.noise) {\n            instrumentObject[\"wave\"] = Config.chipNoises[this.chipNoise].name;\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\n            if (this.unison == Config.unisons.length) {\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\n            }\n        } else if (this.type == InstrumentType.spectrum) {\n            instrumentObject[\"spectrum\"] = [];\n            for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n                instrumentObject[\"spectrum\"][i] = Math.round(100 * this.spectrumWave.spectrum[i] / Config.spectrumMax);\n            }\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\n            if (this.unison == Config.unisons.length) {\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\n            }\n        } else if (this.type == InstrumentType.drumset) {\n            instrumentObject[\"drums\"] = [];\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\n            if (this.unison == Config.unisons.length) {\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\n            }\n            for (let j: number = 0; j < Config.drumCount; j++) {\n                const spectrum: number[] = [];\n                for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n                    spectrum[i] = Math.round(100 * this.drumsetSpectrumWaves[j].spectrum[i] / Config.spectrumMax);\n                }\n                instrumentObject[\"drums\"][j] = {\n                    \"filterEnvelope\": this.getDrumsetEnvelope(j).name,\n                    \"spectrum\": spectrum,\n                };\n            }\n        } else if (this.type == InstrumentType.chip) {\n            instrumentObject[\"wave\"] = Config.chipWaves[this.chipWave].name;\n            // should this unison pushing code be turned into a function..?\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\n            // these don't need to be pushed if custom unisons aren't being used\n            if (this.unison == Config.unisons.length) {\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\n            }\n\n            // advloop addition\n            instrumentObject[\"isUsingAdvancedLoopControls\"] = this.isUsingAdvancedLoopControls;\n            instrumentObject[\"chipWaveLoopStart\"] = this.chipWaveLoopStart;\n            instrumentObject[\"chipWaveLoopEnd\"] = this.chipWaveLoopEnd;\n            instrumentObject[\"chipWaveLoopMode\"] = this.chipWaveLoopMode;\n            instrumentObject[\"chipWavePlayBackwards\"] = this.chipWavePlayBackwards;\n            instrumentObject[\"chipWaveStartOffset\"] = this.chipWaveStartOffset;\n            // advloop addition\n            instrumentObject[\"chipWaveInStereo\"] = this.chipWaveInStereo;\n        } else if (this.type == InstrumentType.pwm) {\n            instrumentObject[\"pulseWidth\"] = this.pulseWidth;\n            instrumentObject[\"decimalOffset\"] = this.decimalOffset;\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\n            if (this.unison == Config.unisons.length) {\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\n            }\n        } else if (this.type == InstrumentType.supersaw) {\n            instrumentObject[\"pulseWidth\"] = this.pulseWidth;\n            instrumentObject[\"decimalOffset\"] = this.decimalOffset;\n            instrumentObject[\"dynamism\"] = Math.round(100 * this.supersawDynamism / Config.supersawDynamismMax);\n            instrumentObject[\"spread\"] = Math.round(100 * this.supersawSpread / Config.supersawSpreadMax);\n            instrumentObject[\"shape\"] = Math.round(100 * this.supersawShape / Config.supersawShapeMax);\n        } else if (this.type == InstrumentType.pickedString) {\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\n            if (this.unison == Config.unisons.length) {\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\n            }\n            instrumentObject[\"stringSustain\"] = Math.round(100 * this.stringSustain / (Config.stringSustainRange - 1));\n            if (Config.enableAcousticSustain) {\n                instrumentObject[\"stringSustainType\"] = Config.sustainTypeNames[this.stringSustainType];\n            }\n        } else if (this.type == InstrumentType.harmonics) {\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\n            if (this.unison == Config.unisons.length) {\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\n            }\n        } else if (this.type == InstrumentType.fm || this.type == InstrumentType.fm6op) {\n            const operatorArray: Object[] = [];\n            for (const operator of this.operators) {\n                operatorArray.push({\n                    \"frequency\": Config.operatorFrequencies[operator.frequency].name,\n                    \"amplitude\": operator.amplitude,\n                    \"waveform\": Config.operatorWaves[operator.waveform].name,\n                    \"pulseWidth\": operator.pulseWidth,\n                });\n            }\n            if (this.type == InstrumentType.fm) {\n                instrumentObject[\"algorithm\"] = Config.algorithms[this.algorithm].name;\n                instrumentObject[\"feedbackType\"] = Config.feedbacks[this.feedbackType].name;\n                instrumentObject[\"feedbackAmplitude\"] = this.feedbackAmplitude;\n                instrumentObject[\"operators\"] = operatorArray;\n            } else {\n                instrumentObject[\"algorithm\"] = Config.algorithms6Op[this.algorithm6Op].name;\n                instrumentObject[\"feedbackType\"] = Config.feedbacks6Op[this.feedbackType6Op].name;\n                instrumentObject[\"feedbackAmplitude\"] = this.feedbackAmplitude;\n                if (this.algorithm6Op == 0) {\n                    const customAlgorithm: any = {};\n                    customAlgorithm[\"mods\"] = this.customAlgorithm.modulatedBy;\n                    customAlgorithm[\"carrierCount\"] = this.customAlgorithm.carrierCount;\n                    instrumentObject[\"customAlgorithm\"] = customAlgorithm;\n                }\n                if (this.feedbackType6Op == 0) {\n                    const customFeedback: any = {};\n                    customFeedback[\"mods\"] = this.customFeedbackType.indices;\n                    instrumentObject[\"customFeedback\"] = customFeedback;\n                }\n\n                instrumentObject[\"operators\"] = operatorArray;\n            }\n        } else if (this.type == InstrumentType.customChipWave) {\n            instrumentObject[\"wave\"] = Config.chipWaves[this.chipWave].name;\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\n            if (this.unison == Config.unisons.length) {\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\n            }\n            instrumentObject[\"customChipWave\"] = new Float64Array(64);\n            instrumentObject[\"customChipWaveIntegral\"] = new Float64Array(65);\n            for (let i: number = 0; i < this.customChipWave.length; i++) {\n                instrumentObject[\"customChipWave\"][i] = this.customChipWave[i];\n                // Meh, waste of space and can be inaccurate. It will be recalc'ed when instrument loads.\n                //instrumentObject[\"customChipWaveIntegral\"][i] = this.customChipWaveIntegral[i];\n            }\n        } else if (this.type == InstrumentType.mod) {\n            instrumentObject[\"modChannels\"] = [];\n            instrumentObject[\"modInstruments\"] = [];\n            instrumentObject[\"modSettings\"] = [];\n            instrumentObject[\"modFilterTypes\"] = [];\n            instrumentObject[\"modEnvelopeNumbers\"] = [];\n            for (let mod: number = 0; mod < Config.modCount; mod++) {\n                instrumentObject[\"modChannels\"][mod] = this.modChannels[mod];\n                instrumentObject[\"modInstruments\"][mod] = this.modInstruments[mod];\n                instrumentObject[\"modSettings\"][mod] = this.modulators[mod];\n                instrumentObject[\"modFilterTypes\"][mod] = this.modFilterTypes[mod];\n                instrumentObject[\"modEnvelopeNumbers\"][mod] = this.modEnvelopeNumbers[mod];\n            }\n        } else {\n            throw new Error(\"Unrecognized instrument type\");\n        }\n\n        const envelopes: any[] = [];\n        for (let i = 0; i < this.envelopeCount; i++) {\n            envelopes.push(this.envelopes[i].toJsonObject());\n        }\n        instrumentObject[\"envelopes\"] = envelopes;\n\n        return instrumentObject;\n    }\n\n\n    fromJsonObject(instrumentObject: any, isNoiseChannel: boolean, isModChannel: boolean, useSlowerRhythm: boolean, useFastTwoNoteArp: boolean, legacyGlobalReverb: number = 0, jsonFormat: string = Config.jsonFormat): void {\n        if (instrumentObject == undefined) instrumentObject = {};\n\n        const format: string = jsonFormat.toLowerCase();\n\n        let type: InstrumentType = Config.instrumentTypeNames.indexOf(instrumentObject[\"type\"]);\n        // SynthBox support\n        if ((format == \"synthbox\") && (instrumentObject[\"type\"] == \"FM\")) type = Config.instrumentTypeNames.indexOf(\"FM6op\");\n        if (<any>type == -1) type = isModChannel ? InstrumentType.mod : (isNoiseChannel ? InstrumentType.noise : InstrumentType.chip);\n        this.setTypeAndReset(type, isNoiseChannel, isModChannel);\n\n        if (instrumentObject[\"preset\"] != undefined) {\n            this.preset = instrumentObject[\"preset\"] >>> 0;\n        }\n\n        if (instrumentObject[\"volume\"] != undefined) {\n            if (format == \"jummbox\" || format == \"midbox\" || format == \"synthbox\" || format == \"goldbox\" || format == \"paandorasbox\" || format == \"ultrabox\" || format == \"slarmoosbox\" || format == \"Theepbox\") {\n                this.volume = clamp(-Config.volumeRange / 2, (Config.volumeRange / 2) + 1, instrumentObject[\"volume\"] | 0);\n            } else {\n                this.volume = Math.round(-clamp(0, 8, Math.round(5 - (instrumentObject[\"volume\"] | 0) / 20)) * 25.0 / 7.0);\n            }\n        } else {\n            this.volume = 0;\n        }\n\n        //These can probably be condensed with ternary operators\n        this.envelopeSpeed = instrumentObject[\"envelopeSpeed\"] != undefined ? clamp(0, Config.modulators.dictionary[\"envelope speed\"].maxRawVol + 1, instrumentObject[\"envelopeSpeed\"] | 0) : 12;\n\n        if (Array.isArray(instrumentObject[\"effects\"])) {\n            //this.effects = instrumentObject[\"effects\"];\n            /*\n            for (let i: number = 0; i < instrumentObject[\"effects\"].length; i++) {\n                this.addEffect(instrumentObject[\"effects\"][i]);\n            }\n            */\n        } else {\n            // The index of these names is reinterpreted as a bitfield, which relies on reverb and chorus being the first effects!\n            //const legacyEffectsNames: string[] = [\"none\", \"reverb\", \"chorus\", \"chorus & reverb\"];\n            //this.effects = legacyEffectsNames.indexOf(instrumentObject[\"effects\"]);\n            //if (this.effects == -1) this.effects = (this.type == InstrumentType.noise) ? 0 : 1;\n        }\n        if (instrumentObject[\"mdeffects\"] != undefined) {\n            this.mdeffects = instrumentObject[\"mdeffects\"];\n        }\n        else this.mdeffects = 0; //TODO: convert old effect list into md effects\n\n        this.transition = Config.transitions.dictionary[\"normal\"].index; // default value.\n        const transitionProperty: any = instrumentObject[\"transition\"] || instrumentObject[\"envelope\"]; // the transition property used to be called envelope, so check that too.\n        if (transitionProperty != undefined) {\n            let transition: Transition | undefined = Config.transitions.dictionary[transitionProperty];\n            if (instrumentObject[\"fadeInSeconds\"] == undefined || instrumentObject[\"fadeOutTicks\"] == undefined) {\n                const legacySettings = (<any>{\n                    \"binary\": { transition: \"interrupt\", fadeInSeconds: 0.0, fadeOutTicks: -1 },\n                    \"seamless\": { transition: \"interrupt\", fadeInSeconds: 0.0, fadeOutTicks: -1 },\n                    \"sudden\": { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: -3 },\n                    \"hard\": { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: -3 },\n                    \"smooth\": { transition: \"normal\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\n                    \"soft\": { transition: \"normal\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\n                    // Note that the old slide transition has the same name as a new slide transition that is different.\n                    // Only apply legacy settings if the instrument JSON was created before, based on the presence\n                    // of the fade in/out fields.\n                    \"slide\": { transition: \"slide in pattern\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\n                    \"cross fade\": { transition: \"normal\", fadeInSeconds: 0.04, fadeOutTicks: 6 },\n                    \"hard fade\": { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: 48 },\n                    \"medium fade\": { transition: \"normal\", fadeInSeconds: 0.0125, fadeOutTicks: 72 },\n                    \"soft fade\": { transition: \"normal\", fadeInSeconds: 0.06, fadeOutTicks: 96 },\n                })[transitionProperty];\n                if (legacySettings != undefined) {\n                    transition = Config.transitions.dictionary[legacySettings.transition];\n                    // These may be overridden below.\n                    this.fadeIn = secondsToFadeInSetting(legacySettings.fadeInSeconds);\n                    this.fadeOut = ticksToFadeOutSetting(legacySettings.fadeOutTicks);\n                }\n            }\n            if (transition != undefined) this.transition = transition.index;\n\n            if (this.transition != Config.transitions.dictionary[\"normal\"].index) {\n                // Enable transition if it was used.\n                this.mdeffects = (this.mdeffects | (1 << MDEffectType.transition));\n            }\n        }\n\n        // Overrides legacy settings in transition above.\n        if (instrumentObject[\"fadeInSeconds\"] != undefined) {\n            this.fadeIn = secondsToFadeInSetting(+instrumentObject[\"fadeInSeconds\"]);\n        }\n        if (instrumentObject[\"fadeOutTicks\"] != undefined) {\n            this.fadeOut = ticksToFadeOutSetting(+instrumentObject[\"fadeOutTicks\"]);\n        }\n\n        {\n            // Note that the chord setting may be overridden by instrumentObject[\"chorus\"] below.\n            const chordProperty: any = instrumentObject[\"chord\"];\n            const legacyChordNames: Dictionary<string> = { \"harmony\": \"simultaneous\" };\n            const chord: Chord | undefined = Config.chords.dictionary[legacyChordNames[chordProperty]] || Config.chords.dictionary[chordProperty];\n            if (chord != undefined) {\n                this.chord = chord.index;\n            } else {\n                // Different instruments have different default chord types based on historical behaviour.\n                if (this.type == InstrumentType.noise) {\n                    this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                } else if (this.type == InstrumentType.pickedString) {\n                    this.chord = Config.chords.dictionary[\"strum\"].index;\n                } else if (this.type == InstrumentType.chip) {\n                    this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                } else if (this.type == InstrumentType.fm || this.type == InstrumentType.fm6op) {\n                    this.chord = Config.chords.dictionary[\"custom interval\"].index;\n                } else {\n                    this.chord = Config.chords.dictionary[\"simultaneous\"].index;\n                }\n            }\n        }\n\n        this.unison = Config.unisons.dictionary[\"none\"].index; // default value.\n        const unisonProperty: any = instrumentObject[\"unison\"] || instrumentObject[\"interval\"] || instrumentObject[\"chorus\"]; // The unison property has gone by various names in the past.\n        if (unisonProperty != undefined) {\n            const legacyChorusNames: Dictionary<string> = { \"union\": \"none\", \"fifths\": \"fifth\", \"octaves\": \"octave\", \"error\": \"voiced\" };\n            const unison: Unison | undefined = Config.unisons.dictionary[legacyChorusNames[unisonProperty]] || Config.unisons.dictionary[unisonProperty];\n            if (unison != undefined) this.unison = unison.index;\n            if (unisonProperty == \"custom\") this.unison = Config.unisons.length;\n        }\n        //clamp these???\n        this.unisonVoices = (instrumentObject[\"unisonVoices\"] == undefined) ? Config.unisons[this.unison].voices : instrumentObject[\"unisonVoices\"];\n        this.unisonSpread = (instrumentObject[\"unisonSpread\"] == undefined) ? Config.unisons[this.unison].spread : instrumentObject[\"unisonSpread\"];\n        this.unisonOffset = (instrumentObject[\"unisonOffset\"] == undefined) ? Config.unisons[this.unison].offset : instrumentObject[\"unisonOffset\"];\n        this.unisonExpression = (instrumentObject[\"unisonExpression\"] == undefined) ? Config.unisons[this.unison].expression : instrumentObject[\"unisonExpression\"];\n        this.unisonSign = (instrumentObject[\"unisonSign\"] == undefined) ? Config.unisons[this.unison].sign : instrumentObject[\"unisonSign\"];\n\n        if (instrumentObject[\"chorus\"] == \"custom harmony\") {\n            // The original chorus setting had an option that now maps to two different settings. Override those if necessary.\n            this.unison = Config.unisons.dictionary[\"hum\"].index;\n            this.chord = Config.chords.dictionary[\"custom interval\"].index;\n        }\n        if (this.chord != Config.chords.dictionary[\"simultaneous\"].index && !Array.isArray(instrumentObject[\"mdeffects\"])) {\n            // Enable chord if it was used.\n            this.mdeffects = (this.mdeffects | (1 << MDEffectType.chord));\n        }\n\n        if (instrumentObject[\"pitchShiftSemitones\"] != undefined) {\n            this.pitchShift = clamp(0, Config.pitchShiftRange, Math.round(+instrumentObject[\"pitchShiftSemitones\"]));\n        }\n        // modbox pitch shift, known in that mod as \"octave offset\"\n        if (instrumentObject[\"octoff\"] != undefined) {\n            let potentialPitchShift: string = instrumentObject[\"octoff\"];\n            this.mdeffects = (this.mdeffects | (1 << MDEffectType.pitchShift));\n\n            if ((potentialPitchShift == \"+1 (octave)\") || (potentialPitchShift == \"+2 (2 octaves)\")) {\n                this.pitchShift = 24;\n            } else if ((potentialPitchShift == \"+1/2 (fifth)\") || (potentialPitchShift == \"+1 1/2 (octave and fifth)\")) {\n                this.pitchShift = 18;\n            } else if ((potentialPitchShift == \"-1 (octave)\") || (potentialPitchShift == \"-2 (2 octaves\")) { //this typo is in modbox\n                this.pitchShift = 0;\n            } else if ((potentialPitchShift == \"-1/2 (fifth)\") || (potentialPitchShift == \"-1 1/2 (octave and fifth)\")) {\n                this.pitchShift = 6;\n            } else {\n                this.pitchShift = 12;\n            }\n        }\n        if (instrumentObject[\"detuneCents\"] != undefined) {\n            this.detune = clamp(Config.detuneMin, Config.detuneMax + 1, Math.round(centsToDetune(+instrumentObject[\"detuneCents\"])));\n        }\n\n        this.vibrato = Config.vibratos.dictionary[\"none\"].index; // default value.\n        const vibratoProperty: any = instrumentObject[\"vibrato\"] || instrumentObject[\"effect\"]; // The vibrato property was previously called \"effect\", not to be confused with the current \"effects\".\n        if (vibratoProperty != undefined) {\n\n            const legacyVibratoNames: Dictionary<string> = { \"vibrato light\": \"light\", \"vibrato delayed\": \"delayed\", \"vibrato heavy\": \"heavy\" };\n            const vibrato: Vibrato | undefined = Config.vibratos.dictionary[legacyVibratoNames[unisonProperty]] || Config.vibratos.dictionary[vibratoProperty];\n            if (vibrato != undefined)\n                this.vibrato = vibrato.index;\n            else if (vibratoProperty == \"custom\")\n                this.vibrato = Config.vibratos.length; // custom\n\n            if (this.vibrato == Config.vibratos.length) {\n                this.vibratoDepth = instrumentObject[\"vibratoDepth\"];\n                this.vibratoSpeed = instrumentObject[\"vibratoSpeed\"];\n                this.vibratoDelay = instrumentObject[\"vibratoDelay\"];\n                this.vibratoType = instrumentObject[\"vibratoType\"];\n            }\n            else { // Set defaults for the vibrato profile\n                this.vibratoDepth = Config.vibratos[this.vibrato].amplitude;\n                this.vibratoDelay = Config.vibratos[this.vibrato].delayTicks / 2;\n                this.vibratoSpeed = 10; // default;\n                this.vibratoType = Config.vibratos[this.vibrato].type;\n            }\n\n            // Old songs may have a vibrato effect without explicitly enabling it.\n            if (vibrato != Config.vibratos.dictionary[\"none\"]) {\n                this.mdeffects = (this.mdeffects | (1 << MDEffectType.vibrato));\n            }\n        }\n\n        if (instrumentObject[\"detune\"] != undefined) {\n            this.detune = clamp(Config.detuneMin, Config.detuneMax + 1, (instrumentObject[\"detune\"] | 0));\n        }\n        else if (instrumentObject[\"detuneCents\"] == undefined) {\n            this.detune = Config.detuneCenter;\n        }\n\n        if (instrumentObject[\"pulseWidth\"] != undefined) {\n            this.pulseWidth = clamp(1, Config.pulseWidthRange + 1, Math.round(instrumentObject[\"pulseWidth\"]));\n        } else {\n            this.pulseWidth = Config.pulseWidthRange;\n        }\n\n        if (instrumentObject[\"decimalOffset\"] != undefined) {\n            this.decimalOffset = clamp(0, 99 + 1, Math.round(instrumentObject[\"decimalOffset\"]));\n        } else {\n            this.decimalOffset = 0;\n        }\n\n        if (instrumentObject[\"dynamism\"] != undefined) {\n            this.supersawDynamism = clamp(0, Config.supersawDynamismMax + 1, Math.round(Config.supersawDynamismMax * (instrumentObject[\"dynamism\"] | 0) / 100));\n        } else {\n            this.supersawDynamism = Config.supersawDynamismMax;\n        }\n        if (instrumentObject[\"spread\"] != undefined) {\n            this.supersawSpread = clamp(0, Config.supersawSpreadMax + 1, Math.round(Config.supersawSpreadMax * (instrumentObject[\"spread\"] | 0) / 100));\n        } else {\n            this.supersawSpread = Math.ceil(Config.supersawSpreadMax / 2.0);\n        }\n        if (instrumentObject[\"shape\"] != undefined) {\n            this.supersawShape = clamp(0, Config.supersawShapeMax + 1, Math.round(Config.supersawShapeMax * (instrumentObject[\"shape\"] | 0) / 100));\n        } else {\n            this.supersawShape = 0;\n        }\n\n        if (instrumentObject[\"harmonics\"] != undefined) {\n            for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\n                this.harmonicsWave.harmonics[i] = Math.max(0, Math.min(Config.harmonicsMax, Math.round(Config.harmonicsMax * (+instrumentObject[\"harmonics\"][i]) / 100)));\n            }\n            this.harmonicsWave.markCustomWaveDirty();\n        } else {\n            this.harmonicsWave.reset();\n        }\n\n        if (instrumentObject[\"spectrum\"] != undefined) {\n            for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n                this.spectrumWave.spectrum[i] = Math.max(0, Math.min(Config.spectrumMax, Math.round(Config.spectrumMax * (+instrumentObject[\"spectrum\"][i]) / 100)));\n                this.spectrumWave.markCustomWaveDirty();\n            }\n        } else {\n            this.spectrumWave.reset(isNoiseChannel);\n        }\n\n        if (instrumentObject[\"stringSustain\"] != undefined) {\n            this.stringSustain = clamp(0, Config.stringSustainRange, Math.round((Config.stringSustainRange - 1) * (instrumentObject[\"stringSustain\"] | 0) / 100));\n        } else {\n            this.stringSustain = 10;\n        }\n        this.stringSustainType = Config.enableAcousticSustain ? Config.sustainTypeNames.indexOf(instrumentObject[\"stringSustainType\"]) : SustainType.bright;\n        if (<any>this.stringSustainType == -1) this.stringSustainType = SustainType.bright;\n\n        if (this.type == InstrumentType.noise) {\n            this.chipNoise = Config.chipNoises.findIndex(wave => wave.name == instrumentObject[\"wave\"]);\n            if (instrumentObject[\"wave\"] == \"pink noise\") this.chipNoise = Config.chipNoises.findIndex(wave => wave.name == \"pink\");\n            if (instrumentObject[\"wave\"] == \"brownian noise\") this.chipNoise = Config.chipNoises.findIndex(wave => wave.name == \"brownian\");\n            if (this.chipNoise == -1) this.chipNoise = 1;\n        }\n\n        const legacyEnvelopeNames: Dictionary<string> = { \"custom\": \"note size\", \"steady\": \"none\", \"pluck 1\": \"twang 1\", \"pluck 2\": \"twang 2\", \"pluck 3\": \"twang 3\" };\n        const getEnvelope = (name: any): Envelope | undefined => {\n            if (legacyEnvelopeNames[name] != undefined) return Config.envelopes.dictionary[legacyEnvelopeNames[name]];\n            else {\n                return Config.envelopes.dictionary[name];\n            }\n        }\n\n        if (this.type == InstrumentType.drumset) {\n            if (instrumentObject[\"drums\"] != undefined) {\n                for (let j: number = 0; j < Config.drumCount; j++) {\n                    const drum: any = instrumentObject[\"drums\"][j];\n                    if (drum == undefined) continue;\n\n                    this.drumsetEnvelopes[j] = Config.envelopes.dictionary[\"twang 2\"].index; // default value.\n                    if (drum[\"filterEnvelope\"] != undefined) {\n                        const envelope: Envelope | undefined = getEnvelope(drum[\"filterEnvelope\"]);\n                        if (envelope != undefined) this.drumsetEnvelopes[j] = envelope.index;\n                    }\n                    if (drum[\"spectrum\"] != undefined) {\n                        for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n                            this.drumsetSpectrumWaves[j].spectrum[i] = Math.max(0, Math.min(Config.spectrumMax, Math.round(Config.spectrumMax * (+drum[\"spectrum\"][i]) / 100)));\n                        }\n                    }\n                    this.drumsetSpectrumWaves[j].markCustomWaveDirty();\n                }\n            }\n        }\n\n        if (this.type == InstrumentType.chip) {\n            const legacyWaveNames: Dictionary<number> = { \"triangle\": 1, \"square\": 2, \"pulse wide\": 3, \"pulse narrow\": 4, \"sawtooth\": 5, \"double saw\": 6, \"double pulse\": 7, \"spiky\": 8, \"plateau\": 0 };\n            const modboxWaveNames: Dictionary<number> = { \"10% pulse\": 22, \"sunsoft bass\": 23, \"loud pulse\": 24, \"sax\": 25, \"guitar\": 26, \"atari bass\": 28, \"atari pulse\": 29, \"1% pulse\": 30, \"curved sawtooth\": 31, \"viola\": 32, \"brass\": 33, \"acoustic bass\": 34, \"lyre\": 35, \"ramp pulse\": 36, \"piccolo\": 37, \"squaretooth\": 38, \"flatline\": 39, \"pnryshk a (u5)\": 40, \"pnryshk b (riff)\": 41 };\n            const sandboxWaveNames: Dictionary<number> = { \"shrill lute\": 42, \"shrill bass\": 44, \"nes pulse\": 45, \"saw bass\": 46, \"euphonium\": 47, \"shrill pulse\": 48, \"r-sawtooth\": 49, \"recorder\": 50, \"narrow saw\": 51, \"deep square\": 52, \"ring pulse\": 53, \"double sine\": 54, \"contrabass\": 55, \"double bass\": 56 };\n            const zefboxWaveNames: Dictionary<number> = { \"semi-square\": 63, \"deep square\": 64, \"squaretal\": 40, \"saw wide\": 65, \"saw narrow \": 66, \"deep sawtooth\": 67, \"sawtal\": 68, \"pulse\": 69, \"triple pulse\": 70, \"high pulse\": 71, \"deep pulse\": 72 };\n            const miscWaveNames: Dictionary<number> = { \"test1\": 56, \"pokey 4bit lfsr\": 57, \"pokey 5step bass\": 58, \"isolated spiky\": 59, \"unnamed 1\": 60, \"unnamed 2\": 61, \"guitar string\": 75, \"intense\": 76, \"buzz wave\": 77, \"pokey square\": 57, \"pokey bass\": 58, \"banana wave\": 83, \"test 1\": 84, \"test 2\": 84, \"real snare\": 85, \"earthbound o. guitar\": 86 };\n            const paandorasboxWaveNames: Dictionary<number> = { \"kick\": 87, \"snare\": 88, \"piano1\": 89, \"WOW\": 90, \"overdrive\": 91, \"trumpet\": 92, \"saxophone\": 93, \"orchestrahit\": 94, \"detached violin\": 95, \"synth\": 96, \"sonic3snare\": 97, \"come on\": 98, \"choir\": 99, \"overdriveguitar\": 100, \"flute\": 101, \"legato violin\": 102, \"tremolo violin\": 103, \"amen break\": 104, \"pizzicato violin\": 105, \"tim allen grunt\": 106, \"tuba\": 107, \"loopingcymbal\": 108, \"standardkick\": 109, \"standardsnare\": 110, \"closedhihat\": 111, \"foothihat\": 112, \"openhihat\": 113, \"crashcymbal\": 114, \"pianoC4\": 115, \"liver pad\": 116, \"marimba\": 117, \"susdotwav\": 118, \"wackyboxtts\": 119 };\n            // const paandorasbetaWaveNames = {\"contrabass\": 55, \"double bass\": 56 };\n            //this.chipWave = legacyWaveNames[instrumentObject[\"wave\"]] != undefined ? legacyWaveNames[instrumentObject[\"wave\"]] : Config.chipWaves.findIndex(wave => wave.name == instrumentObject[\"wave\"]);\n            this.chipWave = -1;\n            const rawName: string = instrumentObject[\"wave\"];\n            for (const table of [\n                legacyWaveNames,\n                modboxWaveNames,\n                sandboxWaveNames,\n                zefboxWaveNames,\n                miscWaveNames,\n                paandorasboxWaveNames\n            ]) {\n                if (this.chipWave == -1 && table[rawName] != undefined && Config.chipWaves[table[rawName]] != undefined) {\n                    this.chipWave = table[rawName];\n                    break;\n                }\n            }\n            if (this.chipWave == -1) {\n                const potentialChipWaveIndex: number = Config.chipWaves.findIndex(wave => wave.name == rawName);\n                if (potentialChipWaveIndex != -1) this.chipWave = potentialChipWaveIndex;\n            }\n            // this.chipWave = legacyWaveNames[instrumentObject[\"wave\"]] != undefined ? legacyWaveNames[instrumentObject[\"wave\"]] : modboxWaveNames[instrumentObject[\"wave\"]] != undefined ? modboxWaveNames[instrumentObject[\"wave\"]] : sandboxWaveNames[instrumentObject[\"wave\"]] != undefined ? sandboxWaveNames[instrumentObject[\"wave\"]] : zefboxWaveNames[instrumentObject[\"wave\"]] != undefined ? zefboxWaveNames[instrumentObject[\"wave\"]] : miscWaveNames[instrumentObject[\"wave\"]] != undefined ? miscWaveNames[instrumentObject[\"wave\"]] : paandorasboxWaveNames[instrumentObject[\"wave\"]] != undefined ? paandorasboxWaveNames[instrumentObject[\"wave\"]] : Config.chipWaves.findIndex(wave => wave.name == instrumentObject[\"wave\"]);\n            if (this.chipWave == -1) this.chipWave = 1;\n        }\n\n        if (this.type == InstrumentType.fm || this.type == InstrumentType.fm6op) {\n            if (this.type == InstrumentType.fm) {\n                this.algorithm = Config.algorithms.findIndex(algorithm => algorithm.name == instrumentObject[\"algorithm\"]);\n                if (this.algorithm == -1) this.algorithm = 0;\n                this.feedbackType = Config.feedbacks.findIndex(feedback => feedback.name == instrumentObject[\"feedbackType\"]);\n                if (this.feedbackType == -1) this.feedbackType = 0;\n            } else {\n                this.algorithm6Op = Config.algorithms6Op.findIndex(algorithm6Op => algorithm6Op.name == instrumentObject[\"algorithm\"]);\n                if (this.algorithm6Op == -1) this.algorithm6Op = 1;\n                if (this.algorithm6Op == 0) {\n                    this.customAlgorithm.set(instrumentObject[\"customAlgorithm\"][\"carrierCount\"], instrumentObject[\"customAlgorithm\"][\"mods\"]);\n                } else {\n                    this.customAlgorithm.fromPreset(this.algorithm6Op);\n                }\n                this.feedbackType6Op = Config.feedbacks6Op.findIndex(feedback6Op => feedback6Op.name == instrumentObject[\"feedbackType\"]);\n                // SynthBox feedback support\n                if (this.feedbackType6Op == -1) {\n                    // These are all of the SynthBox feedback presets that aren't present in Gold/UltraBox\n                    let synthboxLegacyFeedbacks: DictionaryArray<any> = toNameMap([\n                        { name: \"2\u27F2 3\u27F2\", indices: [[], [2], [3], [], [], []] },\n                        { name: \"3\u27F2 4\u27F2\", indices: [[], [], [3], [4], [], []] },\n                        { name: \"4\u27F2 5\u27F2\", indices: [[], [], [], [4], [5], []] },\n                        { name: \"5\u27F2 6\u27F2\", indices: [[], [], [], [], [5], [6]] },\n                        { name: \"1\u27F2 6\u27F2\", indices: [[1], [], [], [], [], [6]] },\n                        { name: \"1\u27F2 3\u27F2\", indices: [[1], [], [3], [], [], []] },\n                        { name: \"1\u27F2 4\u27F2\", indices: [[1], [], [], [4], [], []] },\n                        { name: \"1\u27F2 5\u27F2\", indices: [[1], [], [], [], [5], []] },\n                        { name: \"4\u27F2 6\u27F2\", indices: [[], [], [], [4], [], [6]] },\n                        { name: \"2\u27F2 6\u27F2\", indices: [[], [2], [], [], [], [6]] },\n                        { name: \"3\u27F2 6\u27F2\", indices: [[], [], [3], [], [], [6]] },\n                        { name: \"4\u27F2 5\u27F2 6\u27F2\", indices: [[], [], [], [4], [5], [6]] },\n                        { name: \"1\u27F2 3\u27F2 6\u27F2\", indices: [[1], [], [3], [], [], [6]] },\n                        { name: \"2\u21925\", indices: [[], [], [], [], [2], []] },\n                        { name: \"2\u21926\", indices: [[], [], [], [], [], [2]] },\n                        { name: \"3\u21925\", indices: [[], [], [], [], [3], []] },\n                        { name: \"3\u21926\", indices: [[], [], [], [], [], [3]] },\n                        { name: \"4\u21926\", indices: [[], [], [], [], [], [4]] },\n                        { name: \"5\u21926\", indices: [[], [], [], [], [], [5]] },\n                        { name: \"1\u21923\u21924\", indices: [[], [], [1], [], [3], []] },\n                        { name: \"2\u21925\u21926\", indices: [[], [], [], [], [2], [5]] },\n                        { name: \"2\u21924\u21926\", indices: [[], [], [], [2], [], [4]] },\n                        { name: \"4\u21925\u21926\", indices: [[], [], [], [], [4], [5]] },\n                        { name: \"3\u21924\u21925\u21926\", indices: [[], [], [], [3], [4], [5]] },\n                        { name: \"2\u21923\u21924\u21925\u21926\", indices: [[], [1], [2], [3], [4], [5]] },\n                        { name: \"1\u21922\u21923\u21924\u21925\u21926\", indices: [[], [1], [2], [3], [4], [5]] },\n                    ]);\n\n                    let synthboxFeedbackType = synthboxLegacyFeedbacks[synthboxLegacyFeedbacks.findIndex(feedback => feedback.name == instrumentObject[\"feedbackType\"])]!.indices;\n\n                    if (synthboxFeedbackType != undefined) {\n                        this.feedbackType6Op = 0;\n                        this.customFeedbackType.set(synthboxFeedbackType);\n                    } else {\n                        // if the feedback type STILL can't be resolved, default to the first non-custom option\n                        this.feedbackType6Op = 1;\n                    }\n                }\n\n                if ((this.feedbackType6Op == 0) && (instrumentObject[\"customFeedback\"] != undefined)) {\n                    this.customFeedbackType.set(instrumentObject[\"customFeedback\"][\"mods\"]);\n                } else {\n                    this.customFeedbackType.fromPreset(this.feedbackType6Op);\n                }\n            }\n            if (instrumentObject[\"feedbackAmplitude\"] != undefined) {\n                this.feedbackAmplitude = clamp(0, Config.operatorAmplitudeMax + 1, instrumentObject[\"feedbackAmplitude\"] | 0);\n            } else {\n                this.feedbackAmplitude = 0;\n            }\n\n            for (let j: number = 0; j < Config.operatorCount + (this.type == InstrumentType.fm6op ? 2 : 0); j++) {\n                const operator: Operator = this.operators[j];\n                let operatorObject: any = undefined;\n                if (instrumentObject[\"operators\"] != undefined) operatorObject = instrumentObject[\"operators\"][j];\n                if (operatorObject == undefined) operatorObject = {};\n\n                operator.frequency = Config.operatorFrequencies.findIndex(freq => freq.name == operatorObject[\"frequency\"]);\n                if (operator.frequency == -1) operator.frequency = 0;\n                if (operatorObject[\"amplitude\"] != undefined) {\n                    operator.amplitude = clamp(0, Config.operatorAmplitudeMax + 1, operatorObject[\"amplitude\"] | 0);\n                } else {\n                    operator.amplitude = 0;\n                }\n                if (operatorObject[\"waveform\"] != undefined) {\n                    // If the json is from GB, we override the last two waves to be sine to account for a bug\n                    if (format == \"goldbox\" && j > 3) {\n                        operator.waveform = 0;\n                        continue;\n                    }\n\n                    operator.waveform = Config.operatorWaves.findIndex(wave => wave.name == operatorObject[\"waveform\"]);\n                    if (operator.waveform == -1) {\n                        // GoldBox compatibility\n                        if (operatorObject[\"waveform\"] == \"square\") {\n                            operator.waveform = Config.operatorWaves.dictionary[\"pulse width\"].index;\n                            operator.pulseWidth = 5;\n                        } else if (operatorObject[\"waveform\"] == \"rounded\") {\n                            operator.waveform = Config.operatorWaves.dictionary[\"quasi-sine\"].index;\n                        } else {\n                            operator.waveform = 0;\n                        }\n\n                    }\n                } else {\n                    operator.waveform = 0;\n                }\n                if (operatorObject[\"pulseWidth\"] != undefined) {\n                    operator.pulseWidth = operatorObject[\"pulseWidth\"] | 0;\n                } else {\n                    operator.pulseWidth = 5;\n                }\n            }\n        }\n        else if (this.type == InstrumentType.customChipWave) {\n            if (instrumentObject[\"customChipWave\"]) {\n\n                for (let i: number = 0; i < 64; i++) {\n                    this.customChipWave[i] = instrumentObject[\"customChipWave\"][i];\n                }\n\n\n                let sum: number = 0.0;\n                for (let i: number = 0; i < this.customChipWave.length; i++) {\n                    sum += this.customChipWave[i];\n                }\n                const average: number = sum / this.customChipWave.length;\n\n                // Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\n                let cumulative: number = 0;\n                let wavePrev: number = 0;\n                for (let i: number = 0; i < this.customChipWave.length; i++) {\n                    cumulative += wavePrev;\n                    wavePrev = this.customChipWave[i] - average;\n                    this.customChipWaveIntegral[i] = cumulative;\n                }\n\n                // 65th, last sample is for anti-aliasing\n                this.customChipWaveIntegral[64] = 0.0;\n            }\n        } else if (this.type == InstrumentType.mod) {\n            if (instrumentObject[\"modChannels\"] != undefined) {\n                for (let mod: number = 0; mod < Config.modCount; mod++) {\n                    this.modChannels[mod] = instrumentObject[\"modChannels\"][mod];\n                    this.modInstruments[mod] = instrumentObject[\"modInstruments\"][mod];\n                    this.modulators[mod] = instrumentObject[\"modSettings\"][mod];\n                    // Due to an oversight, this isn't included in JSONs prior to JB 2.6.\n                    if (instrumentObject[\"modFilterTypes\"] != undefined)\n                        this.modFilterTypes[mod] = instrumentObject[\"modFilterTypes\"][mod];\n                    if (instrumentObject[\"modEnvelopeNumbers\"] != undefined)\n                        this.modEnvelopeNumbers[mod] = instrumentObject[\"modEnvelopeNumbers\"][mod];\n                }\n            }\n        }\n\n        if (this.type != InstrumentType.mod) {\n            // Arpeggio speed\n            if (this.chord == Config.chords.dictionary[\"arpeggio\"].index && instrumentObject[\"arpeggioSpeed\"] != undefined) {\n                this.arpeggioSpeed = instrumentObject[\"arpeggioSpeed\"];\n            }\n            else {\n                this.arpeggioSpeed = (useSlowerRhythm) ? 9 : 12; // Decide whether to import arps as x3/4 speed\n            }\n            if (this.chord == Config.chords.dictionary[\"monophonic\"].index && instrumentObject[\"monoChordTone\"] != undefined) {\n                this.monoChordTone = instrumentObject[\"monoChordTone\"];\n            }\n\n            if (instrumentObject[\"fastTwoNoteArp\"] != undefined) {\n                this.fastTwoNoteArp = instrumentObject[\"fastTwoNoteArp\"];\n            }\n            else {\n                this.fastTwoNoteArp = useFastTwoNoteArp;\n            }\n\n            if (instrumentObject[\"clicklessTransition\"] != undefined) {\n                this.clicklessTransition = instrumentObject[\"clicklessTransition\"];\n            }\n            else {\n                this.clicklessTransition = false;\n            }\n\n            if (instrumentObject[\"aliases\"] != undefined) {\n                this.aliases = instrumentObject[\"aliases\"];\n            }\n            else {\n                // modbox had no anti-aliasing, so enable it for everything if that mode is selected\n                if (format == \"modbox\") {\n                    let newEffect: Effect = this.addEffect(EffectType.distortion);\n                    this.aliases = true;\n                    newEffect.distortion = 0;\n                } else {\n                    this.aliases = false;\n                }\n            }\n\n            if (instrumentObject[\"noteFilterType\"] != undefined) {\n                this.noteFilterType = instrumentObject[\"noteFilterType\"];\n            }\n            if (instrumentObject[\"noteSimpleCut\"] != undefined) {\n                this.noteFilterSimpleCut = instrumentObject[\"noteSimpleCut\"];\n            }\n            if (instrumentObject[\"noteSimplePeak\"] != undefined) {\n                this.noteFilterSimplePeak = instrumentObject[\"noteSimplePeak\"];\n            }\n            if (instrumentObject[\"noteFilter\"] != undefined) {\n                this.noteFilter.fromJsonObject(instrumentObject[\"noteFilter\"]);\n            } else {\n                this.noteFilter.reset();\n            }\n            for (let i: number = 0; i < Config.filterMorphCount; i++) {\n                if (Array.isArray(instrumentObject[\"noteSubFilters\" + i])) {\n                    this.noteSubFilters[i] = new FilterSettings();\n                    this.noteSubFilters[i]!.fromJsonObject(instrumentObject[\"noteSubFilters\" + i]);\n                }\n            }\n            if (!Array.isArray(instrumentObject[\"eqFilter\"])) {\n                const legacySettings: LegacySettings = {};\n\n                // Try converting from legacy filter settings.\n                const filterCutoffMaxHz: number = 8000;\n                const filterCutoffRange: number = 11;\n                const filterResonanceRange: number = 8;\n                if (instrumentObject[\"filterCutoffHz\"] != undefined) {\n                    legacySettings.filterCutoff = clamp(0, filterCutoffRange, Math.round((filterCutoffRange - 1) + 2.0 * Math.log((instrumentObject[\"filterCutoffHz\"] | 0) / filterCutoffMaxHz) / Math.LN2));\n                } else {\n                    legacySettings.filterCutoff = (this.type == InstrumentType.chip) ? 6 : 10;\n                }\n                if (instrumentObject[\"filterResonance\"] != undefined) {\n                    legacySettings.filterResonance = clamp(0, filterResonanceRange, Math.round((filterResonanceRange - 1) * (instrumentObject[\"filterResonance\"] | 0) / 100));\n                } else {\n                    legacySettings.filterResonance = 0;\n                }\n\n                legacySettings.filterEnvelope = getEnvelope(instrumentObject[\"filterEnvelope\"]);\n                legacySettings.pulseEnvelope = getEnvelope(instrumentObject[\"pulseEnvelope\"]);\n                legacySettings.feedbackEnvelope = getEnvelope(instrumentObject[\"feedbackEnvelope\"]);\n                if (Array.isArray(instrumentObject[\"operators\"])) {\n                    legacySettings.operatorEnvelopes = [];\n                    for (let j: number = 0; j < Config.operatorCount + (this.type == InstrumentType.fm6op ? 2 : 0); j++) {\n                        let envelope: Envelope | undefined;\n                        if (instrumentObject[\"operators\"][j] != undefined) {\n                            envelope = getEnvelope(instrumentObject[\"operators\"][j][\"envelope\"]);\n                        }\n                        legacySettings.operatorEnvelopes[j] = (envelope != undefined) ? envelope : Config.envelopes.dictionary[\"none\"];\n                    }\n                }\n\n                // Try converting from even older legacy filter settings.\n                if (instrumentObject[\"filter\"] != undefined) {\n                    const legacyToCutoff: number[] = [10, 6, 3, 0, 8, 5, 2];\n                    const legacyToEnvelope: string[] = [\"none\", \"none\", \"none\", \"none\", \"decay 1\", \"decay 2\", \"decay 3\"];\n                    const filterNames: string[] = [\"none\", \"bright\", \"medium\", \"soft\", \"decay bright\", \"decay medium\", \"decay soft\"];\n                    const oldFilterNames: Dictionary<number> = { \"sustain sharp\": 1, \"sustain medium\": 2, \"sustain soft\": 3, \"decay sharp\": 4 };\n                    let legacyFilter: number = oldFilterNames[instrumentObject[\"filter\"]] != undefined ? oldFilterNames[instrumentObject[\"filter\"]] : filterNames.indexOf(instrumentObject[\"filter\"]);\n                    if (legacyFilter == -1) legacyFilter = 0;\n                    legacySettings.filterCutoff = legacyToCutoff[legacyFilter];\n                    legacySettings.filterEnvelope = getEnvelope(legacyToEnvelope[legacyFilter]);\n                    legacySettings.filterResonance = 0;\n                }\n\n                this.convertLegacySettings(legacySettings, true);\n            }\n\n            if (Array.isArray(instrumentObject[\"envelopes\"])) {\n                const envelopeArray: any[] = instrumentObject[\"envelopes\"];\n                for (let i = 0; i < envelopeArray.length; i++) {\n                    if (this.envelopeCount >= Config.maxEnvelopeCount) break;\n                    const tempEnvelope: EnvelopeSettings = new EnvelopeSettings(this.isNoiseInstrument);\n                    tempEnvelope.fromJsonObject(envelopeArray[i], format);\n                    //old pitch envelope detection\n                    let pitchEnvelopeStart: number;\n                    if (instrumentObject[\"pitchEnvelopeStart\"] != undefined && instrumentObject[\"pitchEnvelopeStart\"] != null) { //make sure is not null bc for some reason it can be\n                        pitchEnvelopeStart = instrumentObject[\"pitchEnvelopeStart\"];\n                    } else if (instrumentObject[\"pitchEnvelopeStart\" + i] != undefined && instrumentObject[\"pitchEnvelopeStart\" + i] != undefined) {\n                        pitchEnvelopeStart = instrumentObject[\"pitchEnvelopeStart\" + i];\n                    } else {\n                        pitchEnvelopeStart = tempEnvelope.pitchEnvelopeStart;\n                    }\n                    let pitchEnvelopeEnd: number;\n                    if (instrumentObject[\"pitchEnvelopeEnd\"] != undefined && instrumentObject[\"pitchEnvelopeEnd\"] != null) {\n                        pitchEnvelopeEnd = instrumentObject[\"pitchEnvelopeEnd\"];\n                    } else if (instrumentObject[\"pitchEnvelopeEnd\" + i] != undefined && instrumentObject[\"pitchEnvelopeEnd\" + i] != null) {\n                        pitchEnvelopeEnd = instrumentObject[\"pitchEnvelopeEnd\" + i];\n                    } else {\n                        pitchEnvelopeEnd = tempEnvelope.pitchEnvelopeEnd;\n                    }\n                    let envelopeInverse: boolean;\n                    if (instrumentObject[\"envelopeInverse\" + i] != undefined && instrumentObject[\"envelopeInverse\" + i] != null) {\n                        envelopeInverse = instrumentObject[\"envelopeInverse\" + i];\n                    } else if (instrumentObject[\"pitchEnvelopeInverse\"] != undefined && instrumentObject[\"pitchEnvelopeInverse\"] != null && Config.envelopes[tempEnvelope.envelope].name == \"pitch\") { //assign only if a pitch envelope\n                        envelopeInverse = instrumentObject[\"pitchEnvelopeInverse\"];\n                    } else {\n                        envelopeInverse = tempEnvelope.inverse;\n                    }\n                    let discreteEnvelope: boolean;\n                    if (instrumentObject[\"discreteEnvelope\"] != undefined) {\n                        discreteEnvelope = instrumentObject[\"discreteEnvelope\"];\n                    } else {\n                        discreteEnvelope = tempEnvelope.discrete;\n                    }\n                    this.addEnvelope(tempEnvelope.target, tempEnvelope.index, tempEnvelope.envelope, true, pitchEnvelopeStart, pitchEnvelopeEnd, envelopeInverse, tempEnvelope.perEnvelopeSpeed, tempEnvelope.perEnvelopeLowerBound, tempEnvelope.perEnvelopeUpperBound, tempEnvelope.steps, tempEnvelope.seed, tempEnvelope.waveform, discreteEnvelope);\n                }\n            }\n        }\n        // advloop addition\n        if (type === 0) {\n            if (instrumentObject[\"isUsingAdvancedLoopControls\"] != undefined) {\n                this.isUsingAdvancedLoopControls = instrumentObject[\"isUsingAdvancedLoopControls\"];\n                this.chipWaveLoopStart = instrumentObject[\"chipWaveLoopStart\"];\n                this.chipWaveLoopEnd = instrumentObject[\"chipWaveLoopEnd\"];\n                this.chipWaveLoopMode = instrumentObject[\"chipWaveLoopMode\"];\n                this.chipWavePlayBackwards = instrumentObject[\"chipWavePlayBackwards\"];\n                this.chipWaveStartOffset = instrumentObject[\"chipWaveStartOffset\"];\n            } else {\n                this.isUsingAdvancedLoopControls = false;\n                this.chipWaveLoopStart = 0;\n                this.chipWaveLoopEnd = Config.rawRawChipWaves[this.chipWave].samples.length - 1;\n                this.chipWaveLoopMode = 0;\n                this.chipWavePlayBackwards = false;\n                this.chipWaveStartOffset = 0;\n            }\n            this.chipWaveInStereo = instrumentObject[\"chipWaveInStereo\"];\n        }\n    }\n    // advloop addition\n\n    getLargestControlPointCount(forNoteFilter: boolean) {\n        let largest: number;\n        if (forNoteFilter) {\n            largest = this.noteFilter.controlPointCount;\n            for (let i: number = 0; i < Config.filterMorphCount; i++) {\n                if (this.noteSubFilters[i] != null && this.noteSubFilters[i]!.controlPointCount > largest)\n                    largest = this.noteSubFilters[i]!.controlPointCount;\n            }\n        }\n        else {\n            largest = this.effects[0]!.eqFilter.controlPointCount;\n            for (let effectIndex: number = 0; effectIndex < this.effectCount; effectIndex++) {\n                if (this.effects[effectIndex] != null && this.effects[effectIndex]!.type == EffectType.eqFilter) {\n                    for (let i: number = 0; i < Config.filterMorphCount; i++) {\n                        if (this.effects[effectIndex]!.eqSubFilters[i] != null && this.effects[effectIndex]!.eqSubFilters[i]!.controlPointCount > largest)\n                            largest = this.effects[effectIndex]!.eqSubFilters[i]!.controlPointCount;\n                    }\n                }\n            }\n        }\n        return largest;\n    }\n\n    static frequencyFromPitch(pitch: number): number {\n        return 440.0 * Math.pow(2.0, (pitch - 69.0) / 12.0);\n    }\n\n    addEffect(type: EffectType): Effect {\n        let newEffect: Effect = new Effect(type);\n        this.effects.push(newEffect);\n        this.effectCount++;\n        return newEffect;\n    }\n\n    removeEffect(type: EffectType): void {\n        for(let i: number = 0; i < this.effectCount; i++) {\n            if (this.effects[i] != null && this.effects[i]!.type == type) {\n                this.effects.splice(i, 1);\n                break;\n            }\n        }\n        this.effectCount--;\n    }\n\n    effectsIncludeType(type: EffectType): boolean {\n        for (let i: number = 0; i < this.effects.length; i++) if (this.effects[i] != null && this.effects[i]!.type == type) return true;\n        return false;\n    }\n\n    addEnvelope(target: number, index: number, envelope: number, newEnvelopes: boolean, start: number = 0, end: number = -1, inverse: boolean = false, perEnvelopeSpeed: number = -1, perEnvelopeLowerBound: number = 0, perEnvelopeUpperBound: number = 1, steps: number = 2, seed: number = 2, waveform: number = LFOEnvelopeTypes.sine, discrete: boolean = false): void {\n        end = end != -1 ? end : this.isNoiseInstrument ? Config.drumCount - 1 : Config.maxPitch; //find default if none is given\n        perEnvelopeSpeed = perEnvelopeSpeed != -1 ? perEnvelopeSpeed : newEnvelopes ? 1 : Config.envelopes[envelope].speed; //find default if none is given\n        let makeEmpty: boolean = false;\n        if (!this.supportsEnvelopeTarget(target, index)) makeEmpty = true;\n        if (this.envelopeCount >= Config.maxEnvelopeCount) throw new Error();\n        while (this.envelopes.length <= this.envelopeCount) this.envelopes[this.envelopes.length] = new EnvelopeSettings(this.isNoiseInstrument);\n        const envelopeSettings: EnvelopeSettings = this.envelopes[this.envelopeCount];\n        envelopeSettings.target = makeEmpty ? Config.instrumentAutomationTargets.dictionary[\"none\"].index : target;\n        envelopeSettings.index = makeEmpty ? 0 : index;\n        if (!newEnvelopes) {\n            envelopeSettings.envelope = clamp(0, Config.newEnvelopes.length, Config.envelopes[envelope].type);\n        } else {\n            envelopeSettings.envelope = envelope;\n        }\n        envelopeSettings.pitchEnvelopeStart = start;\n        envelopeSettings.pitchEnvelopeEnd = end;\n        envelopeSettings.inverse = inverse;\n        envelopeSettings.perEnvelopeSpeed = perEnvelopeSpeed;\n        envelopeSettings.perEnvelopeLowerBound = perEnvelopeLowerBound;\n        envelopeSettings.perEnvelopeUpperBound = perEnvelopeUpperBound;\n        envelopeSettings.steps = steps;\n        envelopeSettings.seed = seed;\n        envelopeSettings.waveform = waveform;\n        envelopeSettings.discrete = discrete;\n        this.envelopeCount++;\n    }\n\n    supportsEnvelopeTarget(target: number, index: number): boolean {\n        const automationTarget: AutomationTarget = Config.instrumentAutomationTargets[target];\n        if (automationTarget.computeIndex == null && automationTarget.name != \"none\") {\n            return false;\n        }\n        if (index >= automationTarget.maxCount) {\n            return false;\n        }\n        if (automationTarget.compatibleInstruments != null && automationTarget.compatibleInstruments.indexOf(this.type) == -1) {\n            return false;\n        }\n        if ((automationTarget.effect != null && !this.effectsIncludeType(automationTarget.effect)) || (automationTarget.mdeffect != null && (this.mdeffects & (1 << automationTarget.mdeffect)) == 0)) {\n            return false;\n        }\n        if (automationTarget.isFilter) {\n            //if (automationTarget.perNote) {\n            let useControlPointCount: number = this.noteFilter.controlPointCount;\n            if (this.noteFilterType)\n                useControlPointCount = 1;\n            if (index >= useControlPointCount) return false;\n            //} else {\n            //\tif (index >= this.eqFilter.controlPointCount)   return false;\n            //}\n        }\n        if ((automationTarget.name == \"operatorFrequency\") || (automationTarget.name == \"operatorAmplitude\")) {\n            if (index >= 4 + (this.type == InstrumentType.fm6op ? 2 : 0)) return false;\n        }\n        return true;\n    }\n\n    clearInvalidEnvelopeTargets(): void {\n        for (let envelopeIndex: number = 0; envelopeIndex < this.envelopeCount; envelopeIndex++) {\n            const target: number = this.envelopes[envelopeIndex].target;\n            const index: number = this.envelopes[envelopeIndex].index;\n            if (!this.supportsEnvelopeTarget(target, index)) {\n                this.envelopes[envelopeIndex].target = Config.instrumentAutomationTargets.dictionary[\"none\"].index;\n                this.envelopes[envelopeIndex].index = 0;\n            }\n        }\n    }\n\n    getTransition(): Transition {\n        return effectsIncludeTransition(this.mdeffects) ? Config.transitions[this.transition] :\n            (this.type == InstrumentType.mod ? Config.transitions.dictionary[\"interrupt\"] : Config.transitions.dictionary[\"normal\"]);\n    }\n\n    getFadeInSeconds(): number {\n        return (this.type == InstrumentType.drumset) ? 0.0 : fadeInSettingToSeconds(this.fadeIn);\n    }\n\n    getFadeOutTicks(): number {\n        return (this.type == InstrumentType.drumset) ? Config.drumsetFadeOutTicks : fadeOutSettingToTicks(this.fadeOut)\n    }\n\n    getChord(): Chord {\n        return effectsIncludeChord(this.mdeffects) ? Config.chords[this.chord] : Config.chords.dictionary[\"simultaneous\"];\n    }\n\n    getDrumsetEnvelope(pitch: number): Envelope {\n        if (this.type != InstrumentType.drumset) throw new Error(\"Can't getDrumsetEnvelope() for non-drumset.\");\n        return Config.envelopes[this.drumsetEnvelopes[pitch]];\n    }\n}\n", "// Copyright (c) John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { Config } from \"./SynthConfig\";\nimport { Instrument } from \"./Instrument\";\nimport { clamp } from \"./utils\";\nimport { Channel } from \"./Channel\";\nimport { Song } from \"./Song\";\n\nexport interface NotePin {\n    interval: number;\n    time: number;\n    size: number;\n}\n\nexport function makeNotePin(interval: number, time: number, size: number): NotePin {\n    return { interval: interval, time: time, size: size };\n}\n\nexport class Note {\n    pitches: number[];\n    pins: NotePin[];\n    start: number;\n    end: number;\n    continuesLastPattern: boolean;\n    chipWaveStartOffset: number;\n\n    constructor(pitch: number, start: number, end: number, size: number, fadeout: boolean = false, chipWaveStartOffset: number = 0) {\n        this.pitches = [pitch];\n        this.pins = [makeNotePin(0, 0, size), makeNotePin(0, end - start, fadeout ? 0 : size)];\n        this.start = start;\n        this.end = end;\n        this.continuesLastPattern = false;\n        this.chipWaveStartOffset = chipWaveStartOffset;\n    }\n\n    pickMainInterval(): number {\n        let longestFlatIntervalDuration: number = 0;\n        let mainInterval: number = 0;\n        for (let pinIndex: number = 1; pinIndex < this.pins.length; pinIndex++) {\n            const pinA: NotePin = this.pins[pinIndex - 1];\n            const pinB: NotePin = this.pins[pinIndex];\n            if (pinA.interval == pinB.interval) {\n                const duration: number = pinB.time - pinA.time;\n                if (longestFlatIntervalDuration < duration) {\n                    longestFlatIntervalDuration = duration;\n                    mainInterval = pinA.interval;\n                }\n            }\n        }\n        if (longestFlatIntervalDuration == 0) {\n            let loudestSize: number = 0;\n            for (let pinIndex: number = 0; pinIndex < this.pins.length; pinIndex++) {\n                const pin: NotePin = this.pins[pinIndex];\n                if (loudestSize < pin.size) {\n                    loudestSize = pin.size;\n                    mainInterval = pin.interval;\n                }\n            }\n        }\n        return mainInterval;\n    }\n\n    clone(): Note {\n        const newNote: Note = new Note(-1, this.start, this.end, 3);\n        newNote.pitches = this.pitches.concat();\n        newNote.pins = [];\n        for (const pin of this.pins) {\n            newNote.pins.push(makeNotePin(pin.interval, pin.time, pin.size));\n        }\n        newNote.continuesLastPattern = this.continuesLastPattern;\n        return newNote;\n    }\n\n    getEndPinIndex(part: number): number {\n        let endPinIndex: number;\n        for (endPinIndex = 1; endPinIndex < this.pins.length - 1; endPinIndex++) {\n            if (this.pins[endPinIndex].time + this.start > part) break;\n        }\n        return endPinIndex;\n    }\n}\n\nexport class Pattern {\n    notes: Note[] = [];\n    readonly instruments: number[] = [0];\n\n    cloneNotes(): Note[] {\n        const result: Note[] = [];\n        for (const note of this.notes) {\n            result.push(note.clone());\n        }\n        return result;\n    }\n\n    reset(): void {\n        this.notes.length = 0;\n        this.instruments[0] = 0;\n        this.instruments.length = 1;\n    }\n\n    toJsonObject(song: Song, channel: Channel, isModChannel: boolean): any {\n        const noteArray: Object[] = [];\n        for (const note of this.notes) {\n            // Only one ins per pattern is enforced in mod channels.\n            let instrument: Instrument = channel.instruments[this.instruments[0]];\n            let mod: number = Math.max(0, Config.modCount - note.pitches[0] - 1);\n            let volumeCap: number = song.getVolumeCapForSetting(isModChannel, instrument.modulators[mod], instrument.modFilterTypes[mod]);\n            const pointArray: Object[] = [];\n            for (const pin of note.pins) {\n                let useVol: number = isModChannel ? Math.round(pin.size) : Math.round(pin.size * 100 / volumeCap);\n                pointArray.push({\n                    \"tick\": (pin.time + note.start) * Config.rhythms[song.rhythm].stepsPerBeat / Config.partsPerBeat,\n                                \"pitchBend\": pin.interval,\n                                \"volume\": useVol,\n                                \"forMod\": isModChannel,\n                });\n            }\n\n            const noteObject: any = {\n                \"pitches\": note.pitches,\n                \"points\": pointArray,\n            };\n            if (note.start == 0) {\n                noteObject[\"continuesLastPattern\"] = note.continuesLastPattern;\n            }\n            noteArray.push(noteObject);\n        }\n\n        const patternObject: any = { \"notes\": noteArray };\n        if (song.patternInstruments) {\n            patternObject[\"instruments\"] = this.instruments.map(i => i + 1);\n        }\n        return patternObject;\n    }\n\n    fromJsonObject(patternObject: any, song: Song, channel: Channel, importedPartsPerBeat: number, isNoiseChannel: boolean, isModChannel: boolean, jsonFormat: string = \"auto\"): void {\n        const format: string = jsonFormat.toLowerCase();\n\n        if (song.patternInstruments) {\n            if (Array.isArray(patternObject[\"instruments\"])) {\n                const instruments: any[] = patternObject[\"instruments\"];\n                const instrumentCount: number = clamp(Config.instrumentCountMin, song.getMaxInstrumentsPerPatternForChannel(channel) + 1, instruments.length);\n                for (let j: number = 0; j < instrumentCount; j++) {\n                    this.instruments[j] = clamp(0, channel.instruments.length, (instruments[j] | 0) - 1);\n                }\n                this.instruments.length = instrumentCount;\n            } else {\n                this.instruments[0] = clamp(0, channel.instruments.length, (patternObject[\"instrument\"] | 0) - 1);\n                this.instruments.length = 1;\n            }\n        }\n\n        if (patternObject[\"notes\"] && patternObject[\"notes\"].length > 0) {\n            const maxNoteCount: number = Math.min(song.beatsPerBar * Config.partsPerBeat * (isModChannel ? Config.modCount : 1), patternObject[\"notes\"].length >>> 0);\n\n            // TODO: Consider supporting notes specified in any timing order, sorting them and truncating as necessary.\n            //let tickClock: number = 0;\n            for (let j: number = 0; j < patternObject[\"notes\"].length; j++) {\n                if (j >= maxNoteCount) break;\n\n                const noteObject = patternObject[\"notes\"][j];\n                if (!noteObject || !noteObject[\"pitches\"] || !(noteObject[\"pitches\"].length >= 1) || !noteObject[\"points\"] || !(noteObject[\"points\"].length >= 2)) {\n                    continue;\n                }\n\n                const note: Note = new Note(0, 0, 0, 0);\n                note.pitches = [];\n                note.pins = [];\n\n                for (let k: number = 0; k < noteObject[\"pitches\"].length; k++) {\n                    const pitch: number = noteObject[\"pitches\"][k] | 0;\n                    if (note.pitches.indexOf(pitch) != -1) continue;\n                    note.pitches.push(pitch);\n                    if (note.pitches.length >= Config.maxChordSize) break;\n                }\n                if (note.pitches.length < 1) continue;\n\n                //let noteClock: number = tickClock;\n                let startInterval: number = 0;\n\n                let instrument: Instrument = channel.instruments[this.instruments[0]];\n                let mod: number = Math.max(0, Config.modCount - note.pitches[0] - 1);\n\n                for (let k: number = 0; k < noteObject[\"points\"].length; k++) {\n                    const pointObject: any = noteObject[\"points\"][k];\n                    if (pointObject == undefined || pointObject[\"tick\"] == undefined) continue;\n                    const interval: number = (pointObject[\"pitchBend\"] == undefined) ? 0 : (pointObject[\"pitchBend\"] | 0);\n\n                    const time: number = Math.round((+pointObject[\"tick\"]) * Config.partsPerBeat / importedPartsPerBeat);\n\n                    // Only one instrument per pattern allowed in mod channels.\n                    let volumeCap: number = song.getVolumeCapForSetting(isModChannel, instrument.modulators[mod], instrument.modFilterTypes[mod]);\n\n                    // The strange volume formula used for notes is not needed for mods. Some rounding errors were possible.\n                    // A \"forMod\" signifier was added to new JSON export to detect when the higher precision export was used in a file.\n                    let size: number;\n                    if (pointObject[\"volume\"] == undefined) {\n                        size = volumeCap;\n                    } else if (pointObject[\"forMod\"] == undefined) {\n                        size = Math.max(0, Math.min(volumeCap, Math.round((pointObject[\"volume\"] | 0) * volumeCap / 100)));\n                    }\n                    else {\n                        size = ((pointObject[\"forMod\"] | 0) > 0) ? Math.round(pointObject[\"volume\"] | 0) : Math.max(0, Math.min(volumeCap, Math.round((pointObject[\"volume\"] | 0) * volumeCap / 100)));\n                    }\n\n                    if (time > song.beatsPerBar * Config.partsPerBeat) continue;\n                    if (note.pins.length == 0) {\n                        //if (time < noteClock) continue;\n                        note.start = time;\n                        startInterval = interval;\n                    } else {\n                        //if (time <= noteClock) continue;\n                    }\n                    //noteClock = time;\n\n                    note.pins.push(makeNotePin(interval - startInterval, time - note.start, size));\n                }\n                if (note.pins.length < 2) continue;\n\n                note.end = note.pins[note.pins.length - 1].time + note.start;\n\n                const maxPitch: number = isNoiseChannel ? Config.drumCount - 1 : Config.maxPitch;\n                let lowestPitch: number = maxPitch;\n                let highestPitch: number = 0;\n                for (let k: number = 0; k < note.pitches.length; k++) {\n                    note.pitches[k] += startInterval;\n                    if (note.pitches[k] < 0 || note.pitches[k] > maxPitch) {\n                        note.pitches.splice(k, 1);\n                        k--;\n                    }\n                    if (note.pitches[k] < lowestPitch) lowestPitch = note.pitches[k];\n                    if (note.pitches[k] > highestPitch) highestPitch = note.pitches[k];\n                }\n                if (note.pitches.length < 1) continue;\n\n                for (let k: number = 0; k < note.pins.length; k++) {\n                    const pin: NotePin = note.pins[k];\n                    if (pin.interval + lowestPitch < 0) pin.interval = -lowestPitch;\n                    if (pin.interval + highestPitch > maxPitch) pin.interval = maxPitch - highestPitch;\n                    if (k >= 2) {\n                        if (pin.interval == note.pins[k - 1].interval &&\n                            pin.interval == note.pins[k - 2].interval &&\n                            pin.size == note.pins[k - 1].size &&\n                            pin.size == note.pins[k - 2].size) {\n                            note.pins.splice(k - 1, 1);\n                        k--;\n                            }\n                    }\n                }\n\n                if (note.start == 0) {\n                    note.continuesLastPattern = (noteObject[\"continuesLastPattern\"] === true);\n                } else {\n                    note.continuesLastPattern = false;\n                }\n\n                if ((format != \"ultrabox\" && format != \"slarmoosbox\") && instrument.modulators[mod] == Config.modulators.dictionary[\"tempo\"].index) {\n                    for (const pin of note.pins) {\n                        const oldMin: number = 30;\n                        const newMin: number = 1;\n                        const old: number = pin.size + oldMin;\n                        pin.size = old - newMin; // convertRealFactor will add back newMin as necessary\n                    }\n                }\n\n                this.notes.push(note);\n            }\n        }\n    }\n}\n", "// Copyright (c) John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { startLoadingSample, sampleLoadingState, SampleLoadingState, sampleLoadEvents, SampleLoadedEvent, SampleLoadingStatus, loadBuiltInSamples, Dictionary, DictionaryArray, toNameMap, FilterType, SustainType, EnvelopeType, InstrumentType, EffectType, MDEffectType, Envelope, Config, effectsIncludeTransition, effectsIncludeChord, effectsIncludePitchShift, effectsIncludeDetune, effectsIncludeVibrato, LFOEnvelopeTypes, RandomEnvelopeTypes } from \"./SynthConfig\";\nimport { Preset, EditorConfig } from \"../editor/EditorConfig\";\nimport { Channel } from \"./Channel\";\nimport { Instrument, LegacySettings } from \"./Instrument\";\nimport { Effect } from \"./Effect\";\nimport { Note, NotePin, makeNotePin, Pattern } from \"./Pattern\";\nimport { FilterSettings, FilterControlPoint } from \"./Filter\";\nimport { clamp, validateRange, parseFloatWithDefault, parseIntWithDefault, secondsToFadeInSetting, ticksToFadeOutSetting } from \"./utils\";\n//import { Synth } from \"./synth\";\n\nfunction encode32BitNumber(buffer: number[], x: number): void {\n    // 0b11_\n    buffer.push(base64IntToCharCode[(x >>> (6 * 5)) & 0x3]);\n    //      111111_\n    buffer.push(base64IntToCharCode[(x >>> (6 * 4)) & 0x3f]);\n    //             111111_\n    buffer.push(base64IntToCharCode[(x >>> (6 * 3)) & 0x3f]);\n    //                    111111_\n    buffer.push(base64IntToCharCode[(x >>> (6 * 2)) & 0x3f]);\n    //                           111111_\n    buffer.push(base64IntToCharCode[(x >>> (6 * 1)) & 0x3f]);\n    //                                  111111\n    buffer.push(base64IntToCharCode[(x >>> (6 * 0)) & 0x3f]);\n}\n\n// @TODO: This is error-prone, because the caller has to remember to increment\n// charIndex by 6 afterwards.\nfunction decode32BitNumber(compressed: string, charIndex: number): number {\n    let x: number = 0;\n    // 0b11_\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 5);\n    //      111111_\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 4);\n    //             111111_\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 3);\n    //                    111111_\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 2);\n    //                           111111_\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 1);\n    //                                  111111\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 0);\n    return x;\n}\n\nfunction encodeUnisonSettings(buffer: number[], v: number, s: number, o: number, e: number, i: number): void {\n    // TODO: make these sign bits more efficient (bundle them together)\n    buffer.push(base64IntToCharCode[v]);\n\n    // TODO: make these use bitshifts instead for consistency\n    buffer.push(base64IntToCharCode[Number((s > 0))]);\n    let cleanS = Math.round(Math.abs(s) * 1000);\n    let cleanSDivided = Math.floor(cleanS / 63);\n    buffer.push(base64IntToCharCode[cleanS % 63], base64IntToCharCode[cleanSDivided % 63], base64IntToCharCode[Math.floor(cleanSDivided / 63)]);\n\n    buffer.push(base64IntToCharCode[Number((o > 0))]);\n    let cleanO = Math.round(Math.abs(o) * 1000);\n    let cleanODivided = Math.floor(cleanO / 63);\n    buffer.push(base64IntToCharCode[cleanO % 63], base64IntToCharCode[cleanODivided % 63], base64IntToCharCode[Math.floor(cleanODivided / 63)]);\n\n    buffer.push(base64IntToCharCode[Number((e > 0))]);\n    let cleanE = Math.round(Math.abs(e) * 1000);\n    buffer.push(base64IntToCharCode[cleanE % 63], base64IntToCharCode[Math.floor(cleanE / 63)]);\n\n    buffer.push(base64IntToCharCode[Number((i > 0))]);\n    let cleanI = Math.round(Math.abs(i) * 1000);\n    buffer.push(base64IntToCharCode[cleanI % 63], base64IntToCharCode[Math.floor(cleanI / 63)]);\n}\n\nfunction convertLegacyKeyToKeyAndOctave(rawKeyIndex: number): [number, number] {\n    let key: number = clamp(0, Config.keys.length, rawKeyIndex);\n    let octave: number = 0;\n    // This conversion code depends on C through B being\n    // available as keys, of course.\n    if (rawKeyIndex === 12) {\n        // { name: \"C+\", isWhiteKey: false, basePitch: 24 }\n        key = 0;\n        octave = 1;\n    } else if (rawKeyIndex === 13) {\n        // { name: \"G- (actually F#-)\", isWhiteKey: false, basePitch: 6 }\n        key = 6;\n        octave = -1;\n    } else if (rawKeyIndex === 14) {\n        // { name: \"C-\", isWhiteKey: true, basePitch: 0 }\n        key = 0;\n        octave = -1;\n    } else if (rawKeyIndex === 15) {\n        // { name: \"oh no (F-)\", isWhiteKey: true, basePitch: 5 }\n        key = 5;\n        octave = -1;\n    }\n    return [key, octave];\n}\n\nconst enum CharCode {\n    SPACE = 32,\n    HASH = 35,\n    PERCENT = 37,\n    AMPERSAND = 38,\n    PLUS = 43,\n    DASH = 45,\n    DOT = 46,\n    NUM_0 = 48,\n    NUM_1 = 49,\n    NUM_2 = 50,\n    NUM_3 = 51,\n    NUM_4 = 52,\n    NUM_5 = 53,\n    NUM_6 = 54,\n    NUM_7 = 55,\n    NUM_8 = 56,\n    NUM_9 = 57,\n    EQUALS = 61,\n    A = 65,\n    B = 66,\n    C = 67,\n    D = 68,\n    E = 69,\n    F = 70,\n    G = 71,\n    H = 72,\n    I = 73,\n    J = 74,\n    K = 75,\n    L = 76,\n    M = 77,\n    N = 78,\n    O = 79,\n    P = 80,\n    Q = 81,\n    R = 82,\n    S = 83,\n    T = 84,\n    U = 85,\n    V = 86,\n    W = 87,\n    X = 88,\n    Y = 89,\n    Z = 90,\n    UNDERSCORE = 95,\n    a = 97,\n    b = 98,\n    c = 99,\n    d = 100,\n    e = 101,\n    f = 102,\n    g = 103,\n    h = 104,\n    i = 105,\n    j = 106,\n    k = 107,\n    l = 108,\n    m = 109,\n    n = 110,\n    o = 111,\n    p = 112,\n    q = 113,\n    r = 114,\n    s = 115,\n    t = 116,\n    u = 117,\n    v = 118,\n    w = 119,\n    x = 120,\n    y = 121,\n    z = 122,\n    LEFT_CURLY_BRACE = 123,\n    RIGHT_CURLY_BRACE = 125,\n}\n\nconst enum SongTagCode {\n    beatCount           = CharCode.a, // added in BeepBox URL version 2\n\tbars                = CharCode.b, // added in BeepBox URL version 2\n\tsongEq              = CharCode.c, // added in BeepBox URL version 2 for vibrato, switched to song eq in Slarmoo's Box 1.3\n\tfadeInOut           = CharCode.d, // added in BeepBox URL version 3 for transition, switched to fadeInOut in 9\n\tloopEnd             = CharCode.e, // added in BeepBox URL version 2\n\tnoteFilter          = CharCode.f, // added in BeepBox URL version 3\n\tbarCount            = CharCode.g, // added in BeepBox URL version 3\n\tunison              = CharCode.h, // added in BeepBox URL version 2\n\tinstrumentCount     = CharCode.i, // added in BeepBox URL version 3\n\tpatternCount        = CharCode.j, // added in BeepBox URL version 3\n\tkey                 = CharCode.k, // added in BeepBox URL version 2\n\tloopStart           = CharCode.l, // added in BeepBox URL version 2\n\treverb              = CharCode.m, // added in BeepBox URL version 5, DEPRECATED\n\tchannelCount        = CharCode.n, // added in BeepBox URL version 6\n\tchannelOctave       = CharCode.o, // added in BeepBox URL version 3\n\tpatterns            = CharCode.p, // added in BeepBox URL version 2\n\teffects             = CharCode.q, // added in BeepBox URL version 7\n\trhythm              = CharCode.r, // added in BeepBox URL version 2\n\tscale               = CharCode.s, // added in BeepBox URL version 2\n\ttempo               = CharCode.t, // added in BeepBox URL version 2\n\tpreset              = CharCode.u, // added in BeepBox URL version 7\n\tvolume              = CharCode.v, // added in BeepBox URL version 2\n\twave                = CharCode.w, // added in BeepBox URL version 2\n\tsupersaw            = CharCode.x, // added in BeepBox URL version 9 ([UB] was used for chip wave but is now DEPRECATED)\n\tloopControls        = CharCode.y, // added in BeepBox URL version 7, DEPRECATED, [UB] repurposed for chip wave loop controls\n\tdrumsetEnvelopes    = CharCode.z, // added in BeepBox URL version 7 for filter envelopes, still used for drumset envelopes\n\talgorithm           = CharCode.A, // added in BeepBox URL version 6\n\tfeedbackAmplitude   = CharCode.B, // added in BeepBox URL version 6\n\tchord               = CharCode.C, // added in BeepBox URL version 7, DEPRECATED\n\tdetune              = CharCode.D, // added in JummBox URL version 3(?) for detune, DEPRECATED\n\tenvelopes           = CharCode.E, // added in BeepBox URL version 6 for FM operator envelopes, repurposed in 9 for general envelopes.\n\tfeedbackType        = CharCode.F, // added in BeepBox URL version 6\n\tarpeggioSpeed       = CharCode.G, // added in JummBox URL version 3 for arpeggioSpeed, DEPRECATED\n\tharmonics           = CharCode.H, // added in BeepBox URL version 7\n\tstringSustain       = CharCode.I, // added in BeepBox URL version 9\n//\t                    = CharCode.J,\n//\t                    = CharCode.K,\n\tpan                 = CharCode.L, // added between 8 and 9, DEPRECATED\n\tcustomChipWave      = CharCode.M, // added in JummBox URL version 1(?) for customChipWave\n\tsongTitle           = CharCode.N, // added in JummBox URL version 1(?) for songTitle\n\tlimiterSettings     = CharCode.O, // added in JummBox URL version 3(?) for limiterSettings\n\toperatorAmplitudes  = CharCode.P, // added in BeepBox URL version 6\n\toperatorFrequencies = CharCode.Q, // added in BeepBox URL version 6\n\toperatorWaves       = CharCode.R, // added in JummBox URL version 4 for operatorWaves\n\tspectrum            = CharCode.S, // added in BeepBox URL version 7\n\tstartInstrument     = CharCode.T, // added in BeepBox URL version 6\n\tchannelNames        = CharCode.U, // added in JummBox URL version 4(?) for channelNames\n\tfeedbackEnvelope    = CharCode.V, // added in BeepBox URL version 6, DEPRECATED\n\tpulseWidth          = CharCode.W, // added in BeepBox URL version 7\n\taliases             = CharCode.X, // added in JummBox URL version 4 for aliases, DEPRECATED, [UB] repurposed for PWM decimal offset (DEPRECATED as well)\n//                      = CharCode.Y,\n//\t                    = CharCode.Z,\n//\t                    = CharCode.NUM_0,\n//\t                    = CharCode.NUM_1,\n//\t                    = CharCode.NUM_2,\n//\t                    = CharCode.NUM_3,\n//\t                    = CharCode.NUM_4,\n//\t                    = CharCode.NUM_5,\n//\t                    = CharCode.NUM_6,\n//\t                    = CharCode.NUM_7,\n//\t                    = CharCode.NUM_8,\n//\t                    = CharCode.NUM_9,\n//\t                    = CharCode.DASH,\n//\t                    = CharCode.UNDERSCORE,\n\n}\n\nconst base64IntToCharCode: ReadonlyArray<number> = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 45, 95];\nconst base64CharCodeToInt: ReadonlyArray<number> = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 62, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0, 0, 0, 0, 63, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 0, 0, 0, 0, 0]; // 62 could be represented by either \"-\" or \".\" for historical reasons. New songs should use \"-\".\n\nclass BitFieldReader {\n    private _bits: number[] = [];\n    private _readIndex: number = 0;\n\n    constructor(source: string, startIndex: number, stopIndex: number) {\n        for (let i: number = startIndex; i < stopIndex; i++) {\n            const value: number = base64CharCodeToInt[source.charCodeAt(i)];\n            this._bits.push((value >> 5) & 0x1);\n            this._bits.push((value >> 4) & 0x1);\n            this._bits.push((value >> 3) & 0x1);\n            this._bits.push((value >> 2) & 0x1);\n            this._bits.push((value >> 1) & 0x1);\n            this._bits.push(value & 0x1);\n        }\n    }\n\n    read(bitCount: number): number {\n        let result: number = 0;\n        while (bitCount > 0) {\n            result = result << 1;\n            result += this._bits[this._readIndex++];\n            bitCount--;\n        }\n        return result;\n    }\n\n    readLongTail(minValue: number, minBits: number): number {\n        let result: number = minValue;\n        let numBits: number = minBits;\n        while (this._bits[this._readIndex++]) {\n            result += 1 << numBits;\n            numBits++;\n        }\n        while (numBits > 0) {\n            numBits--;\n            if (this._bits[this._readIndex++]) {\n                result += 1 << numBits;\n            }\n        }\n        return result;\n    }\n\n    readPartDuration(): number {\n        return this.readLongTail(1, 3);\n    }\n\n    readLegacyPartDuration(): number {\n        return this.readLongTail(1, 2);\n    }\n\n    readPinCount(): number {\n        return this.readLongTail(1, 0);\n    }\n\n    readPitchInterval(): number {\n        if (this.read(1)) {\n            return -this.readLongTail(1, 3);\n        } else {\n            return this.readLongTail(1, 3);\n        }\n    }\n}\n\nclass BitFieldWriter {\n    private _index: number = 0;\n    private _bits: number[] = [];\n\n    clear() {\n        this._index = 0;\n    }\n\n    write(bitCount: number, value: number): void {\n        bitCount--;\n        while (bitCount >= 0) {\n            this._bits[this._index++] = (value >>> bitCount) & 1;\n            bitCount--;\n        }\n    }\n\n    writeLongTail(minValue: number, minBits: number, value: number): void {\n        if (value < minValue) throw new Error(\"value out of bounds\");\n        value -= minValue;\n        let numBits: number = minBits;\n        while (value >= (1 << numBits)) {\n            this._bits[this._index++] = 1;\n            value -= 1 << numBits;\n            numBits++;\n        }\n        this._bits[this._index++] = 0;\n        while (numBits > 0) {\n            numBits--;\n            this._bits[this._index++] = (value >>> numBits) & 1;\n        }\n    }\n\n    writePartDuration(value: number): void {\n        this.writeLongTail(1, 3, value);\n    }\n\n    writePinCount(value: number): void {\n        this.writeLongTail(1, 0, value);\n    }\n\n    writePitchInterval(value: number): void {\n        if (value < 0) {\n            this.write(1, 1); // sign\n            this.writeLongTail(1, 3, -value);\n        } else {\n            this.write(1, 0); // sign\n            this.writeLongTail(1, 3, value);\n        }\n    }\n\n    concat(other: BitFieldWriter): void {\n        for (let i: number = 0; i < other._index; i++) {\n            this._bits[this._index++] = other._bits[i];\n        }\n    }\n\n    encodeBase64(buffer: number[]): number[] {\n\n        for (let i: number = 0; i < this._index; i += 6) {\n            const value: number = (this._bits[i] << 5) | (this._bits[i + 1] << 4) | (this._bits[i + 2] << 3) | (this._bits[i + 3] << 2) | (this._bits[i + 4] << 1) | this._bits[i + 5];\n            buffer.push(base64IntToCharCode[value]);\n        }\n        return buffer;\n    }\n\n    lengthBase64(): number {\n        return Math.ceil(this._index / 6);\n    }\n}\n\nexport interface HeldMod {\n    volume: number;\n    channelIndex: number;\n    instrumentIndex: number;\n    setting: number;\n    holdFor: number;\n}\n\nexport class Song {\n    private static readonly _format: string = Config.jsonFormat;\n    private static readonly _oldestBeepboxVersion: number = 2;\n    private static readonly _latestBeepboxVersion: number = 9;\n    private static readonly _oldestJummBoxVersion: number = 1;\n    private static readonly _latestJummBoxVersion: number = 6;\n    private static readonly _oldestGoldBoxVersion: number = 1;\n    private static readonly _latestGoldBoxVersion: number = 4;\n    private static readonly _oldestUltraBoxVersion: number = 1;\n    private static readonly _latestUltraBoxVersion: number = 5;\n    private static readonly _oldestSlarmoosBoxVersion: number = 1;\n    private static readonly _latestSlarmoosBoxVersion: number = 5;\n    // One-character variant detection at the start of URL to distinguish variants such as JummBox, Or Goldbox. \"j\" and \"g\" respectively\n    //also \"u\" is ultrabox lol\n    private static readonly _variant = 0x64; //\"d\" ~ DragonBox\n\n    title: string;\n    scale: number;\n    scaleCustom: boolean[] = [];\n    key: number;\n    octave: number;\n    tempo: number;\n    reverb: number;\n    beatsPerBar: number;\n    barCount: number;\n    patternsPerChannel: number;\n    rhythm: number;\n    layeredInstruments: boolean;\n    patternInstruments: boolean;\n    loopStart: number;\n    loopLength: number;\n    pitchChannelCount: number;\n    noiseChannelCount: number;\n    modChannelCount: number;\n    readonly channels: Channel[] = [];\n    limitDecay: number = 4.0;\n    limitRise: number = 4000.0;\n    compressionThreshold: number = 1.0;\n    limitThreshold: number = 1.0;\n    compressionRatio: number = 1.0;\n    limitRatio: number = 1.0;\n    masterGain: number = 1.0;\n    inVolumeCap: number = 0.0;\n    outVolumeCap: number = 0.0;\n    outVolumeCapL: number = 0.0;\n    outVolumeCapR: number = 0.0;\n    eqFilter: FilterSettings = new FilterSettings();\n    eqFilterType: boolean = false;\n    eqFilterSimpleCut: number = Config.filterSimpleCutRange - 1;\n    eqFilterSimplePeak: number = 0;\n    eqSubFilters: (FilterSettings | null)[] = [];\n    tmpEqFilterStart: FilterSettings | null;\n    tmpEqFilterEnd: FilterSettings | null;\n\n    constructor(string?: string) {\n        if (string != undefined) {\n            this.fromBase64String(string);\n        } else {\n            this.initToDefault(true);\n        }\n    }\n\n    // Returns the ideal new pre volume when dragging (max volume for a normal note, a \"neutral\" value for mod notes based on how they work)\n    getNewNoteVolume = (isMod: boolean, modChannel?: number, modInstrument?: number, modCount?: number): number => {\n        if (!isMod || modChannel == undefined || modInstrument == undefined || modCount == undefined)\n            return Config.noteSizeMax;\n        else {\n            // Sigh, the way pitches count up and the visual ordering in the UI are flipped.\n            modCount = Config.modCount - modCount - 1;\n\n            const instrument: Instrument = this.channels[modChannel].instruments[modInstrument];\n            let vol: number | undefined = Config.modulators[instrument.modulators[modCount]].newNoteVol;\n\n            let currentIndex: number = instrument.modulators[modCount];\n            // For tempo, actually use user defined tempo\n            let tempoIndex: number = Config.modulators.dictionary[\"tempo\"].index;\n            if(currentIndex == tempoIndex) vol = this.tempo - Config.modulators[tempoIndex].convertRealFactor;\n            //for effects and envelopes, use the user defined value of the selected instrument (or the default value if all or active is selected)\n            if (!Config.modulators[currentIndex].forSong && instrument.modInstruments[modCount][0] < this.channels[instrument.modChannels[modCount][0]].instruments.length) {\n                let chorusIndex: number = Config.modulators.dictionary[\"chorus\"].index;\n                let reverbIndex: number = Config.modulators.dictionary[\"reverb\"].index;\n                let gainIndex: number = Config.modulators.dictionary[\"gain\"].index;\n                let panningIndex: number = Config.modulators.dictionary[\"pan\"].index;\n                let panDelayIndex: number = Config.modulators.dictionary[\"pan delay\"].index;\n                let distortionIndex: number = Config.modulators.dictionary[\"distortion\"].index;\n                let detuneIndex: number = Config.modulators.dictionary[\"detune\"].index;\n                let vibratoDepthIndex: number = Config.modulators.dictionary[\"vibrato depth\"].index;\n                let vibratoSpeedIndex: number = Config.modulators.dictionary[\"vibrato speed\"].index;\n                let vibratoDelayIndex: number = Config.modulators.dictionary[\"vibrato delay\"].index;\n                let arpSpeedIndex: number = Config.modulators.dictionary[\"arp speed\"].index;\n                let bitCrushIndex: number = Config.modulators.dictionary[\"bit crush\"].index;\n                let freqCrushIndex: number = Config.modulators.dictionary[\"freq crush\"].index;\n                let echoIndex: number = Config.modulators.dictionary[\"echo\"].index;\n                let echoDelayIndex: number = Config.modulators.dictionary[\"echo delay\"].index;\n                let echoPingPongIndex: number = Config.modulators.dictionary[\"echo ping pong\"].index;\n                let pitchShiftIndex: number = Config.modulators.dictionary[\"pitch shift\"].index;\n                let ringModIndex: number = Config.modulators.dictionary[\"ring modulation\"].index;\n                let ringModHertzIndex: number = Config.modulators.dictionary[\"ring mod hertz\"].index;\n                let granularIndex: number = Config.modulators.dictionary[\"granular\"].index;\n                let grainAmountIndex: number = Config.modulators.dictionary[\"grain freq\"].index;\n                let grainSizeIndex: number = Config.modulators.dictionary[\"grain size\"].index;\n                let grainRangeIndex: number = Config.modulators.dictionary[\"grain range\"].index;\n                let envSpeedIndex: number = Config.modulators.dictionary[\"envelope speed\"].index;\n                let perEnvSpeedIndex: number = Config.modulators.dictionary[\"individual envelope speed\"].index;\n                let perEnvLowerIndex: number = Config.modulators.dictionary[\"individual envelope lower bound\"].index;\n                let perEnvUpperIndex: number = Config.modulators.dictionary[\"individual envelope upper bound\"].index;\n                let instrumentIndex: number = instrument.modInstruments[modCount][0];\n                let effectIndex: number = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effectCount; //in a moment i should be working to make this work with mods\n\n                switch (currentIndex) {\n                    case chorusIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex]!.chorus - Config.modulators[chorusIndex].convertRealFactor;\n                        break;\n                    case reverbIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex]!.reverb - Config.modulators[reverbIndex].convertRealFactor;\n                        break;\n                    case gainIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex]!.gain - Config.modulators[gainIndex].convertRealFactor;\n                        break;\n                    case panningIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex]!.pan - Config.modulators[panningIndex].convertRealFactor;\n                        break;\n                    case panDelayIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex]!.panDelay - Config.modulators[panDelayIndex].convertRealFactor;\n                        break;\n                    case distortionIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex]!.distortion - Config.modulators[distortionIndex].convertRealFactor;\n                        break;\n                    case detuneIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].detune;\n                        break;\n                    case vibratoDepthIndex:\n                        vol = Math.round(this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].vibratoDepth * 25 - Config.modulators[vibratoDepthIndex].convertRealFactor);\n                        break;\n                    case vibratoSpeedIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].vibratoSpeed - Config.modulators[vibratoSpeedIndex].convertRealFactor;\n                        break;\n                    case vibratoDelayIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].vibratoDelay - Config.modulators[vibratoDelayIndex].convertRealFactor;\n                        break;\n                    case arpSpeedIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].arpeggioSpeed - Config.modulators[arpSpeedIndex].convertRealFactor;\n                        break;\n                    case bitCrushIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex]!.bitcrusherQuantization - Config.modulators[bitCrushIndex].convertRealFactor;\n                        break;\n                    case freqCrushIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex]!.bitcrusherFreq - Config.modulators[freqCrushIndex].convertRealFactor;\n                        break;\n                    case echoIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex]!.echoSustain - Config.modulators[echoIndex].convertRealFactor;\n                        break;\n                    case echoDelayIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex]!.echoDelay - Config.modulators[echoDelayIndex].convertRealFactor;\n                        break;\n                    case echoPingPongIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex]!.echoPingPong - Config.modulators[echoPingPongIndex].convertRealFactor;\n                        break;\n                    case pitchShiftIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].pitchShift;\n                        break;\n                    case ringModIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex]!.ringModulation - Config.modulators[ringModIndex].convertRealFactor;\n                        break;\n                    case ringModHertzIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex]!.ringModulationHz - Config.modulators[ringModHertzIndex].convertRealFactor;\n                        break;\n                    case granularIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex]!.granular - Config.modulators[granularIndex].convertRealFactor;\n                        break;\n                    case grainAmountIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex]!.grainAmounts - Config.modulators[grainAmountIndex].convertRealFactor;\n                        break;\n                    case grainSizeIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex]!.grainSize - Config.modulators[grainSizeIndex].convertRealFactor;\n                        break;\n                    case grainRangeIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex]!.grainRange - Config.modulators[grainRangeIndex].convertRealFactor;\n                        break;\n                    case envSpeedIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].envelopeSpeed - Config.modulators[envSpeedIndex].convertRealFactor;\n                        break;\n                    case perEnvSpeedIndex:\n                        vol = Config.perEnvelopeSpeedToIndices[this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].envelopes[instrument.modEnvelopeNumbers[modCount]].perEnvelopeSpeed] - Config.modulators[perEnvSpeedIndex].convertRealFactor;\n                        break;\n                    case perEnvLowerIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].envelopes[instrument.modEnvelopeNumbers[modCount]].perEnvelopeLowerBound - Config.modulators[perEnvLowerIndex].convertRealFactor;\n                        break;\n                    case perEnvUpperIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].envelopes[instrument.modEnvelopeNumbers[modCount]].perEnvelopeUpperBound - Config.modulators[perEnvUpperIndex].convertRealFactor;\n                        break;\n                }\n            }\n\n            if (vol != undefined)\n                return vol;\n            else\n                return Config.noteSizeMax;\n        }\n    }\n\n\n    getVolumeCap = (isMod: boolean, modChannel?: number, modInstrument?: number, modCount?: number): number => {\n        if (!isMod || modChannel == undefined || modInstrument == undefined || modCount == undefined)\n            return Config.noteSizeMax;\n        else {\n            // Sigh, the way pitches count up and the visual ordering in the UI are flipped.\n            modCount = Config.modCount - modCount - 1;\n\n            let instrument: Instrument = this.channels[modChannel].instruments[modInstrument];\n            let modulator = Config.modulators[instrument.modulators[modCount]];\n            let cap: number | undefined = modulator.maxRawVol;\n\n            if (cap != undefined) {\n                // For filters, cap is dependent on which filter setting is targeted\n                if (modulator.name == \"post eq\" || modulator.name == \"pre eq\" || modulator.name == \"song eq\") {\n                    // type 0: number of filter morphs\n                    // type 1/odd: number of filter x positions\n                    // type 2/even: number of filter y positions\n                    cap = Config.filterMorphCount - 1;\n                    if (instrument.modFilterTypes[modCount] > 0 && instrument.modFilterTypes[modCount] % 2) {\n                        cap = Config.filterFreqRange;\n                    } else if (instrument.modFilterTypes[modCount] > 0) {\n                        cap = Config.filterGainRange;\n                    }\n                }\n                return cap;\n            }\n            else\n                return Config.noteSizeMax;\n        }\n    }\n\n    getVolumeCapForSetting = (isMod: boolean, modSetting: number, filterType?: number): number => {\n        if (!isMod)\n            return Config.noteSizeMax;\n        else {\n            let cap: number | undefined = Config.modulators[modSetting].maxRawVol;\n            if (cap != undefined) {\n\n                // For filters, cap is dependent on which filter setting is targeted\n                if (filterType != undefined && (Config.modulators[modSetting].name == \"post eq\" || Config.modulators[modSetting].name == \"pre eq\" || Config.modulators[modSetting].name == \"song eq\")) {\n                    // type 0: number of filter morphs\n                    // type 1/odd: number of filter x positions\n                    // type 2/even: number of filter y positions\n                    cap = Config.filterMorphCount - 1;\n                    if (filterType > 0 && filterType % 2) {\n                        cap = Config.filterFreqRange;\n                    } else if (filterType > 0) {\n                        cap = Config.filterGainRange;\n                    }\n                }\n\n                return cap;\n            } else\n                return Config.noteSizeMax;\n        }\n    }\n\n    getChannelCount(): number {\n        return this.pitchChannelCount + this.noiseChannelCount + this.modChannelCount;\n    }\n\n    getMaxInstrumentsPerChannel(): number {\n        return Math.max(\n            this.layeredInstruments ? Config.layeredInstrumentCountMax : Config.instrumentCountMin,\n            this.patternInstruments ? Config.patternInstrumentCountMax : Config.instrumentCountMin);\n    }\n\n    getMaxInstrumentsPerPattern(channelIndex: number): number {\n        return this.getMaxInstrumentsPerPatternForChannel(this.channels[channelIndex]);\n    }\n\n    getMaxInstrumentsPerPatternForChannel(channel: Channel): number {\n        return this.layeredInstruments\n            ? Math.min(Config.layeredInstrumentCountMax, channel.instruments.length)\n            : 1;\n    }\n\n    getChannelIsNoise(channelIndex: number): boolean {\n        return (channelIndex >= this.pitchChannelCount && channelIndex < this.pitchChannelCount + this.noiseChannelCount);\n    }\n\n    getChannelIsMod(channelIndex: number): boolean {\n        return (channelIndex >= this.pitchChannelCount + this.noiseChannelCount);\n    }\n\n    static secondsToFadeInSetting(seconds: number): number {\n        return clamp(0, Config.fadeInRange, Math.round((-0.95 + Math.sqrt(0.9025 + 0.2 * seconds / 0.0125)) / 0.1));\n    }\n\n    static ticksToFadeOutSetting(ticks: number): number {\n        let lower: number = Config.fadeOutTicks[0];\n        if (ticks <= lower) return 0;\n        for (let i: number = 1; i < Config.fadeOutTicks.length; i++) {\n            let upper: number = Config.fadeOutTicks[i];\n            if (ticks <= upper) return (ticks < (lower + upper) / 2) ? i - 1 : i;\n            lower = upper;\n        }\n        return Config.fadeOutTicks.length - 1;\n    }\n\n    initToDefault(andResetChannels: boolean = true): void {\n        this.scale = 1;\n        this.scaleCustom = [true, false, true, true, false, false, false, true, true, false, true, true];\n        //this.scaleCustom = [true, false, false, false, false, false, false, false, false, false, false, false];\n        this.key = 0;\n        this.octave = 0;\n        this.loopStart = 0;\n        this.loopLength = 4;\n        this.tempo = 151;\n        this.reverb = 0;\n        this.beatsPerBar = 8;\n        this.barCount = 16;\n        this.patternsPerChannel = 8;\n        this.rhythm = 1;\n        this.layeredInstruments = false;\n        this.patternInstruments = false;\n        this.eqFilter.reset();\n        for (let i: number = 0; i < Config.filterMorphCount - 1; i++) {\n            this.eqSubFilters[i] = null;\n        }\n\n        //This is the tab's display name\n        this.title = \"Untitled\";\n        document.title = this.title + \" - \" + EditorConfig.versionDisplayName;\n\n        if (andResetChannels) {\n            this.pitchChannelCount = 4;\n            this.noiseChannelCount = 1;\n            this.modChannelCount = 0;\n            for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                const isNoiseChannel: boolean = channelIndex >= this.pitchChannelCount && channelIndex < this.pitchChannelCount + this.noiseChannelCount;\n                const isModChannel: boolean = channelIndex >= this.pitchChannelCount + this.noiseChannelCount;\n                if (this.channels.length <= channelIndex) {\n                    this.channels[channelIndex] = new Channel();\n                    this.channels[channelIndex].color = channelIndex;\n                }\n                const channel: Channel = this.channels[channelIndex];\n                channel.octave = Math.max(4 - channelIndex, 0); // [4, 3, 2, 1, 0]; Descending octaves with drums at zero in last channel.\n\n                for (let pattern: number = 0; pattern < this.patternsPerChannel; pattern++) {\n                    if (channel.patterns.length <= pattern) {\n                        channel.patterns[pattern] = new Pattern();\n                    } else {\n                        channel.patterns[pattern].reset();\n                    }\n                }\n                channel.patterns.length = this.patternsPerChannel;\n\n                for (let instrument: number = 0; instrument < Config.instrumentCountMin; instrument++) {\n                    if (channel.instruments.length <= instrument) {\n                        channel.instruments[instrument] = new Instrument(isNoiseChannel, isModChannel);\n                    }\n                    channel.instruments[instrument].setTypeAndReset(isModChannel ? InstrumentType.mod : (isNoiseChannel ? InstrumentType.noise : InstrumentType.chip), isNoiseChannel, isModChannel);\n                }\n                channel.instruments.length = Config.instrumentCountMin;\n\n                for (let bar: number = 0; bar < this.barCount; bar++) {\n                    channel.bars[bar] = bar < 16 ? 1 : 0;\n                }\n                channel.bars.length = this.barCount;\n            }\n            this.channels.length = this.getChannelCount();\n        }\n    }\n\n    //This determines the url\n    toBase64String(): string {\n        let bits: BitFieldWriter;\n        let buffer: number[] = [];\n\n        buffer.push(Song._variant);\n        buffer.push(base64IntToCharCode[Song._latestSlarmoosBoxVersion]);\n\n        // Length of the song name string\n        buffer.push(SongTagCode.songTitle);\n        var encodedSongTitle: string = encodeURIComponent(this.title);\n        buffer.push(base64IntToCharCode[encodedSongTitle.length >> 6], base64IntToCharCode[encodedSongTitle.length & 0x3f]);\n\n        // Actual encoded string follows\n        for (let i: number = 0; i < encodedSongTitle.length; i++) {\n            buffer.push(encodedSongTitle.charCodeAt(i));\n        }\n\n        buffer.push(SongTagCode.channelCount, base64IntToCharCode[this.pitchChannelCount], base64IntToCharCode[this.noiseChannelCount], base64IntToCharCode[this.modChannelCount]);\n        buffer.push(SongTagCode.scale, base64IntToCharCode[this.scale]);\n        if (this.scale == Config.scales[\"dictionary\"][\"Custom\"].index) {\n            for (var i = 1; i < Config.pitchesPerOctave; i++) {\n                buffer.push(base64IntToCharCode[this.scaleCustom[i] ? 1 : 0]) // ineffiecent? yes, all we're going to do for now? hell yes\n            }\n        }\n        buffer.push(SongTagCode.key, base64IntToCharCode[this.key], base64IntToCharCode[this.octave - Config.octaveMin]);\n        buffer.push(SongTagCode.loopStart, base64IntToCharCode[this.loopStart >> 6], base64IntToCharCode[this.loopStart & 0x3f]);\n        buffer.push(SongTagCode.loopEnd, base64IntToCharCode[(this.loopLength - 1) >> 6], base64IntToCharCode[(this.loopLength - 1) & 0x3f]);\n        buffer.push(SongTagCode.tempo, base64IntToCharCode[this.tempo >> 6], base64IntToCharCode[this.tempo & 0x3F]);\n        buffer.push(SongTagCode.beatCount, base64IntToCharCode[this.beatsPerBar - 1]);\n        buffer.push(SongTagCode.barCount, base64IntToCharCode[(this.barCount - 1) >> 6], base64IntToCharCode[(this.barCount - 1) & 0x3f]);\n        buffer.push(SongTagCode.patternCount, base64IntToCharCode[(this.patternsPerChannel - 1) >> 6], base64IntToCharCode[(this.patternsPerChannel - 1) & 0x3f]);\n        buffer.push(SongTagCode.rhythm, base64IntToCharCode[this.rhythm]);\n\n        // Push limiter settings, but only if they aren't the default!\n        buffer.push(SongTagCode.limiterSettings);\n        if (this.compressionRatio != 1.0 || this.limitRatio != 1.0 || this.limitRise != 4000.0 || this.limitDecay != 4.0 || this.limitThreshold != 1.0 || this.compressionThreshold != 1.0 || this.masterGain != 1.0) {\n            buffer.push(base64IntToCharCode[Math.round(this.compressionRatio < 1 ? this.compressionRatio * 10 : 10 + (this.compressionRatio - 1) * 60)]); // 0 ~ 1.15 uneven, mapped to 0 ~ 20\n            buffer.push(base64IntToCharCode[Math.round(this.limitRatio < 1 ? this.limitRatio * 10 : 9 + this.limitRatio)]); // 0 ~ 10 uneven, mapped to 0 ~ 20\n            buffer.push(base64IntToCharCode[this.limitDecay]); // directly 1 ~ 30\n            buffer.push(base64IntToCharCode[Math.round((this.limitRise - 2000.0) / 250.0)]); // 2000 ~ 10000 by 250, mapped to 0 ~ 32\n            buffer.push(base64IntToCharCode[Math.round(this.compressionThreshold * 20)]); // 0 ~ 1.1 by 0.05, mapped to 0 ~ 22\n            buffer.push(base64IntToCharCode[Math.round(this.limitThreshold * 20)]); // 0 ~ 2 by 0.05, mapped to 0 ~ 40\n            buffer.push(base64IntToCharCode[Math.round(this.masterGain * 50) >> 6], base64IntToCharCode[Math.round(this.masterGain * 50) & 0x3f]); // 0 ~ 5 by 0.02, mapped to 0 ~ 250\n        }\n        else {\n            buffer.push(base64IntToCharCode[0x3f]); // Not using limiter\n        }\n\n        //songeq\n        buffer.push(SongTagCode.songEq);\n        if (this.eqFilter == null) {\n            // Push null filter settings\n            buffer.push(base64IntToCharCode[0]);\n            console.log(\"Null post eq settings detected in toBase64String for song\");\n        } else {\n            buffer.push(base64IntToCharCode[this.eqFilter.controlPointCount]);\n            for (let j: number = 0; j < this.eqFilter.controlPointCount; j++) {\n                const point: FilterControlPoint = this.eqFilter.controlPoints[j];\n                buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\n            }\n        }\n\n        // Push subfilters as well. Skip Index 0, is a copy of the base filter.\n        let usingSubFilterBitfield: number = 0;\n        for (let j: number = 0; j < Config.filterMorphCount - 1; j++) {\n            usingSubFilterBitfield |= (+(this.eqSubFilters[j + 1] != null) << j);\n        }\n        // Put subfilter usage into 2 chars (12 bits)\n        buffer.push(base64IntToCharCode[usingSubFilterBitfield >> 6], base64IntToCharCode[usingSubFilterBitfield & 63]);\n        // Put subfilter info in for all used subfilters\n        for (let j: number = 0; j < Config.filterMorphCount - 1; j++) {\n            if (usingSubFilterBitfield & (1 << j)) {\n                buffer.push(base64IntToCharCode[this.eqSubFilters[j + 1]!.controlPointCount]);\n                for (let k: number = 0; k < this.eqSubFilters[j + 1]!.controlPointCount; k++) {\n                    const point: FilterControlPoint = this.eqSubFilters[j + 1]!.controlPoints[k];\n                    buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\n                }\n            }\n        }\n\n        buffer.push(SongTagCode.channelNames);\n        for (let channel: number = 0; channel < this.getChannelCount(); channel++) {\n            // Length of the channel name string\n            var encodedChannelName: string = encodeURIComponent(this.channels[channel].name);\n            buffer.push(base64IntToCharCode[encodedChannelName.length >> 6], base64IntToCharCode[encodedChannelName.length & 0x3f]);\n\n            // Actual encoded string follows\n            for (let i: number = 0; i < encodedChannelName.length; i++) {\n                buffer.push(encodedChannelName.charCodeAt(i));\n            }\n            buffer.push(base64IntToCharCode[this.channels[channel].color % 60]);\n        }\n\n        buffer.push(SongTagCode.instrumentCount, base64IntToCharCode[(<any>this.layeredInstruments << 1) | <any>this.patternInstruments]);\n        if (this.layeredInstruments || this.patternInstruments) {\n            for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                buffer.push(base64IntToCharCode[this.channels[channelIndex].instruments.length - Config.instrumentCountMin]);\n            }\n        }\n\n        buffer.push(SongTagCode.channelOctave);\n        for (let channelIndex: number = 0; channelIndex < this.pitchChannelCount; channelIndex++) {\n            buffer.push(base64IntToCharCode[this.channels[channelIndex].octave]);\n        }\n\n        //This is for specific instrument stuff to url\n        for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n            for (let i: number = 0; i < this.channels[channelIndex].instruments.length; i++) {\n                const instrument: Instrument = this.channels[channelIndex].instruments[i];\n                buffer.push(SongTagCode.startInstrument, base64IntToCharCode[instrument.type]);\n                buffer.push(SongTagCode.volume, base64IntToCharCode[(instrument.volume + Config.volumeRange / 2) >> 6], base64IntToCharCode[(instrument.volume + Config.volumeRange / 2) & 0x3f]);\n                buffer.push(SongTagCode.preset, base64IntToCharCode[instrument.preset >> 6], base64IntToCharCode[instrument.preset & 63]);\n\n                buffer.push(SongTagCode.noteFilter);\n                buffer.push(base64IntToCharCode[+instrument.noteFilterType]);\n                if (instrument.noteFilterType) {\n                    buffer.push(base64IntToCharCode[instrument.noteFilterSimpleCut]);\n                    buffer.push(base64IntToCharCode[instrument.noteFilterSimplePeak]);\n                }\n                else {\n                    if (instrument.noteFilter == null) {\n                        // Push null filter settings\n                        buffer.push(base64IntToCharCode[0]);\n                        console.log(\"Null pre eq settings detected in toBase64String for channelIndex \" + channelIndex + \", instrumentIndex \" + i);\n                    } else {\n                        buffer.push(base64IntToCharCode[instrument.noteFilter.controlPointCount]);\n                        for (let j: number = 0; j < instrument.noteFilter.controlPointCount; j++) {\n                            const point: FilterControlPoint = instrument.noteFilter.controlPoints[j];\n                            buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\n                        }\n                    }\n\n                    // Push subfilters as well. Skip Index 0, is a copy of the base filter.\n                    let usingSubFilterBitfield: number = 0;\n                    for (let j: number = 0; j < Config.filterMorphCount - 1; j++) {\n                        usingSubFilterBitfield |= (+(instrument.noteSubFilters[j + 1] != null) << j);\n                    }\n                    // Put subfilter usage into 2 chars (12 bits)\n                    buffer.push(base64IntToCharCode[usingSubFilterBitfield >> 6], base64IntToCharCode[usingSubFilterBitfield & 63]);\n                    // Put subfilter info in for all used subfilters\n                    for (let j: number = 0; j < Config.filterMorphCount - 1; j++) {\n                        if (usingSubFilterBitfield & (1 << j)) {\n                            buffer.push(base64IntToCharCode[instrument.noteSubFilters[j + 1]!.controlPointCount]);\n                            for (let k: number = 0; k < instrument.noteSubFilters[j + 1]!.controlPointCount; k++) {\n                                const point: FilterControlPoint = instrument.noteSubFilters[j + 1]!.controlPoints[k];\n                                buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\n                            }\n                        }\n                    }\n                }\n\n                //in Theepbox, effects are stored in arbitary order. this allows it to have multiple of the same effect!\n\n                buffer.push(SongTagCode.effects, base64IntToCharCode[instrument.effectCount]);\n                for (let effectIndex = 0; effectIndex < instrument.effectCount; effectIndex++) {\n                    if (instrument.effects[effectIndex] != null) buffer.push(base64IntToCharCode[instrument.effects[effectIndex]!.type & 63]);\n                    else {\n                        buffer.push(base64IntToCharCode[0]);\n                        continue;\n                    }\n\n                    let effect: Effect = instrument.effects[effectIndex] as Effect;\n\n                    if (effect.type == EffectType.eqFilter) {\n                        buffer.push(base64IntToCharCode[+effect.eqFilterType]);\n                        if (effect.eqFilterType) {\n                            buffer.push(base64IntToCharCode[effect.eqFilterSimpleCut]);\n                            buffer.push(base64IntToCharCode[effect.eqFilterSimplePeak]);\n                        }\n                        else {\n                            if (effect.eqFilter == null) {\n                                // Push null filter settings\n                                buffer.push(base64IntToCharCode[0]);\n                                console.log(\"Null post eq settings detected in toBase64String for channelIndex \" + channelIndex + \", instrumentIndex \" + i);\n                            }\n                            else {\n                                buffer.push(base64IntToCharCode[effect.eqFilter.controlPointCount]);\n                                for (let j: number = 0; j < effect.eqFilter.controlPointCount; j++) {\n                                    const point: FilterControlPoint = effect.eqFilter.controlPoints[j];\n                                    buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\n                                }\n                            }\n\n                            // Push subfilters as well. Skip Index 0, is a copy of the base filter.\n                            let usingSubFilterBitfield: number = 0;\n                            for (let j: number = 0; j < Config.filterMorphCount - 1; j++) {\n                                usingSubFilterBitfield |= (+(effect.eqSubFilters[j + 1] != null) << j);\n                            }\n                            // Put subfilter usage into 2 chars (12 bits)\n                            buffer.push(base64IntToCharCode[usingSubFilterBitfield >> 6], base64IntToCharCode[usingSubFilterBitfield & 63]);\n                            // Put subfilter info in for all used subfilters\n                            for (let j: number = 0; j < Config.filterMorphCount - 1; j++) {\n                                if (usingSubFilterBitfield & (1 << j)) {\n                                    buffer.push(base64IntToCharCode[effect.eqSubFilters[j + 1]!.controlPointCount]);\n                                    for (let k: number = 0; k < effect.eqSubFilters[j + 1]!.controlPointCount; k++) {\n                                        const point: FilterControlPoint = effect.eqSubFilters[j + 1]!.controlPoints[k];\n                                        buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    else if (effect.type == EffectType.distortion) {\n                        buffer.push(base64IntToCharCode[effect.distortion]);\n                        // Aliasing is tied into distortion for now\n                        buffer.push(base64IntToCharCode[+instrument.aliases]);\n                    }\n                    else if (effect.type == EffectType.bitcrusher) {\n                        buffer.push(base64IntToCharCode[effect.bitcrusherFreq], base64IntToCharCode[effect.bitcrusherQuantization]);\n                    }\n                    else if (effect.type == EffectType.gain) {\n                        buffer.push(base64IntToCharCode[effect.gain >> 6], base64IntToCharCode[effect.gain & 0x3f]);\n                    }\n                    else if (effect.type == EffectType.panning) {\n                        buffer.push(base64IntToCharCode[effect.pan >> 6], base64IntToCharCode[effect.pan & 0x3f]);\n                        buffer.push(base64IntToCharCode[effect.panDelay]);\n                        buffer.push(base64IntToCharCode[effect.panMode]);\n                    }\n                    else if (effect.type == EffectType.flanger) {\n                        buffer.push(base64IntToCharCode[effect.flanger]);\n                        buffer.push(base64IntToCharCode[effect.flangerSpeed]);\n                        buffer.push(base64IntToCharCode[effect.flangerDepth]);\n                        buffer.push(base64IntToCharCode[effect.flangerFeedback]);\n                    }\n                    else if (effect.type == EffectType.chorus) {\n                        buffer.push(base64IntToCharCode[effect.chorus]);\n                    }\n                    else if (effect.type == EffectType.echo) { // echo ping pong probably didnt need to have such a massive range. oh well!\n                        buffer.push(base64IntToCharCode[effect.echoSustain], base64IntToCharCode[effect.echoDelay], base64IntToCharCode[effect.echoPingPong >> 6], base64IntToCharCode[effect.echoPingPong & 0x3f]);\n                    }\n                    else if (effect.type == EffectType.reverb) {\n                        buffer.push(base64IntToCharCode[effect.reverb]);\n                    }\n                    else if (effect.type == EffectType.granular) {\n                        buffer.push(base64IntToCharCode[effect.granular]);\n                        buffer.push(base64IntToCharCode[effect.grainSize]);\n                        buffer.push(base64IntToCharCode[effect.grainAmounts]);\n                        buffer.push(base64IntToCharCode[effect.grainRange]);\n                    }\n                    else if (effect.type == EffectType.ringModulation) {\n                        buffer.push(base64IntToCharCode[effect.ringModulation]);\n                        buffer.push(base64IntToCharCode[effect.ringModulationHz]);\n                        buffer.push(base64IntToCharCode[effect.ringModWaveformIndex]);\n                        buffer.push(base64IntToCharCode[effect.ringModPulseWidth]);\n                        buffer.push(base64IntToCharCode[(effect.ringModHzOffset - Config.rmHzOffsetMin) >> 6], base64IntToCharCode[(effect.ringModHzOffset - Config.rmHzOffsetMin) & 0x3F]);\n                    }\n                }\n                // this is a six bit bitfield\n                buffer.push(base64IntToCharCode[instrument.mdeffects & 63]);\n                if (effectsIncludeTransition(instrument.mdeffects)) {\n                    buffer.push(base64IntToCharCode[instrument.transition]);\n                }\n                if (effectsIncludeChord(instrument.mdeffects)) {\n                    buffer.push(base64IntToCharCode[instrument.chord]);\n                    // Custom arpeggio speed... only if the instrument arpeggiates.\n                    if (instrument.chord == Config.chords.dictionary[\"arpeggio\"].index) {\n                        buffer.push(base64IntToCharCode[instrument.arpeggioSpeed]);\n                        buffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\n                    }\n                    if (instrument.chord == Config.chords.dictionary[\"monophonic\"].index) {\n                        buffer.push(base64IntToCharCode[instrument.monoChordTone]); //which note is selected\n                    }\n                }\n                if (effectsIncludePitchShift(instrument.mdeffects)) {\n                    buffer.push(base64IntToCharCode[instrument.pitchShift]);\n                }\n                if (effectsIncludeDetune(instrument.mdeffects)) {\n                    buffer.push(base64IntToCharCode[(instrument.detune - Config.detuneMin) >> 6], base64IntToCharCode[(instrument.detune - Config.detuneMin) & 0x3F]);\n                }\n                if (effectsIncludeVibrato(instrument.mdeffects)) {\n                    buffer.push(base64IntToCharCode[instrument.vibrato]);\n                    // Custom vibrato settings\n                    if (instrument.vibrato == Config.vibratos.length) {\n                        buffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\n                        buffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\n                        buffer.push(base64IntToCharCode[Math.round(instrument.vibratoDelay)]);\n                        buffer.push(base64IntToCharCode[instrument.vibratoType]);\n                    }\n                }\n                // if (effectsIncludeNoteRange(instrument.effects)) {\n                //     buffer.push(base64IntToCharCode[instrument.noteRange]);\n                // }\n\n                if (instrument.type != InstrumentType.drumset) {\n                    buffer.push(SongTagCode.fadeInOut, base64IntToCharCode[instrument.fadeIn], base64IntToCharCode[instrument.fadeOut]);\n                    // Transition info follows transition song tag\n                    buffer.push(base64IntToCharCode[+instrument.clicklessTransition]);\n                }\n\n                if (instrument.type == InstrumentType.harmonics || instrument.type == InstrumentType.pickedString) {\n                    buffer.push(SongTagCode.harmonics);\n                    const harmonicsBits: BitFieldWriter = new BitFieldWriter();\n                    for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\n                        harmonicsBits.write(Config.harmonicsControlPointBits, instrument.harmonicsWave.harmonics[i]);\n                    }\n                    harmonicsBits.encodeBase64(buffer);\n                }\n\n                if (instrument.type == InstrumentType.chip) {\n                    if (instrument.chipWave > 186) {\n                        buffer.push(119, base64IntToCharCode[instrument.chipWave - 186]);\n                        buffer.push(base64IntToCharCode[3]);\n                    }\n                    else if (instrument.chipWave > 124) {\n                        buffer.push(119, base64IntToCharCode[instrument.chipWave - 124]);\n                        buffer.push(base64IntToCharCode[2]);\n                    }\n                    else if (instrument.chipWave > 62) {\n                        buffer.push(119, base64IntToCharCode[instrument.chipWave - 62]);\n                        buffer.push(base64IntToCharCode[1]);\n                    }\n                    else {\n                        buffer.push(119, base64IntToCharCode[instrument.chipWave]);\n                        buffer.push(base64IntToCharCode[0]);\n                    }\n                    buffer.push(104, base64IntToCharCode[instrument.unison]);\n                    if (instrument.unison == Config.unisons.length) encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\n\n                    // Repurposed for chip wave loop controls.\n                    buffer.push(SongTagCode.loopControls);\n                    // The encoding here is as follows:\n                    // 0b11111_1\n                    //         ^-- isUsingAdvancedLoopControls\n                    //   ^^^^^---- chipWaveLoopMode\n                    // This essentially allocates 32 different loop modes,\n                    // which should be plenty.\n                    const encodedLoopMode: number = (\n                        (clamp(0, 31 + 1, instrument.chipWaveLoopMode) << 1)\n                        | (instrument.isUsingAdvancedLoopControls ? 1 : 0)\n                    );\n                    buffer.push(base64IntToCharCode[encodedLoopMode]);\n                    // The same encoding above is used here, but with the release mode\n                    // (which isn't implemented currently), and the backwards toggle.\n                    // changed in Theepbox! now i added stereo toggle :3\n                    const encodedReleaseMode: number = (\n                        (clamp(0, 31 + 1, 0) << 2)\n                        | ((instrument.chipWaveInStereo ? 1 : 0) << 1)\n                        | (instrument.chipWavePlayBackwards ? 1 : 0)\n                    );\n                    buffer.push(base64IntToCharCode[encodedReleaseMode]);\n                    encode32BitNumber(buffer, instrument.chipWaveLoopStart);\n                    encode32BitNumber(buffer, instrument.chipWaveLoopEnd);\n                    encode32BitNumber(buffer, instrument.chipWaveStartOffset);\n\n                } else if (instrument.type == InstrumentType.fm || instrument.type == InstrumentType.fm6op) {\n                    if (instrument.type == InstrumentType.fm) {\n                        buffer.push(SongTagCode.algorithm, base64IntToCharCode[instrument.algorithm]);\n                        buffer.push(SongTagCode.feedbackType, base64IntToCharCode[instrument.feedbackType]);\n                    } else {\n                        buffer.push(SongTagCode.algorithm, base64IntToCharCode[instrument.algorithm6Op]);\n                        if (instrument.algorithm6Op == 0) {\n                            buffer.push(SongTagCode.chord, base64IntToCharCode[instrument.customAlgorithm.carrierCount]);\n                            buffer.push(SongTagCode.effects);\n                            for (let o: number = 0; o < instrument.customAlgorithm.modulatedBy.length; o++) {\n                                for (let j: number = 0; j < instrument.customAlgorithm.modulatedBy[o].length; j++) {\n                                    buffer.push(base64IntToCharCode[instrument.customAlgorithm.modulatedBy[o][j]]);\n                                }\n                                buffer.push(SongTagCode.operatorWaves);\n                            }\n                            buffer.push(SongTagCode.effects);\n                        }\n                        buffer.push(SongTagCode.feedbackType, base64IntToCharCode[instrument.feedbackType6Op]);\n                        if (instrument.feedbackType6Op == 0) {\n                            buffer.push(SongTagCode.effects);\n                            for (let o: number = 0; o < instrument.customFeedbackType.indices.length; o++) {\n                                for (let j: number = 0; j < instrument.customFeedbackType.indices[o].length; j++) {\n                                    buffer.push(base64IntToCharCode[instrument.customFeedbackType.indices[o][j]]);\n                                }\n                                buffer.push(SongTagCode.operatorWaves);\n                            }\n                            buffer.push(SongTagCode.effects);\n                        }\n                    }\n                    buffer.push(SongTagCode.feedbackAmplitude, base64IntToCharCode[instrument.feedbackAmplitude]);\n\n                    buffer.push(SongTagCode.operatorFrequencies);\n                    for (let o: number = 0; o < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); o++) {\n                        buffer.push(base64IntToCharCode[instrument.operators[o].frequency]);\n                    }\n                    buffer.push(SongTagCode.operatorAmplitudes);\n                    for (let o: number = 0; o < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); o++) {\n                        buffer.push(base64IntToCharCode[instrument.operators[o].amplitude]);\n                    }\n                    buffer.push(SongTagCode.operatorWaves);\n                    for (let o: number = 0; o < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); o++) {\n                        buffer.push(base64IntToCharCode[instrument.operators[o].waveform]);\n                        // Push pulse width if that type is used\n                        if (instrument.operators[o].waveform == 2) {\n                            buffer.push(base64IntToCharCode[instrument.operators[o].pulseWidth]);\n                        }\n                    }\n                } else if (instrument.type == InstrumentType.customChipWave) {\n                    if (instrument.chipWave > 186) {\n                        buffer.push(119, base64IntToCharCode[instrument.chipWave - 186]);\n                        buffer.push(base64IntToCharCode[3]);\n                    }\n                    else if (instrument.chipWave > 124) {\n                        buffer.push(119, base64IntToCharCode[instrument.chipWave - 124]);\n                        buffer.push(base64IntToCharCode[2]);\n                    }\n                    else if (instrument.chipWave > 62) {\n                        buffer.push(119, base64IntToCharCode[instrument.chipWave - 62]);\n                        buffer.push(base64IntToCharCode[1]);\n                    }\n                    else {\n                        buffer.push(119, base64IntToCharCode[instrument.chipWave]);\n                        buffer.push(base64IntToCharCode[0]);\n                    }\n                    buffer.push(104, base64IntToCharCode[instrument.unison]);\n                    if (instrument.unison == Config.unisons.length) encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\n                    buffer.push(SongTagCode.customChipWave);\n                    // Push custom wave values\n                    for (let j: number = 0; j < 64; j++) {\n                        buffer.push(base64IntToCharCode[(instrument.customChipWave[j] + 24) as number]);\n                    }\n                } else if (instrument.type == InstrumentType.noise) {\n                    buffer.push(SongTagCode.wave, base64IntToCharCode[instrument.chipNoise]);\n                    buffer.push(SongTagCode.unison, base64IntToCharCode[instrument.unison]);\n                    if (instrument.unison == Config.unisons.length) encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\n                } else if (instrument.type == InstrumentType.spectrum) {\n                    buffer.push(SongTagCode.spectrum);\n                    const spectrumBits: BitFieldWriter = new BitFieldWriter();\n                    for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n                        spectrumBits.write(Config.spectrumControlPointBits, instrument.spectrumWave.spectrum[i]);\n                    }\n                    spectrumBits.encodeBase64(buffer);\n                    buffer.push(SongTagCode.unison, base64IntToCharCode[instrument.unison]);\n                    if (instrument.unison == Config.unisons.length) encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\n                } else if (instrument.type == InstrumentType.drumset) {\n                    buffer.push(SongTagCode.drumsetEnvelopes);\n                    for (let j: number = 0; j < Config.drumCount; j++) {\n                        buffer.push(base64IntToCharCode[instrument.drumsetEnvelopes[j]]);\n                    }\n\n                    buffer.push(SongTagCode.spectrum);\n                    const spectrumBits: BitFieldWriter = new BitFieldWriter();\n                    for (let j: number = 0; j < Config.drumCount; j++) {\n                        for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n                            spectrumBits.write(Config.spectrumControlPointBits, instrument.drumsetSpectrumWaves[j].spectrum[i]);\n                        }\n                    }\n                    spectrumBits.encodeBase64(buffer);\n                    buffer.push(SongTagCode.unison, base64IntToCharCode[instrument.unison]);\n                    if (instrument.unison == Config.unisons.length) encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\n                } else if (instrument.type == InstrumentType.harmonics) {\n                    buffer.push(SongTagCode.unison, base64IntToCharCode[instrument.unison]);\n                    if (instrument.unison == Config.unisons.length) encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\n                } else if (instrument.type == InstrumentType.pwm) {\n                    buffer.push(SongTagCode.pulseWidth, base64IntToCharCode[instrument.pulseWidth]);\n                    buffer.push(base64IntToCharCode[instrument.decimalOffset >> 6], base64IntToCharCode[instrument.decimalOffset & 0x3f]);\n                    buffer.push(SongTagCode.unison, base64IntToCharCode[instrument.unison]);\n                    if (instrument.unison == Config.unisons.length) encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\n                } else if (instrument.type == InstrumentType.supersaw) {\n                    buffer.push(SongTagCode.supersaw, base64IntToCharCode[instrument.supersawDynamism], base64IntToCharCode[instrument.supersawSpread], base64IntToCharCode[instrument.supersawShape]);\n                    buffer.push(SongTagCode.pulseWidth, base64IntToCharCode[instrument.pulseWidth]);\n                    buffer.push(base64IntToCharCode[instrument.decimalOffset >> 6], base64IntToCharCode[instrument.decimalOffset & 0x3f]);\n                } else if (instrument.type == InstrumentType.pickedString) {\n                    if (Config.stringSustainRange > 0x20 || SustainType.length > 2) {\n                        throw new Error(\"Not enough bits to represent sustain value and type in same base64 character.\");\n                    }\n                    buffer.push(SongTagCode.unison, base64IntToCharCode[instrument.unison]);\n                    if (instrument.unison == Config.unisons.length) encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\n                    buffer.push(SongTagCode.stringSustain, base64IntToCharCode[instrument.stringSustain | (instrument.stringSustainType << 5)]);\n                } else if (instrument.type == InstrumentType.mod) {\n                    // Handled down below. Could be moved, but meh.\n                } else {\n                    throw new Error(\"Unknown instrument type.\");\n                }\n\n                buffer.push(SongTagCode.envelopes, base64IntToCharCode[instrument.envelopeCount]);\n                // Added in JB v6: Options for envelopes come next.\n                buffer.push(base64IntToCharCode[instrument.envelopeSpeed]);\n                for (let envelopeIndex: number = 0; envelopeIndex < instrument.envelopeCount; envelopeIndex++) {\n                    buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].target]);\n                    if (Config.instrumentAutomationTargets[instrument.envelopes[envelopeIndex].target].maxCount > 1) {\n                        buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].index]);\n                    }\n                    buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].envelope]);\n                    //run pitch envelope handling\n                    if (Config.newEnvelopes[instrument.envelopes[envelopeIndex].envelope].name == \"pitch\") {\n                        if (!instrument.isNoiseInstrument) {\n                            buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].pitchEnvelopeStart >> 6], base64IntToCharCode[instrument.envelopes[envelopeIndex].pitchEnvelopeStart & 0x3f]);\n                            buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].pitchEnvelopeEnd >> 6], base64IntToCharCode[instrument.envelopes[envelopeIndex].pitchEnvelopeEnd & 0x3f]);\n                        } else {\n                            buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].pitchEnvelopeStart]);\n                            buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].pitchEnvelopeEnd]);\n                        }\n                    //random\n                    } else if (Config.newEnvelopes[instrument.envelopes[envelopeIndex].envelope].name == \"random\") {\n                        buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].steps]);\n                        buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].seed]);\n                        buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].waveform]);\n                    //lfo\n                    } else if (Config.newEnvelopes[instrument.envelopes[envelopeIndex].envelope].name == \"lfo\") {\n                        buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].waveform]);\n                        if (instrument.envelopes[envelopeIndex].waveform == LFOEnvelopeTypes.steppedSaw || instrument.envelopes[envelopeIndex].waveform == LFOEnvelopeTypes.steppedTri) {\n                            buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].steps]);\n                        }\n                    }\n                    //inverse\n                    let checkboxValues: number = +instrument.envelopes[envelopeIndex].discrete;\n                    checkboxValues = checkboxValues << 1;\n                    checkboxValues += +instrument.envelopes[envelopeIndex].inverse;\n                    buffer.push(base64IntToCharCode[checkboxValues] ? base64IntToCharCode[checkboxValues] : base64IntToCharCode[0]);\n                    //midbox envelope port\n                    if (Config.newEnvelopes[instrument.envelopes[envelopeIndex].envelope].name != \"pitch\" && Config.newEnvelopes[instrument.envelopes[envelopeIndex].envelope].name != \"note size\" && Config.newEnvelopes[instrument.envelopes[envelopeIndex].envelope].name != \"punch\" && Config.newEnvelopes[instrument.envelopes[envelopeIndex].envelope].name != \"none\") {\n                        buffer.push(base64IntToCharCode[Config.perEnvelopeSpeedToIndices[instrument.envelopes[envelopeIndex].perEnvelopeSpeed]]);\n                    }\n                    buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].perEnvelopeLowerBound * 10]);\n                    buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].perEnvelopeUpperBound * 10]);\n                }\n            }\n        }\n\n        buffer.push(SongTagCode.bars);\n        bits = new BitFieldWriter();\n        let neededBits: number = 0;\n        while ((1 << neededBits) < this.patternsPerChannel + 1) neededBits++;\n        for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) for (let i: number = 0; i < this.barCount; i++) {\n            bits.write(neededBits, this.channels[channelIndex].bars[i]);\n        }\n        bits.encodeBase64(buffer);\n\n        buffer.push(SongTagCode.patterns);\n        bits = new BitFieldWriter();\n        const shapeBits: BitFieldWriter = new BitFieldWriter();\n        const bitsPerNoteSize: number = Song.getNeededBits(Config.noteSizeMax);\n        for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n            const channel: Channel = this.channels[channelIndex];\n            const maxInstrumentsPerPattern: number = this.getMaxInstrumentsPerPattern(channelIndex);\n            const isNoiseChannel: boolean = this.getChannelIsNoise(channelIndex);\n            const isModChannel: boolean = this.getChannelIsMod(channelIndex);\n            const neededInstrumentCountBits: number = Song.getNeededBits(maxInstrumentsPerPattern - Config.instrumentCountMin);\n            const neededInstrumentIndexBits: number = Song.getNeededBits(channel.instruments.length - 1);\n\n            // Some info about modulator settings immediately follows in mod channels.\n            if (isModChannel) {\n                const neededModInstrumentIndexBits: number = Song.getNeededBits(this.getMaxInstrumentsPerChannel() + 2);\n                for (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n\n                    let instrument: Instrument = this.channels[channelIndex].instruments[instrumentIndex];\n\n                    for (let mod: number = 0; mod < Config.modCount; mod++) {\n                        const modChannels: number[] = instrument.modChannels[mod];\n                        const modInstruments: number[] = instrument.modInstruments[mod];\n                        const modSetting: number = instrument.modulators[mod];\n                        const modFilter: number = instrument.modFilterTypes[mod];\n                        const modEnvelope: number = instrument.modEnvelopeNumbers[mod];\n\n                        // Still using legacy \"mod status\" format, but doing it manually as it's only used in the URL now.\n                        // 0 - For pitch/noise\n                        // 1 - (used to be For noise, not needed)\n                        // 2 - For song\n                        // 3 - None\n\n                        let status: number = Config.modulators[modSetting].forSong ? 2 : 0;\n                        if (modSetting == Config.modulators.dictionary[\"none\"].index)\n                            status = 3;\n\n                        bits.write(2, status);\n\n                        // Channel/Instrument is only used if the status isn't \"song\" or \"none\".\n                        if (status == 0 || status == 1) {\n                            bits.write(8, modChannels.length);\n                            for (let i: number = 0; i < modChannels.length; i++) bits.write(8, modChannels[i]);\n                            bits.write(8, modInstruments.length);\n                            for (let i: number = 0; i < modInstruments.length; i++) bits.write(neededModInstrumentIndexBits, modInstruments[i]);\n                        }\n\n                        // Only used if setting isn't \"none\".\n                        if (status != 3) {\n                            bits.write(6, modSetting);\n                        }\n\n                        // Write mod filter info, only if this is a filter mod\n                        if (Config.modulators[instrument.modulators[mod]].name == \"post eq\" || Config.modulators[instrument.modulators[mod]].name == \"pre eq\" || Config.modulators[instrument.modulators[mod]].name == \"song eq\") {\n                            bits.write(6, modFilter);\n                        }\n\n                        //write envelope info only if needed\n                        if (Config.modulators[instrument.modulators[mod]].name == \"individual envelope speed\" ||\n                            Config.modulators[instrument.modulators[mod]].name == \"reset envelope\" ||\n                            Config.modulators[instrument.modulators[mod]].name == \"individual envelope lower bound\" ||\n                            Config.modulators[instrument.modulators[mod]].name == \"individual envelope upper bound\"\n                        ) {\n                            bits.write(6, modEnvelope);\n                        }\n                    }\n                }\n            }\n            const octaveOffset: number = (isNoiseChannel || isModChannel) ? 0 : channel.octave * Config.pitchesPerOctave;\n            let lastPitch: number = (isNoiseChannel ? 4 : octaveOffset);\n            const recentPitches: number[] = isModChannel ? [0, 1, 2, 3, 4, 5] : (isNoiseChannel ? [4, 6, 7, 2, 3, 8, 0, 10] : [0, 7, 12, 19, 24, -5, -12]);\n            const recentShapes: string[] = [];\n            for (let i: number = 0; i < recentPitches.length; i++) {\n                recentPitches[i] += octaveOffset;\n            }\n            for (const pattern of channel.patterns) {\n                if (this.patternInstruments) {\n                    const instrumentCount: number = validateRange(Config.instrumentCountMin, maxInstrumentsPerPattern, pattern.instruments.length);\n                    bits.write(neededInstrumentCountBits, instrumentCount - Config.instrumentCountMin);\n                    for (let i: number = 0; i < instrumentCount; i++) {\n                        bits.write(neededInstrumentIndexBits, pattern.instruments[i]);\n                    }\n                }\n\n                if (pattern.notes.length > 0) {\n                    bits.write(1, 1);\n\n                    let curPart: number = 0;\n                    for (const note of pattern.notes) {\n\n                        // For mod channels, a negative offset may be necessary.\n                        if (note.start < curPart && isModChannel) {\n                            bits.write(2, 0); // rest, then...\n                            bits.write(1, 1); // negative offset\n                            bits.writePartDuration(curPart - note.start);\n                        }\n\n                        if (note.start > curPart) {\n                            bits.write(2, 0); // rest\n                            if (isModChannel) bits.write(1, 0); // positive offset, only needed for mod channels\n                            bits.writePartDuration(note.start - curPart);\n                        }\n\n                        shapeBits.clear();\n\n                        // Old format was:\n                        // 0: 1 pitch, 10: 2 pitches, 110: 3 pitches, 111: 4 pitches\n                        // New format is:\n                        //      0: 1 pitch\n                        // 1[XXX]: 3 bits of binary signifying 2+ pitches\n                        if (note.pitches.length == 1) {\n                            shapeBits.write(1, 0);\n                        } else {\n                            shapeBits.write(1, 1);\n                            shapeBits.write(3, note.pitches.length - 2);\n                        }\n\n                        // chip wave start offset is similar but with more bits: 31, to be exact. this is a lot, (and a TODO is probably to make it more efficient) but it is necessary for my purposes\n                        if (note.chipWaveStartOffset == 0) {\n                            shapeBits.write(1, 0);\n                        } else {\n                            shapeBits.write(1, 1);\n                            shapeBits.write(31, note.chipWaveStartOffset);\n                        }\n\n                        shapeBits.writePinCount(note.pins.length - 1);\n\n                        if (!isModChannel) {\n                            shapeBits.write(bitsPerNoteSize, note.pins[0].size); // volume\n                        }\n                        else {\n                            shapeBits.write(11, note.pins[0].size); // Modulator value. 11 bits for now = 2048 max mod value?\n                        }\n\n                        let shapePart: number = 0;\n                        let startPitch: number = note.pitches[0];\n                        let currentPitch: number = startPitch;\n                        const pitchBends: number[] = [];\n                        for (let i: number = 1; i < note.pins.length; i++) {\n                            const pin: NotePin = note.pins[i];\n                            const nextPitch: number = startPitch + pin.interval;\n                            if (currentPitch != nextPitch) {\n                                shapeBits.write(1, 1);\n                                pitchBends.push(nextPitch);\n                                currentPitch = nextPitch;\n                            } else {\n                                shapeBits.write(1, 0);\n                            }\n                            shapeBits.writePartDuration(pin.time - shapePart);\n                            shapePart = pin.time;\n                            if (!isModChannel) {\n                                shapeBits.write(bitsPerNoteSize, pin.size);\n                            } else {\n                                shapeBits.write(11, pin.size);\n                            }\n                        }\n\n                        const shapeString: string = String.fromCharCode.apply(null, shapeBits.encodeBase64([]));\n                        const shapeIndex: number = recentShapes.indexOf(shapeString);\n                        if (shapeIndex == -1) {\n                            bits.write(2, 1); // new shape\n                            bits.concat(shapeBits);\n                        } else {\n                            bits.write(1, 1); // old shape\n                            bits.writeLongTail(0, 0, shapeIndex);\n                            recentShapes.splice(shapeIndex, 1);\n                        }\n                        recentShapes.unshift(shapeString);\n                        if (recentShapes.length > 10) recentShapes.pop();\n\n                        const allPitches: number[] = note.pitches.concat(pitchBends);\n                        for (let i: number = 0; i < allPitches.length; i++) {\n                            const pitch: number = allPitches[i];\n                            const pitchIndex: number = recentPitches.indexOf(pitch);\n                            if (pitchIndex == -1) {\n                                let interval: number = 0;\n                                let pitchIter: number = lastPitch;\n                                if (pitchIter < pitch) {\n                                    while (pitchIter != pitch) {\n                                        pitchIter++;\n                                        if (recentPitches.indexOf(pitchIter) == -1) interval++;\n                                    }\n                                } else {\n                                    while (pitchIter != pitch) {\n                                        pitchIter--;\n                                        if (recentPitches.indexOf(pitchIter) == -1) interval--;\n                                    }\n                                }\n                                bits.write(1, 0);\n                                bits.writePitchInterval(interval);\n                            } else {\n                                bits.write(1, 1);\n                                bits.write(4, pitchIndex);\n                                recentPitches.splice(pitchIndex, 1);\n                            }\n                            recentPitches.unshift(pitch);\n                            if (recentPitches.length > 16) recentPitches.pop();\n\n                            if (i == note.pitches.length - 1) {\n                                lastPitch = note.pitches[0];\n                            } else {\n                                lastPitch = pitch;\n                            }\n                        }\n\n                        if (note.start == 0) {\n                            bits.write(1, note.continuesLastPattern ? 1 : 0);\n                        }\n\n                        curPart = note.end;\n                    }\n\n                    if (curPart < this.beatsPerBar * Config.partsPerBeat + (+isModChannel)) {\n                        bits.write(2, 0); // rest\n                        if (isModChannel) bits.write(1, 0); // positive offset\n                        bits.writePartDuration(this.beatsPerBar * Config.partsPerBeat + (+isModChannel) - curPart);\n                    }\n                } else {\n                    bits.write(1, 0);\n                }\n            }\n        }\n        let stringLength: number = bits.lengthBase64();\n        let digits: number[] = [];\n        while (stringLength > 0) {\n            digits.unshift(base64IntToCharCode[stringLength & 0x3f]);\n            stringLength = stringLength >> 6;\n        }\n        buffer.push(base64IntToCharCode[digits.length]);\n        Array.prototype.push.apply(buffer, digits); // append digits to buffer.\n        bits.encodeBase64(buffer);\n\n        const maxApplyArgs: number = 64000;\n        let customSamplesStr = \"\";\n        if (EditorConfig.customSamples != undefined && EditorConfig.customSamples.length > 0) {\n            customSamplesStr = \"|\" + EditorConfig.customSamples.join(\"|\")\n\n        }\n        //samplemark\n        if (buffer.length < maxApplyArgs) {\n            // Note: Function.apply may break for long argument lists.\n            return String.fromCharCode.apply(null, buffer) + customSamplesStr;\n            //samplemark\n        } else {\n            let result: string = \"\";\n            for (let i: number = 0; i < buffer.length; i += maxApplyArgs) {\n                result += String.fromCharCode.apply(null, buffer.slice(i, i + maxApplyArgs));\n            }\n            return result + customSamplesStr;\n            //samplemark\n        }\n    }\n\n    private static _envelopeFromLegacyIndex(legacyIndex: number): Envelope {\n        // I swapped the order of \"custom\"/\"steady\", now \"none\"/\"note size\".\n        if (legacyIndex == 0) legacyIndex = 1; else if (legacyIndex == 1) legacyIndex = 0;\n        return Config.envelopes[clamp(0, Config.envelopes.length, legacyIndex)];\n    }\n\n    fromBase64String(compressed: string, jsonFormat: string = \"auto\"): void {\n        if (compressed == null || compressed == \"\") {\n            Song._clearSamples();\n\n            this.initToDefault(true);\n            return;\n        }\n        let charIndex: number = 0;\n        // skip whitespace.\n        while (compressed.charCodeAt(charIndex) <= CharCode.SPACE) charIndex++;\n        // skip hash mark.\n        if (compressed.charCodeAt(charIndex) == CharCode.HASH) charIndex++;\n        // if it starts with curly brace, treat it as JSON.\n        if (compressed.charCodeAt(charIndex) == CharCode.LEFT_CURLY_BRACE) {\n            this.fromJsonObject(JSON.parse(charIndex == 0 ? compressed : compressed.substring(charIndex)), jsonFormat);\n            return;\n        }\n\n        const variantTest: number = compressed.charCodeAt(charIndex);\n        //I cleaned up these boolean setters with an initial value. Idk why this wasn't done earlier...\n        let fromBeepBox: boolean = false;\n        let fromJummBox: boolean = false;\n        let fromGoldBox: boolean = false;\n        let fromUltraBox: boolean = false;\n        let fromSlarmoosBox: boolean = false;\n        let fromTheepBox: boolean = false;\n        // let fromMidbox: boolean;\n        // let fromDogebox2: boolean;\n        // let fromAbyssBox: boolean;\n\n        // Detect variant here. If version doesn't match known variant, assume it is a vanilla string which does not report variant.\n        if (variantTest == 0x74){ //\"t\"\n            fromTheepBox = true\n            fromSlarmoosBox = true\n            charIndex++;\n        } else if (variantTest == 0x6A) { //\"j\"\n            fromJummBox = true;\n            charIndex++;\n        } else if (variantTest == 0x67) { //\"g\"\n            fromGoldBox = true;\n            charIndex++;\n        } else if (variantTest == 0x75) { //\"u\"\n            fromUltraBox = true;\n            charIndex++;\n        } else if (variantTest == 0x64) { //\"d\"\n            fromJummBox = true;\n            // to-do: add explicit dogebox2 support\n            //fromDogeBox2 = true;\n            charIndex++;\n        } else if (variantTest == 0x61) { //\"a\" Abyssbox does urls the same as ultrabox //not quite anymore, but oh well\n            fromUltraBox = true;\n            charIndex++;\n        } else if(variantTest == 0x73){ //\"s\"\n            fromSlarmoosBox = true\n            charIndex++;\n        } else {\n            fromBeepBox = true;\n        }\n\n        const version: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n        if (fromBeepBox && (version == -1 || version > Song._latestBeepboxVersion || version < Song._oldestBeepboxVersion)) return;\n        if (fromJummBox && (version == -1 || version > Song._latestJummBoxVersion || version < Song._oldestJummBoxVersion)) return;\n        if (fromGoldBox && (version == -1 || version > Song._latestGoldBoxVersion || version < Song._oldestGoldBoxVersion)) return;\n        if (fromUltraBox && (version == -1 || version > Song._latestUltraBoxVersion || version < Song._oldestUltraBoxVersion)) return;\n        if ((fromSlarmoosBox || fromTheepBox) && (version == -1 || version > Song._latestSlarmoosBoxVersion || version < Song._oldestSlarmoosBoxVersion)) return;\n        const beforeTwo: boolean = version < 2;\n        const beforeThree: boolean = version < 3;\n        const beforeFour: boolean = version < 4;\n        const beforeFive: boolean = version < 5;\n        const beforeSix: boolean = version < 6;\n        const beforeSeven: boolean = version < 7;\n        const beforeEight: boolean = version < 8;\n        const beforeNine: boolean = version < 9;\n        this.initToDefault((fromBeepBox && beforeNine) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)));\n        const forceSimpleFilter: boolean = (fromBeepBox && beforeNine || fromJummBox && beforeFive);\n\n        let willLoadLegacySamplesForOldSongs: boolean = false;\n\n        if (fromSlarmoosBox || fromUltraBox || fromGoldBox) {\n            compressed = compressed.replaceAll(\"%7C\", \"|\")\n            var compressed_array = compressed.split(\"|\");\n            compressed = compressed_array.shift()!;\n            if (EditorConfig.customSamples == null || EditorConfig.customSamples.join(\", \") != compressed_array.join(\", \")) {\n\n                Song._restoreChipWaveListToDefault();\n\n                let willLoadLegacySamples = false;\n                let willLoadNintariboxSamples = false;\n                let willLoadMarioPaintboxSamples = false;\n                const customSampleUrls: string[] = [];\n                const customSamplePresets: Preset[] = [];\n                sampleLoadingState.statusTable = {};\n                sampleLoadingState.urlTable = {};\n                sampleLoadingState.totalSamples = 0;\n                sampleLoadingState.samplesLoaded = 0;\n                sampleLoadEvents.dispatchEvent(new SampleLoadedEvent(\n                    sampleLoadingState.totalSamples,\n                    sampleLoadingState.samplesLoaded\n                ));\n                for (const url of compressed_array) {\n                    if (url.toLowerCase() === \"legacysamples\") {\n                        if (!willLoadLegacySamples) {\n                            willLoadLegacySamples = true;\n                            customSampleUrls.push(url);\n                            loadBuiltInSamples(0);\n                        }\n                    }\n                    else if (url.toLowerCase() === \"nintariboxsamples\") {\n                        if (!willLoadNintariboxSamples) {\n                            willLoadNintariboxSamples = true;\n                            customSampleUrls.push(url);\n                            loadBuiltInSamples(1);\n                        }\n                    }\n                    else if (url.toLowerCase() === \"mariopaintboxsamples\") {\n                        if (!willLoadMarioPaintboxSamples) {\n                            willLoadMarioPaintboxSamples = true;\n                            customSampleUrls.push(url);\n                            loadBuiltInSamples(2);\n                        }\n                    }\n\n                    else {\n                        // UB version 2 URLs and below will be using the old syntax, so we do need to parse it in that case.\n                        // UB version 3 URLs should only have the new syntax, though, unless the user has edited the URL manually.\n                        const parseOldSyntax: boolean = beforeThree;\n                        const ok: boolean = Song._parseAndConfigureCustomSample(url, customSampleUrls, customSamplePresets, sampleLoadingState, parseOldSyntax);\n                        if (!ok) {\n                            continue;\n                        }\n                    }\n                }\n                if (customSampleUrls.length > 0) {\n                    EditorConfig.customSamples = customSampleUrls;\n                }\n                if (customSamplePresets.length > 0) {\n                    const customSamplePresetsMap: DictionaryArray<Preset> = toNameMap(customSamplePresets);\n                    EditorConfig.presetCategories[EditorConfig.presetCategories.length] = {\n                        name: \"Custom Sample Presets\",\n                        presets: customSamplePresetsMap,\n                        index: EditorConfig.presetCategories.length,\n                    };\n                    // EditorConfig.presetCategories.splice(1, 0, {\n                    // name: \"Custom Sample Presets\",\n                    // presets: customSamplePresets,\n                    // index: EditorConfig.presetCategories.length,\n                    // });\n                }\n\n\n            }\n            //samplemark\n        }\n\n        if (beforeThree && fromBeepBox) {\n            // Originally, the only instrument transition was \"instant\" and the only drum wave was \"retro\".\n            for (const channel of this.channels) {\n                channel.instruments[0].transition = Config.transitions.dictionary[\"interrupt\"].index;\n                channel.instruments[0].mdeffects |= 1 << MDEffectType.transition;\n            }\n            this.channels[3].instruments[0].chipNoise = 0;\n        }\n\n        let legacySettingsCache: LegacySettings[][] | null = null;\n        if ((fromBeepBox && beforeNine) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n            // Unfortunately, old versions of BeepBox had a variety of different ways of saving\n            // filter-and-envelope-related parameters in the URL, and none of them directly\n            // correspond to the new way of saving these parameters. We can approximate the old\n            // settings by collecting all the old settings for an instrument and passing them to\n            // convertLegacySettings(), so I use this data structure to collect the settings\n            // for each instrument if necessary.\n            legacySettingsCache = [];\n            for (let i: number = legacySettingsCache.length; i < this.getChannelCount(); i++) {\n                legacySettingsCache[i] = [];\n                for (let j: number = 0; j < Config.instrumentCountMin; j++) legacySettingsCache[i][j] = {};\n            }\n        }\n\n        let legacyGlobalReverb: number = 0; // beforeNine reverb was song-global, record that reverb here and adapt it to instruments as needed.\n\n        let instrumentChannelIterator: number = 0;\n        let instrumentIndexIterator: number = -1;\n        let command: number;\n        let useSlowerArpSpeed: boolean = false;\n        let useFastTwoNoteArp: boolean = false;\n        while (charIndex < compressed.length) switch (command = compressed.charCodeAt(charIndex++)) {\n            case SongTagCode.songTitle: {\n                // Length of song name string\n                var songNameLength = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                this.title = decodeURIComponent(compressed.substring(charIndex, charIndex + songNameLength));\n                document.title = this.title + \" - \" + EditorConfig.versionDisplayName;\n\n                charIndex += songNameLength;\n            } break;\n            case SongTagCode.channelCount: {\n                this.pitchChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                this.noiseChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                if (fromBeepBox || (fromJummBox && beforeTwo)) {\n                    // No mod channel support before jummbox v2\n                    this.modChannelCount = 0;\n                } else {\n                    this.modChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                }\n                this.pitchChannelCount = validateRange(Config.pitchChannelCountMin, Config.pitchChannelCountMax, this.pitchChannelCount);\n                this.noiseChannelCount = validateRange(Config.noiseChannelCountMin, Config.noiseChannelCountMax, this.noiseChannelCount);\n                this.modChannelCount = validateRange(Config.modChannelCountMin, Config.modChannelCountMax, this.modChannelCount);\n\n                for (let channelIndex = this.channels.length; channelIndex < this.getChannelCount(); channelIndex++) {\n                    this.channels[channelIndex] = new Channel();\n                }\n                this.channels.length = this.getChannelCount();\n                if ((fromBeepBox && beforeNine) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                    for (let i: number = legacySettingsCache!.length; i < this.getChannelCount(); i++) {\n                        legacySettingsCache![i] = [];\n                        for (let j: number = 0; j < Config.instrumentCountMin; j++) legacySettingsCache![i][j] = {};\n                    }\n                }\n            } break;\n            case SongTagCode.scale: {\n                this.scale = clamp(0, Config.scales.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                // All the scales were jumbled around by Jummbox. Just convert to free.\n                if (this.scale == Config.scales[\"dictionary\"][\"Custom\"].index) {\n                    for (var i = 1; i < Config.pitchesPerOctave; i++) {\n                        this.scaleCustom[i] = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] == 1; // ineffiecent? yes, all we're going to do for now? hell yes\n                    }\n                }\n                if (fromBeepBox) this.scale = 0;\n            } break;\n            case SongTagCode.key: {\n                if (beforeSeven && fromBeepBox) {\n                    this.key = clamp(0, Config.keys.length, 11 - base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    this.octave = 0;\n                } else if (fromBeepBox || fromJummBox) {\n                    this.key = clamp(0, Config.keys.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    this.octave = 0;\n                } else if (fromGoldBox || (beforeThree && fromUltraBox)) {\n                    // GoldBox (so far) didn't introduce any new keys, but old\n                    // songs made with early versions of UltraBox share the\n                    // same URL format, and those can have more keys. This\n                    // shouldn't really result in anything other than 0-11 for\n                    // the key and 0 for the octave for GoldBox songs.\n                    const rawKeyIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    const [key, octave]: [number, number] = convertLegacyKeyToKeyAndOctave(rawKeyIndex);\n                    this.key = key;\n                    this.octave = octave;\n                } else {\n                    this.key = clamp(0, Config.keys.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    this.octave = clamp(Config.octaveMin, Config.octaveMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + Config.octaveMin);\n                }\n            } break;\n            case SongTagCode.loopStart: {\n                if (beforeFive && fromBeepBox) {\n                    this.loopStart = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                } else {\n                    this.loopStart = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                }\n            } break;\n            case SongTagCode.loopEnd: {\n                if (beforeFive && fromBeepBox) {\n                    this.loopLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                } else {\n                    this.loopLength = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\n                }\n            } break;\n            case SongTagCode.tempo: {\n                if (beforeFour && fromBeepBox) {\n                    this.tempo = [95, 120, 151, 190][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\n                } else if (beforeSeven && fromBeepBox) {\n                    this.tempo = [88, 95, 103, 111, 120, 130, 140, 151, 163, 176, 190, 206, 222, 240, 259][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\n                } else {\n                    this.tempo = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                }\n                this.tempo = clamp(Config.tempoMin, Config.tempoMax + 1, this.tempo);\n            } break;\n            case SongTagCode.reverb: {\n                if (beforeNine && fromBeepBox) {\n                    legacyGlobalReverb = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 12;\n                    legacyGlobalReverb = clamp(0, Config.reverbRange, legacyGlobalReverb);\n                } else if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\n                    legacyGlobalReverb = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    legacyGlobalReverb = clamp(0, Config.reverbRange, legacyGlobalReverb);\n                } else {\n                    // Do nothing, BeepBox v9+ do not support song-wide reverb - JummBox still does via modulator.\n                }\n            } break;\n            case SongTagCode.beatCount: {\n                if (beforeThree && fromBeepBox) {\n                    this.beatsPerBar = [6, 7, 8, 9, 10][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\n                } else {\n                    this.beatsPerBar = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\n                }\n                this.beatsPerBar = Math.max(Config.beatsPerBarMin, Math.min(Config.beatsPerBarMax, this.beatsPerBar));\n            } break;\n            case SongTagCode.barCount: {\n                const barCount: number = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\n                this.barCount = validateRange(Config.barCountMin, Config.barCountMax, barCount);\n                for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                    for (let bar = this.channels[channelIndex].bars.length; bar < this.barCount; bar++) {\n                        this.channels[channelIndex].bars[bar] = (bar < 4) ? 1 : 0;\n                    }\n                    this.channels[channelIndex].bars.length = this.barCount;\n                }\n            } break;\n            case SongTagCode.patternCount: {\n                let patternsPerChannel: number;\n                if (beforeEight && fromBeepBox) {\n                    patternsPerChannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\n                } else {\n                    patternsPerChannel = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\n                }\n                this.patternsPerChannel = validateRange(1, Config.barCountMax, patternsPerChannel);\n                const channelCount: number = this.getChannelCount();\n                for (let channelIndex: number = 0; channelIndex < channelCount; channelIndex++) {\n                    const patterns: Pattern[] = this.channels[channelIndex].patterns;\n                    for (let pattern = patterns.length; pattern < this.patternsPerChannel; pattern++) {\n                        patterns[pattern] = new Pattern();\n                    }\n                    patterns.length = this.patternsPerChannel;\n                }\n            } break;\n            case SongTagCode.instrumentCount: {\n                if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                    const instrumentsPerChannel: number = validateRange(Config.instrumentCountMin, Config.patternInstrumentCountMax, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + Config.instrumentCountMin);\n                    this.layeredInstruments = false;\n                    this.patternInstruments = (instrumentsPerChannel > 1);\n\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                        const isNoiseChannel: boolean = channelIndex >= this.pitchChannelCount && channelIndex < this.pitchChannelCount + this.noiseChannelCount;\n                        const isModChannel: boolean = channelIndex >= this.pitchChannelCount + this.noiseChannelCount;\n\n                        for (let instrumentIndex: number = this.channels[channelIndex].instruments.length; instrumentIndex < instrumentsPerChannel; instrumentIndex++) {\n                            this.channels[channelIndex].instruments[instrumentIndex] = new Instrument(isNoiseChannel, isModChannel);\n                        }\n                        this.channels[channelIndex].instruments.length = instrumentsPerChannel;\n                        if (beforeSix && fromBeepBox) {\n                            for (let instrumentIndex: number = 0; instrumentIndex < instrumentsPerChannel; instrumentIndex++) {\n                                this.channels[channelIndex].instruments[instrumentIndex].setTypeAndReset(isNoiseChannel ? InstrumentType.noise : InstrumentType.chip, isNoiseChannel, isModChannel);\n                            }\n                        }\n\n                        for (let j: number = legacySettingsCache![channelIndex].length; j < instrumentsPerChannel; j++) {\n                            legacySettingsCache![channelIndex][j] = {};\n                        }\n                    }\n                } else {\n                    const instrumentsFlagBits: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    this.layeredInstruments = (instrumentsFlagBits & (1 << 1)) != 0;\n                    this.patternInstruments = (instrumentsFlagBits & (1 << 0)) != 0;\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                        let instrumentCount: number = 1;\n                        if (this.layeredInstruments || this.patternInstruments) {\n                            instrumentCount = validateRange(Config.instrumentCountMin, this.getMaxInstrumentsPerChannel(), base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + Config.instrumentCountMin);\n                        }\n                        const channel: Channel = this.channels[channelIndex];\n                        const isNoiseChannel: boolean = this.getChannelIsNoise(channelIndex);\n                        const isModChannel: boolean = this.getChannelIsMod(channelIndex);\n                        for (let i: number = channel.instruments.length; i < instrumentCount; i++) {\n                            channel.instruments[i] = new Instrument(isNoiseChannel, isModChannel);\n                        }\n                        channel.instruments.length = instrumentCount;\n                    }\n                }\n            } break;\n            case SongTagCode.rhythm: {\n                if (!fromUltraBox && !fromSlarmoosBox) {\n                    let newRhythm = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    this.rhythm = clamp(0, Config.rhythms.length, newRhythm);\n                    if (fromJummBox && beforeThree || fromBeepBox) {\n                        if (this.rhythm == Config.rhythms.dictionary[\"\u00F73 (triplets)\"].index || this.rhythm == Config.rhythms.dictionary[\"\u00F76\"].index) {\n                            useSlowerArpSpeed = true;\n                        }\n                        if (this.rhythm >= Config.rhythms.dictionary[\"\u00F76\"].index) {\n                            // @TODO: This assumes that 6 and 8 are in that order, but\n                            // if someone reorders Config.rhythms that may not be true,\n                            // so this check probably should instead look for those\n                            // specific rhythms.\n                            useFastTwoNoteArp = true;\n                        }\n                    }\n                } else if ((fromSlarmoosBox && beforeFour) || (fromUltraBox && beforeFive)) {\n                    const rhythmMap = [1, 1, 0, 1, 2, 3, 4, 5];\n                    this.rhythm = clamp(0, Config.rhythms.length, rhythmMap[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]]);\n                } else {\n                    this.rhythm = clamp(0, Config.rhythms.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                }\n            } break;\n            case SongTagCode.channelOctave: {\n                if (beforeThree && fromBeepBox) {\n                    const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    this.channels[channelIndex].octave = clamp(0, Config.pitchOctaves, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);\n                    if (channelIndex >= this.pitchChannelCount) this.channels[channelIndex].octave = 0;\n                } else if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                        this.channels[channelIndex].octave = clamp(0, Config.pitchOctaves, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);\n                        if (channelIndex >= this.pitchChannelCount) this.channels[channelIndex].octave = 0;\n                    }\n                } else {\n                    for (let channelIndex: number = 0; channelIndex < this.pitchChannelCount; channelIndex++) {\n                        this.channels[channelIndex].octave = clamp(0, Config.pitchOctaves, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    }\n                    for (let channelIndex: number = this.pitchChannelCount; channelIndex < this.getChannelCount(); channelIndex++) {\n                        this.channels[channelIndex].octave = 0;\n                    }\n                }\n            } break;\n            case SongTagCode.startInstrument: {\n                instrumentIndexIterator++;\n                if (instrumentIndexIterator >= this.channels[instrumentChannelIterator].instruments.length) {\n                    instrumentChannelIterator++;\n                    instrumentIndexIterator = 0;\n                }\n                validateRange(0, this.channels.length - 1, instrumentChannelIterator);\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                // JB before v5 had custom chip and mod before pickedString and supersaw were added. Index +2.\n                let instrumentType: number = validateRange(0, InstrumentType.length - 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\n                    if (instrumentType == InstrumentType.pickedString || instrumentType == InstrumentType.supersaw) {\n                        instrumentType += 2;\n                    }\n                }\n                // Similar story here, JB before v5 had custom chip and mod before supersaw was added. Index +1.\n                else if ((fromJummBox && beforeSix) || (fromGoldBox && !beforeFour) || (fromUltraBox && beforeFive)) {\n                    if (instrumentType == InstrumentType.supersaw || instrumentType == InstrumentType.customChipWave || instrumentType == InstrumentType.mod) {\n                        instrumentType += 1;\n                    }\n                }\n                instrument.setTypeAndReset(instrumentType, instrumentChannelIterator >= this.pitchChannelCount && instrumentChannelIterator < this.pitchChannelCount + this.noiseChannelCount, instrumentChannelIterator >= this.pitchChannelCount + this.noiseChannelCount);\n\n                // Anti-aliasing was added in BeepBox 3.0 (v6->v7) and JummBox 1.3 (v1->v2 roughly but some leakage possible)\n                if (((beforeSeven && fromBeepBox) || (beforeTwo && fromJummBox)) && (instrumentType == InstrumentType.chip || instrumentType == InstrumentType.customChipWave || instrumentType == InstrumentType.pwm)) {\n                    instrument.aliases = true;\n                    let newEffect: Effect = instrument.addEffect(EffectType.distortion);\n                    newEffect.distortion = 0;\n                }\n                if (useSlowerArpSpeed) {\n                    instrument.arpeggioSpeed = 9; // x3/4 speed. This used to be tied to rhythm, but now it is decoupled to each instrument's arp speed slider. This flag gets set when importing older songs to keep things consistent.\n                }\n                if (useFastTwoNoteArp) {\n                    instrument.fastTwoNoteArp = true;\n                }\n\n                if (beforeSeven && fromBeepBox) {\n                    // instrument.effects = 0;\n                    // Chip/noise instruments had arpeggio and FM had custom interval but neither\n                    // explicitly saved the chorus setting beforeSeven so enable it here.\n                    if (instrument.chord != Config.chords.dictionary[\"simultaneous\"].index) {\n                        // Enable chord if it was used.\n                        instrument.mdeffects |= 1 << MDEffectType.chord;\n                    }\n                }\n            } break;\n            case SongTagCode.preset: {\n                const presetValue: number = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = presetValue;\n                // Picked string was inserted before custom chip in JB v5, so bump up preset index.\n                if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\n                    if (this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset == InstrumentType.pickedString) {\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = InstrumentType.customChipWave;\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].type = InstrumentType.customChipWave;\n                    }\n                }\n                // Similar story, supersaw is also before custom chip (and mod, but mods can't have presets).\n                else if ((fromJummBox && beforeSix) || (fromUltraBox && beforeFive)) {\n                    if (this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset == InstrumentType.supersaw) {\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = InstrumentType.customChipWave;\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].type = InstrumentType.customChipWave;\n                    }\n                    // ultra code for 6-op fm maybe\n                    if (this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset == InstrumentType.mod) {\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = InstrumentType.fm6op;\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].type = InstrumentType.fm6op;\n                    }\n                }\n                // BeepBox directly tweaked \"grand piano\", but JB kept it the same. The most up to date version is now \"grand piano 3\"\n                if (fromBeepBox && presetValue == EditorConfig.nameToPresetValue(\"grand piano 1\")) {\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = EditorConfig.nameToPresetValue(\"grand piano 3\")!;\n                }\n            } break;\n            case SongTagCode.wave: {\n                if (beforeThree && fromBeepBox) {\n                    const legacyWaves: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 0];\n                    const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    const instrument: Instrument = this.channels[channelIndex].instruments[0];\n                    instrument.chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\n\n                    // Version 2 didn't save any settings for settings for filters, or envelopes,\n                    // just waves, so initialize them here I guess.\n                    instrument.convertLegacySettings(legacySettingsCache![channelIndex][0], forceSimpleFilter);\n\n                } else if (beforeSix && fromBeepBox) {\n                    const legacyWaves: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 0];\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                        for (const instrument of this.channels[channelIndex].instruments) {\n                            if (channelIndex >= this.pitchChannelCount) {\n                                instrument.chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            } else {\n                                instrument.chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\n                            }\n                        }\n                    }\n                } else if (beforeSeven && fromBeepBox) {\n                    const legacyWaves: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 0];\n                    if (instrumentChannelIterator >= this.pitchChannelCount) {\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    } else {\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\n                    }\n                } else {\n                    if (this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].type == InstrumentType.noise) {\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    } else {\n                        if (fromSlarmoosBox || fromUltraBox) {\n                            const chipWaveReal = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            const chipWaveCounter = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\n                            if (chipWaveCounter == 3) {\n                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveReal + 186);\n                            } else if (chipWaveCounter == 2) {\n                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveReal + 124);\n                            } else if (chipWaveCounter == 1) {\n                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveReal + 62);\n                            } else {\n                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveReal);\n                            }\n\n                        } else {\n                            this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                    }\n                }\n            } break;\n            case SongTagCode.noteFilter: {\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\n                    if (beforeSeven && fromBeepBox) {\n                        const legacyToCutoff: number[] = [10, 6, 3, 0, 8, 5, 2];\n                        //const pregoldToEnvelope: number[] = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];\n                        const legacyToEnvelope: string[] = [\"none\", \"none\", \"none\", \"none\", \"decay 1\", \"decay 2\", \"decay 3\"];\n\n                        if (beforeThree && fromBeepBox) {\n                            const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            const instrument: Instrument = this.channels[channelIndex].instruments[0];\n                            const legacySettings: LegacySettings = legacySettingsCache![channelIndex][0];\n                            const legacyFilter: number = [1, 3, 4, 5][clamp(0, legacyToCutoff.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                            legacySettings.filterCutoff = legacyToCutoff[legacyFilter];\n                            legacySettings.filterResonance = 0;\n                            legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyToEnvelope[legacyFilter]];\n                            instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                        } else if (beforeSix && fromBeepBox) {\n                            for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                                for (let i: number = 0; i < this.channels[channelIndex].instruments.length; i++) {\n                                    const instrument: Instrument = this.channels[channelIndex].instruments[i];\n                                    const legacySettings: LegacySettings = legacySettingsCache![channelIndex][i];\n                                    const legacyFilter: number = clamp(0, legacyToCutoff.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);\n                                    if (channelIndex < this.pitchChannelCount) {\n                                        legacySettings.filterCutoff = legacyToCutoff[legacyFilter];\n                                        legacySettings.filterResonance = 0;\n                                        legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyToEnvelope[legacyFilter]];\n                                    } else {\n                                        legacySettings.filterCutoff = 10;\n                                        legacySettings.filterResonance = 0;\n                                        legacySettings.filterEnvelope = Config.envelopes.dictionary[\"none\"];\n                                    }\n                                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                                }\n                            }\n                        } else {\n                            const legacyFilter: number = clamp(0, legacyToCutoff.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n                            legacySettings.filterCutoff = legacyToCutoff[legacyFilter];\n                            legacySettings.filterResonance = 0;\n                            legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyToEnvelope[legacyFilter]];\n                            instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                        }\n                    } else {\n                        const filterCutoffRange: number = 11;\n                        const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n                        legacySettings.filterCutoff = clamp(0, filterCutoffRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                    }\n                } else {\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    let typeCheck: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    if (fromTheepBox) { //in mods that arent Theepbox, pre eq is switched with post eq\n                        if (typeCheck == 0) {\n                            instrument.noteFilterType = false;\n                            typeCheck = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            const originalControlPointCount: number = typeCheck;\n                            instrument.noteFilter.controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalControlPointCount);\n                            for (let i: number = instrument.noteFilter.controlPoints.length; i < instrument.noteFilter.controlPointCount; i++) {\n                                instrument.noteFilter.controlPoints[i] = new FilterControlPoint();\n                            }\n                            for (let i: number = 0; i < instrument.noteFilter.controlPointCount; i++) {\n                                const point: FilterControlPoint = instrument.noteFilter.controlPoints[i];\n                                point.type = clamp(0, FilterType.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                            for (let i: number = instrument.noteFilter.controlPointCount; i < originalControlPointCount; i++) {\n                                charIndex += 3;\n                            }\n\n                            // Get subfilters as well. Skip Index 0, is a copy of the base filter.\n                            instrument.noteSubFilters[0] = instrument.noteFilter;\n                            let usingSubFilterBitfield: number = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            for (let j: number = 0; j < Config.filterMorphCount - 1; j++) {\n                                if (usingSubFilterBitfield & (1 << j)) {\n                                    // Number of control points\n                                    const originalSubfilterControlPointCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    if (instrument.noteSubFilters[j + 1] == null)\n                                        instrument.noteSubFilters[j + 1] = new FilterSettings();\n                                    instrument.noteSubFilters[j + 1]!.controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalSubfilterControlPointCount);\n                                    for (let i: number = instrument.noteSubFilters[j + 1]!.controlPoints.length; i < instrument.noteSubFilters[j + 1]!.controlPointCount; i++) {\n                                        instrument.noteSubFilters[j + 1]!.controlPoints[i] = new FilterControlPoint();\n                                    }\n                                    for (let i: number = 0; i < instrument.noteSubFilters[j + 1]!.controlPointCount; i++) {\n                                        const point: FilterControlPoint = instrument.noteSubFilters[j + 1]!.controlPoints[i];\n                                        point.type = clamp(0, FilterType.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    }\n                                    for (let i: number = instrument.noteSubFilters[j + 1]!.controlPointCount; i < originalSubfilterControlPointCount; i++) {\n                                        charIndex += 3;\n                                    }\n                                }\n                            }\n                        }\n                        else {\n                            instrument.noteFilterType = true;\n                            instrument.noteFilterSimpleCut = clamp(0, Config.filterSimpleCutRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.noteFilterSimplePeak = clamp(0, Config.filterSimplePeakRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                    } else {\n                        let newEffect: Effect = instrument.addEffect(EffectType.eqFilter);\n                        if (fromBeepBox || typeCheck == 0) {\n                            newEffect.eqFilterType = false;\n                            if (fromJummBox || fromGoldBox || fromUltraBox || fromSlarmoosBox)\n                                typeCheck = base64CharCodeToInt[compressed.charCodeAt(charIndex++)]; // Skip to next to get control point count\n                                const originalControlPointCount: number = typeCheck;\n                            newEffect.eqFilter.controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalControlPointCount);\n                            for (let i: number = newEffect.eqFilter.controlPoints.length; i < newEffect.eqFilter.controlPointCount; i++) {\n                                newEffect.eqFilter.controlPoints[i] = new FilterControlPoint();\n                            }\n                            for (let i: number = 0; i < newEffect.eqFilter.controlPointCount; i++) {\n                                const point: FilterControlPoint = newEffect.eqFilter.controlPoints[i];\n                                point.type = clamp(0, FilterType.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                            for (let i: number = newEffect.eqFilter.controlPointCount; i < originalControlPointCount; i++) {\n                                charIndex += 3;\n                            }\n\n                            // Get subfilters as well. Skip Index 0, is a copy of the base filter.\n                            newEffect.eqSubFilters[0] = newEffect.eqFilter;\n                            if ((fromJummBox && !beforeFive) || (fromGoldBox && !beforeFour) || fromUltraBox || fromSlarmoosBox) {\n                                let usingSubFilterBitfield: number = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                for (let j: number = 0; j < Config.filterMorphCount - 1; j++) {\n                                    if (usingSubFilterBitfield & (1 << j)) {\n                                        // Number of control points\n                                        const originalSubfilterControlPointCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                        if (newEffect.eqSubFilters[j + 1] == null)\n                                            newEffect.eqSubFilters[j + 1] = new FilterSettings();\n                                        newEffect.eqSubFilters[j + 1]!.controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalSubfilterControlPointCount);\n                                        for (let i: number = newEffect.eqSubFilters[j + 1]!.controlPoints.length; i < newEffect.eqSubFilters[j + 1]!.controlPointCount; i++) {\n                                            newEffect.eqSubFilters[j + 1]!.controlPoints[i] = new FilterControlPoint();\n                                        }\n                                        for (let i: number = 0; i < newEffect.eqSubFilters[j + 1]!.controlPointCount; i++) {\n                                            const point: FilterControlPoint = newEffect.eqSubFilters[j + 1]!.controlPoints[i];\n                                            point.type = clamp(0, FilterType.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                            point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                            point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        }\n                                        for (let i: number = newEffect.eqSubFilters[j + 1]!.controlPointCount; i < originalSubfilterControlPointCount; i++) {\n                                            charIndex += 3;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        else {\n                            newEffect.eqFilterType = true;\n                            newEffect.eqFilterSimpleCut = clamp(0, Config.filterSimpleCutRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            newEffect.eqFilterSimplePeak = clamp(0, Config.filterSimplePeakRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                    }\n                }\n            } break;\n            case SongTagCode.loopControls: {\n                if (fromSlarmoosBox || fromUltraBox) {\n                    if (beforeThree && fromUltraBox) {\n                        // Still have to support the old and bad loop control data format written as a test, sigh.\n                        const sampleLoopInfoEncodedLength = decode32BitNumber(compressed, charIndex);\n                        charIndex += 6;\n                        const sampleLoopInfoEncoded = compressed.slice(charIndex, charIndex + sampleLoopInfoEncodedLength);\n                        charIndex += sampleLoopInfoEncodedLength;\n                        interface SampleLoopInfo {\n                            isUsingAdvancedLoopControls: boolean;\n                            chipWaveLoopStart: number;\n                            chipWaveLoopEnd: number;\n                            chipWaveLoopMode: number;\n                            chipWavePlayBackwards: boolean;\n                            chipWaveStartOffset: number;\n                        }\n                        interface SampleLoopInfoEntry {\n                            channel: number;\n                            instrument: number;\n                            info: SampleLoopInfo;\n                        }\n                        const sampleLoopInfo: SampleLoopInfoEntry[] = JSON.parse(atob(sampleLoopInfoEncoded));\n                        for (const entry of sampleLoopInfo) {\n                            const channelIndex: number = entry[\"channel\"];\n                            const instrumentIndex: number = entry[\"instrument\"];\n                            const info: SampleLoopInfo = entry[\"info\"];\n                            const instrument: Instrument = this.channels[channelIndex].instruments[instrumentIndex];\n                            instrument.isUsingAdvancedLoopControls = info[\"isUsingAdvancedLoopControls\"];\n                            instrument.chipWaveLoopStart = info[\"chipWaveLoopStart\"];\n                            instrument.chipWaveLoopEnd = info[\"chipWaveLoopEnd\"];\n                            instrument.chipWaveLoopMode = info[\"chipWaveLoopMode\"];\n                            instrument.chipWavePlayBackwards = info[\"chipWavePlayBackwards\"];\n                            instrument.chipWaveStartOffset = info[\"chipWaveStartOffset\"];\n                            // @TODO: Whenever chipWaveReleaseMode is implemented, it should be set here to the default.\n                        }\n                    } else {\n                        // Read the new loop control data format.\n                        // See Song.toBase64String for details on the encodings used here.\n                        const encodedLoopMode: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        const isUsingAdvancedLoopControls: boolean = Boolean(encodedLoopMode & 1);\n                        const chipWaveLoopMode: number = encodedLoopMode >> 1;\n                        const encodedReleaseMode: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        const chipWaveInStereo: boolean = Boolean(encodedReleaseMode & 2);\n                        const chipWavePlayBackwards: boolean = Boolean(encodedReleaseMode & 1);\n                        // const chipWaveReleaseMode: number = encodedReleaseMode >> 1;\n                        const chipWaveLoopStart: number = decode32BitNumber(compressed, charIndex);\n                        charIndex += 6;\n                        const chipWaveLoopEnd: number = decode32BitNumber(compressed, charIndex);\n                        charIndex += 6;\n                        const chipWaveStartOffset: number = decode32BitNumber(compressed, charIndex);\n                        charIndex += 6;\n                        const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        instrument.isUsingAdvancedLoopControls = isUsingAdvancedLoopControls;\n                        instrument.chipWaveLoopStart = chipWaveLoopStart;\n                        instrument.chipWaveLoopEnd = chipWaveLoopEnd;\n                        instrument.chipWaveLoopMode = chipWaveLoopMode;\n                        instrument.chipWavePlayBackwards = chipWavePlayBackwards;\n                        instrument.chipWaveStartOffset = chipWaveStartOffset;\n                        instrument.chipWaveInStereo = chipWaveInStereo;\n                        // instrument.chipWaveReleaseMode = chipWaveReleaseMode;\n                    }\n                }\n                else if (fromGoldBox && !beforeFour && beforeSix) {\n                    if (document.URL.substring(document.URL.length - 13).toLowerCase() != \"legacysamples\") {\n                        if (!willLoadLegacySamplesForOldSongs) {\n                            willLoadLegacySamplesForOldSongs = true;\n                            Config.willReloadForCustomSamples = true;\n                            EditorConfig.customSamples = [\"legacySamples\"];\n                            loadBuiltInSamples(0);\n                        }\n                    }\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 125);\n                } else if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                    const filterResonanceRange: number = 8;\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n                    legacySettings.filterResonance = clamp(0, filterResonanceRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n\n                }\n            } break;\n            case SongTagCode.drumsetEnvelopes: {\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                const pregoldToEnvelope: number[] = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\n                    if ((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox && !fromSlarmoosBox)) {\n\n                    }\n                    if (instrument.type == InstrumentType.drumset) {\n                        for (let i: number = 0; i < Config.drumCount; i++) {\n                            let aa: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            if ((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox && !fromSlarmoosBox)) aa = pregoldToEnvelope[aa];\n                            instrument.drumsetEnvelopes[i] = Song._envelopeFromLegacyIndex(aa).index;\n                        }\n                    } else {\n                        // This used to be used for general filter envelopes.\n                        // The presence of an envelope affects how convertLegacySettings\n                        // decides the closest possible approximation, so update it.\n                        const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n                        let aa: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        if ((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox && !fromSlarmoosBox)) aa = pregoldToEnvelope[aa];\n                        legacySettings.filterEnvelope = Song._envelopeFromLegacyIndex(aa);\n                        instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                    }\n                } else {\n                    // This tag is now only used for drumset filter envelopes.\n                    for (let i: number = 0; i < Config.drumCount; i++) {\n                        let aa: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        if ((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox && !fromSlarmoosBox)) aa = pregoldToEnvelope[aa];\n                        if (!fromSlarmoosBox && aa >= 2) aa++; //2 for pitch\n                        instrument.drumsetEnvelopes[i] = clamp(0, Config.envelopes.length, aa);\n                    }\n                }\n            } break;\n            case SongTagCode.pulseWidth: {\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                instrument.pulseWidth = clamp(0, Config.pulseWidthRange + (+(fromJummBox)) + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                if (fromBeepBox) {\n                    // BeepBox formula\n                    instrument.pulseWidth = Math.round(Math.pow(0.5, (7 - instrument.pulseWidth) * Config.pulseWidthStepPower) * Config.pulseWidthRange);\n\n                }\n\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\n                    const pregoldToEnvelope: number[] = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];\n                    const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n                    let aa: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    if ((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox && !fromSlarmoosBox)) aa = pregoldToEnvelope[aa];\n                    legacySettings.pulseEnvelope = Song._envelopeFromLegacyIndex(aa);\n                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                }\n\n                if ((fromUltraBox && !beforeFour) || fromSlarmoosBox) {\n                    instrument.decimalOffset = clamp(0, 99 + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                }\n\n            } break;\n            case SongTagCode.stringSustain: {\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                const sustainValue: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                instrument.stringSustain = clamp(0, Config.stringSustainRange, sustainValue & 0x1F);\n                instrument.stringSustainType = Config.enableAcousticSustain ? clamp(0, SustainType.length, sustainValue >> 5) : SustainType.bright;\n            } break;\n            case SongTagCode.fadeInOut: {\n                if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                    // this tag was used for a combination of transition and fade in/out.\n                    const legacySettings = [\n                        { transition: \"interrupt\", fadeInSeconds: 0.0, fadeOutTicks: -1 },\n                        { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: -3 },\n                        { transition: \"normal\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\n                        { transition: \"slide in pattern\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\n                        { transition: \"normal\", fadeInSeconds: 0.04, fadeOutTicks: 6 },\n                        { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: 48 },\n                        { transition: \"normal\", fadeInSeconds: 0.0125, fadeOutTicks: 72 },\n                        { transition: \"normal\", fadeInSeconds: 0.06, fadeOutTicks: 96 },\n                        { transition: \"slide in pattern\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\n                    ];\n                    if (beforeThree && fromBeepBox) {\n                        const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                        const instrument: Instrument = this.channels[channelIndex].instruments[0];\n                        instrument.fadeIn = secondsToFadeInSetting(settings.fadeInSeconds);\n                        instrument.fadeOut = ticksToFadeOutSetting(settings.fadeOutTicks);\n                        instrument.transition = Config.transitions.dictionary[settings.transition].index;\n                        if (instrument.transition != Config.transitions.dictionary[\"normal\"].index) {\n                            // Enable transition if it was used.\n                            instrument.mdeffects |= 1 << MDEffectType.transition;\n                        }\n                    } else if (beforeSix && fromBeepBox) {\n                        for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                            for (const instrument of this.channels[channelIndex].instruments) {\n                                const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                                instrument.fadeIn = secondsToFadeInSetting(settings.fadeInSeconds);\n                                instrument.fadeOut = ticksToFadeOutSetting(settings.fadeOutTicks);\n                                instrument.transition = Config.transitions.dictionary[settings.transition].index;\n                                if (instrument.transition != Config.transitions.dictionary[\"normal\"].index) {\n                                    // Enable transition if it was used.\n                                    instrument.mdeffects |= 1 << MDEffectType.transition;\n                                }\n                            }\n                        }\n                    } else if ((beforeFour && !fromGoldBox && !fromUltraBox && !fromSlarmoosBox) || fromBeepBox) {\n                        const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                        const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        instrument.fadeIn = secondsToFadeInSetting(settings.fadeInSeconds);\n                        instrument.fadeOut = ticksToFadeOutSetting(settings.fadeOutTicks);\n                        instrument.transition = Config.transitions.dictionary[settings.transition].index;\n                        if (instrument.transition != Config.transitions.dictionary[\"normal\"].index) {\n                            // Enable transition if it was used.\n                            instrument.mdeffects |= 1 << MDEffectType.transition;\n                        }\n                    } else {\n                        const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                        const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        instrument.fadeIn = secondsToFadeInSetting(settings.fadeInSeconds);\n                        instrument.fadeOut = ticksToFadeOutSetting(settings.fadeOutTicks);\n                        instrument.transition = Config.transitions.dictionary[settings.transition].index;\n\n                        // Read tie-note\n                        if (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] > 0) {\n                            // Set legacy tie over flag, which is only used to port notes in patterns using this instrument as tying.\n                            instrument.legacyTieOver = true;\n\n                        }\n                        instrument.clicklessTransition = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\n\n                        if (instrument.transition != Config.transitions.dictionary[\"normal\"].index || instrument.clicklessTransition) {\n                            // Enable transition if it was used.\n                            instrument.mdeffects |= 1 << MDEffectType.transition;\n                        }\n                    }\n                } else {\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    instrument.fadeIn = clamp(0, Config.fadeInRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    instrument.fadeOut = clamp(0, Config.fadeOutTicks.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    if (fromJummBox || fromGoldBox || fromUltraBox || fromSlarmoosBox)\n                        instrument.clicklessTransition = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\n                }\n            } break;\n            case SongTagCode.songEq: { //deprecated vibrato tag repurposed for songEq\n                if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                    if (beforeSeven && fromBeepBox) {\n                        if (beforeThree && fromBeepBox) {\n                            const legacyEffects: number[] = [0, 3, 2, 0];\n                            const legacyEnvelopes: string[] = [\"none\", \"none\", \"none\", \"tremolo2\"];\n                            const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            const effect: number = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            const instrument: Instrument = this.channels[channelIndex].instruments[0];\n                            const legacySettings: LegacySettings = legacySettingsCache![channelIndex][0];\n                            instrument.vibrato = legacyEffects[effect];\n                            if (legacySettings.filterEnvelope == undefined || legacySettings.filterEnvelope.type == EnvelopeType.none) {\n                                // Imitate the legacy tremolo with a filter envelope.\n                                legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyEnvelopes[effect]];\n                                instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                            }\n                            if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\n                                // Enable vibrato if it was used.\n                                instrument.mdeffects |= 1 << MDEffectType.vibrato;\n                            }\n                        } else if (beforeSix && fromBeepBox) {\n                            const legacyEffects: number[] = [0, 1, 2, 3, 0, 0];\n                            const legacyEnvelopes: string[] = [\"none\", \"none\", \"none\", \"none\", \"tremolo5\", \"tremolo2\"];\n                            for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                                for (let i: number = 0; i < this.channels[channelIndex].instruments.length; i++) {\n                                    const effect: number = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    const instrument: Instrument = this.channels[channelIndex].instruments[i];\n                                    const legacySettings: LegacySettings = legacySettingsCache![channelIndex][i];\n                                    instrument.vibrato = legacyEffects[effect];\n                                    if (legacySettings.filterEnvelope == undefined || legacySettings.filterEnvelope.type == EnvelopeType.none) {\n                                        // Imitate the legacy tremolo with a filter envelope.\n                                        legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyEnvelopes[effect]];\n                                        instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                                    }\n                                    if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\n                                        // Enable vibrato if it was used.\n                                        instrument.mdeffects |= 1 << MDEffectType.vibrato;\n                                    }\n                                    if ((legacyGlobalReverb != 0 || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) && !this.getChannelIsNoise(channelIndex)) {\n                                        // Enable reverb if it was used globaly before. (Global reverb was added before the effects option so I need to pick somewhere else to initialize instrument reverb, and I picked the vibrato command.)\n                                        let newEffect: Effect = instrument.addEffect(EffectType.reverb);\n                                        newEffect.reverb = legacyGlobalReverb;\n                                    }\n                                }\n                            }\n                        } else {\n                            const legacyEffects: number[] = [0, 1, 2, 3, 0, 0];\n                            const legacyEnvelopes: string[] = [\"none\", \"none\", \"none\", \"none\", \"tremolo5\", \"tremolo2\"];\n                            const effect: number = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n                            instrument.vibrato = legacyEffects[effect];\n                            if (legacySettings.filterEnvelope == undefined || legacySettings.filterEnvelope.type == EnvelopeType.none) {\n                                // Imitate the legacy tremolo with a filter envelope.\n                                legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyEnvelopes[effect]];\n                                instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                            }\n                            if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\n                                // Enable vibrato if it was used.\n                                instrument.mdeffects |= 1 << MDEffectType.vibrato;\n                            }\n                            if (legacyGlobalReverb != 0 || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                                // Enable reverb if it was used globaly before. (Global reverb was added before the effects option so I need to pick somewhere else to initialize instrument reverb, and I picked the vibrato command.)\n                                let newEffect: Effect = instrument.addEffect(EffectType.reverb);\n                                newEffect.reverb = legacyGlobalReverb;\n                            }\n                        }\n                    } else {\n                        const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        const vibrato: number = clamp(0, Config.vibratos.length + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        instrument.vibrato = vibrato;\n                        if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\n                            // Enable vibrato if it was used.\n                            instrument.mdeffects |= 1 << MDEffectType.vibrato;\n                        }\n                        // Custom vibrato\n                        if (vibrato == Config.vibratos.length) {\n                            instrument.vibratoDepth = clamp(0, Config.modulators.dictionary[\"vibrato depth\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 50;\n                            instrument.vibratoSpeed = clamp(0, Config.modulators.dictionary[\"vibrato speed\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.vibratoDelay = clamp(0, Config.modulators.dictionary[\"vibrato delay\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 2;\n                            instrument.vibratoType = clamp(0, Config.vibratoTypes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.mdeffects |= 1 << MDEffectType.vibrato;\n                        }\n                        // Enforce standard vibrato settings\n                        else {\n                            instrument.vibratoDepth = Config.vibratos[instrument.vibrato].amplitude;\n                            instrument.vibratoSpeed = 10; // Normal speed\n                            instrument.vibratoDelay = Config.vibratos[instrument.vibrato].delayTicks / 2;\n                            instrument.vibratoType = Config.vibratos[instrument.vibrato].type;\n                        }\n                    }\n                } else {\n                    // songeq\n                    if (fromSlarmoosBox && !beforeFour) { //double check that it's from a valid version\n                        const originalControlPointCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        this.eqFilter.controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalControlPointCount);\n                        for (let i: number = this.eqFilter.controlPoints.length; i < this.eqFilter.controlPointCount; i++) {\n                            this.eqFilter.controlPoints[i] = new FilterControlPoint();\n                        }\n                        for (let i: number = 0; i < this.eqFilter.controlPointCount; i++) {\n                            const point: FilterControlPoint = this.eqFilter.controlPoints[i];\n                            point.type = clamp(0, FilterType.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                        for (let i: number = this.eqFilter.controlPointCount; i < originalControlPointCount; i++) {\n                            charIndex += 3;\n                        }\n\n                        // Get subfilters as well. Skip Index 0, is a copy of the base filter.\n                        this.eqSubFilters[0] = this.eqFilter;\n                        let usingSubFilterBitfield: number = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        for (let j: number = 0; j < Config.filterMorphCount - 1; j++) {\n                            if (usingSubFilterBitfield & (1 << j)) {\n                                // Number of control points\n                                const originalSubfilterControlPointCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                if (this.eqSubFilters[j + 1] == null)\n                                    this.eqSubFilters[j + 1] = new FilterSettings();\n                                this.eqSubFilters[j + 1]!.controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalSubfilterControlPointCount);\n                                for (let i: number = this.eqSubFilters[j + 1]!.controlPoints.length; i < this.eqSubFilters[j + 1]!.controlPointCount; i++) {\n                                    this.eqSubFilters[j + 1]!.controlPoints[i] = new FilterControlPoint();\n                                }\n                                for (let i: number = 0; i < this.eqSubFilters[j + 1]!.controlPointCount; i++) {\n                                    const point: FilterControlPoint = this.eqSubFilters[j + 1]!.controlPoints[i];\n                                    point.type = clamp(0, FilterType.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                }\n                                for (let i: number = this.eqSubFilters[j + 1]!.controlPointCount; i < originalSubfilterControlPointCount; i++) {\n                                    charIndex += 3;\n                                }\n                            }\n                        }\n                    }\n                }\n            } break;\n            case SongTagCode.arpeggioSpeed: {\n                // Deprecated, but supported for legacy purposes\n                if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    instrument.arpeggioSpeed = clamp(0, Config.modulators.dictionary[\"arp speed\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    instrument.fastTwoNoteArp = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false; // Two note arp setting piggybacks on this\n                }\n                else {\n                    // Do nothing, deprecated for now\n                }\n            } break;\n            case SongTagCode.unison: {\n                if (beforeThree && fromBeepBox) {\n                    const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    const instrument = this.channels[channelIndex].instruments[0];\n                    instrument.unison = clamp(0, Config.unisons.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    instrument.unisonVoices = Config.unisons[instrument.unison].voices;\n                    instrument.unisonSpread = Config.unisons[instrument.unison].spread;\n                    instrument.unisonOffset = Config.unisons[instrument.unison].offset;\n                    instrument.unisonExpression = Config.unisons[instrument.unison].expression;\n                    instrument.unisonSign = Config.unisons[instrument.unison].sign;\n                } else if (beforeSix && fromBeepBox) {\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                        for (const instrument of this.channels[channelIndex].instruments) {\n                            const originalValue: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            let unison: number = clamp(0, Config.unisons.length, originalValue);\n                            if (originalValue == 8) {\n                                // original \"custom harmony\" now maps to \"hum\" and \"custom interval\".\n                                unison = 2;\n                                instrument.chord = 3;\n                            }\n                            instrument.unison = unison;\n                            instrument.unisonVoices = Config.unisons[instrument.unison].voices;\n                            instrument.unisonSpread = Config.unisons[instrument.unison].spread;\n                            instrument.unisonOffset = Config.unisons[instrument.unison].offset;\n                            instrument.unisonExpression = Config.unisons[instrument.unison].expression;\n                            instrument.unisonSign = Config.unisons[instrument.unison].sign;\n                        }\n                    }\n                } else if (beforeSeven && fromBeepBox) {\n                    const originalValue: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    let unison: number = clamp(0, Config.unisons.length, originalValue);\n                    const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    if (originalValue == 8) {\n                        // original \"custom harmony\" now maps to \"hum\" and \"custom interval\".\n                        unison = 2;\n                        instrument.chord = 3;\n                    }\n                    instrument.unison = unison;\n                    instrument.unisonVoices = Config.unisons[instrument.unison].voices;\n                    instrument.unisonSpread = Config.unisons[instrument.unison].spread;\n                    instrument.unisonOffset = Config.unisons[instrument.unison].offset;\n                    instrument.unisonExpression = Config.unisons[instrument.unison].expression;\n                    instrument.unisonSign = Config.unisons[instrument.unison].sign;\n                } else {\n                    const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    instrument.unison = clamp(0, Config.unisons.length + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    const unisonLength = (beforeFive || !fromSlarmoosBox) ? 27 : Config.unisons.length; //27 was the old length before I added >2 voice presets\n                    if (((fromUltraBox && !beforeFive) || fromSlarmoosBox) && (instrument.unison == unisonLength)) {\n                        // if (instrument.unison == Config.unisons.length) {\n                        instrument.unison = Config.unisons.length;\n                        instrument.unisonVoices = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\n                        const unisonSpreadNegative = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        const unisonSpread: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 63)) * 63);\n\n                        const unisonOffsetNegative = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        const unisonOffset: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 63)) * 63);\n\n                        const unisonExpressionNegative = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        const unisonExpression: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 63);\n\n                        const unisonSignNegative = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        const unisonSign: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 63);\n\n\n                        instrument.unisonSpread = unisonSpread / 1000;\n                        if (unisonSpreadNegative == 0) instrument.unisonSpread *= -1;\n\n                        instrument.unisonOffset = unisonOffset / 1000;\n                        if (unisonOffsetNegative == 0) instrument.unisonOffset *= -1;\n\n                        instrument.unisonExpression = unisonExpression / 1000;\n                        if (unisonExpressionNegative == 0) instrument.unisonExpression *= -1;\n\n                        instrument.unisonSign = unisonSign / 1000;\n                        if (unisonSignNegative == 0) instrument.unisonSign *= -1;\n                    } else {\n                        instrument.unisonVoices = Config.unisons[instrument.unison].voices;\n                        instrument.unisonSpread = Config.unisons[instrument.unison].spread;\n                        instrument.unisonOffset = Config.unisons[instrument.unison].offset;\n                        instrument.unisonExpression = Config.unisons[instrument.unison].expression;\n                        instrument.unisonSign = Config.unisons[instrument.unison].sign;\n                    }\n                }\n\n            } break;\n            case SongTagCode.chord: {\n                if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    instrument.chord = clamp(0, Config.chords.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    if (instrument.chord != Config.chords.dictionary[\"simultaneous\"].index) {\n                        // Enable chord if it was used.\n                        instrument.mdeffects |= 1 << MDEffectType.chord;\n                    }\n                } else {\n                    // Do nothing? This song tag code is deprecated for now.\n                }\n            } break;\n            case SongTagCode.effects: {\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                    instrument.addEffect(base64CharCodeToInt[compressed.charCodeAt(charIndex++)] & ((1 << EffectType.length) - 1));\n                    /*\n                    if (legacyGlobalReverb == 0 && !((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                        // Disable reverb if legacy song reverb was zero.\n                        instrument.removeEffect(EffectType.reverb);\n                    } else if (instrument.effectsIncludeType(EffectType.reverb)) {\n                        instrument.reverb = legacyGlobalReverb;\n                    }\n                    if (instrument.pan != Config.panCenter) {\n                        instrument.addEffect(EffectType.panning);\n                    }\n                    if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\n                        // Enable vibrato if it was used.\n                        instrument.mdeffects |= 1 << MDEffectType.vibrato;\n                    }\n                    if (instrument.detune != Config.detuneCenter) {\n                        // Enable detune if it was used.\n                        instrument.mdeffects |= 1 << MDEffectType.detune;\n                    }\n                    if (instrument.aliases)\n                        instrument.addEffect(EffectType.distortion);\n                    else\n                        instrument.removeEffect(EffectType.distortion);\n                    instrument.addEffect(EffectType.eqFilter);\n                    */\n                    //TODO: all this compat stuff, or honestly just remove it idc that much\n\n                    // convertLegacySettings may need to force-enable pre eq, call\n                    // it again here to make sure that this override takes precedence.\n                    const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                } else {\n                    // if (EffectType.length > 9) throw new Error();\n                    const effectCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)]\n                    if (fromTheepBox) {\n                        instrument.effects = [];\n                        for (let i: number = 0; i < effectCount; i++) { // this for loop caused me a lot of grief... i dont wanna talk about it\n                            let newEffect: Effect = instrument.addEffect(base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            if (newEffect.type == EffectType.eqFilter) {\n                                let typeCheck: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                if (typeCheck == 0) {\n                                    newEffect.eqFilterType = false;\n                                    typeCheck = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    newEffect.eqFilter.controlPointCount = clamp(0, Config.filterMaxPoints + 1, typeCheck);\n                                    for (let i: number = newEffect.eqFilter.controlPoints.length; i < newEffect.eqFilter.controlPointCount; i++) {\n                                        newEffect.eqFilter.controlPoints[i] = new FilterControlPoint();\n                                    }\n                                    for (let i: number = 0; i < newEffect.eqFilter.controlPointCount; i++) {\n                                        const point: FilterControlPoint = newEffect.eqFilter.controlPoints[i];\n                                        point.type = clamp(0, FilterType.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    }\n                                    for (let i: number = newEffect.eqFilter.controlPointCount; i < typeCheck; i++) {\n                                        charIndex += 3;\n                                    }\n\n                                    // Get subfilters as well. Skip Index 0, is a copy of the base filter.\n                                    newEffect.eqSubFilters[0] = newEffect.eqFilter;\n                                    let usingSubFilterBitfield: number = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    for (let j: number = 0; j < Config.filterMorphCount - 1; j++) {\n                                        if (usingSubFilterBitfield & (1 << j)) {\n                                            // Number of control points\n                                            const originalSubfilterControlPointCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                            if (newEffect.eqSubFilters[j + 1] == null)\n                                                newEffect.eqSubFilters[j + 1] = new FilterSettings();\n                                            newEffect.eqSubFilters[j + 1]!.controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalSubfilterControlPointCount);\n                                            for (let i: number = newEffect.eqSubFilters[j + 1]!.controlPoints.length; i < newEffect.eqSubFilters[j + 1]!.controlPointCount; i++) {\n                                                newEffect.eqSubFilters[j + 1]!.controlPoints[i] = new FilterControlPoint();\n                                            }\n                                            for (let i: number = 0; i < newEffect.eqSubFilters[j + 1]!.controlPointCount; i++) {\n                                                const point: FilterControlPoint = newEffect.eqSubFilters[j + 1]!.controlPoints[i];\n                                                point.type = clamp(0, FilterType.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                                point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                                point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                            }\n                                            for (let i: number = newEffect.eqSubFilters[j + 1]!.controlPointCount; i < originalSubfilterControlPointCount; i++) {\n                                                charIndex += 3;\n                                            }\n                                        }\n                                    }\n                                } else {\n                                    newEffect.eqFilterType = true;\n                                    newEffect.eqFilter.reset();\n                                    newEffect.eqFilterSimpleCut = clamp(0, Config.filterSimpleCutRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    newEffect.eqFilterSimplePeak = clamp(0, Config.filterSimplePeakRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                }\n                            }\n                            if (newEffect.type == EffectType.distortion) {\n                                if (fromTheepBox) newEffect.distortion = clamp(0, Config.distortionRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                else newEffect.distortion = clamp(0, Config.distortionRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) * 2;\n                                if ((fromJummBox && !beforeFive) || fromGoldBox || fromUltraBox || fromSlarmoosBox)\n                                    instrument.aliases = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\n                            }\n                            if (newEffect.type == EffectType.bitcrusher) {\n                                newEffect.bitcrusherFreq = clamp(0, Config.bitcrusherFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                newEffect.bitcrusherQuantization = clamp(0, Config.bitcrusherQuantizationRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                            if (newEffect.type == EffectType.panning) {\n                                if (fromBeepBox) {\n                                    // Beepbox has a panMax of 8 (9 total positions), Jummbox has a panMax of 100 (101 total positions)\n                                    newEffect.pan = clamp(0, Config.panMax + 1, Math.round(base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * ((Config.panMax) / 8.0)));\n                                }\n                                else {\n                                    newEffect.pan = clamp(0, Config.panMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                }\n\n                                // Now, pan delay follows on new versions of jummbox.\n                                if ((fromJummBox && !beforeTwo) || fromGoldBox || fromUltraBox || fromSlarmoosBox) newEffect.panDelay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                if (fromTheepBox) newEffect.panMode = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            }\n                            if (newEffect.type == EffectType.flanger) {\n                                newEffect.flanger = clamp(0, Config.flangerRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                newEffect.flangerSpeed = clamp(0, Config.flangerSpeedRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                newEffect.flangerDepth = clamp(0, Config.flangerDepthRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                newEffect.flangerFeedback = clamp(0, Config.flangerFeedbackRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                            if (newEffect.type == EffectType.chorus) {\n                                if (fromTheepBox) newEffect.chorus = clamp(0, (Config.chorusRange / 2) + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                else if (fromBeepBox) newEffect.chorus = clamp(0, (Config.chorusRange / 2) + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) * 4;\n                                else newEffect.chorus = clamp(0, Config.chorusRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) * 2;\n                            }\n                            if (newEffect.type == EffectType.gain) {\n                                newEffect.gain = clamp(0, Config.volumeRange, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                            if (newEffect.type == EffectType.echo) {\n                                if (!fromTheepBox) newEffect.echoSustain = clamp(0, Config.echoSustainRange / 3, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) * 3;\n                                else newEffect.echoSustain = clamp(0, Config.echoSustainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                newEffect.echoDelay = clamp(0, Config.echoDelayRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                newEffect.echoPingPong = clamp(0, Config.panMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                            if (newEffect.type == EffectType.reverb) {\n                                if (fromBeepBox) {\n                                    newEffect.reverb = clamp(0, Config.reverbRange, Math.round(base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * Config.reverbRange / 3.0));\n                                } else {\n                                    newEffect.reverb = clamp(0, Config.reverbRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                }\n                            }\n                            if (newEffect.type == EffectType.granular) {\n                                newEffect.granular = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                newEffect.grainSize = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                newEffect.grainAmounts = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                newEffect.grainRange = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            }\n                            if (newEffect.type == EffectType.ringModulation) {\n                                newEffect.ringModulation = clamp(0, Config.ringModRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                newEffect.ringModulationHz = clamp(0, Config.ringModHzRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                newEffect.ringModWaveformIndex = clamp(0, Config.operatorWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                newEffect.ringModPulseWidth = clamp(0, Config.pulseWidthRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                newEffect.ringModHzOffset = clamp(Config.rmHzOffsetMin, Config.rmHzOffsetMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                        }\n                        instrument.mdeffects = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    }\n                    else {\n                        // i will admit it feels pretty good to describe a feature as \"legacy\"\n                        // hopefully this will inspire me to add more compatability code (although im not 100% sure i got it right here) ~ theepie\n                        const legacyEffectTypes: (EffectType | MDEffectType)[] = [EffectType.reverb, EffectType.chorus, EffectType.panning, EffectType.distortion, EffectType.bitcrusher, EffectType.eqFilter, EffectType.echo, MDEffectType.pitchShift, MDEffectType.detune, MDEffectType.vibrato, MDEffectType.transition, MDEffectType.chord, MDEffectType.noteRange, EffectType.ringModulation, EffectType.granular];\n                        let bit: number = 0;\n                        if (fromSlarmoosBox && !beforeFive) {\n                            const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + 18);\n                            for (let i = 0; i < 18; i++) {\n                                bit = bits.read(1)\n                                if (i > 6 && i < 13) instrument.mdeffects &= legacyEffectTypes[bit];\n                                else if (bit == 1) instrument.addEffect(legacyEffectTypes[i] as EffectType);\n                            }\n                        } else {\n                            const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + 12);\n                            for (let i = 0; i < 12; i++) {\n                                bit = bits.read(1)\n                                if (i > 6) instrument.mdeffects &= legacyEffectTypes[bit];\n                                else if (bit == 1) instrument.addEffect(legacyEffectTypes[i] as EffectType);\n                            }\n                        }\n                        //TODO: add the rest of the compatability code lol\n                    }\n\n                    if (effectsIncludeTransition(instrument.mdeffects)) {\n                        instrument.transition = clamp(0, Config.transitions.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    }\n                    if (effectsIncludeChord(instrument.mdeffects)) {\n                        instrument.chord = clamp(0, Config.chords.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        // Custom arpeggio speed... only in JB, and only if the instrument arpeggiates.\n                        if (instrument.chord == Config.chords.dictionary[\"arpeggio\"].index && (fromJummBox||fromGoldBox||fromUltraBox||fromSlarmoosBox)) {\n                            instrument.arpeggioSpeed = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            instrument.fastTwoNoteArp = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) ? true : false;\n                        }\n                        if (instrument.chord == Config.chords.dictionary[\"monophonic\"].index && fromSlarmoosBox && !beforeFive) {\n                            instrument.monoChordTone = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        }\n                    }\n                    if (effectsIncludePitchShift(instrument.mdeffects)) {\n                        instrument.pitchShift = clamp(0, Config.pitchShiftRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    }\n                    if (effectsIncludeDetune(instrument.mdeffects)) {\n                        if (fromBeepBox) {\n                            // Convert from BeepBox's formula\n                            instrument.detune = clamp(Config.detuneMin, Config.detuneMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.detune = Math.round((instrument.detune - 9) * (Math.abs(instrument.detune - 9) + 1) / 2 + Config.detuneCenter);\n                        } else {\n                            instrument.detune = clamp(Config.detuneMin, Config.detuneMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                    }\n                    if (effectsIncludeVibrato(instrument.mdeffects)) {\n                        instrument.vibrato = clamp(0, Config.vibratos.length + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\n                        // Custom vibrato\n                        if (instrument.vibrato == Config.vibratos.length && (fromJummBox || fromGoldBox || fromUltraBox || fromSlarmoosBox)) {\n                            instrument.vibratoDepth = clamp(0, Config.modulators.dictionary[\"vibrato depth\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 25;\n                            instrument.vibratoSpeed = clamp(0, Config.modulators.dictionary[\"vibrato speed\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.vibratoDelay = clamp(0, Config.modulators.dictionary[\"vibrato delay\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.vibratoType = clamp(0, Config.vibratoTypes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                        // Enforce standard vibrato settings\n                        else {\n                            instrument.vibratoDepth = Config.vibratos[instrument.vibrato].amplitude;\n                            instrument.vibratoSpeed = 10; // Normal speed\n                            instrument.vibratoDelay = Config.vibratos[instrument.vibrato].delayTicks / 2;\n                            instrument.vibratoType = Config.vibratos[instrument.vibrato].type;\n                        }\n                    }\n                }\n                // Clamp the range...?\n                // if (instrument.effects.length != instrument.effectCount) //not sure what to do exactly\n            } break;\n            case SongTagCode.volume: {\n                if (beforeThree && fromBeepBox) {\n                    const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    const instrument: Instrument = this.channels[channelIndex].instruments[0];\n                    instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\n                } else if (beforeSix && fromBeepBox) {\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                        for (const instrument of this.channels[channelIndex].instruments) {\n                            instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\n                        }\n                    }\n                } else if (beforeSeven && fromBeepBox) {\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\n                } else if (fromBeepBox) {\n                    // Beepbox v9's volume range is 0-7 (0 is max, 7 is mute)\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 25.0 / 7.0));\n                } else if (!fromTheepBox) {\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    instrument.volume = Math.round(clamp(-Config.volumeRange / 2, Config.volumeRange / 2 + 1, ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)])) - Config.volumeRange / 2) * 2.0);\n                } else {\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    // shoutouts to later waffling\n                    instrument.volume = Math.round(clamp(-Config.volumeRange / 2, Config.volumeRange / 2 + 1, ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)])) - Config.volumeRange / 2));\n                }\n            } break;\n            case SongTagCode.pan: { // ideally this tagcode would add a new panning effect. however, there are many other parts of the code that add this aswell! TODO: make this work again? ~ theepie\n                /*\n                if (beforeNine && fromBeepBox) {\n                    // Beepbox has a panMax of 8 (9 total positions), Jummbox has a panMax of 100 (101 total positions)\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    instrument.pan = clamp(0, Config.panMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * ((Config.panMax) / 8.0));\n                } else if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    instrument.pan = clamp(0, Config.panMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    // Pan delay follows on v3 + v4\n                    if (fromJummBox && !beforeThree || fromGoldBox || fromUltraBox || fromSlarmoosBox) {\n                        instrument.panDelay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    }\n                } else {\n                    // Do nothing? This song tag code is deprecated for now.\n                } */\n            } break;\n            case SongTagCode.detune: {\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n\n                if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\n                    // Before jummbox v5, detune was -50 to 50. Now it is 0 to 400\n                    instrument.detune = clamp(Config.detuneMin, Config.detuneMax + 1, ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) * 4);\n                    instrument.mdeffects |= 1 << MDEffectType.detune;\n                } else {\n                    // Now in v5, tag code is deprecated and handled thru detune effects.\n                }\n            } break;\n            case SongTagCode.customChipWave: {\n                let instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                // Pop custom wave values\n                for (let j: number = 0; j < 64; j++) {\n                    instrument.customChipWave[j]\n                    = clamp(-24, 25, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] - 24);\n                }\n\n                let sum: number = 0.0;\n                for (let i: number = 0; i < instrument.customChipWave.length; i++) {\n                    sum += instrument.customChipWave[i];\n                }\n                const average: number = sum / instrument.customChipWave.length;\n\n                // Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\n                let cumulative: number = 0;\n                let wavePrev: number = 0;\n                for (let i: number = 0; i < instrument.customChipWave.length; i++) {\n                    cumulative += wavePrev;\n                    wavePrev = instrument.customChipWave[i] - average;\n                    instrument.customChipWaveIntegral[i] = cumulative;\n                }\n\n                // 65th, last sample is for anti-aliasing\n                instrument.customChipWaveIntegral[64] = 0.0;\n\n            } break;\n            case SongTagCode.limiterSettings: {\n                let nextValue: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\n                // Check if limiter settings are used... if not, restore to default\n                if (nextValue == 0x3f) {\n                    this.restoreLimiterDefaults();\n                }\n                else {\n                    // Limiter is used, grab values\n                    this.compressionRatio = (nextValue < 10 ? nextValue / 10 : (1 + (nextValue - 10) / 60));\n                    nextValue = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    this.limitRatio = (nextValue < 10 ? nextValue / 10 : (nextValue - 9));\n                    this.limitDecay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    this.limitRise = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 250.0) + 2000.0;\n                    this.compressionThreshold = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 20.0;\n                    this.limitThreshold = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 20.0;\n                    this.masterGain = ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 50.0;\n                }\n            } break;\n            case SongTagCode.channelNames: {\n                for (let channel: number = 0; channel < this.getChannelCount(); channel++) {\n                    // Length of channel name string. Due to some crazy Unicode characters this needs to be 2 bytes...\n                    var channelNameLength;\n                    if (beforeFour && !fromGoldBox && !fromUltraBox && !fromSlarmoosBox)\n                        channelNameLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)]\n                    else\n                        channelNameLength = ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    this.channels[channel].name = decodeURIComponent(compressed.substring(charIndex, charIndex + channelNameLength));\n\n                    charIndex += channelNameLength;\n\n                    if (fromTheepBox) this.channels[channel].color = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                }\n            } break;\n            case SongTagCode.algorithm: {\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                if (instrument.type == InstrumentType.fm) {\n                    instrument.algorithm = clamp(0, Config.algorithms.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                }\n                else {\n                    instrument.algorithm6Op = clamp(0, Config.algorithms6Op.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    instrument.customAlgorithm.fromPreset(instrument.algorithm6Op);\n                    if (compressed.charCodeAt(charIndex) == SongTagCode.chord) {\n                        let carrierCountTemp = clamp(1, Config.operatorCount + 2 + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex + 1)]);\n                        charIndex++\n                        let tempModArray: number[][] = [];\n                        if (compressed.charCodeAt(charIndex + 1) == SongTagCode.effects) {\n                            charIndex++\n                            let j: number = 0;\n                            charIndex++\n                            while (compressed.charCodeAt(charIndex) != SongTagCode.effects) {\n                                tempModArray[j] = [];\n                                let o: number = 0;\n                                while (compressed.charCodeAt(charIndex) != SongTagCode.operatorWaves) {\n                                    tempModArray[j][o] = clamp(1, Config.operatorCount + 3, base64CharCodeToInt[compressed.charCodeAt(charIndex)]);\n                                    o++\n                                    charIndex++\n                                }\n                                j++;\n                                charIndex++\n                            }\n                            instrument.customAlgorithm.set(carrierCountTemp, tempModArray);\n                            charIndex++; //????\n                        }\n                    }\n                }\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\n                    // The algorithm determines the carrier count, which affects how legacy settings are imported.\n                    const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                }\n            } break;\n            case SongTagCode.supersaw: {\n                if (fromGoldBox && !beforeFour && beforeSix) {\n                    //is it more useful to save base64 characters or url length?\n                    const chipWaveForCompat = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    if ((chipWaveForCompat + 62) > 85) {\n                        if (document.URL.substring(document.URL.length - 13).toLowerCase() != \"legacysamples\") {\n                            if (!willLoadLegacySamplesForOldSongs) {\n                                willLoadLegacySamplesForOldSongs = true;\n                                Config.willReloadForCustomSamples = true;\n                                EditorConfig.customSamples = [\"legacySamples\"];\n                                loadBuiltInSamples(0);\n                            }\n                        }\n                    }\n\n                    if ((chipWaveForCompat + 62) > 78) {\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveForCompat + 63);\n                    }\n                    else if ((chipWaveForCompat + 62) > 67) {\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveForCompat + 61);\n                    }\n                    else if ((chipWaveForCompat + 62) == 67) {\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = 40;\n                    }\n                    else {\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveForCompat + 62);\n                    }\n                } else {\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    instrument.supersawDynamism = clamp(0, Config.supersawDynamismMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    instrument.supersawSpread = clamp(0, Config.supersawSpreadMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    instrument.supersawShape = clamp(0, Config.supersawShapeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                }\n            } break;\n            case SongTagCode.feedbackType: {\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                if (instrument.type == InstrumentType.fm) {\n                    instrument.feedbackType = clamp(0, Config.feedbacks.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                }\n                else {\n                    instrument.feedbackType6Op = clamp(0, Config.feedbacks6Op.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    instrument.customFeedbackType.fromPreset(instrument.feedbackType6Op);\n                    let tempModArray: number[][] = [];\n                    if (compressed.charCodeAt(charIndex) == SongTagCode.effects) {\n                        let j: number = 0;\n                        charIndex++\n                        while (compressed.charCodeAt(charIndex) != SongTagCode.effects) {\n                            tempModArray[j] = [];\n                            let o: number = 0;\n                            while (compressed.charCodeAt(charIndex) != SongTagCode.operatorWaves) {\n                                tempModArray[j][o] = clamp(1, Config.operatorCount + 2, base64CharCodeToInt[compressed.charCodeAt(charIndex)]);\n                                o++\n                                charIndex++\n                            }\n                            j++;\n                            charIndex++\n                        }\n                        instrument.customFeedbackType.set(tempModArray);\n                        charIndex++; //???? weirdly needs to skip the end character or it'll use that next loop instead of like just moving to the next one itself\n                    }\n                }\n\n            } break;\n            case SongTagCode.feedbackAmplitude: {\n                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].feedbackAmplitude = clamp(0, Config.operatorAmplitudeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n            } break;\n            case SongTagCode.feedbackEnvelope: {\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\n                    const pregoldToEnvelope: number[] = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n\n                    let aa: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    if ((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox && !fromSlarmoosBox)) aa = pregoldToEnvelope[aa];\n                    legacySettings.feedbackEnvelope = Song._envelopeFromLegacyIndex(base64CharCodeToInt[aa]);\n                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                } else {\n                    // Do nothing? This song tag code is deprecated for now.\n                }\n            } break;\n            case SongTagCode.operatorFrequencies: {\n                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                if (beforeThree && fromGoldBox) {\n                    const freqToGold3 = [4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 18, 20, 22, 24, 2, 1, 9, 17, 19, 21, 23, 0, 3];\n\n                    for (let o = 0; o < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); o++) {\n                        instrument.operators[o].frequency = freqToGold3[clamp(0, freqToGold3.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                    }\n                }\n                else if (!fromGoldBox && !fromUltraBox && !fromSlarmoosBox) {\n                    const freqToUltraBox = [4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 18, 20, 23, 27, 2, 1, 9, 17, 19, 21, 23, 0, 3];\n\n                    for (let o = 0; o < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); o++) {\n                        instrument.operators[o].frequency = freqToUltraBox[clamp(0, freqToUltraBox.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                    }\n\n                }\n                else {\n                    for (let o = 0; o < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); o++) {\n                        instrument.operators[o].frequency = clamp(0, Config.operatorFrequencies.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    }\n                }\n            } break;\n            case SongTagCode.operatorAmplitudes: {\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                for (let o: number = 0; o < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); o++) {\n                    instrument.operators[o].amplitude = clamp(0, Config.operatorAmplitudeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                }\n            } break;\n            case SongTagCode.envelopes: {\n                const pregoldToEnvelope: number[] = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];\n                const jummToUltraEnvelope: number[] = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 58, 59, 60];\n                const slarURL3toURL4Envelope: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14];\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\n                    const legacySettings: LegacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n                    legacySettings.operatorEnvelopes = [];\n                    for (let o: number = 0; o < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); o++) {\n                        let aa: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        if ((beforeTwo && fromGoldBox) || (fromBeepBox)) aa = pregoldToEnvelope[aa];\n                        if (fromJummBox) aa = jummToUltraEnvelope[aa];\n                        legacySettings.operatorEnvelopes[o] = Song._envelopeFromLegacyIndex(aa);\n                    }\n                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                } else {\n                    const envelopeCount: number = clamp(0, Config.maxEnvelopeCount + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    // JB v6 adds some envelope options here in the sequence.\n                    let envelopeDiscrete: boolean = false;\n                    if ((fromJummBox && !beforeSix) || (fromUltraBox && !beforeFive) || (fromSlarmoosBox)) {\n                        instrument.envelopeSpeed = clamp(0, Config.modulators.dictionary[\"envelope speed\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        if(!fromSlarmoosBox || beforeFive) {\n                            envelopeDiscrete = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) ? true : false;\n                        }\n                    }\n                    for (let i: number = 0; i < envelopeCount; i++) {\n                        const target: number = clamp(0, Config.instrumentAutomationTargets.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        let index: number = 0;\n                        const maxCount: number = Config.instrumentAutomationTargets[target].maxCount;\n                        if (maxCount > 1) {\n                            index = clamp(0, maxCount, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                        let aa: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        if ((beforeTwo && fromGoldBox) || (fromBeepBox)) aa = pregoldToEnvelope[aa];\n                        if (fromJummBox) aa = jummToUltraEnvelope[aa];\n                        if (!fromSlarmoosBox && aa >= 2) aa++; //2 for pitch\n                        let updatedEnvelopes: boolean = false;\n                        let perEnvelopeSpeed: number = 1;\n                        if (!fromSlarmoosBox || beforeThree) {\n                            updatedEnvelopes = true;\n                            perEnvelopeSpeed = Config.envelopes[aa].speed;\n                            aa = Config.envelopes[aa].type; //update envelopes\n                        } else if (beforeFour && aa >= 3) aa++; //3 for random\n                        let isTremolo2: boolean = false;\n                        if ((fromSlarmoosBox && !beforeThree && beforeFour) || updatedEnvelopes) { //remove tremolo2\n                            if(aa == 9) isTremolo2 = true;\n                            aa = slarURL3toURL4Envelope[aa];\n                        }\n                        const envelope: number = clamp(0, ((fromSlarmoosBox && !beforeThree || updatedEnvelopes) ? Config.newEnvelopes.length : Config.envelopes.length), aa);\n                        let pitchEnvelopeStart: number = 0;\n                        let pitchEnvelopeEnd: number = Config.maxPitch;\n                        let envelopeInverse: boolean = false;\n                        perEnvelopeSpeed = (fromSlarmoosBox && !beforeThree) ? Config.newEnvelopes[envelope].speed : perEnvelopeSpeed;\n                        let perEnvelopeLowerBound: number = 0;\n                        let perEnvelopeUpperBound: number = 1;\n                        let steps: number = 2;\n                        let seed: number = 2;\n                        let waveform: number = LFOEnvelopeTypes.sine;\n                        //pull out unique envelope setting values first, then general ones\n                        if (fromSlarmoosBox && !beforeFour) {\n                            if (Config.newEnvelopes[envelope].name == \"lfo\") {\n                                waveform = clamp(0, LFOEnvelopeTypes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                if (waveform == LFOEnvelopeTypes.steppedSaw || waveform == LFOEnvelopeTypes.steppedTri) {\n                                    steps = clamp(1, Config.randomEnvelopeStepsMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                }\n                            } else if (Config.newEnvelopes[envelope].name == \"random\") {\n                                steps = clamp(1, Config.randomEnvelopeStepsMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                seed = clamp(1, Config.randomEnvelopeSeedMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                waveform = clamp(0, RandomEnvelopeTypes.length,base64CharCodeToInt[compressed.charCodeAt(charIndex++)]); //we use waveform for the random type as well\n                            }\n                        }\n                        if (fromSlarmoosBox && !beforeThree) {\n                            if (Config.newEnvelopes[envelope].name == \"pitch\") {\n                                if (!instrument.isNoiseInstrument) {\n                                    let pitchEnvelopeCompact: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    pitchEnvelopeStart = clamp(0, Config.maxPitch+1, pitchEnvelopeCompact * 64 + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    pitchEnvelopeCompact = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    pitchEnvelopeEnd = clamp(0, Config.maxPitch+1, pitchEnvelopeCompact * 64 + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                } else {\n                                    pitchEnvelopeStart = clamp(0, Config.drumCount, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    pitchEnvelopeEnd = clamp(0, Config.drumCount, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                }\n                            }\n                            let checkboxValues: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            if (fromSlarmoosBox && !beforeFive) {\n                                envelopeDiscrete = (checkboxValues >> 1) == 1 ? true : false;\n                            }\n                            envelopeInverse = (checkboxValues & 1) == 1 ? true : false;\n                            if (Config.newEnvelopes[envelope].name != \"pitch\" && Config.newEnvelopes[envelope].name != \"note size\" && Config.newEnvelopes[envelope].name != \"punch\" && Config.newEnvelopes[envelope].name != \"none\") {\n                                perEnvelopeSpeed = Config.perEnvelopeSpeedIndices[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\n                            }\n                            perEnvelopeLowerBound = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 10;\n                            perEnvelopeUpperBound = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 10;\n                        }\n                        if (!fromSlarmoosBox || beforeFour) { //update tremolo2\n                            if (isTremolo2) {\n                                waveform = LFOEnvelopeTypes.sine;\n                                if (envelopeInverse) {\n                                    perEnvelopeUpperBound = Math.floor((perEnvelopeUpperBound / 2) * 10) / 10;\n                                    perEnvelopeLowerBound = Math.floor((perEnvelopeLowerBound / 2) * 10) / 10;\n                                } else {\n                                    perEnvelopeUpperBound = Math.floor((0.5 + (perEnvelopeUpperBound - perEnvelopeLowerBound) / 2) * 10) / 10;\n                                    perEnvelopeLowerBound = 0.5;\n                                }\n                            }\n                        }\n\n                        instrument.addEnvelope(target, index, envelope, true, pitchEnvelopeStart, pitchEnvelopeEnd, envelopeInverse, perEnvelopeSpeed, perEnvelopeLowerBound, perEnvelopeUpperBound, steps, seed, waveform, envelopeDiscrete);\n                        if (fromSlarmoosBox && beforeThree && !beforeTwo) {\n                            let pitchEnvelopeCompact: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            instrument.envelopes[i].pitchEnvelopeStart = pitchEnvelopeCompact * 64 + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            pitchEnvelopeCompact = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            instrument.envelopes[i].pitchEnvelopeEnd = pitchEnvelopeCompact * 64 + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            instrument.envelopes[i].inverse = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] == 1 ? true : false;\n                        }\n                    }\n\n                    let instrumentPitchEnvelopeStart: number = 0;\n                    let instrumentPitchEnvelopeEnd: number = Config.maxPitch;\n                    let instrumentEnvelopeInverse: boolean = false;\n                    if (fromSlarmoosBox && beforeTwo) {\n                        let pitchEnvelopeCompact: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        instrumentPitchEnvelopeStart = pitchEnvelopeCompact * 64 + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        pitchEnvelopeCompact = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        instrumentPitchEnvelopeEnd = pitchEnvelopeCompact * 64 + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        instrumentEnvelopeInverse = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] === 1 ? true : false;\n                        for (let i: number = 0; i < envelopeCount; i++) {\n                            instrument.envelopes[i].pitchEnvelopeStart = instrumentPitchEnvelopeStart;\n                            instrument.envelopes[i].pitchEnvelopeEnd = instrumentPitchEnvelopeEnd;\n                            instrument.envelopes[i].inverse = Config.envelopes[instrument.envelopes[i].envelope].name == \"pitch\" ? instrumentEnvelopeInverse : false;\n                        }\n                    }\n\n                }\n            } break;\n            case SongTagCode.operatorWaves: {\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n\n                if (beforeThree && fromGoldBox) {\n                    for (let o: number = 0; o < Config.operatorCount; o++) {\n                        const pre3To3g = [0, 1, 3, 2, 2, 2, 4, 5];\n                        const old: number = clamp(0, pre3To3g.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        if (old == 3) {\n                            instrument.operators[o].pulseWidth = 5;\n                        } else if (old == 4) {\n                            instrument.operators[o].pulseWidth = 4;\n                        } else if (old == 5) {\n                            instrument.operators[o].pulseWidth = 6;\n                        }\n                        instrument.operators[o].waveform = pre3To3g[old];\n                    }\n                } else {\n                    for (let o: number = 0; o < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); o++) {\n                        if (fromJummBox) {\n                            const jummToG = [0, 1, 3, 2, 4, 5];\n                            instrument.operators[o].waveform = jummToG[clamp(0, Config.operatorWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                        } else {\n                            instrument.operators[o].waveform = clamp(0, Config.operatorWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                        // Pulse width follows, if it is a pulse width operator wave\n                        if (instrument.operators[o].waveform == 2) {\n                            instrument.operators[o].pulseWidth = clamp(0, Config.pwmOperatorWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                    }\n                }\n\n            } break;\n            case SongTagCode.spectrum: {\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                if (instrument.type == InstrumentType.spectrum) {\n                    const byteCount: number = Math.ceil(Config.spectrumControlPoints * Config.spectrumControlPointBits / 6)\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\n                    for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n                        instrument.spectrumWave.spectrum[i] = bits.read(Config.spectrumControlPointBits);\n                    }\n                    instrument.spectrumWave.markCustomWaveDirty();\n                    charIndex += byteCount;\n                } else if (instrument.type == InstrumentType.drumset) {\n                    const byteCount: number = Math.ceil(Config.drumCount * Config.spectrumControlPoints * Config.spectrumControlPointBits / 6)\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\n                    for (let j: number = 0; j < Config.drumCount; j++) {\n                        for (let i: number = 0; i < Config.spectrumControlPoints; i++) {\n                            instrument.drumsetSpectrumWaves[j].spectrum[i] = bits.read(Config.spectrumControlPointBits);\n                        }\n                        instrument.drumsetSpectrumWaves[j].markCustomWaveDirty();\n                    }\n                    charIndex += byteCount;\n                } else {\n                    throw new Error(\"Unhandled instrument type for spectrum song tag code.\");\n                }\n            } break;\n            case SongTagCode.harmonics: {\n                const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                const byteCount: number = Math.ceil(Config.harmonicsControlPoints * Config.harmonicsControlPointBits / 6);\n                const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\n                for (let i: number = 0; i < Config.harmonicsControlPoints; i++) {\n                    instrument.harmonicsWave.harmonics[i] = bits.read(Config.harmonicsControlPointBits);\n                }\n                instrument.harmonicsWave.markCustomWaveDirty();\n                charIndex += byteCount;\n            } break;\n            case SongTagCode.aliases: {\n                if ((fromJummBox && beforeFive) || (fromGoldBox && beforeFour)) {\n                    const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    instrument.aliases = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) ? true : false;\n                    if (instrument.aliases) {\n                        let newEffect: Effect = instrument.addEffect(EffectType.distortion);\n                        newEffect.distortion = 0;\n                    }\n                } else {\n                    if (fromUltraBox || fromSlarmoosBox) {\n                        const instrument: Instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        instrument.decimalOffset = clamp(0, 50 + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    }\n                }\n            }\n            break;\n            case SongTagCode.bars: {\n                let subStringLength: number;\n                if (beforeThree && fromBeepBox) {\n                    const channelIndex: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    const barCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    subStringLength = Math.ceil(barCount * 0.5);\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\n                    for (let i: number = 0; i < barCount; i++) {\n                        this.channels[channelIndex].bars[i] = bits.read(3) + 1;\n                    }\n                } else if (beforeFive && fromBeepBox) {\n                    let neededBits: number = 0;\n                    while ((1 << neededBits) < this.patternsPerChannel) neededBits++;\n                    subStringLength = Math.ceil(this.getChannelCount() * this.barCount * neededBits / 6);\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                        for (let i: number = 0; i < this.barCount; i++) {\n                            this.channels[channelIndex].bars[i] = bits.read(neededBits) + 1;\n                        }\n                    }\n                } else {\n                    let neededBits: number = 0;\n                    while ((1 << neededBits) < this.patternsPerChannel + 1) neededBits++;\n                    subStringLength = Math.ceil(this.getChannelCount() * this.barCount * neededBits / 6);\n                    const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\n                    for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                        for (let i: number = 0; i < this.barCount; i++) {\n                            this.channels[channelIndex].bars[i] = bits.read(neededBits);\n                        }\n                    }\n                }\n                charIndex += subStringLength;\n            } break;\n            case SongTagCode.patterns: {\n                let bitStringLength: number = 0;\n                let channelIndex: number;\n                let largerChords: boolean = !((beforeFour && fromJummBox) || fromBeepBox);\n                let recentPitchBitLength: number = (largerChords ? 4 : 3);\n                let recentPitchLength: number = (largerChords ? 16 : 8);\n                if (beforeThree && fromBeepBox) {\n                    channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\n                    // The old format used the next character to represent the number of patterns in the channel, which is usually eight, the default.\n                    charIndex++; //let patternCount: number = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\n                    bitStringLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    bitStringLength = bitStringLength << 6;\n                    bitStringLength += base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                } else {\n                    channelIndex = 0;\n                    let bitStringLengthLength: number = validateRange(1, 4, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    while (bitStringLengthLength > 0) {\n                        bitStringLength = bitStringLength << 6;\n                        bitStringLength += base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        bitStringLengthLength--;\n                    }\n                }\n\n                const bits: BitFieldReader = new BitFieldReader(compressed, charIndex, charIndex + bitStringLength);\n                charIndex += bitStringLength;\n\n                const bitsPerNoteSize: number = Song.getNeededBits(Config.noteSizeMax);\n                let songReverbChannel: number = -1;\n                let songReverbInstrument: number = -1;\n                let songReverbIndex: number = -1;\n\n                // @TODO: Include GoldBox here.\n                const shouldCorrectTempoMods: boolean = fromJummBox;\n                const jummboxTempoMin: number = 30;\n\n                while (true) {\n                    const channel: Channel = this.channels[channelIndex];\n                    const isNoiseChannel: boolean = this.getChannelIsNoise(channelIndex);\n                    const isModChannel: boolean = this.getChannelIsMod(channelIndex);\n\n                    const maxInstrumentsPerPattern: number = this.getMaxInstrumentsPerPattern(channelIndex);\n                    const neededInstrumentCountBits: number = Song.getNeededBits(maxInstrumentsPerPattern - Config.instrumentCountMin);\n\n                    const neededInstrumentIndexBits: number = Song.getNeededBits(channel.instruments.length - 1);\n\n                    // Some info about modulator settings immediately follows in mod channels.\n                    if (isModChannel) {\n                        let jumfive: boolean = (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)\n\n                        // 2 more indices for 'all' and 'active'\n                        const neededModInstrumentIndexBits: number = (jumfive) ? neededInstrumentIndexBits : Song.getNeededBits(this.getMaxInstrumentsPerChannel() + 2);\n\n                        for (let instrumentIndex: number = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n\n                            let instrument: Instrument = channel.instruments[instrumentIndex];\n\n                            for (let mod: number = 0; mod < Config.modCount; mod++) {\n                                // Still using legacy \"mod status\" format, but doing it manually as it's only used in the URL now.\n                                // 0 - For pitch/noise\n                                // 1 - (used to be For noise, not needed)\n                                // 2 - For song\n                                // 3 - None\n                                let status: number = bits.read(2);\n\n                                switch (status) {\n                                    case 0: // Pitch\n                                        let modChannelLength: number = bits.read(8);\n                                        for (let i: number = 0; i < modChannelLength; i++) instrument.modChannels[mod][i] = clamp(0, this.pitchChannelCount + this.noiseChannelCount + 1, bits.read(8));\n                                        let modInstrumentLength: number = bits.read(8);\n                                        for (let i: number = 0; i < modInstrumentLength; i++) instrument.modInstruments[mod][i] = clamp(0, this.channels[instrument.modChannels[mod][i]].instruments.length + 2, bits.read(neededModInstrumentIndexBits));\n                                        break;\n                                    case 1: // Noise\n                                        // Getting a status of 1 means this is legacy mod info. Need to add pitch channel count, as it used to just store noise channel index and not overall channel index\n                                        instrument.modChannels[mod][0] = this.pitchChannelCount + clamp(0, this.noiseChannelCount + 1, bits.read(8));\n                                        instrument.modInstruments[mod][0] = clamp(0, this.channels[instrument.modChannels[mod][0]].instruments.length + 2, bits.read(neededInstrumentIndexBits));\n                                        break;\n                                    case 2: // For song\n                                        instrument.modChannels[mod][0] = -1;\n                                        break;\n                                    case 3: // None\n                                        instrument.modChannels[mod][0] = -2;\n                                        break;\n                                }\n\n                                // Mod setting is only used if the status isn't \"none\".\n                                if (status != 3) {\n                                    instrument.modulators[mod] = bits.read(6);\n                                }\n\n                                if (!jumfive && (Config.modulators[instrument.modulators[mod]].name == \"post eq\" || Config.modulators[instrument.modulators[mod]].name == \"pre eq\" || Config.modulators[instrument.modulators[mod]].name == \"song eq\")) {\n                                    instrument.modFilterTypes[mod] = bits.read(6);\n                                }\n\n                                if (Config.modulators[instrument.modulators[mod]].name == \"individual envelope speed\" ||\n                                    Config.modulators[instrument.modulators[mod]].name == \"reset envelope\" ||\n                                    Config.modulators[instrument.modulators[mod]].name == \"individual envelope lower bound\" ||\n                                    Config.modulators[instrument.modulators[mod]].name == \"individual envelope upper bound\"\n                                ) {\n                                    instrument.modEnvelopeNumbers[mod] = bits.read(6);\n                                }\n\n                                if (jumfive && instrument.modChannels[mod][0] >= 0) {\n                                    let forNoteFilter: boolean = this.channels[instrument.modChannels[mod][0]].instruments[instrument.modInstruments[mod][0]].effectsIncludeType(EffectType.eqFilter);\n\n                                    // For legacy filter cut/peak, need to denote since scaling must be applied\n                                    if (instrument.modulators[mod] == 7) {\n                                        // Legacy filter cut index\n                                        // Check if there is no filter dot on prospective filter. If so, add a low pass at max possible freq.\n\n                                        if (forNoteFilter) {\n                                            instrument.modulators[mod] = Config.modulators.dictionary[\"note filt cut\"].index;\n                                        }\n                                        else {\n                                            instrument.modulators[mod] = Config.modulators.dictionary[\"eq filt cut\"].index;\n                                        }\n\n                                        instrument.modFilterTypes[mod] = 1; // Dot 1 X\n\n                                    }\n                                    else if (instrument.modulators[mod] == 8) {\n                                        // Legacy filter peak index\n                                        if (forNoteFilter) {\n                                            instrument.modulators[mod] = Config.modulators.dictionary[\"note filt peak\"].index;\n                                        }\n                                        else {\n                                            instrument.modulators[mod] = Config.modulators.dictionary[\"eq filt peak\"].index;\n                                        }\n\n                                        instrument.modFilterTypes[mod] = 2; // Dot 1 Y\n                                    }\n                                }\n                                else if (jumfive) {\n                                    // Check for song reverb mod, which must be handled differently now that it is a multiplier\n                                    if (instrument.modulators[mod] == Config.modulators.dictionary[\"song reverb\"].index) {\n                                        songReverbChannel = channelIndex;\n                                        songReverbInstrument = instrumentIndex;\n                                        songReverbIndex = mod;\n                                    }\n                                }\n\n                                // Based on setting, enable some effects for the modulated instrument. This isn't always set, say if the instrument's pan was right in the center.\n                                // Only used on import of old songs, because sometimes an invalid effect can be set in a mod in the new version that is actually unused. In that case,\n                                // keeping the mod invalid is better since it preserves the state.\n                                if (jumfive && Config.modulators[instrument.modulators[mod]].associatedEffect != EffectType.length) {\n                                    this.channels[instrument.modChannels[mod][0]].instruments[instrument.modInstruments[mod][0]].addEffect(Config.modulators[instrument.modulators[mod]].associatedEffect);\n                                }\n                            }\n                        }\n                    }\n\n                    // Scalar applied to detune mods since its granularity was upped. Could be repurposed later if any other granularity changes occur.\n                    const detuneScaleNotes: number[][] = [];\n                    for (let j: number = 0; j < channel.instruments.length; j++) {\n                        detuneScaleNotes[j] = [];\n                        for (let i: number = 0; i < Config.modCount; i++) {\n                            detuneScaleNotes[j][Config.modCount - 1 - i] = 1 + 3 * +(((beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) && isModChannel && (channel.instruments[j].modulators[i] == Config.modulators.dictionary[\"detune\"].index));\n                        }\n                    }\n                    const octaveOffset: number = (isNoiseChannel || isModChannel) ? 0 : channel.octave * 12;\n                    let lastPitch: number = ((isNoiseChannel || isModChannel) ? 4 : octaveOffset);\n                    const recentPitches: number[] = isModChannel ? [0, 1, 2, 3, 4, 5] : (isNoiseChannel ? [4, 6, 7, 2, 3, 8, 0, 10] : [0, 7, 12, 19, 24, -5, -12]);\n                    const recentShapes: any[] = [];\n                    for (let i: number = 0; i < recentPitches.length; i++) {\n                        recentPitches[i] += octaveOffset;\n                    }\n                    for (let i: number = 0; i < this.patternsPerChannel; i++) {\n                        const newPattern: Pattern = channel.patterns[i];\n\n                        if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\n                            newPattern.instruments[0] = validateRange(0, channel.instruments.length - 1, bits.read(neededInstrumentIndexBits));\n                            newPattern.instruments.length = 1;\n                        } else {\n                            if (this.patternInstruments) {\n                                const instrumentCount: number = validateRange(Config.instrumentCountMin, maxInstrumentsPerPattern, bits.read(neededInstrumentCountBits) + Config.instrumentCountMin);\n                                for (let j: number = 0; j < instrumentCount; j++) {\n                                    newPattern.instruments[j] = validateRange(0, channel.instruments.length - 1 + +(isModChannel) * 2, bits.read(neededInstrumentIndexBits));\n                                }\n                                newPattern.instruments.length = instrumentCount;\n                            } else {\n                                newPattern.instruments[0] = 0;\n                                newPattern.instruments.length = Config.instrumentCountMin;\n                            }\n                        }\n\n                        if (!(fromBeepBox && beforeThree) && bits.read(1) == 0) {\n                            newPattern.notes.length = 0;\n                            continue;\n                        }\n\n                        let curPart: number = 0;\n                        const newNotes: Note[] = newPattern.notes;\n                        let noteCount: number = 0;\n                        // Due to arbitrary note positioning, mod channels don't end the count until curPart actually exceeds the max\n                        while (curPart < this.beatsPerBar * Config.partsPerBeat + (+isModChannel)) {\n\n                            const useOldShape: boolean = bits.read(1) == 1;\n                            let newNote: boolean = false;\n                            let shapeIndex: number = 0;\n                            if (useOldShape) {\n                                shapeIndex = validateRange(0, recentShapes.length - 1, bits.readLongTail(0, 0));\n                            } else {\n                                newNote = bits.read(1) == 1;\n                            }\n\n                            if (!useOldShape && !newNote) {\n                                // For mod channels, check if you need to move backward too (notes can appear in any order and offset from each other).\n                                if (isModChannel) {\n                                    const isBackwards: boolean = bits.read(1) == 1;\n                                    const restLength: number = bits.readPartDuration();\n                                    if (isBackwards) {\n                                        curPart -= restLength;\n                                    }\n                                    else {\n                                        curPart += restLength;\n                                    }\n                                } else {\n                                    const restLength: number = (beforeSeven && fromBeepBox)\n                                    ? bits.readLegacyPartDuration() * Config.partsPerBeat / Config.rhythms[this.rhythm].stepsPerBeat\n                                    : bits.readPartDuration();\n                                    curPart += restLength;\n\n                                }\n                            } else {\n                                let shape: any;\n                                if (useOldShape) {\n                                    shape = recentShapes[shapeIndex];\n                                    recentShapes.splice(shapeIndex, 1);\n                                } else {\n                                    shape = {};\n\n                                    if (!largerChords) {\n                                        // Old format: X 1's followed by a 0 => X+1 pitches, up to 4\n                                        shape.pitchCount = 1;\n                                        while (shape.pitchCount < 4 && bits.read(1) == 1) shape.pitchCount++;\n                                    }\n                                    else {\n                                        // New format is:\n                                        //      0: 1 pitch\n                                        // 1[XXX]: 3 bits of binary signifying 2+ pitches\n                                        if (bits.read(1) == 1) {\n                                            shape.pitchCount = bits.read(3) + 2;\n                                        }\n                                        else {\n                                            shape.pitchCount = 1;\n                                        }\n                                    }\n\n                                    if (fromTheepBox) {\n                                        if (bits.read(1) == 1) {\n                                            shape.startOffset = bits.read(31);\n                                        }\n                                    } else {\n                                        shape.startOffset = 0;\n                                    }\n\n                                    shape.pinCount = bits.readPinCount();\n                                    if (fromBeepBox) {\n                                        shape.initialSize = bits.read(2) * 2;\n                                    } else if (!isModChannel) {\n                                        shape.initialSize = bits.read(bitsPerNoteSize);\n                                    } else {\n                                        shape.initialSize = bits.read(11);\n                                    }\n\n                                    shape.pins = [];\n                                    shape.length = 0;\n                                    shape.bendCount = 0;\n                                    for (let j: number = 0; j < shape.pinCount; j++) {\n                                        let pinObj: any = {};\n                                        pinObj.pitchBend = bits.read(1) == 1;\n                                        if (pinObj.pitchBend) shape.bendCount++;\n                                        shape.length += (beforeSeven && fromBeepBox)\n                                        ? bits.readLegacyPartDuration() * Config.partsPerBeat / Config.rhythms[this.rhythm].stepsPerBeat\n                                        : bits.readPartDuration();\n                                        pinObj.time = shape.length;\n                                        if (fromBeepBox) {\n                                            pinObj.size = bits.read(2) * 2;\n                                        } else if (!isModChannel) {\n                                            pinObj.size = bits.read(bitsPerNoteSize);\n                                        }\n                                        else {\n                                            pinObj.size = bits.read(11);\n                                        }\n                                        shape.pins.push(pinObj);\n                                    }\n                                }\n                                recentShapes.unshift(shape);\n                                if (recentShapes.length > 10) recentShapes.pop(); // TODO: Use Deque?\n\n                                let note: Note;\n                                if (newNotes.length <= noteCount) {\n                                    note = new Note(0, curPart, curPart + shape.length, shape.initialSize, false, shape.startOffset);\n                                    newNotes[noteCount++] = note;\n                                } else {\n                                    note = newNotes[noteCount++];\n                                    note.start = curPart;\n                                    note.end = curPart + shape.length;\n                                    note.pins[0].size = shape.initialSize;\n                                }\n\n                                let pitch: number;\n                                let pitchCount: number = 0;\n                                const pitchBends: number[] = []; // TODO: allocate this array only once! keep separate length and iterator index. Use Deque?\n                                for (let j: number = 0; j < shape.pitchCount + shape.bendCount; j++) {\n                                    const useOldPitch: boolean = bits.read(1) == 1;\n                                    if (!useOldPitch) {\n                                        const interval: number = bits.readPitchInterval();\n                                        pitch = lastPitch;\n                                        let intervalIter: number = interval;\n                                        while (intervalIter > 0) {\n                                            pitch++;\n                                            while (recentPitches.indexOf(pitch) != -1) pitch++;\n                                            intervalIter--;\n                                        }\n                                        while (intervalIter < 0) {\n                                            pitch--;\n                                            while (recentPitches.indexOf(pitch) != -1) pitch--;\n                                            intervalIter++;\n                                        }\n                                    } else {\n                                        const pitchIndex: number = validateRange(0, recentPitches.length - 1, bits.read(recentPitchBitLength));\n                                        pitch = recentPitches[pitchIndex];\n                                        recentPitches.splice(pitchIndex, 1);\n                                    }\n\n                                    recentPitches.unshift(pitch);\n                                    if (recentPitches.length > recentPitchLength) recentPitches.pop();\n\n                                    if (j < shape.pitchCount) {\n                                        note.pitches[pitchCount++] = pitch;\n                                    } else {\n                                        pitchBends.push(pitch);\n                                    }\n\n                                    if (j == shape.pitchCount - 1) {\n                                        lastPitch = note.pitches[0];\n                                    } else {\n                                        lastPitch = pitch;\n                                    }\n                                }\n                                note.pitches.length = pitchCount;\n                                pitchBends.unshift(note.pitches[0]); // TODO: Use Deque?\n                                const noteIsForTempoMod: boolean = isModChannel && channel.instruments[newPattern.instruments[0]].modulators[Config.modCount - 1 - note.pitches[0]] === Config.modulators.dictionary[\"tempo\"].index;\n                                let tempoOffset: number = 0;\n                                if (shouldCorrectTempoMods && noteIsForTempoMod) {\n                                    tempoOffset = jummboxTempoMin - Config.tempoMin; // convertRealFactor will add back Config.tempoMin as necessary\n                                }\n                                if (isModChannel) {\n                                    note.pins[0].size += tempoOffset;\n                                    note.pins[0].size *= detuneScaleNotes[newPattern.instruments[0]][note.pitches[0]];\n                                }\n                                let pinCount: number = 1;\n                                for (const pinObj of shape.pins) {\n                                    if (pinObj.pitchBend) pitchBends.shift();\n\n                                    const interval: number = pitchBends[0] - note.pitches[0];\n                                    if (note.pins.length <= pinCount) {\n                                        if (isModChannel) {\n                                            note.pins[pinCount++] = makeNotePin(interval, pinObj.time, pinObj.size * detuneScaleNotes[newPattern.instruments[0]][note.pitches[0]] + tempoOffset);\n                                        } else {\n                                            note.pins[pinCount++] = makeNotePin(interval, pinObj.time, pinObj.size);\n                                        }\n                                    } else {\n                                        const pin: NotePin = note.pins[pinCount++];\n                                        pin.interval = interval;\n                                        pin.time = pinObj.time;\n                                        if (isModChannel) {\n                                            pin.size = pinObj.size * detuneScaleNotes[newPattern.instruments[0]][note.pitches[0]] + tempoOffset;\n                                        } else {\n                                            pin.size = pinObj.size;\n                                        }\n                                    }\n                                }\n                                note.pins.length = pinCount;\n\n                                if (note.start == 0) {\n                                    if (!((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox))) {\n                                        note.continuesLastPattern = (bits.read(1) == 1);\n                                    } else {\n                                        if ((beforeFour && !fromUltraBox && !fromSlarmoosBox) || fromBeepBox) {\n                                            note.continuesLastPattern = false;\n                                        } else {\n                                            note.continuesLastPattern = channel.instruments[newPattern.instruments[0]].legacyTieOver;\n                                        }\n                                    }\n                                }\n\n                                curPart = validateRange(0, this.beatsPerBar * Config.partsPerBeat, note.end);\n                            }\n                        }\n                        newNotes.length = noteCount;\n                    }\n\n                    if (beforeThree && fromBeepBox) {\n                        break;\n                    } else {\n                        channelIndex++;\n                        if (channelIndex >= this.getChannelCount()) break;\n                    }\n                } // while (true)\n\n                // Correction for old JB songs that had song reverb mods. Change all instruments using reverb to max reverb\n                if (((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) && songReverbIndex >= 0) {\n                    for (let channelIndex: number = 0; channelIndex < this.channels.length; channelIndex++) {\n                        for (let instrumentIndex: number = 0; instrumentIndex < this.channels[channelIndex].instruments.length; instrumentIndex++) {\n                            const instrument: Instrument = this.channels[channelIndex].instruments[instrumentIndex];\n                            if (instrument.effectsIncludeType(EffectType.reverb)) {\n                                //instrument.reverb = Config.reverbRange - 1;\n                            }\n                            // Set song reverb via mod to the old setting at song start.\n                            if (songReverbChannel == channelIndex && songReverbInstrument == instrumentIndex) {\n                                const patternIndex: number = this.channels[channelIndex].bars[0];\n                                if (patternIndex > 0) {\n                                    // Doesn't work if 1st pattern isn't using the right ins for song reverb...\n                                    // Add note to start of pattern\n                                    const pattern: Pattern = this.channels[channelIndex].patterns[patternIndex - 1];\n                                    let lowestPart: number = 6;\n                                    for (const note of pattern.notes) {\n                                        if (note.pitches[0] == Config.modCount - 1 - songReverbIndex) {\n                                            lowestPart = Math.min(lowestPart, note.start);\n                                        }\n                                    }\n\n                                    if (lowestPart > 0) {\n                                        pattern.notes.push(new Note(Config.modCount - 1 - songReverbIndex, 0, lowestPart, legacyGlobalReverb));\n                                    }\n                                }\n                                else {\n                                    // Add pattern\n                                    if (this.channels[channelIndex].patterns.length < Config.barCountMax) {\n                                        const pattern: Pattern = new Pattern();\n                                        this.channels[channelIndex].patterns.push(pattern);\n                                        this.channels[channelIndex].bars[0] = this.channels[channelIndex].patterns.length;\n                                        if (this.channels[channelIndex].patterns.length > this.patternsPerChannel) {\n                                            for (let chn: number = 0; chn < this.channels.length; chn++) {\n                                                if (this.channels[chn].patterns.length <= this.patternsPerChannel) {\n                                                    this.channels[chn].patterns.push(new Pattern());\n                                                }\n                                            }\n                                            this.patternsPerChannel++;\n                                        }\n                                        pattern.instruments.length = 1;\n                                        pattern.instruments[0] = songReverbInstrument;\n                                        pattern.notes.length = 0;\n                                        pattern.notes.push(new Note(Config.modCount - 1 - songReverbIndex, 0, 6, legacyGlobalReverb));\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } break;\n            default: {\n                throw new Error(\"Unrecognized song tag code \" + String.fromCharCode(command) + \" at index \" + (charIndex - 1) + \" \" + compressed.substring(/*charIndex - 2*/0, charIndex));\n            } break;\n        }\n\n        if (Config.willReloadForCustomSamples) {\n            window.location.hash = this.toBase64String();\n            setTimeout(() => { location.reload(); }, 50);\n        }\n    }\n\n    private static _isProperUrl(string: string): boolean {\n        try {\n            if (OFFLINE) {\n                return Boolean(string);\n            } else {\n                return Boolean(new URL(string));\n            }\n        }\n        catch (x) {\n            return false;\n        }\n    }\n\n    // @TODO: Share more of this code with AddSamplesPrompt.\n    private static _parseAndConfigureCustomSample(url: string, customSampleUrls: string[], customSamplePresets: Preset[], sampleLoadingState: SampleLoadingState, parseOldSyntax: boolean): boolean {\n        const defaultIndex: number = 0;\n        const defaultIntegratedSamplesL: Float32Array = Config.chipWaves[defaultIndex].samples;\n        const defaultIntegratedSamplesR: Float32Array = Config.chipWaves[defaultIndex].samplesR || Config.chipWaves[defaultIndex].samples;\n        const defaultSamplesL: Float32Array = Config.rawRawChipWaves[defaultIndex].samples;\n        const defaultSamplesR: Float32Array = Config.rawRawChipWaves[defaultIndex].samplesR || Config.chipWaves[defaultIndex].samples;\n\n        const customSampleUrlIndex: number = customSampleUrls.length;\n        customSampleUrls.push(url);\n        // This depends on `Config.chipWaves` being the same\n        // length as `Config.rawRawChipWaves`.\n        const chipWaveIndex: number = Config.chipWaves.length;\n\n        let urlSliced: string = url;\n\n        let customSampleRate: number = 44100;\n        let isCustomPercussive: boolean = false;\n        let customRootKey: number = 60;\n        let presetIsUsingAdvancedLoopControls: boolean = false;\n        let presetChipWaveLoopStart: number | null = null;\n        let presetChipWaveLoopEnd: number | null = null;\n        let presetChipWaveStartOffset: number | null = null;\n        let presetChipWaveLoopMode: number | null = null;\n        let presetChipWavePlayBackwards: boolean = false;\n        let presetChipWaveInStereo: boolean = false;\n\n        let parsedSampleOptions: boolean = false;\n        let optionsStartIndex: number = url.indexOf(\"!\");\n        let optionsEndIndex: number = -1;\n        if (optionsStartIndex === 0) {\n            optionsEndIndex = url.indexOf(\"!\", optionsStartIndex + 1);\n            if (optionsEndIndex !== -1) {\n                const rawOptions: string[] = url.slice(optionsStartIndex + 1, optionsEndIndex).split(\",\");\n                for (const rawOption of rawOptions) {\n                    const optionCode: string = rawOption.charAt(0);\n                    const optionData: string = rawOption.slice(1, rawOption.length);\n                    if (optionCode === \"s\") {\n                        customSampleRate = clamp(8000, 96000 + 1, parseFloatWithDefault(optionData, 44100));\n                    } else if (optionCode === \"r\") {\n                        customRootKey = parseFloatWithDefault(optionData, 60);\n                    } else if (optionCode === \"p\") {\n                        isCustomPercussive = true;\n                    } else if (optionCode === \"a\") {\n                        presetChipWaveLoopStart = parseIntWithDefault(optionData, null);\n                        if (presetChipWaveLoopStart != null) {\n                            presetIsUsingAdvancedLoopControls = true;\n                        }\n                    } else if (optionCode === \"b\") {\n                        presetChipWaveLoopEnd = parseIntWithDefault(optionData, null);\n                        if (presetChipWaveLoopEnd != null) {\n                            presetIsUsingAdvancedLoopControls = true;\n                        }\n                    } else if (optionCode === \"c\") {\n                        presetChipWaveStartOffset = parseIntWithDefault(optionData, null);\n                        if (presetChipWaveStartOffset != null) {\n                            presetIsUsingAdvancedLoopControls = true;\n                        }\n                    } else if (optionCode === \"d\") {\n                        presetChipWaveLoopMode = parseIntWithDefault(optionData, null);\n                        if (presetChipWaveLoopMode != null) {\n                            // @TODO: Error-prone. This should be automatically\n                            // derived from the list of available loop modes.\n                            presetChipWaveLoopMode = clamp(0, 3 + 1, presetChipWaveLoopMode);\n                            presetIsUsingAdvancedLoopControls = true;\n                        }\n                    } else if (optionCode === \"e\") {\n                        presetChipWavePlayBackwards = true;\n                        presetIsUsingAdvancedLoopControls = true;\n                    } else if (optionCode === \"f\") {\n                        presetChipWaveInStereo = true;\n                        presetIsUsingAdvancedLoopControls = true;\n                    }\n                }\n                urlSliced = url.slice(optionsEndIndex + 1, url.length);\n                parsedSampleOptions = true;\n            }\n        }\n\n        let parsedUrl: URL | string | null = null;\n        if (Song._isProperUrl(urlSliced)) {\n            if (OFFLINE) {\n                parsedUrl = urlSliced;\n            } else {\n                parsedUrl = new URL(urlSliced);\n            }\n        }\n        else {\n            alert(url + \" is not a valid url\");\n            return false;\n        }\n\n        if (parseOldSyntax) {\n            if (!parsedSampleOptions && parsedUrl != null) {\n                if (url.indexOf(\"@\") != -1) {\n                    //urlSliced = url.slice(url.indexOf(\"@\"), url.indexOf(\"@\"));\n                    urlSliced = url.replaceAll(\"@\", \"\")\n                    if (OFFLINE) {\n                        parsedUrl = urlSliced;\n                    } else {\n                        parsedUrl = new URL(urlSliced);\n                    }\n                    isCustomPercussive = true;\n                }\n\n                function sliceForSampleRate() {\n                    urlSliced = url.slice(0, url.indexOf(\",\"));\n                    if (OFFLINE) {\n                        parsedUrl = urlSliced;\n                    } else {\n                        parsedUrl = new URL(urlSliced);\n                    }\n                    customSampleRate = clamp(8000, 96000 + 1, parseFloatWithDefault(url.slice(url.indexOf(\",\") + 1), 44100));\n                    //should this be parseFloat or parseInt?\n                    //ig floats let you do decimals and such, but idk where that would be useful\n                }\n\n                function sliceForRootKey() {\n                    urlSliced = url.slice(0, url.indexOf(\"!\"));\n                    if (OFFLINE) {\n                        parsedUrl = urlSliced;\n                    } else {\n                        parsedUrl = new URL(urlSliced);\n                    }\n                    customRootKey = parseFloatWithDefault(url.slice(url.indexOf(\"!\") + 1), 60);\n                }\n\n\n                if (url.indexOf(\",\") != -1 && url.indexOf(\"!\") != -1) {\n                    if (url.indexOf(\",\") < url.indexOf(\"!\")) {\n                        sliceForRootKey();\n                        sliceForSampleRate();\n                    }\n                    else {\n                        sliceForSampleRate();\n                        sliceForRootKey();\n                    }\n                }\n                else {\n                    if (url.indexOf(\",\") != -1) {\n                        sliceForSampleRate();\n                    }\n                    if (url.indexOf(\"!\") != -1) {\n                        sliceForRootKey();\n                    }\n                }\n            }\n        }\n\n        if (parsedUrl != null) {\n            // Store in the new format.\n            let urlWithNamedOptions = urlSliced;\n            const namedOptions: string[] = [];\n            if (customSampleRate !== 44100) namedOptions.push(\"s\" + customSampleRate);\n            if (customRootKey !== 60) namedOptions.push(\"r\" + customRootKey);\n            if (isCustomPercussive) namedOptions.push(\"p\");\n            if (presetIsUsingAdvancedLoopControls) {\n                if (presetChipWaveLoopStart != null) namedOptions.push(\"a\" + presetChipWaveLoopStart);\n                if (presetChipWaveLoopEnd != null) namedOptions.push(\"b\" + presetChipWaveLoopEnd);\n                if (presetChipWaveStartOffset != null) namedOptions.push(\"c\" + presetChipWaveStartOffset);\n                if (presetChipWaveLoopMode != null) namedOptions.push(\"d\" + presetChipWaveLoopMode);\n                if (presetChipWavePlayBackwards) namedOptions.push(\"e\");\n                if (presetChipWaveInStereo) namedOptions.push(\"f\");\n            }\n            if (namedOptions.length > 0) {\n                urlWithNamedOptions = \"!\" + namedOptions.join(\",\") + \"!\" + urlSliced;\n            }\n            customSampleUrls[customSampleUrlIndex] = urlWithNamedOptions;\n\n            // @TODO: Could also remove known extensions, but it\n            // would probably be much better to be able to specify\n            // a custom name.\n            // @TODO: If for whatever inexplicable reason someone\n            // uses an url like `https://example.com`, this will\n            // result in an empty name here.\n            let name: string;\n            if (OFFLINE) {\n                //@ts-ignore\n                name = decodeURIComponent(parsedUrl.replace(/^([^\\/]*\\/)+/, \"\"));\n            } else {\n                //@ts-ignore\n                name = decodeURIComponent(parsedUrl.pathname.replace(/^([^\\/]*\\/)+/, \"\"));\n            }\n            // @TODO: What to do about samples with the same name?\n            // The problem with using the url is that the name is\n            // user-facing and long names break assumptions of the\n            // UI.\n            const expression: number = 1.0;\n            Config.chipWaves[chipWaveIndex] = {\n                name: name,\n                expression: expression,\n                isCustomSampled: true,\n                isPercussion: isCustomPercussive,\n                rootKey: customRootKey,\n                sampleRate: customSampleRate,\n                samples: defaultIntegratedSamplesL,\n                samplesR: defaultIntegratedSamplesR,\n                index: chipWaveIndex,\n            };\n            Config.rawChipWaves[chipWaveIndex] = {\n                name: name,\n                expression: expression,\n                isCustomSampled: true,\n                isPercussion: isCustomPercussive,\n                rootKey: customRootKey,\n                sampleRate: customSampleRate,\n                samples: defaultSamplesL,\n                samplesR: defaultSamplesR,\n                index: chipWaveIndex,\n            };\n            Config.rawRawChipWaves[chipWaveIndex] = {\n                name: name,\n                expression: expression,\n                isCustomSampled: true,\n                isPercussion: isCustomPercussive,\n                rootKey: customRootKey,\n                sampleRate: customSampleRate,\n                samples: defaultSamplesL,\n                samplesR: defaultSamplesR,\n                index: chipWaveIndex,\n            };\n            const customSamplePresetSettings: Dictionary<any> = {\n                \"type\": \"chip\",\n                \"eqFilter\": [],\n                \"effects\": [],\n                \"mdeffects\": [],\n                \"transition\": \"normal\",\n                \"fadeInSeconds\": 0,\n                \"fadeOutTicks\": -3,\n                \"chord\": \"harmony\",\n                \"wave\": name,\n                \"unison\": \"none\",\n                \"envelopes\": [],\n                \"chipWaveInStereo\": true,\n            };\n            if (presetIsUsingAdvancedLoopControls) {\n                customSamplePresetSettings[\"isUsingAdvancedLoopControls\"] = true;\n                customSamplePresetSettings[\"chipWaveLoopStart\"] = presetChipWaveLoopStart != null ? presetChipWaveLoopStart : 0;\n                customSamplePresetSettings[\"chipWaveLoopEnd\"] = presetChipWaveLoopEnd != null ? presetChipWaveLoopEnd : 2;\n                customSamplePresetSettings[\"chipWaveLoopMode\"] = presetChipWaveLoopMode != null ? presetChipWaveLoopMode : 0;\n                customSamplePresetSettings[\"chipWavePlayBackwards\"] = presetChipWavePlayBackwards;\n                customSamplePresetSettings[\"chipWaveStartOffset\"] = presetChipWaveStartOffset != null ? presetChipWaveStartOffset : 0;\n            }\n            const customSamplePreset: Preset = {\n                index: 0, // This should be overwritten by toNameMap, in our caller.\n                name: name,\n                midiProgram: 80,\n                settings: customSamplePresetSettings,\n            };\n            customSamplePresets.push(customSamplePreset);\n            if (!Config.willReloadForCustomSamples) {\n                const rawLoopOptions: any = {\n                    \"isUsingAdvancedLoopControls\": presetIsUsingAdvancedLoopControls,\n                    \"chipWaveLoopStart\": presetChipWaveLoopStart,\n                    \"chipWaveLoopEnd\": presetChipWaveLoopEnd,\n                    \"chipWaveLoopMode\": presetChipWaveLoopMode,\n                    \"chipWavePlayBackwards\": presetChipWavePlayBackwards,\n                    \"chipWaveStartOffset\": presetChipWaveStartOffset,\n                };\n                startLoadingSample(urlSliced, chipWaveIndex, customSamplePresetSettings, rawLoopOptions, customSampleRate);\n            }\n            sampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.loading;\n            sampleLoadingState.urlTable[chipWaveIndex] = urlSliced;\n            sampleLoadingState.totalSamples++;\n        }\n\n        return true;\n    }\n\n    private static _restoreChipWaveListToDefault(): void {\n        Config.chipWaves = toNameMap(Config.chipWaves.slice(0, Config.firstIndexForSamplesInChipWaveList));\n        Config.rawChipWaves = toNameMap(Config.rawChipWaves.slice(0, Config.firstIndexForSamplesInChipWaveList));\n        Config.rawRawChipWaves = toNameMap(Config.rawRawChipWaves.slice(0, Config.firstIndexForSamplesInChipWaveList));\n    }\n\n    private static _clearSamples(): void {\n        EditorConfig.customSamples = null;\n\n        Song._restoreChipWaveListToDefault();\n\n        sampleLoadingState.statusTable = {};\n        sampleLoadingState.urlTable = {};\n        sampleLoadingState.totalSamples = 0;\n        sampleLoadingState.samplesLoaded = 0;\n        sampleLoadEvents.dispatchEvent(new SampleLoadedEvent(\n            sampleLoadingState.totalSamples,\n            sampleLoadingState.samplesLoaded\n        ));\n    }\n\n    toJsonObject(enableIntro: boolean = true, loopCount: number = 1, enableOutro: boolean = true): Object {\n        const channelArray: Object[] = [];\n        for (let channelIndex: number = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n            const channel: Channel = this.channels[channelIndex];\n            const instrumentArray: Object[] = [];\n            const isNoiseChannel: boolean = this.getChannelIsNoise(channelIndex);\n            const isModChannel: boolean = this.getChannelIsMod(channelIndex);\n            for (const instrument of channel.instruments) {\n                instrumentArray.push(instrument.toJsonObject());\n            }\n\n            const patternArray: Object[] = [];\n            for (const pattern of channel.patterns) {\n                patternArray.push(pattern.toJsonObject(this, channel, isModChannel));\n            }\n\n            const sequenceArray: number[] = [];\n            if (enableIntro) for (let i: number = 0; i < this.loopStart; i++) {\n                sequenceArray.push(channel.bars[i]);\n            }\n            for (let l: number = 0; l < loopCount; l++) for (let i: number = this.loopStart; i < this.loopStart + this.loopLength; i++) {\n                sequenceArray.push(channel.bars[i]);\n            }\n            if (enableOutro) for (let i: number = this.loopStart + this.loopLength; i < this.barCount; i++) {\n                sequenceArray.push(channel.bars[i]);\n            }\n\n            const channelObject: any = {\n                \"type\": isModChannel ? \"mod\" : (isNoiseChannel ? \"drum\" : \"pitch\"),\n                \"name\": channel.name,\n                \"instruments\": instrumentArray,\n                \"patterns\": patternArray,\n                \"sequence\": sequenceArray,\n            };\n            if (!isNoiseChannel) {\n                // For compatibility with old versions the octave is offset by one.\n                channelObject[\"octaveScrollBar\"] = channel.octave - 1;\n            }\n            channelArray.push(channelObject);\n        }\n\n        const result: any = {\n            \"name\": this.title,\n            \"format\": Song._format,\n            \"version\": Song._latestSlarmoosBoxVersion,\n            \"scale\": Config.scales[this.scale].name,\n            \"customScale\": this.scaleCustom,\n            \"key\": Config.keys[this.key].name,\n            \"keyOctave\": this.octave,\n            \"introBars\": this.loopStart,\n            \"loopBars\": this.loopLength,\n            \"beatsPerBar\": this.beatsPerBar,\n            \"ticksPerBeat\": Config.rhythms[this.rhythm].stepsPerBeat,\n            \"beatsPerMinute\": this.tempo,\n            \"reverb\": this.reverb,\n            \"masterGain\": this.masterGain,\n            \"compressionThreshold\": this.compressionThreshold,\n            \"limitThreshold\": this.limitThreshold,\n            \"limitDecay\": this.limitDecay,\n            \"limitRise\": this.limitRise,\n            \"limitRatio\": this.limitRatio,\n            \"compressionRatio\": this.compressionRatio,\n            //\"outroBars\": this.barCount - this.loopStart - this.loopLength; // derive this from bar arrays?\n            //\"patternCount\": this.patternsPerChannel, // derive this from pattern arrays?\n            \"songEq\": this.eqFilter.toJsonObject(),\n            \"layeredInstruments\": this.layeredInstruments,\n            \"patternInstruments\": this.patternInstruments,\n            \"channels\": channelArray,\n        };\n\n        //song eq subfilters\n        for (let i: number = 0; i < Config.filterMorphCount - 1; i++) {\n            result[\"songEq\" + i] = this.eqSubFilters[i];\n        }\n\n        if (EditorConfig.customSamples != null && EditorConfig.customSamples.length > 0) {\n            result[\"customSamples\"] = EditorConfig.customSamples;\n        }\n\n        return result;\n    }\n\n    fromJsonObject(jsonObject: any, jsonFormat: string = \"auto\"): void {\n        this.initToDefault(true);\n        if (!jsonObject) return;\n\n        //const version: number = jsonObject[\"version\"] | 0;\n        //if (version > Song._latestVersion) return; // Go ahead and try to parse something from the future I guess? JSON is pretty easy-going!\n\n        // Code for auto-detect mode; if statements that are lower down have 'higher priority'\n        if (jsonFormat == \"auto\") {\n            if (jsonObject[\"format\"] == \"BeepBox\") {\n                // Assume that if there is a \"riff\" song setting then it must be modbox\n                if (jsonObject[\"riff\"] != undefined) {\n                    jsonFormat = \"modbox\";\n                }\n\n                // Assume that if there are limiter song settings then it must be jummbox\n                // Despite being added in JB 2.1, json export for the limiter settings wasn't added until 2.3\n                if (jsonObject[\"masterGain\"] != undefined) {\n                    jsonFormat = \"jummbox\";\n                }\n            }\n        }\n\n        const format: string = (jsonFormat == \"auto\" ? jsonObject[\"format\"] : jsonFormat).toLowerCase();\n\n        if (jsonObject[\"name\"] != undefined) {\n            this.title = jsonObject[\"name\"];\n        }\n\n        if (jsonObject[\"customSamples\"] != undefined) {\n            const customSamples: string[] = jsonObject[\"customSamples\"];\n            if (EditorConfig.customSamples == null || EditorConfig.customSamples.join(\", \") != customSamples.join(\", \")) {\n                // Have to duplicate the work done in Song.fromBase64String\n                // early here, because Instrument.fromJsonObject depends on the\n                // chip wave list having the correct items already in memory.\n\n                Config.willReloadForCustomSamples = true;\n\n                Song._restoreChipWaveListToDefault();\n\n                let willLoadLegacySamples: boolean = false;\n                let willLoadNintariboxSamples: boolean = false;\n                let willLoadMarioPaintboxSamples: boolean = false;\n                const customSampleUrls: string[] = [];\n                const customSamplePresets: Preset[] = [];\n                for (const url of customSamples) {\n                    if (url.toLowerCase() === \"legacysamples\") {\n                        if (!willLoadLegacySamples) {\n                            willLoadLegacySamples = true;\n                            customSampleUrls.push(url);\n                            loadBuiltInSamples(0);\n                        }\n                    }\n                    else if (url.toLowerCase() === \"nintariboxsamples\") {\n                        if (!willLoadNintariboxSamples) {\n                            willLoadNintariboxSamples = true;\n                            customSampleUrls.push(url);\n                            loadBuiltInSamples(1);\n                        }\n                    }\n                    else if (url.toLowerCase() === \"mariopaintboxsamples\") {\n                        if (!willLoadMarioPaintboxSamples) {\n                            willLoadMarioPaintboxSamples = true;\n                            customSampleUrls.push(url);\n                            loadBuiltInSamples(2);\n                        }\n                    }\n\n                    else {\n                        // When EditorConfig.customSamples is saved in the json\n                        // export, it should be using the new syntax, unless\n                        // the user has manually modified the URL, so we don't\n                        // really need to parse the old syntax here.\n                        const parseOldSyntax: boolean = false;\n                        Song._parseAndConfigureCustomSample(url, customSampleUrls, customSamplePresets, sampleLoadingState, parseOldSyntax);\n                    }\n                }\n                if (customSampleUrls.length > 0) {\n                    EditorConfig.customSamples = customSampleUrls;\n                }\n                if (customSamplePresets.length > 0) {\n                    const customSamplePresetsMap: DictionaryArray<Preset> = toNameMap(customSamplePresets);\n                    EditorConfig.presetCategories[EditorConfig.presetCategories.length] = {\n                        name: \"Custom Sample Presets\",\n                        presets: customSamplePresetsMap,\n                        index: EditorConfig.presetCategories.length,\n                    };\n                }\n            }\n        } else {\n            // No custom samples, so the only possibility at this point is that\n            // we need to load the legacy samples. Let's check whether that's\n            // necessary.\n            let shouldLoadLegacySamples: boolean = false;\n            if (jsonObject[\"channels\"] != undefined) {\n                for (let channelIndex: number = 0; channelIndex < jsonObject[\"channels\"].length; channelIndex++) {\n                    const channelObject: any = jsonObject[\"channels\"][channelIndex];\n                    if (channelObject[\"type\"] !== \"pitch\") {\n                        // Legacy samples can only exist in pitch channels.\n                        continue;\n                    }\n                    if (Array.isArray(channelObject[\"instruments\"])) {\n                        const instrumentObjects: any[] = channelObject[\"instruments\"];\n                        for (let i: number = 0; i < instrumentObjects.length; i++) {\n                            const instrumentObject: any = instrumentObjects[i];\n                            if (instrumentObject[\"type\"] !== \"chip\") {\n                                // Legacy samples can only exist in chip wave\n                                // instruments.\n                                continue;\n                            }\n                            if (instrumentObject[\"wave\"] == null) {\n                                // This should exist if things got saved\n                                // correctly, but if they didn't, skip this.\n                                continue;\n                            }\n                            const waveName: string = instrumentObject[\"wave\"];\n                            // @TODO: Avoid this duplication.\n                            const names: string[] = [\n                                \"paandorasbox kick\",\n                                \"paandorasbox snare\",\n                                \"paandorasbox piano1\",\n                                \"paandorasbox WOW\",\n                                \"paandorasbox overdrive\",\n                                \"paandorasbox trumpet\",\n                                \"paandorasbox saxophone\",\n                                \"paandorasbox orchestrahit\",\n                                \"paandorasbox detatched violin\",\n                                \"paandorasbox synth\",\n                                \"paandorasbox sonic3snare\",\n                                \"paandorasbox come on\",\n                                \"paandorasbox choir\",\n                                \"paandorasbox overdriveguitar\",\n                                \"paandorasbox flute\",\n                                \"paandorasbox legato violin\",\n                                \"paandorasbox tremolo violin\",\n                                \"paandorasbox amen break\",\n                                \"paandorasbox pizzicato violin\",\n                                \"paandorasbox tim allen grunt\",\n                                \"paandorasbox tuba\",\n                                \"paandorasbox loopingcymbal\",\n                                \"paandorasbox standardkick\",\n                                \"paandorasbox standardsnare\",\n                                \"paandorasbox closedhihat\",\n                                \"paandorasbox foothihat\",\n                                \"paandorasbox openhihat\",\n                                \"paandorasbox crashcymbal\",\n                                \"paandorasbox pianoC4\",\n                                \"paandorasbox liver pad\",\n                                \"paandorasbox marimba\",\n                                \"paandorasbox susdotwav\",\n                                \"paandorasbox wackyboxtts\",\n                                \"paandorasbox peppersteak_1\",\n                                \"paandorasbox peppersteak_2\",\n                                \"paandorasbox vinyl_noise\",\n                                \"paandorasbeta slap bass\",\n                                \"paandorasbeta HD EB overdrive guitar\",\n                                \"paandorasbeta sunsoft bass\",\n                                \"paandorasbeta masculine choir\",\n                                \"paandorasbeta feminine choir\",\n                                \"paandorasbeta tololoche\",\n                                \"paandorasbeta harp\",\n                                \"paandorasbeta pan flute\",\n                                \"paandorasbeta krumhorn\",\n                                \"paandorasbeta timpani\",\n                                \"paandorasbeta crowd hey\",\n                                \"paandorasbeta wario land 4 brass\",\n                                \"paandorasbeta wario land 4 rock organ\",\n                                \"paandorasbeta wario land 4 DAOW\",\n                                \"paandorasbeta wario land 4 hour chime\",\n                                \"paandorasbeta wario land 4 tick\",\n                                \"paandorasbeta kirby kick\",\n                                \"paandorasbeta kirby snare\",\n                                \"paandorasbeta kirby bongo\",\n                                \"paandorasbeta kirby click\",\n                                \"paandorasbeta sonor kick\",\n                                \"paandorasbeta sonor snare\",\n                                \"paandorasbeta sonor snare (left hand)\",\n                                \"paandorasbeta sonor snare (right hand)\",\n                                \"paandorasbeta sonor high tom\",\n                                \"paandorasbeta sonor low tom\",\n                                \"paandorasbeta sonor hihat (closed)\",\n                                \"paandorasbeta sonor hihat (half opened)\",\n                                \"paandorasbeta sonor hihat (open)\",\n                                \"paandorasbeta sonor hihat (open tip)\",\n                                \"paandorasbeta sonor hihat (pedal)\",\n                                \"paandorasbeta sonor crash\",\n                                \"paandorasbeta sonor crash (tip)\",\n                                \"paandorasbeta sonor ride\"\n                            ];\n                            // The difference for these is in the doubled a.\n                            const oldNames: string[] = [\n                                \"pandoraasbox kick\",\n                                \"pandoraasbox snare\",\n                                \"pandoraasbox piano1\",\n                                \"pandoraasbox WOW\",\n                                \"pandoraasbox overdrive\",\n                                \"pandoraasbox trumpet\",\n                                \"pandoraasbox saxophone\",\n                                \"pandoraasbox orchestrahit\",\n                                \"pandoraasbox detatched violin\",\n                                \"pandoraasbox synth\",\n                                \"pandoraasbox sonic3snare\",\n                                \"pandoraasbox come on\",\n                                \"pandoraasbox choir\",\n                                \"pandoraasbox overdriveguitar\",\n                                \"pandoraasbox flute\",\n                                \"pandoraasbox legato violin\",\n                                \"pandoraasbox tremolo violin\",\n                                \"pandoraasbox amen break\",\n                                \"pandoraasbox pizzicato violin\",\n                                \"pandoraasbox tim allen grunt\",\n                                \"pandoraasbox tuba\",\n                                \"pandoraasbox loopingcymbal\",\n                                \"pandoraasbox standardkick\",\n                                \"pandoraasbox standardsnare\",\n                                \"pandoraasbox closedhihat\",\n                                \"pandoraasbox foothihat\",\n                                \"pandoraasbox openhihat\",\n                                \"pandoraasbox crashcymbal\",\n                                \"pandoraasbox pianoC4\",\n                                \"pandoraasbox liver pad\",\n                                \"pandoraasbox marimba\",\n                                \"pandoraasbox susdotwav\",\n                                \"pandoraasbox wackyboxtts\",\n                                \"pandoraasbox peppersteak_1\",\n                                \"pandoraasbox peppersteak_2\",\n                                \"pandoraasbox vinyl_noise\",\n                                \"pandoraasbeta slap bass\",\n                                \"pandoraasbeta HD EB overdrive guitar\",\n                                \"pandoraasbeta sunsoft bass\",\n                                \"pandoraasbeta masculine choir\",\n                                \"pandoraasbeta feminine choir\",\n                                \"pandoraasbeta tololoche\",\n                                \"pandoraasbeta harp\",\n                                \"pandoraasbeta pan flute\",\n                                \"pandoraasbeta krumhorn\",\n                                \"pandoraasbeta timpani\",\n                                \"pandoraasbeta crowd hey\",\n                                \"pandoraasbeta wario land 4 brass\",\n                                \"pandoraasbeta wario land 4 rock organ\",\n                                \"pandoraasbeta wario land 4 DAOW\",\n                                \"pandoraasbeta wario land 4 hour chime\",\n                                \"pandoraasbeta wario land 4 tick\",\n                                \"pandoraasbeta kirby kick\",\n                                \"pandoraasbeta kirby snare\",\n                                \"pandoraasbeta kirby bongo\",\n                                \"pandoraasbeta kirby click\",\n                                \"pandoraasbeta sonor kick\",\n                                \"pandoraasbeta sonor snare\",\n                                \"pandoraasbeta sonor snare (left hand)\",\n                                \"pandoraasbeta sonor snare (right hand)\",\n                                \"pandoraasbeta sonor high tom\",\n                                \"pandoraasbeta sonor low tom\",\n                                \"pandoraasbeta sonor hihat (closed)\",\n                                \"pandoraasbeta sonor hihat (half opened)\",\n                                \"pandoraasbeta sonor hihat (open)\",\n                                \"pandoraasbeta sonor hihat (open tip)\",\n                                \"pandoraasbeta sonor hihat (pedal)\",\n                                \"pandoraasbeta sonor crash\",\n                                \"pandoraasbeta sonor crash (tip)\",\n                                \"pandoraasbeta sonor ride\"\n                            ];\n                            // This mirrors paandorasboxWaveNames, which is unprefixed.\n                            const veryOldNames: string[] = [\n                                \"kick\",\n                                \"snare\",\n                                \"piano1\",\n                                \"WOW\",\n                                \"overdrive\",\n                                \"trumpet\",\n                                \"saxophone\",\n                                \"orchestrahit\",\n                                \"detatched violin\",\n                                \"synth\",\n                                \"sonic3snare\",\n                                \"come on\",\n                                \"choir\",\n                                \"overdriveguitar\",\n                                \"flute\",\n                                \"legato violin\",\n                                \"tremolo violin\",\n                                \"amen break\",\n                                \"pizzicato violin\",\n                                \"tim allen grunt\",\n                                \"tuba\",\n                                \"loopingcymbal\",\n                                \"standardkick\",\n                                \"standardsnare\",\n                                \"closedhihat\",\n                                \"foothihat\",\n                                \"openhihat\",\n                                \"crashcymbal\",\n                                \"pianoC4\",\n                                \"liver pad\",\n                                \"marimba\",\n                                \"susdotwav\",\n                                \"wackyboxtts\"\n                            ];\n                            if (names.includes(waveName)) {\n                                shouldLoadLegacySamples = true;\n                            } else if (oldNames.includes(waveName)) {\n                                shouldLoadLegacySamples = true;\n                                // If we see one of these old names, update it\n                                // to the corresponding new name.\n                                instrumentObject[\"wave\"] = names[oldNames.findIndex(x => x === waveName)];\n                            } else if (veryOldNames.includes(waveName)) {\n                                if ((waveName === \"trumpet\" || waveName === \"flute\") && (format != \"paandorasbox\")) {\n                                    // If we see chip waves named trumpet or flute, and if the format isn't PaandorasBox, we leave them as-is\n                                } else {\n                                    // There's no other chip waves with ambiguous names like that, so it should\n                                    // be okay to assume we'll need to load the legacy samples now.\n                                    shouldLoadLegacySamples = true;\n                                    // If we see one of these old names, update it\n                                    // to the corresponding new name.\n                                    instrumentObject[\"wave\"] = names[veryOldNames.findIndex(x => x === waveName)];\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            if (shouldLoadLegacySamples) {\n                Config.willReloadForCustomSamples = true;\n\n                Song._restoreChipWaveListToDefault();\n\n                loadBuiltInSamples(0);\n                EditorConfig.customSamples = [\"legacySamples\"];\n            } else {\n                // We don't need to load the legacy samples, but we may have\n                // leftover samples in memory. If we do, clear them.\n                if (EditorConfig.customSamples != null && EditorConfig.customSamples.length > 0) {\n                    // We need to reload anyway in this case, because (for now)\n                    // the chip wave lists won't be correctly updated.\n                    Config.willReloadForCustomSamples = true;\n                    Song._clearSamples();\n                }\n            }\n        }\n\n        this.scale = 0; // default to free.\n        if (jsonObject[\"scale\"] != undefined) {\n            const oldScaleNames: Dictionary<string> = {\n                \"romani :)\": \"double harmonic :)\",\n                \"romani :(\": \"double harmonic :(\",\n                \"dbl harmonic :)\": \"double harmonic :)\",\n                \"dbl harmonic :(\": \"double harmonic :(\",\n                \"enigma\": \"strange\",\n            };\n            const scaleName: string = (oldScaleNames[jsonObject[\"scale\"]] != undefined) ? oldScaleNames[jsonObject[\"scale\"]] : jsonObject[\"scale\"];\n            const scale: number = Config.scales.findIndex(scale => scale.name == scaleName);\n            if (scale != -1) this.scale = scale;\n            if (this.scale == Config.scales[\"dictionary\"][\"Custom\"].index) {\n                if (jsonObject[\"customScale\"] != undefined) {\n                    for (var i of jsonObject[\"customScale\"].keys()) {\n                        this.scaleCustom[i] = jsonObject[\"customScale\"][i];\n                    }\n                }\n            }\n        }\n\n        if (jsonObject[\"key\"] != undefined) {\n            if (typeof (jsonObject[\"key\"]) == \"number\") {\n                this.key = ((jsonObject[\"key\"] + 1200) >>> 0) % Config.keys.length;\n            } else if (typeof (jsonObject[\"key\"]) == \"string\") {\n                const key: string = jsonObject[\"key\"];\n                // This conversion code depends on C through B being\n                // available as keys, of course.\n                if (key === \"C+\") {\n                    this.key = 0;\n                    this.octave = 1;\n                } else if (key === \"G- (actually F#-)\") {\n                    this.key = 6;\n                    this.octave = -1;\n                } else if (key === \"C-\") {\n                    this.key = 0;\n                    this.octave = -1;\n                } else if (key === \"oh no (F-)\") {\n                    this.key = 5;\n                    this.octave = -1;\n                } else {\n                    const letter: string = key.charAt(0).toUpperCase();\n                    const symbol: string = key.charAt(1).toLowerCase();\n                    const letterMap: Readonly<Dictionary<number>> = { \"C\": 0, \"D\": 2, \"E\": 4, \"F\": 5, \"G\": 7, \"A\": 9, \"B\": 11 };\n                    const accidentalMap: Readonly<Dictionary<number>> = { \"#\": 1, \"\u266F\": 1, \"b\": -1, \"\u266D\": -1 };\n                    let index: number | undefined = letterMap[letter];\n                    const offset: number | undefined = accidentalMap[symbol];\n                    if (index != undefined) {\n                        if (offset != undefined) index += offset;\n                        if (index < 0) index += 12;\n                        index = index % 12;\n                        this.key = index;\n                    }\n                }\n            }\n        }\n\n        if (jsonObject[\"beatsPerMinute\"] != undefined) {\n            this.tempo = clamp(Config.tempoMin, Config.tempoMax + 1, jsonObject[\"beatsPerMinute\"] | 0);\n        }\n\n        if (jsonObject[\"keyOctave\"] != undefined) {\n            this.octave = clamp(Config.octaveMin, Config.octaveMax + 1, jsonObject[\"keyOctave\"] | 0);\n        }\n\n        let legacyGlobalReverb: number = 0; // In older songs, reverb was song-global, record that here and pass it to Instrument.fromJsonObject() for context.\n        if (jsonObject[\"reverb\"] != undefined) {\n            legacyGlobalReverb = clamp(0, 32, jsonObject[\"reverb\"] | 0);\n        }\n\n        if (jsonObject[\"beatsPerBar\"] != undefined) {\n            this.beatsPerBar = Math.max(Config.beatsPerBarMin, Math.min(Config.beatsPerBarMax, jsonObject[\"beatsPerBar\"] | 0));\n        }\n\n        let importedPartsPerBeat: number = 4;\n        if (jsonObject[\"ticksPerBeat\"] != undefined) {\n            importedPartsPerBeat = (jsonObject[\"ticksPerBeat\"] | 0) || 4;\n            this.rhythm = Config.rhythms.findIndex(rhythm => rhythm.stepsPerBeat == importedPartsPerBeat);\n            if (this.rhythm == -1) {\n                this.rhythm = 1; //default rhythm\n            }\n        }\n\n        // Read limiter settings. Ranges and defaults are based on slider settings\n\n        if (jsonObject[\"masterGain\"] != undefined) {\n            this.masterGain = Math.max(0.0, Math.min(5.0, jsonObject[\"masterGain\"] || 0));\n        } else {\n            this.masterGain = 1.0;\n        }\n\n        if (jsonObject[\"limitThreshold\"] != undefined) {\n            this.limitThreshold = Math.max(0.0, Math.min(2.0, jsonObject[\"limitThreshold\"] || 0));\n        } else {\n            this.limitThreshold = 1.0;\n        }\n\n        if (jsonObject[\"compressionThreshold\"] != undefined) {\n            this.compressionThreshold = Math.max(0.0, Math.min(1.1, jsonObject[\"compressionThreshold\"] || 0));\n        } else {\n            this.compressionThreshold = 1.0;\n        }\n\n        if (jsonObject[\"limitRise\"] != undefined) {\n            this.limitRise = Math.max(2000.0, Math.min(10000.0, jsonObject[\"limitRise\"] || 0));\n        } else {\n            this.limitRise = 4000.0;\n        }\n\n        if (jsonObject[\"limitDecay\"] != undefined) {\n            this.limitDecay = Math.max(1.0, Math.min(30.0, jsonObject[\"limitDecay\"] || 0));\n        } else {\n            this.limitDecay = 4.0;\n        }\n\n        if (jsonObject[\"limitRatio\"] != undefined) {\n            this.limitRatio = Math.max(0.0, Math.min(11.0, jsonObject[\"limitRatio\"] || 0));\n        } else {\n            this.limitRatio = 1.0;\n        }\n\n        if (jsonObject[\"compressionRatio\"] != undefined) {\n            this.compressionRatio = Math.max(0.0, Math.min(1.168, jsonObject[\"compressionRatio\"] || 0));\n        } else {\n            this.compressionRatio = 1.0;\n        }\n\n        if (jsonObject[\"songEq\"] != undefined) {\n            this.eqFilter.fromJsonObject(jsonObject[\"songEq\"]);\n        } else {\n            this.eqFilter.reset();\n        }\n\n        for (let i: number = 0; i < Config.filterMorphCount - 1; i++) {\n            if (jsonObject[\"songEq\" + i]) {\n                this.eqSubFilters[i] = jsonObject[\"songEq\" + i];\n            } else {\n                this.eqSubFilters[i] = null;\n            }\n        }\n\n        let maxInstruments: number = 1;\n        let maxPatterns: number = 1;\n        let maxBars: number = 1;\n        if (jsonObject[\"channels\"] != undefined) {\n            for (const channelObject of jsonObject[\"channels\"]) {\n                if (channelObject[\"instruments\"]) maxInstruments = Math.max(maxInstruments, channelObject[\"instruments\"].length | 0);\n                if (channelObject[\"patterns\"]) maxPatterns = Math.max(maxPatterns, channelObject[\"patterns\"].length | 0);\n                if (channelObject[\"sequence\"]) maxBars = Math.max(maxBars, channelObject[\"sequence\"].length | 0);\n            }\n        }\n\n        if (jsonObject[\"layeredInstruments\"] != undefined) {\n            this.layeredInstruments = !!jsonObject[\"layeredInstruments\"];\n        } else {\n            this.layeredInstruments = false;\n        }\n        if (jsonObject[\"patternInstruments\"] != undefined) {\n            this.patternInstruments = !!jsonObject[\"patternInstruments\"];\n        } else {\n            this.patternInstruments = (maxInstruments > 1);\n        }\n        this.patternsPerChannel = Math.min(maxPatterns, Config.barCountMax);\n        this.barCount = Math.min(maxBars, Config.barCountMax);\n\n        if (jsonObject[\"introBars\"] != undefined) {\n            this.loopStart = clamp(0, this.barCount, jsonObject[\"introBars\"] | 0);\n        }\n        if (jsonObject[\"loopBars\"] != undefined) {\n            this.loopLength = clamp(1, this.barCount - this.loopStart + 1, jsonObject[\"loopBars\"] | 0);\n        }\n\n        const newPitchChannels: Channel[] = [];\n        const newNoiseChannels: Channel[] = [];\n        const newModChannels: Channel[] = [];\n        if (jsonObject[\"channels\"] != undefined) {\n            for (let channelIndex: number = 0; channelIndex < jsonObject[\"channels\"].length; channelIndex++) {\n                let channelObject: any = jsonObject[\"channels\"][channelIndex];\n\n                const channel: Channel = new Channel();\n\n                let isNoiseChannel: boolean = false;\n                let isModChannel: boolean = false;\n                if (channelObject[\"type\"] != undefined) {\n                    isNoiseChannel = (channelObject[\"type\"] == \"drum\");\n                    isModChannel = (channelObject[\"type\"] == \"mod\");\n                } else {\n                    // for older files, assume drums are channel 3.\n                    isNoiseChannel = (channelIndex >= 3);\n                }\n                if (isNoiseChannel) {\n                    newNoiseChannels.push(channel);\n                } else if (isModChannel) {\n                    newModChannels.push(channel);\n                }\n                else {\n                    newPitchChannels.push(channel);\n                }\n\n                if (channelObject[\"octaveScrollBar\"] != undefined) {\n                    channel.octave = clamp(0, Config.pitchOctaves, (channelObject[\"octaveScrollBar\"] | 0) + 1);\n                    if (isNoiseChannel) channel.octave = 0;\n                }\n\n                if (channelObject[\"name\"] != undefined) {\n                    channel.name = channelObject[\"name\"];\n                }\n                else {\n                    channel.name = \"\";\n                }\n\n                if (Array.isArray(channelObject[\"instruments\"])) {\n                    const instrumentObjects: any[] = channelObject[\"instruments\"];\n                    for (let i: number = 0; i < instrumentObjects.length; i++) {\n                        if (i >= this.getMaxInstrumentsPerChannel()) break;\n                        const instrument: Instrument = new Instrument(isNoiseChannel, isModChannel);\n                        channel.instruments[i] = instrument;\n                        instrument.fromJsonObject(instrumentObjects[i], isNoiseChannel, isModChannel, false, false, legacyGlobalReverb, format);\n                    }\n\n                }\n\n                for (let i: number = 0; i < this.patternsPerChannel; i++) {\n                    const pattern: Pattern = new Pattern();\n                    channel.patterns[i] = pattern;\n\n                    let patternObject: any = undefined;\n                    if (channelObject[\"patterns\"]) patternObject = channelObject[\"patterns\"][i];\n                    if (patternObject == undefined) continue;\n\n                    pattern.fromJsonObject(patternObject, this, channel, importedPartsPerBeat, isNoiseChannel, isModChannel, format);\n                }\n                channel.patterns.length = this.patternsPerChannel;\n\n                for (let i: number = 0; i < this.barCount; i++) {\n                    channel.bars[i] = (channelObject[\"sequence\"] != undefined) ? Math.min(this.patternsPerChannel, channelObject[\"sequence\"][i] >>> 0) : 0;\n                }\n                channel.bars.length = this.barCount;\n            }\n        }\n\n        if (newPitchChannels.length > Config.pitchChannelCountMax) newPitchChannels.length = Config.pitchChannelCountMax;\n        if (newNoiseChannels.length > Config.noiseChannelCountMax) newNoiseChannels.length = Config.noiseChannelCountMax;\n        if (newModChannels.length > Config.modChannelCountMax) newModChannels.length = Config.modChannelCountMax;\n        this.pitchChannelCount = newPitchChannels.length;\n        this.noiseChannelCount = newNoiseChannels.length;\n        this.modChannelCount = newModChannels.length;\n        this.channels.length = 0;\n        Array.prototype.push.apply(this.channels, newPitchChannels);\n        Array.prototype.push.apply(this.channels, newNoiseChannels);\n        Array.prototype.push.apply(this.channels, newModChannels);\n\n        if (Config.willReloadForCustomSamples) {\n            window.location.hash = this.toBase64String();\n            // The prompt seems to get stuck if reloading is done too quickly.\n            setTimeout(() => { location.reload(); }, 50);\n        }\n    }\n\n    getPattern(channelIndex: number, bar: number): Pattern | null {\n        if (bar < 0 || bar >= this.barCount) return null;\n        const patternIndex: number = this.channels[channelIndex].bars[bar];\n        if (patternIndex == 0) return null;\n        return this.channels[channelIndex].patterns[patternIndex - 1];\n    }\n\n    getBeatsPerMinute(): number {\n        return this.tempo;\n    }\n\n    static getNeededBits(maxValue: number): number {\n        return 32 - Math.clz32(Math.ceil(maxValue + 1) - 1);\n    }\n\n    restoreLimiterDefaults(): void {\n        this.compressionRatio = 1.0;\n        this.limitRatio = 1.0;\n        this.limitRise = 4000.0;\n        this.limitDecay = 4.0;\n        this.limitThreshold = 1.0;\n        this.compressionThreshold = 1.0;\n        this.masterGain = 1.0;\n    }\n}\n", "// Copyright (c) John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { InstrumentState } from \"./InstrumentState\";\n\nexport class ChannelState {\n    readonly instruments: InstrumentState[] = [];\n    muted: boolean = false;\n    singleSeamlessInstrument: number | null = null; // Seamless tones from a pattern with a single instrument can be transferred to a different single seamless instrument in the next pattern.\n}\n", "// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\n// interface shared by number[], Float32Array, and other typed arrays in JavaScript.\ninterface NumberArray {\n\tlength: number;\n\t[index: number]: number;\n}\n\n// A basic FFT operation scales the overall magnitude of elements by the\n// square root of the length of the array, \u221AN. Performing a forward FFT and\n// then an inverse FFT results in the original array, but multiplied by N.\n// This helper function can be used to compensate for that. \nexport function scaleElementsByFactor(array: NumberArray, factor: number): void {\n\tfor (let i: number = 0; i < array.length; i++) {\n\t\tarray[i] *= factor;\n\t}\n}\n\nfunction isPowerOf2(n: number): boolean {\n\treturn !!n && !(n & (n - 1));\n}\n\nfunction countBits(n: number): number {\n\tif (!isPowerOf2(n)) throw new Error(\"FFT array length must be a power of 2.\");\n\treturn Math.round(Math.log(n) / Math.log(2));\n}\n\n// Rearranges the elements of the array, swapping the element at an index\n// with an element at an index that is the bitwise reverse of the first\n// index in base 2. Useful for computing the FFT.\nfunction reverseIndexBits(array: NumberArray, fullArrayLength: number): void {\n\tconst bitCount: number = countBits(fullArrayLength);\n\tif (bitCount > 16) throw new Error(\"FFT array length must not be greater than 2^16.\");\n\tconst finalShift: number = 16 - bitCount;\n\tfor (let i: number = 0; i < fullArrayLength; i++) {\n\t\t// Dear Javascript: Please support bit order reversal intrinsics. Thanks! :D\n\t\tlet j: number;\n\t\tj = ((i & 0xaaaa) >> 1) | ((i & 0x5555) << 1);\n\t\tj = ((j & 0xcccc) >> 2) | ((j & 0x3333) << 2);\n\t\tj = ((j & 0xf0f0) >> 4) | ((j & 0x0f0f) << 4);\n\t\t\tj = ((j           >> 8) | ((j &   0xff) << 8)) >> finalShift;\n\t\tif (j > i) {\n\t\t\tlet temp: number = array[i];\n\t\t\tarray[i] = array[j];\n\t\t\tarray[j] = temp;\n\t\t}\n\t}\n}\n\n// Provided for educational purposes. Easier to read than\n// fastFourierTransform(), but computes the same result.\n// Takes two parallel arrays representing the real and imaginary elements,\n// respectively, and returns an array containing two new arrays, which\n// contain the complex result of the transform.\nexport function discreteFourierTransform(realArray: NumberArray, imagArray: NumberArray): number[][] {\n\tconst fullArrayLength: number = realArray.length;\n\tif (fullArrayLength != imagArray.length) throw new Error(\"FFT arrays must be the same length.\");\n\tconst realOut: number[] = [];\n\tconst imagOut: number[] = [];\n\tfor (let i: number = 0; i < fullArrayLength; i++) {\n\t\trealOut[i] = 0.0;\n\t\timagOut[i] = 0.0;\n\t\tfor (let j: number = 0; j < fullArrayLength; j++) {\n\t\t\tconst radians: number = -6.2831853 * j * i / fullArrayLength;\n\t\t\tconst c: number = Math.cos(radians);\n\t\t\tconst s: number = Math.sin(radians);\n\t\t\trealOut[i] += realArray[j] * c - imagArray[j] * s;\n\t\t\timagOut[i] += realArray[j] * s + imagArray[j] * c;\n\t\t}\n\t}\n\treturn [realOut, imagOut];\n}\n\n// Performs a Fourier transform in O(N log(N)) operations. Overwrites the\n// input real and imaginary arrays. Can be used for both forward and inverse\n// transforms: swap the order of the arguments for the inverse.\nexport function fastFourierTransform(realArray: NumberArray, imagArray: NumberArray): void {\n\tconst fullArrayLength: number = realArray.length;\n\tif (!isPowerOf2(fullArrayLength)) throw new Error(\"FFT array length must be a power of 2.\");\n\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\n\tif (fullArrayLength != imagArray.length) throw new Error(\"FFT arrays must be the same length.\");\n\t\t\n\treverseIndexBits(realArray, fullArrayLength);\n\treverseIndexBits(imagArray, fullArrayLength);\n\t\t\n\t// First two passes, with strides of 2 and 4, can be combined and optimized.\n\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += 4) {\n\t\tconst startIndex1: number = startIndex + 1;\n\t\tconst startIndex2: number = startIndex + 2;\n\t\tconst startIndex3: number = startIndex + 3;\n\t\t\tconst real0: number = realArray[startIndex ];\n\t\tconst real1: number = realArray[startIndex1];\n\t\tconst real2: number = realArray[startIndex2];\n\t\tconst real3: number = realArray[startIndex3];\n\t\t\tconst imag0: number = imagArray[startIndex ];\n\t\tconst imag1: number = imagArray[startIndex1];\n\t\tconst imag2: number = imagArray[startIndex2];\n\t\tconst imag3: number = imagArray[startIndex3];\n\t\tconst realTemp0: number = real0 + real1;\n\t\tconst realTemp1: number = real0 - real1;\n\t\tconst realTemp2: number = real2 + real3;\n\t\tconst realTemp3: number = real2 - real3;\n\t\tconst imagTemp0: number = imag0 + imag1;\n\t\tconst imagTemp1: number = imag0 - imag1;\n\t\tconst imagTemp2: number = imag2 + imag3;\n\t\tconst imagTemp3: number = imag2 - imag3;\n\t\t\trealArray[startIndex ] = realTemp0 + realTemp2;\n\t\trealArray[startIndex1] = realTemp1 + imagTemp3;\n\t\trealArray[startIndex2] = realTemp0 - realTemp2;\n\t\trealArray[startIndex3] = realTemp1 - imagTemp3;\n\t\t\timagArray[startIndex ] = imagTemp0 + imagTemp2;\n\t\timagArray[startIndex1] = imagTemp1 - realTemp3;\n\t\timagArray[startIndex2] = imagTemp0 - imagTemp2;\n\t\timagArray[startIndex3] = imagTemp1 + realTemp3;\n\t}\n\t\t\n\tfor (let stride: number = 8; stride <= fullArrayLength; stride += stride) {\n\t\tconst halfLength: number = stride >>> 1;\n\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\n\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\n\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\n\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\n\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\n\t\t\tlet c: number = 1.0;\n\t\t\tlet s: number = 0.0;\n\t\t\tlet cPrev: number = cosIncrement;\n\t\t\tlet sPrev: number = sinIncrement;\n\t\t\tconst secondHalf: number = startIndex + halfLength;\n\t\t\tfor (let i: number = startIndex; i < secondHalf; i++) {\n\t\t\t\tconst j: number = i + halfLength;\n\t\t\t\tconst real0: number = realArray[i];\n\t\t\t\tconst imag0: number = imagArray[i];\n\t\t\t\tconst real1: number = realArray[j] * c - imagArray[j] * s;\n\t\t\t\tconst imag1: number = realArray[j] * s + imagArray[j] * c;\n\t\t\t\trealArray[i] = real0 + real1;\n\t\t\t\timagArray[i] = imag0 + imag1;\n\t\t\t\trealArray[j] = real0 - real1;\n\t\t\t\timagArray[j] = imag0 - imag1;\n\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\n\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\n\t\t\t\tcPrev = c;\n\t\t\t\tsPrev = s;\n\t\t\t\tc = cTemp;\n\t\t\t\ts = sTemp;\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Computes the Fourier transform from an array of real-valued time-domain\n// samples. The output is specially formatted for space efficieny: elements\n// 0 through N/2 represent cosine wave amplitudes in ascending frequency,\n// and elements N/2+1 through N-1 represent sine wave amplitudes in\n// descending frequency. Overwrites the input array.\nexport function forwardRealFourierTransform(array: NumberArray): void {\n\tconst fullArrayLength: number = array.length;\n\tconst totalPasses: number = countBits(fullArrayLength);\n\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\n\t\t\n\treverseIndexBits(array, fullArrayLength);\n\t\t\n\t// First and second pass.\n\tfor (let index: number = 0; index < fullArrayLength; index += 4) {\n\t\tconst index1: number = index + 1;\n\t\tconst index2: number = index + 2;\n\t\tconst index3: number = index + 3;\n\t\t\tconst real0: number = array[index ];\n\t\tconst real1: number = array[index1];\n\t\tconst real2: number = array[index2];\n\t\tconst real3: number = array[index3];\n\t\t// no imaginary elements yet since the input is fully real.\n\t\tconst tempA: number = real0 + real1;\n\t\tconst tempB: number = real2 + real3;\n\t\t\tarray[index ] = tempA + tempB;\n\t\tarray[index1] = real0 - real1;\n\t\tarray[index2] = tempA - tempB;\n\t\tarray[index3] = real2 - real3;\n\t}\n\t\t\n\t// Third pass.\n\tconst sqrt2over2: number = Math.sqrt(2.0) / 2.0;\n\tfor (let index: number = 0; index < fullArrayLength; index += 8) {\n\t\tconst index1: number = index + 1;\n\t\tconst index3: number = index + 3;\n\t\tconst index4: number = index + 4;\n\t\tconst index5: number = index + 5;\n\t\tconst index7: number = index + 7;\n\t\t\tconst real0: number = array[index ];\n\t\tconst real1: number = array[index1];\n\t\tconst imag3: number = array[index3];\n\t\tconst real4: number = array[index4];\n\t\tconst real5: number = array[index5];\n\t\tconst imag7: number = array[index7];\n\t\tconst tempA: number = (real5 - imag7) * sqrt2over2;\n\t\tconst tempB: number = (real5 + imag7) * sqrt2over2;\n\t\t\tarray[index ] = real0 + real4;\n\t\tarray[index1] = real1 + tempA;\n\t\tarray[index3] = real1 - tempA;\n\t\tarray[index4] = real0 - real4;\n\t\tarray[index5] = tempB - imag3;\n\t\tarray[index7] = tempB + imag3;\n\t}\n\t\t\n\t// Handle remaining passes.\n\tfor (let pass: number = 3; pass < totalPasses; pass++) {\n\t\tconst subStride: number = 1 << pass;\n\t\tconst midSubStride: number = subStride >> 1;\n\t\tconst stride: number = subStride << 1;\n\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\n\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\n\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\n\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\n\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\n\t\t\tconst startIndexA: number = startIndex;\n\t\t\tconst startIndexB: number = startIndexA + subStride;\n\t\t\tconst stopIndex: number = startIndexB + subStride;\n\t\t\tconst realStartA: number = array[startIndexA];\n\t\t\tconst realStartB: number = array[startIndexB];\n\t\t\tarray[startIndexA] = realStartA + realStartB;\n\t\t\tarray[startIndexB] = realStartA - realStartB;\n\t\t\tlet c: number = cosIncrement;\n\t\t\tlet s: number = -sinIncrement;\n\t\t\tlet cPrev: number = 1.0;\n\t\t\tlet sPrev: number = 0.0;\n\t\t\tfor (let index: number = 1; index < midSubStride; index++) {\n\t\t\t\tconst indexA0: number = startIndexA + index;\n\t\t\t\tconst indexA1: number = startIndexB - index;\n\t\t\t\tconst indexB0: number = startIndexB + index;\n\t\t\t\t\tconst indexB1: number = stopIndex   - index;\n\t\t\t\tconst real0: number = array[indexA0];\n\t\t\t\tconst imag0: number = array[indexA1];\n\t\t\t\tconst real1: number = array[indexB0];\n\t\t\t\tconst imag1: number = array[indexB1];\n\t\t\t\tconst tempA: number = real1 * c + imag1 * s;\n\t\t\t\tconst tempB: number = real1 * s - imag1 * c;\n\t\t\t\tarray[indexA0] = real0 + tempA;\n\t\t\t\tarray[indexA1] = real0 - tempA;\n\t\t\t\t\tarray[indexB0] =-imag0 - tempB;\n\t\t\t\tarray[indexB1] = imag0 - tempB;\n\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\n\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\n\t\t\t\tcPrev = c;\n\t\t\t\tsPrev = s;\n\t\t\t\tc = cTemp;\n\t\t\t\ts = sTemp;\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Computes the inverse Fourier transform from a specially formatted array of\n// scalar values. Elements 0 through N/2 are expected to be the real values of\n// the corresponding complex elements, representing cosine wave amplitudes in\n// ascending frequency, and elements N/2+1 through N-1 correspond to the\n// imaginary values, representing sine wave amplitudes in descending frequency.\n// Generates real-valued time-domain samples. Overwrites the input array.\nexport function inverseRealFourierTransform(array: NumberArray, fullArrayLength: number): void {\n\tconst totalPasses: number = countBits(fullArrayLength);\n\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\n\n\t// Perform all but the last few passes in reverse.\n\tfor (let pass: number = totalPasses - 1; pass >= 2; pass--) {\n\t\tconst subStride: number = 1 << pass;\n\t\tconst midSubStride: number = subStride >> 1;\n\t\tconst stride: number = subStride << 1;\n\t\tconst radiansIncrement: number = Math.PI * 2.0 / stride;\n\t\tconst cosIncrement: number = Math.cos(radiansIncrement);\n\t\tconst sinIncrement: number = Math.sin(radiansIncrement);\n\t\tconst oscillatorMultiplier: number = 2.0 * cosIncrement;\n\t\t\t\n\t\tfor (let startIndex: number = 0; startIndex < fullArrayLength; startIndex += stride) {\n\t\t\tconst startIndexA: number = startIndex;\n\t\t\tconst midIndexA: number = startIndexA + midSubStride;\n\t\t\tconst startIndexB: number = startIndexA + subStride;\n\t\t\tconst midIndexB: number = startIndexB + midSubStride;\n\t\t\tconst stopIndex: number = startIndexB + subStride;\n\t\t\tconst realStartA: number = array[startIndexA];\n\t\t\tconst imagStartB: number = array[startIndexB];\n\t\t\tarray[startIndexA] = realStartA + imagStartB;\n\t\t\tarray[midIndexA] *= 2;\n\t\t\tarray[startIndexB] = realStartA - imagStartB;\n\t\t\tarray[midIndexB] *= 2;\n\t\t\tlet c: number = cosIncrement;\n\t\t\tlet s: number = -sinIncrement;\n\t\t\tlet cPrev: number = 1.0;\n\t\t\tlet sPrev: number = 0.0;\n\t\t\tfor (let index: number = 1; index < midSubStride; index++) {\n\t\t\t\tconst indexA0: number = startIndexA + index;\n\t\t\t\tconst indexA1: number = startIndexB - index;\n\t\t\t\tconst indexB0: number = startIndexB + index;\n\t\t\t\t\tconst indexB1: number = stopIndex   - index;\n\t\t\t\tconst real0: number = array[indexA0];\n\t\t\t\tconst real1: number = array[indexA1];\n\t\t\t\tconst imag0: number = array[indexB0];\n\t\t\t\tconst imag1: number = array[indexB1];\n\t\t\t\tconst tempA: number = real0 - real1;\n\t\t\t\tconst tempB: number = imag0 + imag1;\n\t\t\t\tarray[indexA0] = real0 + real1;\n\t\t\t\tarray[indexA1] = imag1 - imag0;\n\t\t\t\tarray[indexB0] = tempA * c - tempB * s;\n\t\t\t\tarray[indexB1] = tempB * c + tempA * s;\n\t\t\t\tconst cTemp: number = oscillatorMultiplier * c - cPrev;\n\t\t\t\tconst sTemp: number = oscillatorMultiplier * s - sPrev;\n\t\t\t\tcPrev = c;\n\t\t\t\tsPrev = s;\n\t\t\t\tc = cTemp;\n\t\t\t\ts = sTemp;\n\t\t\t}\n\t\t}\n\t}\n\t/*\n\t// Commented out this block (and compensated with an extra pass above)\n\t// because it's slower in my testing so far.\n\t// Pass with stride 8.\n\tconst sqrt2over2: number = Math.sqrt(2.0) / 2.0;\n\tfor (let index: number = 0; index < fullArrayLength; index += 8) {\n\t\tconst index1: number = index + 1;\n\t\tconst index2: number = index + 2;\n\t\tconst index3: number = index + 3;\n\t\tconst index4: number = index + 4;\n\t\tconst index5: number = index + 5;\n\t\tconst index6: number = index + 6;\n\t\tconst index7: number = index + 7;\n\t\tconst real0: number = array[index ];\n\t\tconst real1: number = array[index1];\n\t\tconst real2: number = array[index2];\n\t\tconst real3: number = array[index3];\n\t\tconst imag4: number = array[index4];\n\t\tconst imag5: number = array[index5];\n\t\tconst imag6: number = array[index6];\n\t\tconst imag7: number = array[index7];\n\t\tconst tempA: number = real1 - real3;\n\t\tconst tempB: number = imag5 + imag7;\n\t\tarray[index ] = real0 + imag4;\n\t\tarray[index1] = real1 + real3;\n\t\tarray[index2] = real2 * 2;\n\t\tarray[index3] = imag7 - imag5;\n\t\tarray[index4] = real0 - imag4;\n\t\tarray[index5] = (tempA + tempB) * sqrt2over2;\n\t\tarray[index6] = imag6 * 2;\n\t\tarray[index7] = (tempB - tempA) * sqrt2over2;\n\t}\n\t*/\n\t// The final passes with strides 4 and 2, combined into one loop.\n\tfor (let index: number = 0; index < fullArrayLength; index += 4) {\n\t\tconst index1: number = index + 1;\n\t\tconst index2: number = index + 2;\n\t\tconst index3: number = index + 3;\n\t\t\tconst real0: number = array[index ];\n\t\tconst real1: number = array[index1] * 2;\n\t\tconst imag2: number = array[index2];\n\t\tconst imag3: number = array[index3] * 2;\n\t\tconst tempA: number = real0 + imag2;\n\t\tconst tempB: number = real0 - imag2;\n\t\t\tarray[index ] = tempA + real1;\n\t\tarray[index1] = tempA - real1;\n\t\tarray[index2] = tempB + imag3;\n\t\tarray[index3] = tempB - imag3;\n\t}\n\t\t\n\treverseIndexBits(array, fullArrayLength);\n}\n", "// Copyright (c) John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { FilterType, EffectType, EnvelopeComputeIndex, Config, GranularEnvelopeType, calculateRingModHertz } from \"./SynthConfig\";\nimport { DynamicBiquadFilter } from \"./filtering\";\nimport { Instrument } from \"./Instrument\";\nimport { InstrumentState } from \"./InstrumentState\";\nimport { Effect } from \"./Effect\";\nimport { Synth, Tone } from \"./synth\";\nimport { FilterSettings, FilterControlPoint } from \"./Filter\";\nimport { fittingPowerOfTwo } from \"./utils\";\n\nclass Grain {\n\tdelayLinePosition: number; // Relative to latest sample\n\n\tageInSamples: number;\n\tmaxAgeInSamples: number;\n\tdelay: number;\n\n\t//parabolic envelope implementation\n\tparabolicEnvelopeAmplitude: number;\n\tparabolicEnvelopeSlope: number;\n\tparabolicEnvelopeCurve: number;\n\n\t//raised cosine bell envelope implementation\n\trcbEnvelopeAmplitude: number;\n\trcbEnvelopeAttackIndex: number;\n\trcbEnvelopeReleaseIndex: number;\n\trcbEnvelopeSustain: number;\n\n\tconstructor() {\n\t\tthis.delayLinePosition = 0;\n\n\t\tthis.ageInSamples = 0;\n\t\tthis.maxAgeInSamples = 0;\n\t\tthis.delay = 0;\n\n\t\tthis.parabolicEnvelopeAmplitude = 0;\n\t\tthis.parabolicEnvelopeSlope = 0;\n\t\tthis.parabolicEnvelopeCurve = 0;\n\n\t\tthis.rcbEnvelopeAmplitude = 0;\n\t\tthis.rcbEnvelopeAttackIndex = 0;\n\t\tthis.rcbEnvelopeReleaseIndex = 0;\n\t\tthis.rcbEnvelopeSustain = 0;\n\t}\n\n\tinitializeParabolicEnvelope(durationInSamples: number, amplitude: number): void {\n\t\tthis.parabolicEnvelopeAmplitude = 0;\n\t\tconst invDuration: number = 1.0 / durationInSamples;\n\t\tconst invDurationSquared: number = invDuration * invDuration;\n\t\tthis.parabolicEnvelopeSlope = 4.0 * amplitude * (invDuration - invDurationSquared);\n\t\tthis.parabolicEnvelopeCurve = -8.0 * amplitude * invDurationSquared;\n\t}\n\n\tupdateParabolicEnvelope(): void {\n\t\tthis.parabolicEnvelopeAmplitude += this.parabolicEnvelopeSlope;\n\t\tthis.parabolicEnvelopeSlope += this.parabolicEnvelopeCurve;\n\t}\n\n\tinitializeRCBEnvelope(durationInSamples: number, amplitude: number): void {\n\t\t// attack:\n\t\tthis.rcbEnvelopeAttackIndex = Math.floor(durationInSamples / 6);\n\t\t// sustain:\n\t\tthis.rcbEnvelopeSustain = amplitude;\n\t\t// release:\n\t\tthis.rcbEnvelopeReleaseIndex = Math.floor(durationInSamples * 5 / 6);\n\t}\n\n\tupdateRCBEnvelope(): void {\n\t\tif (this.ageInSamples < this.rcbEnvelopeAttackIndex) { //attack\n\t\t\tthis.rcbEnvelopeAmplitude = (1.0 + Math.cos(Math.PI + (Math.PI * (this.ageInSamples / this.rcbEnvelopeAttackIndex) * (this.rcbEnvelopeSustain / 2.0))));\n\t\t} else if (this.ageInSamples > this.rcbEnvelopeReleaseIndex) { //release\n\t\t\tthis.rcbEnvelopeAmplitude = (1.0 + Math.cos(Math.PI * ((this.ageInSamples - this.rcbEnvelopeReleaseIndex) / this.rcbEnvelopeAttackIndex)) * (this.rcbEnvelopeSustain / 2.0));\n\t\t} //sustain covered by the end of attack\n\t}\n\n\taddDelay(delay: number): void {\n\t\tthis.delay = delay;\n\t}\n}\n\nexport class EffectState {\n\ttype: EffectType = EffectType.reverb;\n\n\teqFilterVolume: number = 1.0;\n\teqFilterVolumeDelta: number = 0.0;\n\n\tgranularMix: number = 1.0;\n\tgranularMixDelta: number = 0.0;\n\tgranularDelayLineL: Float32Array | null = null;\n\tgranularDelayLineR: Float32Array | null = null;\n\tgranularDelayLineIndex: number = 0;\n\tgranularMaximumDelayTimeInSeconds: number = 1;\n\tgranularGrains: Grain[];\n\tgranularGrainsLength: number;\n\tgranularMaximumGrains: number;\n\tusesRandomGrainLocation: boolean = true; //eventually I might use the granular code for sample pitch shifting, but we'll see\n\tgranularDelayLineDirty: boolean = false;\n\tcomputeGrains: boolean = true;\n\n\tringModMix: number = 0;\n\tringModMixDelta: number = 0;\n\tringModPhase: number = 0;\n\tringModPhaseDelta: number = 0;\n\tringModPhaseDeltaScale: number = 1.0;\n\tringModWaveformIndex: number = 0.0;\n\tringModPulseWidth: number = 0.0;\n\tringModHzOffset: number = 0.0;\n\tringModMixFade: number = 1.0;\n\tringModMixFadeDelta: number = 0;\n\n\tdistortion: number = 0.0;\n\tdistortionDelta: number = 0.0;\n\tdistortionDrive: number = 0.0;\n\tdistortionDriveDelta: number = 0.0;\n\tdistortionFractionalInputL1: number = 0.0;\n\tdistortionFractionalInputL2: number = 0.0;\n\tdistortionFractionalInputL3: number = 0.0;\n\tdistortionFractionalInputR1: number = 0.0;\n\tdistortionFractionalInputR2: number = 0.0;\n\tdistortionFractionalInputR3: number = 0.0;\n\tdistortionPrevInputL: number = 0.0;\n\tdistortionPrevInputR: number = 0.0;\n\tdistortionNextOutputL: number = 0.0;\n\tdistortionNextOutputR: number = 0.0;\n\n\tbitcrusherPrevInputL: number = 0.0;\n\tbitcrusherPrevInputR: number = 0.0;\n\tbitcrusherCurrentOutputL: number = 0.0;\n\tbitcrusherCurrentOutputR: number = 0.0;\n\tbitcrusherPhase: number = 1.0;\n\tbitcrusherPhaseDelta: number = 0.0;\n\tbitcrusherPhaseDeltaScale: number = 1.0;\n\tbitcrusherScale: number = 1.0;\n\tbitcrusherScaleScale: number = 1.0;\n\tbitcrusherFoldLevel: number = 1.0;\n\tbitcrusherFoldLevelScale: number = 1.0;\n\n\treadonly eqFiltersL: DynamicBiquadFilter[] = [];\n\treadonly eqFiltersR: DynamicBiquadFilter[] = [];\n\teqFilterCount: number = 0;\n\tinitialEqFilterInputL1: number = 0.0;\n\tinitialEqFilterInputR1: number = 0.0;\n\tinitialEqFilterInputL2: number = 0.0;\n\tinitialEqFilterInputR2: number = 0.0;\n\n\tgain: number = 1.0;\n\tgainDelta: number = 0.0;\n\n\tpanningDelayLineL: Float32Array | null = null;\n\tpanningDelayLineR: Float32Array | null = null;\n\tpanningDelayPos: number = 0;\n\tpanningVolumeL: number = 0.0;\n\tpanningVolumeR: number = 0.0;\n\tpanningVolumeDeltaL: number = 0.0;\n\tpanningVolumeDeltaR: number = 0.0;\n\tpanningOffsetL: number = 0.0;\n\tpanningOffsetR: number = 0.0;\n\tpanningOffsetDeltaL: number = 0.0;\n\tpanningOffsetDeltaR: number = 0.0;\n\tpanningMode: number = 0;\n\n\tflangerDelayLineL: Float32Array | null = null;\n\tflangerDelayLineR: Float32Array | null = null;\n\tflangerDelayLineDirty: boolean = false;\n\tflangerDelayPos: number = 0;\n\tflanger: number = 0;\n\tflangerDelta: number = 0;\n\tflangerSpeed: number = 0;\n\tflangerSpeedDelta: number = 0;\n\tflangerDepth: number = 0;\n\tflangerDepthDelta: number = 0;\n\tflangerFeedback: number = 0;\n\tflangerFeedbackDelta: number = 0;\n\tflangerPhase: number = 0;\n\n\tchorusDelayLineL: Float32Array | null = null;\n\tchorusDelayLineR: Float32Array | null = null;\n\tchorusDelayLineDirty: boolean = false;\n\tchorusDelayPos: number = 0;\n\tchorusPhase: number = 0;\n\tchorusVoiceMult: number = 0;\n\tchorusVoiceMultDelta: number = 0;\n\tchorusCombinedMult: number = 0;\n\tchorusCombinedMultDelta: number = 0;\n\n\techoDelayLineL: Float32Array | null = null;\n\techoDelayLineR: Float32Array | null = null;\n\techoDelayLineDirty: boolean = false;\n\techoDelayPosL: number = 0;\n\techoDelayPosR: number = 0;\n\techoDelayOffsetStart: number = 0;\n\techoDelayOffsetEnd: number | null = null;\n\techoDelayOffsetRatio: number = 0.0;\n\techoDelayOffsetRatioDelta: number = 0.0;\n\techoMult: number = 0.0;\n\techoMultDelta: number = 0.0;\n\techoPingPong: number = 0.0;\n\techoShelfA1: number = 0.0;\n\techoShelfB0: number = 0.0;\n\techoShelfB1: number = 0.0;\n\techoShelfSampleL: number = 0.0;\n\techoShelfSampleR: number = 0.0;\n\techoShelfPrevInputL: number = 0.0;\n\techoShelfPrevInputR: number = 0.0;\n\n\treverbDelayLine: Float32Array | null = null;\n\treverbDelayLineDirty: boolean = false;\n\treverbDelayPos: number = 0;\n\treverbMult: number = 0.0;\n\treverbMultDelta: number = 0.0;\n\treverbShelfA1: number = 0.0;\n\treverbShelfB0: number = 0.0;\n\treverbShelfB1: number = 0.0;\n\treverbShelfSample0: number = 0.0;\n\treverbShelfSample1: number = 0.0;\n\treverbShelfSample2: number = 0.0;\n\treverbShelfSample3: number = 0.0;\n\treverbShelfPrevInput0: number = 0.0;\n\treverbShelfPrevInput1: number = 0.0;\n\treverbShelfPrevInput2: number = 0.0;\n\treverbShelfPrevInput3: number = 0.0;\n\n\tconstructor(type: EffectType) {\n\t\tthis.type = type;\n\t\t// Allocate all grains to be used ahead of time.\n\t\t// granularGrainsLength is what indicates how many grains actually \"exist\".\n\t\tthis.granularGrains = [];\n\t\tthis.granularMaximumGrains = 256;\n\t\tfor (let i: number = 0; i < this.granularMaximumGrains; i++) {\n\t\t\tthis.granularGrains.push(new Grain());\n\t\t}\n\t\tthis.granularGrainsLength = 0;\n\t}\n\n\treset(): void {\n\t\tif (this.chorusDelayLineDirty) {\n\t\t\tfor (let i: number = 0; i < this.chorusDelayLineL!.length; i++) this.chorusDelayLineL![i] = 0.0;\n\t\t\tfor (let i: number = 0; i < this.chorusDelayLineR!.length; i++) this.chorusDelayLineR![i] = 0.0;\n\t\t}\n\t\tif (this.flangerDelayLineDirty) {\n\t\t\tfor (let i: number = 0; i < this.flangerDelayLineL!.length; i++) this.flangerDelayLineL![i] = 0.0;\n\t\t\tfor (let i: number = 0; i < this.flangerDelayLineR!.length; i++) this.flangerDelayLineR![i] = 0.0;\n\t\t}\n\t\tif (this.echoDelayLineDirty) {\n\t\t\tfor (let i: number = 0; i < this.echoDelayLineL!.length; i++) this.echoDelayLineL![i] = 0.0;\n\t\t\tfor (let i: number = 0; i < this.echoDelayLineR!.length; i++) this.echoDelayLineR![i] = 0.0;\n\t\t}\n\t\tif (this.reverbDelayLineDirty) {\n\t\t\tfor (let i: number = 0; i < this.reverbDelayLine!.length; i++) this.reverbDelayLine![i] = 0.0;\n\t\t}\n\t\tif (this.granularDelayLineDirty) {\n\t\t\tfor (let i: number = 0; i < this.granularDelayLineL!.length; i++) this.granularDelayLineL![i] = 0.0;\n\t\t\tfor (let i: number = 0; i < this.granularDelayLineR!.length; i++) this.granularDelayLineR![i] = 0.0;\n\t\t}\n\n\t\tthis.flangerPhase = 0.0;\n\t\tthis.chorusPhase = 0.0;\n\t\tthis.ringModPhase = 0.0;\n\t\tthis.ringModMixFade = 1.0;\n\t}\n\n\tallocateNecessaryBuffers(synth: Synth, instrument: Instrument, effect: Effect, samplesPerTick: number): void {\n\t\tif (effect.type == EffectType.panning) {\n\t\t\tif (this.panningDelayLineL == null || this.panningDelayLineR == null || this.panningDelayLineL.length < synth.panningDelayBufferSize || this.panningDelayLineR.length < synth.panningDelayBufferSize) {\n\t\t\t\tthis.panningDelayLineL = new Float32Array(synth.panningDelayBufferSize);\n\t\t\t\tthis.panningDelayLineR = new Float32Array(synth.panningDelayBufferSize);\n\t\t\t}\n\t\t}\n\t\tif (effect.type == EffectType.chorus) {\n\t\t\tif (this.chorusDelayLineL == null || this.chorusDelayLineL.length < synth.chorusDelayBufferSize) {\n\t\t\t\tthis.chorusDelayLineL = new Float32Array(synth.chorusDelayBufferSize);\n\t\t\t}\n\t\t\tif (this.chorusDelayLineR == null || this.chorusDelayLineR.length < synth.chorusDelayBufferSize) {\n\t\t\t\tthis.chorusDelayLineR = new Float32Array(synth.chorusDelayBufferSize);\n\t\t\t}\n\t\t}\n\t\tif (effect.type == EffectType.flanger) {\n\t\t\tif (this.flangerDelayLineL == null || this.flangerDelayLineL.length < synth.flangerDelayBufferSize) {\n\t\t\t\tthis.flangerDelayLineL = new Float32Array(synth.flangerDelayBufferSize);\n\t\t\t}\n\t\t\tif (this.flangerDelayLineR == null || this.flangerDelayLineR.length < synth.flangerDelayBufferSize) {\n\t\t\t\tthis.flangerDelayLineR = new Float32Array(synth.flangerDelayBufferSize);\n\t\t\t}\n\t\t}\n\t\tif (effect.type == EffectType.echo) {\n\t\t\tthis.allocateEchoBuffers(samplesPerTick, effect.echoDelay);\n\t\t}\n\t\tif (effect.type == EffectType.reverb) {\n\t\t\t// TODO: Make reverb delay line sample rate agnostic. Maybe just double buffer size for 96KHz? Adjust attenuation and shelf cutoff appropriately?\n\t\t\tif (this.reverbDelayLine == null) {\n\t\t\t\tthis.reverbDelayLine = new Float32Array(Config.reverbDelayBufferSize);\n\t\t\t}\n\t\t}\n\t\tif (effect.type == EffectType.granular) {\n\t\t\tconst granularDelayLineSizeInMilliseconds: number = 2500;\n\t\t\tconst granularDelayLineSizeInSeconds: number = granularDelayLineSizeInMilliseconds / 1000; // Maximum possible delay time\n\t\t\tthis.granularMaximumDelayTimeInSeconds = granularDelayLineSizeInSeconds;\n\t\t\tconst granularDelayLineSizeInSamples: number = fittingPowerOfTwo(Math.floor(granularDelayLineSizeInSeconds * synth.samplesPerSecond));\n\t\t\tif (this.granularDelayLineL == null || this.granularDelayLineR == null || this.granularDelayLineL.length != granularDelayLineSizeInSamples || this.granularDelayLineR.length != granularDelayLineSizeInSamples) {\n\t\t\t\tthis.granularDelayLineL = new Float32Array(granularDelayLineSizeInSamples);\n\t\t\t\tthis.granularDelayLineR = new Float32Array(granularDelayLineSizeInSamples);\n\t\t\t\tthis.granularDelayLineIndex = 0;\n\t\t\t}\n\t\t\tconst oldGrainsLength: number = this.granularGrains.length;\n\t\t\tif (this.granularMaximumGrains > oldGrainsLength) { //increase grain amount if it changes\n\t\t\t\tfor (let i: number = oldGrainsLength; i < this.granularMaximumGrains+1; i++) {\n\t\t\t\t\tthis.granularGrains.push(new Grain());\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this.granularMaximumGrains < this.granularGrainsLength) {\n\t\t\t\tthis.granularGrainsLength = Math.round(this.granularMaximumGrains);\n\t\t\t}\n\t\t}\n\t}\n\n\tallocateEchoBuffers(samplesPerTick: number, echoDelay: number) {\n\t\t// account for tempo and delay automation changing delay length during a tick?\n\t\tconst safeEchoDelaySteps: number = Math.max(Config.echoDelayRange >> 1, (echoDelay + 1)); // The delay may be very short now, but if it increases later make sure we have enough sample history.\n\t\tconst baseEchoDelayBufferSize: number = fittingPowerOfTwo(safeEchoDelaySteps * Config.echoDelayStepTicks * samplesPerTick);\n\t\tconst safeEchoDelayBufferSize: number = baseEchoDelayBufferSize * 2; // If the tempo or delay changes and we suddenly need a longer delay, make sure that we have enough sample history to accomodate the longer delay.\n\n\t\tif (this.echoDelayLineL == null || this.echoDelayLineR == null) {\n\t\t\tthis.echoDelayLineL = new Float32Array(safeEchoDelayBufferSize);\n\t\t\tthis.echoDelayLineR = new Float32Array(safeEchoDelayBufferSize);\n\t\t} else if (this.echoDelayLineL.length < safeEchoDelayBufferSize || this.echoDelayLineR.length < safeEchoDelayBufferSize) {\n\t\t\t// The echo delay length may change while the song is playing if tempo changes,\n\t\t\t// so buffers may need to be reallocated, but we don't want to lose any echoes\n\t\t\t// so we need to copy the contents of the old buffer to the new one.\n\t\t\tconst newDelayLineL: Float32Array = new Float32Array(safeEchoDelayBufferSize);\n\t\t\tconst newDelayLineR: Float32Array = new Float32Array(safeEchoDelayBufferSize);\n\t\t\tconst oldMask: number = this.echoDelayLineL.length - 1;\n\n\t\t\tfor (let i = 0; i < this.echoDelayLineL.length; i++) {\n\t\t\t\tnewDelayLineL[i] = this.echoDelayLineL[(this.echoDelayPosL + i) & oldMask];\n\t\t\t\tnewDelayLineR[i] = this.echoDelayLineR[(this.echoDelayPosR + i) & oldMask];\n\t\t\t}\n\n\t\t\tthis.echoDelayPosL = this.echoDelayLineL.length;\n\t\t\tthis.echoDelayPosR = this.echoDelayLineR.length;\n\t\t\tthis.echoDelayLineL = newDelayLineL;\n\t\t\tthis.echoDelayLineR = newDelayLineR;\n\t\t}\n\t}\n\n\tdeactivate(): void {\n\t\tthis.bitcrusherPrevInputL = 0.0;\n\t\tthis.bitcrusherPrevInputR = 0.0;\n\t\tthis.bitcrusherCurrentOutputL = 0.0;\n\t\tthis.bitcrusherCurrentOutputR = 0.0;\n\t\tthis.bitcrusherPhase = 1.0;\n\t\tfor (let i: number = 0; i < this.eqFilterCount; i++) {\n\t\t\tthis.eqFiltersL[i].resetOutput();\n\t\t\tthis.eqFiltersR[i].resetOutput();\n\t\t}\n\t\tthis.eqFilterCount = 0;\n\t\tthis.initialEqFilterInputL1 = 0.0;\n\t\tthis.initialEqFilterInputR1 = 0.0;\n\t\tthis.initialEqFilterInputL2 = 0.0;\n\t\tthis.initialEqFilterInputR2 = 0.0;\n\t\tthis.distortionFractionalInputL1 = 0.0;\n\t\tthis.distortionFractionalInputL2 = 0.0;\n\t\tthis.distortionFractionalInputL3 = 0.0;\n\t\tthis.distortionFractionalInputR1 = 0.0;\n\t\tthis.distortionFractionalInputR2 = 0.0;\n\t\tthis.distortionFractionalInputR3 = 0.0;\n\t\tthis.distortionPrevInputL = 0.0;\n\t\tthis.distortionPrevInputR = 0.0;\n\t\tthis.distortionNextOutputL = 0.0;\n\t\tthis.distortionNextOutputR = 0.0;\n\t\tthis.flangerDelayPos = 0;\n\t\tthis.panningDelayPos = 0;\n\t\tif (this.panningDelayLineL != null) for (let i: number = 0; i < this.panningDelayLineL.length; i++) this.panningDelayLineL[i] = 0.0;\n\t\tif (this.panningDelayLineR != null) for (let i: number = 0; i < this.panningDelayLineR.length; i++) this.panningDelayLineR[i] = 0.0;\n\t\tthis.echoDelayOffsetEnd = null;\n\t\tthis.echoShelfSampleL = 0.0;\n\t\tthis.echoShelfSampleR = 0.0;\n\t\tthis.echoShelfPrevInputL = 0.0;\n\t\tthis.echoShelfPrevInputR = 0.0;\n\t\tthis.reverbShelfSample0 = 0.0;\n\t\tthis.reverbShelfSample1 = 0.0;\n\t\tthis.reverbShelfSample2 = 0.0;\n\t\tthis.reverbShelfSample3 = 0.0;\n\t\tthis.reverbShelfPrevInput0 = 0.0;\n\t\tthis.reverbShelfPrevInput1 = 0.0;\n\t\tthis.reverbShelfPrevInput2 = 0.0;\n\t\tthis.reverbShelfPrevInput3 = 0.0;\n\t}\n\n\tcompute(synth: Synth, instrument: Instrument, effect: Effect, instrumentState: InstrumentState, samplesPerTick: number, roundedSamplesPerTick: number, tone: Tone | null, channelIndex: number, instrumentIndex: number, envelopeStarts: number[], envelopeEnds: number[]): void {\n\t\tconst samplesPerSecond: number = synth.samplesPerSecond;\n\n\t\tthis.type = effect.type;\n\n\t\tconst usesGranular: boolean = effect.type == EffectType.granular;\n\t\tconst usesRingModulation: boolean = effect.type == EffectType.ringModulation;\n\t\tconst usesDistortion: boolean = effect.type == EffectType.distortion;\n\t\tconst usesBitcrusher: boolean = effect.type == EffectType.bitcrusher;\n\t\tconst usesGain: boolean = effect.type == EffectType.gain;\n\t\tconst usesPanning: boolean = effect.type == EffectType.panning;\n\t\tconst usesFlanger: boolean = effect.type == EffectType.flanger;\n\t\tconst usesChorus: boolean = effect.type == EffectType.chorus;\n\t\tconst usesEcho: boolean = effect.type == EffectType.echo;\n\t\tconst usesReverb: boolean = effect.type == EffectType.reverb;\n\t\tconst usesEQFilter: boolean = effect.type == EffectType.eqFilter;\n\n\t\tif (usesGranular) { //has to happen before buffer allocation\n\t\t\tthis.granularMaximumGrains = Math.pow(2, effect.grainAmounts * envelopeStarts[EnvelopeComputeIndex.grainAmount]);\n\t\t\tif (synth.isModActive(Config.modulators.dictionary[\"grain freq\"].index, channelIndex, instrumentIndex)) {\n\t\t\t\tthis.granularMaximumGrains = Math.pow(2, synth.getModValue(Config.modulators.dictionary[\"grain freq\"].index, channelIndex, instrumentIndex, false) * envelopeStarts[EnvelopeComputeIndex.grainAmount]);\n\t\t\t}\n\t\t\tthis.granularMaximumGrains == Math.floor(this.granularMaximumGrains);\n\t\t}\n\n\t\tthis.allocateNecessaryBuffers(synth, instrument, effect, samplesPerTick);\n\n\t\tif (usesGranular) {\n\t\t\tthis.granularMix = effect.granular / Config.granularRange;\n\t\t\tthis.computeGrains = true;\n\t\t\tlet granularMixEnd = this.granularMix;\n\t\t\tif (synth.isModActive(Config.modulators.dictionary[\"granular\"].index, channelIndex, instrumentIndex)) {\n\t\t\t\tthis.granularMix = synth.getModValue(Config.modulators.dictionary[\"granular\"].index, channelIndex, instrumentIndex, false) / Config.granularRange;\n\t\t\t\tgranularMixEnd = synth.getModValue(Config.modulators.dictionary[\"granular\"].index, channelIndex, instrumentIndex, true) / Config.granularRange;\n\t\t\t}\n\t\t\tthis.granularMix *= envelopeStarts[EnvelopeComputeIndex.granular];\n\t\t\tgranularMixEnd *= envelopeEnds[EnvelopeComputeIndex.granular];\n\t\t\tthis.granularMixDelta = (granularMixEnd - this.granularMix) / roundedSamplesPerTick;\n\t\t\tfor (let iterations: number = 0; iterations < Math.ceil(Math.random() * Math.random() * 10); iterations++) { //dirty weighting toward lower numbers\n\t\t\t\t//create a grain\n\t\t\t\tif (this.granularGrainsLength < this.granularMaximumGrains) {\n\t\t\t\t\tlet granularMinGrainSizeInMilliseconds: number = effect.grainSize;\n\t\t\t\t\tif (synth.isModActive(Config.modulators.dictionary[\"grain size\"].index, channelIndex, instrumentIndex)) {\n\t\t\t\t\t\tgranularMinGrainSizeInMilliseconds = synth.getModValue(Config.modulators.dictionary[\"grain size\"].index, channelIndex, instrumentIndex, false);\n\t\t\t\t\t}\n\t\t\t\t\tgranularMinGrainSizeInMilliseconds *= envelopeStarts[EnvelopeComputeIndex.grainSize];\n\t\t\t\t\tlet grainRange = effect.grainRange;\n\t\t\t\t\tif (synth.isModActive(Config.modulators.dictionary[\"grain range\"].index, channelIndex, instrumentIndex)) {\n\t\t\t\t\t\tgrainRange = synth.getModValue(Config.modulators.dictionary[\"grain range\"].index, channelIndex, instrumentIndex, false);\n\t\t\t\t\t}\n\t\t\t\t\tgrainRange *= envelopeStarts[EnvelopeComputeIndex.grainRange];\n\t\t\t\t\tconst granularMaxGrainSizeInMilliseconds: number = granularMinGrainSizeInMilliseconds + grainRange;\n\t\t\t\t\tconst granularGrainSizeInMilliseconds: number = granularMinGrainSizeInMilliseconds + (granularMaxGrainSizeInMilliseconds - granularMinGrainSizeInMilliseconds) * Math.random();\n\t\t\t\t\tconst granularGrainSizeInSeconds: number = granularGrainSizeInMilliseconds / 1000.0;\n\t\t\t\t\tconst granularGrainSizeInSamples: number = Math.floor(granularGrainSizeInSeconds * samplesPerSecond);\n\t\t\t\t\tconst granularDelayLineLength: number = this.granularDelayLineL!.length;\n\t\t\t\t\tconst grainIndex: number = this.granularGrainsLength;\n\n\t\t\t\t\tthis.granularGrainsLength++;\n\t\t\t\t\tconst grain: Grain = this.granularGrains[grainIndex];\n\t\t\t\t\tgrain.ageInSamples = 0;\n\t\t\t\t\tgrain.maxAgeInSamples = granularGrainSizeInSamples;\n\t\t\t\t\t// const minDelayTimeInMilliseconds: number = 2;\n\t\t\t\t\t// const minDelayTimeInSeconds: number = minDelayTimeInMilliseconds / 1000.0;\n\t\t\t\t\tconst minDelayTimeInSeconds: number = 0.02;\n\t\t\t\t\t// const maxDelayTimeInSeconds: number = this.granularMaximumDelayTimeInSeconds;\n\t\t\t\t\tconst maxDelayTimeInSeconds: number = 2.4;\n\t\t\t\t\tgrain.delayLinePosition = this.usesRandomGrainLocation ? (minDelayTimeInSeconds + (maxDelayTimeInSeconds - minDelayTimeInSeconds) * Math.random() * Math.random() * samplesPerSecond) % (granularDelayLineLength - 1) : minDelayTimeInSeconds; //dirty weighting toward lower numbers ; The clamp was clumping everything at the end, so I decided to use a modulo instead\n\t\t\t\t\tif (Config.granularEnvelopeType == GranularEnvelopeType.parabolic) {\n\t\t\t\t\t\tgrain.initializeParabolicEnvelope(grain.maxAgeInSamples, 1.0);\n\t\t\t\t\t} else if (Config.granularEnvelopeType == GranularEnvelopeType.raisedCosineBell) {\n\t\t\t\t\t\tgrain.initializeRCBEnvelope(grain.maxAgeInSamples, 1.0);\n\t\t\t\t\t}\n\t\t\t\t\t// if (this.usesRandomGrainLocation) {\n\t\t\t\t\tgrain.addDelay(Math.random() * samplesPerTick * 4); //offset when grains begin playing ; This is different from the above delay, which delays how far back in time the grain looks for samples\n\t\t\t\t\t// }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (usesDistortion) {\n\t\t\tlet useDistortionStart: number = effect.distortion;\n\t\t\tlet useDistortionEnd: number = effect.distortion;\n\n\t\t\t// Check for distortion mods\n\t\t\tif (synth.isModActive(Config.modulators.dictionary[\"distortion\"].index, channelIndex, instrumentIndex)) {\n\t\t\t\tuseDistortionStart = synth.getModValue(Config.modulators.dictionary[\"distortion\"].index, channelIndex, instrumentIndex, false);\n\t\t\t\tuseDistortionEnd = synth.getModValue(Config.modulators.dictionary[\"distortion\"].index, channelIndex, instrumentIndex, true);\n\t\t\t}\n\n\t\t\tconst distortionSliderStart = Math.min(1.0, envelopeStarts[EnvelopeComputeIndex.distortion] * useDistortionStart / (Config.distortionRange - 1));\n\t\t\tconst distortionSliderEnd = Math.min(1.0, envelopeEnds[EnvelopeComputeIndex.distortion] * useDistortionEnd / (Config.distortionRange - 1));\n\t\t\tconst distortionStart: number = Math.pow(1.0 - 0.895 * (Math.pow(20.0, distortionSliderStart) - 1.0) / 19.0, 2.0);\n\t\t\tconst distortionEnd: number = Math.pow(1.0 - 0.895 * (Math.pow(20.0, distortionSliderEnd) - 1.0) / 19.0, 2.0);\n\t\t\tconst distortionDriveStart: number = (1.0 + 2.0 * distortionSliderStart) / Config.distortionBaseVolume;\n\t\t\tconst distortionDriveEnd: number = (1.0 + 2.0 * distortionSliderEnd) / Config.distortionBaseVolume;\n\t\t\tthis.distortion = distortionStart;\n\t\t\tthis.distortionDelta = (distortionEnd - distortionStart) / roundedSamplesPerTick;\n\t\t\tthis.distortionDrive = distortionDriveStart;\n\t\t\tthis.distortionDriveDelta = (distortionDriveEnd - distortionDriveStart) / roundedSamplesPerTick;\n\t\t}\n\n\t\tif (usesBitcrusher) {\n\t\t\tlet freqSettingStart: number = effect.bitcrusherFreq * Math.sqrt(envelopeStarts[EnvelopeComputeIndex.bitcrusherFrequency]);\n\t\t\tlet freqSettingEnd: number = effect.bitcrusherFreq * Math.sqrt(envelopeEnds[EnvelopeComputeIndex.bitcrusherFrequency]);\n\n\t\t\t// Check for freq crush mods\n\t\t\tif (synth.isModActive(Config.modulators.dictionary[\"freq crush\"].index, channelIndex, instrumentIndex)) {\n\t\t\t\tfreqSettingStart = synth.getModValue(Config.modulators.dictionary[\"freq crush\"].index, channelIndex, instrumentIndex, false) * Math.sqrt(envelopeStarts[EnvelopeComputeIndex.bitcrusherFrequency]);\n\t\t\t\tfreqSettingEnd = synth.getModValue(Config.modulators.dictionary[\"freq crush\"].index, channelIndex, instrumentIndex, true) * Math.sqrt(envelopeEnds[EnvelopeComputeIndex.bitcrusherFrequency]);\n\t\t\t}\n\n\t\t\tlet quantizationSettingStart: number = effect.bitcrusherQuantization * Math.sqrt(envelopeStarts[EnvelopeComputeIndex.bitcrusherQuantization]);\n\t\t\tlet quantizationSettingEnd: number = effect.bitcrusherQuantization * Math.sqrt(envelopeEnds[EnvelopeComputeIndex.bitcrusherQuantization]);\n\n\t\t\t// Check for bitcrush mods\n\t\t\tif (synth.isModActive(Config.modulators.dictionary[\"bit crush\"].index, channelIndex, instrumentIndex)) {\n\t\t\t\tquantizationSettingStart = synth.getModValue(Config.modulators.dictionary[\"bit crush\"].index, channelIndex, instrumentIndex, false) * Math.sqrt(envelopeStarts[EnvelopeComputeIndex.bitcrusherQuantization]);\n\t\t\t\tquantizationSettingEnd = synth.getModValue(Config.modulators.dictionary[\"bit crush\"].index, channelIndex, instrumentIndex, true) * Math.sqrt(envelopeEnds[EnvelopeComputeIndex.bitcrusherQuantization]);\n\t\t\t}\n\n\t\t\tconst basePitch: number = Config.keys[synth.song!.key].basePitch + (Config.pitchesPerOctave * synth.song!.octave); // TODO: What if there's a key change mid-song?\n\t\t\tconst freqStart: number = Instrument.frequencyFromPitch(basePitch + 60) * Math.pow(2.0, (Config.bitcrusherFreqRange - 1 - freqSettingStart) * Config.bitcrusherOctaveStep);\n\t\t\tconst freqEnd: number = Instrument.frequencyFromPitch(basePitch + 60) * Math.pow(2.0, (Config.bitcrusherFreqRange - 1 - freqSettingEnd) * Config.bitcrusherOctaveStep);\n\t\t\tconst phaseDeltaStart: number = Math.min(1.0, freqStart / samplesPerSecond);\n\t\t\tconst phaseDeltaEnd: number = Math.min(1.0, freqEnd / samplesPerSecond);\n\t\t\tthis.bitcrusherPhaseDelta = phaseDeltaStart;\n\t\t\tthis.bitcrusherPhaseDeltaScale = Math.pow(phaseDeltaEnd / phaseDeltaStart, 1.0 / roundedSamplesPerTick);\n\n\t\t\tconst scaleStart: number = 2.0 * Config.bitcrusherBaseVolume * Math.pow(2.0, 1.0 - Math.pow(2.0, (Config.bitcrusherQuantizationRange - 1 - quantizationSettingStart) * 0.5));\n\t\t\tconst scaleEnd: number = 2.0 * Config.bitcrusherBaseVolume * Math.pow(2.0, 1.0 - Math.pow(2.0, (Config.bitcrusherQuantizationRange - 1 - quantizationSettingEnd) * 0.5));\n\t\t\tthis.bitcrusherScale = scaleStart;\n\t\t\tthis.bitcrusherScaleScale = Math.pow(scaleEnd / scaleStart, 1.0 / roundedSamplesPerTick);\n\n\t\t\tconst foldLevelStart: number = 2.0 * Config.bitcrusherBaseVolume * Math.pow(1.5, Config.bitcrusherQuantizationRange - 1 - quantizationSettingStart);\n\t\t\tconst foldLevelEnd: number = 2.0 * Config.bitcrusherBaseVolume * Math.pow(1.5, Config.bitcrusherQuantizationRange - 1 - quantizationSettingEnd);\n\t\t\tthis.bitcrusherFoldLevel = foldLevelStart;\n\t\t\tthis.bitcrusherFoldLevelScale = Math.pow(foldLevelEnd / foldLevelStart, 1.0 / roundedSamplesPerTick);\n\t\t}\n\n\t\tif (usesEQFilter) {\n\t\t\tlet eqFilterVolume: number = 1.0; //this.envelopeComputer.lowpassCutoffDecayVolumeCompensation;\n\t\t\tif (effect.eqFilterType) {\n\t\t\t\t// Simple EQ filter (old style). For analysis, using random filters from normal style since they are N/A in this context.\n\t\t\t\tconst eqFilterSettingsStart: FilterSettings = effect.eqFilter;\n\t\t\t\tif (effect.eqSubFilters[1] == null)\n\t\t\t\t\teffect.eqSubFilters[1] = new FilterSettings();\n\t\t\t\tconst eqFilterSettingsEnd: FilterSettings = effect.eqSubFilters[1];\n\n\t\t\t\t// Change location based on slider values\n\t\t\t\tlet startSimpleFreq: number = effect.eqFilterSimpleCut;\n\t\t\t\tlet startSimpleGain: number = effect.eqFilterSimplePeak;\n\t\t\t\tlet endSimpleFreq: number = effect.eqFilterSimpleCut;\n\t\t\t\tlet endSimpleGain: number = effect.eqFilterSimplePeak;\n\n\t\t\t\tlet filterChanges: boolean = false;\n\n\t\t\t\tif (synth.isModActive(Config.modulators.dictionary[\"eq filt cut\"].index, channelIndex, instrumentIndex)) {\n\t\t\t\t\tstartSimpleFreq = synth.getModValue(Config.modulators.dictionary[\"eq filt cut\"].index, channelIndex, instrumentIndex, false);\n\t\t\t\t\tendSimpleFreq = synth.getModValue(Config.modulators.dictionary[\"eq filt cut\"].index, channelIndex, instrumentIndex, true);\n\t\t\t\t\tfilterChanges = true;\n\t\t\t\t}\n\t\t\t\tif (synth.isModActive(Config.modulators.dictionary[\"eq filt peak\"].index, channelIndex, instrumentIndex)) {\n\t\t\t\t\tstartSimpleGain = synth.getModValue(Config.modulators.dictionary[\"eq filt peak\"].index, channelIndex, instrumentIndex, false);\n\t\t\t\t\tendSimpleGain = synth.getModValue(Config.modulators.dictionary[\"eq filt peak\"].index, channelIndex, instrumentIndex, true);\n\t\t\t\t\tfilterChanges = true;\n\t\t\t\t}\n\n\t\t\t\tlet startPoint: FilterControlPoint;\n\n\t\t\t\tif (filterChanges) {\n\t\t\t\t\teqFilterSettingsStart.convertLegacySettingsForSynth(startSimpleFreq, startSimpleGain);\n\t\t\t\t\teqFilterSettingsEnd.convertLegacySettingsForSynth(endSimpleFreq, endSimpleGain);\n\n\t\t\t\t\tstartPoint = eqFilterSettingsStart.controlPoints[0];\n\t\t\t\t\tlet endPoint: FilterControlPoint = eqFilterSettingsEnd.controlPoints[0];\n\n\t\t\t\t\tstartPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, 1.0, 1.0);\n\t\t\t\t\tendPoint.toCoefficients(Synth.tempFilterEndCoefficients, samplesPerSecond, 1.0, 1.0);\n\n\t\t\t\t\tif (this.eqFiltersL.length < 1) this.eqFiltersL[0] = new DynamicBiquadFilter();\n\t\t\t\t\tif (this.eqFiltersR.length < 1) this.eqFiltersR[0] = new DynamicBiquadFilter();\n\t\t\t\t\tthis.eqFiltersL[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\n\t\t\t\t\tthis.eqFiltersR[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\n\t\t\t\t} else {\n\t\t\t\t\teqFilterSettingsStart.convertLegacySettingsForSynth(startSimpleFreq, startSimpleGain, true);\n\n\t\t\t\t\tstartPoint = eqFilterSettingsStart.controlPoints[0];\n\n\t\t\t\t\tstartPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, 1.0, 1.0);\n\n\t\t\t\t\tif (this.eqFiltersL.length < 1) this.eqFiltersL[0] = new DynamicBiquadFilter();\n\t\t\t\t\tif (this.eqFiltersR.length < 1) this.eqFiltersR[0] = new DynamicBiquadFilter();\n\t\t\t\t\tthis.eqFiltersL[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterStartCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\n\t\t\t\t\tthis.eqFiltersR[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterStartCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\n\t\t\t\t}\n\t\t\t\tthis.eqFilterCount = 1;\n\n\t\t\t\teqFilterVolume *= startPoint.getVolumeCompensationMult();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst eqFilterSettings: FilterSettings = (effect.tmpEqFilterStart != null) ? effect.tmpEqFilterStart : effect.eqFilter;\n\t\t\t\t//const eqAllFreqsEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.eqFilterAllFreqs];\n\t\t\t\t//const eqAllFreqsEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.eqFilterAllFreqs];\n\t\t\t\tfor (let i: number = 0; i < eqFilterSettings.controlPointCount; i++) {\n\t\t\t\t\t//const eqFreqEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.eqFilterFreq0 + i];\n\t\t\t\t\t//const eqFreqEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.eqFilterFreq0 + i];\n\t\t\t\t\t//const eqPeakEnvelopeStart: number = envelopeStarts[InstrumentAutomationIndex.eqFilterGain0 + i];\n\t\t\t\t\t//const eqPeakEnvelopeEnd:   number = envelopeEnds[  InstrumentAutomationIndex.eqFilterGain0 + i];\n\t\t\t\t\tlet startPoint: FilterControlPoint = eqFilterSettings.controlPoints[i];\n\t\t\t\t\tlet endPoint: FilterControlPoint = (effect.tmpEqFilterEnd != null && effect.tmpEqFilterEnd.controlPoints[i] != null) ? effect.tmpEqFilterEnd.controlPoints[i] : eqFilterSettings.controlPoints[i];\n\n\t\t\t\t\t// If switching dot type, do it all at once and do not try to interpolate since no valid interpolation exists.\n\t\t\t\t\tif (startPoint.type != endPoint.type) {\n\t\t\t\t\t\tstartPoint = endPoint;\n\t\t\t\t\t}\n\n\t\t\t\t\tstartPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, /*eqAllFreqsEnvelopeStart * eqFreqEnvelopeStart*/ 1.0, /*eqPeakEnvelopeStart*/ 1.0);\n\t\t\t\t\tendPoint.toCoefficients(Synth.tempFilterEndCoefficients, samplesPerSecond, /*eqAllFreqsEnvelopeEnd   * eqFreqEnvelopeEnd*/   1.0, /*eqPeakEnvelopeEnd*/   1.0);\n\t\t\t\t\tif (this.eqFiltersL.length <= i) this.eqFiltersL[i] = new DynamicBiquadFilter();\n\t\t\t\t\tif (this.eqFiltersR.length <= i) this.eqFiltersR[i] = new DynamicBiquadFilter();\n\t\t\t\t\tthis.eqFiltersL[i].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\n\t\t\t\t\tthis.eqFiltersR[i].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\n\t\t\t\t\teqFilterVolume *= startPoint.getVolumeCompensationMult();\n\n\t\t\t\t}\n\t\t\t\tthis.eqFilterCount = eqFilterSettings.controlPointCount;\n\t\t\t}\n\t\t\teqFilterVolume = Math.min(3.0, eqFilterVolume);\n\n\t\t\tlet eqFilterVolumeStart: number = eqFilterVolume;\n\t\t\tlet eqFilterVolumeEnd: number = eqFilterVolume;\n\n\t\t\tthis.eqFilterVolume = eqFilterVolumeStart;\n\t\t\tthis.eqFilterVolumeDelta = (eqFilterVolumeEnd - eqFilterVolumeStart) / roundedSamplesPerTick;\n\t\t}\n\n\t\tif (usesPanning) {\n\t\t\tthis.panningMode = effect.panMode;\n\n\t\t\tconst panEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.panning] * 2.0 - 1.0;\n\t\t\tconst panEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.panning] * 2.0 - 1.0;\n\n\t\t\tlet usePanStart: number = effect.pan;\n\t\t\tlet usePanEnd: number = effect.pan;\n\t\t\t// Check for pan mods\n\t\t\tif (synth.isModActive(Config.modulators.dictionary[\"pan\"].index, channelIndex, instrumentIndex)) {\n\t\t\t\tusePanStart = synth.getModValue(Config.modulators.dictionary[\"pan\"].index, channelIndex, instrumentIndex, false);\n\t\t\t\tusePanEnd = synth.getModValue(Config.modulators.dictionary[\"pan\"].index, channelIndex, instrumentIndex, true);\n\t\t\t}\n\n\t\t\tlet panStart: number = Math.max(-1.0, Math.min(1.0, (usePanStart - Config.panCenter) / Config.panCenter * panEnvelopeStart));\n\t\t\tlet panEnd: number = Math.max(-1.0, Math.min(1.0, (usePanEnd - Config.panCenter) / Config.panCenter * panEnvelopeEnd));\n\n\t\t\tconst volumeStartL: number = Math.cos((1 + panStart) * Math.PI * 0.25) * 1.414;\n\t\t\tconst volumeStartR: number = Math.cos((1 - panStart) * Math.PI * 0.25) * 1.414;\n\t\t\tconst volumeEndL: number = Math.cos((1 + panEnd) * Math.PI * 0.25) * 1.414;\n\t\t\tconst volumeEndR: number = Math.cos((1 - panEnd) * Math.PI * 0.25) * 1.414;\n\t\t\tconst maxDelaySamples: number = samplesPerSecond * Config.panDelaySecondsMax;\n\n\t\t\tlet usePanDelayStart: number = effect.panDelay;\n\t\t\tlet usePanDelayEnd: number = effect.panDelay;\n\t\t\t// Check for pan delay mods\n\t\t\tif (synth.isModActive(Config.modulators.dictionary[\"pan delay\"].index, channelIndex, instrumentIndex)) {\n\t\t\t\tusePanDelayStart = synth.getModValue(Config.modulators.dictionary[\"pan delay\"].index, channelIndex, instrumentIndex, false);\n\t\t\t\tusePanDelayEnd = synth.getModValue(Config.modulators.dictionary[\"pan delay\"].index, channelIndex, instrumentIndex, true);\n\t\t\t}\n\n\t\t\tconst delayStart: number = panStart * usePanDelayStart * maxDelaySamples / 10;\n\t\t\tconst delayEnd: number = panEnd * usePanDelayEnd * maxDelaySamples / 10;\n\t\t\tconst delayStartL: number = Math.max(0.0, delayStart);\n\t\t\tconst delayStartR: number = Math.max(0.0, -delayStart);\n\t\t\tconst delayEndL: number = Math.max(0.0, delayEnd);\n\t\t\tconst delayEndR: number = Math.max(0.0, -delayEnd);\n\n\t\t\tthis.panningVolumeL = volumeStartL;\n\t\t\tthis.panningVolumeR = volumeStartR;\n\t\t\tthis.panningVolumeDeltaL = (volumeEndL - volumeStartL) / roundedSamplesPerTick;\n\t\t\tthis.panningVolumeDeltaR = (volumeEndR - volumeStartR) / roundedSamplesPerTick;\n\t\t\tthis.panningOffsetL = this.panningDelayPos - delayStartL + synth.panningDelayBufferSize;\n\t\t\tthis.panningOffsetR = this.panningDelayPos - delayStartR + synth.panningDelayBufferSize;\n\t\t\tthis.panningOffsetDeltaL = (delayEndL - delayStartL) / roundedSamplesPerTick;\n\t\t\tthis.panningOffsetDeltaR = (delayEndR - delayStartR) / roundedSamplesPerTick;\n\t\t}\n\n\t\tif (usesGain) {\n\t\t\tconst gainEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.gain];\n\t\t\tconst gainEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.gain];\n\n\t\t\tlet useGainStart: number = effect.gain;\n\t\t\tlet useGainEnd: number = effect.gain;\n\t\t\t// Check for pan mods\n\t\t\tif (synth.isModActive(Config.modulators.dictionary[\"gain\"].index, channelIndex, instrumentIndex)) {\n\t\t\t\tuseGainStart = synth.getModValue(Config.modulators.dictionary[\"gain\"].index, channelIndex, instrumentIndex, false);\n\t\t\t\tuseGainEnd = synth.getModValue(Config.modulators.dictionary[\"gain\"].index, channelIndex, instrumentIndex, true);\n\t\t\t}\n\n\t\t\tlet gainStart: number = Math.min(Config.gainRangeMult, gainEnvelopeStart * useGainStart / (Config.volumeRange / 2 * Config.gainRangeMult)) * Config.gainRangeMult;\n\t\t\tlet gainEnd: number = Math.min(Config.gainRangeMult, gainEnvelopeEnd * useGainEnd / (Config.volumeRange / 2 * Config.gainRangeMult)) * Config.gainRangeMult;\n\n\t\t\tthis.gain = gainStart;\n\t\t\tthis.gainDelta = (gainEnd - gainStart) / roundedSamplesPerTick;\n\t\t}\n\n\t\tif (usesChorus) {\n\t\t\tconst chorusEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.chorus];\n\t\t\tconst chorusEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.chorus];\n\t\t\tlet useChorusStart: number = effect.chorus;\n\t\t\tlet useChorusEnd: number = effect.chorus;\n\t\t\t// Check for chorus mods\n\t\t\tif (synth.isModActive(Config.modulators.dictionary[\"chorus\"].index, channelIndex, instrumentIndex)) {\n\t\t\t\tuseChorusStart = synth.getModValue(Config.modulators.dictionary[\"chorus\"].index, channelIndex, instrumentIndex, false);\n\t\t\t\tuseChorusEnd = synth.getModValue(Config.modulators.dictionary[\"chorus\"].index, channelIndex, instrumentIndex, true);\n\t\t\t}\n\n\t\t\tlet chorusStart: number = Math.min(1.0, chorusEnvelopeStart * useChorusStart / (Config.chorusRange - 1));\n\t\t\tlet chorusEnd: number = Math.min(1.0, chorusEnvelopeEnd * useChorusEnd / (Config.chorusRange - 1));\n\t\t\tchorusStart = chorusStart * 0.6 + (Math.pow(chorusStart, 6.0)) * 0.4;\n\t\t\tchorusEnd = chorusEnd * 0.6 + (Math.pow(chorusEnd, 6.0)) * 0.4;\n\t\t\tconst chorusCombinedMultStart = 1.0 / Math.sqrt(3.0 * chorusStart * chorusStart + 1.0);\n\t\t\tconst chorusCombinedMultEnd = 1.0 / Math.sqrt(3.0 * chorusEnd * chorusEnd + 1.0);\n\t\t\tthis.chorusVoiceMult = chorusStart;\n\t\t\tthis.chorusVoiceMultDelta = (chorusEnd - chorusStart) / roundedSamplesPerTick;\n\t\t\tthis.chorusCombinedMult = chorusCombinedMultStart;\n\t\t\tthis.chorusCombinedMultDelta = (chorusCombinedMultEnd - chorusCombinedMultStart) / roundedSamplesPerTick;\n\t\t}\n\n\t\tif (usesFlanger) {\n\t\t\tconst flangerEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.flanger];\n\t\t\tconst flangerEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.flanger];\n\t\t\tlet useFlangerStart: number = effect.flanger;\n\t\t\tlet useFlangerEnd: number = effect.flanger;\n\t\t\tif (synth.isModActive(Config.modulators.dictionary[\"flanger\"].index, channelIndex, instrumentIndex)) {\n\t\t\t\tuseFlangerStart = synth.getModValue(Config.modulators.dictionary[\"flanger\"].index, channelIndex, instrumentIndex, false);\n\t\t\t\tuseFlangerEnd = synth.getModValue(Config.modulators.dictionary[\"flanger\"].index, channelIndex, instrumentIndex, true);\n\t\t\t}\n\t\t\tlet flangerStart: number = Math.min(1.0, flangerEnvelopeStart * useFlangerStart / (Config.flangerRange - 1));\n\t\t\tlet flangerEnd: number = Math.min(1.0, flangerEnvelopeEnd * useFlangerEnd / (Config.flangerRange - 1));\n\n\t\t\tconst flangerSpeedEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.flangerSpeed];\n\t\t\tconst flangerSpeedEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.flangerSpeed];\n\t\t\tlet useFlangerSpeedStart: number = effect.flangerSpeed;\n\t\t\tlet useFlangerSpeedEnd: number = effect.flangerSpeed;\n\t\t\tif (synth.isModActive(Config.modulators.dictionary[\"flanger speed\"].index, channelIndex, instrumentIndex)) {\n\t\t\t\tuseFlangerSpeedStart = synth.getModValue(Config.modulators.dictionary[\"flanger speed\"].index, channelIndex, instrumentIndex, false);\n\t\t\t\tuseFlangerSpeedEnd = synth.getModValue(Config.modulators.dictionary[\"flanger speed\"].index, channelIndex, instrumentIndex, true);\n\t\t\t}\n\t\t\tlet flangerSpeedStart: number = flangerSpeedEnvelopeStart * useFlangerSpeedStart + 2;\n\t\t\tlet flangerSpeedEnd: number = flangerSpeedEnvelopeEnd * useFlangerSpeedEnd + 2;\n\n\t\t\tconst flangerDepthEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.flangerDepth];\n\t\t\tconst flangerDepthEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.flangerDepth];\n\t\t\tlet useFlangerDepthStart: number = effect.flangerDepth;\n\t\t\tlet useFlangerDepthEnd: number = effect.flangerDepth;\n\t\t\tif (synth.isModActive(Config.modulators.dictionary[\"flanger depth\"].index, channelIndex, instrumentIndex)) {\n\t\t\t\tuseFlangerDepthStart = synth.getModValue(Config.modulators.dictionary[\"flanger depth\"].index, channelIndex, instrumentIndex, false);\n\t\t\t\tuseFlangerDepthEnd = synth.getModValue(Config.modulators.dictionary[\"flanger depth\"].index, channelIndex, instrumentIndex, true);\n\t\t\t}\n\t\t\tlet flangerDepthStart: number = flangerDepthEnvelopeStart * useFlangerDepthStart * 2 + 2;\n\t\t\tlet flangerDepthEnd: number = flangerDepthEnvelopeEnd * useFlangerDepthEnd * 2 + 2;\n\n\t\t\tconst flangerFeedbackEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.flangerFeedback];\n\t\t\tconst flangerFeedbackEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.flangerFeedback];\n\t\t\tlet useFlangerFeedbackStart: number = effect.flangerFeedback;\n\t\t\tlet useFlangerFeedbackEnd: number = effect.flangerFeedback;\n\t\t\tif (synth.isModActive(Config.modulators.dictionary[\"flanger feedback\"].index, channelIndex, instrumentIndex)) {\n\t\t\t\tuseFlangerFeedbackStart = synth.getModValue(Config.modulators.dictionary[\"flanger feedback\"].index, channelIndex, instrumentIndex, false);\n\t\t\t\tuseFlangerFeedbackEnd = synth.getModValue(Config.modulators.dictionary[\"flanger feedback\"].index, channelIndex, instrumentIndex, true);\n\t\t\t}\n\t\t\tlet flangerFeedbackStart: number = flangerFeedbackEnvelopeStart * useFlangerFeedbackStart * 1.5;\n\t\t\tlet flangerFeedbackEnd: number = flangerFeedbackEnvelopeEnd * useFlangerFeedbackEnd * 1.5;\n\n\t\t\tthis.flanger = flangerStart;\n\t\t\tthis.flangerDelta = (flangerEnd - flangerStart) / roundedSamplesPerTick;\n\t\t\tthis.flangerSpeed = flangerSpeedStart;\n\t\t\tthis.flangerSpeedDelta = (flangerSpeedEnd - flangerSpeedStart) / roundedSamplesPerTick;\n\t\t\tthis.flangerDepth = flangerDepthStart;\n\t\t\tthis.flangerDepthDelta = (flangerDepthEnd - flangerDepthStart) / roundedSamplesPerTick;\n\t\t\tthis.flangerFeedback = (Math.sqrt(flangerFeedbackStart) / Math.sqrt(Config.flangerFeedbackRange));\n\t\t\tthis.flangerFeedbackDelta = ((Math.sqrt(flangerFeedbackEnd) / Math.sqrt(Config.flangerFeedbackRange)) - (Math.sqrt(flangerFeedbackStart) / Math.sqrt(Config.flangerFeedbackRange))) / roundedSamplesPerTick;\n\t\t}\n\n\t\tif (usesRingModulation) {\n\t\t\tlet useRingModStart: number = effect.ringModulation;\n\t\t\tlet useRingModEnd: number = effect.ringModulation;\n\n\t\t\tlet useRingModEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.ringModulation];\n\t\t\tlet useRingModEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.ringModulation];\n\n\t\t\tlet useRingModHzStart: number = Math.min(1.0, effect.ringModulationHz / (Config.ringModHzRange - 1));\n\t\t\tlet useRingModHzEnd: number = Math.min(1.0, effect.ringModulationHz / (Config.ringModHzRange - 1));\n\t\t\tlet useRingModHzEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.ringModulationHz];\n\t\t\tlet useRingModHzEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.ringModulationHz];\n\n\n\t\t\tif (synth.isModActive(Config.modulators.dictionary[\"ring modulation\"].index, channelIndex, instrumentIndex)) {\n\t\t\t\tuseRingModStart = (synth.getModValue(Config.modulators.dictionary[\"ring modulation\"].index, channelIndex, instrumentIndex, false));\n\t\t\t\tuseRingModEnd = (synth.getModValue(Config.modulators.dictionary[\"ring modulation\"].index, channelIndex, instrumentIndex, true));\n\t\t\t}\n\t\t\tif (synth.isModActive(Config.modulators.dictionary[\"ring mod hertz\"].index, channelIndex, instrumentIndex)) {\n\t\t\t\tuseRingModHzStart = Math.min(1.0, Math.max(0.0, (synth.getModValue(Config.modulators.dictionary[\"ring mod hertz\"].index, channelIndex, instrumentIndex, false)) / (Config.ringModHzRange - 1)));\n\t\t\t\tuseRingModHzEnd = Math.min(1.0, Math.max(0.0, (synth.getModValue(Config.modulators.dictionary[\"ring mod hertz\"].index, channelIndex, instrumentIndex, false)) / (Config.ringModHzRange - 1)));\n\t\t\t}\n\t\t\tuseRingModHzStart *= useRingModHzEnvelopeStart;\n\t\t\tuseRingModHzEnd *= useRingModHzEnvelopeEnd;\n\t\t\tlet ringModStart: number = Math.min(1.0, (useRingModStart * useRingModEnvelopeStart) / (Config.ringModRange - 1));\n\t\t\tlet ringModEnd: number = Math.min(1.0, (useRingModEnd * useRingModEnvelopeEnd) / (Config.ringModRange - 1));\n\n\t\t\tthis.ringModMix = ringModStart;\n\t\t\tthis.ringModMixDelta = (ringModEnd - ringModStart) / roundedSamplesPerTick;\n\n\t\t\tthis.ringModHzOffset = effect.ringModHzOffset;\n\n\t\t\tlet ringModPhaseDeltaStart = (Math.max(0, calculateRingModHertz(useRingModHzStart))) / synth.samplesPerSecond;\n\t\t\tlet ringModPhaseDeltaEnd = (Math.max(0, calculateRingModHertz(useRingModHzEnd))) / synth.samplesPerSecond;\n\n\t\t\tthis.ringModMixFadeDelta = 0;\n\t\t\tif (this.ringModMixFade < 0) this.ringModMixFade = 0;\n\t\t\tif (ringModPhaseDeltaStart <= 0 && ringModPhaseDeltaEnd <= 0 && this.ringModMixFade != 0) {\n\t\t\t\tthis.ringModMixFadeDelta = this.ringModMixFade / -10;\n\t\t\t} else if (ringModPhaseDeltaStart > 0 && ringModPhaseDeltaEnd > 0) {\n\t\t\t\tthis.ringModMixFade = 1.0;\n\t\t\t}\n\n\t\t\tthis.ringModPhaseDelta = ringModPhaseDeltaStart;\n\t\t\tthis.ringModPhaseDeltaScale = ringModPhaseDeltaStart == 0 ? 1 : Math.pow(ringModPhaseDeltaEnd / ringModPhaseDeltaStart, 1.0 / roundedSamplesPerTick);\n\n\t\t\tthis.ringModWaveformIndex = effect.ringModWaveformIndex;\n\t\t\tthis.ringModPulseWidth = effect.ringModPulseWidth;\n\n\t\t}\n\n\t\tlet maxEchoMult = 0.0;\n\t\tlet averageEchoDelaySeconds: number = 0.0;\n\n\t\tif (usesEcho) {\n\t\t\tconst echoSustainEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.echoSustain];\n\t\t\tconst echoSustainEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.echoSustain];\n\t\t\tlet useEchoSustainStart: number = effect.echoSustain;\n\t\t\tlet useEchoSustainEnd: number = effect.echoSustain;\n\t\t\t// Check for echo mods\n\t\t\tif (synth.isModActive(Config.modulators.dictionary[\"echo\"].index, channelIndex, instrumentIndex)) {\n\t\t\t\tuseEchoSustainStart = Math.max(0.0, synth.getModValue(Config.modulators.dictionary[\"echo\"].index, channelIndex, instrumentIndex, false));\n\t\t\t\tuseEchoSustainEnd = Math.max(0.0, synth.getModValue(Config.modulators.dictionary[\"echo\"].index, channelIndex, instrumentIndex, true));\n\t\t\t}\n\t\t\tconst echoMultStart: number = Math.min(1.0, Math.pow(echoSustainEnvelopeStart * useEchoSustainStart / Config.echoSustainRange, 1.1)) * 0.9;\n\t\t\tconst echoMultEnd: number = Math.min(1.0, Math.pow(echoSustainEnvelopeEnd * useEchoSustainEnd / Config.echoSustainRange, 1.1)) * 0.9;\n\t\t\tthis.echoMult = echoMultStart;\n\t\t\tthis.echoMultDelta = Math.max(0.0, (echoMultEnd - echoMultStart) / roundedSamplesPerTick);\n\t\t\tmaxEchoMult = Math.max(echoMultStart, echoMultEnd);\n\n\t\t\t// TODO: After computing a tick's settings once for multiple run lengths (which is\n\t\t\t// good for audio worklet threads), compute the echo delay envelopes at tick (or\n\t\t\t// part) boundaries to interpolate between two delay taps.\n\t\t\tconst echoDelayEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.echoDelay];\n\t\t\tconst echoDelayEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.echoDelay];\n\t\t\tlet useEchoDelayStart: number = effect.echoDelay * echoDelayEnvelopeStart;\n\t\t\tlet useEchoDelayEnd: number = effect.echoDelay * echoDelayEnvelopeEnd;\n\t\t\t// let ignoreTicks: boolean = false;\n\t\t\t// Check for echo delay mods\n\t\t\tif (synth.isModActive(Config.modulators.dictionary[\"echo delay\"].index, channelIndex, instrumentIndex)) {\n\t\t\t\tuseEchoDelayStart = synth.getModValue(Config.modulators.dictionary[\"echo delay\"].index, channelIndex, instrumentIndex, false) * echoDelayEnvelopeStart;\n\t\t\t\tuseEchoDelayEnd = synth.getModValue(Config.modulators.dictionary[\"echo delay\"].index, channelIndex, instrumentIndex, true) * echoDelayEnvelopeEnd;\n\t\t\t\t// ignoreTicks = true;\n\t\t\t\t// this.allocateEchoBuffers(samplesPerTick, Math.max(useEchoDelayStart,useEchoDelayEnd)); //update buffer size for modulation / envelopes\n\t\t\t}\n\t\t\tconst tmpEchoDelayOffsetStart: number = /*ignoreTicks ? (useEchoDelayStart + 1) * Config.echoDelayStepTicks * samplesPerTick : */Math.round((useEchoDelayStart + 1) * Config.echoDelayStepTicks * samplesPerTick);\n\t\t\tconst tmpEchoDelayOffsetEnd: number = /*ignoreTicks ? (useEchoDelayEnd + 1) * Config.echoDelayStepTicks * samplesPerTick : */Math.round((useEchoDelayEnd + 1) * Config.echoDelayStepTicks * samplesPerTick);\n\t\t\tif (this.echoDelayOffsetEnd != null/* && !ignoreTicks*/) {\n\t\t\t\tthis.echoDelayOffsetStart = this.echoDelayOffsetEnd;\n\t\t\t} else {\n\t\t\t\tthis.echoDelayOffsetStart = tmpEchoDelayOffsetStart;\n\t\t\t}\n\n\t\t\tthis.echoDelayOffsetEnd = tmpEchoDelayOffsetEnd;\n\t\t\taverageEchoDelaySeconds = (this.echoDelayOffsetStart + this.echoDelayOffsetEnd) * 0.5 / samplesPerSecond;\n\n\t\t\tthis.echoDelayOffsetRatio = 0.0;\n\t\t\tthis.echoDelayOffsetRatioDelta = 1.0 / roundedSamplesPerTick;\n\n\t\t\tthis.echoPingPong = ((effect.echoPingPong / Config.panMax) - 0.5) * 2;\n\t\t\t//const echoPingPongEnd\n\n\t\t\tconst shelfRadians: number = 2.0 * Math.PI * Config.echoShelfHz / synth.samplesPerSecond;\n\t\t\tSynth.tempFilterStartCoefficients.highShelf1stOrder(shelfRadians, Config.echoShelfGain);\n\t\t\tthis.echoShelfA1 = Synth.tempFilterStartCoefficients.a[1];\n\t\t\tthis.echoShelfB0 = Synth.tempFilterStartCoefficients.b[0];\n\t\t\tthis.echoShelfB1 = Synth.tempFilterStartCoefficients.b[1];\n\t\t}\n\n\t\tlet maxReverbMult = 0.0;\n\n\t\tif (usesReverb) {\n\t\t\tconst reverbEnvelopeStart: number = envelopeStarts[EnvelopeComputeIndex.reverb];\n\t\t\tconst reverbEnvelopeEnd: number = envelopeEnds[EnvelopeComputeIndex.reverb];\n\n\t\t\tlet useReverbStart: number = effect.reverb;\n\t\t\tlet useReverbEnd: number = effect.reverb;\n\n\t\t\t// Check for mod reverb, instrument level\n\t\t\tif (synth.isModActive(Config.modulators.dictionary[\"reverb\"].index, channelIndex, instrumentIndex)) {\n\t\t\t\tuseReverbStart = synth.getModValue(Config.modulators.dictionary[\"reverb\"].index, channelIndex, instrumentIndex, false);\n\t\t\t\tuseReverbEnd = synth.getModValue(Config.modulators.dictionary[\"reverb\"].index, channelIndex, instrumentIndex, true);\n\t\t\t}\n\t\t\t// Check for mod reverb, song scalar\n\t\t\tif (synth.isModActive(Config.modulators.dictionary[\"song reverb\"].index, channelIndex, instrumentIndex)) {\n\t\t\t\tuseReverbStart *= (synth.getModValue(Config.modulators.dictionary[\"song reverb\"].index, undefined, undefined, false) - Config.modulators.dictionary[\"song reverb\"].convertRealFactor) / Config.reverbRange;\n\t\t\t\tuseReverbEnd *= (synth.getModValue(Config.modulators.dictionary[\"song reverb\"].index, undefined, undefined, true) - Config.modulators.dictionary[\"song reverb\"].convertRealFactor) / Config.reverbRange;\n\t\t\t}\n\n\t\t\tconst reverbStart: number = Math.min(1.0, Math.pow(reverbEnvelopeStart * useReverbStart / Config.reverbRange, 0.667)) * 0.425;\n\t\t\tconst reverbEnd: number = Math.min(1.0, Math.pow(reverbEnvelopeEnd * useReverbEnd / Config.reverbRange, 0.667)) * 0.425;\n\n\t\t\tthis.reverbMult = reverbStart;\n\t\t\tthis.reverbMultDelta = (reverbEnd - reverbStart) / roundedSamplesPerTick;\n\t\t\tmaxReverbMult = Math.max(reverbStart, reverbEnd);\n\n\t\t\tconst shelfRadians: number = 2.0 * Math.PI * Config.reverbShelfHz / synth.samplesPerSecond;\n\t\t\tSynth.tempFilterStartCoefficients.highShelf1stOrder(shelfRadians, Config.reverbShelfGain);\n\t\t\tthis.reverbShelfA1 = Synth.tempFilterStartCoefficients.a[1];\n\t\t\tthis.reverbShelfB0 = Synth.tempFilterStartCoefficients.b[0];\n\t\t\tthis.reverbShelfB1 = Synth.tempFilterStartCoefficients.b[1];\n\t\t}\n\n\t\tif (!instrumentState.tonesAddedInThisTick && !instrumentState.flushingDelayLines) {\n\t\t\tconst attenuationThreshold: number = 1.0 / 256.0; // when the delay line signal has attenuated this much, it should be inaudible and should be flushed to zero.\n\t\t\tconst halfLifeMult: number = -Math.log2(attenuationThreshold);\n\n\t\t\tif (usesChorus) {\n\t\t\t\tinstrumentState.delayDuration += Config.chorusMaxDelay;\n\t\t\t}\n\n\t\t\tif (usesFlanger) {\n\t\t\t\tinstrumentState.delayDuration += Config.flangerMaxDelay;\n\t\t\t}\n\n\t\t\tif (usesEcho) {\n\t\t\t\tconst attenuationPerSecond: number = Math.pow(maxEchoMult, 1.0 / averageEchoDelaySeconds);\n\t\t\t\tconst halfLife: number = -1.0 / Math.log2(attenuationPerSecond);\n\t\t\t\tconst echoDuration: number = halfLife * halfLifeMult;\n\t\t\t\tinstrumentState.delayDuration += echoDuration;\n\t\t\t}\n\n\t\t\tif (usesReverb) {\n\t\t\t\tconst averageMult: number = maxReverbMult * 2.0;\n\t\t\t\tconst averageReverbDelaySeconds: number = (Config.reverbDelayBufferSize / 4.0) / samplesPerSecond;\n\t\t\t\tconst attenuationPerSecond: number = Math.pow(averageMult, 1.0 / averageReverbDelaySeconds);\n\t\t\t\tconst halfLife: number = -1.0 / Math.log2(attenuationPerSecond);\n\t\t\t\tconst reverbDuration: number = halfLife * halfLifeMult;\n\t\t\t\tinstrumentState.delayDuration += reverbDuration;\n\t\t\t}\n\n\t\t\tif (usesGranular) {\n\t\t\t\tthis.computeGrains = false;\n\t\t\t}\n\t\t} else {\n\t\t\t// Flushing delay lines to zero since the signal has mostly dissipated.\n\t\t\t//eqFilterVolumeStart = 0.0;\n\t\t\t//eqFilterVolumeEnd = 0.0;\n\n\t\t\tif (usesChorus) instrumentState.totalDelaySamples += synth.chorusDelayBufferSize;\n\t\t\tif (usesFlanger) instrumentState.totalDelaySamples += synth.flangerDelayBufferSize;\n\t\t\tif (usesEcho) instrumentState.totalDelaySamples += this.echoDelayLineL!.length;\n\t\t\tif (usesReverb) instrumentState.totalDelaySamples += Config.reverbDelayBufferSize;\n\t\t\tif (usesGranular) instrumentState.totalDelaySamples += this.granularMaximumDelayTimeInSeconds;\n\t\t}\n\t}\n}\n", "const PRIME32_1 = 2654435761;\nconst PRIME32_2 = 2246822519;\nconst PRIME32_3 = 3266489917;\nconst PRIME32_4 = 668265263;\nconst PRIME32_5 = 374761393;\nlet encoder;\n/**\n *\n * @param input - byte array or string\n * @param seed - optional seed (32-bit unsigned);\n */\nexport function xxHash32(input, seed = 0) {\n    const buffer = typeof input === 'string' ? (encoder ??= new TextEncoder()).encode(input) : input;\n    const b = buffer;\n    /*\n        Step 1. Initialize internal accumulators\n        Each accumulator gets an initial value based on optional seed input. Since the seed is optional, it can be 0.\n\n        ```\n            u32 acc1 = seed + PRIME32_1 + PRIME32_2;\n            u32 acc2 = seed + PRIME32_2;\n            u32 acc3 = seed + 0;\n            u32 acc4 = seed - PRIME32_1;\n        ```\n        Special case : input is less than 16 bytes\n        When input is too small (< 16 bytes), the algorithm will not process any stripe. Consequently, it will not\n        make use of parallel accumulators.\n\n        In which case, a simplified initialization is performed, using a single accumulator :\n\n        u32 acc  = seed + PRIME32_5;\n        The algorithm then proceeds directly to step 4.\n    */\n    let acc = (seed + PRIME32_5) & 0xffffffff;\n    let offset = 0;\n    if (b.length >= 16) {\n        const accN = [\n            (seed + PRIME32_1 + PRIME32_2) & 0xffffffff,\n            (seed + PRIME32_2) & 0xffffffff,\n            (seed + 0) & 0xffffffff,\n            (seed - PRIME32_1) & 0xffffffff,\n        ];\n        /*\n            Step 2. Process stripes\n            A stripe is a contiguous segment of 16 bytes. It is evenly divided into 4 lanes, of 4 bytes each.\n            The first lane is used to update accumulator 1, the second lane is used to update accumulator 2, and so on.\n\n            Each lane read its associated 32-bit value using little-endian convention.\n\n            For each {lane, accumulator}, the update process is called a round, and applies the following formula :\n\n            ```\n            accN = accN + (laneN * PRIME32_2);\n            accN = accN <<< 13;\n            accN = accN * PRIME32_1;\n            ```\n\n            This shuffles the bits so that any bit from input lane impacts several bits in output accumulator.\n            All operations are performed modulo 2^32.\n\n            Input is consumed one full stripe at a time. Step 2 is looped as many times as necessary to consume\n            the whole input, except the last remaining bytes which cannot form a stripe (< 16 bytes). When that\n            happens, move to step 3.\n        */\n        const b = buffer;\n        const limit = b.length - 16;\n        let lane = 0;\n        for (offset = 0; (offset & 0xfffffff0) <= limit; offset += 4) {\n            const i = offset;\n            const laneN0 = b[i + 0] + (b[i + 1] << 8);\n            const laneN1 = b[i + 2] + (b[i + 3] << 8);\n            const laneNP = laneN0 * PRIME32_2 + ((laneN1 * PRIME32_2) << 16);\n            let acc = (accN[lane] + laneNP) & 0xffffffff;\n            acc = (acc << 13) | (acc >>> 19);\n            const acc0 = acc & 0xffff;\n            const acc1 = acc >>> 16;\n            accN[lane] = (acc0 * PRIME32_1 + ((acc1 * PRIME32_1) << 16)) & 0xffffffff;\n            lane = (lane + 1) & 0x3;\n        }\n        /*\n            Step 3. Accumulator convergence\n            All 4 lane accumulators from previous steps are merged to produce a single remaining accumulator\n            of same width (32-bit). The associated formula is as follows :\n\n            ```\n            acc = (acc1 <<< 1) + (acc2 <<< 7) + (acc3 <<< 12) + (acc4 <<< 18);\n            ```\n        */\n        acc =\n            (((accN[0] << 1) | (accN[0] >>> 31)) +\n                ((accN[1] << 7) | (accN[1] >>> 25)) +\n                ((accN[2] << 12) | (accN[2] >>> 20)) +\n                ((accN[3] << 18) | (accN[3] >>> 14))) &\n                0xffffffff;\n    }\n    /*\n        Step 4. Add input length\n        The input total length is presumed known at this stage. This step is just about adding the length to\n        accumulator, so that it participates to final mixing.\n\n        ```\n        acc = acc + (u32)inputLength;\n        ```\n    */\n    acc = (acc + buffer.length) & 0xffffffff;\n    /*\n        Step 5. Consume remaining input\n        There may be up to 15 bytes remaining to consume from the input. The final stage will digest them according\n        to following pseudo-code :\n        ```\n        while (remainingLength >= 4) {\n            lane = read_32bit_little_endian(input_ptr);\n            acc = acc + lane * PRIME32_3;\n            acc = (acc <<< 17) * PRIME32_4;\n            input_ptr += 4; remainingLength -= 4;\n        }\n        ```\n        This process ensures that all input bytes are present in the final mix.\n    */\n    const limit = buffer.length - 4;\n    for (; offset <= limit; offset += 4) {\n        const i = offset;\n        const laneN0 = b[i + 0] + (b[i + 1] << 8);\n        const laneN1 = b[i + 2] + (b[i + 3] << 8);\n        const laneP = laneN0 * PRIME32_3 + ((laneN1 * PRIME32_3) << 16);\n        acc = (acc + laneP) & 0xffffffff;\n        acc = (acc << 17) | (acc >>> 15);\n        acc = ((acc & 0xffff) * PRIME32_4 + (((acc >>> 16) * PRIME32_4) << 16)) & 0xffffffff;\n    }\n    /*\n        ```\n        while (remainingLength >= 1) {\n            lane = read_byte(input_ptr);\n            acc = acc + lane * PRIME32_5;\n            acc = (acc <<< 11) * PRIME32_1;\n            input_ptr += 1; remainingLength -= 1;\n        }\n        ```\n    */\n    for (; offset < b.length; ++offset) {\n        const lane = b[offset];\n        acc = acc + lane * PRIME32_5;\n        acc = (acc << 11) | (acc >>> 21);\n        acc = ((acc & 0xffff) * PRIME32_1 + (((acc >>> 16) * PRIME32_1) << 16)) & 0xffffffff;\n    }\n    /*\n        Step 6. Final mix (avalanche)\n        The final mix ensures that all input bits have a chance to impact any bit in the output digest,\n        resulting in an unbiased distribution. This is also called avalanche effect.\n        ```\n        acc = acc xor (acc >> 15);\n        acc = acc * PRIME32_2;\n        acc = acc xor (acc >> 13);\n        acc = acc * PRIME32_3;\n        acc = acc xor (acc >> 16);\n        ```\n    */\n    acc = acc ^ (acc >>> 15);\n    acc = (((acc & 0xffff) * PRIME32_2) & 0xffffffff) + (((acc >>> 16) * PRIME32_2) << 16);\n    acc = acc ^ (acc >>> 13);\n    acc = (((acc & 0xffff) * PRIME32_3) & 0xffffffff) + (((acc >>> 16) * PRIME32_3) << 16);\n    acc = acc ^ (acc >>> 16);\n    // turn any negatives back into a positive number;\n    return acc < 0 ? acc + 4294967296 : acc;\n}\n//# sourceMappingURL=xxHash32.js.map", "// Copyright (c) John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { EnvelopeType, EnvelopeComputeIndex, LFOEnvelopeTypes, RandomEnvelopeTypes, Config, Envelope, getArpeggioPitchIndex, FilterType, AutomationTarget, Transition } from \"./SynthConfig\";\nimport { Synth, Tone } from \"./synth\";\nimport { Instrument } from \"./Instrument\";\nimport { InstrumentState } from \"./InstrumentState\";\nimport { FilterSettings } from \"./Filter\";\nimport { EnvelopeSettings } from \"./Envelope\";\nimport { NotePin } from \"./Pattern\";\nimport { xxHash32 } from \"js-xxhash\";\n\nexport class EnvelopeComputer {\n    // \"Unscaled\" values do not increase with Envelope Speed's timescale factor. Thus they are \"real\" seconds since the start of the note.\n    // Fade envelopes notably use unscaled values instead of being tied to Envelope Speed.\n    noteSecondsStart: number[] = [];\n    noteSecondsStartUnscaled: number = 0.0;\n    noteSecondsEnd: number[] = [];\n    noteSecondsEndUnscaled: number = 0.0;\n    noteTicksStart: number = 0.0;\n    noteTicksEnd: number = 0.0;\n    noteSizeStart: number = Config.noteSizeMax;\n    noteSizeEnd: number = Config.noteSizeMax;\n    prevNoteSize: number = Config.noteSizeMax;\n    nextNoteSize: number = Config.noteSizeMax;\n    private _noteSizeFinal: number = Config.noteSizeMax;\n    prevNoteSecondsStart: number[] = [];\n    prevNoteSecondsStartUnscaled: number = 0.0;\n    prevNoteSecondsEnd: number[] = [];\n    prevNoteSecondsEndUnscaled: number = 0.0;\n    prevNoteTicksStart: number = 0.0;\n    prevNoteTicksEnd: number = 0.0;\n    private _prevNoteSizeFinal: number = Config.noteSizeMax;\n    tickTimeEnd: number[] = [];\n\n    drumsetFilterEnvelopeStart: number = 0.0;\n    drumsetFilterEnvelopeEnd: number = 0.0;\n\n    prevSlideStart: boolean = false;\n    prevSlideEnd: boolean = false;\n    nextSlideStart: boolean = false;\n    nextSlideEnd: boolean = false;\n    prevSlideRatioStart: number = 0.0;\n    prevSlideRatioEnd: number = 0.0;\n    nextSlideRatioStart: number = 0.0;\n    nextSlideRatioEnd: number = 0.0;\n\n    startPinTickAbsolute: number | null = null;\n    private startPinTickDefaultPitch: number | null = null;\n    private startPinTickPitch: number | null = null;\n\n    readonly envelopeStarts: number[] = [];\n    readonly envelopeEnds: number[] = [];\n    private readonly _modifiedEnvelopeIndices: number[] = [];\n    private _modifiedEnvelopeCount: number = 0;\n    lowpassCutoffDecayVolumeCompensation: number = 1.0;\n\n    constructor(/*private _perNote: boolean*/) {\n        //const length: number = this._perNote ? EnvelopeComputeIndex.length : InstrumentAutomationIndex.length;\n        const length: number = EnvelopeComputeIndex.length;\n        for (let i: number = 0; i < length; i++) {\n            this.envelopeStarts[i] = 1.0;\n            this.envelopeEnds[i] = 1.0;\n        }\n\n        this.reset();\n    }\n\n    reset(): void {\n        for (let envelopeIndex: number = 0; envelopeIndex < Config.maxEnvelopeCount + 1; envelopeIndex++) {\n            this.noteSecondsEnd[envelopeIndex] = 0.0;\n            this.prevNoteSecondsEnd[envelopeIndex] = 0.0;\n        }\n        this.noteSecondsEndUnscaled = 0.0;\n        this.noteTicksEnd = 0.0;\n        this._noteSizeFinal = Config.noteSizeMax;\n        this.prevNoteSecondsEndUnscaled = 0.0;\n        this.prevNoteTicksEnd = 0.0;\n        this._prevNoteSizeFinal = Config.noteSizeMax;\n        this._modifiedEnvelopeCount = 0;\n        this.drumsetFilterEnvelopeStart = 0.0;\n        this.drumsetFilterEnvelopeEnd = 0.0;\n        this.startPinTickAbsolute = null;\n        this.startPinTickDefaultPitch = null;\n        this.startPinTickPitch = null;\n    }\n\n    computeEnvelopes(instrument: Instrument, currentPart: number, tickTimeStart: number[], tickTimeStartReal: number, secondsPerTick: number, tone: Tone | null, timeScale: number[], instrumentState: InstrumentState, synth: Synth, channelIndex: number, instrumentIndex: number): void {\n        const secondsPerTickUnscaled: number = secondsPerTick;\n        const transition: Transition = instrument.getTransition();\n        if (tone != null && tone.atNoteStart && !transition.continues && !tone.forceContinueAtStart) {\n            this.prevNoteSecondsEndUnscaled = this.noteSecondsEndUnscaled;\n            this.prevNoteTicksEnd = this.noteTicksEnd;\n            this._prevNoteSizeFinal = this._noteSizeFinal;\n            this.noteSecondsEndUnscaled = 0.0;\n            this.noteTicksEnd = 0.0;\n            for (let envelopeIndex: number = 0; envelopeIndex < Config.maxEnvelopeCount + 1; envelopeIndex++) {\n                this.prevNoteSecondsEnd[envelopeIndex] = this.noteSecondsEnd[envelopeIndex];\n                this.noteSecondsEnd[envelopeIndex] = 0.0;\n            }\n        }\n        if (tone != null) {\n            if (tone.note != null) {\n                this._noteSizeFinal = tone.note.pins[tone.note.pins.length - 1].size;\n            } else {\n                this._noteSizeFinal = Config.noteSizeMax;\n            }\n        }\n        const tickTimeEnd: number[] = [];\n        const tickTimeEndReal: number = tickTimeStartReal + 1.0;\n        const noteSecondsStart: number[] = [];\n        const noteSecondsStartUnscaled: number = this.noteSecondsEndUnscaled;\n        const noteSecondsEnd: number[] = [];\n        const noteSecondsEndUnscaled: number = noteSecondsStartUnscaled + secondsPerTickUnscaled;\n        const noteTicksStart: number = this.noteTicksEnd;\n        const noteTicksEnd: number = noteTicksStart + 1.0;\n        const prevNoteSecondsStart: number[] = [];\n        const prevNoteSecondsEnd: number[] = [];\n        const prevNoteSecondsStartUnscaled: number = this.prevNoteSecondsEndUnscaled;\n        const prevNoteSecondsEndUnscaled: number = prevNoteSecondsStartUnscaled + secondsPerTickUnscaled;\n        const prevNoteTicksStart: number = this.prevNoteTicksEnd;\n        const prevNoteTicksEnd: number = prevNoteTicksStart + 1.0;\n\n        const beatsPerTick: number = 1.0 / (Config.ticksPerPart * Config.partsPerBeat);\n        const beatTimeStart: number[] = [];\n        const beatTimeEnd: number[] = [];\n\n        let noteSizeStart: number = this._noteSizeFinal;\n        let noteSizeEnd: number = this._noteSizeFinal;\n        let prevNoteSize: number = this._prevNoteSizeFinal;\n        let nextNoteSize: number = 0;\n        let prevSlideStart: boolean = false;\n        let prevSlideEnd: boolean = false;\n        let nextSlideStart: boolean = false;\n        let nextSlideEnd: boolean = false;\n        let prevSlideRatioStart: number = 0.0;\n        let prevSlideRatioEnd: number = 0.0;\n        let nextSlideRatioStart: number = 0.0;\n        let nextSlideRatioEnd: number = 0.0;\n        if (tone == null) {\n            this.startPinTickAbsolute = null;\n            this.startPinTickDefaultPitch = null;\n        }\n        if (tone != null && tone.note != null && !tone.passedEndOfNote) {\n            const endPinIndex: number = tone.note.getEndPinIndex(currentPart);\n            const startPin: NotePin = tone.note.pins[endPinIndex - 1];\n            const endPin: NotePin = tone.note.pins[endPinIndex];\n            const startPinTick = (tone.note.start + startPin.time) * Config.ticksPerPart;\n            if (this.startPinTickAbsolute == null || (!(transition.continues || transition.slides)) && tone.passedEndOfNote) this.startPinTickAbsolute = startPinTick + synth.computeTicksSinceStart(true); //for random per note\n            if (this.startPinTickDefaultPitch == null ||/* (!(transition.continues || transition.slides)) &&*/ tone.passedEndOfNote) this.startPinTickDefaultPitch = this.getPitchValue(instrument, tone, instrumentState, false);\n            if (!tone.passedEndOfNote) this.startPinTickPitch = this.getPitchValue(instrument, tone, instrumentState, true);\n            const endPinTick: number = (tone.note.start + endPin.time) * Config.ticksPerPart;\n            const ratioStart: number = (tickTimeStartReal - startPinTick) / (endPinTick - startPinTick);\n            const ratioEnd: number = (tickTimeEndReal - startPinTick) / (endPinTick - startPinTick);\n            noteSizeStart = startPin.size + (endPin.size - startPin.size) * ratioStart;\n            noteSizeEnd = startPin.size + (endPin.size - startPin.size) * ratioEnd;\n\n            if (transition.slides) {\n                const noteStartTick: number = tone.noteStartPart * Config.ticksPerPart;\n                const noteEndTick: number = tone.noteEndPart * Config.ticksPerPart;\n                const noteLengthTicks: number = noteEndTick - noteStartTick;\n                const maximumSlideTicks: number = noteLengthTicks * 0.5;\n                const slideTicks: number = Math.min(maximumSlideTicks, transition.slideTicks);\n                if (tone.prevNote != null && !tone.forceContinueAtStart) {\n                    if (tickTimeStartReal - noteStartTick < slideTicks) {\n                        prevSlideStart = true;\n                        prevSlideRatioStart = 0.5 * (1.0 - (tickTimeStartReal - noteStartTick) / slideTicks);\n                    }\n                    if (tickTimeEndReal - noteStartTick < slideTicks) {\n                        prevSlideEnd = true;\n                        prevSlideRatioEnd = 0.5 * (1.0 - (tickTimeEndReal - noteStartTick) / slideTicks);\n                    }\n                }\n                if (tone.nextNote != null && !tone.forceContinueAtEnd) {\n                    nextNoteSize = tone.nextNote.pins[0].size\n                    if (noteEndTick - tickTimeStartReal < slideTicks) {\n                        nextSlideStart = true;\n                        nextSlideRatioStart = 0.5 * (1.0 - (noteEndTick - tickTimeStartReal) / slideTicks);\n                    }\n                    if (noteEndTick - tickTimeEndReal < slideTicks) {\n                        nextSlideEnd = true;\n                        nextSlideRatioEnd = 0.5 * (1.0 - (noteEndTick - tickTimeEndReal) / slideTicks);\n                    }\n                }\n            }\n        }\n\n        let lowpassCutoffDecayVolumeCompensation: number = 1.0;\n        let usedNoteSize = false;\n        for (let envelopeIndex: number = 0; envelopeIndex <= instrument.envelopeCount; envelopeIndex++) {\n            let automationTarget: AutomationTarget;\n            let targetIndex: number;\n            let envelope: Envelope;\n\n            let inverse: boolean = false;\n            let isDiscrete: boolean = false;\n            let perEnvelopeSpeed: number = 1;\n            let globalEnvelopeSpeed: number = 1;\n            let envelopeSpeed: number = perEnvelopeSpeed * globalEnvelopeSpeed;\n            let perEnvelopeLowerBound: number = 0;\n            let perEnvelopeUpperBound: number = 1;\n            let timeSinceStart: number = 0;\n            let steps: number = 2;\n            let seed: number = 2;\n            let waveform: number = LFOEnvelopeTypes.sine;\n            let startPinTickAbsolute: number = this.startPinTickAbsolute || 0.0;\n            let defaultPitch: number = this.startPinTickDefaultPitch || 0.0;\n            if (envelopeIndex == instrument.envelopeCount) {\n                if (usedNoteSize /*|| !this._perNote*/) break;\n                // Special case: if no other envelopes used note size, default to applying it to note volume.\n                automationTarget = Config.instrumentAutomationTargets.dictionary[\"noteVolume\"];\n                targetIndex = 0;\n                envelope = Config.newEnvelopes.dictionary[\"note size\"];\n            } else {\n                let envelopeSettings: EnvelopeSettings = instrument.envelopes[envelopeIndex];\n                automationTarget = Config.instrumentAutomationTargets[envelopeSettings.target];\n                targetIndex = envelopeSettings.index;\n                envelope = Config.newEnvelopes[envelopeSettings.envelope];\n                inverse = instrument.envelopes[envelopeIndex].inverse;\n                isDiscrete = instrument.envelopes[envelopeIndex].discrete;\n                perEnvelopeSpeed = instrument.envelopes[envelopeIndex].perEnvelopeSpeed;\n                globalEnvelopeSpeed = Math.pow(instrument.envelopeSpeed, 2) / 144;\n                envelopeSpeed = perEnvelopeSpeed * globalEnvelopeSpeed;\n\n                perEnvelopeLowerBound = instrument.envelopes[envelopeIndex].perEnvelopeLowerBound;\n                perEnvelopeUpperBound = instrument.envelopes[envelopeIndex].perEnvelopeUpperBound;\n                if (synth.isModActive(Config.modulators.dictionary[\"individual envelope lower bound\"].index, channelIndex, instrumentIndex) && instrument.envelopes[envelopeIndex].tempEnvelopeLowerBound != null) { //modulation\n                    perEnvelopeLowerBound = instrument.envelopes[envelopeIndex].tempEnvelopeLowerBound!;\n                }\n                if (synth.isModActive(Config.modulators.dictionary[\"individual envelope upper bound\"].index, channelIndex, instrumentIndex) && instrument.envelopes[envelopeIndex].tempEnvelopeUpperBound != null) { //modulation\n                    perEnvelopeUpperBound = instrument.envelopes[envelopeIndex].tempEnvelopeUpperBound!;\n                }\n                if (!(perEnvelopeLowerBound <= perEnvelopeUpperBound)) { //reset bounds if incorrect\n                    perEnvelopeLowerBound = 0;\n                    perEnvelopeUpperBound = 1;\n                }\n\n                timeSinceStart = synth.computeTicksSinceStart();\n                steps = instrument.envelopes[envelopeIndex].steps;\n                seed = instrument.envelopes[envelopeIndex].seed;\n                if (instrument.envelopes[envelopeIndex].waveform >= (envelope.name == \"lfo\" ? LFOEnvelopeTypes.length : RandomEnvelopeTypes.length)) {\n                    instrument.envelopes[envelopeIndex].waveform = 0; //make sure that waveform is a proper index\n                }\n                waveform = instrument.envelopes[envelopeIndex].waveform;\n\n\n                if (!timeScale[envelopeIndex]) timeScale[envelopeIndex] = 0;\n\n                const secondsPerTickScaled: number = secondsPerTick * timeScale[envelopeIndex];\n                if (!tickTimeStart[envelopeIndex]) tickTimeStart[envelopeIndex] = 0; //prevents tremolos from causing a NaN width error\n                tickTimeEnd[envelopeIndex] = tickTimeStart[envelopeIndex] ? tickTimeStart[envelopeIndex] + timeScale[envelopeIndex] : timeScale[envelopeIndex];\n                noteSecondsStart[envelopeIndex] = this.noteSecondsEnd[envelopeIndex] ? this.noteSecondsEnd[envelopeIndex] : 0;\n                prevNoteSecondsStart[envelopeIndex] = this.prevNoteSecondsEnd[envelopeIndex] ? this.prevNoteSecondsEnd[envelopeIndex] : 0;\n                noteSecondsEnd[envelopeIndex] = noteSecondsStart[envelopeIndex] ? noteSecondsStart[envelopeIndex] + secondsPerTickScaled : secondsPerTickScaled;\n                prevNoteSecondsEnd[envelopeIndex] = prevNoteSecondsStart[envelopeIndex] ? prevNoteSecondsStart[envelopeIndex] + secondsPerTickScaled : secondsPerTickScaled;\n                beatTimeStart[envelopeIndex] = tickTimeStart[envelopeIndex] ? beatsPerTick * tickTimeStart[envelopeIndex] : beatsPerTick;\n                beatTimeEnd[envelopeIndex] = tickTimeEnd[envelopeIndex] ? beatsPerTick * tickTimeEnd[envelopeIndex] : beatsPerTick;\n\n                if (envelope.type == EnvelopeType.noteSize) usedNoteSize = true;\n            }\n            //only calculate pitch if needed\n            const pitch: number = (envelope.type == EnvelopeType.pitch) ? this.computePitchEnvelope(instrument, envelopeIndex, (this.startPinTickPitch || this.getPitchValue(instrument, tone, instrumentState, true))) : 0;\n\n            //calculate envelope values if target isn't null\n            if (automationTarget.computeIndex != null) {\n                const computeIndex: number = automationTarget.computeIndex + targetIndex;\n                let envelopeStart: number = EnvelopeComputer.computeEnvelope(envelope, envelopeSpeed, globalEnvelopeSpeed, noteSecondsStartUnscaled, noteSecondsStart[envelopeIndex], beatTimeStart[envelopeIndex], timeSinceStart, noteSizeStart, pitch, inverse, perEnvelopeLowerBound, perEnvelopeUpperBound, false, steps, seed, waveform, defaultPitch, startPinTickAbsolute);\n                if (prevSlideStart) {\n                    const other: number = EnvelopeComputer.computeEnvelope(envelope, envelopeSpeed, globalEnvelopeSpeed, prevNoteSecondsStartUnscaled, prevNoteSecondsStart[envelopeIndex], beatTimeStart[envelopeIndex], timeSinceStart, prevNoteSize, pitch, inverse, perEnvelopeLowerBound, perEnvelopeUpperBound, false, steps, seed, waveform, defaultPitch, startPinTickAbsolute);\n                    envelopeStart += (other - envelopeStart) * prevSlideRatioStart;\n                }\n                if (nextSlideStart) {\n                    const other: number = EnvelopeComputer.computeEnvelope(envelope, envelopeSpeed, globalEnvelopeSpeed, 0.0, 0.0, beatTimeStart[envelopeIndex], timeSinceStart, nextNoteSize, pitch, inverse, perEnvelopeLowerBound, perEnvelopeUpperBound, false, steps, seed, waveform, defaultPitch, startPinTickAbsolute);\n                    envelopeStart += (other - envelopeStart) * nextSlideRatioStart;\n                }\n                let envelopeEnd: number = envelopeStart;\n                if (isDiscrete == false) {\n                    envelopeEnd = EnvelopeComputer.computeEnvelope(envelope, envelopeSpeed, globalEnvelopeSpeed, noteSecondsEndUnscaled, noteSecondsEnd[envelopeIndex], beatTimeEnd[envelopeIndex], timeSinceStart, noteSizeEnd, pitch, inverse, perEnvelopeLowerBound, perEnvelopeUpperBound, false, steps, seed, waveform, defaultPitch, startPinTickAbsolute);\n                    if (prevSlideEnd) {\n                        const other: number = EnvelopeComputer.computeEnvelope(envelope, envelopeSpeed, globalEnvelopeSpeed, prevNoteSecondsEndUnscaled, prevNoteSecondsEnd[envelopeIndex], beatTimeEnd[envelopeIndex], timeSinceStart, prevNoteSize, pitch, inverse, perEnvelopeLowerBound, perEnvelopeUpperBound, false, steps, seed, waveform, defaultPitch, startPinTickAbsolute);\n                        envelopeEnd += (other - envelopeEnd) * prevSlideRatioEnd;\n                    }\n                    if (nextSlideEnd) {\n                        const other: number = EnvelopeComputer.computeEnvelope(envelope, envelopeSpeed, globalEnvelopeSpeed, 0.0, 0.0, beatTimeEnd[envelopeIndex], timeSinceStart, nextNoteSize, pitch, inverse, perEnvelopeLowerBound, perEnvelopeUpperBound, false, steps, seed, waveform, defaultPitch, startPinTickAbsolute);\n                        envelopeEnd += (other - envelopeEnd) * nextSlideRatioEnd;\n                    }\n                }\n\n                this.envelopeStarts[computeIndex] *= envelopeStart;\n                this.envelopeEnds[computeIndex] *= envelopeEnd;\n                this._modifiedEnvelopeIndices[this._modifiedEnvelopeCount++] = computeIndex;\n\n                if (automationTarget.isFilter) {\n                    const filterSettings: FilterSettings = /*this._perNote ?*/ (instrument.tmpNoteFilterStart != null) ? instrument.tmpNoteFilterStart : instrument.noteFilter /*: instrument.eqFilter*/;\n                    if (filterSettings.controlPointCount > targetIndex && filterSettings.controlPoints[targetIndex].type == FilterType.lowPass) {\n                        lowpassCutoffDecayVolumeCompensation = Math.max(lowpassCutoffDecayVolumeCompensation, EnvelopeComputer.getLowpassCutoffDecayVolumeCompensation(envelope, perEnvelopeSpeed));\n                    }\n                }\n            }\n        }\n\n        this.noteSecondsStartUnscaled = noteSecondsStartUnscaled;\n        this.noteSecondsEndUnscaled = noteSecondsEndUnscaled;\n        this.noteTicksStart = noteTicksStart;\n        this.noteTicksEnd = noteTicksEnd;\n        this.prevNoteSecondsStartUnscaled = prevNoteSecondsStartUnscaled;\n        this.prevNoteSecondsEndUnscaled = prevNoteSecondsEndUnscaled;\n        this.prevNoteTicksStart = prevNoteTicksStart;\n        this.prevNoteTicksEnd = prevNoteTicksEnd;\n        for (let envelopeIndex: number = 0; envelopeIndex < Config.maxEnvelopeCount + 1; envelopeIndex++) {\n            this.noteSecondsStart[envelopeIndex] = noteSecondsStart[envelopeIndex];\n            this.noteSecondsEnd[envelopeIndex] = noteSecondsEnd[envelopeIndex];\n            this.prevNoteSecondsStart[envelopeIndex] = prevNoteSecondsStart[envelopeIndex];\n            this.prevNoteSecondsEnd[envelopeIndex] = prevNoteSecondsEnd[envelopeIndex];\n        }\n        this.prevNoteSize = prevNoteSize;\n        this.nextNoteSize = nextNoteSize;\n        this.noteSizeStart = noteSizeStart;\n        this.noteSizeEnd = noteSizeEnd;\n        this.prevSlideStart = prevSlideStart;\n        this.prevSlideEnd = prevSlideEnd;\n        this.nextSlideStart = nextSlideStart;\n        this.nextSlideEnd = nextSlideEnd;\n        this.prevSlideRatioStart = prevSlideRatioStart;\n        this.prevSlideRatioEnd = prevSlideRatioEnd;\n        this.nextSlideRatioStart = nextSlideRatioStart;\n        this.nextSlideRatioEnd = nextSlideRatioEnd;\n        this.lowpassCutoffDecayVolumeCompensation = lowpassCutoffDecayVolumeCompensation;\n    }\n\n    clearEnvelopes(): void {\n        for (let envelopeIndex: number = 0; envelopeIndex < this._modifiedEnvelopeCount; envelopeIndex++) {\n            const computeIndex: number = this._modifiedEnvelopeIndices[envelopeIndex];\n            this.envelopeStarts[computeIndex] = 1.0;\n            this.envelopeEnds[computeIndex] = 1.0;\n        }\n        this._modifiedEnvelopeCount = 0;\n    }\n\n    static computeEnvelope(envelope: Envelope, perEnvelopeSpeed: number, globalEnvelopeSpeed: number, unspedTime: number, time: number, beats: number, timeSinceStart: number, noteSize: number, pitch: number, inverse: boolean, perEnvelopeLowerBound: number, perEnvelopeUpperBound: number, isDrumset: boolean = false, steps: number, seed: number, waveform: number, defaultPitch: number, notePinStart: number): number {\n        const envelopeSpeed = isDrumset ? envelope.speed : 1;\n        const boundAdjust = (perEnvelopeUpperBound - perEnvelopeLowerBound);\n        switch (envelope.type) {\n            case EnvelopeType.none: return perEnvelopeUpperBound;\n            case EnvelopeType.noteSize:\n                if (!inverse) {\n                    return Synth.noteSizeToVolumeMult(noteSize) * (boundAdjust) + perEnvelopeLowerBound;\n                } else {\n                    return perEnvelopeUpperBound - Synth.noteSizeToVolumeMult(noteSize) * (boundAdjust);\n                }\n            case EnvelopeType.pitch:\n                //inversion and bounds are handled in the pitch calculation that we did prior\n                return pitch;\n            case EnvelopeType.pseudorandom:\n                //randomization is essentially just a complex hashing function which appears random to us, but is repeatable every time\n                //we can use either the time passed from the beginning of our song or the pitch of the note for what we hash\n                const hashMax: number = 0xffffffff;\n                const step: number = steps;\n                switch (waveform) {\n                    case RandomEnvelopeTypes.time:\n                        if (step <= 1) return 1;\n                        const timeHash: number = xxHash32((perEnvelopeSpeed == 0 ? 0 : Math.floor((timeSinceStart * perEnvelopeSpeed) / (256))) + \"\", seed);\n                        if (inverse) {\n                            return perEnvelopeUpperBound - boundAdjust * (step / (step - 1)) * Math.floor(timeHash * step / (hashMax + 1)) / step;\n                        } else {\n                            return boundAdjust * (step / (step - 1)) * Math.floor(timeHash * (step) / (hashMax + 1)) / step + perEnvelopeLowerBound;\n                        }\n                    case RandomEnvelopeTypes.pitch:\n                        const pitchHash: number = xxHash32(defaultPitch + \"\", seed);\n                        if (inverse) {\n                            return perEnvelopeUpperBound - boundAdjust * pitchHash / (hashMax + 1);\n                        } else {\n                            return boundAdjust * pitchHash / (hashMax + 1) + perEnvelopeLowerBound;\n                        }\n                    case RandomEnvelopeTypes.note:\n                        if (step <= 1) return 1;\n                        const noteHash: number = xxHash32(notePinStart + \"\", seed);\n                        if (inverse) {\n                            return perEnvelopeUpperBound - boundAdjust * (step / (step - 1)) * Math.floor(noteHash * step / (hashMax + 1)) / step;\n                        } else {\n                            return boundAdjust * (step / (step - 1)) * Math.floor(noteHash * (step) / (hashMax + 1)) / step + perEnvelopeLowerBound;\n                        }\n                    case RandomEnvelopeTypes.timeSmooth:\n                        const timeHashA: number = xxHash32((perEnvelopeSpeed == 0 ? 0 : Math.floor((timeSinceStart * perEnvelopeSpeed) / (256))) + \"\", seed);\n                        const timeHashB: number = xxHash32((perEnvelopeSpeed == 0 ? 0 : Math.floor((timeSinceStart * perEnvelopeSpeed + 256) / (256))) + \"\", seed);\n                        const weightedAverage: number = timeHashA * (1 - ((timeSinceStart * perEnvelopeSpeed) / (256)) % 1) + timeHashB * (((timeSinceStart * perEnvelopeSpeed) / (256)) % 1);\n                        if (inverse) {\n                            return perEnvelopeUpperBound - boundAdjust * weightedAverage / (hashMax + 1);\n                        } else {\n                            return boundAdjust * weightedAverage / (hashMax + 1) + perEnvelopeLowerBound;\n                        }\n                    default: throw new Error(\"Unrecognized operator envelope waveform type: \" + waveform);\n                }\n            case EnvelopeType.twang:\n                if (inverse) {\n                    return perEnvelopeUpperBound - boundAdjust * (1.0 / (1.0 + time * envelopeSpeed));\n                } else {\n                    return boundAdjust / (1.0 + time * envelopeSpeed) + perEnvelopeLowerBound;\n                }\n            case EnvelopeType.swell:\n                if (inverse) {\n                    return boundAdjust / (1.0 + time * envelopeSpeed) + perEnvelopeLowerBound; //swell is twang's inverse... I wonder if it would be worth it to just merge the two :/\n                } else {\n                    return perEnvelopeUpperBound - boundAdjust / (1.0 + time * envelopeSpeed);\n                }\n            case EnvelopeType.lfo:\n                switch (waveform) {\n                    case LFOEnvelopeTypes.sine:\n                        if (inverse) {\n                            return (perEnvelopeUpperBound / 2) + boundAdjust * Math.cos(beats * 2.0 * Math.PI * envelopeSpeed) * 0.5 + (perEnvelopeLowerBound / 2);\n                        } else {\n                            return (perEnvelopeUpperBound / 2) - boundAdjust * Math.cos(beats * 2.0 * Math.PI * envelopeSpeed) * 0.5 + (perEnvelopeLowerBound / 2);\n                        }\n                    case LFOEnvelopeTypes.square:\n                        if (inverse) {\n                            return (Math.cos(beats * 2.0 * Math.PI * envelopeSpeed + 3 * Math.PI / 2) < 0) ? perEnvelopeUpperBound : perEnvelopeLowerBound;\n                        } else {\n                            return (Math.cos(beats * 2.0 * Math.PI * envelopeSpeed + 3 * Math.PI / 2) < 0) ? perEnvelopeLowerBound : perEnvelopeUpperBound;\n                        }\n                    case LFOEnvelopeTypes.triangle:\n                        if (inverse) {\n                            return (perEnvelopeUpperBound / 2) - (boundAdjust / Math.PI) * Math.asin(Math.sin((Math.PI / 2) + beats * Math.PI * 2.0 * envelopeSpeed)) + (perEnvelopeLowerBound / 2);\n                        } else {\n                            return (perEnvelopeUpperBound / 2) + (boundAdjust / Math.PI) * Math.asin(Math.sin((Math.PI / 2) + beats * Math.PI * 2.0 * envelopeSpeed)) + (perEnvelopeLowerBound / 2);\n                        }\n                    case LFOEnvelopeTypes.sawtooth:\n                        if (inverse) {\n                            return perEnvelopeUpperBound - (beats * envelopeSpeed) % 1 * boundAdjust;\n                        } else {\n                            return (beats * envelopeSpeed) % 1 * boundAdjust + perEnvelopeLowerBound;\n                        }\n                    case LFOEnvelopeTypes.trapezoid:\n                        let trap: number = 0;\n                        if (inverse) {\n                            trap = (perEnvelopeUpperBound / 2) - (boundAdjust * 2 / Math.PI) * Math.asin(Math.sin((Math.PI / 2) + beats * Math.PI * 2.0 * envelopeSpeed)) + (perEnvelopeLowerBound / 2);\n                        } else {\n                            trap = (perEnvelopeUpperBound / 2) + (boundAdjust * 2 / Math.PI) * Math.asin(Math.sin((Math.PI / 2) + beats * Math.PI * 2.0 * envelopeSpeed)) + (perEnvelopeLowerBound / 2);\n                        }\n                        return Math.max(perEnvelopeLowerBound, Math.min(perEnvelopeUpperBound, trap));\n                    case LFOEnvelopeTypes.steppedSaw:\n                        if (steps <= 1) return 1;\n                        let saw: number = (beats * envelopeSpeed) % 1;\n                        if (inverse) {\n                            return perEnvelopeUpperBound - Math.floor(saw * steps) * boundAdjust / (steps - 1);\n                        } else {\n                            return Math.floor(saw * steps) * boundAdjust / (steps - 1) + perEnvelopeLowerBound;\n                        }\n\n                    case LFOEnvelopeTypes.steppedTri:\n                        if (steps <= 1) return 1;\n                        let tri: number = 0.5 + (inverse ? -1 : 1) * (1 / Math.PI) * Math.asin(Math.sin((Math.PI / 2) + beats * Math.PI * 2.0 * envelopeSpeed));\n                        return Math.round(tri * (steps - 1)) * boundAdjust / (steps - 1) + perEnvelopeLowerBound;\n                    default: throw new Error(\"Unrecognized operator envelope waveform type: \" + waveform);\n                }\n            case EnvelopeType.tremolo2: //kept only for drumsets right now\n                if (inverse) {\n                    return (perEnvelopeUpperBound / 4) + boundAdjust * Math.cos(beats * 2.0 * Math.PI * envelopeSpeed) * 0.25 + (perEnvelopeLowerBound / 4); //inverse works strangely with tremolo2. If I ever update this I'll need to turn all current versions into tremolo with bounds\n                } else {\n                    return 0.5 + (perEnvelopeUpperBound / 4) - boundAdjust * Math.cos(beats * 2.0 * Math.PI * envelopeSpeed) * 0.25 - (perEnvelopeLowerBound / 4);\n                }\n            case EnvelopeType.punch:\n                if (inverse) {\n                    return Math.max(0, perEnvelopeUpperBound + 1.0 - Math.max(1.0 - perEnvelopeLowerBound, 1.0 - perEnvelopeUpperBound - unspedTime * globalEnvelopeSpeed * 10.0)); //punch special case: 2- instead of 1-\n                } else {\n                    return Math.max(1.0+perEnvelopeLowerBound, 1.0+perEnvelopeUpperBound - unspedTime * globalEnvelopeSpeed * 10.0); //punch only uses global envelope speed\n                }\n            case EnvelopeType.flare:\n                const attack: number = 0.25 / Math.sqrt(envelopeSpeed * perEnvelopeSpeed); //flare and blip need to be handled a little differently with envelope speeds. I have to use the old system\n                if (inverse) {\n                    return perEnvelopeUpperBound - boundAdjust * (unspedTime < attack ? unspedTime / attack : 1.0 / (1.0 + (unspedTime - attack) * envelopeSpeed * perEnvelopeSpeed));\n                } else {\n                    return boundAdjust * (unspedTime < attack ? unspedTime / attack : 1.0 / (1.0 + (unspedTime - attack) * envelopeSpeed * perEnvelopeSpeed)) + perEnvelopeLowerBound;\n                }\n            case EnvelopeType.decay:\n                if (inverse) {\n                    return perEnvelopeUpperBound - boundAdjust * Math.pow(2, -envelopeSpeed * time);\n                } else {\n                    return boundAdjust * Math.pow(2, -envelopeSpeed * time) + perEnvelopeLowerBound;\n                }\n            case EnvelopeType.blip:\n                if (inverse) {\n                    return perEnvelopeUpperBound - boundAdjust * +(unspedTime < (0.25 / Math.sqrt(envelopeSpeed * perEnvelopeSpeed)));\n                } else {\n                    return boundAdjust * +(unspedTime < (0.25 / Math.sqrt(envelopeSpeed * perEnvelopeSpeed))) + perEnvelopeLowerBound;\n                }\n            case EnvelopeType.wibble:\n                let temp = 0.5 - Math.cos(beats * envelopeSpeed) * 0.5;\n                temp = 1.0 / (1.0 + time * (envelopeSpeed - (temp / (1.5 / envelopeSpeed))));\n                temp = temp > 0.0 ? temp : 0.0;\n                if (inverse) {\n                    return perEnvelopeUpperBound - boundAdjust * temp;\n                } else {\n                    return boundAdjust * temp + perEnvelopeLowerBound;\n                }\n            case EnvelopeType.linear: {\n                let lin = (1.0 - (time / (16 / envelopeSpeed)));\n                lin = lin > 0.0 ? lin : 0.0;\n                if (inverse) { //another case where linear's inverse is rise. Do I merge them?\n                    return perEnvelopeUpperBound - boundAdjust * lin;\n                } else {\n                    return boundAdjust * lin + perEnvelopeLowerBound;\n                }\n            }\n            case EnvelopeType.rise: {\n                let lin = (time / (16 / envelopeSpeed));\n                lin = lin < 1.0 ? lin : 1.0;\n                if (inverse) {\n                    return perEnvelopeUpperBound - boundAdjust * lin;\n                } else {\n                    return boundAdjust * lin + perEnvelopeLowerBound;\n                }\n            }\n            case EnvelopeType.fall: {\n                if (inverse) {\n                    return Math.min(Math.max(perEnvelopeLowerBound, perEnvelopeUpperBound - boundAdjust * Math.sqrt(Math.max(1.0 - envelopeSpeed * time / 2, 0))), perEnvelopeUpperBound);\n                } else {\n                    return Math.max(perEnvelopeLowerBound, boundAdjust * Math.sqrt(Math.max(1.0 - envelopeSpeed * time / 2, 0)) + perEnvelopeLowerBound);\n                }\n            }\n            default: throw new Error(\"Unrecognized operator envelope type.\");\n        }\n\n    }\n\n    getPitchValue(instrument: Instrument, tone: Tone | null, instrumentState: InstrumentState, calculateBends: boolean = true): number {\n        if (tone && tone.pitchCount >= 1) {\n            const chord = instrument.getChord();\n            const arpeggiates = chord.arpeggiates;\n            const monophonic = chord.name == \"monophonic\"\n            const arpeggio: number = Math.floor(instrumentState.arpTime / Config.ticksPerArpeggio); //calculate arpeggiation\n            const tonePitch = tone.pitches[arpeggiates ? getArpeggioPitchIndex(tone.pitchCount, instrument.fastTwoNoteArp, arpeggio) : monophonic ? instrument.monoChordTone : 0]\n            if (calculateBends) {\n                return tone.lastInterval != tonePitch ? tonePitch + tone.lastInterval : tonePitch; //account for pitch bends\n            } else {\n                return tonePitch;\n            }\n        }\n        return 0;\n    }\n\n    computePitchEnvelope(instrument: Instrument, index: number, pitch: number = 0): number {\n        let startNote: number = 0;\n        let endNote: number = Config.maxPitch;\n        let inverse: boolean = false;\n        let envelopeLowerBound: number = 0;\n        let envelopeUpperBound: number = 1;\n\n        if (instrument.isNoiseInstrument) {\n            endNote = Config.drumCount - 1;\n        }\n\n\n        if (index < instrument.envelopeCount && index !== -2) {\n            startNote = instrument.envelopes[index].pitchEnvelopeStart;\n            endNote = instrument.envelopes[index].pitchEnvelopeEnd;\n            inverse = instrument.envelopes[index].inverse;\n            envelopeLowerBound = instrument.envelopes[index].perEnvelopeLowerBound;\n            envelopeUpperBound = instrument.envelopes[index].perEnvelopeUpperBound;\n        }\n\n        if (startNote > endNote) { //Reset if values are improper\n            startNote = 0;\n            endNote = instrument.isNoiseInstrument ? Config.drumCount - 1 : Config.maxPitch;\n        }\n        const range = endNote - startNote + 1;\n        if (!inverse) {\n            if (pitch <= startNote) {\n                return envelopeLowerBound;\n            } else if (pitch >= endNote) {\n                return envelopeUpperBound;\n            } else {\n                return (pitch - startNote) * (envelopeUpperBound - envelopeLowerBound) / range + envelopeLowerBound;\n            }\n        } else {\n            if (pitch <= startNote) {\n                return envelopeUpperBound;\n            } else if (pitch >= endNote) {\n                return envelopeLowerBound;\n            } else {\n                return envelopeUpperBound - (pitch - startNote) * (envelopeUpperBound - envelopeLowerBound) / range;\n            }\n        }\n    }\n\n    static getLowpassCutoffDecayVolumeCompensation(envelope: Envelope, perEnvelopeSpeed: number = 1): number {\n        // This is a little hokey in the details, but I designed it a while ago and keep it\n        // around for compatibility. This decides how much to increase the volume (or\n        // expression) to compensate for a decaying lowpass cutoff to maintain perceived\n        // volume overall.\n        if (envelope.type == EnvelopeType.decay) return 1.25 + 0.025 * /*envelope.speed */ perEnvelopeSpeed;\n        if (envelope.type == EnvelopeType.twang) return 1.0 + 0.02 * /*envelope.speed */ perEnvelopeSpeed;\n        return 1.0;\n    }\n\n    computeDrumsetEnvelopes(instrument: Instrument, drumsetFilterEnvelope: Envelope, beatsPerPart: number, partTimeStart: number, partTimeEnd: number) {\n\n        const pitch = 1\n\n        function computeDrumsetEnvelope(unspedTime: number, time: number, beats: number, noteSize: number):number {\n            return EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, 1, 1, unspedTime, time, beats, 0, noteSize, pitch, false, 0, 1, true, 2, 2, LFOEnvelopeTypes.sine, pitch, 0);\n        }\n\n        // Drumset filters use the same envelope timing as the rest of the envelopes, but do not include support for slide transitions.\n        let drumsetFilterEnvelopeStart: number = computeDrumsetEnvelope(this.noteSecondsStartUnscaled, this.noteSecondsStartUnscaled, beatsPerPart * partTimeStart, this.noteSizeStart); //doesn't have/need pitchStart, pitchEnd, pitchInvert, steps, seed, timeSinceBeginning, etc\n\n        // Apply slide interpolation to drumset envelope.\n        if (this.prevSlideStart) {\n            const other: number = computeDrumsetEnvelope(this.prevNoteSecondsStartUnscaled, this.prevNoteSecondsStartUnscaled, beatsPerPart * partTimeStart, this.prevNoteSize);\n            drumsetFilterEnvelopeStart += (other - drumsetFilterEnvelopeStart) * this.prevSlideRatioStart;\n        }\n        if (this.nextSlideStart) {\n            const other: number = computeDrumsetEnvelope(0.0, 0.0, beatsPerPart * partTimeStart, this.nextNoteSize);\n            drumsetFilterEnvelopeStart += (other - drumsetFilterEnvelopeStart) * this.nextSlideRatioStart;\n        }\n\n        let drumsetFilterEnvelopeEnd: number = drumsetFilterEnvelopeStart;\n\n\n        //hmm, I guess making discrete per envelope leaves out drumsets....\n        drumsetFilterEnvelopeEnd = computeDrumsetEnvelope(this.noteSecondsEndUnscaled, this.noteSecondsEndUnscaled, beatsPerPart * partTimeEnd, this.noteSizeEnd);\n\n        if (this.prevSlideEnd) {\n            const other: number = computeDrumsetEnvelope(this.prevNoteSecondsEndUnscaled, this.prevNoteSecondsEndUnscaled, beatsPerPart * partTimeEnd, this.prevNoteSize);\n            drumsetFilterEnvelopeEnd += (other - drumsetFilterEnvelopeEnd) * this.prevSlideRatioEnd;\n        }\n        if (this.nextSlideEnd) {\n            const other: number = computeDrumsetEnvelope(0.0, 0.0, beatsPerPart * partTimeEnd, this.nextNoteSize);\n            drumsetFilterEnvelopeEnd += (other - drumsetFilterEnvelopeEnd) * this.nextSlideRatioEnd;\n        }\n\n        this.drumsetFilterEnvelopeStart = drumsetFilterEnvelopeStart;\n        this.drumsetFilterEnvelopeEnd = drumsetFilterEnvelopeEnd;\n\n    }\n\n}\n", "// Copyright (c) John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { SustainType,  InstrumentType, EffectType, EnvelopeComputeIndex, Unison, Chord, Config, getDrumWave, drawNoiseSpectrum, performIntegralOld } from \"./SynthConfig\";\nimport { scaleElementsByFactor, inverseRealFourierTransform} from \"./FFT\";\nimport { Deque } from \"./Deque\";\nimport { warpInfinityToNyquist } from \"./filtering\";\nimport { SpectrumWave, HarmonicsWave, Instrument } from \"./Instrument\";\nimport { Effect } from \"./Effect\";\nimport { EffectState } from \"./EffectState\";\nimport { Synth, Tone } from \"./synth\";\nimport { EnvelopeComputer } from \"./EnvelopeComputer\";\nimport { fittingPowerOfTwo } from \"./utils\";\n\nexport class SpectrumWaveState {\n    wave: Float32Array | null = null;\n    private _hash: number = -1;\n\n    getCustomWave(settings: SpectrumWave, lowestOctave: number): Float32Array {\n        if (this._hash == settings.hash) return this.wave!;\n        this._hash = settings.hash;\n\n        const waveLength: number = Config.spectrumNoiseLength;\n        if (this.wave == null || this.wave.length != waveLength + 1) {\n            this.wave = new Float32Array(waveLength + 1);\n        }\n        const wave: Float32Array = this.wave;\n\n        for (let i: number = 0; i < waveLength; i++) {\n            wave[i] = 0;\n        }\n\n        const highestOctave: number = 14;\n        const falloffRatio: number = 0.25;\n        // Nudge the 2/7 and 4/7 control points so that they form harmonic intervals.\n        const pitchTweak: number[] = [0, 1 / 7, Math.log2(5 / 4), 3 / 7, Math.log2(3 / 2), 5 / 7, 6 / 7];\n        function controlPointToOctave(point: number): number {\n            return lowestOctave + Math.floor(point / Config.spectrumControlPointsPerOctave) + pitchTweak[(point + Config.spectrumControlPointsPerOctave) % Config.spectrumControlPointsPerOctave];\n        }\n\n        let combinedAmplitude: number = 1;\n        for (let i: number = 0; i < Config.spectrumControlPoints + 1; i++) {\n            const value1: number = (i <= 0) ? 0 : settings.spectrum[i - 1];\n            const value2: number = (i >= Config.spectrumControlPoints) ? settings.spectrum[Config.spectrumControlPoints - 1] : settings.spectrum[i];\n            const octave1: number = controlPointToOctave(i - 1);\n            let octave2: number = controlPointToOctave(i);\n            if (i >= Config.spectrumControlPoints) octave2 = highestOctave + (octave2 - highestOctave) * falloffRatio;\n            if (value1 == 0 && value2 == 0) continue;\n\n            combinedAmplitude += 0.02 * drawNoiseSpectrum(wave, waveLength, octave1, octave2, value1 / Config.spectrumMax, value2 / Config.spectrumMax, -0.5);\n        }\n        if (settings.spectrum[Config.spectrumControlPoints - 1] > 0) {\n            combinedAmplitude += 0.02 * drawNoiseSpectrum(wave, waveLength, highestOctave + (controlPointToOctave(Config.spectrumControlPoints) - highestOctave) * falloffRatio, highestOctave, settings.spectrum[Config.spectrumControlPoints - 1] / Config.spectrumMax, 0, -0.5);\n        }\n\n        inverseRealFourierTransform(wave, waveLength);\n        scaleElementsByFactor(wave, 5.0 / (Math.sqrt(waveLength) * Math.pow(combinedAmplitude, 0.75)));\n\n        // Duplicate the first sample at the end for easier wrap-around interpolation.\n        wave[waveLength] = wave[0];\n\n        return wave;\n    }\n}\n\nexport class HarmonicsWaveState {\n    wave: Float32Array | null = null;\n    private _hash: number = -1;\n    private _generatedForType: InstrumentType;\n\n    getCustomWave(settings: HarmonicsWave, instrumentType: InstrumentType): Float32Array {\n        if (this._hash == settings.hash && this._generatedForType == instrumentType) return this.wave!;\n        this._hash = settings.hash;\n        this._generatedForType = instrumentType;\n\n        const harmonicsRendered: number = (instrumentType == InstrumentType.pickedString) ? Config.harmonicsRenderedForPickedString : Config.harmonicsRendered;\n\n        const waveLength: number = Config.harmonicsWavelength;\n        const retroWave: Float32Array = getDrumWave(0, null, null);\n\n        if (this.wave == null || this.wave.length != waveLength + 1) {\n            this.wave = new Float32Array(waveLength + 1);\n        }\n        const wave: Float32Array = this.wave;\n\n        for (let i: number = 0; i < waveLength; i++) {\n            wave[i] = 0;\n        }\n\n        const overallSlope: number = -0.25;\n        let combinedControlPointAmplitude: number = 1;\n\n        for (let harmonicIndex: number = 0; harmonicIndex < harmonicsRendered; harmonicIndex++) {\n            const harmonicFreq: number = harmonicIndex + 1;\n            let controlValue: number = harmonicIndex < Config.harmonicsControlPoints ? settings.harmonics[harmonicIndex] : settings.harmonics[Config.harmonicsControlPoints - 1];\n            if (harmonicIndex >= Config.harmonicsControlPoints) {\n                controlValue *= 1 - (harmonicIndex - Config.harmonicsControlPoints) / (harmonicsRendered - Config.harmonicsControlPoints);\n            }\n            const normalizedValue: number = controlValue / Config.harmonicsMax;\n            let amplitude: number = Math.pow(2, controlValue - Config.harmonicsMax + 1) * Math.sqrt(normalizedValue);\n            if (harmonicIndex < Config.harmonicsControlPoints) {\n                combinedControlPointAmplitude += amplitude;\n            }\n            amplitude *= Math.pow(harmonicFreq, overallSlope);\n\n            // Multiply all the sine wave amplitudes by 1 or -1 based on the LFSR\n            // retro wave (effectively random) to avoid egregiously tall spikes.\n            amplitude *= retroWave[harmonicIndex + 589];\n\n            wave[waveLength - harmonicFreq] = amplitude;\n        }\n\n        inverseRealFourierTransform(wave, waveLength);\n\n        // Limit the maximum wave amplitude.\n        const mult: number = 1 / Math.pow(combinedControlPointAmplitude, 0.7);\n        for (let i: number = 0; i < wave.length; i++) wave[i] *= mult;\n\n        performIntegralOld(wave);\n\n        // The first sample should be zero, and we'll duplicate it at the end for easier interpolation.\n        wave[waveLength] = wave[0];\n\n        return wave;\n    }\n}\n\nexport class PickedString {\n    delayLine: Float32Array | null = null;\n    delayIndex: number;\n    allPassSample: number;\n    allPassPrevInput: number;\n    sustainFilterSample: number;\n    sustainFilterPrevOutput2: number;\n    sustainFilterPrevInput1: number;\n    sustainFilterPrevInput2: number;\n    fractionalDelaySample: number;\n    prevDelayLength: number;\n    delayLengthDelta: number;\n    delayResetOffset: number;\n\n    allPassG: number = 0.0;\n    allPassGDelta: number = 0.0;\n    sustainFilterA1: number = 0.0;\n    sustainFilterA1Delta: number = 0.0;\n    sustainFilterA2: number = 0.0;\n    sustainFilterA2Delta: number = 0.0;\n    sustainFilterB0: number = 0.0;\n    sustainFilterB0Delta: number = 0.0;\n    sustainFilterB1: number = 0.0;\n    sustainFilterB1Delta: number = 0.0;\n    sustainFilterB2: number = 0.0;\n    sustainFilterB2Delta: number = 0.0;\n\n    constructor() {\n        this.reset();\n    }\n\n    reset(): void {\n        this.delayIndex = -1;\n        this.allPassSample = 0.0;\n        this.allPassPrevInput = 0.0;\n        this.sustainFilterSample = 0.0;\n        this.sustainFilterPrevOutput2 = 0.0;\n        this.sustainFilterPrevInput1 = 0.0;\n        this.sustainFilterPrevInput2 = 0.0;\n        this.fractionalDelaySample = 0.0;\n        this.prevDelayLength = -1.0;\n        this.delayResetOffset = 0;\n    }\n\n    update(synth: Synth, instrumentState: InstrumentState, tone: Tone, stringIndex: number, roundedSamplesPerTick: number, stringDecayStart: number, stringDecayEnd: number, sustainType: SustainType): void {\n        const allPassCenter: number = 2.0 * Math.PI * Config.pickedStringDispersionCenterFreq / synth.samplesPerSecond;\n\n        const prevDelayLength: number = this.prevDelayLength;\n\n        const phaseDeltaStart: number = tone.phaseDeltas[stringIndex];\n        const phaseDeltaScale: number = tone.phaseDeltaScales[stringIndex];\n        const phaseDeltaEnd: number = phaseDeltaStart * Math.pow(phaseDeltaScale, roundedSamplesPerTick);\n\n        const radiansPerSampleStart: number = Math.PI * 2.0 * phaseDeltaStart;\n        const radiansPerSampleEnd: number = Math.PI * 2.0 * phaseDeltaEnd;\n\n        const centerHarmonicStart: number = radiansPerSampleStart * 2.0;\n        const centerHarmonicEnd: number = radiansPerSampleEnd * 2.0;\n\n        const allPassRadiansStart: number = Math.min(Math.PI, radiansPerSampleStart * Config.pickedStringDispersionFreqMult * Math.pow(allPassCenter / radiansPerSampleStart, Config.pickedStringDispersionFreqScale));\n        const allPassRadiansEnd: number = Math.min(Math.PI, radiansPerSampleEnd * Config.pickedStringDispersionFreqMult * Math.pow(allPassCenter / radiansPerSampleEnd, Config.pickedStringDispersionFreqScale));\n        const shelfRadians: number = 2.0 * Math.PI * Config.pickedStringShelfHz / synth.samplesPerSecond;\n        const decayCurveStart: number = (Math.pow(100.0, stringDecayStart) - 1.0) / 99.0;\n        const decayCurveEnd: number   = (Math.pow(100.0, stringDecayEnd  ) - 1.0) / 99.0;\n        const register: number = sustainType == SustainType.acoustic ? 0.25 : 0.0;\n        const registerShelfCenter: number = 15.6;\n        const registerLowpassCenter: number = 3.0 * synth.samplesPerSecond / 48000;\n        //const decayRateStart: number = Math.pow(0.5, decayCurveStart * shelfRadians / radiansPerSampleStart);\n        //const decayRateEnd: number   = Math.pow(0.5, decayCurveEnd   * shelfRadians / radiansPerSampleEnd);\n        const decayRateStart: number = Math.pow(0.5, decayCurveStart * Math.pow(shelfRadians / (radiansPerSampleStart * registerShelfCenter), (1.0 + 2.0 * register)) * registerShelfCenter);\n        const decayRateEnd:   number = Math.pow(0.5, decayCurveEnd   * Math.pow(shelfRadians / (radiansPerSampleEnd   * registerShelfCenter), (1.0 + 2.0 * register)) * registerShelfCenter);\n\n        const expressionDecayStart: number = Math.pow(decayRateStart, 0.002);\n        const expressionDecayEnd: number = Math.pow(decayRateEnd, 0.002);\n\n        Synth.tempFilterStartCoefficients.allPass1stOrderInvertPhaseAbove(allPassRadiansStart);\n        synth.tempFrequencyResponse.analyze(Synth.tempFilterStartCoefficients, centerHarmonicStart);\n        const allPassGStart: number = Synth.tempFilterStartCoefficients.b[0]; /* same as a[1] */\n        const allPassPhaseDelayStart: number = -synth.tempFrequencyResponse.angle() / centerHarmonicStart;\n\n        Synth.tempFilterEndCoefficients.allPass1stOrderInvertPhaseAbove(allPassRadiansEnd);\n        synth.tempFrequencyResponse.analyze(Synth.tempFilterEndCoefficients, centerHarmonicEnd);\n        const allPassGEnd: number = Synth.tempFilterEndCoefficients.b[0]; /* same as a[1] */\n        const allPassPhaseDelayEnd: number = -synth.tempFrequencyResponse.angle() / centerHarmonicEnd;\n\n        // 1st order shelf filters and 2nd order lowpass filters have differently shaped frequency\n        // responses, as well as adjustable shapes. I originally picked a 1st order shelf filter,\n        // but I kinda prefer 2nd order lowpass filters now and I designed a couple settings:\n        const enum PickedStringBrightnessType {\n            bright, // 1st order shelf\n            normal, // 2nd order lowpass, rounded corner\n            resonant, // 3rd order lowpass, harder corner\n        }\n        const brightnessType: PickedStringBrightnessType = <any> sustainType == SustainType.bright ? PickedStringBrightnessType.bright : PickedStringBrightnessType.normal;\n        if (brightnessType == PickedStringBrightnessType.bright) {\n            const shelfGainStart: number = Math.pow(decayRateStart, Config.stringDecayRate);\n            const shelfGainEnd: number   = Math.pow(decayRateEnd,   Config.stringDecayRate);\n            Synth.tempFilterStartCoefficients.highShelf2ndOrder(shelfRadians, shelfGainStart, 0.5);\n            Synth.tempFilterEndCoefficients.highShelf2ndOrder(shelfRadians, shelfGainEnd, 0.5);\n        } else {\n            const cornerHardness: number = Math.pow(brightnessType == PickedStringBrightnessType.normal ? 0.0 : 1.0, 0.25);\n            const lowpass1stOrderCutoffRadiansStart: number = Math.pow(registerLowpassCenter * registerLowpassCenter * radiansPerSampleStart * 3.3 * 48000 / synth.samplesPerSecond, 0.5 + register) / registerLowpassCenter / Math.pow(decayCurveStart, .5);\n            const lowpass1stOrderCutoffRadiansEnd:   number = Math.pow(registerLowpassCenter * registerLowpassCenter * radiansPerSampleEnd   * 3.3 * 48000 / synth.samplesPerSecond, 0.5 + register) / registerLowpassCenter / Math.pow(decayCurveEnd,   .5);\n            const lowpass2ndOrderCutoffRadiansStart: number = lowpass1stOrderCutoffRadiansStart * Math.pow(2.0, 0.5 - 1.75 * (1.0 - Math.pow(1.0 - cornerHardness, 0.85)));\n            const lowpass2ndOrderCutoffRadiansEnd:   number = lowpass1stOrderCutoffRadiansEnd   * Math.pow(2.0, 0.5 - 1.75 * (1.0 - Math.pow(1.0 - cornerHardness, 0.85)));\n            const lowpass2ndOrderGainStart: number = Math.pow(2.0, -Math.pow(2.0, -Math.pow(cornerHardness, 0.9)));\n            const lowpass2ndOrderGainEnd:   number = Math.pow(2.0, -Math.pow(2.0, -Math.pow(cornerHardness, 0.9)));\n            Synth.tempFilterStartCoefficients.lowPass2ndOrderButterworth(warpInfinityToNyquist(lowpass2ndOrderCutoffRadiansStart), lowpass2ndOrderGainStart);\n            Synth.tempFilterEndCoefficients  .lowPass2ndOrderButterworth(warpInfinityToNyquist(lowpass2ndOrderCutoffRadiansEnd),   lowpass2ndOrderGainEnd);\n        }\n\n        synth.tempFrequencyResponse.analyze(Synth.tempFilterStartCoefficients, centerHarmonicStart);\n        const sustainFilterA1Start: number = Synth.tempFilterStartCoefficients.a[1];\n        const sustainFilterA2Start: number = Synth.tempFilterStartCoefficients.a[2];\n        const sustainFilterB0Start: number = Synth.tempFilterStartCoefficients.b[0] * expressionDecayStart;\n        const sustainFilterB1Start: number = Synth.tempFilterStartCoefficients.b[1] * expressionDecayStart;\n        const sustainFilterB2Start: number = Synth.tempFilterStartCoefficients.b[2] * expressionDecayStart;\n        const sustainFilterPhaseDelayStart: number = -synth.tempFrequencyResponse.angle() / centerHarmonicStart;\n\n        synth.tempFrequencyResponse.analyze(Synth.tempFilterEndCoefficients, centerHarmonicEnd);\n        const sustainFilterA1End: number = Synth.tempFilterEndCoefficients.a[1];\n        const sustainFilterA2End: number = Synth.tempFilterEndCoefficients.a[2];\n        const sustainFilterB0End: number = Synth.tempFilterEndCoefficients.b[0] * expressionDecayEnd;\n        const sustainFilterB1End: number = Synth.tempFilterEndCoefficients.b[1] * expressionDecayEnd;\n        const sustainFilterB2End: number = Synth.tempFilterEndCoefficients.b[2] * expressionDecayEnd;\n        const sustainFilterPhaseDelayEnd: number = -synth.tempFrequencyResponse.angle() / centerHarmonicEnd;\n\n        const periodLengthStart: number = 1.0 / phaseDeltaStart;\n        const periodLengthEnd: number = 1.0 / phaseDeltaEnd;\n        const minBufferLength: number = Math.ceil(Math.max(periodLengthStart, periodLengthEnd) * 2);\n        const delayLength: number = periodLengthStart - allPassPhaseDelayStart - sustainFilterPhaseDelayStart;\n        const delayLengthEnd: number = periodLengthEnd - allPassPhaseDelayEnd - sustainFilterPhaseDelayEnd;\n\n        this.prevDelayLength = delayLength;\n        this.delayLengthDelta = (delayLengthEnd - delayLength) / roundedSamplesPerTick;\n        this.allPassG = allPassGStart;\n        this.sustainFilterA1 = sustainFilterA1Start;\n        this.sustainFilterA2 = sustainFilterA2Start;\n        this.sustainFilterB0 = sustainFilterB0Start;\n        this.sustainFilterB1 = sustainFilterB1Start;\n        this.sustainFilterB2 = sustainFilterB2Start;\n        this.allPassGDelta = (allPassGEnd - allPassGStart) / roundedSamplesPerTick;\n        this.sustainFilterA1Delta = (sustainFilterA1End - sustainFilterA1Start) / roundedSamplesPerTick;\n        this.sustainFilterA2Delta = (sustainFilterA2End - sustainFilterA2Start) / roundedSamplesPerTick;\n        this.sustainFilterB0Delta = (sustainFilterB0End - sustainFilterB0Start) / roundedSamplesPerTick;\n        this.sustainFilterB1Delta = (sustainFilterB1End - sustainFilterB1Start) / roundedSamplesPerTick;\n        this.sustainFilterB2Delta = (sustainFilterB2End - sustainFilterB2Start) / roundedSamplesPerTick;\n\n        const pitchChanged: boolean = Math.abs(Math.log2(delayLength / prevDelayLength)) > 0.01;\n\n        const reinitializeImpulse: boolean = (this.delayIndex == -1 || pitchChanged);\n        if (this.delayLine == null || this.delayLine.length <= minBufferLength) {\n            // The delay line buffer will get reused for other tones so might as well\n            // start off with a buffer size that is big enough for most notes.\n            const likelyMaximumLength: number = Math.ceil(2 * synth.samplesPerSecond / Instrument.frequencyFromPitch(12));\n            const newDelayLine: Float32Array = new Float32Array(fittingPowerOfTwo(Math.max(likelyMaximumLength, minBufferLength)));\n            if (!reinitializeImpulse && this.delayLine != null) {\n                // If the tone has already started but the buffer needs to be reallocated,\n                // transfer the old data to the new buffer.\n                const oldDelayBufferMask: number = (this.delayLine.length - 1) >> 0;\n                const startCopyingFromIndex: number = this.delayIndex + this.delayResetOffset;\n                this.delayIndex = this.delayLine.length - this.delayResetOffset;\n                for (let i: number = 0; i < this.delayLine.length; i++) {\n                    newDelayLine[i] = this.delayLine[(startCopyingFromIndex + i) & oldDelayBufferMask];\n                }\n            }\n            this.delayLine = newDelayLine;\n        }\n        const delayLine: Float32Array = this.delayLine;\n        const delayBufferMask: number = (delayLine.length - 1) >> 0;\n\n        if (reinitializeImpulse) {\n            // -1 delay index means the tone was reset.\n            // Also, if the pitch changed suddenly (e.g. from seamless or arpeggio) then reset the wave.\n\n            this.delayIndex = 0;\n            this.allPassSample = 0.0;\n            this.allPassPrevInput = 0.0;\n            this.sustainFilterSample = 0.0;\n            this.sustainFilterPrevOutput2 = 0.0;\n            this.sustainFilterPrevInput1 = 0.0;\n            this.sustainFilterPrevInput2 = 0.0;\n            this.fractionalDelaySample = 0.0;\n\n            // Clear away a region of the delay buffer for the new impulse.\n            const startImpulseFrom: number = -delayLength;\n            const startZerosFrom: number = Math.floor(startImpulseFrom - periodLengthStart / 2);\n            const stopZerosAt: number = Math.ceil(startZerosFrom + periodLengthStart * 2);\n            this.delayResetOffset = stopZerosAt; // And continue clearing the area in front of the delay line.\n            for (let i: number = startZerosFrom; i <= stopZerosAt; i++) {\n                delayLine[i & delayBufferMask] = 0.0;\n            }\n\n            const impulseWave: Float32Array = instrumentState.waveL!;\n            const impulseWaveLength: number = impulseWave.length - 1; // The first sample is duplicated at the end, don't double-count it.\n            const impulsePhaseDelta: number = impulseWaveLength / periodLengthStart;\n\n            const fadeDuration: number = Math.min(periodLengthStart * 0.2, synth.samplesPerSecond * 0.003);\n            const startImpulseFromSample: number = Math.ceil(startImpulseFrom);\n            const stopImpulseAt: number = startImpulseFrom + periodLengthStart + fadeDuration;\n            const stopImpulseAtSample: number = stopImpulseAt;\n            let impulsePhase: number = (startImpulseFromSample - startImpulseFrom) * impulsePhaseDelta;\n            let prevWaveIntegral: number = 0.0;\n            for (let i: number = startImpulseFromSample; i <= stopImpulseAtSample; i++) {\n                const impulsePhaseInt: number = impulsePhase | 0;\n                const index: number = impulsePhaseInt % impulseWaveLength;\n                let nextWaveIntegral: number = impulseWave[index];\n                const phaseRatio: number = impulsePhase - impulsePhaseInt;\n                nextWaveIntegral += (impulseWave[index + 1] - nextWaveIntegral) * phaseRatio;\n                const sample: number = (nextWaveIntegral - prevWaveIntegral) / impulsePhaseDelta;\n                const fadeIn: number = Math.min(1.0, (i - startImpulseFrom) / fadeDuration);\n                const fadeOut: number = Math.min(1.0, (stopImpulseAt - i) / fadeDuration);\n                const combinedFade: number = fadeIn * fadeOut;\n                const curvedFade: number = combinedFade * combinedFade * (3.0 - 2.0 * combinedFade); // A cubic sigmoid from 0 to 1.\n                delayLine[i & delayBufferMask] += sample * curvedFade;\n                prevWaveIntegral = nextWaveIntegral;\n                impulsePhase += impulsePhaseDelta;\n            }\n        }\n    }\n}\n\nexport class InstrumentState {\n    awake: boolean = false; // Whether the instrument's effects-processing loop should continue.\n    computed: boolean = false; // Whether the effects-processing parameters are up-to-date for the current synth run.\n    tonesAddedInThisTick: boolean = false; // Whether any instrument tones are currently active.\n    flushingDelayLines: boolean = false; // If no tones were active recently, enter a mode where the delay lines are filled with zeros to reset them for later use.\n    deactivateAfterThisTick: boolean = false; // Whether the instrument is ready to be deactivated because the delay lines, if any, are fully zeroed.\n    attentuationProgress: number = 0.0; // How long since an active tone introduced an input signal to the delay lines, normalized from 0 to 1 based on how long to wait until the delay lines signal will have audibly dissapated.\n    flushedSamples: number = 0; // How many delay line samples have been flushed to zero.\n    readonly activeTones: Deque<Tone> = new Deque<Tone>();\n    readonly activeModTones: Deque<Tone> = new Deque<Tone>();\n    readonly releasedTones: Deque<Tone> = new Deque<Tone>(); // Tones that are in the process of fading out after the corresponding notes ended.\n    readonly liveInputTones: Deque<Tone> = new Deque<Tone>(); // Tones that are initiated by a source external to the loaded song data.\n\n    type: InstrumentType = InstrumentType.chip;\n    synthesizer: Function | null = null;\n    waveL: Float32Array | null = null;\n    waveR: Float32Array | null = null;\n    isStereo: boolean = false; //this refers to whether or not the synth should be processed through the effect chain in mono or stereo...\n    // advloop addition\n    isUsingAdvancedLoopControls = false;\n    chipWaveLoopStart = 0;\n    chipWaveLoopEnd = 0;\n    chipWaveLoopMode = 0;\n    chipWavePlayBackwards = false;\n    chipWaveStartOffset = 0;\n    // advloop addition\n    chipWaveInStereo = false; //...and this refers to whether or not the stereo checkmark is active.\n    noisePitchFilterMult: number = 1.0;\n    unison: Unison | null = null;\n    unisonVoices: number = 1;\n    unisonSpread: number = 0.0;\n    unisonOffset: number = 0.0;\n    unisonExpression: number = 1.4;\n    unisonSign: number = 1.0;\n    chord: Chord | null = null;\n    effects: EffectState[] = [];\n\n    volumeScale: number = 0;\n    aliases: boolean = false;\n    arpTime: number = 0;\n    vibratoTime: number = 0;\n    nextVibratoTime: number = 0;\n    envelopeTime: number[] = [];\n    mixVolume: number = 1.0;\n    mixVolumeDelta: number = 0.0;\n    delayDuration: number = 0.0;\n    totalDelaySamples: number = 0.0;\n    delayInputMult: number = 0.0;\n    delayInputMultDelta: number = 0.0;\n\n    readonly spectrumWave: SpectrumWaveState = new SpectrumWaveState();\n    readonly harmonicsWave: HarmonicsWaveState = new HarmonicsWaveState();\n    readonly drumsetSpectrumWaves: SpectrumWaveState[] = [];\n\n    constructor() {\n        for (let i: number = 0; i < Config.drumCount; i++) {\n            this.drumsetSpectrumWaves[i] = new SpectrumWaveState();\n        }\n    }\n\n    readonly envelopeComputer: EnvelopeComputer = new EnvelopeComputer();\n\n    allocateNecessaryBuffers(synth: Synth, instrument: Instrument, samplesPerTick: number): void {\n        for (let effectIndex: number = 0; effectIndex < instrument.effects.length; effectIndex++) {\n            if (this.effects[effectIndex] != null) {\n                let effect: Effect = instrument.effects[effectIndex]!\n                this.effects[effectIndex]!.allocateNecessaryBuffers(synth, instrument, effect, samplesPerTick);\n            }\n        }\n    }\n\n    deactivate(): void {\n        for (let effectIndex: number = 0; effectIndex < this.effects.length; effectIndex++) {\n            if (this.effects[effectIndex] != null) this.effects[effectIndex]!.deactivate();\n        }\n\n        this.volumeScale = 1.0;\n        this.aliases = false;\n\n        this.awake = false;\n        this.flushingDelayLines = false;\n        this.deactivateAfterThisTick = false;\n        this.attentuationProgress = 0.0;\n        this.flushedSamples = 0;\n    }\n\n    resetAllEffects(): void {\n        this.deactivate();\n        // LFOs are reset here rather than in deactivate() for periodic oscillation that stays \"on the beat\". Resetting in deactivate() will cause it to reset with each note.\n        this.vibratoTime = 0;\n        this.nextVibratoTime = 0;\n        this.arpTime = 0;\n        for (let envelopeIndex: number = 0; envelopeIndex < Config.maxEnvelopeCount + 1; envelopeIndex++) this.envelopeTime[envelopeIndex] = 0;\n        this.envelopeComputer.reset();\n\n        for (let effectIndex: number = 0; effectIndex < this.effects.length; effectIndex++) {\n            if (this.effects[effectIndex] != null) this.effects[effectIndex]!.reset();\n        }\n    }\n\n    compute(synth: Synth, instrument: Instrument, samplesPerTick: number, roundedSamplesPerTick: number, tone: Tone | null, channelIndex: number, instrumentIndex: number): void {\n        this.computed = true;\n\n        this.type = instrument.type;\n        this.synthesizer = Synth.getInstrumentSynthFunction(instrument);\n        this.unison = Config.unisons[instrument.unison];\n        this.chord = instrument.getChord();\n        this.noisePitchFilterMult = Config.chipNoises[instrument.chipNoise].pitchFilterMult;\n\n        this.aliases = instrument.aliases;\n        this.volumeScale = 1.0;\n        this.delayDuration = 0.0;\n        this.totalDelaySamples = 0.0;\n\n        for (let effectIndex: number = 0; effectIndex < instrument.effects.length; effectIndex++) {\n            if (this.effects[effectIndex] == null) this.effects[effectIndex] = new EffectState(instrument.effects[effectIndex]!.type);\n        }\n        this.effects.length = instrument.effects.length\n\n        this.allocateNecessaryBuffers(synth, instrument, samplesPerTick);\n\n        const samplesPerSecond: number = synth.samplesPerSecond;\n        this.updateWaves(instrument, samplesPerSecond);\n\n        const ticksIntoBar: number = synth.getTicksIntoBar();\n        const tickTimeStart: number = ticksIntoBar;\n        const secondsPerTick: number = samplesPerTick / synth.samplesPerSecond;\n        const currentPart: number = synth.getCurrentPart();\n        const envelopeSpeeds: number[] = [];\n        for (let i: number = 0; i < Config.maxEnvelopeCount; i++) {\n            envelopeSpeeds[i] = 0;\n        }\n        let useEnvelopeSpeed: number = Config.arpSpeedScale[instrument.envelopeSpeed];\n        if (synth.isModActive(Config.modulators.dictionary[\"envelope speed\"].index, channelIndex, instrumentIndex)) {\n            useEnvelopeSpeed = Math.max(0, Math.min(Config.arpSpeedScale.length - 1, synth.getModValue(Config.modulators.dictionary[\"envelope speed\"].index, channelIndex, instrumentIndex, false)));\n            if (Number.isInteger(useEnvelopeSpeed)) {\n                useEnvelopeSpeed = Config.arpSpeedScale[useEnvelopeSpeed];\n            } else {\n                // Linear interpolate envelope values\n                useEnvelopeSpeed = ((1 - (useEnvelopeSpeed % 1)) * Config.arpSpeedScale[Math.floor(useEnvelopeSpeed)] + (useEnvelopeSpeed % 1) * Config.arpSpeedScale[Math.ceil(useEnvelopeSpeed)]);\n            }\n        }\n        for (let envelopeIndex: number = 0; envelopeIndex < instrument.envelopeCount; envelopeIndex++) {\n            let perEnvelopeSpeed: number = instrument.envelopes[envelopeIndex].perEnvelopeSpeed;\n            if (synth.isModActive(Config.modulators.dictionary[\"individual envelope speed\"].index, channelIndex, instrumentIndex) && instrument.envelopes[envelopeIndex].tempEnvelopeSpeed != null) {\n                perEnvelopeSpeed = instrument.envelopes[envelopeIndex].tempEnvelopeSpeed!;\n            }\n            envelopeSpeeds[envelopeIndex] = useEnvelopeSpeed * perEnvelopeSpeed;\n        }\n        this.envelopeComputer.computeEnvelopes(instrument, currentPart, this.envelopeTime, tickTimeStart, secondsPerTick, tone, envelopeSpeeds, this, synth, channelIndex, instrumentIndex);\n        const envelopeStarts: number[] = this.envelopeComputer.envelopeStarts;\n        const envelopeEnds: number[] = this.envelopeComputer.envelopeEnds;\n\n        for (let effectIndex: number = 0; effectIndex < instrument.effects.length; effectIndex++) {\n            if (this.effects[effectIndex] != null) {\n                let effect: Effect = instrument.effects[effectIndex]!\n                this.effects[effectIndex]!.compute(synth, instrument, effect, this, samplesPerTick, roundedSamplesPerTick, tone, channelIndex, instrumentIndex, envelopeStarts, envelopeEnds);\n            }\n        }\n\n        //const mainInstrumentVolume: number = Synth.instrumentVolumeToVolumeMult(instrument.volume);\n        this.mixVolume = envelopeStarts[EnvelopeComputeIndex.mixVolume] * Synth.instrumentVolumeToVolumeMult(instrument.volume);\n        let mixVolumeEnd: number = envelopeEnds[EnvelopeComputeIndex.mixVolume] * Synth.instrumentVolumeToVolumeMult(instrument.volume);\n\n        // Check for mod-related volume delta\n        if (synth.isModActive(Config.modulators.dictionary[\"post volume\"].index, channelIndex, instrumentIndex)) {\n            // Linear falloff below 0, normal volume formula above 0. Seems to work best for scaling since the normal volume mult formula has a big gap from -25 to -24.\n            const startVal: number = synth.getModValue(Config.modulators.dictionary[\"post volume\"].index, channelIndex, instrumentIndex, false);\n            const endVal: number = synth.getModValue(Config.modulators.dictionary[\"post volume\"].index, channelIndex, instrumentIndex, true);\n            this.mixVolume *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(startVal));\n            mixVolumeEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(endVal));\n        }\n\n        // Check for SONG mod-related volume delta\n        if (synth.isModActive(Config.modulators.dictionary[\"song volume\"].index)) {\n            this.mixVolume *= (synth.getModValue(Config.modulators.dictionary[\"song volume\"].index, undefined, undefined, false)) / 100.0;\n            mixVolumeEnd *= (synth.getModValue(Config.modulators.dictionary[\"song volume\"].index, undefined, undefined, true)) / 100.0;\n        }\n\n        this.mixVolumeDelta = (mixVolumeEnd - this.mixVolume) / roundedSamplesPerTick;\n\n        let delayInputMultStart: number = 1.0;\n        let delayInputMultEnd: number = 1.0;\n\n        if (this.tonesAddedInThisTick) {\n            this.attentuationProgress = 0.0;\n            this.flushedSamples = 0;\n            this.flushingDelayLines = false;\n        } else if (!this.flushingDelayLines) {\n            // If this instrument isn't playing tones anymore, the volume can fade out by the\n            // end of the first tick. It's possible for filters and the panning delay line to\n            // continue past the end of the tone but they should have mostly dissipated by the\n            // end of the tick anyway.\n            if (this.attentuationProgress == 0.0) {\n                //eqFilterVolumeEnd = 0.0;\n            } else {\n                //eqFilterVolumeStart = 0.0;\n                //eqFilterVolumeEnd = 0.0;\n            }\n\n            const secondsInTick: number = samplesPerTick / samplesPerSecond;\n            const progressInTick: number = secondsInTick / this.delayDuration;\n            const progressAtEndOfTick: number = this.attentuationProgress + progressInTick;\n            if (progressAtEndOfTick >= 1.0) {\n                delayInputMultEnd = 0.0;\n            }\n\n            this.attentuationProgress = progressAtEndOfTick;\n            if (this.attentuationProgress >= 1.0) {\n                this.flushingDelayLines = true;\n            }\n        } else {\n            delayInputMultStart = 0.0;\n            delayInputMultEnd = 0.0;\n\n            this.flushedSamples += roundedSamplesPerTick;\n            if (this.flushedSamples >= this.totalDelaySamples) {\n                this.deactivateAfterThisTick = true;\n            }\n        }\n\n        this.delayInputMult = delayInputMultStart;\n        this.delayInputMultDelta = (delayInputMultEnd - delayInputMultStart) / roundedSamplesPerTick;\n\n        this.envelopeComputer.clearEnvelopes();\n    }\n\n    updateWaves(instrument: Instrument, samplesPerSecond: number): void {\n        this.volumeScale = 1.0;\n        if (instrument.type == InstrumentType.chip) {\n            this.waveL = (this.aliases) ? Config.rawChipWaves[instrument.chipWave].samples : Config.chipWaves[instrument.chipWave].samples;\n            this.waveR = (this.aliases) ? Config.rawChipWaves[instrument.chipWave].samplesR || Config.rawChipWaves[instrument.chipWave].samples : Config.chipWaves[instrument.chipWave].samplesR || Config.chipWaves[instrument.chipWave].samples;\n            // advloop addition\n            this.isUsingAdvancedLoopControls = instrument.isUsingAdvancedLoopControls;\n            this.chipWaveLoopStart = instrument.chipWaveLoopStart;\n            this.chipWaveLoopEnd = instrument.chipWaveLoopEnd;\n            this.chipWaveLoopMode = instrument.chipWaveLoopMode;\n            this.chipWavePlayBackwards = instrument.chipWavePlayBackwards;\n            this.chipWaveStartOffset = instrument.chipWaveStartOffset;\n            // advloop addition\n\n            this.chipWaveInStereo = instrument.chipWaveInStereo;\n            this.unisonVoices = instrument.unisonVoices;\n            this.unisonSpread = instrument.unisonSpread;\n            this.unisonOffset = instrument.unisonOffset;\n            this.unisonExpression = instrument.unisonExpression;\n            this.unisonSign = instrument.unisonSign;\n        } else if (instrument.type == InstrumentType.pwm) {\n            this.unisonVoices = instrument.unisonVoices;\n            this.unisonSpread = instrument.unisonSpread;\n            this.unisonOffset = instrument.unisonOffset;\n            this.unisonExpression = instrument.unisonExpression;\n            this.unisonSign = instrument.unisonSign;\n        } else if (instrument.type == InstrumentType.customChipWave) {\n            this.waveL = (this.aliases) ? instrument.customChipWave! : instrument.customChipWaveIntegral!;\n            this.waveR = (this.aliases) ? instrument.customChipWave! : instrument.customChipWaveIntegral!;\n            this.volumeScale = 0.05;\n            this.unisonVoices = instrument.unisonVoices;\n            this.unisonSpread = instrument.unisonSpread;\n            this.unisonOffset = instrument.unisonOffset;\n            this.unisonExpression = instrument.unisonExpression;\n            this.unisonSign = instrument.unisonSign;\n        } else if (instrument.type == InstrumentType.noise) {\n            this.waveL = getDrumWave(instrument.chipNoise, inverseRealFourierTransform, scaleElementsByFactor);\n            this.unisonVoices = instrument.unisonVoices;\n            this.unisonSpread = instrument.unisonSpread;\n            this.unisonOffset = instrument.unisonOffset;\n            this.unisonExpression = instrument.unisonExpression;\n            this.unisonSign = instrument.unisonSign;\n        } else if (instrument.type == InstrumentType.harmonics) {\n            this.waveL = this.harmonicsWave.getCustomWave(instrument.harmonicsWave, instrument.type);\n            this.unisonVoices = instrument.unisonVoices;\n            this.unisonSpread = instrument.unisonSpread;\n            this.unisonOffset = instrument.unisonOffset;\n            this.unisonExpression = instrument.unisonExpression;\n            this.unisonSign = instrument.unisonSign;\n        } else if (instrument.type == InstrumentType.pickedString) {\n            this.waveL = this.harmonicsWave.getCustomWave(instrument.harmonicsWave, instrument.type);\n            this.unisonVoices = instrument.unisonVoices;\n            this.unisonSpread = instrument.unisonSpread;\n            this.unisonOffset = instrument.unisonOffset;\n            this.unisonExpression = instrument.unisonExpression;\n            this.unisonSign = instrument.unisonSign;\n        } else if (instrument.type == InstrumentType.spectrum) {\n            this.waveL = this.spectrumWave.getCustomWave(instrument.spectrumWave, 8);\n            this.unisonVoices = instrument.unisonVoices;\n            this.unisonSpread = instrument.unisonSpread;\n            this.unisonOffset = instrument.unisonOffset;\n            this.unisonExpression = instrument.unisonExpression;\n            this.unisonSign = instrument.unisonSign;\n        } else if (instrument.type == InstrumentType.drumset) {\n            for (let i: number = 0; i < Config.drumCount; i++) {\n                this.drumsetSpectrumWaves[i].getCustomWave(instrument.drumsetSpectrumWaves[i], InstrumentState._drumsetIndexToSpectrumOctave(i));\n            }\n            this.waveL = null;\n            this.unisonVoices = instrument.unisonVoices;\n            this.unisonSpread = instrument.unisonSpread;\n            this.unisonOffset = instrument.unisonOffset;\n            this.unisonExpression = instrument.unisonExpression;\n            this.unisonSign = instrument.unisonSign;\n        } else {\n            this.waveL = null;\n        }\n    }\n\n    getDrumsetWave(pitch: number): Float32Array {\n        if (this.type == InstrumentType.drumset) {\n            return this.drumsetSpectrumWaves[pitch].wave!;\n        } else {\n            throw new Error(\"Unhandled instrument type in getDrumsetWave\");\n        }\n    }\n\n    static drumsetIndexReferenceDelta(index: number): number {\n        return Instrument.frequencyFromPitch(Config.spectrumBasePitch + index * 6) / 44100;\n    }\n\n    private static _drumsetIndexToSpectrumOctave(index: number): number {\n        return 15 + Math.log2(InstrumentState.drumsetIndexReferenceDelta(index));\n    }\n\n    effectsIncludeType(type: EffectType): boolean {\n        for (let i: number = 0; i < this.effects.length; i++) if (this.effects[i] != null && this.effects[i]!.type == type) return true;\n        return false;\n    }\n}\n", "//A simple events system for effectively direct links without actualy linking files or references\nclass EventManager {\n    private activeEvents: string[] = [];\n    private listeners: any = {};\n\n    constructor() {\n        this.activeEvents = [];\n        this.listeners = {};\n    }\n\n\n    raise(eventType: string, eventData: any, extraEventData?: any): void {\n        if (this.listeners[eventType] == undefined) {\n            return;\n        }\n        this.activeEvents.push(eventType);\n        for (let i: number = 0; i < this.listeners[eventType].length; i++) {\n            this.listeners[eventType][i](eventData, extraEventData)\n        }\n        this.activeEvents.pop();\n    }\n\n    listen(eventType: string, callback: Function): void {\n        if (this.listeners[eventType] == undefined) {\n            this.listeners[eventType] = []\n        }\n        this.listeners[eventType].push(callback)\n    }\n\n    unlisten(eventType: string, callback: Function): void {\n        if (this.listeners[eventType] == undefined) {\n            return;\n        }\n        const lisen = this.listeners[eventType].indexOf(callback);\n        if (lisen != -1) {\n            this.listeners[eventType].splice(lisen, 1);\n        }\n    }\n    unlistenAll(eventType: string): void {\n        if (this.listeners[eventType] == undefined) {\n            return;\n        }\n        this.listeners[eventType] = [];\n    }\n}\n\nexport const events: EventManager = new EventManager()"],
  "mappings": "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GAAI,EAAE,CAAE,EAAG,CAAE,eAAkB,UAAW,SAAY,CAAC,EAAG,EAAG,EAAG,EAAG,IAAK,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,CAAE,EAAG,CAAE,eAAkB,UAAW,SAAY,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,CAAE,EAAG,CAAE,eAAkB,UAAW,SAAY,CAAC,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,CAAE,EAAG,CAAE,eAAkB,UAAW,SAAY,CAAC,EAAG,EAAG,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,CAAE,EAAG,CAAE,eAAkB,UAAW,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,CAAE,EAAG,CAAE,eAAkB,UAAW,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,EAAE,CAAE,EAAG,CAAE,eAAkB,UAAW,SAAY,CAAC,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAAI,GAA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A,2BACA,4BACA,wCACA,yCACA,+BACA,8BACA,qCACA,0CACA,mCACA,uCACA,oCACA,4BACA,kCACA,0BACJ,EAEMC,EAAqB,CACvB,oBACA,qBACA,sBACA,mBACA,yBACA,uBACA,yBACA,4BACA,gCACA,qBACA,2BACA,uBACA,qBACA,+BACA,qBACA,6BACA,8BACA,0BACA,gCACA,+BACA,oBACA,6BACA,4BACA,6BACA,2BACA,yBACA,yBACA,2BACA,uBACA,yBACA,uBACA,yBACA,2BACA,6BACA,6BACA,2BACA,0BACA,uCACA,6BACA,gCACA,+BACA,0BACA,qBACA,0BACA,yBACA,wBACA,0BACA,mCACA,wCACA,kCACA,wCACA,kCACA,2BACA,4BACA,4BACA,4BACA,2BACA,4BACA,wCACA,yCACA,+BACA,8BACA,qCACA,0CACA,mCACA,uCACA,oCACA,4BACA,kCACA,0BACJ,EAEMC,EAAyB,CAC3B,OACA,QACA,SACA,MACA,YACA,UACA,YACA,eACA,mBACA,QACA,cACA,UACA,QACA,kBACA,QACA,gBACA,iBACA,aACA,mBACA,kBACA,OACA,gBACA,eACA,gBACA,cACA,YACA,YACA,cACA,UACA,YACA,UACA,YACA,aACJ,EACIF,EAAM,SAASD,CAAQ,EACvBH,EAA0B,GACnBK,EAAS,SAASF,CAAQ,GACjCH,EAA0B,GAG1BE,EAAiB,KAAUE,EAAMC,EAAS,UAAUE,GAAKA,IAAMJ,CAAQ,CAAC,GACjEG,EAAa,SAASH,CAAQ,KAChCA,IAAa,WAAaA,IAAa,UAAaL,GAAU,iBAK/DE,EAA0B,GAG1BE,EAAiB,KAAUE,EAAME,EAAa,UAAUC,GAAKA,IAAMJ,CAAQ,CAAC,GAGxF,CACJ,CACJ,CAEAH,GACA3W,EAAO,2BAA6B,GAEpCF,EAAK8J,GAA8B,EAEnCU,GAAmB,CAAC,EACpBvG,GAAa,cAAgB,CAAC,eAAe,GAIzCA,GAAa,eAAiB,MAAQA,GAAa,cAAc,OAAS,IAG1E/D,EAAO,2BAA6B,GACpCF,EAAKyI,GAAc,EAG/B,CAGA,GADA,KAAK,MAAQ,EACTiO,EAAW,OAA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",
  "names": ["synth_exports", "__export", "Config", "EnvelopeType", "FilterType", "InstrumentType", "Synth", "Tone", "FilterType", "EnvelopeType", "InstrumentType", "TypePresets", "SampleLoadingState", "sampleLoadingState", "SampleLoadedEvent", "totalSamples", "samplesLoaded", "SampleLoadEvents", "sampleLoadEvents", "startLoadingSample", "url", "chipWaveIndex", "presetSettings", "rawLoopOptions", "customSampleRate", "sampleLoaderAudioContext", "closedSampleLoaderAudioContext", "chipWave", "Config", "rawChipWave", "rawRawChipWave", "response", "arrayBuffer", "audioBuffer", "samples", "centerWave", "samplesR", "integratedSamples", "performIntegral", "integratedSamplesR", "error", "loadScript", "url", "resolve", "reject", "Config", "script", "event", "loadBuiltInSamples", "set", "defaultIntegratedSamples", "defaultSamples", "chipWaves", "sampleLoadingState", "startIndex", "chipWave", "chipWaveIndex", "rawChipWave", "rawRawChipWave", "integratedChipWave", "chipWaveSamples", "centerWave", "chipWaveIndexOffset", "chipWaveSample", "performIntegral", "sampleLoadEvents", "SampleLoadedEvent", "_Config", "toNameMap", "centerAndNormalizeWave", "rawChipToIntegrated", "x", "y", "wave", "i", "drive", "phaseWidth", "centerPoint", "inverse", "sum", "average", "magn", "magnAvg", "cumulative", "newWave", "performIntegralOld", "temp", "getPulseWidthRatio", "pulseWidth", "getDrumWave", "index", "inverseRealFourierTransform", "scaleElementsByFactor", "drumBuffer", "newBuffer", "drawNoiseSpectrum", "ultraboxnewchipnoiserand", "b0", "b1", "b2", "b3", "b4", "b5", "b6", "white", "lastOut", "waveLength", "lowOctave", "highOctave", "lowPower", "highPower", "overallSlope", "lowIndex", "highIndex", "retroWave", "combinedAmplitude", "lerped", "amplitude", "radians", "getArpeggioPitchIndex", "pitchCount", "useFastTwoNoteArp", "arpeggio", "arpeggioPattern", "array", "dictionary", "value", "result", "effectsIncludeTransition", "effects", "effectsIncludeChord", "effectsIncludePitchShift", "effectsIncludeDetune", "effectsIncludeVibrato", "calculateRingModHertz", "sliderHz", "sliderHzOffset", "Config", "rawChipToIntegrated", "raw", "newArray", "dictionary", "i", "value", "key", "performIntegral", "result", "Deque", "_capacity", "_buffer", "_mask", "_offset", "_count", "element", "_embiggen", "index", "oldBuffer", "newBuffer", "size", "offset", "i", "isMobile", "EditorConfig", "_EditorConfig", "toNameMap", "TypePresets", "presetValue", "categoryIndex", "presetIndex", "program", "category", "preset", "presetName", "instrument", "Channel", "FilterCoefficients", "linearGain", "cornerRadiansPerSample", "g", "a0", "shelfLinearGain", "tan", "sqrtGain", "delay", "peakLinearGain", "alpha", "cos", "filterResonance", "feedback", "slope", "A", "c", "Aplus", "Aminus", "sqrtA2Alpha", "bandWidthScale", "bandWidth", "FrequencyResponse", "filter", "radiansPerSample", "real", "imag", "a", "b", "realZ1", "imagZ1", "realNum", "imagNum", "realDenom", "imagDenom", "realZ", "imagZ", "i", "realTemp", "imagTemp", "DynamicBiquadFilter", "start", "end", "deltaRate", "useMultiplicativeInputCoefficients", "warpInfinityToNyquist", "radians", "FilterSettings", "_FilterSettings", "type", "freqSetting", "gainSetting", "controlPoint", "FilterControlPoint", "filterArray", "i", "point", "Config", "filterObject", "pointObject", "filterA", "filterB", "pos", "lerpedFilter", "legacyCutoffSetting", "legacyResonanceSetting", "legacyEnv", "legacyFilterCutoffMaxHz", "legacyFilterMaxRadians", "legacyFilterMaxResonance", "legacyFilterCutoffRange", "legacyFilterResonanceRange", "resonant", "firstOrder", "cutoffAtMax", "envDecays", "standardSampleRate", "legacyHz", "legacyRadians", "targetRadians", "curvedRadians", "curvedHz", "finalHz", "finalRadians", "legacyFilter", "FilterCoefficients", "response", "FrequencyResponse", "legacyFilterGainAtNewRadians", "logGain", "convertedGain", "intendedGain", "invertedGain", "maxRadians", "freqRatio", "legacyFilterGain", "allowFirstOrder", "_FilterControlPoint", "value", "hz", "peakMult", "power", "neutral", "interpolatedPower", "linearGain", "filter", "sampleRate", "freqMult", "cornerRadiansPerSample", "octave", "gainPow", "freqRelativeTo8khz", "warpedFreq", "warpedOctave", "distanceFromCenter", "freqLoudness", "clamp", "min", "max", "val", "validateRange", "parseFloatWithDefault", "s", "defaultValue", "result", "parseIntWithDefault", "fadeInSettingToSeconds", "setting", "secondsToFadeInSetting", "seconds", "Config", "fadeOutSettingToTicks", "ticksToFadeOutSetting", "ticks", "lower", "i", "upper", "detuneToCents", "detune", "centsToDetune", "cents", "fittingPowerOfTwo", "x", "EnvelopeSettings", "isNoiseEnvelope", "Config", "envelopeObject", "format", "target", "envelope", "isTremolo2", "clamp", "Effect", "FilterSettings", "Config", "type", "Operator", "index", "Config", "other", "CustomAlgorithm", "carriers", "modulation", "j", "preset", "CustomFeedBack", "inIndices", "i", "SpectrumWave", "isNoiseChannel", "isHarmonic", "hashMult", "fittingPowerOfTwo", "hash", "point", "HarmonicsWave", "Instrument", "FilterSettings", "isModChannel", "mod", "sum", "average", "cumulative", "wavePrev", "type", "legacySettings", "forceSimpleFilter", "legacyCutoffSetting", "legacyResonanceSetting", "legacyFilterEnv", "legacyPulseEnv", "legacyOperatorEnvelopes", "legacyFeedbackEnv", "carrierCount", "noCarriersControlledByNoteSize", "allCarriersControlledByNoteSize", "noteSizeControlsSomethingElse", "instrumentObject", "effectsIncludeTransition", "effectsIncludeChord", "effectsIncludePitchShift", "effectsIncludeDetune", "detuneToCents", "effectsIncludeVibrato", "fadeInSettingToSeconds", "fadeOutSettingToTicks", "spectrum", "operatorArray", "operator", "customAlgorithm", "customFeedback", "envelopes", "useSlowerRhythm", "useFastTwoNoteArp", "legacyGlobalReverb", "jsonFormat", "format", "clamp", "transitionProperty", "transition", "secondsToFadeInSetting", "ticksToFadeOutSetting", "chordProperty", "legacyChordNames", "chord", "unisonProperty", "legacyChorusNames", "unison", "potentialPitchShift", "centsToDetune", "vibratoProperty", "legacyVibratoNames", "vibrato", "wave", "legacyEnvelopeNames", "getEnvelope", "name", "drum", "envelope", "legacyWaveNames", "modboxWaveNames", "sandboxWaveNames", "zefboxWaveNames", "miscWaveNames", "paandorasboxWaveNames", "rawName", "table", "potentialChipWaveIndex", "algorithm", "feedback", "algorithm6Op", "feedback6Op", "synthboxLegacyFeedbacks", "toNameMap", "synthboxFeedbackType", "operatorObject", "freq", "newEffect", "legacyToCutoff", "legacyToEnvelope", "filterNames", "oldFilterNames", "legacyFilter", "envelopeArray", "tempEnvelope", "EnvelopeSettings", "pitchEnvelopeStart", "pitchEnvelopeEnd", "envelopeInverse", "discreteEnvelope", "forNoteFilter", "largest", "effectIndex", "pitch", "Effect", "target", "newEnvelopes", "start", "end", "inverse", "perEnvelopeSpeed", "perEnvelopeLowerBound", "perEnvelopeUpperBound", "steps", "seed", "waveform", "discrete", "makeEmpty", "envelopeSettings", "automationTarget", "useControlPointCount", "envelopeIndex", "makeNotePin", "interval", "time", "size", "Note", "_Note", "pitch", "start", "end", "fadeout", "chipWaveStartOffset", "longestFlatIntervalDuration", "mainInterval", "pinIndex", "pinA", "pinB", "duration", "loudestSize", "pin", "newNote", "part", "endPinIndex", "Pattern", "result", "note", "song", "channel", "isModChannel", "noteArray", "instrument", "mod", "Config", "volumeCap", "pointArray", "useVol", "noteObject", "patternObject", "i", "importedPartsPerBeat", "isNoiseChannel", "jsonFormat", "format", "instruments", "instrumentCount", "clamp", "j", "maxNoteCount", "k", "startInterval", "pointObject", "maxPitch", "lowestPitch", "highestPitch", "old", "encode32BitNumber", "buffer", "x", "base64IntToCharCode", "decode32BitNumber", "compressed", "charIndex", "base64CharCodeToInt", "encodeUnisonSettings", "v", "s", "o", "e", "i", "cleanS", "cleanSDivided", "cleanO", "cleanODivided", "cleanE", "cleanI", "convertLegacyKeyToKeyAndOctave", "rawKeyIndex", "key", "clamp", "Config", "octave", "base64IntToCharCode", "base64CharCodeToInt", "BitFieldReader", "_bits", "_readIndex", "source", "startIndex", "stopIndex", "i", "value", "bitCount", "result", "minValue", "minBits", "numBits", "BitFieldWriter", "_index", "other", "buffer", "Song", "_Song", "_format", "Config", "_oldestBeepboxVersion", "_latestBeepboxVersion", "_oldestJummBoxVersion", "_latestJummBoxVersion", "_oldestGoldBoxVersion", "_latestGoldBoxVersion", "_oldestUltraBoxVersion", "_latestUltraBoxVersion", "_oldestSlarmoosBoxVersion", "_latestSlarmoosBoxVersion", "_variant", "FilterSettings", "string", "isMod", "modChannel", "modInstrument", "modCount", "instrument", "vol", "currentIndex", "tempoIndex", "chorusIndex", "reverbIndex", "gainIndex", "panningIndex", "panDelayIndex", "distortionIndex", "detuneIndex", "vibratoDepthIndex", "vibratoSpeedIndex", "vibratoDelayIndex", "arpSpeedIndex", "bitCrushIndex", "freqCrushIndex", "echoIndex", "echoDelayIndex", "echoPingPongIndex", "pitchShiftIndex", "ringModIndex", "ringModHertzIndex", "granularIndex", "grainAmountIndex", "grainSizeIndex", "grainRangeIndex", "envSpeedIndex", "perEnvSpeedIndex", "perEnvLowerIndex", "perEnvUpperIndex", "instrumentIndex", "effectIndex", "modulator", "cap", "modSetting", "filterType", "channelIndex", "channel", "seconds", "clamp", "ticks", "lower", "upper", "andResetChannels", "EditorConfig", "isNoiseChannel", "isModChannel", "Channel", "pattern", "Pattern", "Instrument", "bar", "bits", "encodedSongTitle", "j", "point", "usingSubFilterBitfield", "k", "encodedChannelName", "effect", "effectsIncludeTransition", "effectsIncludeChord", "effectsIncludePitchShift", "effectsIncludeDetune", "effectsIncludeVibrato", "harmonicsBits", "encodeUnisonSettings", "encodedLoopMode", "encodedReleaseMode", "encode32BitNumber", "o", "spectrumBits", "envelopeIndex", "checkboxValues", "neededBits", "shapeBits", "bitsPerNoteSize", "maxInstrumentsPerPattern", "neededInstrumentCountBits", "neededInstrumentIndexBits", "neededModInstrumentIndexBits", "mod", "modChannels", "modInstruments", "modFilter", "modEnvelope", "status", "octaveOffset", "lastPitch", "recentPitches", "recentShapes", "instrumentCount", "validateRange", "curPart", "note", "shapePart", "startPitch", "currentPitch", "pitchBends", "pin", "nextPitch", "shapeString", "shapeIndex", "allPitches", "pitch", "pitchIndex", "interval", "pitchIter", "stringLength", "digits", "maxApplyArgs", "customSamplesStr", "_envelopeFromLegacyIndex", "legacyIndex", "compressed", "jsonFormat", "_clearSamples", "charIndex", "variantTest", "fromBeepBox", "fromJummBox", "fromGoldBox", "fromUltraBox", "fromSlarmoosBox", "fromTheepBox", "version", "beforeTwo", "beforeThree", "beforeFour", "beforeFive", "beforeSix", "beforeSeven", "beforeEight", "beforeNine", "forceSimpleFilter", "willLoadLegacySamplesForOldSongs", "compressed_array", "_restoreChipWaveListToDefault", "willLoadLegacySamples", "willLoadNintariboxSamples", "willLoadMarioPaintboxSamples", "customSampleUrls", "customSamplePresets", "sampleLoadingState", "sampleLoadEvents", "SampleLoadedEvent", "url", "loadBuiltInSamples", "parseOldSyntax", "_parseAndConfigureCustomSample", "customSamplePresetsMap", "toNameMap", "legacySettingsCache", "legacyGlobalReverb", "instrumentChannelIterator", "instrumentIndexIterator", "command", "useSlowerArpSpeed", "useFastTwoNoteArp", "songNameLength", "rawKeyIndex", "key", "octave", "convertLegacyKeyToKeyAndOctave", "barCount", "patternsPerChannel", "channelCount", "patterns", "instrumentsPerChannel", "instrumentsFlagBits", "newRhythm", "rhythmMap", "instrumentType", "newEffect", "presetValue", "legacyWaves", "chipWaveReal", "chipWaveCounter", "legacyToCutoff", "legacyToEnvelope", "legacySettings", "legacyFilter", "typeCheck", "originalControlPointCount", "FilterControlPoint", "originalSubfilterControlPointCount", "sampleLoopInfoEncodedLength", "decode32BitNumber", "sampleLoopInfoEncoded", "sampleLoopInfo", "entry", "info", "isUsingAdvancedLoopControls", "chipWaveLoopMode", "chipWaveInStereo", "chipWavePlayBackwards", "chipWaveLoopStart", "chipWaveLoopEnd", "chipWaveStartOffset", "pregoldToEnvelope", "aa", "sustainValue", "settings", "secondsToFadeInSetting", "ticksToFadeOutSetting", "legacyEffects", "legacyEnvelopes", "vibrato", "originalValue", "unison", "unisonLength", "unisonSpreadNegative", "unisonSpread", "unisonOffsetNegative", "unisonOffset", "unisonExpressionNegative", "unisonExpression", "unisonSignNegative", "unisonSign", "effectCount", "legacyEffectTypes", "bit", "sum", "average", "cumulative", "wavePrev", "nextValue", "channelNameLength", "carrierCountTemp", "tempModArray", "chipWaveForCompat", "freqToGold3", "freqToUltraBox", "jummToUltraEnvelope", "slarURL3toURL4Envelope", "envelopeCount", "envelopeDiscrete", "target", "index", "maxCount", "updatedEnvelopes", "perEnvelopeSpeed", "isTremolo2", "envelope", "pitchEnvelopeStart", "pitchEnvelopeEnd", "envelopeInverse", "perEnvelopeLowerBound", "perEnvelopeUpperBound", "steps", "seed", "waveform", "pitchEnvelopeCompact", "instrumentPitchEnvelopeStart", "instrumentPitchEnvelopeEnd", "instrumentEnvelopeInverse", "pre3To3g", "old", "jummToG", "byteCount", "subStringLength", "bitStringLength", "largerChords", "recentPitchBitLength", "recentPitchLength", "bitStringLengthLength", "songReverbChannel", "songReverbInstrument", "songReverbIndex", "shouldCorrectTempoMods", "jummboxTempoMin", "jumfive", "modChannelLength", "modInstrumentLength", "forNoteFilter", "detuneScaleNotes", "newPattern", "newNotes", "noteCount", "useOldShape", "newNote", "isBackwards", "restLength", "shape", "pinObj", "Note", "pitchCount", "intervalIter", "noteIsForTempoMod", "tempoOffset", "pinCount", "makeNotePin", "patternIndex", "lowestPart", "chn", "_isProperUrl", "defaultIntegratedSamplesL", "defaultIntegratedSamplesR", "defaultSamplesL", "defaultSamplesR", "customSampleUrlIndex", "chipWaveIndex", "urlSliced", "customSampleRate", "isCustomPercussive", "customRootKey", "presetIsUsingAdvancedLoopControls", "presetChipWaveLoopStart", "presetChipWaveLoopEnd", "presetChipWaveStartOffset", "presetChipWaveLoopMode", "presetChipWavePlayBackwards", "presetChipWaveInStereo", "parsedSampleOptions", "optionsStartIndex", "optionsEndIndex", "rawOptions", "rawOption", "optionCode", "optionData", "parseFloatWithDefault", "parseIntWithDefault", "parsedUrl", "sliceForSampleRate", "sliceForRootKey", "urlWithNamedOptions", "namedOptions", "name", "expression", "customSamplePresetSettings", "customSamplePreset", "startLoadingSample", "enableIntro", "loopCount", "enableOutro", "channelArray", "instrumentArray", "patternArray", "sequenceArray", "l", "channelObject", "jsonObject", "format", "customSamples", "shouldLoadLegacySamples", "instrumentObjects", "instrumentObject", "waveName", "names", "oldNames", "veryOldNames", "x", "oldScaleNames", "scaleName", "scale", "letter", "symbol", "letterMap", "accidentalMap", "offset", "importedPartsPerBeat", "rhythm", "maxInstruments", "maxPatterns", "maxBars", "newPitchChannels", "newNoiseChannels", "newModChannels", "patternObject", "maxValue", "ChannelState", "scaleElementsByFactor", "array", "factor", "i", "isPowerOf2", "n", "countBits", "reverseIndexBits", "fullArrayLength", "bitCount", "finalShift", "j", "temp", "inverseRealFourierTransform", "array", "fullArrayLength", "totalPasses", "countBits", "pass", "subStride", "midSubStride", "stride", "radiansIncrement", "cosIncrement", "sinIncrement", "oscillatorMultiplier", "startIndex", "startIndexA", "midIndexA", "startIndexB", "midIndexB", "stopIndex", "realStartA", "imagStartB", "c", "s", "cPrev", "sPrev", "index", "indexA0", "indexA1", "indexB0", "indexB1", "real0", "real1", "imag0", "imag1", "tempA", "tempB", "cTemp", "sTemp", "index1", "index2", "index3", "imag2", "imag3", "reverseIndexBits", "Grain", "durationInSamples", "amplitude", "invDuration", "invDurationSquared", "delay", "EffectState", "type", "i", "synth", "instrument", "effect", "samplesPerTick", "Config", "granularDelayLineSizeInSamples", "fittingPowerOfTwo", "oldGrainsLength", "echoDelay", "safeEchoDelaySteps", "safeEchoDelayBufferSize", "newDelayLineL", "newDelayLineR", "oldMask", "instrumentState", "roundedSamplesPerTick", "tone", "channelIndex", "instrumentIndex", "envelopeStarts", "envelopeEnds", "samplesPerSecond", "usesGranular", "usesRingModulation", "usesDistortion", "usesBitcrusher", "usesGain", "usesPanning", "usesFlanger", "usesChorus", "usesEcho", "usesReverb", "usesEQFilter", "granularMixEnd", "iterations", "granularMinGrainSizeInMilliseconds", "grainRange", "granularMaxGrainSizeInMilliseconds", "granularGrainSizeInSeconds", "granularGrainSizeInSamples", "granularDelayLineLength", "grainIndex", "grain", "minDelayTimeInSeconds", "maxDelayTimeInSeconds", "useDistortionStart", "useDistortionEnd", "distortionSliderStart", "distortionSliderEnd", "distortionStart", "distortionEnd", "distortionDriveStart", "distortionDriveEnd", "freqSettingStart", "freqSettingEnd", "quantizationSettingStart", "quantizationSettingEnd", "basePitch", "freqStart", "Instrument", "freqEnd", "phaseDeltaStart", "phaseDeltaEnd", "scaleStart", "scaleEnd", "foldLevelStart", "foldLevelEnd", "eqFilterVolume", "eqFilterSettingsStart", "FilterSettings", "eqFilterSettingsEnd", "startSimpleFreq", "startSimpleGain", "endSimpleFreq", "endSimpleGain", "filterChanges", "startPoint", "endPoint", "Synth", "DynamicBiquadFilter", "eqFilterSettings", "eqFilterVolumeStart", "eqFilterVolumeEnd", "panEnvelopeStart", "panEnvelopeEnd", "usePanStart", "usePanEnd", "panStart", "panEnd", "volumeStartL", "volumeStartR", "volumeEndL", "volumeEndR", "maxDelaySamples", "usePanDelayStart", "usePanDelayEnd", "delayStart", "delayEnd", "delayStartL", "delayStartR", "delayEndL", "delayEndR", "gainEnvelopeStart", "gainEnvelopeEnd", "useGainStart", "useGainEnd", "gainStart", "gainEnd", "chorusEnvelopeStart", "chorusEnvelopeEnd", "useChorusStart", "useChorusEnd", "chorusStart", "chorusEnd", "chorusCombinedMultStart", "chorusCombinedMultEnd", "flangerEnvelopeStart", "flangerEnvelopeEnd", "useFlangerStart", "useFlangerEnd", "flangerStart", "flangerEnd", "flangerSpeedEnvelopeStart", "flangerSpeedEnvelopeEnd", "useFlangerSpeedStart", "useFlangerSpeedEnd", "flangerSpeedStart", "flangerSpeedEnd", "flangerDepthEnvelopeStart", "flangerDepthEnvelopeEnd", "useFlangerDepthStart", "useFlangerDepthEnd", "flangerDepthStart", "flangerDepthEnd", "flangerFeedbackEnvelopeStart", "flangerFeedbackEnvelopeEnd", "useFlangerFeedbackStart", "useFlangerFeedbackEnd", "flangerFeedbackStart", "flangerFeedbackEnd", "useRingModStart", "useRingModEnd", "useRingModEnvelopeStart", "useRingModEnvelopeEnd", "useRingModHzStart", "useRingModHzEnd", "useRingModHzEnvelopeStart", "useRingModHzEnvelopeEnd", "ringModStart", "ringModEnd", "ringModPhaseDeltaStart", "calculateRingModHertz", "ringModPhaseDeltaEnd", "maxEchoMult", "averageEchoDelaySeconds", "echoSustainEnvelopeStart", "echoSustainEnvelopeEnd", "useEchoSustainStart", "useEchoSustainEnd", "echoMultStart", "echoMultEnd", "echoDelayEnvelopeStart", "echoDelayEnvelopeEnd", "useEchoDelayStart", "useEchoDelayEnd", "tmpEchoDelayOffsetStart", "tmpEchoDelayOffsetEnd", "shelfRadians", "maxReverbMult", "reverbEnvelopeStart", "reverbEnvelopeEnd", "useReverbStart", "useReverbEnd", "reverbStart", "reverbEnd", "halfLifeMult", "attenuationPerSecond", "echoDuration", "averageMult", "averageReverbDelaySeconds", "reverbDuration", "encoder", "xxHash32", "input", "seed", "buffer", "b", "acc", "offset", "accN", "limit", "lane", "i", "laneN0", "laneN1", "laneNP", "acc0", "acc1", "laneP", "EnvelopeComputer", "_EnvelopeComputer", "Config", "_noteSizeFinal", "_prevNoteSizeFinal", "_modifiedEnvelopeIndices", "_modifiedEnvelopeCount", "length", "i", "envelopeIndex", "instrument", "currentPart", "tickTimeStart", "tickTimeStartReal", "secondsPerTick", "tone", "timeScale", "instrumentState", "synth", "channelIndex", "instrumentIndex", "secondsPerTickUnscaled", "transition", "tickTimeEnd", "tickTimeEndReal", "noteSecondsStart", "noteSecondsStartUnscaled", "noteSecondsEnd", "noteSecondsEndUnscaled", "noteTicksStart", "noteTicksEnd", "prevNoteSecondsStart", "prevNoteSecondsEnd", "prevNoteSecondsStartUnscaled", "prevNoteSecondsEndUnscaled", "prevNoteTicksStart", "prevNoteTicksEnd", "beatsPerTick", "beatTimeStart", "beatTimeEnd", "noteSizeStart", "noteSizeEnd", "prevNoteSize", "nextNoteSize", "prevSlideStart", "prevSlideEnd", "nextSlideStart", "nextSlideEnd", "prevSlideRatioStart", "prevSlideRatioEnd", "nextSlideRatioStart", "nextSlideRatioEnd", "endPinIndex", "startPin", "endPin", "startPinTick", "endPinTick", "ratioStart", "ratioEnd", "noteStartTick", "noteEndTick", "maximumSlideTicks", "slideTicks", "lowpassCutoffDecayVolumeCompensation", "usedNoteSize", "automationTarget", "targetIndex", "envelope", "inverse", "isDiscrete", "perEnvelopeSpeed", "globalEnvelopeSpeed", "envelopeSpeed", "perEnvelopeLowerBound", "perEnvelopeUpperBound", "timeSinceStart", "steps", "seed", "waveform", "startPinTickAbsolute", "defaultPitch", "envelopeSettings", "secondsPerTickScaled", "pitch", "computeIndex", "envelopeStart", "other", "envelopeEnd", "filterSettings", "unspedTime", "time", "beats", "noteSize", "isDrumset", "notePinStart", "boundAdjust", "Synth", "hashMax", "step", "timeHash", "xxHash32", "pitchHash", "noteHash", "timeHashA", "timeHashB", "weightedAverage", "trap", "saw", "tri", "attack", "temp", "lin", "calculateBends", "chord", "arpeggiates", "monophonic", "arpeggio", "tonePitch", "getArpeggioPitchIndex", "index", "startNote", "endNote", "envelopeLowerBound", "envelopeUpperBound", "range", "drumsetFilterEnvelope", "beatsPerPart", "partTimeStart", "partTimeEnd", "computeDrumsetEnvelope", "drumsetFilterEnvelopeStart", "drumsetFilterEnvelopeEnd", "SpectrumWaveState", "_hash", "settings", "lowestOctave", "waveLength", "Config", "wave", "i", "highestOctave", "falloffRatio", "pitchTweak", "controlPointToOctave", "point", "combinedAmplitude", "value1", "value2", "octave1", "octave2", "drawNoiseSpectrum", "inverseRealFourierTransform", "scaleElementsByFactor", "HarmonicsWaveState", "_generatedForType", "instrumentType", "harmonicsRendered", "retroWave", "getDrumWave", "overallSlope", "combinedControlPointAmplitude", "harmonicIndex", "harmonicFreq", "controlValue", "normalizedValue", "amplitude", "mult", "performIntegralOld", "PickedString", "synth", "instrumentState", "tone", "stringIndex", "roundedSamplesPerTick", "stringDecayStart", "stringDecayEnd", "sustainType", "allPassCenter", "prevDelayLength", "phaseDeltaStart", "phaseDeltaScale", "phaseDeltaEnd", "radiansPerSampleStart", "radiansPerSampleEnd", "centerHarmonicStart", "centerHarmonicEnd", "allPassRadiansStart", "allPassRadiansEnd", "shelfRadians", "decayCurveStart", "decayCurveEnd", "register", "registerShelfCenter", "registerLowpassCenter", "decayRateStart", "decayRateEnd", "expressionDecayStart", "expressionDecayEnd", "Synth", "allPassGStart", "allPassPhaseDelayStart", "allPassGEnd", "allPassPhaseDelayEnd", "PickedStringBrightnessType", "brightnessType", "shelfGainStart", "shelfGainEnd", "cornerHardness", "lowpass1stOrderCutoffRadiansStart", "lowpass1stOrderCutoffRadiansEnd", "lowpass2ndOrderCutoffRadiansStart", "lowpass2ndOrderCutoffRadiansEnd", "lowpass2ndOrderGainStart", "lowpass2ndOrderGainEnd", "warpInfinityToNyquist", "sustainFilterA1Start", "sustainFilterA2Start", "sustainFilterB0Start", "sustainFilterB1Start", "sustainFilterB2Start", "sustainFilterPhaseDelayStart", "sustainFilterA1End", "sustainFilterA2End", "sustainFilterB0End", "sustainFilterB1End", "sustainFilterB2End", "sustainFilterPhaseDelayEnd", "periodLengthStart", "periodLengthEnd", "minBufferLength", "delayLength", "delayLengthEnd", "pitchChanged", "reinitializeImpulse", "likelyMaximumLength", "Instrument", "newDelayLine", "fittingPowerOfTwo", "oldDelayBufferMask", "startCopyingFromIndex", "delayLine", "delayBufferMask", "startImpulseFrom", "startZerosFrom", "stopZerosAt", "impulseWave", "impulseWaveLength", "impulsePhaseDelta", "fadeDuration", "startImpulseFromSample", "stopImpulseAt", "stopImpulseAtSample", "impulsePhase", "prevWaveIntegral", "impulsePhaseInt", "index", "nextWaveIntegral", "phaseRatio", "sample", "fadeIn", "fadeOut", "combinedFade", "curvedFade", "InstrumentState", "_InstrumentState", "Deque", "EnvelopeComputer", "instrument", "samplesPerTick", "effectIndex", "effect", "envelopeIndex", "channelIndex", "instrumentIndex", "EffectState", "samplesPerSecond", "tickTimeStart", "secondsPerTick", "currentPart", "envelopeSpeeds", "useEnvelopeSpeed", "perEnvelopeSpeed", "envelopeStarts", "envelopeEnds", "mixVolumeEnd", "startVal", "endVal", "delayInputMultStart", "delayInputMultEnd", "progressInTick", "progressAtEndOfTick", "_drumsetIndexToSpectrumOctave", "pitch", "type", "EventManager", "eventType", "eventData", "extraEventData", "i", "callback", "lisen", "events", "epsilon", "Tone", "Config", "EnvelopeComputer", "i", "pickedString", "Synth", "_Synth", "channelCount", "ChannelState", "channel", "channelState", "j", "InstrumentState", "instrumentState", "song", "channelIndex", "instrumentIndex", "instrument", "effectIndex", "effect", "samplesPerTick", "envelopeIndex", "dummyArray", "latestModTimes", "latestModInsTimes", "currentPart", "pattern", "currentBar", "instrumentIdx", "latestPinParts", "latestPinValues", "partsInBar", "note", "pinIdx", "transitionLength", "toNextBarLength", "deltaVolume", "mod", "songFilterParam", "tgtSong", "FilterSettings", "usedChannels", "usedInstruments", "tgtPattern", "eqFilterParam", "noteFilterParam", "modulatorAdjust", "tgtInstrument", "tgtEffect", "tgtInstrumentList", "str", "amplitude", "FilterCoefficients", "FilterControlPoint", "FrequencyResponse", "Deque", "value", "remainder", "bar", "enableIntro", "enableOutro", "loop", "startBar", "endBar", "hasTempoMods", "hasNextBarMods", "prevTempo", "latestTempoPin", "latestTempoValue", "ended", "totalSamples", "foundMod", "n", "a", "b", "tickLength", "prevPinTempo", "currPinTempo", "bpmScalar", "useLoopCount", "bars", "Song", "fittingPowerOfTwo", "bufferSize", "latencyHint", "volumeStart", "volumeEnd", "setting", "val", "nextVal", "forNoteFilter", "channelIdx", "forSong", "found", "oldBar", "nextBar", "audioProcessingEvent", "outputBuffer", "outputDataL", "outputDataR", "length", "events", "roundedSamplesPerTick", "samplesPerSecond", "eqFilterVolume", "eqFilterSettingsStart", "eqFilterSettingsEnd", "startSimpleFreq", "startSimpleGain", "endSimpleFreq", "endSimpleGain", "filterChanges", "startPoint", "endPoint", "DynamicBiquadFilter", "eqFilterSettings", "eqFilterVolumeStart", "eqFilterVolumeEnd", "outputBufferLength", "playSong", "volume", "limitDecay", "limitRise", "limit", "skippedBars", "firstSkippedBufferIndex", "bufferIndex", "samplesLeftInBuffer", "samplesLeftInTick", "runLength", "runEnd", "tone", "barVisited", "tonesPlayedInThisInstrument", "shouldFadeOutFast", "tickSampleCountdown", "startRatio", "endRatio", "ticksIntoBar", "partTimeTickStart", "partTimeTickEnd", "partTimeStart", "partTimeEnd", "useVibratoSpeed", "midBeat", "periods", "hz", "samplesPerPeriod", "radiansPerSample", "stopIndex", "tempAmplitude", "filtersL", "filtersR", "filterCount", "initialFilterInput1L", "initialFilterInput2L", "initialFilterInput1R", "initialFilterInput2R", "applyFilters", "eqFilterVolumeDelta", "inputSampleL", "sampleL", "inputSampleR", "sampleR", "absL", "absR", "abs", "limitRange", "limitTarget", "limitedVolume", "tickTimeStart", "secondsPerTick", "envelopeComputer", "envelopeSpeeds", "useEnvelopeSpeed", "perEnvelopeSpeed", "arpEnvelopeStart", "useArpeggioSpeed", "clamp", "effectIdx", "maxInstrumentsPerChannel", "toneIndex", "pitches", "bassPitches", "toneList", "toneCount", "otherPattern", "transition", "chord", "otherNote", "forceContinue", "otherInstrument", "otherTransition", "firstNote", "secondNote", "firstNoteInterval", "pitch", "notePitches", "currentTick", "notes", "prevNotes", "nextNotes", "fillCount", "modToneCount", "newInstrumentIndex", "sourceInstrumentState", "destInstrumentState", "prevNoteForThisInstrument", "nextNoteForThisInstrument", "forceContinueAtStart", "forceContinueAtEnd", "atNoteStart", "oldTone", "prevNote", "nextNote", "partsPerBar", "tonesInPrevNote", "tonesInNextNote", "prevPattern", "lastNote", "patternForcesContinueAtStart", "chordOfCompatibleInstrument", "nextPattern", "nextPatternForcesContinueAtStart", "strumOffsetParts", "prevNoteForThisTone", "noteForThisTone", "nextNoteForThisTone", "noteStartPart", "passedEndOfNote", "noteEndPart", "released", "tickTimeEnd", "endPinIndex", "startPin", "endPin", "startPinTick", "endPinTick", "ratioStart", "ratioEnd", "chordSize", "chordExpression", "isNoiseChannel", "intervalScale", "secondsPerPart", "sampleTime", "beatsPerPart", "specialIntervalMult", "toneIsOnLastTick", "intervalStart", "intervalEnd", "fadeExpressionStart", "fadeExpressionEnd", "chordExpressionStart", "chordExpressionEnd", "expressionReferencePitch", "basePitch", "baseExpression", "pitchDamping", "chipWaveLength", "firstOffset", "lastOffset", "startTicksSinceReleased", "endTicksSinceReleased", "fadeOutTicks", "noteStartTick", "noteEndTick", "pinStart", "pinEnd", "noteTicksPassedTickStart", "noteTicksPassedTickEnd", "pinRatioStart", "pinRatioEnd", "noteLengthTicks", "tmpNoteFilter", "noteFilterSettingsStart", "noteFilterSettingsEnd", "envelopeStarts", "envelopeEnds", "intervalDiff", "chordSizeDiff", "effectsIncludePitchShift", "pitchShift", "pitchShiftScalarStart", "pitchShiftScalarEnd", "envelopeStart", "envelopeEnd", "effectsIncludeDetune", "modDetuneStart", "modDetuneEnd", "detuneToCents", "effectsIncludeVibrato", "delayTicks", "vibratoAmplitudeStart", "vibratoAmplitudeEnd", "vibratoStart", "vibratoLfoStart", "vibratoDepthEnvelopeStart", "ticksUntilVibratoStart", "vibratoLfoEnd", "vibratoDepthEnvelopeEnd", "vibratoEnd", "ticksUntilVibratoEnd", "fadeInSeconds", "noteFilterExpression", "noteAllFreqsEnvelopeStart", "noteAllFreqsEnvelopeEnd", "noteFreqEnvelopeStart", "noteFreqEnvelopeEnd", "notePeakEnvelopeStart", "notePeakEnvelopeEnd", "noteFilterSettings", "drumsetEnvelopeComputer", "drumsetFilterEnvelope", "drumsetFilterEnvelopeStart", "drumsetFilterEnvelopeEnd", "point", "sineExpressionBoost", "totalCarrierExpression", "arpeggioInterval", "arpeggiates", "isMono", "arpeggio", "getArpeggioPitchIndex", "carrierCount", "associatedCarrierIndex", "freqMult", "interval", "pitchStart", "pitchEnd", "baseFreqStart", "Instrument", "baseFreqEnd", "hzOffset", "targetFreqStart", "targetFreqEnd", "freqEnvelopeStart", "freqEnvelopeEnd", "freqStart", "freqEnd", "amplitudeStart", "amplitudeEnd", "amplitudeCurveStart", "amplitudeCurveEnd", "amplitudeMultStart", "amplitudeMultEnd", "expressionStart", "expressionEnd", "pitchExpressionStart", "pitchExpressionEnd", "startVal", "endVal", "useFeedbackAmplitudeStart", "useFeedbackAmplitudeEnd", "feedbackAmplitudeStart", "feedbackAmplitudeEnd", "feedbackStart", "feedbackEnd", "freqEndRatio", "basePhaseDeltaScale", "intervalOffset", "startPitch", "endPitch", "settingsExpressionMult", "basePulseWidth", "getPulseWidthRatio", "pulseWidthModStart", "pulseWidthModEnd", "pulseWidthStart", "pulseWidthEnd", "decimalOffsetModStart", "decimalOffsetStart", "useSustainStart", "useSustainEnd", "startFreq", "unisonVoices", "unisonSpread", "unisonOffset", "unisonExpression", "voiceCountExpression", "unisonEnvelopeStart", "unisonEnvelopeEnd", "unisonStartA", "unisonEndA", "divisor", "unisonStart", "unisonEnd", "supersawExpressionStart", "supersawExpressionEnd", "minFirstVoiceAmplitude", "useDynamismStart", "useDynamismEnd", "curvedDynamismStart", "curvedDynamismEnd", "firstVoiceAmplitudeStart", "firstVoiceAmplitudeEnd", "dynamismStart", "dynamismEnd", "initializeSupersaw", "accumulator", "slope", "sample", "normalizedPhase", "zeroCrossingPhase", "prevDrop", "nextDrop", "phaseDelta", "distanceToZeroCrossing", "swappedIndex", "temp", "baseSpreadSlider", "useSpreadStart", "useSpreadEnd", "spreadSliderStart", "spreadSliderEnd", "averageSpreadSlider", "curvedSpread", "offset", "baseShape", "useShapeStart", "useShapeEnd", "shapeStart", "shapeEnd", "phaseDeltaStart", "phaseDeltaEnd", "delayLengthStart", "delayLengthEnd", "minBufferLength", "likelyMaximumLength", "newDelayLine", "oldDelayBufferMask", "startCopyingFromIndex", "pulseExpressionRatio", "stringDecayStart", "sustainEnvelopeStart", "sustainEnvelopeEnd", "stringDecayEnd", "PickedString", "secondsIntoBar", "vibratoPeriodSeconds", "fingerprint", "synthSource", "line", "outputs", "operatorLine", "modulators", "modulatorNumber", "feedbackIndices", "feedbacks", "wrappedFmSynth", "wrappedFm6Synth", "x", "synth", "aliases", "dataL", "dataR", "waveL", "waveR", "volumeScale", "waveLength", "chipWaveLoopEnd", "chipWaveLoopStart", "chipWaveLoopLength", "chipWaveLoopMode", "chipWavePlayBackwards", "unisonSign", "phaseDeltaA", "phaseDeltaB", "directionA", "directionB", "chipWaveCompletionA", "chipWaveCompletionB", "lastWaveLA", "lastWaveLB", "lastWaveRA", "lastWaveRB", "chipWaveCompletionFadeLength", "phaseDeltaScaleA", "phaseDeltaScaleB", "expression", "expressionDelta", "phaseA", "phaseB", "prevWaveIntegralLA", "prevWaveIntegralLB", "prevWaveIntegralRA", "prevWaveIntegralRB", "phaseAInt", "phaseBInt", "indexA", "indexB", "phaseRatioA", "phaseRatioB", "initialFilterInputL1", "initialFilterInputR1", "initialFilterInputL2", "initialFilterInputR2", "prevWaveLA", "prevWaveLB", "prevWaveRA", "prevWaveRB", "sampleIndex", "wrapped", "waveLA", "waveLB", "waveRA", "waveRB", "completionFadeA", "completionFadeB", "nextWaveIntegralLA", "nextWaveIntegralLB", "nextWaveIntegralRA", "nextWaveIntegralRB", "pwila", "pwilb", "pwira", "pwirb", "phaseA_", "phaseB_", "outputL", "outputR", "data", "wave", "filters", "initialFilterInput1", "initialFilterInput2", "prevWaveIntegralA", "prevWaveIntegralB", "nextWaveIntegralA", "nextWaveIntegralB", "waveA", "waveB", "inputSample", "output", "voiceCount", "pickedStringFunction", "pickedStringSource", "sampleList", "voice", "lines", "usesDistortion", "usesBitcrusher", "usesEqFilter", "usesGain", "usesPanning", "usesFlanger", "usesChorus", "usesEcho", "usesReverb", "usesGranular", "usesRingModulation", "isStereo", "signature", "effectsFunction", "effectsSource", "usesDelays", "effectState", "pulseWidth", "pulseWidthDelta", "sawPhaseA", "sawPhaseB", "sawPhaseC", "sawPhaseD", "pulseWaveA", "pulseWaveB", "t", "phaseDeltaScale", "phases", "dynamism", "dynamismDelta", "unisonDetunes", "shape", "shapeDelta", "delayLength", "delayLengthDelta", "delayLine", "delayBufferMask", "delayIndex", "phase", "supersawSample", "detunedPhaseDelta", "delaySampleTime", "lowerIndex", "upperIndex", "delayRatio", "prevDelaySample", "nextDelaySample", "delaySample", "phaseMask", "noiseSampleA", "noiseSampleB", "pitchRelativefilterA", "pitchRelativefilterB", "waveSampleA", "waveSampleB", "samplesInPeriod", "referenceDelta", "phaseInt", "index", "noiseSample", "phaseRatio", "stereoBufferIndex", "envelopeTarget", "tgtInstrumentState", "dotTarget", "lerpEndRatio", "speed", "bound", "indexPrev", "wavePrev", "stride", "attemptsRemaining", "indexNext", "waveNext", "innerIndexNext", "innerWaveNext", "instrumentVolume", "volumeMult", "size", "waveform", "beatsPerMinute", "beatsPerSecond", "partsPerSecond", "tickPerSecond", "reset", "filter", "output1", "output2", "lastIndex", "mask", "input1", "input2", "a1", "a2", "b0", "b1", "b2", "ofBar", "beatsPerBar"]
}
