{"version":3,"names":["_a","__awaiter","this","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","apply","TypePresets","sampleLoadingState","constructor","statusTable","urlTable","totalSamples","samplesLoaded","SampleLoadedEvent","Event","super","SampleLoadEvents","EventTarget","sampleLoadEvents","startLoadingSample","url","chipWaveIndex","presetSettings","rawLoopOptions","customSampleRate","sampleLoaderAudioContext","AudioContext","sampleRate","closedSampleLoaderAudioContext","chipWave","Config","chipWaves","rawChipWave","rawChipWaves","rawRawChipWave","rawRawChipWaves","fetch","response","ok","arrayBuffer","Error","decodeAudioData","audioBuffer","samples","centerWave","Array","from","getChannelData","samplesR","numberOfChannels","integratedSamples","performIntegral","integratedSamplesR","length","dispatchEvent","close","catch","error","alert","loadScript","willReloadForCustomSamples","script","document","createElement","src","head","appendChild","addEventListener","event","loadBuiltInSamples","set","defaultIntegratedSamples","defaultSamples","name","expression","isSampled","isPercussion","extraSampleDetune","startIndex","index","integratedChipWave","dictionary","chipWaveSamples","kicksample","snaresample","pianosample","WOWsample","overdrivesample","trumpetsample","saxophonesample","orchhitsample","detatchedviolinsample","synthsample","sonic3snaresample","comeonsample","choirsample","overdrivensample","flutesample","legatoviolinsample","tremoloviolinsample","amenbreaksample","pizzicatoviolinsample","timallengruntsample","tubasample","loopingcymbalsample","kickdrumsample","snaredrumsample","closedhihatsample","foothihatsample","openhihatsample","crashsample","pianoC4sample","liverpadsample","marimbasample","susdotwavsample","wackyboxttssample","peppersteak1","peppersteak2","vinyl","slapbass","hdeboverdrive","sunsoftbass","masculinechoir","femininechoir","southtololoche","harp","panflute","krumhorn","timpani","crowdhey","warioland4brass","warioland4organ","warioland4daow","warioland4hourchime","warioland4tick","kirbykick","kirbysnare","kirbybongo","kirbyclick","funkkick","funksnare","funksnareleft","funksnareright","funktomhigh","funktomlow","funkhihatclosed","funkhihathalfopen","funkhihatopen","funkhihatopentip","funkhihatfoot","funkcrash","funkcrashtip","funkride","chipWaveIndexOffset","chipWaveSample","chronoperc1finalsample","synthkickfmsample","woodclicksample","acousticsnaresample","catpaintboxsample","gameboypaintboxsample","mariopaintboxsample","drumpaintboxsample","yoshipaintboxsample","starpaintboxsample","fireflowerpaintboxsample","dogpaintbox","oinkpaintbox","swanpaintboxsample","facepaintboxsample","console","log","generateSineWave","wave","Float32Array","sineWaveLength","i","Math","sin","PI","generateTriWave","asin","generateTrapezoidWave","drive","max","min","generateSquareWave","phaseWidth","centerPoint","abs","generateSawWave","inverse","generateQuasiSineWave","round","sum","average","push","centerAndNormalizeWave","magn","magnAvg","cumulative","newWave","getPulseWidthRatio","pulseWidth","pulseWidthRange","getDrumWave","inverseRealFourierTransform","scaleElementsByFactor","chipNoises","chipNoiseLength","drumBuffer","newBuffer","random","drawNoiseSpectrum","sqrt","ultraboxnewchipnoiserand","pow","clz32","b3","b4","b5","b6","b0","b1","b2","white","lastOut","waveLength","lowOctave","highOctave","lowPower","highPower","overallSlope","lowIndex","highIndex","retroWave","combinedAmplitude","lerped","log2","amplitude","radians","cos","getArpeggioPitchIndex","pitchCount","useFastTwoNoteArp","arpeggio","arpeggioPattern","arpeggioPatterns","toNameMap","array","effectsIncludeTransition","effects","effectsIncludeChord","effectsIncludePitchShift","effectsIncludeDetune","effectsIncludeVibrato","calculateRingModHertz","sliderHz","sliderHzOffset","ringModHzRange","floor","ringModMinHz","ringModMaxHz","thresholdVal","kneeVal","ratioVal","attackVal","releaseVal","jsonFormat","scales","realName","flags","keys","isWhiteKey","basePitch","blackKeyNameParents","tempoMin","tempoMax","octaveMin","octaveMax","echoDelayRange","echoDelayStepTicks","echoSustainRange","echoShelfHz","echoShelfGain","reverbShelfHz","reverbShelfGain","reverbRange","reverbDelayBufferSize","reverbDelayBufferMask","beatsPerBarMin","beatsPerBarMax","barCountMin","barCountMax","instrumentCountMin","layeredInstrumentCountMax","patternInstrumentCountMax","partsPerBeat","ticksPerPart","ticksPerArpeggio","rhythms","stepsPerBeat","roundUpThresholds","instrumentTypeNames","instrumentTypeHasSpecialInterval","chipBaseExpression","fmBaseExpression","noiseBaseExpression","spectrumBaseExpression","drumsetBaseExpression","harmonicsBaseExpression","pwmBaseExpression","supersawBaseExpression","pickedStringBaseExpression","distortionBaseVolume","bitcrusherBaseVolume","granularOutputLoudnessCompensation","raw","newArray","Object","assign","key","rawChipToIntegrated","firstIndexForSamplesInChipWaveList","pitchFilterMult","isSoft","filterFreqStep","filterFreqRange","filterFreqReferenceSetting","filterFreqReferenceHz","filterFreqMaxHz","filterFreqMinHz","filterGainRange","filterGainCenter","filterGainStep","filterMaxPoints","filterTypeNames","filterMorphCount","filterSimpleCutRange","filterSimplePeakRange","fadeInRange","fadeOutTicks","fadeOutNeutral","drumsetFadeOutTicks","transitions","isSeamless","continues","slides","slideTicks","includeAdjacentPatterns","vibratos","type","delayTicks","vibratoTypes","periodsSeconds","period","arpSpeedScale","unisons","voices","spread","offset","sign","effectNames","effectDisplayNames","effectOrder","mdeffectNames","mdeffectOrder","noteSizeMax","volumeRange","volumeLogScale","gainRangeMult","panCenter","panMax","panDelaySecondsMax","ringModRange","rmHzOffsetCenter","rmHzOffsetMax","rmHzOffsetMin","granularRange","grainSizeMin","grainSizeMax","grainSizeStep","grainRangeMax","grainAmountsMax","granularEnvelopeType","flangerRange","flangerSpeedRange","flangerDepthRange","flangerFeedbackRange","flangerMaxDelay","flangerPeriodMult","flangerVolumeMult","chorusRange","chorusPeriodSeconds","chorusDelayRange","chorusDelayOffsets","chorusPhaseOffsets","chorusMaxDelay","concat","reduce","x","y","chords","customInterval","arpeggiates","strumParts","singleTone","maxChordSize","operatorCount","maxPitchOrOperatorCount","algorithms","carrierCount","associatedCarrier","modulatedBy","algorithms6Op","operatorCarrierInterval","operatorAmplitudeMax","operatorFrequencies","mult","hzOffset","amplitudeSign","envelopes","speed","newEnvelopes","feedbacks","indices","feedbacks6Op","spectrumNoiseLength","spectrumBasePitch","spectrumControlPoints","spectrumControlPointsPerOctave","spectrumControlPointBits","spectrumMax","harmonicsControlPoints","harmonicsRendered","harmonicsRenderedForPickedString","harmonicsControlPointBits","harmonicsMax","harmonicsWavelength","pulseWidthStepPower","supersawVoiceCount","supersawDynamismMax","supersawSpreadMax","supersawShapeMax","pitchChannelCountMin","pitchChannelCountMax","noiseChannelCountMin","noiseChannelCountMax","modChannelCountMin","modChannelCountMax","noiseInterval","pitchesPerOctave","drumCount","pitchOctaves","modCount","maxPitch","maximumTonesPerChannel","justIntonationSemitones","map","pitchShiftRange","pitchShiftCenter","detuneCenter","detuneMax","detuneMin","songDetuneMin","songDetuneMax","unisonVoicesMin","unisonVoicesMax","unisonSpreadMin","unisonSpreadMax","unisonOffsetMin","unisonOffsetMax","unisonExpressionMin","unisonExpressionMax","unisonSignMin","unisonSignMax","sineWaveMask","sineWave","perEnvelopeSpeedIndices","perEnvelopeSpeedToIndices","perEnvelopeBoundMin","perEnvelopeBoundMax","randomEnvelopeSeedMax","randomEnvelopeStepsMax","pickedStringDispersionCenterFreq","pickedStringDispersionFreqScale","pickedStringDispersionFreqMult","pickedStringShelfHz","distortionRange","stringSustainRange","stringDecayRate","enableAcousticSustain","sustainTypeNames","bitcrusherFreqRange","bitcrusherOctaveStep","bitcrusherQuantizationRange","maxEnvelopeCount","defaultAutomationRange","instrumentAutomationTargets","computeIndex","displayName","interleave","isFilter","maxCount","effect","mdeffect","compatibleInstruments","operatorWaves","pwmOperatorWaves","barEditorHeight","modulators","pianoName","maxRawVol","newNoteVol","forSong","convertRealFactor","associatedEffect","associatedMDEffect","maxIndex","promptName","promptDesc","ceil","invertSliderIndicator","Deque","_capacity","_buffer","undefined","_mask","_offset","_count","pushFront","element","_expandCapacity","pushBack","popFront","popBack","peakFront","peakBack","count","get","remove","oldBuffer","size","test","navigator","userAgent","EditorConfig","valueToPreset","presetValue","categoryIndex","presetIndex","presetCategories","presets","midiProgramToPresetValue","program","category","preset","generalMidi","midiProgram","nameToPresetValue","presetName","instrumentToPreset","instrument","version","versionDisplayName","releaseNotesURL","isOnMac","platform","ctrlSymbol","ctrlName","customType","settings","eqFilter","transition","fadeInSeconds","chord","unison","cutoffHz","linearGain","vibrato","isNoise","filterCutoffHz","filterResonance","filterEnvelope","reverb","dynamism","shape","algorithm","feedbackType","feedbackAmplitude","operators","frequency","target","envelope","eqFilterType","eqSimpleCut","eqSimplePeak","envelopeSpeed","discreteEnvelope","panDelay","waveform","customChipWave","noteFilter","harmonics","stringSustain","stringSustainType","feedbackEnvelope","volume","fastTwoNoteArp","arpeggioSpeed","noteFilterType","noteSimpleCut","noteSimplePeak","pan","pitchEnvelopeStart","pitchEnvelopeEnd","perEnvelopeSpeed","perEnvelopeLowerBound","perEnvelopeUpperBound","isDrum","midiSubharmonicOctaves","interval","bitcrusherOctave","bitcrusherQuantization","distortion","vibratoDepth","vibratoDelay","vibratoSpeed","vibratoType","chorus","eqSubFilters0","noteSubFilters0","spectrum","pulseEnvelope","noteSubFilters1","eqSubFilters1","drums","pitchShiftSemitones","clicklessTransition","echoSustain","echoDelayBeats","customChipWaveIntegral","detuneCents","aliases","eqSubFilters4","noteSubFilters2","noteSubFilters4","pitchEnvelopeInverse","decimalOffset","pitchEnvelopeStart0","pitchEnvelopeEnd0","envelopeInverse0","pitchEnvelopeStart1","pitchEnvelopeEnd1","envelopeInverse1","pitchEnvelopeStart2","pitchEnvelopeEnd2","envelopeInverse2","eqSubFilters2","eqSubFilters3","isUsingAdvancedLoopControls","chipWaveLoopStart","chipWaveLoopEnd","chipWaveLoopMode","chipWavePlayBackwards","chipWaveStartOffset","customAlgorithm","mods","steps","seed","granular","grainSize","grainAmounts","grainRange","discrete","unisonVoices","unisonSpread","unisonOffset","unisonExpression","unisonSign","monoChordTone","ringMod","ringModHz","ringModWaveformIndex","Channel","octave","instruments","patterns","bars","muted","visible","color","FilterCoefficients","a","b","order","linearGain0thOrder","lowPass1stOrderButterworth","cornerRadiansPerSample","g","tan","a0","lowPass1stOrderSimplified","highPass1stOrderButterworth","highShelf1stOrder","shelfLinearGain","sqrtGain","allPass1stOrderInvertPhaseAbove","allPass1stOrderFractionalDelay","delay","lowPass2ndOrderButterworth","peakLinearGain","alpha","lowPass2ndOrderSimplified","feedback","highPass2ndOrderButterworth","highShelf2ndOrder","slope","A","c","Aplus","Aminus","sqrtA2Alpha","peak2ndOrder","bandWidthScale","bandWidth","FrequencyResponse","real","imag","denom","analyze","filter","radiansPerSample","analyzeComplex","realZ1","imagZ1","realNum","imagNum","realDenom","imagDenom","realZ","imagZ","imagTemp","magnitude","angle","atan2","DynamicBiquadFilter","a1","a2","a1Delta","a2Delta","b0Delta","b1Delta","b2Delta","output1","output2","useMultiplicativeInputCoefficients","resetOutput","loadCoefficientsWithGradient","start","end","deltaRate","warpInfinityToNyquist","atan","FilterSettings","controlPoints","controlPointCount","reset","addPoint","freqSetting","gainSetting","controlPoint","FilterControlPoint","toJsonObject","filterArray","point","getHz","getLinearGain","fromJsonObject","filterObject","pointObject","indexOf","freq","getRoundedSettingValueFromHz","gain","getRoundedSettingValueFromLinearGain","filtersCanMorph","filterA","filterB","lerpFilters","pos","lerpedFilter","convertLegacySettings","legacyCutoffSetting","legacyResonanceSetting","legacyEnv","legacyFilterMaxRadians","legacyFilterMax","resonant","firstOrder","cutoffAtMax","legacyFilterCutoffRange","envDecays","standardSampleRate","legacyHz","legacyRadians","extraOctaves","targetRadians","curvedHz","finalHz","getHzFromSettingValue","finalRadians","legacyFilter","legacyFilterGainAtNewRadians","logGain","convertedGain","intendedGain","invertedGain","curvedRadians","legacyFilterGain","convertLegacySettingsForSynth","allowFirstOrder","getSettingValueFromHz","hz","peakMult","power","neutral","interpolatedPower","toCoefficients","freqMult","getVolumeCompensationMult","gainPow","freqRelativeTo8khz","warpedFreq","warpedOctave","distanceFromCenter","freqLoudness","clamp","val","validateRange","parseFloatWithDefault","s","defaultValue","parseFloat","Number","isNaN","parseIntWithDefault","parseInt","fadeInSettingToSeconds","setting","secondsToFadeInSetting","seconds","fadeOutSettingToTicks","ticksToFadeOutSetting","ticks","lower","upper","detuneToCents","detune","fittingPowerOfTwo","EnvelopeSettings","isNoiseEnvelope","tempEnvelopeSpeed","tempEnvelopeLowerBound","tempEnvelopeUpperBound","envelopeObject","format","isTremolo2","Boolean","Effect","wetDryMix","send","eqFilterSimpleCut","eqFilterSimplePeak","eqSubFilters","panMode","bitcrusherFreq","ringModulation","ringModulationHz","ringModPulseWidth","ringModHzOffset","flanger","flangerSpeed","flangerDepth","flangerFeedback","echoDelay","echoPingPong","Operator","copy","other","CustomAlgorithm","fromPreset","carriers","modulation","j","CustomFeedBack","inIndices","SpectrumWave","isNoiseChannel","hash","isHarmonic","markCustomWaveDirty","hashMult","HarmonicsWave","Instrument","isModChannel","chipWaveInStereo","chipNoise","noteFilterSimpleCut","noteFilterSimplePeak","noteSubFilters","fadeIn","fadeOut","envelopeCount","pitchShift","effectCount","mdeffects","legacyTieOver","supersawDynamism","supersawSpread","supersawShape","algorithm6Op","feedbackType6Op","customFeedbackType","harmonicsWave","drumsetEnvelopes","drumsetSpectrumWaves","modChannels","modInstruments","modFilterTypes","modEnvelopeNumbers","invalidModulators","isNoiseInstrument","mod","spectrumWave","wavePrev","setTypeAndReset","legacySettings","forceSimpleFilter","filterCutoff","legacyFilterEnv","legacyPulseEnv","legacyOperatorEnvelopes","operatorEnvelopes","legacyFeedbackEnv","noCarriersControlledByNoteSize","allCarriersControlledByNoteSize","noteSizeControlsSomethingElse","addEnvelope","instrumentObject","getChord","getDrumsetEnvelope","operatorArray","operator","customFeedback","Float64Array","useSlowerRhythm","legacyGlobalReverb","toLowerCase","isArray","transitionProperty","binary","seamless","sudden","hard","smooth","soft","slide","chordProperty","legacyChordNames","harmony","unisonProperty","legacyChorusNames","union","fifths","octaves","potentialPitchShift","vibratoProperty","legacyVibratoNames","findIndex","legacyEnvelopeNames","custom","steady","getEnvelope","drum","legacyWaveNames","triangle","square","sawtooth","spiky","plateau","modboxWaveNames","sax","guitar","viola","brass","lyre","piccolo","squaretooth","flatline","sandboxWaveNames","euphonium","recorder","contrabass","zefboxWaveNames","squaretal","sawtal","pulse","miscWaveNames","test1","intense","paandorasboxWaveNames","kick","snare","piano1","WOW","overdrive","trumpet","saxophone","orchestrahit","synth","sonic3snare","choir","overdriveguitar","flute","tuba","loopingcymbal","standardkick","standardsnare","closedhihat","foothihat","openhihat","crashcymbal","pianoC4","marimba","susdotwav","wackyboxtts","rawName","table","potentialChipWaveIndex","feedback6Op","synthboxLegacyFeedbacks","synthboxFeedbackType","operatorObject","newEffect","addEffect","filterCutoffMaxHz","filterCutoffRange","filterResonanceRange","LN2","legacyToCutoff","legacyToEnvelope","filterNames","oldFilterNames","envelopeArray","tempEnvelope","envelopeInverse","getLargestControlPointCount","forNoteFilter","largest","effectIndex","frequencyFromPitch","pitch","removeEffect","splice","effectsIncludeType","makeEmpty","supportsEnvelopeTarget","envelopeSettings","automationTarget","useControlPointCount","clearInvalidEnvelopeTargets","envelopeIndex","getTransition","getFadeInSeconds","getFadeOutTicks","makeNotePin","time","Note","fadeout","pitches","pins","continuesLastPattern","pickMainInterval","longestFlatIntervalDuration","mainInterval","pinIndex","pinA","pinB","duration","loudestSize","pin","clone","newNote","getEndPinIndex","part","endPinIndex","Pattern","notes","cloneNotes","note","song","channel","noteArray","volumeCap","getVolumeCapForSetting","pointArray","useVol","tick","rhythm","pitchBend","forMod","noteObject","points","patternObject","patternInstruments","importedPartsPerBeat","instrumentCount","getMaxInstrumentsPerPatternForChannel","maxNoteCount","beatsPerBar","k","startInterval","lowestPitch","highestPitch","oldMin","newMin","old","encode32BitNumber","buffer","base64IntToCharCode","decode32BitNumber","compressed","charIndex","base64CharCodeToInt","charCodeAt","encodeUnisonSettings","v","o","cleanS","cleanSDivided","cleanO","cleanODivided","cleanE","cleanI","convertLegacyKeyToKeyAndOctave","rawKeyIndex","BitFieldReader","source","stopIndex","_bits","_readIndex","read","bitCount","readLongTail","minValue","minBits","numBits","readPartDuration","readLegacyPartDuration","readPinCount","readPitchInterval","BitFieldWriter","_index","clear","write","writeLongTail","writePartDuration","writePinCount","writePitchInterval","encodeBase64","lengthBase64","Song","string","scaleCustom","channels","limitDecay","limitRise","compressionThreshold","limitThreshold","compressionRatio","limitRatio","masterGain","inVolumeCap","outVolumeCap","outVolumeCapL","outVolumeCapR","getNewNoteVolume","isMod","modChannel","modInstrument","vol","currentIndex","tempoIndex","tempo","chorusIndex","reverbIndex","gainIndex","panningIndex","panDelayIndex","distortionIndex","detuneIndex","vibratoDepthIndex","vibratoSpeedIndex","vibratoDelayIndex","arpSpeedIndex","bitCrushIndex","freqCrushIndex","echoIndex","echoDelayIndex","echoPingPongIndex","pitchShiftIndex","ringModIndex","ringModHertzIndex","granularIndex","grainAmountIndex","grainSizeIndex","grainRangeIndex","envSpeedIndex","perEnvSpeedIndex","perEnvLowerIndex","perEnvUpperIndex","instrumentIndex","getVolumeCap","modulator","cap","modSetting","filterType","fromBase64String","initToDefault","getChannelCount","pitchChannelCount","noiseChannelCount","modChannelCount","getMaxInstrumentsPerChannel","layeredInstruments","getMaxInstrumentsPerPattern","channelIndex","getChannelIsNoise","getChannelIsMod","andResetChannels","scale","loopStart","loopLength","barCount","patternsPerChannel","title","pattern","bar","toBase64String","bits","_variant","_latestSlarmoosBoxVersion","encodedSongTitle","encodeURIComponent","usingSubFilterBitfield","encodedChannelName","harmonicsBits","encodedLoopMode","encodedReleaseMode","spectrumBits","checkboxValues","neededBits","shapeBits","bitsPerNoteSize","getNeededBits","maxInstrumentsPerPattern","neededInstrumentCountBits","neededInstrumentIndexBits","neededModInstrumentIndexBits","modFilter","modEnvelope","status","octaveOffset","lastPitch","recentPitches","recentShapes","curPart","shapePart","startPitch","currentPitch","pitchBends","nextPitch","shapeString","String","fromCharCode","shapeIndex","unshift","pop","allPitches","pitchIndex","pitchIter","stringLength","digits","prototype","maxApplyArgs","customSamplesStr","customSamples","join","slice","_envelopeFromLegacyIndex","legacyIndex","_clearSamples","JSON","parse","substring","variantTest","fromBeepBox","fromJummBox","fromGoldBox","fromUltraBox","fromSlarmoosBox","fromTheepBox","_latestBeepboxVersion","_oldestBeepboxVersion","_latestJummBoxVersion","_oldestJummBoxVersion","_latestGoldBoxVersion","_oldestGoldBoxVersion","_latestUltraBoxVersion","_oldestUltraBoxVersion","_oldestSlarmoosBoxVersion","beforeTwo","beforeThree","beforeFour","beforeFive","beforeSix","beforeSeven","beforeEight","beforeNine","willLoadLegacySamplesForOldSongs","compressed_array","replaceAll","split","shift","_restoreChipWaveListToDefault","willLoadLegacySamples","willLoadNintariboxSamples","willLoadMarioPaintboxSamples","customSampleUrls","customSamplePresets","parseOldSyntax","_parseAndConfigureCustomSample","customSamplePresetsMap","legacySettingsCache","command","instrumentChannelIterator","instrumentIndexIterator","useSlowerArpSpeed","songNameLength","decodeURIComponent","channelCount","instrumentsPerChannel","instrumentsFlagBits","rhythmMap","newRhythm","instrumentType","legacyWaves","chipWaveReal","chipWaveCounter","typeCheck","originalControlPointCount","originalSubfilterControlPointCount","sampleLoopInfoEncodedLength","sampleLoopInfoEncoded","sampleLoopInfo","atob","entry","info","URL","pregoldToEnvelope","aa","sustainValue","legacyEffects","legacyEnvelopes","originalValue","unisonLength","unisonSpreadNegative","unisonOffsetNegative","unisonExpressionNegative","unisonSignNegative","legacyEffectTypes","bit","nextValue","restoreLimiterDefaults","channelNameLength","carrierCountTemp","tempModArray","chipWaveForCompat","freqToGold3","freqToUltraBox","jummToUltraEnvelope","slarURL3toURL4Envelope","envelopeDiscrete","updatedEnvelopes","pitchEnvelopeCompact","instrumentPitchEnvelopeStart","instrumentPitchEnvelopeEnd","instrumentEnvelopeInverse","pre3To3g","jummToG","byteCount","subStringLength","bitStringLength","largerChords","recentPitchBitLength","recentPitchLength","bitStringLengthLength","songReverbChannel","songReverbInstrument","songReverbIndex","shouldCorrectTempoMods","jummboxTempoMin","jumfive","modChannelLength","modInstrumentLength","detuneScaleNotes","newPattern","newNotes","noteCount","useOldShape","startOffset","pinCount","initialSize","bendCount","pinObj","intervalIter","noteIsForTempoMod","tempoOffset","isBackwards","restLength","patternIndex","lowestPart","chn","window","location","setTimeout","reload","_isProperUrl","defaultIntegratedSamplesL","defaultIntegratedSamplesR","defaultSamplesL","defaultSamplesR","customSampleUrlIndex","urlSliced","isCustomPercussive","customRootKey","presetIsUsingAdvancedLoopControls","presetChipWaveLoopStart","presetChipWaveLoopEnd","presetChipWaveStartOffset","presetChipWaveLoopMode","presetChipWavePlayBackwards","presetChipWaveInStereo","parsedSampleOptions","optionsStartIndex","optionsEndIndex","rawOptions","rawOption","optionCode","charAt","optionData","parsedUrl","sliceForSampleRate","sliceForRootKey","urlWithNamedOptions","namedOptions","pathname","replace","isCustomSampled","rootKey","customSamplePresetSettings","customSamplePreset","enableIntro","loopCount","enableOutro","channelArray","instrumentArray","patternArray","sequenceArray","l","channelObject","sequence","_format","customScale","keyOctave","introBars","loopBars","ticksPerBeat","beatsPerMinute","songEq","jsonObject","shouldLoadLegacySamples","instrumentObjects","waveName","names","oldNames","veryOldNames","includes","oldScaleNames","enigma","scaleName","letter","toUpperCase","symbol","C","D","E","F","G","B","maxInstruments","maxPatterns","maxBars","newPitchChannels","newNoiseChannels","newModChannels","getPattern","getBeatsPerMinute","maxValue","ChannelState","singleSeamlessInstrument","factor","countBits","n","isPowerOf2","fullArrayLength","totalPasses","pass","subStride","midSubStride","stride","radiansIncrement","cosIncrement","sinIncrement","oscillatorMultiplier","startIndexA","midIndexA","startIndexB","midIndexB","realStartA","imagStartB","cPrev","sPrev","indexA0","indexA1","indexB0","indexB1","real0","real1","imag0","imag1","tempA","tempB","cTemp","sTemp","index1","index2","index3","imag2","imag3","finalShift","temp","reverseIndexBits","Grain","delayLinePosition","ageInSamples","maxAgeInSamples","parabolicEnvelopeAmplitude","parabolicEnvelopeSlope","parabolicEnvelopeCurve","rcbEnvelopeAmplitude","rcbEnvelopeAttackIndex","rcbEnvelopeReleaseIndex","rcbEnvelopeSustain","initializeParabolicEnvelope","durationInSamples","invDuration","invDurationSquared","updateParabolicEnvelope","initializeRCBEnvelope","updateRCBEnvelope","addDelay","EffectState","eqFilterVolume","eqFilterVolumeDelta","granularMix","granularMixDelta","granularDelayLineL","granularDelayLineR","granularDelayLineIndex","granularMaximumDelayTimeInSeconds","usesRandomGrainLocation","granularDelayLineDirty","computeGrains","ringModMix","ringModMixDelta","ringModPhase","ringModPhaseDelta","ringModPhaseDeltaScale","ringModMixFade","ringModMixFadeDelta","distortionDelta","distortionDrive","distortionDriveDelta","distortionFractionalInputL1","distortionFractionalInputL2","distortionFractionalInputL3","distortionFractionalInputR1","distortionFractionalInputR2","distortionFractionalInputR3","distortionPrevInputL","distortionPrevInputR","distortionNextOutputL","distortionNextOutputR","bitcrusherPrevInputL","bitcrusherPrevInputR","bitcrusherCurrentOutputL","bitcrusherCurrentOutputR","bitcrusherPhase","bitcrusherPhaseDelta","bitcrusherPhaseDeltaScale","bitcrusherScale","bitcrusherScaleScale","bitcrusherFoldLevel","bitcrusherFoldLevelScale","eqFiltersL","eqFiltersR","eqFilterCount","initialEqFilterInputL1","initialEqFilterInputR1","initialEqFilterInputL2","initialEqFilterInputR2","gainDelta","panningDelayLineL","panningDelayLineR","panningDelayPos","panningVolumeL","panningVolumeR","panningVolumeDeltaL","panningVolumeDeltaR","panningOffsetL","panningOffsetR","panningOffsetDeltaL","panningOffsetDeltaR","panningMode","flangerDelayLineL","flangerDelayLineR","flangerDelayLineDirty","flangerDelayPos","flangerDelta","flangerSpeedDelta","flangerDepthDelta","flangerFeedbackDelta","flangerPhase","chorusDelayLineL","chorusDelayLineR","chorusDelayLineDirty","chorusDelayPos","chorusPhase","chorusVoiceMult","chorusVoiceMultDelta","chorusCombinedMult","chorusCombinedMultDelta","echoDelayLineL","echoDelayLineR","echoDelayLineDirty","echoDelayPosL","echoDelayPosR","echoDelayOffsetStart","echoDelayOffsetEnd","echoDelayOffsetRatio","echoDelayOffsetRatioDelta","echoMult","echoMultDelta","echoShelfA1","echoShelfB0","echoShelfB1","echoShelfSampleL","echoShelfSampleR","echoShelfPrevInputL","echoShelfPrevInputR","reverbDelayLine","reverbDelayLineDirty","reverbDelayPos","reverbMult","reverbMultDelta","reverbShelfA1","reverbShelfB0","reverbShelfB1","reverbShelfSample0","reverbShelfSample1","reverbShelfSample2","reverbShelfSample3","reverbShelfPrevInput0","reverbShelfPrevInput1","reverbShelfPrevInput2","reverbShelfPrevInput3","granularGrains","granularMaximumGrains","granularGrainsLength","allocateNecessaryBuffers","samplesPerTick","panningDelayBufferSize","chorusDelayBufferSize","flangerDelayBufferSize","allocateEchoBuffers","granularDelayLineSizeInSeconds","granularDelayLineSizeInSamples","samplesPerSecond","oldGrainsLength","safeEchoDelayBufferSize","newDelayLineL","newDelayLineR","oldMask","deactivate","compute","instrumentState","roundedSamplesPerTick","tone","envelopeStarts","envelopeEnds","usesGranular","usesRingModulation","usesDistortion","usesBitcrusher","usesGain","usesPanning","usesFlanger","usesChorus","usesEcho","usesReverb","usesEQFilter","isModActive","getModValue","granularMixEnd","iterations","granularMinGrainSizeInMilliseconds","granularGrainSizeInSeconds","granularGrainSizeInSamples","granularDelayLineLength","grainIndex","grain","minDelayTimeInSeconds","maxDelayTimeInSeconds","useDistortionStart","useDistortionEnd","distortionSliderStart","distortionSliderEnd","distortionStart","distortionEnd","distortionDriveStart","distortionDriveEnd","freqSettingStart","freqSettingEnd","quantizationSettingStart","quantizationSettingEnd","freqStart","freqEnd","phaseDeltaStart","phaseDeltaEnd","scaleStart","scaleEnd","foldLevelStart","foldLevelEnd","eqFilterSettingsStart","eqFilterSettingsEnd","startPoint","startSimpleFreq","startSimpleGain","endSimpleFreq","endSimpleGain","filterChanges","endPoint","Synth","tempFilterStartCoefficients","tempFilterEndCoefficients","eqFilterSettings","tmpEqFilterStart","tmpEqFilterEnd","eqFilterVolumeStart","eqFilterVolumeEnd","panEnvelopeStart","panEnvelopeEnd","usePanStart","usePanEnd","panStart","panEnd","volumeStartL","volumeStartR","volumeEndL","volumeEndR","maxDelaySamples","usePanDelayStart","usePanDelayEnd","delayStart","delayEnd","delayStartL","delayStartR","delayEndL","delayEndR","gainEnvelopeStart","gainEnvelopeEnd","useGainStart","useGainEnd","gainStart","gainEnd","chorusEnvelopeStart","chorusEnvelopeEnd","useChorusStart","useChorusEnd","chorusStart","chorusEnd","chorusCombinedMultStart","chorusCombinedMultEnd","flangerEnvelopeStart","flangerEnvelopeEnd","useFlangerStart","useFlangerEnd","flangerStart","flangerEnd","flangerSpeedEnvelopeStart","flangerSpeedEnvelopeEnd","useFlangerSpeedStart","useFlangerSpeedEnd","flangerSpeedStart","flangerSpeedEnd","flangerDepthEnvelopeStart","flangerDepthEnvelopeEnd","useFlangerDepthStart","useFlangerDepthEnd","flangerDepthStart","flangerDepthEnd","flangerFeedbackEnvelopeStart","flangerFeedbackEnvelopeEnd","useFlangerFeedbackStart","useFlangerFeedbackEnd","flangerFeedbackStart","flangerFeedbackEnd","useRingModStart","useRingModEnd","useRingModEnvelopeStart","useRingModEnvelopeEnd","useRingModHzStart","useRingModHzEnd","useRingModHzEnvelopeStart","useRingModHzEnvelopeEnd","ringModStart","ringModEnd","ringModPhaseDeltaStart","ringModPhaseDeltaEnd","maxEchoMult","averageEchoDelaySeconds","echoSustainEnvelopeStart","echoSustainEnvelopeEnd","useEchoSustainStart","useEchoSustainEnd","echoMultStart","echoMultEnd","echoDelayEnvelopeStart","echoDelayEnvelopeEnd","useEchoDelayStart","useEchoDelayEnd","tmpEchoDelayOffsetStart","tmpEchoDelayOffsetEnd","shelfRadians","maxReverbMult","reverbEnvelopeStart","reverbEnvelopeEnd","useReverbStart","useReverbEnd","reverbStart","reverbEnd","tonesAddedInThisTick","flushingDelayLines","totalDelaySamples","attenuationThreshold","halfLifeMult","delayDuration","attenuationPerSecond","echoDuration","averageMult","averageReverbDelaySeconds","reverbDuration","PRIME32_1","PRIME32_2","PRIME32_3","PRIME32_4","PRIME32_5","encoder","xxHash32","input","TextEncoder","encode","acc","accN","limit","lane","laneN0","laneN1","laneNP","acc0","acc1","EnvelopeComputer","noteSecondsStart","noteSecondsStartUnscaled","noteSecondsEnd","noteSecondsEndUnscaled","noteTicksStart","noteTicksEnd","noteSizeStart","noteSizeEnd","prevNoteSize","nextNoteSize","_noteSizeFinal","prevNoteSecondsStart","prevNoteSecondsStartUnscaled","prevNoteSecondsEnd","prevNoteSecondsEndUnscaled","prevNoteTicksStart","prevNoteTicksEnd","_prevNoteSizeFinal","tickTimeEnd","drumsetFilterEnvelopeStart","drumsetFilterEnvelopeEnd","prevSlideStart","prevSlideEnd","nextSlideStart","nextSlideEnd","prevSlideRatioStart","prevSlideRatioEnd","nextSlideRatioStart","nextSlideRatioEnd","startPinTickAbsolute","startPinTickDefaultPitch","startPinTickPitch","_modifiedEnvelopeIndices","_modifiedEnvelopeCount","lowpassCutoffDecayVolumeCompensation","computeEnvelopes","currentPart","tickTimeStart","tickTimeStartReal","secondsPerTick","timeScale","secondsPerTickUnscaled","atNoteStart","forceContinueAtStart","tickTimeEndReal","beatsPerTick","beatTimeStart","beatTimeEnd","passedEndOfNote","startPin","endPin","startPinTick","computeTicksSinceStart","getPitchValue","endPinTick","ratioStart","ratioEnd","noteStartTick","noteStartPart","noteEndTick","noteEndPart","maximumSlideTicks","prevNote","nextNote","forceContinueAtEnd","usedNoteSize","targetIndex","isDiscrete","globalEnvelopeSpeed","timeSinceStart","defaultPitch","secondsPerTickScaled","computePitchEnvelope","envelopeStart","computeEnvelope","envelopeEnd","filterSettings","tmpNoteFilterStart","getLowpassCutoffDecayVolumeCompensation","clearEnvelopes","unspedTime","beats","noteSize","isDrumset","notePinStart","boundAdjust","noteSizeToVolumeMult","hashMax","timeHash","pitchHash","noteHash","weightedAverage","trap","saw","tri","attack","lin","calculateBends","monophonic","arpTime","tonePitch","lastInterval","startNote","endNote","envelopeLowerBound","envelopeUpperBound","range","computeDrumsetEnvelopes","drumsetFilterEnvelope","beatsPerPart","partTimeStart","partTimeEnd","computeDrumsetEnvelope","SpectrumWaveState","_hash","getCustomWave","lowestOctave","pitchTweak","controlPointToOctave","value1","value2","octave1","octave2","HarmonicsWaveState","_generatedForType","combinedControlPointAmplitude","harmonicIndex","harmonicFreq","controlValue","normalizedValue","performIntegralOld","PickedString","delayLine","allPassG","allPassGDelta","sustainFilterA1","sustainFilterA1Delta","sustainFilterA2","sustainFilterA2Delta","sustainFilterB0","sustainFilterB0Delta","sustainFilterB1","sustainFilterB1Delta","sustainFilterB2","sustainFilterB2Delta","delayIndex","allPassSample","allPassPrevInput","sustainFilterSample","sustainFilterPrevOutput2","sustainFilterPrevInput1","sustainFilterPrevInput2","fractionalDelaySample","prevDelayLength","delayResetOffset","update","stringIndex","stringDecayStart","stringDecayEnd","sustainType","allPassCenter","phaseDeltas","phaseDeltaScale","phaseDeltaScales","radiansPerSampleStart","radiansPerSampleEnd","centerHarmonicStart","centerHarmonicEnd","allPassRadiansStart","allPassRadiansEnd","decayCurveStart","decayCurveEnd","register","registerShelfCenter","registerLowpassCenter","decayRateStart","decayRateEnd","expressionDecayStart","expressionDecayEnd","tempFrequencyResponse","allPassGStart","allPassPhaseDelayStart","allPassGEnd","allPassPhaseDelayEnd","brightnessType","shelfGainStart","shelfGainEnd","cornerHardness","lowpass1stOrderCutoffRadiansStart","lowpass1stOrderCutoffRadiansEnd","lowpass2ndOrderCutoffRadiansStart","lowpass2ndOrderCutoffRadiansEnd","lowpass2ndOrderGainStart","lowpass2ndOrderGainEnd","sustainFilterA1Start","sustainFilterA2Start","sustainFilterB0Start","sustainFilterB1Start","sustainFilterB2Start","sustainFilterPhaseDelayStart","sustainFilterA1End","sustainFilterA2End","sustainFilterB0End","sustainFilterB1End","sustainFilterB2End","sustainFilterPhaseDelayEnd","periodLengthStart","periodLengthEnd","minBufferLength","delayLength","delayLengthEnd","delayLengthDelta","pitchChanged","reinitializeImpulse","likelyMaximumLength","newDelayLine","oldDelayBufferMask","startCopyingFromIndex","delayBufferMask","startImpulseFrom","startZerosFrom","stopZerosAt","impulseWave","waveL","impulseWaveLength","impulsePhaseDelta","fadeDuration","startImpulseFromSample","stopImpulseAt","stopImpulseAtSample","impulsePhase","prevWaveIntegral","impulsePhaseInt","nextWaveIntegral","phaseRatio","sample","combinedFade","curvedFade","InstrumentState","awake","computed","deactivateAfterThisTick","attentuationProgress","flushedSamples","activeTones","activeModTones","releasedTones","liveInputTones","synthesizer","waveR","isStereo","noisePitchFilterMult","volumeScale","vibratoTime","nextVibratoTime","envelopeTime","mixVolume","mixVolumeDelta","delayInputMult","delayInputMultDelta","envelopeComputer","resetAllEffects","getInstrumentSynthFunction","updateWaves","getTicksIntoBar","getCurrentPart","envelopeSpeeds","useEnvelopeSpeed","isInteger","instrumentVolumeToVolumeMult","mixVolumeEnd","startVal","endVal","delayInputMultStart","delayInputMultEnd","progressInTick","progressAtEndOfTick","_drumsetIndexToSpectrumOctave","getDrumsetWave","drumsetIndexReferenceDelta","events","activeEvents","listeners","raise","eventType","eventData","extraEventData","listen","callback","unlisten","lisen","unlistenAll","epsilon","Tone","fill","chordSize","drumsetPitch","prevNotePitchIndex","nextNotePitchIndex","freshlyAllocated","isOnLastTick","ticksSinceReleased","liveInputSamplesHeld","noiseSample","noiseSampleA","noiseSampleB","stringSustainStart","stringSustainEnd","noiseSamples","phases","directions","chipWaveCompletions","chipWavePrevWavesL","chipWavePrevWavesR","chipWaveCompletionsLastWaveL","chipWaveCompletionsLastWaveR","expressionDelta","operatorExpressions","operatorExpressionDeltas","prevPitchExpressions","prevVibrato","prevStringDecay","pulseWidthDelta","supersawDynamismDelta","supersawUnisonDetunes","supersawShapeDelta","supersawDelayLength","supersawDelayLengthDelta","supersawDelayLine","supersawDelayIndex","supersawPrevPhaseDelta","pickedStrings","noteFiltersL","noteFiltersR","noteFilterCount","initialNoteFilterInputL1","initialNoteFilterInputR1","initialNoteFilterInputL2","initialNoteFilterInputR2","specialIntervalExpressionMult","feedbackOutputs","feedbackMult","feedbackDelta","stereoVolumeLStart","stereoVolumeRStart","stereoVolumeLDelta","stereoVolumeRDelta","stereoDelayStart","stereoDelayEnd","stereoDelayDelta","customVolumeStart","customVolumeEnd","filterResonanceStart","filterResonanceDelta","isFirstOrder","pickedString","syncSongState","channelState","initModFilters","tmpNoteFilterEnd","warmUpSynthesizer","getSamplesPerTick","dummyArray","isPlayingSong","synthesize","computeLatestModValues","latestModTimes","latestModInsTimes","modValues","nextModValues","modInsValues","nextModInsValues","heldMods","beat","currentBar","instrumentIdx","latestPinParts","latestPinValues","partsInBar","findPartsInBar","pinIdx","transitionLength","toNextBarLength","deltaVolume","songFilterParam","tgtSong","setModValue","usedChannels","usedInstruments","tgtPattern","eqFilterParam","noteFilterParam","modulatorAdjust","tgtInstrument","tgtEffect","determineInvalidModulators","tgtInstrumentList","str","operatorAmplitudeCurve","playing","recording","isRecording","playhead","playheadInternal","remainder","tickSampleCountdown","isAtStartOfTick","prevBar","getSamplesPerBar","getTotalSamples","loop","startBar","endBar","hasTempoMods","hasNextBarMods","prevTempo","latestTempoPin","latestTempoValue","ended","foundMod","find","sort","getSamplesPerTickSpecificBPM","tickLength","prevPinTempo","currPinTempo","bpmScalar","getTotalBars","useLoopCount","loopRepeatCount","preferLowerLatency","anticipatePoorPerformance","liveInputDuration","liveBassInputDuration","liveInputStarted","liveBassInputStarted","liveInputPitches","liveBassInputPitches","liveInputChannel","liveBassInputChannel","liveInputInstruments","liveBassInputInstruments","oscRefreshEventTimer","oscEnabled","enableMetronome","countInMetronome","renderingSong","wantToSkip","nextBar","isAtEndOfTick","liveInputEndTime","browserAutomaticallyClearsAudioBuffer","tempDrumSetControlPoint","loopBarStart","loopBarEnd","tonePool","tempMatchedPitchTones","startedMetronome","metronomeSamplesRemaining","metronomeAmplitude","metronomePrevAmplitude","metronomeFilter","songEqFilterVolume","songEqFilterVolumeDelta","songEqFiltersL","songEqFiltersR","songEqFilterCount","initialSongEqFilterInput1L","initialSongEqFilterInput2L","initialSongEqFilterInput1R","initialSongEqFilterInput2R","tempInstrumentSampleBufferL","tempInstrumentSampleBufferR","audioCtx","scriptNode","audioProcessCallback","audioProcessingEvent","outputBuffer","outputDataL","outputDataR","performance","now","deactivateAudio","computeDelayBufferSizes","setSong","panningDelayBufferMask","flangerDelayBufferMask","chorusDelayBufferMask","activateAudio","bufferSize","latencyHint","webkitAudioContext","createScriptProcessor","createJavaScriptNode","onaudioprocess","channelCountMode","channelInterpretation","connect","destination","resume","disconnect","maintainLiveInput","play","pause","startRecording","resetEffects","freeAllTones","volumeStart","volumeEnd","nextVal","isAnyModActive","unsetMod","isFilterModActive","channelIdx","forceHoldMods","found","holdFor","snapToStart","snapToBar","goToBar","jumpIntoLoop","oldBar","goToNextBar","goToPrevBar","getNextBar","skipBar","computeSongState","outputBufferLength","playSong","skippedBars","firstSkippedBufferIndex","bufferIndex","samplesLeftInBuffer","samplesLeftInTick","runLength","runEnd","determineCurrentActiveTones","playModTone","barVisited","determineLiveInputTones","tonesPlayedInThisInstrument","freeReleasedTone","shouldFadeOutFast","computeTone","playTone","effectsSynth","startRatio","endRatio","ticksIntoBar","partTimeTickStart","partTimeTickEnd","useVibratoSpeed","midBeat","periods","samplesPerPeriod","tempAmplitude","filtersL","filtersR","filterCount","initialFilterInput1L","initialFilterInput2L","initialFilterInput1R","initialFilterInput2R","applyFilters","inputSampleL","sampleL","inputSampleR","sampleR","sanitizeFilters","absL","absR","limitRange","limitTarget","limitedVolume","arpEnvelopeStart","useArpeggioSpeed","effectIdx","maxInstrumentsPerChannel","isFinite","freeTone","newTone","releaseTone","toneIndex","bassPitches","toneList","toneCount","moveTonesIntoOrderedTempMatchedList","clearTempMatchedPitchTones","adjacentPatternHasCompatibleInstrumentTransition","otherPattern","otherNote","forceContinue","otherInstrument","otherTransition","adjacentNotesHaveMatchingPitches","firstNote","secondNote","firstNoteInterval","notePitches","currentTick","prevNotes","nextNotes","fillCount","modToneCount","newInstrumentIndex","sourceInstrumentState","destInstrumentState","prevNoteForThisInstrument","nextNoteForThisInstrument","oldTone","partsPerBar","tonesInPrevNote","tonesInNextNote","prevPattern","lastNote","patternForcesContinueAtStart","chordOfCompatibleInstrument","nextPattern","nextPatternForcesContinueAtStart","strumOffsetParts","prevNoteForThisTone","noteForThisTone","nextNoteForThisTone","released","modSynth","computeChordExpression","chordExpression","intervalScale","secondsPerPart","sampleTime","specialIntervalMult","toneIsOnLastTick","intervalStart","intervalEnd","fadeExpressionStart","fadeExpressionEnd","chordExpressionStart","chordExpressionEnd","expressionReferencePitch","baseExpression","pitchDamping","chipWaveLength","firstOffset","lastOffset","getOperatorWave","startTicksSinceReleased","endTicksSinceReleased","pinStart","pinEnd","noteTicksPassedTickStart","noteTicksPassedTickEnd","pinRatioStart","pinRatioEnd","noteLengthTicks","tmpNoteFilter","noteFilterSettingsStart","noteFilterSettingsEnd","intervalDiff","chordSizeDiff","pitchShiftScalarStart","pitchShiftScalarEnd","modDetuneStart","modDetuneEnd","vibratoAmplitudeStart","vibratoAmplitudeEnd","vibratoStart","POSITIVE_INFINITY","getLFOAmplitude","ticksUntilVibratoStart","vibratoLfoEnd","vibratoDepthEnvelopeEnd","vibratoEnd","ticksUntilVibratoEnd","noteFilterExpression","noteAllFreqsEnvelopeStart","noteAllFreqsEnvelopeEnd","noteFreqEnvelopeStart","noteFreqEnvelopeEnd","notePeakEnvelopeStart","notePeakEnvelopeEnd","noteFilterSettings","drumsetEnvelopeComputer","sineExpressionBoost","totalCarrierExpression","arpeggioInterval","isMono","associatedCarrierIndex","pitchStart","pitchEnd","baseFreqStart","baseFreqEnd","targetFreqStart","targetFreqEnd","freqEnvelopeStart","freqEnvelopeEnd","amplitudeStart","amplitudeEnd","amplitudeCurveStart","amplitudeCurveEnd","expressionStart","expressionEnd","pitchExpressionStart","pitchExpressionEnd","useFeedbackAmplitudeStart","useFeedbackAmplitudeEnd","feedbackAmplitudeStart","feedbackAmplitudeEnd","feedbackStart","feedbackEnd","freqEndRatio","basePhaseDeltaScale","intervalOffset","endPitch","settingsExpressionMult","basePulseWidth","pulseWidthModStart","pulseWidthModEnd","pulseWidthStart","pulseWidthEnd","decimalOffsetModStart","decimalOffsetStart","useSustainStart","useSustainEnd","startFreq","unisonEnvelopeStart","unisonEnvelopeEnd","unisonStartA","unisonEndA","divisor","unisonStart","unisonEnd","supersawExpressionStart","supersawExpressionEnd","minFirstVoiceAmplitude","useDynamismStart","useDynamismEnd","curvedDynamismStart","curvedDynamismEnd","firstVoiceAmplitudeStart","firstVoiceAmplitudeEnd","dynamismStart","dynamismEnd","initializeSupersaw","accumulator","normalizedPhase","zeroCrossingPhase","prevDrop","nextDrop","phaseDelta","distanceToZeroCrossing","swappedIndex","baseSpreadSlider","useSpreadStart","useSpreadEnd","averageSpreadSlider","curvedSpread","baseShape","useShapeStart","useShapeEnd","shapeStart","shapeEnd","delayLengthStart","pulseExpressionRatio","sustainEnvelopeStart","sustainEnvelopeEnd","secondsIntoBar","vibratoPeriodSeconds","fingerprint","fmSynthFunctionCache","synthSource","line","fmSourceTemplate","outputs","operatorLine","operatorSourceTemplate","modulatorNumber","feedbackIndices","wrappedFmSynth","Function","loopableChipSynth","chipSynth","harmonicsSynth","pulseWidthSynth","supersawSynth","pickedStringSynth","noiseSynth","spectrumSynth","drumsetSynth","fm6SynthFunctionCache","wrappedFm6Synth","wrap","dataL","dataR","chipWaveLoopLength","phaseDeltaA","phaseDeltaB","directionA","directionB","chipWaveCompletionA","chipWaveCompletionB","lastWaveLA","lastWaveLB","lastWaveRA","lastWaveRB","chipWaveCompletionFadeLength","phaseDeltaScaleA","phaseDeltaScaleB","phaseA","phaseB","prevWaveIntegralLA","prevWaveIntegralLB","prevWaveIntegralRA","prevWaveIntegralRB","phaseAInt","phaseBInt","indexA","indexB","phaseRatioA","phaseRatioB","initialFilterInputL1","initialFilterInputR1","initialFilterInputL2","initialFilterInputR2","prevWaveLA","prevWaveLB","prevWaveRA","prevWaveRB","sampleIndex","wrapped","waveLA","waveLB","waveRA","waveRB","completionFadeA","completionFadeB","nextWaveIntegralLA","nextWaveIntegralLB","nextWaveIntegralRA","nextWaveIntegralRB","pwila","pwilb","pwira","pwirb","phaseA_","phaseB_","outputL","outputR","data","filters","initialFilterInput1","initialFilterInput2","prevWaveIntegralA","prevWaveIntegralB","nextWaveIntegralA","nextWaveIntegralB","waveA","waveB","inputSample","output","voiceCount","pickedStringFunction","pickedStringFunctionCache","pickedStringSource","sampleList","voice","lines","usesEqFilter","signature","toString","effectsFunction","effectsFunctionCache","effectsSource","usesDelays","effectState","sawPhaseA","sawPhaseB","sawPhaseC","sawPhaseD","pulseWaveA","pulseWaveB","t","dynamismDelta","unisonDetunes","shapeDelta","phase","supersawSample","detunedPhaseDelta","delaySampleTime","lowerIndex","upperIndex","delayRatio","prevDelaySample","phaseMask","pitchRelativefilterA","pitchRelativefilterB","samplesInPeriod","findRandomZeroCrossing","waveSampleA","waveSampleB","referenceDelta","phaseInt","stereoBufferIndex","envelopeTarget","tgtInstrumentState","dotTarget","lerpEndRatio","bound","indexPrev","attemptsRemaining","indexNext","waveNext","innerIndexNext","innerWaveNext","instrumentVolume","volumeMultToInstrumentVolume","volumeMult","volumeMultToNoteSize","beatsPerSecond","partsPerSecond","tickPerSecond","sanitizeDelayLine","lastIndex","mask","input1","input2","ofBar","_b"],"sources":["../build/synth/SynthConfig.js","../build/synth/Deque.js","../build/editor/EditorConfig.js","../build/synth/Channel.js","../build/synth/filtering.js","../build/synth/Filter.js","../build/synth/utils.js","../build/synth/Envelope.js","../build/synth/Effect.js","../build/synth/Instrument.js","../build/synth/Pattern.js","../build/synth/Song.js","../build/synth/ChannelState.js","../build/synth/FFT.js","../build/synth/EffectState.js","../node_modules/.pnpm/js-xxhash@4.0.0/node_modules/js-xxhash/dist/esm/xxHash32.js","../build/synth/EnvelopeComputer.js","../build/synth/InstrumentState.js","../build/global/Events.js","../build/synth/synth.js"],"sourcesContent":["/*!\nCopyright (c) 2012-2022 John Nesky and contributing authors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar _a;\nexport const TypePresets = [\"chip\", \"FM\", \"noise\", \"spectrum\", \"drumset\", \"harmonics\", \"pulse width\", \"picked string\", \"supersaw\", \"chip (custom)\", \"mod\", \"FM (6-op)\"];\nexport function getSampleLoadingStatusName(status) {\n    switch (status) {\n        case 0: return \"loading\";\n        case 1: return \"loaded\";\n        case 2: return \"error\";\n    }\n}\nexport class SampleLoadingState {\n    constructor() {\n        this.statusTable = {};\n        this.urlTable = {};\n        this.totalSamples = 0;\n        this.samplesLoaded = 0;\n    }\n}\nexport const sampleLoadingState = new SampleLoadingState();\nexport class SampleLoadedEvent extends Event {\n    constructor(totalSamples, samplesLoaded) {\n        super(\"sampleloaded\");\n        this.totalSamples = totalSamples;\n        this.samplesLoaded = samplesLoaded;\n    }\n}\nexport class SampleLoadEvents extends EventTarget {\n    constructor() {\n        super();\n    }\n}\nexport const sampleLoadEvents = new SampleLoadEvents();\nexport function startLoadingSample(url, chipWaveIndex, presetSettings, rawLoopOptions, customSampleRate) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const sampleLoaderAudioContext = new AudioContext({ sampleRate: customSampleRate });\n        let closedSampleLoaderAudioContext = false;\n        const chipWave = Config.chipWaves[chipWaveIndex];\n        const rawChipWave = Config.rawChipWaves[chipWaveIndex];\n        const rawRawChipWave = Config.rawRawChipWaves[chipWaveIndex];\n        if (OFFLINE) {\n            if (url.slice(0, 5) === \"file:\") {\n                const dirname = yield getDirname();\n                const joined = yield pathJoin(dirname, url.slice(5));\n                url = joined;\n            }\n        }\n        fetch(url).then((response) => {\n            if (!response.ok) {\n                sampleLoadingState.statusTable[chipWaveIndex] = 2;\n                return Promise.reject(new Error(\"Couldn't load sample\"));\n            }\n            return response.arrayBuffer();\n        }).then((arrayBuffer) => {\n            return sampleLoaderAudioContext.decodeAudioData(arrayBuffer);\n        }).then((audioBuffer) => {\n            const samples = centerWave(Array.from(audioBuffer.getChannelData(0)));\n            var samplesR = samples;\n            if (audioBuffer.numberOfChannels > 1)\n                samplesR = centerWave(Array.from(audioBuffer.getChannelData(1)));\n            else\n                samplesR = samples;\n            const integratedSamples = performIntegral(samples);\n            const integratedSamplesR = performIntegral(samplesR);\n            chipWave.samples = integratedSamples;\n            chipWave.samplesR = integratedSamplesR;\n            rawChipWave.samples = samples;\n            rawChipWave.samplesR = samplesR;\n            rawRawChipWave.samples = samples;\n            rawRawChipWave.samplesR = samplesR;\n            if (rawLoopOptions[\"isUsingAdvancedLoopControls\"]) {\n                presetSettings[\"chipWaveLoopStart\"] = rawLoopOptions[\"chipWaveLoopStart\"] != null ? rawLoopOptions[\"chipWaveLoopStart\"] : 0;\n                presetSettings[\"chipWaveLoopEnd\"] = rawLoopOptions[\"chipWaveLoopEnd\"] != null ? rawLoopOptions[\"chipWaveLoopEnd\"] : samples.length - 1;\n                presetSettings[\"chipWaveLoopMode\"] = rawLoopOptions[\"chipWaveLoopMode\"] != null ? rawLoopOptions[\"chipWaveLoopMode\"] : 0;\n                presetSettings[\"chipWavePlayBackwards\"] = rawLoopOptions[\"chipWavePlayBackwards\"];\n                presetSettings[\"chipWaveStartOffset\"] = rawLoopOptions[\"chipWaveStartOffset\"] != null ? rawLoopOptions[\"chipWaveStartOffset\"] : 0;\n            }\n            sampleLoadingState.samplesLoaded++;\n            sampleLoadingState.statusTable[chipWaveIndex] = 1;\n            sampleLoadEvents.dispatchEvent(new SampleLoadedEvent(sampleLoadingState.totalSamples, sampleLoadingState.samplesLoaded));\n            if (!closedSampleLoaderAudioContext) {\n                closedSampleLoaderAudioContext = true;\n                sampleLoaderAudioContext.close();\n            }\n        }).catch((error) => {\n            sampleLoadingState.statusTable[chipWaveIndex] = 2;\n            alert(\"Failed to load \" + url + \":\\n\" + error);\n            if (!closedSampleLoaderAudioContext) {\n                closedSampleLoaderAudioContext = true;\n                sampleLoaderAudioContext.close();\n            }\n        });\n    });\n}\nexport function getLocalStorageItem(key, defaultValue) {\n    let value = localStorage.getItem(key);\n    if (value == null || value === \"null\" || value === \"undefined\") {\n        value = defaultValue;\n    }\n    return value;\n}\nfunction loadScript(url) {\n    const result = new Promise((resolve, reject) => {\n        if (!Config.willReloadForCustomSamples) {\n            const script = document.createElement(\"script\");\n            script.src = url;\n            document.head.appendChild(script);\n            script.addEventListener(\"load\", (event) => {\n                resolve();\n            });\n        }\n        else {\n        }\n    });\n    return result;\n}\nexport function loadBuiltInSamples(set) {\n    const defaultIndex = 0;\n    const defaultIntegratedSamples = Config.chipWaves[defaultIndex].samples;\n    const defaultSamples = Config.rawRawChipWaves[defaultIndex].samples;\n    if (set == 0) {\n        const chipWaves = [\n            { name: \"paandorasbox kick\", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\n            { name: \"paandorasbox snare\", expression: 3.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\n            { name: \"paandorasbox piano1\", expression: 3.0, isSampled: true, isPercussion: false, extraSampleDetune: 2 },\n            { name: \"paandorasbox WOW\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: 0 },\n            { name: \"paandorasbox overdrive\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -2 },\n            { name: \"paandorasbox trumpet\", expression: 3.0, isSampled: true, isPercussion: false, extraSampleDetune: 1.2 },\n            { name: \"paandorasbox saxophone\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -5 },\n            { name: \"paandorasbox orchestrahit\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: 4.2 },\n            { name: \"paandorasbox detatched violin\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: 4.2 },\n            { name: \"paandorasbox synth\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -0.8 },\n            { name: \"paandorasbox sonic3snare\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\n            { name: \"paandorasbox come on\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: 0 },\n            { name: \"paandorasbox choir\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -3 },\n            { name: \"paandorasbox overdriveguitar\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -6.2 },\n            { name: \"paandorasbox flute\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -6 },\n            { name: \"paandorasbox legato violin\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -28 },\n            { name: \"paandorasbox tremolo violin\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -33 },\n            { name: \"paandorasbox amen break\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -55 },\n            { name: \"paandorasbox pizzicato violin\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -11 },\n            { name: \"paandorasbox tim allen grunt\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -20 },\n            { name: \"paandorasbox tuba\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: 44 },\n            { name: \"paandorasbox loopingcymbal\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -17 },\n            { name: \"paandorasbox standardkick\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: -7 },\n            { name: \"paandorasbox standardsnare\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\n            { name: \"paandorasbox closedhihat\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: 5 },\n            { name: \"paandorasbox foothihat\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: 4 },\n            { name: \"paandorasbox openhihat\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: -31 },\n            { name: \"paandorasbox crashcymbal\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: -43 },\n            { name: \"paandorasbox pianoC4\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -42.5 },\n            { name: \"paandorasbox liver pad\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -22.5 },\n            { name: \"paandorasbox marimba\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -15.5 },\n            { name: \"paandorasbox susdotwav\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -24.5 },\n            { name: \"paandorasbox wackyboxtts\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -17.5 },\n            { name: \"paandorasbox peppersteak_1\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -42.2 },\n            { name: \"paandorasbox peppersteak_2\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -47 },\n            { name: \"paandorasbox vinyl_noise\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: -50 },\n            { name: \"paandorasbeta slap bass\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -56 },\n            { name: \"paandorasbeta HD EB overdrive guitar\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -60 },\n            { name: \"paandorasbeta sunsoft bass\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -18.5 },\n            { name: \"paandorasbeta masculine choir\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -50 },\n            { name: \"paandorasbeta feminine choir\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -60.5 },\n            { name: \"paandorasbeta tololoche\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -29.5 },\n            { name: \"paandorasbeta harp\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -54 },\n            { name: \"paandorasbeta pan flute\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -58 },\n            { name: \"paandorasbeta krumhorn\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -46 },\n            { name: \"paandorasbeta timpani\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -50 },\n            { name: \"paandorasbeta crowd hey\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -29 },\n            { name: \"paandorasbeta wario land 4 brass\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -68 },\n            { name: \"paandorasbeta wario land 4 rock organ\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -63 },\n            { name: \"paandorasbeta wario land 4 DAOW\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -35 },\n            { name: \"paandorasbeta wario land 4 hour chime\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -47.5 },\n            { name: \"paandorasbeta wario land 4 tick\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -12.5 },\n            { name: \"paandorasbeta kirby kick\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46.5 },\n            { name: \"paandorasbeta kirby snare\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46.5 },\n            { name: \"paandorasbeta kirby bongo\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46.5 },\n            { name: \"paandorasbeta kirby click\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46.5 },\n            { name: \"paandorasbeta sonor kick\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -28.5 },\n            { name: \"paandorasbeta sonor snare\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -28.5 },\n            { name: \"paandorasbeta sonor snare (left hand)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -22.5 },\n            { name: \"paandorasbeta sonor snare (right hand)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -22.5 },\n            { name: \"paandorasbeta sonor high tom\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -41.5 },\n            { name: \"paandorasbeta sonor low tom\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -41.5 },\n            { name: \"paandorasbeta sonor hihat (closed)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -17 },\n            { name: \"paandorasbeta sonor hihat (half opened)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -21 },\n            { name: \"paandorasbeta sonor hihat (open)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -54.5 },\n            { name: \"paandorasbeta sonor hihat (open tip)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -43.5 },\n            { name: \"paandorasbeta sonor hihat (pedal)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -28 },\n            { name: \"paandorasbeta sonor crash\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -51 },\n            { name: \"paandorasbeta sonor crash (tip)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -50.5 },\n            { name: \"paandorasbeta sonor ride\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46 }\n        ];\n        sampleLoadingState.totalSamples += chipWaves.length;\n        const startIndex = Config.rawRawChipWaves.length;\n        for (const chipWave of chipWaves) {\n            const chipWaveIndex = Config.rawRawChipWaves.length;\n            const rawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\n            const rawRawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\n            const integratedChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultIntegratedSamples };\n            Config.rawRawChipWaves[chipWaveIndex] = rawRawChipWave;\n            Config.rawRawChipWaves.dictionary[chipWave.name] = rawRawChipWave;\n            Config.rawChipWaves[chipWaveIndex] = rawChipWave;\n            Config.rawChipWaves.dictionary[chipWave.name] = rawChipWave;\n            Config.chipWaves[chipWaveIndex] = integratedChipWave;\n            Config.chipWaves.dictionary[chipWave.name] = rawChipWave;\n            sampleLoadingState.statusTable[chipWaveIndex] = 0;\n            sampleLoadingState.urlTable[chipWaveIndex] = \"legacySamples\";\n        }\n        loadScript(\"samples.js\")\n            .then(() => loadScript(\"samples2.js\"))\n            .then(() => loadScript(\"samples3.js\"))\n            .then(() => loadScript(\"drumsamples.js\"))\n            .then(() => loadScript(\"wario_samples.js\"))\n            .then(() => loadScript(\"kirby_samples.js\"))\n            .then(() => {\n            const chipWaveSamples = [\n                centerWave(kicksample),\n                centerWave(snaresample),\n                centerWave(pianosample),\n                centerWave(WOWsample),\n                centerWave(overdrivesample),\n                centerWave(trumpetsample),\n                centerWave(saxophonesample),\n                centerWave(orchhitsample),\n                centerWave(detatchedviolinsample),\n                centerWave(synthsample),\n                centerWave(sonic3snaresample),\n                centerWave(comeonsample),\n                centerWave(choirsample),\n                centerWave(overdrivensample),\n                centerWave(flutesample),\n                centerWave(legatoviolinsample),\n                centerWave(tremoloviolinsample),\n                centerWave(amenbreaksample),\n                centerWave(pizzicatoviolinsample),\n                centerWave(timallengruntsample),\n                centerWave(tubasample),\n                centerWave(loopingcymbalsample),\n                centerWave(kickdrumsample),\n                centerWave(snaredrumsample),\n                centerWave(closedhihatsample),\n                centerWave(foothihatsample),\n                centerWave(openhihatsample),\n                centerWave(crashsample),\n                centerWave(pianoC4sample),\n                centerWave(liverpadsample),\n                centerWave(marimbasample),\n                centerWave(susdotwavsample),\n                centerWave(wackyboxttssample),\n                centerWave(peppersteak1),\n                centerWave(peppersteak2),\n                centerWave(vinyl),\n                centerWave(slapbass),\n                centerWave(hdeboverdrive),\n                centerWave(sunsoftbass),\n                centerWave(masculinechoir),\n                centerWave(femininechoir),\n                centerWave(southtololoche),\n                centerWave(harp),\n                centerWave(panflute),\n                centerWave(krumhorn),\n                centerWave(timpani),\n                centerWave(crowdhey),\n                centerWave(warioland4brass),\n                centerWave(warioland4organ),\n                centerWave(warioland4daow),\n                centerWave(warioland4hourchime),\n                centerWave(warioland4tick),\n                centerWave(kirbykick),\n                centerWave(kirbysnare),\n                centerWave(kirbybongo),\n                centerWave(kirbyclick),\n                centerWave(funkkick),\n                centerWave(funksnare),\n                centerWave(funksnareleft),\n                centerWave(funksnareright),\n                centerWave(funktomhigh),\n                centerWave(funktomlow),\n                centerWave(funkhihatclosed),\n                centerWave(funkhihathalfopen),\n                centerWave(funkhihatopen),\n                centerWave(funkhihatopentip),\n                centerWave(funkhihatfoot),\n                centerWave(funkcrash),\n                centerWave(funkcrashtip),\n                centerWave(funkride)\n            ];\n            let chipWaveIndexOffset = 0;\n            for (const chipWaveSample of chipWaveSamples) {\n                const chipWaveIndex = startIndex + chipWaveIndexOffset;\n                Config.rawChipWaves[chipWaveIndex].samples = chipWaveSample;\n                Config.rawRawChipWaves[chipWaveIndex].samples = chipWaveSample;\n                Config.chipWaves[chipWaveIndex].samples = performIntegral(chipWaveSample);\n                sampleLoadingState.statusTable[chipWaveIndex] = 1;\n                sampleLoadingState.samplesLoaded++;\n                sampleLoadEvents.dispatchEvent(new SampleLoadedEvent(sampleLoadingState.totalSamples, sampleLoadingState.samplesLoaded));\n                chipWaveIndexOffset++;\n            }\n        });\n    }\n    else if (set == 1) {\n        const chipWaves = [\n            { name: \"chronoperc1final\", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\n            { name: \"synthkickfm\", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\n            { name: \"mcwoodclick1\", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\n            { name: \"acoustic snare\", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 }\n        ];\n        sampleLoadingState.totalSamples += chipWaves.length;\n        const startIndex = Config.rawRawChipWaves.length;\n        for (const chipWave of chipWaves) {\n            const chipWaveIndex = Config.rawRawChipWaves.length;\n            const rawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\n            const rawRawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\n            const integratedChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultIntegratedSamples };\n            Config.rawRawChipWaves[chipWaveIndex] = rawRawChipWave;\n            Config.rawRawChipWaves.dictionary[chipWave.name] = rawRawChipWave;\n            Config.rawChipWaves[chipWaveIndex] = rawChipWave;\n            Config.rawChipWaves.dictionary[chipWave.name] = rawChipWave;\n            Config.chipWaves[chipWaveIndex] = integratedChipWave;\n            Config.chipWaves.dictionary[chipWave.name] = rawChipWave;\n            sampleLoadingState.statusTable[chipWaveIndex] = 0;\n            sampleLoadingState.urlTable[chipWaveIndex] = \"nintariboxSamples\";\n        }\n        loadScript(\"nintaribox_samples.js\")\n            .then(() => {\n            const chipWaveSamples = [\n                centerWave(chronoperc1finalsample),\n                centerWave(synthkickfmsample),\n                centerWave(woodclicksample),\n                centerWave(acousticsnaresample)\n            ];\n            let chipWaveIndexOffset = 0;\n            for (const chipWaveSample of chipWaveSamples) {\n                const chipWaveIndex = startIndex + chipWaveIndexOffset;\n                Config.rawChipWaves[chipWaveIndex].samples = chipWaveSample;\n                Config.rawRawChipWaves[chipWaveIndex].samples = chipWaveSample;\n                Config.chipWaves[chipWaveIndex].samples = performIntegral(chipWaveSample);\n                sampleLoadingState.statusTable[chipWaveIndex] = 1;\n                sampleLoadingState.samplesLoaded++;\n                sampleLoadEvents.dispatchEvent(new SampleLoadedEvent(sampleLoadingState.totalSamples, sampleLoadingState.samplesLoaded));\n                chipWaveIndexOffset++;\n            }\n        });\n    }\n    else if (set == 2) {\n        const chipWaves = [\n            { name: \"cat\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -3 },\n            { name: \"gameboy\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 7 },\n            { name: \"mario\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 0 },\n            { name: \"drum\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 4 },\n            { name: \"yoshi\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -16 },\n            { name: \"star\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -16 },\n            { name: \"fire flower\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -1 },\n            { name: \"dog\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -1 },\n            { name: \"oink\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 3 },\n            { name: \"swan\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 1 },\n            { name: \"face\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -12 }\n        ];\n        sampleLoadingState.totalSamples += chipWaves.length;\n        const startIndex = Config.rawRawChipWaves.length;\n        for (const chipWave of chipWaves) {\n            const chipWaveIndex = Config.rawRawChipWaves.length;\n            const rawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\n            const rawRawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\n            const integratedChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultIntegratedSamples };\n            Config.rawRawChipWaves[chipWaveIndex] = rawRawChipWave;\n            Config.rawRawChipWaves.dictionary[chipWave.name] = rawRawChipWave;\n            Config.rawChipWaves[chipWaveIndex] = rawChipWave;\n            Config.rawChipWaves.dictionary[chipWave.name] = rawChipWave;\n            Config.chipWaves[chipWaveIndex] = integratedChipWave;\n            Config.chipWaves.dictionary[chipWave.name] = rawChipWave;\n            sampleLoadingState.statusTable[chipWaveIndex] = 0;\n            sampleLoadingState.urlTable[chipWaveIndex] = \"marioPaintboxSamples\";\n        }\n        loadScript(\"mario_paintbox_samples.js\")\n            .then(() => {\n            const chipWaveSamples = [\n                centerWave(catpaintboxsample),\n                centerWave(gameboypaintboxsample),\n                centerWave(mariopaintboxsample),\n                centerWave(drumpaintboxsample),\n                centerWave(yoshipaintboxsample),\n                centerWave(starpaintboxsample),\n                centerWave(fireflowerpaintboxsample),\n                centerWave(dogpaintbox),\n                centerWave(oinkpaintbox),\n                centerWave(swanpaintboxsample),\n                centerWave(facepaintboxsample)\n            ];\n            let chipWaveIndexOffset = 0;\n            for (const chipWaveSample of chipWaveSamples) {\n                const chipWaveIndex = startIndex + chipWaveIndexOffset;\n                Config.rawChipWaves[chipWaveIndex].samples = chipWaveSample;\n                Config.rawRawChipWaves[chipWaveIndex].samples = chipWaveSample;\n                Config.chipWaves[chipWaveIndex].samples = performIntegral(chipWaveSample);\n                sampleLoadingState.statusTable[chipWaveIndex] = 1;\n                sampleLoadingState.samplesLoaded++;\n                sampleLoadEvents.dispatchEvent(new SampleLoadedEvent(sampleLoadingState.totalSamples, sampleLoadingState.samplesLoaded));\n                chipWaveIndexOffset++;\n            }\n        });\n    }\n    else {\n        console.log(\"invalid set of built-in samples\");\n    }\n}\nexport class Config {\n    static generateSineWave() {\n        const wave = new Float32Array(_a.sineWaveLength + 1);\n        for (let i = 0; i < _a.sineWaveLength + 1; i++) {\n            wave[i] = Math.sin(i * Math.PI * 2.0 / _a.sineWaveLength);\n        }\n        return wave;\n    }\n    static generateTriWave() {\n        const wave = new Float32Array(_a.sineWaveLength + 1);\n        for (let i = 0; i < _a.sineWaveLength + 1; i++) {\n            wave[i] = Math.asin(Math.sin(i * Math.PI * 2.0 / _a.sineWaveLength)) / (Math.PI / 2);\n        }\n        return wave;\n    }\n    static generateTrapezoidWave(drive = 2) {\n        const wave = new Float32Array(_a.sineWaveLength + 1);\n        for (let i = 0; i < _a.sineWaveLength + 1; i++) {\n            wave[i] = Math.max(-1.0, Math.min(1.0, Math.asin(Math.sin(i * Math.PI * 2.0 / _a.sineWaveLength)) * drive));\n        }\n        return wave;\n    }\n    static generateSquareWave(phaseWidth = 0) {\n        const wave = new Float32Array(_a.sineWaveLength + 1);\n        const centerPoint = _a.sineWaveLength / 4;\n        for (let i = 0; i < _a.sineWaveLength + 1; i++) {\n            wave[i] = +((Math.abs(i - centerPoint) < phaseWidth * _a.sineWaveLength / 2)\n                || ((Math.abs(i - _a.sineWaveLength - centerPoint) < phaseWidth * _a.sineWaveLength / 2))) * 2 - 1;\n        }\n        return wave;\n    }\n    static generateSawWave(inverse = false) {\n        const wave = new Float32Array(_a.sineWaveLength + 1);\n        for (let i = 0; i < _a.sineWaveLength + 1; i++) {\n            wave[i] = ((i + (_a.sineWaveLength / 4.0)) * 2.0 / _a.sineWaveLength) % 2 - 1;\n            wave[i] = inverse ? -wave[i] : wave[i];\n        }\n        return wave;\n    }\n    static generateQuasiSineWave() {\n        const wave = new Float32Array(_a.sineWaveLength + 1);\n        for (let i = 0; i < _a.sineWaveLength + 1; i++) {\n            wave[i] = Math.round(Math.sin(i * Math.PI * 2.0 / _a.sineWaveLength));\n        }\n        return wave;\n    }\n}\n_a = Config;\nConfig.thresholdVal = -10;\nConfig.kneeVal = 40;\nConfig.ratioVal = 12;\nConfig.attackVal = 0;\nConfig.releaseVal = 0.25;\nConfig.willReloadForCustomSamples = false;\nConfig.jsonFormat = \"DragonBox\";\nConfig.scales = toNameMap([\n    { name: \"Free\", realName: \"chromatic\", flags: [true, true, true, true, true, true, true, true, true, true, true, true] },\n    { name: \"Major\", realName: \"ionian\", flags: [true, false, true, false, true, true, false, true, false, true, false, true] },\n    { name: \"Minor\", realName: \"aeolian\", flags: [true, false, true, true, false, true, false, true, true, false, true, false] },\n    { name: \"Mixolydian\", realName: \"mixolydian\", flags: [true, false, true, false, true, true, false, true, false, true, true, false] },\n    { name: \"Lydian\", realName: \"lydian\", flags: [true, false, true, false, true, false, true, true, false, true, false, true] },\n    { name: \"Dorian\", realName: \"dorian\", flags: [true, false, true, true, false, true, false, true, false, true, true, false] },\n    { name: \"Phrygian\", realName: \"phrygian\", flags: [true, true, false, true, false, true, false, true, true, false, true, false] },\n    { name: \"Locrian\", realName: \"locrian\", flags: [true, true, false, true, false, true, true, false, true, false, true, false] },\n    { name: \"Lydian Dominant\", realName: \"lydian dominant\", flags: [true, false, true, false, true, false, true, true, false, true, true, false] },\n    { name: \"Phrygian Dominant\", realName: \"phrygian dominant\", flags: [true, true, false, false, true, true, false, true, true, false, true, false] },\n    { name: \"Harmonic Major\", realName: \"harmonic major\", flags: [true, false, true, false, true, true, false, true, true, false, false, true] },\n    { name: \"Harmonic Minor\", realName: \"harmonic minor\", flags: [true, false, true, true, false, true, false, true, true, false, false, true] },\n    { name: \"Melodic Minor\", realName: \"melodic minor\", flags: [true, false, true, true, false, true, false, true, false, true, false, true] },\n    { name: \"Blues Major\", realName: \"blues major\", flags: [true, false, true, true, true, false, false, true, false, true, false, false] },\n    { name: \"Blues\", realName: \"blues\", flags: [true, false, false, true, false, true, true, true, false, false, true, false] },\n    { name: \"Altered\", realName: \"altered\", flags: [true, true, false, true, true, false, true, false, true, false, true, false] },\n    { name: \"Major Pentatonic\", realName: \"major pentatonic\", flags: [true, false, true, false, true, false, false, true, false, true, false, false] },\n    { name: \"Minor Pentatonic\", realName: \"minor pentatonic\", flags: [true, false, false, true, false, true, false, true, false, false, true, false] },\n    { name: \"Whole Tone\", realName: \"whole tone\", flags: [true, false, true, false, true, false, true, false, true, false, true, false] },\n    { name: \"Octatonic\", realName: \"octatonic\", flags: [true, false, true, true, false, true, true, false, true, true, false, true] },\n    { name: \"Hexatonic\", realName: \"hexatonic\", flags: [true, false, false, true, true, false, false, true, true, false, false, true] },\n    { name: \"No Dabbing (MB)\", realName: \"no dabbing\", flags: [true, true, false, true, true, true, true, true, true, false, true, false] },\n    { name: \"Jacked Toad (TB)\", realName: \"jacked toad\", flags: [true, false, true, true, false, true, true, true, true, false, true, true] },\n    { name: \"Test Scale (TB)\", realName: \"**t\", flags: [true, true, false, false, false, true, true, false, false, true, true, false] },\n    { name: \"Custom\", realName: \"custom\", flags: [true, false, true, true, false, false, false, true, true, false, true, true] },\n]);\nConfig.keys = toNameMap([\n    { name: \"C\", isWhiteKey: true, basePitch: 12 },\n    { name: \"C♯\", isWhiteKey: false, basePitch: 13 },\n    { name: \"D\", isWhiteKey: true, basePitch: 14 },\n    { name: \"D♯\", isWhiteKey: false, basePitch: 15 },\n    { name: \"E\", isWhiteKey: true, basePitch: 16 },\n    { name: \"F\", isWhiteKey: true, basePitch: 17 },\n    { name: \"F♯\", isWhiteKey: false, basePitch: 18 },\n    { name: \"G\", isWhiteKey: true, basePitch: 19 },\n    { name: \"G♯\", isWhiteKey: false, basePitch: 20 },\n    { name: \"A\", isWhiteKey: true, basePitch: 21 },\n    { name: \"A♯\", isWhiteKey: false, basePitch: 22 },\n    { name: \"B\", isWhiteKey: true, basePitch: 23 },\n]);\nConfig.blackKeyNameParents = [-1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1];\nConfig.tempoMin = 1;\nConfig.tempoMax = 2000;\nConfig.octaveMin = -2;\nConfig.octaveMax = 2;\nConfig.echoDelayRange = 24;\nConfig.echoDelayStepTicks = 4;\nConfig.echoSustainRange = 24;\nConfig.echoShelfHz = 4000.0;\nConfig.echoShelfGain = Math.pow(2.0, -0.5);\nConfig.reverbShelfHz = 8000.0;\nConfig.reverbShelfGain = Math.pow(2.0, -1.5);\nConfig.reverbRange = 32;\nConfig.reverbDelayBufferSize = 16384;\nConfig.reverbDelayBufferMask = _a.reverbDelayBufferSize - 1;\nConfig.beatsPerBarMin = 1;\nConfig.beatsPerBarMax = 64;\nConfig.barCountMin = 1;\nConfig.barCountMax = 1024;\nConfig.instrumentCountMin = 1;\nConfig.layeredInstrumentCountMax = 10;\nConfig.patternInstrumentCountMax = 10;\nConfig.partsPerBeat = 24;\nConfig.ticksPerPart = 2;\nConfig.ticksPerArpeggio = 3;\nConfig.arpeggioPatterns = [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7]];\nConfig.rhythms = toNameMap([\n    { name: \"÷3 (triplets)\", stepsPerBeat: 3, roundUpThresholds: [5, 12, 18] },\n    { name: \"÷4 (standard)\", stepsPerBeat: 4, roundUpThresholds: [3, 9, 17, 21] },\n    { name: \"÷6\", stepsPerBeat: 6, roundUpThresholds: null },\n    { name: \"÷8\", stepsPerBeat: 8, roundUpThresholds: null },\n    { name: \"÷12\", stepsPerBeat: 12, roundUpThresholds: null },\n    { name: \"freehand\", stepsPerBeat: 24, roundUpThresholds: null },\n]);\nConfig.instrumentTypeNames = [\"chip\", \"FM\", \"noise\", \"spectrum\", \"drumset\", \"harmonics\", \"PWM\", \"Picked String\", \"supersaw\", \"custom chip\", \"mod\", \"FM6op\"];\nConfig.instrumentTypeHasSpecialInterval = [true, true, false, false, false, true, false, false, false, false, false];\nConfig.chipBaseExpression = 0.03375;\nConfig.fmBaseExpression = 0.03;\nConfig.noiseBaseExpression = 0.19;\nConfig.spectrumBaseExpression = 0.3;\nConfig.drumsetBaseExpression = 0.45;\nConfig.harmonicsBaseExpression = 0.025;\nConfig.pwmBaseExpression = 0.04725;\nConfig.supersawBaseExpression = 0.061425;\nConfig.pickedStringBaseExpression = 0.025;\nConfig.distortionBaseVolume = 0.011;\nConfig.bitcrusherBaseVolume = 0.010;\nConfig.granularOutputLoudnessCompensation = 0.5;\nConfig.rawChipWaves = toNameMap([\n    { name: \"rounded\", expression: 0.94, samples: centerWave([0.0, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.85, 0.9, 0.95, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.95, 0.9, 0.85, 0.8, 0.7, 0.6, 0.5, 0.4, 0.2, 0.0, -0.2, -0.4, -0.5, -0.6, -0.7, -0.8, -0.85, -0.9, -0.95, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -0.95, -0.9, -0.85, -0.8, -0.7, -0.6, -0.5, -0.4, -0.2]) },\n    { name: \"triangle\", expression: 1.0, samples: centerWave([1.0 / 15.0, 3.0 / 15.0, 5.0 / 15.0, 7.0 / 15.0, 9.0 / 15.0, 11.0 / 15.0, 13.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 13.0 / 15.0, 11.0 / 15.0, 9.0 / 15.0, 7.0 / 15.0, 5.0 / 15.0, 3.0 / 15.0, 1.0 / 15.0, -1.0 / 15.0, -3.0 / 15.0, -5.0 / 15.0, -7.0 / 15.0, -9.0 / 15.0, -11.0 / 15.0, -13.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -13.0 / 15.0, -11.0 / 15.0, -9.0 / 15.0, -7.0 / 15.0, -5.0 / 15.0, -3.0 / 15.0, -1.0 / 15.0]) },\n    { name: \"square\", expression: 0.5, samples: centerWave([1.0, -1.0]) },\n    { name: \"1/4 pulse\", expression: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0]) },\n    { name: \"1/8 pulse\", expression: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },\n    { name: \"sawtooth\", expression: 0.65, samples: centerWave([1.0 / 31.0, 3.0 / 31.0, 5.0 / 31.0, 7.0 / 31.0, 9.0 / 31.0, 11.0 / 31.0, 13.0 / 31.0, 15.0 / 31.0, 17.0 / 31.0, 19.0 / 31.0, 21.0 / 31.0, 23.0 / 31.0, 25.0 / 31.0, 27.0 / 31.0, 29.0 / 31.0, 31.0 / 31.0, -31.0 / 31.0, -29.0 / 31.0, -27.0 / 31.0, -25.0 / 31.0, -23.0 / 31.0, -21.0 / 31.0, -19.0 / 31.0, -17.0 / 31.0, -15.0 / 31.0, -13.0 / 31.0, -11.0 / 31.0, -9.0 / 31.0, -7.0 / 31.0, -5.0 / 31.0, -3.0 / 31.0, -1.0 / 31.0]) },\n    { name: \"double saw\", expression: 0.5, samples: centerWave([0.0, -0.2, -0.4, -0.6, -0.8, -1.0, 1.0, -0.8, -0.6, -0.4, -0.2, 1.0, 0.8, 0.6, 0.4, 0.2]) },\n    { name: \"double pulse\", expression: 0.4, samples: centerWave([1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0]) },\n    { name: \"spiky\", expression: 0.4, samples: centerWave([1.0, -1.0, 1.0, -1.0, 1.0, 0.0]) },\n    { name: \"sine\", expression: 0.88, samples: centerAndNormalizeWave([8.0, 9.0, 11.0, 12.0, 13.0, 14.0, 15.0, 15.0, 15.0, 15.0, 14.0, 14.0, 13.0, 11.0, 10.0, 9.0, 7.0, 6.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 4.0, 5.0, 6.0]) },\n    { name: \"flute\", expression: 0.8, samples: centerAndNormalizeWave([3.0, 4.0, 6.0, 8.0, 10.0, 11.0, 13.0, 14.0, 15.0, 15.0, 14.0, 13.0, 11.0, 8.0, 5.0, 3.0]) },\n    { name: \"harp\", expression: 0.8, samples: centerAndNormalizeWave([0.0, 3.0, 3.0, 3.0, 4.0, 5.0, 5.0, 6.0, 7.0, 8.0, 9.0, 11.0, 11.0, 13.0, 13.0, 15.0, 15.0, 14.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 7.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0]) },\n    { name: \"sharp clarinet\", expression: 0.38, samples: centerAndNormalizeWave([0.0, 0.0, 0.0, 1.0, 1.0, 8.0, 8.0, 9.0, 9.0, 9.0, 8.0, 8.0, 8.0, 8.0, 8.0, 9.0, 9.0, 7.0, 9.0, 9.0, 10.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) },\n    { name: \"soft clarinet\", expression: 0.45, samples: centerAndNormalizeWave([0.0, 1.0, 5.0, 8.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 11.0, 11.0, 12.0, 13.0, 12.0, 10.0, 9.0, 7.0, 6.0, 4.0, 3.0, 3.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]) },\n    { name: \"alto sax\", expression: 0.3, samples: centerAndNormalizeWave([5.0, 5.0, 6.0, 4.0, 3.0, 6.0, 8.0, 7.0, 2.0, 1.0, 5.0, 6.0, 5.0, 4.0, 5.0, 7.0, 9.0, 11.0, 13.0, 14.0, 14.0, 14.0, 14.0, 13.0, 10.0, 8.0, 7.0, 7.0, 4.0, 3.0, 4.0, 2.0]) },\n    { name: \"bassoon\", expression: 0.35, samples: centerAndNormalizeWave([9.0, 9.0, 7.0, 6.0, 5.0, 4.0, 4.0, 4.0, 4.0, 5.0, 7.0, 8.0, 9.0, 10.0, 11.0, 13.0, 13.0, 11.0, 10.0, 9.0, 7.0, 6.0, 4.0, 2.0, 1.0, 1.0, 1.0, 2.0, 2.0, 5.0, 11.0, 14.0]) },\n    { name: \"trumpet\", expression: 0.22, samples: centerAndNormalizeWave([10.0, 11.0, 8.0, 6.0, 5.0, 5.0, 5.0, 6.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 7.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0, 8.0, 9.0, 11.0, 14.0]) },\n    { name: \"electric guitar\", expression: 0.2, samples: centerAndNormalizeWave([11.0, 12.0, 12.0, 10.0, 6.0, 6.0, 8.0, 0.0, 2.0, 4.0, 8.0, 10.0, 9.0, 10.0, 1.0, 7.0, 11.0, 3.0, 6.0, 6.0, 8.0, 13.0, 14.0, 2.0, 0.0, 12.0, 8.0, 4.0, 13.0, 11.0, 10.0, 13.0]) },\n    { name: \"organ\", expression: 0.2, samples: centerAndNormalizeWave([11.0, 10.0, 12.0, 11.0, 14.0, 7.0, 5.0, 5.0, 12.0, 10.0, 10.0, 9.0, 12.0, 6.0, 4.0, 5.0, 13.0, 12.0, 12.0, 10.0, 12.0, 5.0, 2.0, 2.0, 8.0, 6.0, 6.0, 5.0, 8.0, 3.0, 2.0, 1.0]) },\n    { name: \"pan flute\", expression: 0.35, samples: centerAndNormalizeWave([1.0, 4.0, 7.0, 6.0, 7.0, 9.0, 7.0, 7.0, 11.0, 12.0, 13.0, 15.0, 13.0, 11.0, 11.0, 12.0, 13.0, 10.0, 7.0, 5.0, 3.0, 6.0, 10.0, 7.0, 3.0, 3.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0]) },\n    { name: \"glitch\", expression: 0.5, samples: centerWave([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0]) },\n    { name: \"trapezoid\", expression: 1.0, samples: centerWave([1.0 / 15.0, 6.0 / 15.0, 10.0 / 15.0, 14.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 14.0 / 15.0, 10.0 / 15.0, 6.0 / 15.0, 1.0 / 15.0, -1.0 / 15.0, -6.0 / 15.0, -10.0 / 15.0, -14.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -14.0 / 15.0, -10.0 / 15.0, -6.0 / 15.0, -1.0 / 15.0,]) },\n    { name: \"modbox 10% pulse\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },\n    { name: \"modbox sunsoft bass\", expression: 1.0, samples: centerAndNormalizeWave([0.0, 0.1875, 0.3125, 0.5625, 0.5, 0.75, 0.875, 1.0, 1.0, 0.6875, 0.5, 0.625, 0.625, 0.5, 0.375, 0.5625, 0.4375, 0.5625, 0.4375, 0.4375, 0.3125, 0.1875, 0.1875, 0.375, 0.5625, 0.5625, 0.5625, 0.5625, 0.5625, 0.4375, 0.25, 0.0]) },\n    { name: \"modbox loud pulse\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 0.7, 0.1, 0.1, 0, 0, 0, 0, 0, 0.1, 0.2, 0.15, 0.25, 0.125, 0.215, 0.345, 4.0]) },\n    { name: \"modbox sax\", expression: 0.5, samples: centerAndNormalizeWave([1.0 / 15.0, 3.0 / 15.0, 5.0 / 15.0, 9.0, 0.06]) },\n    { name: \"modbox guitar\", expression: 0.5, samples: centerAndNormalizeWave([-0.5, 3.5, 3.0, -0.5, -0.25, -1.0]) },\n    { name: \"modbox sine\", expression: 0.5, samples: centerAndNormalizeWave([0.0, 0.05, 0.125, 0.2, 0.25, 0.3, 0.425, 0.475, 0.525, 0.625, 0.675, 0.725, 0.775, 0.8, 0.825, 0.875, 0.9, 0.925, 0.95, 0.975, 0.98, 0.99, 0.995, 1, 0.995, 0.99, 0.98, 0.975, 0.95, 0.925, 0.9, 0.875, 0.825, 0.8, 0.775, 0.725, 0.675, 0.625, 0.525, 0.475, 0.425, 0.3, 0.25, 0.2, 0.125, 0.05, 0.0, -0.05, -0.125, -0.2, -0.25, -0.3, -0.425, -0.475, -0.525, -0.625, -0.675, -0.725, -0.775, -0.8, -0.825, -0.875, -0.9, -0.925, -0.95, -0.975, -0.98, -0.99, -0.995, -1, -0.995, -0.99, -0.98, -0.975, -0.95, -0.925, -0.9, -0.875, -0.825, -0.8, -0.775, -0.725, -0.675, -0.625, -0.525, -0.475, -0.425, -0.3, -0.25, -0.2, -0.125, -0.05]) },\n    { name: \"modbox atari bass\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0]) },\n    { name: \"modbox atari pulse\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]) },\n    { name: \"modbox 1% pulse\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },\n    { name: \"modbox curved sawtooth\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 1.0 / 2.0, 1.0 / 3.0, 1.0 / 4.0]) },\n    { name: \"modbox viola\", expression: 0.45, samples: centerAndNormalizeWave([-0.9, -1.0, -0.85, -0.775, -0.7, -0.6, -0.5, -0.4, -0.325, -0.225, -0.2, -0.125, -0.1, -0.11, -0.125, -0.15, -0.175, -0.18, -0.2, -0.21, -0.22, -0.21, -0.2, -0.175, -0.15, -0.1, -0.5, 0.75, 0.11, 0.175, 0.2, 0.25, 0.26, 0.275, 0.26, 0.25, 0.225, 0.2, 0.19, 0.18, 0.19, 0.2, 0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.275, 0.28, 0.29, 0.3, 0.29, 0.28, 0.27, 0.26, 0.25, 0.225, 0.2, 0.175, 0.15, 0.1, 0.075, 0.0, -0.01, -0.025, 0.025, 0.075, 0.2, 0.3, 0.475, 0.6, 0.75, 0.85, 0.85, 1.0, 0.99, 0.95, 0.8, 0.675, 0.475, 0.275, 0.01, -0.15, -0.3, -0.475, -0.5, -0.6, -0.71, -0.81, -0.9, -1.0, -0.9]) },\n    { name: \"modbox brass\", expression: 0.45, samples: centerAndNormalizeWave([-1.0, -0.95, -0.975, -0.9, -0.85, -0.8, -0.775, -0.65, -0.6, -0.5, -0.475, -0.35, -0.275, -0.2, -0.125, -0.05, 0.0, 0.075, 0.125, 0.15, 0.20, 0.21, 0.225, 0.25, 0.225, 0.21, 0.20, 0.19, 0.175, 0.125, 0.10, 0.075, 0.06, 0.05, 0.04, 0.025, 0.04, 0.05, 0.10, 0.15, 0.225, 0.325, 0.425, 0.575, 0.70, 0.85, 0.95, 1.0, 0.9, 0.675, 0.375, 0.2, 0.275, 0.4, 0.5, 0.55, 0.6, 0.625, 0.65, 0.65, 0.65, 0.65, 0.64, 0.6, 0.55, 0.5, 0.4, 0.325, 0.25, 0.15, 0.05, -0.05, -0.15, -0.275, -0.35, -0.45, -0.55, -0.65, -0.7, -0.78, -0.825, -0.9, -0.925, -0.95, -0.975]) },\n    { name: \"modbox acoustic bass\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 0.0, 0.1, -0.1, -0.2, -0.4, -0.3, -1.0]) },\n    { name: \"modbox lyre\", expression: 0.45, samples: centerAndNormalizeWave([1.0, -1.0, 4.0, 2.15, 4.13, 5.15, 0.0, -0.05, 1.0]) },\n    { name: \"modbox ramp pulse\", expression: 0.5, samples: centerAndNormalizeWave([6.1, -2.9, 1.4, -2.9]) },\n    { name: \"modbox piccolo\", expression: 0.5, samples: centerAndNormalizeWave([1, 4, 2, 1, -0.1, -1, -0.12]) },\n    { name: \"modbox squaretooth\", expression: 0.5, samples: centerAndNormalizeWave([0.2, 1.0, 2.6, 1.0, 0.0, -2.4]) },\n    { name: \"modbox flatline\", expression: 1.0, samples: centerAndNormalizeWave([1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]) },\n    { name: \"modbox pnryshk a (u5)\", expression: 0.4, samples: centerAndNormalizeWave([1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0]) },\n    { name: \"modbox pnryshk b (riff)\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -0.9, 0.8, -0.7, 0.6, -0.5, 0.4, -0.3, 0.2, -0.1, 0.0, -0.1, 0.2, -0.3, 0.4, -0.5, 0.6, -0.7, 0.8, -0.9, 1.0]) },\n    { name: \"sandbox shrill lute\", expression: 0.94, samples: centerAndNormalizeWave([1.0, 1.5, 1.25, 1.2, 1.3, 1.5]) },\n    { name: \"sandbox bassoon\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]) },\n    { name: \"sandbox shrill bass\", expression: 0.5, samples: centerAndNormalizeWave([0, 1, 0, 0, 1, 0, 1, 0, 0, 0]) },\n    { name: \"sandbox nes pulse\", expression: 0.4, samples: centerAndNormalizeWave([2.1, -2.2, 1.2, 3]) },\n    { name: \"sandbox saw bass\", expression: 0.25, samples: centerAndNormalizeWave([1, 1, 1, 1, 0, 2, 1, 2, 3, 1, -2, 1, 4, 1, 4, 2, 1, 6, -3, 4, 2, 1, 5, 1, 4, 1, 5, 6, 7, 1, 6, 1, 4, 1, 9]) },\n    { name: \"sandbox euphonium\", expression: 0.3, samples: centerAndNormalizeWave([0, 1, 2, 1, 2, 1, 4, 2, 5, 0, -2, 1, 5, 1, 2, 1, 2, 4, 5, 1, 5, -2, 5, 10, 1]) },\n    { name: \"sandbox shrill pulse\", expression: 0.3, samples: centerAndNormalizeWave([4 - 2, 0, 4, 1, 4, 6, 7, 3]) },\n    { name: \"sandbox r-sawtooth\", expression: 0.2, samples: centerAndNormalizeWave([6.1, -2.9, 1.4, -2.9]) },\n    { name: \"sandbox recorder\", expression: 0.2, samples: centerAndNormalizeWave([5.0, -5.1, 4.0, -4.1, 3.0, -3.1, 2.0, -2.1, 1.0, -1.1, 6.0]) },\n    { name: \"sandbox narrow saw\", expression: 1.2, samples: centerAndNormalizeWave([0.1, 0.13 / -0.1, 0.13 / -0.3, 0.13 / -0.5, 0.13 / -0.7, 0.13 / -0.9, 0.13 / -0.11, 0.13 / -0.31, 0.13 / -0.51, 0.13 / -0.71, 0.13 / -0.91, 0.13 / -0.12, 0.13 / -0.32, 0.13 / -0.52, 0.13 / -0.72, 0.13 / -0.92, 0.13 / -0.13, 0.13 / 0.13, 0.13 / 0.92, 0.13 / 0.72, 0.13 / 0.52, 0.13 / 0.32, 0.13 / 0.12, 0.13 / 0.91, 0.13 / 0.71, 0.13 / 0.51, 0.13 / 0.31, 0.13 / 0.11, 0.13 / 0.9, 0.13 / 0.7, 0.13 / 0.5, 0.13 / 0.3, 0.13]) },\n    { name: \"sandbox deep square\", expression: 1.0, samples: centerAndNormalizeWave([1.0, 2.25, 1.0, -1.0, -2.25, -1.0]) },\n    { name: \"sandbox ring pulse\", expression: 1.0, samples: centerAndNormalizeWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },\n    { name: \"sandbox double sine\", expression: 1.0, samples: centerAndNormalizeWave([1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.0, -1.0, -1.1, -1.2, -1.3, -1.4, -1.5, -1.6, -1.7, -1.8, -1.9, -1.8, -1.7, -1.6, -1.5, -1.4, -1.3, -1.2, -1.1, -1.0]) },\n    { name: \"sandbox contrabass\", expression: 0.5, samples: centerAndNormalizeWave([4.20, 6.9, 1.337, 6.66]) },\n    { name: \"sandbox double bass\", expression: 0.4, samples: centerAndNormalizeWave([0.0, 0.1875, 0.3125, 0.5625, 0.5, 0.75, 0.875, 1.0, -1.0, -0.6875, -0.5, -0.625, -0.625, -0.5, -0.375, -0.5625, -0.4375, -0.5625, -0.4375, -0.4375, -0.3125, -0.1875, 0.1875, 0.375, 0.5625, -0.5625, 0.5625, 0.5625, 0.5625, 0.4375, 0.25, 0.0]) },\n    { name: \"haileybox test1\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 0.5, -1.0]) },\n    { name: \"brucebox pokey 4bit lfsr\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, -1.0]) },\n    { name: \"brucebox pokey 5step bass\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, 1.0, -1.0, 1.0]) },\n    { name: \"brucebox isolated spiky\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, 1.0, -1.0, 1.0, -1.0]) },\n    { name: \"nerdbox unnamed 1\", expression: 0.5, samples: centerAndNormalizeWave([0.2, 0.8 / 0.2, 0.7, -0.4, -1.0, 0.5, -0.5 / 0.6]) },\n    { name: \"nerdbox unnamed 2\", expression: 0.5, samples: centerAndNormalizeWave([2.0, 5.0 / 55.0, -9.0, 6.5 / 6.5, -55.0, 18.5 / -26.0]) },\n    { name: \"zefbox semi-square\", expression: 1.0, samples: centerAndNormalizeWave([1.0, 1.5, 2.0, 2.5, 2.5, 2.5, 2.0, 1.5, 1.0]) },\n    { name: \"zefbox deep square\", expression: 1.0, samples: centerAndNormalizeWave([1.0, 2.25, 1.0, -1.0, -2.25, -1.0]) },\n    { name: \"zefbox squaretal\", expression: 0.7, samples: centerAndNormalizeWave([1.5, 1.0, 1.5, -1.5, -1.0, -1.5]) },\n    { name: \"zefbox saw wide\", expression: 0.65, samples: centerAndNormalizeWave([0.0, -0.4, -0.8, -1.2, -1.6, -2.0, 0.0, -0.4, -0.8, -1.2, -1.6]) },\n    { name: \"zefbox saw narrow\", expression: 0.65, samples: centerAndNormalizeWave([1, 0.5, 1, 0.5, 1, 0.5, 1, 2, 1, 2, 1]) },\n    { name: \"zefbox deep sawtooth\", expression: 0.5, samples: centerAndNormalizeWave([0, 2, 3, 4, 4.5, 5, 5.5, 6, 6.25, 6.5, 6.75, 7, 6.75, 6.5, 6.25, 6, 5.5, 5, 4.5, 4, 3, 2, 1]) },\n    { name: \"zefbox sawtal\", expression: 0.3, samples: centerAndNormalizeWave([1.5, 1.0, 1.25, -0.5, 1.5, -0.5, 0.0, -1.5, 1.5, 0.0, 0.5, -1.5, 0.5, 1.25, -1.0, -1.5]) },\n    { name: \"zefbox deep sawtal\", expression: 0.7, samples: centerAndNormalizeWave([0.75, 0.25, 0.5, -0.5, 0.5, -0.5, -0.25, -0.75]) },\n    { name: \"zefbox pulse\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -2.0, -2.0, -1.5, -1.5, -1.25, -1.25, -1.0, -1.0]) },\n    { name: \"zefbox triple pulse\", expression: 0.4, samples: centerAndNormalizeWave([1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.5, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.5]) },\n    { name: \"zefbox high pulse\", expression: 0.2, samples: centerAndNormalizeWave([1, -2, 2, -3, 3, -4, 5, -4, 3, -3, 2, -2, 1]) },\n    { name: \"zefbox deep pulse\", expression: 0.2, samples: centerAndNormalizeWave([1, 2, 2, -2, -2, -3, -4, -4, -5, -5, -5, -5, 0, -1, -2]) },\n    { name: \"wackybox guitar string\", expression: 0.6, samples: centerAndNormalizeWave([0, 63, 63, 63, 63, 19, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 11, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 27, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 34, 63, 63, 63, 63]) },\n    { name: \"wackybox intense\", expression: 0.6, samples: centerAndNormalizeWave([36, 25, 33, 35, 18, 51, 22, 40, 27, 37, 31, 33, 25, 29, 41, 23, 31, 31, 45, 20, 37, 23, 29, 26, 42, 29, 33, 26, 31, 27, 40, 25, 40, 26, 37, 24, 41, 32, 0, 32, 33, 29, 32, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31]) },\n    { name: \"wackybox buzz wave\", expression: 0.6, samples: centerAndNormalizeWave([0, 1, 1, 2, 4, 4, 4, 4, 5, 5, 6, 6, 6, 7, 8, 8, 8, 9, 9, 9, 9, 9, 9, 8, 8, 8, 11, 15, 23, 62, 61, 60, 58, 56, 56, 54, 53, 52, 50, 49, 48, 47, 47, 45, 45, 45, 44, 44, 43, 43, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 53]) },\n    { name: \"todbox 1/3 pulse\", expression: 0.5, samples: centerWave([1.0, -1.0, -1.0]) },\n    { name: \"todbox 1/5 pulse\", expression: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0, -1.0]) },\n    { name: \"todbox slap bass\", expression: 0.5, samples: centerAndNormalizeWave([1, 0.5, 0, 0.5, 1.25, 0.5, -0.25, 0.1, -0.1, 0.1, 1.1, 2.1, 3, 3.5, 2.9, 3.3, 2.7, 2.9, 2.3, 2, 1.9, 1.8, 1, 0.7, 0.9, 0.8, 0.4, 0.1, 0.0, 0.2, 0.4, 0.6, 0.5, 0.8]) },\n    { name: \"todbox harsh wave\", expression: 0.45, samples: centerAndNormalizeWave([1.0, -1.0, -1.0, -1.0, 0.5, 0.5, 0.5, 0.7, 0.39, 1.3, 0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },\n    { name: \"todbox accordian\", expression: 0.5, samples: centerAndNormalizeWave([0, 1, 1, 2, 2, 1.5, 1.5, 0.8, 0, -2, -3.25, -4, -4.5, -5.5, -6, -5.75, -5.5, -5, -5, -5, -6, -6, -6, -5, -4, -3, -2, -1, 0.75, 1, 2, 3, 4, 5, 6, 6.5, 7.5, 8, 7.75, 6, 5.25, 5, 5, 5, 5, 5, 4.25, 3.75, 3.25, 2.75, 1.25, -0.75, -2, -0.75, 1.25, 1.25, 2, 2, 2, 2, 1.5, -1, -2, -1, 1.5, 2, 2.75, 2.75, 2.75, 3, 2.75, -1, -2, -2.5, -2, -1, -2.25, -2.75, -2, -3, -1.75, 1, 2, 3.5, 4, 5.25, 6, 8, 9.75, 10, 9.5, 9, 8.5, 7.5, 6.5, 5.25, 5, 4.5, 4, 4, 4, 3.25, 2.5, 2, 1, -0.5, -2, -3.5, -4, -4, -4, -3.75, -3, -2, -1]) },\n    { name: \"todbox beta banana wave\", expression: 0.8, samples: centerAndNormalizeWave([0.0, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.85, 0.9, 0.95, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.95, 0.9, 0.85, 0.8, 0.7, 0.6, 0.5, 0.4, 0.2, 0.0]) },\n    { name: \"todbox beta test wave\", expression: 0.5, samples: centerAndNormalizeWave([56, 0, -52, 16, 3, 3, 2, -35, 20, 147, -53, 0, 0, 5, -6]) },\n    { name: \"todbox beta real snare\", expression: 1.0, samples: centerAndNormalizeWave([0.00000, -0.01208, -0.02997, -0.04382, -0.06042, -0.07529, -0.09116, -0.10654, -0.12189, -0.13751, -0.15289, -0.16849, -0.18387, -0.19974, -0.21484, -0.23071, -0.24557, -0.26144, -0.27731, -0.29141, -0.30350, -0.32416, -0.34406, -0.32947, -0.31158, -0.33725, -0.37579, -0.39746, -0.40201, -0.40906, -0.44180, -0.47229, -0.47379, -0.47733, -0.45239, -0.33954, -0.22894, -0.22443, -0.32138, -0.46371, -0.57178, -0.61081, -0.59998, -0.61459, -0.62189, -0.43979, -0.19217, -0.12643, -0.17252, -0.20956, -0.20981, -0.19217, -0.22845, -0.34332, -0.50629, -0.64307, -0.72922, -0.81384, -0.87857, -0.90149, -0.88687, -0.86169, -0.87781, -0.80478, -0.52493, -0.31308, -0.33249, -0.39395, -0.39017, -0.30301, -0.19949, -0.13071, -0.02493, 0.14307, 0.34961, 0.52542, 0.63223, 0.68613, 0.74710, 0.87305, 0.98184, 0.98889, 0.97052, 0.99066, 0.99747, 0.99344, 0.99469, 0.99393, 0.99570, 0.99393, 0.99521, 0.99469, 0.99420, 0.99521, 0.99420, 0.99521, 0.99469, 0.99469, 0.99521, 0.99420, 0.99545, 0.99445, 0.99469, 0.99493, 0.99420, 0.99521, 0.99393, 0.99493, 0.99469, 0.99445, 0.99570, 0.99445, 0.99521, 0.99469, 0.99469, 0.99521, 0.99420, 0.99545, 0.99445, 0.99445, 0.99493, 0.99420, 0.99545, 0.99420, 0.99493, 0.99493, 0.99420, 0.99545, 0.99445, 0.99521, 0.99469, 0.99445, 0.99545, 0.99368, 0.99393, 0.99445, 0.99268, 0.97983, 0.97229, 0.95944, 0.88486, 0.76773, 0.64481, 0.53098, 0.39847, 0.19318, -0.03827, -0.20325, -0.39319, -0.68765, -0.88461, -0.93448, -0.96069, -0.97681, -0.98715, -0.99042, -0.99142, -0.99091, -0.99142, -0.99219, -0.99091, -0.99219, -0.99066, -0.99142, -0.99142, -0.99118, -0.99191, -0.99066, -0.99191, -0.99142, -0.99142, -0.99191, -0.99091, -0.99219, -0.99118, -0.99142, -0.99167, -0.99091, -0.99219, -0.99091, -0.99167, -0.99142, -0.99091, -0.99191, -0.99091, -0.99191, -0.99142, -0.99118, -0.99191, -0.99066, -0.99191, -0.99118, -0.99142, -0.99191, -0.99066, -0.99191, -0.99091, -0.99167, -0.99191, -0.99118, -0.99219, -0.99091, -0.99191, -0.99142, -0.99142, -0.99243, -0.98865, -0.98764, -0.99219, -0.98083, -0.92517, -0.92770, -0.91486, -0.59042, -0.15189, 0.02945, 0.05667, 0.06195, 0.00629, -0.18008, -0.56497, -0.88010, -0.92770, -0.92871, -0.97705, -0.99167, -0.98663, -0.99118, -0.99042, -0.99219, -0.99142, -0.99118, -0.98941, -0.99219, -1.00000, -0.97580, -0.95993, -0.99948, -0.98236, -0.84659, -0.74860, -0.70679, -0.59747, -0.48035, -0.41687, -0.36826, -0.29745, -0.18185, -0.06219, 0.02164, 0.07907, 0.13123, 0.18033, 0.19620, 0.15692, 0.14053, 0.20251, 0.27530, 0.30905, 0.29092, 0.27252, 0.30402, 0.32416, 0.32214, 0.35239, 0.39670, 0.43198, 0.49420, 0.58487, 0.64154, 0.65967, 0.67050, 0.67026, 0.66522, 0.65540, 0.66119, 0.70627, 0.75842, 0.78738, 0.78940, 0.78763, 0.80402, 0.85944, 0.94559, 0.98990, 0.98160, 0.98007, 0.99368, 0.99393, 0.98538, 0.97580, 0.97101, 0.93802, 0.81812, 0.64633, 0.46649, 0.28613, 0.14685, 0.08966, 0.12543, 0.20325, 0.24557, 0.18866, 0.02795, -0.20175, -0.44205, -0.58713, -0.57629, -0.41385, -0.14255, 0.18033, 0.47882, 0.68311, 0.72314, 0.62064, 0.48309, 0.43073, 0.53577, 0.72794, 0.90250, 0.97354, 0.97000, 0.98083, 0.99191, 0.99319, 0.99493, 0.99393, 0.99521, 0.99393, 0.99545, 0.99420, 0.99493, 0.99493, 0.99445, 0.99545, 0.99420, 0.99545, 0.99243, 0.98917, 0.98386, 0.97781, 0.95844, 0.89066, 0.81561, 0.78134, 0.77277, 0.75995, 0.73022, 0.67126, 0.57178, 0.47000, 0.38361, 0.29419, 0.20703, 0.14734, 0.15866, 0.25162, 0.35818, 0.45062, 0.56750, 0.69748, 0.81232, 0.89697, 0.95062, 0.97656, 0.98615, 0.99191, 0.99219, 0.99243, 0.99368, 0.99368, 0.97028, 0.95566, 0.94559, 0.82617, 0.59973, 0.38361, 0.23901, 0.15338, 0.12921, 0.11206, 0.04382, -0.12946, -0.43552, -0.72644, -0.89847, -0.95465, -0.95541, -0.97229, -0.99268, -0.99319, -0.98840, -0.99142, -0.99167, -0.99091, -0.98840, -0.98965, -0.99368, -0.97455, -0.95010, -0.94684, -0.96219, -0.98514, -0.99243, -0.98889, -0.98917, -0.99142, -0.99219, -0.99091, -0.99191, -0.99142, -0.99142, -0.99191, -0.99066, -0.99167, -0.99091, -0.99142, -0.99191, -0.99091, -0.99191, -0.99091, -0.99167, -0.99167, -0.99091, -0.99219, -0.99091, -0.99191, -0.99142, -0.99118, -0.99191, -0.99066, -0.99191, -0.99091, -0.99118, -0.99243, -0.98941, -0.98462, -0.96976, -0.96320, -0.96194, -0.87305, -0.66196, -0.44809, -0.29495, -0.18085, -0.11813, -0.11334, -0.18564, -0.34885, -0.58237, -0.80450, -0.93726, -0.97806, -0.97354, -0.97531, -0.98990, -0.99368, -0.98941, -0.99219, -0.99091, -0.99142, -0.99167, -0.99091, -0.99191, -0.99118, -0.99219, -0.98236, -0.97781, -0.97656, -0.95135, -0.87204, -0.71335, -0.52139, -0.34232, -0.17783, -0.00906, 0.14886, 0.30450, 0.48889, 0.67404, 0.84030, 0.94128, 0.97681, 0.98462, 0.98337, 0.99142, 0.99521, 0.99493, 0.99420, 0.99445, 0.99521, 0.99393, 0.99545, 0.99445, 0.99521, 0.99521, 0.99445, 0.99570, 0.99445, 0.99521, 0.99469, 0.99445, 0.99521, 0.99420, 0.99521, 0.99445, 0.99445, 0.99521, 0.99445, 0.99545, 0.99445, 0.99469, 0.99493, 0.99393, 0.99493, 0.99445, 0.99393, 0.98285, 0.97781, 0.97479, 0.92844, 0.82114, 0.66095, 0.52417, 0.46826, 0.46722, 0.47934, 0.47379, 0.47076, 0.48209, 0.42014, 0.25439, 0.10074, -0.00302, -0.08966, -0.16068, -0.21436, -0.22040, -0.15137, -0.00476, 0.18536, 0.37631, 0.52292, 0.62164, 0.70425, 0.74835, 0.72366, 0.63928, 0.52567, 0.40805, 0.35666, 0.42896, 0.60175, 0.80200, 0.92743, 0.96548, 0.97632, 0.98337, 0.99066, 0.99521, 0.99420, 0.99368, 0.99292, 0.98840, 0.98083, 0.96774, 0.93323, 0.85440, 0.69470, 0.47202, 0.20425, -0.08890, -0.36423, -0.60025, -0.77481, -0.90173, -0.96017, -0.97028, -0.98108, -0.98840, -0.99219, -0.98990, -0.99219, -0.99142, -0.99142, -0.99219, -0.99091, -0.99243, -0.99066, -0.99142, -0.99142, -0.99118, -0.99191, -0.99066, -0.99167, -0.99142, -0.99142, -0.99219, -0.99091, -0.99191, -0.99118, -0.99142, -0.99191, -0.99091, -0.99191, -0.99091, -0.99167, -0.99191, -0.99118, -0.99219, -0.99091, -0.99167, -0.99142, -0.99142, -0.99219, -0.99091, -0.99191, -0.99142, -0.99118, -0.98917, -0.99042, -0.99445, -0.97330, -0.95590, -0.96219, -0.89670, -0.72241, -0.55112, -0.44809, -0.39319, -0.37833, -0.35641, -0.26270, -0.14230, -0.11282, -0.13525, -0.11536, -0.09671, -0.11511, -0.18060, -0.26874, -0.33374, -0.42215, -0.51358, -0.44785, -0.30450, -0.28613, -0.30527, -0.25037, -0.15390, -0.08286, -0.11157, -0.12592, -0.00327, 0.13803, 0.19141, 0.12820, 0.01788, -0.03952, -0.12592, -0.26773, -0.34634, -0.31384, -0.18060, -0.01080, 0.13574, 0.26120, 0.36975, 0.46573, 0.55087, 0.63626, 0.73022, 0.83072, 0.92014, 0.97177, 0.98587, 0.98413, 0.99167, 0.99445, 0.99292, 0.99219, 0.98740, 0.98007, 0.96472, 0.92239, 0.82166, 0.69067, 0.57959, 0.54962, 0.59695, 0.64255, 0.64633, 0.60629, 0.55942, 0.54910, 0.58966, 0.61887, 0.56952, 0.54181, 0.59518, 0.63248, 0.63876, 0.65463, 0.73398, 0.88312, 0.96927, 0.97101, 0.97958, 0.99344, 0.99420, 0.99268, 0.99493, 0.99469, 0.99445, 0.99521, 0.99445, 0.99545, 0.99420, 0.99493, 0.99493, 0.99420, 0.99545, 0.99420, 0.99493, 0.99420, 0.99393, 0.99420, 0.98840, 0.98309, 0.98309, 0.96069, 0.88461, 0.79370, 0.72064, 0.65765, 0.59998, 0.53247, 0.49268, 0.48615, 0.44205, 0.38034, 0.36447, 0.38715, 0.39294, 0.32645, 0.19595, 0.07782, -0.05893, -0.27832, -0.48309, -0.62619, -0.72995, -0.79999, -0.84583, -0.82166, -0.73575, -0.67227, -0.65491, -0.64960, -0.66397, -0.70175, -0.72894, -0.74658, -0.76724, -0.79520, -0.82846, -0.86523, -0.90527, -0.94382, -0.89948, -0.69849, -0.47479, -0.31662, -0.15414, -0.00729, 0.07077, 0.08237, 0.04431, -0.02292, -0.11761, -0.24307, -0.36926, -0.45087, -0.46170, -0.40250, -0.30679, -0.17529, 0.00000, 0.14331, 0.24179, 0.36774, 0.49545, 0.56522, 0.57907, 0.56775, 0.53851, 0.51132, 0.48688, 0.41913, 0.26044, 0.00955, -0.26297, -0.46396, -0.62341, -0.82214, -0.94684, -0.96774, -0.97531, -0.98413, -0.99017, -0.98990, -0.99219, -0.99066, -0.99142, -0.99167, -0.99118, -0.99219, -0.98990, -0.99118, -0.99368, -0.99142, -0.97757, -0.97403, -0.98007, -0.96170, -0.86826, -0.67783, -0.52719, -0.48788, -0.45490, -0.43146, -0.47681, -0.54105, -0.57983, -0.60904, -0.62317, -0.59949, -0.55566, -0.52063, -0.52115, -0.55112, -0.56244, -0.58337, -0.65540, -0.73373, -0.77228, -0.74759, -0.68890, -0.64609, -0.61887, -0.58060, -0.50351, -0.40729, -0.33929, -0.35110, -0.42944, -0.47028, -0.42267, -0.32718, -0.20224, -0.05640, 0.04556, 0.10529, 0.17630, 0.26169, 0.33197, 0.32138, 0.23776, 0.20956, 0.23148, 0.20352, 0.23325, 0.39267, 0.52719, 0.58438, 0.62289, 0.66345, 0.70023, 0.66296, 0.54330, 0.42618, 0.33475, 0.24533, 0.14105, 0.03851, 0.01358, 0.09143, 0.22845, 0.34961, 0.41711, 0.48740, 0.58914, 0.69519, 0.78186, 0.84357, 0.89822, 0.95389, 0.98135, 0.98615, 0.99167, 0.99243, 0.99445, 0.99420, 0.99469, 0.99493, 0.99393, 0.99545, 0.99445, 0.99521, 0.99469, 0.99445, 0.99521, 0.99420, 0.99469, 0.98965, 0.98715, 0.98563, 0.96295, 0.91736, 0.86624, 0.82367, 0.77554, 0.68411, 0.53549, 0.38916, 0.26120, 0.11435, -0.04053, -0.18161, -0.23172, -0.19394, -0.15237, -0.10730, -0.02997, 0.08588, 0.22620, 0.34305, 0.44104, 0.55740, 0.65765, 0.71259, 0.69217, 0.65363, 0.69748, 0.79572, 0.89368, 0.95514, 0.97733, 0.98413, 0.98816, 0.99243, 0.99445, 0.99243, 0.97302, 0.96674, 0.97983, 0.90378, 0.71005, 0.51056, 0.40451, 0.40982, 0.41559, 0.32996, 0.24356, 0.18866, 0.11411, 0.05365, 0.01157, -0.03247, -0.09216, -0.16095, -0.23248, -0.31662, -0.39771, -0.48663, -0.59647, -0.71536, -0.82013, -0.85287, -0.82947, -0.84937, -0.92215, -0.97177, -0.98663, -0.98816, -0.98438, -0.99091, -0.99219, -0.99091, -0.99191, -0.99042, -0.99191, -0.99091, -0.99142, -0.99191, -0.99091, -0.99191, -0.99091, -0.99167, -0.99142]) },\n    { name: \"ultrabox shortened od guitar\", expression: 0.5, samples: centerAndNormalizeWave([-0.82785, -0.67621, -0.40268, -0.43817, -0.45468, -0.22531, -0.18329, 0.24750, 0.71246, 0.52155, 0.56082, 0.48395, 0.33990, 0.46957, 0.27744, 0.42313, 0.47104, 0.18796, 0.12930, -0.13901, -0.07431, -0.16348, -0.74857, -0.73206, -0.35181, -0.26227, -0.41882, -0.27786, -0.19806, -0.19867, 0.18643, 0.24808, 0.08847, -0.06964, 0.06912, 0.20474, -0.05304, 0.29416, 0.31967, 0.14243, 0.27521, -0.23932, -0.14752, 0.12360, -0.26123, -0.26111, 0.06616, 0.26520, 0.08090, 0.15240, 0.16254, -0.12061, 0.04562, 0.00131, 0.04050, 0.08182, -0.21729, -0.17041, -0.16312, -0.08563, 0.06390, 0.05099, 0.05627, 0.02728, 0.00726, -0.13028, -0.05673, -0.14969, -0.17645, 0.35492, 0.16766, -0.00897, 0.24326, -0.00461, -0.04456, 0.01776, -0.04950, -0.01221, 0.02039, 0.07684, 0.13397, 0.39850, 0.35962, 0.13754, 0.42310, 0.27161, -0.17609, 0.03659, 0.10635, -0.21909, -0.22046, -0.20258, -0.40973, -0.40280, -0.40521, -0.66284]) },\n]);\nConfig.chipWaves = rawChipToIntegrated(_a.rawChipWaves);\nConfig.rawRawChipWaves = _a.rawChipWaves;\nConfig.firstIndexForSamplesInChipWaveList = _a.chipWaves.length;\nConfig.chipNoises = toNameMap([\n    { name: \"retro\", expression: 0.25, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n    { name: \"white\", expression: 1.0, basePitch: 69, pitchFilterMult: 8.0, isSoft: true, samples: null },\n    { name: \"clang\", expression: 0.4, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n    { name: \"buzz\", expression: 0.3, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n    { name: \"hollow\", expression: 1.5, basePitch: 96, pitchFilterMult: 1.0, isSoft: true, samples: null },\n    { name: \"shine\", expression: 1.0, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n    { name: \"deep\", expression: 1.5, basePitch: 120, pitchFilterMult: 1024.0, isSoft: true, samples: null },\n    { name: \"cutter\", expression: 0.005, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n    { name: \"metallic\", expression: 1.0, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n    { name: \"static\", expression: 1.0, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n    { name: \"1-bit white\", expression: 0.5, basePitch: 74.41, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n    { name: \"1-bit metallic\", expression: 0.5, basePitch: 86.41, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n    { name: \"crackling\", expression: 0.9, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n    { name: \"pink\", expression: 1.0, basePitch: 69, pitchFilterMult: 8.0, isSoft: true, samples: null },\n    { name: \"brownian\", expression: 1.0, basePitch: 69, pitchFilterMult: 8.0, isSoft: true, samples: null },\n]);\nConfig.filterFreqStep = 1.0 / 4.0;\nConfig.filterFreqRange = 34;\nConfig.filterFreqReferenceSetting = 28;\nConfig.filterFreqReferenceHz = 8000.0;\nConfig.filterFreqMaxHz = _a.filterFreqReferenceHz * Math.pow(2.0, _a.filterFreqStep * (_a.filterFreqRange - 1 - _a.filterFreqReferenceSetting));\nConfig.filterFreqMinHz = 8.0;\nConfig.filterGainRange = 15;\nConfig.filterGainCenter = 7;\nConfig.filterGainStep = 1.0 / 2.0;\nConfig.filterMaxPoints = 8;\nConfig.filterTypeNames = [\"low-pass\", \"high-pass\", \"peak\"];\nConfig.filterMorphCount = 10;\nConfig.filterSimpleCutRange = 11;\nConfig.filterSimplePeakRange = 8;\nConfig.fadeInRange = 10;\nConfig.fadeOutTicks = [-24, -12, -6, -3, -1, 6, 12, 24, 48, 72, 96];\nConfig.fadeOutNeutral = 4;\nConfig.drumsetFadeOutTicks = 48;\nConfig.transitions = toNameMap([\n    { name: \"normal\", isSeamless: false, continues: false, slides: false, slideTicks: 3, includeAdjacentPatterns: false },\n    { name: \"interrupt\", isSeamless: true, continues: false, slides: false, slideTicks: 3, includeAdjacentPatterns: true },\n    { name: \"continue\", isSeamless: true, continues: true, slides: false, slideTicks: 3, includeAdjacentPatterns: true },\n    { name: \"slide\", isSeamless: true, continues: false, slides: true, slideTicks: 3, includeAdjacentPatterns: true },\n    { name: \"slide in pattern\", isSeamless: true, continues: false, slides: true, slideTicks: 3, includeAdjacentPatterns: false }\n]);\nConfig.vibratos = toNameMap([\n    { name: \"none\", amplitude: 0.0, type: 0, delayTicks: 0 },\n    { name: \"light\", amplitude: 0.15, type: 0, delayTicks: 0 },\n    { name: \"delayed\", amplitude: 0.3, type: 0, delayTicks: 37 },\n    { name: \"heavy\", amplitude: 0.45, type: 0, delayTicks: 0 },\n    { name: \"shaky\", amplitude: 0.1, type: 1, delayTicks: 0 },\n]);\nConfig.vibratoTypes = toNameMap([\n    { name: \"normal\", periodsSeconds: [0.14], period: 0.14 },\n    { name: \"shaky\", periodsSeconds: [0.11, 1.618 * 0.11, 3 * 0.11], period: 266.97 },\n]);\nConfig.arpSpeedScale = [0, 0.0625, 0.125, 0.2, 0.25, 1 / 3, 0.4, 0.5, 2 / 3, 0.75, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4, 4.15, 4.3, 4.5, 4.8, 5, 5.5, 6, 8];\nConfig.unisons = toNameMap([\n    { name: \"none\", voices: 1, spread: 0.0, offset: 0.0, expression: 1.4, sign: 1.0 },\n    { name: \"shimmer\", voices: 2, spread: 0.018, offset: 0.0, expression: 0.8, sign: 1.0 },\n    { name: \"hum\", voices: 2, spread: 0.045, offset: 0.0, expression: 1.0, sign: 1.0 },\n    { name: \"honky tonk\", voices: 2, spread: 0.09, offset: 0.0, expression: 1.0, sign: 1.0 },\n    { name: \"dissonant\", voices: 2, spread: 0.25, offset: 0.0, expression: 0.9, sign: 1.0 },\n    { name: \"fifth\", voices: 2, spread: 3.5, offset: 3.5, expression: 0.9, sign: 1.0 },\n    { name: \"octave\", voices: 2, spread: 6.0, offset: 6.0, expression: 0.8, sign: 1.0 },\n    { name: \"bowed\", voices: 2, spread: 0.02, offset: 0.0, expression: 1.0, sign: -1.0 },\n    { name: \"piano\", voices: 2, spread: 0.01, offset: 0.0, expression: 1.0, sign: 0.7 },\n    { name: \"warbled\", voices: 2, spread: 0.25, offset: 0.05, expression: 0.9, sign: -0.8 },\n    { name: \"hecking gosh\", voices: 2, spread: 6.25, offset: -6.0, expression: 0.8, sign: -0.7 },\n    { name: \"spinner\", voices: 2, spread: 0.02, offset: 0.0, expression: 1.0, sign: 1.0 },\n    { name: \"detune\", voices: 1, spread: 0.0, offset: 0.25, expression: 1.0, sign: 1.0 },\n    { name: \"rising\", voices: 2, spread: 1.0, offset: 0.7, expression: 0.95, sign: 1.0 },\n    { name: \"vibrate\", voices: 2, spread: 3.5, offset: 7, expression: 0.975, sign: 1.0 },\n    { name: \"fourths\", voices: 2, spread: 4, offset: 4, expression: 0.95, sign: 1.0 },\n    { name: \"bass\", voices: 1, spread: 0, offset: -7, expression: 1.0, sign: 1.0 },\n    { name: \"dirty\", voices: 2, spread: 0, offset: 0.1, expression: 0.975, sign: 1.0 },\n    { name: \"stationary\", voices: 2, spread: 3.5, offset: 0.0, expression: 0.9, sign: 1.0 },\n    { name: \"recurve\", voices: 2, spread: 0.005, offset: 0.0, expression: 1.0, sign: 1.0 },\n    { name: \"voiced\", voices: 2, spread: 9.5, offset: 0.0, expression: 1.0, sign: 1.0 },\n    { name: \"fluctuate\", voices: 2, spread: 12, offset: 0.0, expression: 1.0, sign: 1.0 },\n    { name: \"thin\", voices: 1, spread: 0.0, offset: 50.0, expression: 1.0, sign: 1.0 },\n    { name: \"inject\", voices: 2, spread: 6.0, offset: 0.4, expression: 1.0, sign: 1.0 },\n    { name: \"askewed\", voices: 2, spread: 0.0, offset: 0.42, expression: 0.7, sign: 1.0 },\n    { name: \"resonance\", voices: 2, spread: 0.0025, offset: 0.1, expression: 0.8, sign: -1.5 },\n    { name: \"FART\", voices: 2, spread: 13, offset: -5, expression: 1.0, sign: -3 },\n    { name: \"augmented\", voices: 4, spread: 6, offset: 6, expression: 0.5, sign: 1.0 },\n    { name: \"diminished\", voices: 5, spread: 6, offset: 6, expression: 0.4, sign: 1.0 },\n    { name: \"chorus\", voices: 9, spread: 0.22, offset: 0, expression: 0.15, sign: 1.0 },\n    { name: \"block\", voices: 9, spread: 6, offset: 6, expression: 0.15, sign: 0.8 },\n    { name: \"extraterrestrial\", voices: 6, spread: 15.2, offset: -6, expression: 0.35, sign: 0.7 },\n    { name: \"bow\", voices: 9, spread: 0.006, offset: 0, expression: 0.15, sign: 0.5 }\n]);\nConfig.effectNames = [\"reverb\", \"chorus\", \"panning\", \"distortion\", \"bitcrusher\", \"post eq\", \"echo\", \"ring mod\", \"granular\", \"gain\", \"flanger\"];\nConfig.effectDisplayNames = [\"Reverb\", \"Chorus\", \"Panning\", \"Distortion\", \"Bitcrusher\", \"Post EQ\", \"Echo\", \"Ring Mod\", \"Granular\", \"Gain\", \"Flanger\"];\nConfig.effectOrder = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\nConfig.mdeffectNames = [\"pitch shift\", \"detune\", \"vibrato\", \"transition type\", \"chord type\", \"note range\"];\nConfig.mdeffectOrder = [3, 4, 0, 1, 2, 5];\nConfig.noteSizeMax = 6;\nConfig.volumeRange = 100;\nConfig.volumeLogScale = 0.0714;\nConfig.gainRangeMult = 2;\nConfig.panCenter = 50;\nConfig.panMax = _a.panCenter * 2;\nConfig.panDelaySecondsMax = 0.001;\nConfig.ringModRange = 8;\nConfig.ringModHzRange = 64;\nConfig.ringModMinHz = 20;\nConfig.ringModMaxHz = 4400;\nConfig.rmHzOffsetCenter = 200;\nConfig.rmHzOffsetMax = 400;\nConfig.rmHzOffsetMin = 0;\nConfig.granularRange = 10;\nConfig.grainSizeMin = 40;\nConfig.grainSizeMax = 2000;\nConfig.grainSizeStep = 40;\nConfig.grainRangeMax = 1600;\nConfig.grainAmountsMax = 10;\nConfig.granularEnvelopeType = 0;\nConfig.flangerRange = 24;\nConfig.flangerSpeedRange = 16;\nConfig.flangerDepthRange = 16;\nConfig.flangerFeedbackRange = 16;\nConfig.flangerMaxDelay = 0.0034 * 4.35;\nConfig.flangerPeriodMult = 0.000004;\nConfig.flangerVolumeMult = 0.45;\nConfig.chorusRange = 24;\nConfig.chorusPeriodSeconds = 2.0;\nConfig.chorusDelayRange = 0.0034;\nConfig.chorusDelayOffsets = [[1.51, 2.10, 3.35], [1.47, 2.15, 3.25]];\nConfig.chorusPhaseOffsets = [[0.0, 2.1, 4.2], [3.2, 5.3, 1.0]];\nConfig.chorusMaxDelay = _a.chorusDelayRange * (1.0 + _a.chorusDelayOffsets[0].concat(_a.chorusDelayOffsets[1]).reduce((x, y) => Math.max(x, y)));\nConfig.chords = toNameMap([\n    { name: \"simultaneous\", customInterval: false, arpeggiates: false, strumParts: 0, singleTone: false },\n    { name: \"strum\", customInterval: false, arpeggiates: false, strumParts: 1, singleTone: false },\n    { name: \"arpeggio\", customInterval: false, arpeggiates: true, strumParts: 0, singleTone: true },\n    { name: \"custom interval\", customInterval: true, arpeggiates: false, strumParts: 0, singleTone: true },\n    { name: \"monophonic\", customInterval: false, arpeggiates: false, strumParts: 0, singleTone: true }\n]);\nConfig.maxChordSize = 9;\nConfig.operatorCount = 4;\nConfig.maxPitchOrOperatorCount = Math.max(_a.maxChordSize, _a.operatorCount + 2);\nConfig.algorithms = toNameMap([\n    { name: \"1←(2 3 4)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3, 4], [], [], []] },\n    { name: \"1←(2 3←4)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3], [], [4], []] },\n    { name: \"1←2←(3 4)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2], [3, 4], [], []] },\n    { name: \"1←(2 3)←4\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3], [4], [4], []] },\n    { name: \"1←2←3←4\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2], [3], [4], []] },\n    { name: \"1←3 2←4\", carrierCount: 2, associatedCarrier: [1, 2, 1, 2], modulatedBy: [[3], [4], [], []] },\n    { name: \"1 2←(3 4)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[], [3, 4], [], []] },\n    { name: \"1 2←3←4\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[], [3], [4], []] },\n    { name: \"(1 2)←3←4\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[3], [3], [4], []] },\n    { name: \"(1 2)←(3 4)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[3, 4], [3, 4], [], []] },\n    { name: \"1 2 3←4\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[], [], [4], []] },\n    { name: \"(1 2 3)←4\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[4], [4], [4], []] },\n    { name: \"1 2 3 4\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4], modulatedBy: [[], [], [], []] },\n    { name: \"1←(2 3) 2←4\", carrierCount: 2, associatedCarrier: [1, 2, 1, 2], modulatedBy: [[2, 3], [4], [], []] },\n    { name: \"1←(2 (3 (4\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[2, 3, 4], [3, 4], [4], []] },\n]);\nConfig.algorithms6Op = toNameMap([\n    { name: \"Custom\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4, 5, 6], [], [], [], [], []] },\n    { name: \"1←2←3←4←5←6\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2], [3], [4], [5], [6], []] },\n    { name: \"1←3 2←4←5←6\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4], [], [5], [6], []] },\n    { name: \"1←3←4 2←5←6\", carrierCount: 2, associatedCarrier: [1, 1, 1, 2, 2, 2], modulatedBy: [[3], [5], [4], [], [6], []] },\n    { name: \"1←4 2←5 3←6\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[4], [5], [6], [], [], []] },\n    { name: \"1←3 2←(4 5←6)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4, 5], [], [], [6], []] },\n    { name: \"1←(3 4) 2←5←6\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3, 4], [5], [], [], [6], []] },\n    { name: \"1←3 2←(4 5 6)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4, 5, 6], [], [], [], []] },\n    { name: \"1←3 2←(4 5)←6\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4, 5], [], [6], [6], []] },\n    { name: \"1←3 2←4←(5 6)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4], [], [5, 6], [], []] },\n    { name: \"1←(2 3 4 5 6)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4, 5, 6], [], [], [], [], []] },\n    { name: \"1←(2 3←5 4←6)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4], [], [5], [6], [], []] },\n    { name: \"1←(2 3 4←5←6)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4], [], [], [5], [6], []] },\n    { name: \"1←4←5 (2 3)←6\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[4], [6], [6], [5], [], []] },\n    { name: \"1←(3 4)←5 2←6\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3, 4], [6], [5], [5], [], []] },\n    { name: \"(1 2)←4 3←(5 6)\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[4], [4], [5, 6], [], [], []] },\n    { name: \"(1 2)←5 (3 4)←6\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[5], [5], [6], [6], [], []] },\n    { name: \"(1 2 3)←(4 5 6)\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[4, 5, 6], [4, 5, 6], [4, 5, 6], [], [], []] },\n    { name: \"1←5 (2 3 4)←6\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[5], [6], [6], [6], [], []] },\n    { name: \"1 2←5 (3 4)←6\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[], [5], [6], [6], [], []] },\n    { name: \"1 2 (3 4 5)←6\", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[], [], [6], [6], [6], []] },\n    { name: \"1 2 3 (4 5)←6\", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[], [], [], [6], [6], []] },\n    { name: \"1 2←4 3←(5 6)\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3, 3, 3], modulatedBy: [[], [4], [5, 6], [], [], []] },\n    { name: \"1←4 2←(5 6) 3\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3, 3, 3,], modulatedBy: [[4], [5, 6], [], [], [], []] },\n    { name: \"1 2 3←5 4←6\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[], [], [5], [6], [], []] },\n    { name: \"1 (2 3)←5←6 4\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4,], modulatedBy: [[], [5], [5], [], [6], []] },\n    { name: \"1 2 3←5←6 4\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[], [], [5, 6], [], [], []] },\n    { name: \"(1 2 3 4 5)←6\", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[6], [6], [6], [6], [6], []] },\n    { name: \"1 2 3 4 5←6\", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[], [], [], [], [6], []] },\n    { name: \"1 2 3 4 5 6\", carrierCount: 6, associatedCarrier: [1, 2, 3, 4, 5, 6], modulatedBy: [[], [], [], [], [], []] },\n    { name: \"1←(2 (3 (4 (5 (6\", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[2, 3, 4, 5, 6], [3, 4, 5, 6], [4, 5, 6], [5, 6], [6], []] },\n    { name: \"1←(2(3(4(5(6\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4, 5, 6], [3, 4, 5, 6], [4, 5, 6], [5, 6], [6], []] },\n    { name: \"1←4(2←5(3←6\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[2, 3, 4], [3, 5], [6], [], [], []] },\n    { name: \"1←4(2←5 3←6\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[2, 3, 4], [5], [6], [], [], []] },\n]);\nConfig.operatorCarrierInterval = [0.0, 0.04, -0.073, 0.091, 0.061, 0.024];\nConfig.operatorAmplitudeMax = 15;\nConfig.operatorFrequencies = toNameMap([\n    { name: \"0.12×\", mult: 0.125, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"0.25×\", mult: 0.25, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"0.5×\", mult: 0.5, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"0.75×\", mult: 0.75, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"1×\", mult: 1.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"~1×\", mult: 1.0, hzOffset: 1.5, amplitudeSign: -1.0 },\n    { name: \"2×\", mult: 2.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"~2×\", mult: 2.0, hzOffset: -1.3, amplitudeSign: -1.0 },\n    { name: \"3×\", mult: 3.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"3.5×\", mult: 3.5, hzOffset: -0.05, amplitudeSign: 1.0 },\n    { name: \"4×\", mult: 4.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"~4×\", mult: 4.0, hzOffset: -2.4, amplitudeSign: -1.0 },\n    { name: \"5×\", mult: 5.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"6×\", mult: 6.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"7×\", mult: 7.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"8×\", mult: 8.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"9×\", mult: 9.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"10×\", mult: 10.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"11×\", mult: 11.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"12×\", mult: 12.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"13×\", mult: 13.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"14×\", mult: 14.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"15×\", mult: 15.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"16×\", mult: 16.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"17×\", mult: 17.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"18×\", mult: 18.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"19×\", mult: 19.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"20×\", mult: 20.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"~20×\", mult: 20.0, hzOffset: -5.0, amplitudeSign: -1.0 },\n    { name: \"25×\", mult: 25.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"50×\", mult: 50.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"75×\", mult: 75.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"100×\", mult: 100.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"128×\", mult: 128.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    { name: \"256×\", mult: 250.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n]);\nConfig.envelopes = toNameMap([\n    { name: \"none\", type: 0, speed: 0.0 },\n    { name: \"note size\", type: 1, speed: 0.0 },\n    { name: \"pitch\", type: 2, speed: 0.0 },\n    { name: \"punch\", type: 4, speed: 0.0 },\n    { name: \"flare -1\", type: 5, speed: 128.0 },\n    { name: \"flare 1\", type: 5, speed: 32.0 },\n    { name: \"flare 2\", type: 5, speed: 8.0 },\n    { name: \"flare 3\", type: 5, speed: 2.0 },\n    { name: \"twang -1\", type: 6, speed: 128.0 },\n    { name: \"twang 1\", type: 6, speed: 32.0 },\n    { name: \"twang 2\", type: 6, speed: 8.0 },\n    { name: \"twang 3\", type: 6, speed: 2.0 },\n    { name: \"swell -1\", type: 7, speed: 128.0 },\n    { name: \"swell 1\", type: 7, speed: 32.0 },\n    { name: \"swell 2\", type: 7, speed: 8.0 },\n    { name: \"swell 3\", type: 7, speed: 2.0 },\n    { name: \"tremolo0\", type: 8, speed: 8.0 },\n    { name: \"tremolo1\", type: 8, speed: 4.0 },\n    { name: \"tremolo2\", type: 8, speed: 2.0 },\n    { name: \"tremolo3\", type: 8, speed: 1.0 },\n    { name: \"tremolo4\", type: 9, speed: 4.0 },\n    { name: \"tremolo5\", type: 9, speed: 2.0 },\n    { name: \"tremolo6\", type: 9, speed: 1.0 },\n    { name: \"decay -1\", type: 10, speed: 40.0 },\n    { name: \"decay 1\", type: 10, speed: 10.0 },\n    { name: \"decay 2\", type: 10, speed: 7.0 },\n    { name: \"decay 3\", type: 10, speed: 4.0 },\n    { name: \"wibble-1\", type: 11, speed: 128.0 },\n    { name: \"wibble 1\", type: 11, speed: 24.0 },\n    { name: \"wibble 2\", type: 11, speed: 12.0 },\n    { name: \"wibble 3\", type: 11, speed: 4.0 },\n    { name: \"linear-2\", type: 12, speed: 256.0 },\n    { name: \"linear-1\", type: 12, speed: 128.0 },\n    { name: \"linear 1\", type: 12, speed: 32.0 },\n    { name: \"linear 2\", type: 12, speed: 8.0 },\n    { name: \"linear 3\", type: 12, speed: 2.0 },\n    { name: \"rise -2\", type: 13, speed: 256.0 },\n    { name: \"rise -1\", type: 13, speed: 128.0 },\n    { name: \"rise 1\", type: 13, speed: 32.0 },\n    { name: \"rise 2\", type: 13, speed: 8.0 },\n    { name: \"rise 3\", type: 13, speed: 2.0 },\n    { name: \"flute 1\", type: 11, speed: 16.0 },\n    { name: \"flute 2\", type: 11, speed: 8.0 },\n    { name: \"flute 3\", type: 11, speed: 4.0 },\n    { name: \"tripolo1\", type: 8, speed: 9.0 },\n    { name: \"tripolo2\", type: 8, speed: 6.0 },\n    { name: \"tripolo3\", type: 8, speed: 3.0 },\n    { name: \"tripolo4\", type: 9, speed: 9.0 },\n    { name: \"tripolo5\", type: 9, speed: 6.0 },\n    { name: \"tripolo6\", type: 9, speed: 3.0 },\n    { name: \"pentolo1\", type: 8, speed: 10.0 },\n    { name: \"pentolo2\", type: 8, speed: 5.0 },\n    { name: \"pentolo3\", type: 8, speed: 2.5 },\n    { name: \"pentolo4\", type: 9, speed: 10.0 },\n    { name: \"pentolo5\", type: 9, speed: 5.0 },\n    { name: \"pentolo6\", type: 9, speed: 2.5 },\n    { name: \"flutter 1\", type: 8, speed: 14.0 },\n    { name: \"flutter 2\", type: 9, speed: 11.0 },\n    { name: \"water-y flutter\", type: 8, speed: 9.0 },\n    { name: \"blip 1\", type: 14, speed: 6.0 },\n    { name: \"blip 2\", type: 14, speed: 16.0 },\n    { name: \"blip 3\", type: 14, speed: 32.0 },\n    { name: \"fall 1\", type: 15, speed: 8.0 },\n    { name: \"fall 2\", type: 15, speed: 4.0 },\n    { name: \"fall 3\", type: 15, speed: 2.0 },\n]);\nConfig.newEnvelopes = toNameMap([\n    { name: \"none\", type: 0, speed: 0.0 },\n    { name: \"note size\", type: 1, speed: 0.0 },\n    { name: \"pitch\", type: 2, speed: 0.0 },\n    { name: \"random\", type: 3, speed: 4.0 },\n    { name: \"punch\", type: 4, speed: 0.0 },\n    { name: \"flare\", type: 5, speed: 32.0 },\n    { name: \"twang\", type: 6, speed: 32.0 },\n    { name: \"swell\", type: 7, speed: 32.0 },\n    { name: \"lfo\", type: 8, speed: 4.0 },\n    { name: \"decay\", type: 10, speed: 10.0 },\n    { name: \"wibble\", type: 11, speed: 24.0 },\n    { name: \"linear\", type: 12, speed: 32.0 },\n    { name: \"rise\", type: 13, speed: 32.0 },\n    { name: \"blip\", type: 14, speed: 6.0 },\n    { name: \"fall\", type: 15, speed: 2.0 },\n]);\nConfig.feedbacks = toNameMap([\n    { name: \"1⟲\", indices: [[1], [], [], []] },\n    { name: \"2⟲\", indices: [[], [2], [], []] },\n    { name: \"3⟲\", indices: [[], [], [3], []] },\n    { name: \"4⟲\", indices: [[], [], [], [4]] },\n    { name: \"1⟲ 2⟲\", indices: [[1], [2], [], []] },\n    { name: \"3⟲ 4⟲\", indices: [[], [], [3], [4]] },\n    { name: \"1⟲ 2⟲ 3⟲\", indices: [[1], [2], [3], []] },\n    { name: \"2⟲ 3⟲ 4⟲\", indices: [[], [2], [3], [4]] },\n    { name: \"1⟲ 2⟲ 3⟲ 4⟲\", indices: [[1], [2], [3], [4]] },\n    { name: \"1→2\", indices: [[], [1], [], []] },\n    { name: \"1→3\", indices: [[], [], [1], []] },\n    { name: \"1→4\", indices: [[], [], [], [1]] },\n    { name: \"2→3\", indices: [[], [], [2], []] },\n    { name: \"2→4\", indices: [[], [], [], [2]] },\n    { name: \"3→4\", indices: [[], [], [], [3]] },\n    { name: \"1→3 2→4\", indices: [[], [], [1], [2]] },\n    { name: \"1→4 2→3\", indices: [[], [], [2], [1]] },\n    { name: \"1→2→3→4\", indices: [[], [1], [2], [3]] },\n    { name: \"1↔2 3↔4\", indices: [[2], [1], [4], [3]] },\n    { name: \"1↔4 2↔3\", indices: [[4], [3], [2], [1]] },\n    { name: \"2→1→4→3→2\", indices: [[2], [3], [4], [1]] },\n    { name: \"1→2→3→4→1\", indices: [[4], [1], [2], [3]] },\n    { name: \"(1 2 3)→4\", indices: [[], [], [], [1, 2, 3]] },\n    { name: \"ALL\", indices: [[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]] },\n]);\nConfig.feedbacks6Op = toNameMap([\n    { name: \"Custom\", indices: [[2, 3, 4, 5, 6], [], [], [], [], []] },\n    { name: \"1⟲\", indices: [[1], [], [], [], [], []] },\n    { name: \"2⟲\", indices: [[], [2], [], [], [], []] },\n    { name: \"3⟲\", indices: [[], [], [3], [], [], []] },\n    { name: \"4⟲\", indices: [[], [], [], [4], [], []] },\n    { name: \"5⟲\", indices: [[], [], [], [], [5], []] },\n    { name: \"6⟲\", indices: [[], [], [], [], [], [6]] },\n    { name: \"1⟲ 2⟲\", indices: [[1], [2], [], [], [], []] },\n    { name: \"3⟲ 4⟲\", indices: [[], [], [3], [4], [], []] },\n    { name: \"1⟲ 2⟲ 3⟲\", indices: [[1], [2], [3], [], [], []] },\n    { name: \"2⟲ 3⟲ 4⟲\", indices: [[], [2], [3], [4], [], []] },\n    { name: \"1⟲ 2⟲ 3⟲ 4⟲\", indices: [[1], [2], [3], [4], [], []] },\n    { name: \"1⟲ 2⟲ 3⟲ 4⟲ 5⟲\", indices: [[1], [2], [3], [4], [5], []] },\n    { name: \"1⟲ 2⟲ 3⟲ 4⟲ 5⟲ 6⟲\", indices: [[1], [2], [3], [4], [5], [6]] },\n    { name: \"1→2\", indices: [[], [1], [], [], [], []] },\n    { name: \"1→3\", indices: [[], [], [1], [], [], []] },\n    { name: \"1→4\", indices: [[], [], [], [1], [], []] },\n    { name: \"1→5\", indices: [[], [], [], [], [1], []] },\n    { name: \"1→6\", indices: [[], [], [], [], [], [1]] },\n    { name: \"2→3\", indices: [[], [], [2], [], [], []] },\n    { name: \"2→4\", indices: [[], [], [], [2], [], []] },\n    { name: \"3→4\", indices: [[], [], [], [3], [], []] },\n    { name: \"4→5\", indices: [[], [], [], [], [4], []] },\n    { name: \"1→4 2→5 3→6\", indices: [[], [], [], [1], [2], [3]] },\n    { name: \"1→5 2→6 3→4\", indices: [[], [], [], [3], [1], [2]] },\n    { name: \"1→2→3→4→5→6\", indices: [[], [1], [2], [3], [4], [5]] },\n    { name: \"2→1→6→5→4→3→2\", indices: [[2], [3], [4], [5], [6], [1]] },\n    { name: \"1→2→3→4→5→6→1\", indices: [[6], [1], [2], [3], [4], [5]] },\n    { name: \"1↔2 3↔4 5↔6\", indices: [[2], [1], [4], [3], [6], [5]] },\n    { name: \"1↔4 2↔5 3↔6\", indices: [[4], [5], [6], [1], [2], [3]] },\n    { name: \"(1,2,3,4,5)→6\", indices: [[], [], [], [], [], [1, 2, 3, 4, 5]] },\n    { name: \"ALL\", indices: [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]] },\n]);\nConfig.chipNoiseLength = 1 << 15;\nConfig.spectrumNoiseLength = 1 << 15;\nConfig.spectrumBasePitch = 24;\nConfig.spectrumControlPoints = 30;\nConfig.spectrumControlPointsPerOctave = 7;\nConfig.spectrumControlPointBits = 3;\nConfig.spectrumMax = (1 << _a.spectrumControlPointBits) - 1;\nConfig.harmonicsControlPoints = 28;\nConfig.harmonicsRendered = 64;\nConfig.harmonicsRenderedForPickedString = 1 << 8;\nConfig.harmonicsControlPointBits = 3;\nConfig.harmonicsMax = (1 << _a.harmonicsControlPointBits) - 1;\nConfig.harmonicsWavelength = 1 << 11;\nConfig.pulseWidthRange = 50;\nConfig.pulseWidthStepPower = 0.5;\nConfig.supersawVoiceCount = 7;\nConfig.supersawDynamismMax = 6;\nConfig.supersawSpreadMax = 12;\nConfig.supersawShapeMax = 6;\nConfig.pitchChannelCountMin = 1;\nConfig.pitchChannelCountMax = 60;\nConfig.noiseChannelCountMin = 0;\nConfig.noiseChannelCountMax = 60;\nConfig.modChannelCountMin = 0;\nConfig.modChannelCountMax = 60;\nConfig.noiseInterval = 6;\nConfig.pitchesPerOctave = 12;\nConfig.drumCount = 12;\nConfig.pitchOctaves = 8;\nConfig.modCount = 6;\nConfig.maxPitch = _a.pitchOctaves * _a.pitchesPerOctave;\nConfig.maximumTonesPerChannel = _a.maxChordSize * 2;\nConfig.justIntonationSemitones = [1.0 / 2.0, 8.0 / 15.0, 9.0 / 16.0, 3.0 / 5.0, 5.0 / 8.0, 2.0 / 3.0, 32.0 / 45.0, 3.0 / 4.0, 4.0 / 5.0, 5.0 / 6.0, 8.0 / 9.0, 15.0 / 16.0, 1.0, 16.0 / 15.0, 9.0 / 8.0, 6.0 / 5.0, 5.0 / 4.0, 4.0 / 3.0, 45.0 / 32.0, 3.0 / 2.0, 8.0 / 5.0, 5.0 / 3.0, 16.0 / 9.0, 15.0 / 8.0, 2.0].map(x => Math.log2(x) * _a.pitchesPerOctave);\nConfig.pitchShiftRange = _a.justIntonationSemitones.length;\nConfig.pitchShiftCenter = _a.pitchShiftRange >> 1;\nConfig.detuneCenter = 200;\nConfig.detuneMax = 400;\nConfig.detuneMin = 0;\nConfig.songDetuneMin = 0;\nConfig.songDetuneMax = 500;\nConfig.unisonVoicesMin = 1;\nConfig.unisonVoicesMax = 9;\nConfig.unisonSpreadMin = -96;\nConfig.unisonSpreadMax = 96;\nConfig.unisonOffsetMin = -96;\nConfig.unisonOffsetMax = 96;\nConfig.unisonExpressionMin = -2;\nConfig.unisonExpressionMax = 2;\nConfig.unisonSignMin = -2;\nConfig.unisonSignMax = 2;\nConfig.sineWaveLength = 1 << 8;\nConfig.sineWaveMask = _a.sineWaveLength - 1;\nConfig.sineWave = _a.generateSineWave();\nConfig.perEnvelopeSpeedIndices = [0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.2, 0.25, 0.3, 0.3333, 0.4, 0.5, 0.6, 0.6667, 0.7, 0.75, 0.8, 0.9, 1, 1.25, 1.3333, 1.5, 1.6667, 1.75, 2, 2.25, 2.5, 2.75, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 32, 40, 64, 128, 256];\nConfig.perEnvelopeSpeedToIndices = {\n    0: 0,\n    0.01: 1,\n    0.02: 2,\n    0.03: 3,\n    0.04: 4,\n    0.05: 5,\n    0.06: 6,\n    0.07: 7,\n    0.08: 8,\n    0.09: 9,\n    0.1: 10,\n    0.2: 11,\n    0.25: 12,\n    0.3: 13,\n    0.3333: 14,\n    0.4: 15,\n    0.5: 16,\n    0.6: 17,\n    0.6667: 18,\n    0.7: 19,\n    0.75: 20,\n    0.8: 21,\n    0.9: 22,\n    1: 23,\n    1.25: 24,\n    1.3333: 25,\n    1.5: 26,\n    1.6667: 27,\n    1.75: 28,\n    2: 29,\n    2.25: 30,\n    2.5: 31,\n    2.75: 32,\n    3: 33,\n    3.5: 34,\n    4: 35,\n    4.5: 36,\n    5: 37,\n    5.5: 38,\n    6: 39,\n    6.5: 40,\n    7: 41,\n    7.5: 42,\n    8: 43,\n    8.5: 44,\n    9: 45,\n    9.5: 46,\n    10: 47,\n    11: 48,\n    12: 49,\n    13: 50,\n    14: 51,\n    15: 52,\n    16: 53,\n    17: 54,\n    18: 55,\n    19: 56,\n    20: 57,\n    24: 58,\n    32: 59,\n    40: 60,\n    64: 61,\n    128: 62,\n    256: 63,\n};\nConfig.perEnvelopeBoundMin = 0;\nConfig.perEnvelopeBoundMax = 2;\nConfig.randomEnvelopeSeedMax = 63;\nConfig.randomEnvelopeStepsMax = 24;\nConfig.pickedStringDispersionCenterFreq = 6000.0;\nConfig.pickedStringDispersionFreqScale = 0.3;\nConfig.pickedStringDispersionFreqMult = 4.0;\nConfig.pickedStringShelfHz = 4000.0;\nConfig.distortionRange = 16;\nConfig.stringSustainRange = 15;\nConfig.stringDecayRate = 0.12;\nConfig.enableAcousticSustain = false;\nConfig.sustainTypeNames = [\"bright\", \"acoustic\"];\nConfig.bitcrusherFreqRange = 14;\nConfig.bitcrusherOctaveStep = 0.5;\nConfig.bitcrusherQuantizationRange = 8;\nConfig.maxEnvelopeCount = 16;\nConfig.defaultAutomationRange = 13;\nConfig.instrumentAutomationTargets = toNameMap([\n    { name: \"none\", computeIndex: null, displayName: \"none\", interleave: false, isFilter: false, maxCount: 1, effect: null, mdeffect: null, compatibleInstruments: null },\n    { name: \"noteVolume\", computeIndex: 0, displayName: \"pre volume\", interleave: false, isFilter: false, maxCount: 1, effect: null, mdeffect: null, compatibleInstruments: null },\n    { name: \"mixVolume\", computeIndex: 1, displayName: \"post volume\", interleave: false, isFilter: false, maxCount: 1, effect: null, mdeffect: null, compatibleInstruments: null },\n    { name: \"pulseWidth\", computeIndex: 3, displayName: \"pulse width\", interleave: false, isFilter: false, maxCount: 1, effect: null, mdeffect: null, compatibleInstruments: [6, 8] },\n    { name: \"stringSustain\", computeIndex: 4, displayName: \"sustain\", interleave: false, isFilter: false, maxCount: 1, effect: null, mdeffect: null, compatibleInstruments: [7] },\n    { name: \"unison\", computeIndex: 5, displayName: \"unison\", interleave: false, isFilter: false, maxCount: 1, effect: null, mdeffect: null, compatibleInstruments: [0, 5, 7, 9, 6, 2, 3, 4] },\n    { name: \"operatorFrequency\", computeIndex: 6, displayName: \"fm# freq\", interleave: true, isFilter: false, maxCount: _a.operatorCount + 2, effect: null, mdeffect: null, compatibleInstruments: [1, 11] },\n    { name: \"operatorAmplitude\", computeIndex: 12, displayName: \"fm# volume\", interleave: false, isFilter: false, maxCount: _a.operatorCount + 2, effect: null, mdeffect: null, compatibleInstruments: [1, 11] },\n    { name: \"feedbackAmplitude\", computeIndex: 18, displayName: \"fm feedback\", interleave: false, isFilter: false, maxCount: 1, effect: null, mdeffect: null, compatibleInstruments: [1, 11] },\n    { name: \"pitchShift\", computeIndex: 19, displayName: \"pitch shift\", interleave: false, isFilter: false, maxCount: 1, effect: null, mdeffect: 0, compatibleInstruments: null },\n    { name: \"detune\", computeIndex: 20, displayName: \"detune\", interleave: false, isFilter: false, maxCount: 1, effect: null, mdeffect: 1, compatibleInstruments: null },\n    { name: \"vibratoDepth\", computeIndex: 21, displayName: \"vibrato depth\", interleave: false, isFilter: false, maxCount: 1, effect: null, mdeffect: 2, compatibleInstruments: null },\n    { name: \"noteFilterAllFreqs\", computeIndex: 2, displayName: \"pre eq freqs\", interleave: false, isFilter: true, maxCount: 1, effect: null, mdeffect: null, compatibleInstruments: null },\n    { name: \"noteFilterFreq\", computeIndex: 22, displayName: \"pre eq # freq\", interleave: false, isFilter: true, maxCount: _a.filterMaxPoints, effect: null, mdeffect: null, compatibleInstruments: null },\n    { name: \"decimalOffset\", computeIndex: 38, displayName: \"decimal offset\", interleave: false, isFilter: false, maxCount: 1, effect: null, mdeffect: null, compatibleInstruments: [6, 8] },\n    { name: \"supersawDynamism\", computeIndex: 39, displayName: \"dynamism\", interleave: false, isFilter: false, maxCount: 1, effect: null, mdeffect: null, compatibleInstruments: [8] },\n    { name: \"supersawSpread\", computeIndex: 40, displayName: \"spread\", interleave: false, isFilter: false, maxCount: 1, effect: null, mdeffect: null, compatibleInstruments: [8] },\n    { name: \"supersawShape\", computeIndex: 41, displayName: \"saw↔pulse\", interleave: false, isFilter: false, maxCount: 1, effect: null, mdeffect: null, compatibleInstruments: [8] },\n    { name: \"gain\", computeIndex: 57, displayName: \"gain\", interleave: false, isFilter: false, maxCount: 1, effect: 9, mdeffect: null, compatibleInstruments: null },\n    { name: \"panning\", computeIndex: 42, displayName: \"panning\", interleave: false, isFilter: false, maxCount: 1, effect: 2, mdeffect: null, compatibleInstruments: null },\n    { name: \"distortion\", computeIndex: 43, displayName: \"distortion\", interleave: false, isFilter: false, maxCount: 1, effect: 3, mdeffect: null, compatibleInstruments: null },\n    { name: \"bitcrusherQuantization\", computeIndex: 44, displayName: \"bitcrush\", interleave: false, isFilter: false, maxCount: 1, effect: 4, mdeffect: null, compatibleInstruments: null },\n    { name: \"bitcrusherFrequency\", computeIndex: 45, displayName: \"freq crush\", interleave: false, isFilter: false, maxCount: 1, effect: 4, mdeffect: null, compatibleInstruments: null },\n    { name: \"flanger\", computeIndex: 58, displayName: \"flanger\", interleave: false, isFilter: false, maxCount: 1, effect: 10, mdeffect: null, compatibleInstruments: null },\n    { name: \"flangerSpeed\", computeIndex: 58, displayName: \"flanger speed\", interleave: false, isFilter: false, maxCount: 1, effect: 10, mdeffect: null, compatibleInstruments: null },\n    { name: \"flangerDepth\", computeIndex: 58, displayName: \"flanger depth\", interleave: false, isFilter: false, maxCount: 1, effect: 10, mdeffect: null, compatibleInstruments: null },\n    { name: \"flangerFeedback\", computeIndex: 58, displayName: \"flanger feedback\", interleave: false, isFilter: false, maxCount: 1, effect: 10, mdeffect: null, compatibleInstruments: null },\n    { name: \"chorus\", computeIndex: 46, displayName: \"chorus\", interleave: false, isFilter: false, maxCount: 1, effect: 1, mdeffect: null, compatibleInstruments: null },\n    { name: \"echoSustain\", computeIndex: 47, displayName: \"echo\", interleave: false, isFilter: false, maxCount: 1, effect: 6, mdeffect: null, compatibleInstruments: null },\n    { name: \"reverb\", computeIndex: 48, displayName: \"reverb\", interleave: false, isFilter: false, maxCount: 1, effect: 0, mdeffect: null, compatibleInstruments: null },\n    { name: \"arpeggioSpeed\", computeIndex: 49, displayName: \"arpeggio speed\", interleave: false, isFilter: false, maxCount: 1, effect: null, mdeffect: 4, compatibleInstruments: null },\n    { name: \"ringModulation\", computeIndex: 50, displayName: \"ring mod\", interleave: false, isFilter: false, maxCount: 1, effect: 7, mdeffect: null, compatibleInstruments: null },\n    { name: \"ringModulationHz\", computeIndex: 51, displayName: \"ring mod hz\", interleave: false, isFilter: false, maxCount: 1, effect: 7, mdeffect: null, compatibleInstruments: null },\n    { name: \"granular\", computeIndex: 52, displayName: \"granular\", interleave: false, isFilter: false, maxCount: 1, effect: 8, mdeffect: null, compatibleInstruments: null },\n    { name: \"grainFreq\", computeIndex: 53, displayName: \"grain freq\", interleave: false, isFilter: false, maxCount: 1, effect: 8, mdeffect: null, compatibleInstruments: null },\n    { name: \"grainSize\", computeIndex: 54, displayName: \"grain size\", interleave: false, isFilter: false, maxCount: 1, effect: 8, mdeffect: null, compatibleInstruments: null },\n    { name: \"grainRange\", computeIndex: 55, displayName: \"grain range\", interleave: false, isFilter: false, maxCount: 1, effect: 8, mdeffect: null, compatibleInstruments: null },\n    { name: \"echoDelay\", computeIndex: 56, displayName: \"echo delay\", interleave: false, isFilter: false, maxCount: 1, effect: 6, mdeffect: null, compatibleInstruments: null },\n]);\nConfig.operatorWaves = toNameMap([\n    { name: \"sine\", samples: _a.sineWave },\n    { name: \"triangle\", samples: _a.generateTriWave() },\n    { name: \"pulse width\", samples: _a.generateSquareWave(0.5) },\n    { name: \"sawtooth\", samples: _a.generateSawWave() },\n    { name: \"ramp\", samples: _a.generateSawWave(true) },\n    { name: \"trapezoid\", samples: _a.generateTrapezoidWave(2) },\n    { name: \"quasi-sine\", samples: _a.generateQuasiSineWave() },\n]);\nConfig.pwmOperatorWaves = toNameMap([\n    { name: \"1%\", samples: _a.generateSquareWave(0.01) },\n    { name: \"5%\", samples: _a.generateSquareWave(0.05) },\n    { name: \"12.5%\", samples: _a.generateSquareWave(0.125) },\n    { name: \"25%\", samples: _a.generateSquareWave(0.25) },\n    { name: \"33%\", samples: _a.generateSquareWave(1 / 3) },\n    { name: \"50%\", samples: _a.generateSquareWave(0.5) },\n    { name: \"66%\", samples: _a.generateSquareWave(2 / 3) },\n    { name: \"75%\", samples: _a.generateSquareWave(0.75) },\n    { name: \"87.5%\", samples: _a.generateSquareWave(0.875) },\n    { name: \"95%\", samples: _a.generateSquareWave(0.95) },\n    { name: \"99%\", samples: _a.generateSquareWave(0.99) },\n]);\nConfig.barEditorHeight = 10;\nConfig.modulators = toNameMap([\n    { name: \"none\", pianoName: \"None\", maxRawVol: 6, newNoteVol: 6, forSong: true, convertRealFactor: 0, associatedEffect: 11, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"No Mod Setting\", promptDesc: [\"No setting has been chosen yet, so this modulator will have no effect. Try choosing a setting with the dropdown, then click this '?' again for more info.\", \"[$LO - $HI]\"] },\n    { name: \"song volume\", pianoName: \"Volume\", maxRawVol: 100, newNoteVol: 100, forSong: true, convertRealFactor: 0, associatedEffect: 11, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"Song Volume\", promptDesc: [\"This setting affects the overall volume of the song, just like the main volume slider.\", \"At $HI, the volume will be unchanged from default, and it will get gradually quieter down to $LO.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\n    { name: \"tempo\", pianoName: \"Tempo\", maxRawVol: _a.tempoMax - _a.tempoMin, newNoteVol: Math.ceil((_a.tempoMax - _a.tempoMin) / 2), forSong: true, convertRealFactor: _a.tempoMin, associatedEffect: 11, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"Song Tempo\", promptDesc: [\"This setting controls the speed your song plays at, just like the tempo slider.\", \"When you first make a note for this setting, it will default to your current tempo. Raising it speeds up the song, up to $HI BPM, and lowering it slows it down, to a minimum of $LO BPM.\", \"Note that you can make a 'swing' effect by rapidly changing between two tempo values.\", \"[OVERWRITING] [$LO - $HI] [BPM]\"] },\n    { name: \"song reverb\", pianoName: \"Reverb\", maxRawVol: _a.reverbRange * 2, newNoteVol: _a.reverbRange, forSong: true, convertRealFactor: -_a.reverbRange, associatedEffect: 11, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"Song Reverb\", promptDesc: [\"This setting affects the overall reverb of your song. It works by multiplying existing reverb for instruments, so those with no reverb set will be unaffected.\", \"At $MID, all instruments' reverb will be unchanged from default. This increases up to double the reverb value at $HI, or down to no reverb at $LO.\", \"[MULTIPLICATIVE] [$LO - $HI]\"] },\n    { name: \"next bar\", pianoName: \"Next Bar\", maxRawVol: 1, newNoteVol: 1, forSong: true, convertRealFactor: 0, associatedEffect: 11, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"Go To Next Bar\", promptDesc: [\"This setting functions a little different from most. Wherever a note is placed, the song will jump immediately to the next bar when it is encountered.\", \"This jump happens at the very start of the note, so the length of a next-bar note is irrelevant. Also, the note can be value 0 or 1, but the value is also irrelevant - wherever you place a note, the song will jump.\", \"You can make mixed-meter songs or intro sections by cutting off unneeded beats with a next-bar modulator.\", \"[$LO - $HI]\"] },\n    { name: \"pre volume\", pianoName: \"Note Vol.\", maxRawVol: _a.volumeRange, newNoteVol: Math.ceil(_a.volumeRange / 2), forSong: false, convertRealFactor: Math.ceil(-_a.volumeRange / 2.0), associatedEffect: 11, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"Instrument Pre Volume\", promptDesc: [\"This setting affects the volume of your instrument as if its note size had been scaled.\", \"At $MID, an instrument's volume will be unchanged from default. This means you can still use the volume sliders to mix the base volume of instruments. The volume gradually increases up to $HI, or decreases down to mute at $LO.\", \"This setting was the default for volume modulation in JummBox for a long time. Due to some new effects like distortion and bitcrush, pre volume doesn't always allow fine volume control. Also, this modulator affects the value of FM modulator waves instead of just carriers. This can distort the sound which may be useful, but also may be undesirable. In those cases, use the 'post volume' modulator instead, which will always just scale the volume with no added effects.\", \"For display purposes, this mod will show up on the instrument volume slider, as long as there is not also an active 'post volume' modulator anyhow. However, as mentioned, it works more like changing pre volume.\", \"[MULTIPLICATIVE] [$LO - $HI]\"] },\n    { name: \"gain\", pianoName: \"Gain\", maxRawVol: _a.volumeRange / 2 * _a.gainRangeMult, newNoteVol: Math.ceil(_a.volumeRange / 2 * _a.gainRangeMult / 2), forSong: false, convertRealFactor: 0, associatedEffect: 9, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"Instrument Gain\", promptDesc: [\"This setting controls the gain of your instrument.\", \"At $LO, the instrument is muted, at $MID it will be unchanged, and at $HI, it will have maximum gain.\", \"[OVERWRITING] [$LO - $HI] [L-R]\"] },\n    { name: \"pan\", pianoName: \"Pan\", maxRawVol: _a.panMax, newNoteVol: Math.ceil(_a.panMax / 2), forSong: false, convertRealFactor: 0, associatedEffect: 2, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"Instrument Panning\", promptDesc: [\"This setting controls the panning of your instrument, just like the panning slider.\", \"At $LO, your instrument will sound like it is coming fully from the left-ear side. At $MID it will be right in the middle, and at $HI, it will sound like it's on the right.\", \"[OVERWRITING] [$LO - $HI] [L-R]\"] },\n    { name: \"reverb\", pianoName: \"Reverb\", maxRawVol: _a.reverbRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 0, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"Instrument Reverb\", promptDesc: [\"This setting controls the reverb of your insturment, just like the reverb slider.\", \"At $LO, your instrument will have no reverb. At $HI, it will be at maximum.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"distortion\", pianoName: \"Distortion\", maxRawVol: _a.distortionRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 3, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"Instrument Distortion\", promptDesc: [\"This setting controls the amount of distortion for your instrument, just like the distortion slider.\", \"At $LO, your instrument will have no distortion. At $HI, it will be at maximum.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"fm slider 1\", pianoName: \"FM 1\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: 11, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"FM Slider 1\", promptDesc: [\"This setting affects the strength of the first FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\n    { name: \"fm slider 2\", pianoName: \"FM 2\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: 11, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"FM Slider 2\", promptDesc: [\"This setting affects the strength of the second FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\n    { name: \"fm slider 3\", pianoName: \"FM 3\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: 11, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"FM Slider 3\", promptDesc: [\"This setting affects the strength of the third FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\n    { name: \"fm slider 4\", pianoName: \"FM 4\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: 11, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"FM Slider 4\", promptDesc: [\"This setting affects the strength of the fourth FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\n    { name: \"fm feedback\", pianoName: \"FM Feedbck\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: 11, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"FM Feedback\", promptDesc: [\"This setting affects the strength of the FM feedback slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\n    { name: \"pulse width\", pianoName: \"Pulse Width\", maxRawVol: _a.pulseWidthRange, newNoteVol: _a.pulseWidthRange, forSong: false, convertRealFactor: 0, associatedEffect: 11, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"Pulse Width\", promptDesc: [\"This setting controls the width of this instrument's pulse wave, just like the pulse width slider.\", \"At $HI, your instrument will sound like a pure square wave (on 50% of the time). It will gradually sound narrower down to $LO, where it will be inaudible (as it is on 0% of the time).\", \"Changing pulse width randomly between a few values is a common strategy in chiptune music to lend some personality to a lead instrument.\", \"[OVERWRITING] [$LO - $HI] [%Duty]\"] },\n    { name: \"detune\", pianoName: \"Detune\", maxRawVol: _a.detuneMax - _a.detuneMin, newNoteVol: _a.detuneCenter, forSong: false, convertRealFactor: -_a.detuneCenter, associatedEffect: 11, associatedMDEffect: 1, maxIndex: 0,\n        promptName: \"Instrument Detune\", promptDesc: [\"This setting controls the detune for this instrument, just like the detune slider.\", \"At $MID, your instrument will have no detune applied. Each tick corresponds to one cent, or one-hundredth of a pitch. Thus, each change of 100 ticks corresponds to one half-step of detune, up to two half-steps up at $HI, or two half-steps down at $LO.\", \"[OVERWRITING] [$LO - $HI] [cents]\"] },\n    { name: \"vibrato depth\", pianoName: \"Vibrato Depth\", maxRawVol: 50, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 11, associatedMDEffect: 2, maxIndex: 0,\n        promptName: \"Vibrato Depth\", promptDesc: [\"This setting controls the amount that your pitch moves up and down by during vibrato, just like the vibrato depth slider.\", \"At $LO, your instrument will have no vibrato depth so its vibrato would be inaudible. This increases up to $HI, where an extreme pitch change will be noticeable.\", \"[OVERWRITING] [$LO - $HI] [pitch ÷25]\"] },\n    { name: \"song detune\", pianoName: \"Detune\", maxRawVol: _a.songDetuneMax - _a.songDetuneMin, newNoteVol: Math.ceil((_a.songDetuneMax - _a.songDetuneMin) / 2), forSong: true, convertRealFactor: -250, associatedEffect: 11, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"Song Detune\", promptDesc: [\"This setting controls the overall detune of the entire song. There is no associated slider.\", \"At $MID, your song will have no extra detune applied and sound unchanged from default. Each tick corresponds to four cents, or four hundredths of a pitch. Thus, each change of 25 ticks corresponds to one half-step of detune, up to 10 half-steps up at $HI, or 10 half-steps down at $LO.\", \"[MULTIPLICATIVE] [$LO - $HI] [cents x4]\"] },\n    { name: \"vibrato speed\", pianoName: \"Vibrato Speed\", maxRawVol: 30, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 11, associatedMDEffect: 2, maxIndex: 0,\n        promptName: \"Vibrato Speed\", promptDesc: [\"This setting controls the speed your instrument will vibrato at, just like the slider.\", \"A setting of $LO means there will be no oscillation, and vibrato will be disabled. Higher settings will increase the speed, up to a dramatic trill at the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"vibrato delay\", pianoName: \"Vibrato Delay\", maxRawVol: 50, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 11, associatedMDEffect: 2, maxIndex: 0,\n        promptName: \"Vibrato Delay\", promptDesc: [\"This setting controls the amount of time vibrato will be held off for before triggering for every new note, just like the slider.\", \"A setting of $LO means there will be no delay. A setting of 24 corresponds to one full beat of delay. As a sole exception to this scale, setting delay to $HI will completely disable vibrato (as if it had infinite delay).\", \"[OVERWRITING] [$LO - $HI] [beats ÷24]\"] },\n    { name: \"arp speed\", pianoName: \"Arp Speed\", maxRawVol: 50, newNoteVol: 12, forSong: false, convertRealFactor: 0, associatedEffect: 11, associatedMDEffect: 4, maxIndex: 0,\n        promptName: \"Arpeggio Speed\", promptDesc: [\"This setting controls the speed at which your instrument's chords arpeggiate, just like the arpeggio speed slider.\", \"Each setting corresponds to a different speed, from the slowest to the fastest. The speeds are listed below.\",\n            \"[0-4]: x0, x1/16, x⅛, x⅕, x¼,\", \"[5-9]: x⅓, x⅖, x½, x⅔, x¾,\", \"[10-14]: x⅘, x0.9, x1, x1.1, x1.2,\", \"[15-19]: x1.3, x1.4, x1.5, x1.6, x1.7,\", \"[20-24]: x1.8, x1.9, x2, x2.1, x2.2,\", \"[25-29]: x2.3, x2.4, x2.5, x2.6, x2.7,\", \"[30-34]: x2.8, x2.9, x3, x3.1, x3.2,\", \"[35-39]: x3.3, x3.4, x3.5, x3.6, x3.7,\", \"[40-44]: x3.8, x3.9, x4, x4.15, x4.3,\", \"[45-50]: x4.5, x4.8, x5, x5.5, x6, x8\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"pan delay\", pianoName: \"Pan Delay\", maxRawVol: 20, newNoteVol: 10, forSong: false, convertRealFactor: 0, associatedEffect: 2, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"Panning Delay\", promptDesc: [\"This setting controls the delay applied to panning for your instrument, just like the pan delay slider.\", \"With more delay, the panning effect will generally be more pronounced. $MID is the default value, whereas $LO will remove any delay at all. No delay can be desirable for chiptune songs.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"reset arp\", pianoName: \"Reset Arp\", maxRawVol: 1, newNoteVol: 1, forSong: false, convertRealFactor: 0, associatedEffect: 11, associatedMDEffect: 4, maxIndex: 0,\n        promptName: \"Reset Arpeggio\", promptDesc: [\"This setting functions a little different from most. Wherever a note is placed, the arpeggio of this instrument will reset at the very start of that note. This is most noticeable with lower arpeggio speeds. The lengths and values of notes for this setting don't matter, just the note start times.\", \"This mod can be used to sync up your apreggios so that they always sound the same, even if you are using an odd-ratio arpeggio speed or modulating arpeggio speed.\", \"[$LO - $HI]\"] },\n    { name: \"post eq\", pianoName: \"PostEQ\", maxRawVol: 10, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 11, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"EQ Filter\", promptDesc: [\"This setting controls a few separate things for your instrument's EQ filter.\", \"When the option 'morph' is selected, your modulator values will indicate a sub-filter index of your EQ filter to 'morph' to over time. For example, a change from 0 to 1 means your main filter (default) will morph to sub-filter 1 over the specified duration. You can shape the main filter and sub-filters in the large filter editor ('+' button). If your two filters' number, type, and order of filter dots all match up, the morph will happen smoothly and you'll be able to hear them changing. If they do not match up, the filters will simply jump between each other.\", \"Note that filters will morph based on endpoints in the pattern editor. So, if you specify a morph from sub-filter 1 to 4 but do not specifically drag in new endpoints for 2 and 3, it will morph directly between 1 and 4 without going through the others.\", \"If you target Dot X or Dot Y, you can finely tune the coordinates of a single dot for your filter. The number of available dots to choose is dependent on your main filter's dot count.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"pre eq\", pianoName: \"PreEQ\", maxRawVol: 10, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 5, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"Note Filter\", promptDesc: [\"This setting controls a few separate things for your instrument's note filter.\", \"When the option 'morph' is selected, your modulator values will indicate a sub-filter index of your note filter to 'morph' to over time. For example, a change from 0 to 1 means your main filter (default) will morph to sub-filter 1 over the specified duration. You can shape the main filter and sub-filters in the large filter editor ('+' button). If your two filters' number, type, and order of filter dots all match up, the morph will happen smoothly and you'll be able to hear them changing. If they do not match up, the filters will simply jump between each other.\", \"Note that filters will morph based on endpoints in the pattern editor. So, if you specify a morph from sub-filter 1 to 4 but do not specifically drag in new endpoints for 2 and 3, it will morph directly between 1 and 4 without going through the others.\", \"If you target Dot X or Dot Y, you can finely tune the coordinates of a single dot for your filter. The number of available dots to choose is dependent on your main filter's dot count.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"bit crush\", pianoName: \"Bitcrush\", maxRawVol: _a.bitcrusherQuantizationRange - 1, newNoteVol: Math.round(_a.bitcrusherQuantizationRange / 2), forSong: false, convertRealFactor: 0, associatedEffect: 4, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"Instrument Bit Crush\", promptDesc: [\"This setting controls the bit crush of your instrument, just like the bit crush slider.\", \"At a value of $LO, no bit crush will be applied. This increases and the bit crush effect gets more noticeable up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"freq crush\", pianoName: \"Freq Crush\", maxRawVol: _a.bitcrusherFreqRange - 1, newNoteVol: Math.round(_a.bitcrusherFreqRange / 2), forSong: false, convertRealFactor: 0, associatedEffect: 4, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"Instrument Frequency Crush\", promptDesc: [\"This setting controls the frequency crush of your instrument, just like the freq crush slider.\", \"At a value of $LO, no frequency crush will be applied. This increases and the frequency crush effect gets more noticeable up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"echo\", pianoName: \"Echo\", maxRawVol: _a.echoSustainRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 6, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"Instrument Echo Sustain\", promptDesc: [\"This setting controls the echo sustain (echo loudness) of your instrument, just like the echo slider.\", \"At $LO, your instrument will have no echo sustain and echo will not be audible. Echo sustain increases and the echo effect gets more noticeable up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"echo delay\", pianoName: \"Echo Delay\", maxRawVol: _a.echoDelayRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 6, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"Instrument Echo Delay\", promptDesc: [\"This setting controls the echo delay of your instrument, just like the echo delay slider.\", \"At $LO, your instrument will have very little echo delay, and this increases up to 2 beats of delay at $HI.\", \"[OVERWRITING] [$LO - $HI] [~beats ÷12]\"]\n    },\n    { name: \"echo ping pong\", pianoName: \"Ping-Pong\", maxRawVol: _a.panMax, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 6, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"Instrument Ping Pong\", promptDesc: [\"This setting controls the echo ping-pong of your instrument, just like the echo delay slider.\", \"At $LO, the echo will start fully from the left-ear side. At $MID there will be no echo ping pong, and at $HI, it will start coming fully from the right.\", \"[OVERWRITING] [$LO - $HI] [L-R]\"]\n    },\n    { name: \"flanger\", pianoName: \"Flanger\", maxRawVol: _a.flangerRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 10, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"Instrument Flanger\", promptDesc: [\"This setting controls the flanger strength of your instrument, just like the flanger slider.\", \"At $LO, the flanger effect will be disabled. The strength of the flanger effect increases up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"flanger speed\", pianoName: \"Flanger Spd\", maxRawVol: _a.flangerSpeedRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 10, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"Instrument Flanger Speed\", promptDesc: [\"This setting controls the flanger speed of your instrument, just like the flanger speed slider.\"] },\n    { name: \"flanger depth\", pianoName: \"Flanger Dpth\", maxRawVol: _a.flangerDepthRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 10, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"Instrument Flanger Depth\", promptDesc: [\"This setting controls the flanger depth of your instrument, just like the flanger depth slider.\"] },\n    { name: \"flanger feedback\", pianoName: \"Flanger Fbck\", maxRawVol: _a.flangerFeedbackRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 10, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"Instrument Flanger Feedback\", promptDesc: [\"This setting controls the flanger feedback of your instrument, just like the flanger feedback slider.\"] },\n    { name: \"chorus\", pianoName: \"Chorus\", maxRawVol: _a.chorusRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 1, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"Instrument Chorus\", promptDesc: [\"This setting controls the chorus strength of your instrument, just like the chorus slider.\", \"At $LO, the chorus effect will be disabled. The strength of the chorus effect increases up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"post eq cut\", pianoName: \"PostEQ Cut\", maxRawVol: _a.filterSimpleCutRange - 1, newNoteVol: _a.filterSimpleCutRange - 1, forSong: false, convertRealFactor: 0, associatedEffect: 11, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"EQ Filter Cutoff Frequency\", promptDesc: [\"This setting controls the filter cut position of your instrument, just like the filter cut slider.\", \"This setting is roughly analagous to the horizontal position of a single low-pass dot on the advanced filter editor. At lower values, a wider range of frequencies is cut off.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"post eq peak\", pianoName: \"PostEQ Peak\", maxRawVol: _a.filterSimplePeakRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 11, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"EQ Filter Peak Gain\", promptDesc: [\"This setting controls the filter peak position of your instrument, just like the filter peak slider.\", \"This setting is roughly analagous to the vertical position of a single low-pass dot on the advanced filter editor. At lower values, the cutoff frequency will not be emphasized, and at higher values you will hear emphasis on the cutoff frequency.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"pre eq cut\", pianoName: \"PreEQ Cut\", maxRawVol: _a.filterSimpleCutRange - 1, newNoteVol: _a.filterSimpleCutRange - 1, forSong: false, convertRealFactor: 0, associatedEffect: 5, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"Note Filter Cutoff Frequency\", promptDesc: [\"This setting controls the filter cut position of your instrument, just like the filter cut slider.\", \"This setting is roughly analagous to the horizontal position of a single low-pass dot on the advanced filter editor. At lower values, a wider range of frequencies is cut off.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"pre eq peak\", pianoName: \"PreEQ Peak\", maxRawVol: _a.filterSimplePeakRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 5, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"Note Filter Peak Gain\", promptDesc: [\"This setting controls the filter peak position of your instrument, just like the filter peak slider.\", \"This setting is roughly analagous to the vertical position of a single low-pass dot on the advanced filter editor. At lower values, the cutoff frequency will not be emphasized, and at higher values you will hear emphasis on the cutoff frequency.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"pitch shift\", pianoName: \"Pitch Shift\", maxRawVol: _a.pitchShiftRange - 1, newNoteVol: _a.pitchShiftCenter, forSong: false, convertRealFactor: -_a.pitchShiftCenter, associatedEffect: 11, associatedMDEffect: 0, maxIndex: 0,\n        promptName: \"Pitch Shift\", promptDesc: [\"This setting controls the pitch offset of your instrument, just like the pitch shift slider.\", \"At $MID your instrument will have no pitch shift. This increases as you decrease toward $LO pitches (half-steps) at the low end, or increases towards +$HI pitches at the high end.\", \"[OVERWRITING] [$LO - $HI] [pitch]\"] },\n    { name: \"sustain\", pianoName: \"Sustain\", maxRawVol: _a.stringSustainRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 11, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"Picked String Sustain\", promptDesc: [\"This setting controls the sustain of your picked string instrument, just like the sustain slider.\", \"At $LO, your instrument will have minimum sustain and sound 'plucky'. This increases to a more held sound as your modulator approaches the maximum, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"post volume\", pianoName: \"Mix Vol.\", maxRawVol: _a.volumeRange, newNoteVol: Math.ceil(_a.volumeRange / 2), forSong: false, convertRealFactor: Math.ceil(-_a.volumeRange / 2.0), associatedEffect: 11, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"Instrument Post Volume\", promptDesc: [\"This setting affects the volume of your instrument as if its volume slider had been moved.\", \"At $MID, an instrument's volume will be unchanged from default. This means you can still use the volume sliders to mix the base volume of instruments, since this setting and the default value work multiplicatively. The volume gradually increases up to $HI, or decreases down to mute at $LO.\", \"Unlike the 'note volume' setting, mix volume is very straightforward and simply affects the resultant instrument volume after all effects are applied.\", \"[MULTIPLICATIVE] [$LO - $HI]\"] },\n    { name: \"fm slider 5\", pianoName: \"FM 5\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: 11, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"FM Slider 5\", promptDesc: [\"This setting affects the strength of the fifth FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\n    { name: \"fm slider 6\", pianoName: \"FM 6\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: 11, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"FM Slider 6\", promptDesc: [\"This setting affects the strength of the sixth FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"] },\n    { name: \"decimal offset\", pianoName: \"Decimal Offset\", maxRawVol: 99, newNoteVol: 0, forSong: false, convertRealFactor: 0, invertSliderIndicator: true, associatedEffect: 11, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"Decimal Offset\", promptDesc: [\"This setting controls the decimal offset that is subtracted from the pulse width; use this for creating values like 12.5 or 6.25.\", \"[$LO - $HI]\"] },\n    { name: \"envelope speed\", pianoName: \"EnvelopeSpd\", maxRawVol: 50, newNoteVol: 12, forSong: false, convertRealFactor: 0, associatedEffect: 11, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"Envelope Speed\", promptDesc: [\"This setting controls how fast all of the envelopes for the instrument play.\", \"At $LO, your instrument's envelopes will be frozen, and at values near there they will change very slowly. At 12, the envelopes will work as usual, performing at normal speed. This increases up to $HI, where the envelopes will change very quickly. The speeds are given below:\",\n            \"[0-4]: x0, x1/16, x⅛, x⅕, x¼,\", \"[5-9]: x⅓, x⅖, x½, x⅔, x¾,\", \"[10-14]: x⅘, x0.9, x1, x1.1, x1.2,\", \"[15-19]: x1.3, x1.4, x1.5, x1.6, x1.7,\", \"[20-24]: x1.8, x1.9, x2, x2.1, x2.2,\", \"[25-29]: x2.3, x2.4, x2.5, x2.6, x2.7,\", \"[30-34]: x2.8, x2.9, x3, x3.1, x3.2,\", \"[35-39]: x3.3, x3.4, x3.5, x3.6, x3.7,\", \"[40-44]: x3.8, x3.9, x4, x4.15, x4.3,\", \"[45-50]: x4.5, x4.8, x5, x5.5, x6, x8\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"dynamism\", pianoName: \"Dynamism\", maxRawVol: _a.supersawDynamismMax, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 11, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"Supersaw Dynamism\", promptDesc: [\"This setting controls the supersaw dynamism of your instrument, just like the dynamism slider.\", \"At $LO, your instrument will have only a single pulse contributing. Increasing this will raise the contribution of other waves which is similar to a chorus effect. The effect gets more noticeable up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"spread\", pianoName: \"Spread\", maxRawVol: _a.supersawSpreadMax, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 11, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"Supersaw Spread\", promptDesc: [\"This setting controls the supersaw spread of your instrument, just like the spread slider.\", \"At $LO, all the pulses in your supersaw will be at the same frequency. Increasing this value raises the frequency spread of the contributing waves, up to a dissonant spread at the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"saw shape\", pianoName: \"Saw Shape\", maxRawVol: _a.supersawShapeMax, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 11, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"Supersaw Shape\", promptDesc: [\"This setting controls the supersaw shape of your instrument, just like the Saw↔Pulse slider.\", \"As the slider's name implies, this effect will give you a sawtooth wave at $LO, and a full pulse width wave at $HI. Values in between will be a blend of the two.\", \"[OVERWRITING] [$LO - $HI] [%]\"] },\n    { name: \"individual envelope speed\", pianoName: \"IndvEnvSpd\", maxRawVol: 63, newNoteVol: 23, forSong: false, convertRealFactor: 0, associatedEffect: 11, associatedMDEffect: 6, maxIndex: _a.maxEnvelopeCount - 1,\n        promptName: \"Individual Envelope Speed\", promptDesc: [\"This setting controls how fast the specified envelope of the instrument will play.\", \"At $LO, your the envelope will be frozen, and at values near there they will change very slowly. At 23, the envelope will work as usual, performing at normal speed. This increases up to $HI, where the envelope will change very quickly. The speeds are given below:\",\n            \"[0-4]: x0, x0.01, x0.02, x0.03, x0.04,\", \"[5-9]: x0.05, x0.06, x0.07, x0.08, x0.09,\", \"[10-14]: x0.1, x0.2, x0.25, x0.3, x0.33,\", \"[15-19]: x0.4, x0.5, x0.6, x0.6667, x0.7,\", \"[20-24]: x0.75, x0.8, x0.9, x1, x1.25,\", \"[25-29]: x1.3333, x1.5, x1.6667, x1.75, x2,\", \"[30-34]: x2.25, x2.5, x2.75, x3, x3.5,\", \"[35-39]: x4, x4.5, x5, x5.5, x6,\", \"[40-44]: x6.5, x7, x7.5, x8, x8.5,\", \"[45-49]: x9, x9.5, x10, x11, x12\", \"[50-54]: x13, x14, x15, x16, x17\", \"[55-59]: x18, x19, x20, x24, x32\", \"[60-63]: x40, x64, x128, x256\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"song eq\", pianoName: \"Song EQ\", maxRawVol: 10, newNoteVol: 0, forSong: true, convertRealFactor: 0, associatedEffect: 11, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"Song EQ Filter\", promptDesc: [\"This setting overwrites every instrument's eq filter. You can do this in a few separate ways, similar to the per instrument eq filter modulator.\", \"When the option 'morph' is selected, your modulator values will indicate a sub-filter index of your EQ filter to 'morph' to over time. For example, a change from 0 to 1 means your main filter (default) will morph to sub-filter 1 over the specified duration. You can shape the main filter and sub-filters in the large filter editor ('+' button). If your two filters' number, type, and order of filter dots all match up, the morph will happen smoothly and you'll be able to hear them changing. If they do not match up, the filters will simply jump between each other.\", \"Note that filters will morph based on endpoints in the pattern editor. So, if you specify a morph from sub-filter 1 to 4 but do not specifically drag in new endpoints for 2 and 3, it will morph directly between 1 and 4 without going through the others.\", \"If you target Dot X or Dot Y, you can finely tune the coordinates of a single dot for your filter. The number of available dots to choose is dependent on your main filter's dot count.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"reset envelope\", pianoName: \"ResetEnv\", maxRawVol: 1, newNoteVol: 1, forSong: false, convertRealFactor: 0, associatedEffect: 11, associatedMDEffect: 6, maxIndex: _a.maxEnvelopeCount - 1,\n        promptName: \"Reset Envelope\", promptDesc: [\"This setting functions a lot like the reset arp modulator. Wherever a note is placed, the envelope of this instrument at the specified index will reset at the very start of that note. \", \"[$LO - $HI]\",] },\n    { name: \"ring modulation\", pianoName: \"Ring Mod\", maxRawVol: _a.ringModRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 7, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"Ring Modulation\", promptDesc: [\"This setting controls the Ring Modulation effect in your instrument.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"ring mod hertz\", pianoName: \"Ring Mod(Hz)\", maxRawVol: _a.ringModHzRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 7, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"Ring Modulation (Hertz)\", promptDesc: [\"This setting controls the Hertz (Hz) used in the Ring Modulation effect in your instrument.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"granular\", pianoName: \"Granular\", maxRawVol: _a.granularRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 8, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"Granular\", promptDesc: [\"This setting controls the granular effect in your instrument.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"grain freq\", pianoName: \"Grain #\", maxRawVol: _a.grainAmountsMax, newNoteVol: 8, forSong: false, convertRealFactor: 0, associatedEffect: 8, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"Grain Count\", promptDesc: [\"This setting controls the density of grains for the granular effect on your instrument.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"grain size\", pianoName: \"Grain Size\", maxRawVol: _a.grainSizeMax / _a.grainSizeStep, newNoteVol: _a.grainSizeMin / _a.grainSizeStep, forSong: false, convertRealFactor: 0, associatedEffect: 8, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"Grain Size\", promptDesc: [\"This setting controls the grain size of the granular effect in your instrument.\", \"The number shown in the mod channel is multiplied by \" + _a.grainSizeStep + \" to get the actual grain size.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"grain range\", pianoName: \"Grain Range\", maxRawVol: _a.grainRangeMax / _a.grainSizeStep, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 8, associatedMDEffect: 6, maxIndex: 0,\n        promptName: \"Grain Range\", promptDesc: [\"This setting controls the range of values for your grain size of the granular effect in your instrument, from no variation to a lot\", \"The number shown in the mod channel is multiplied by \" + _a.grainSizeStep + \" to get the actual grain size.\", \"[OVERWRITING] [$LO - $HI]\"] },\n    { name: \"individual envelope lower bound\", pianoName: \"IndvEnvLow\", maxRawVol: _a.perEnvelopeBoundMax * 10, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: 11, associatedMDEffect: 6, maxIndex: _a.maxEnvelopeCount - 1,\n        promptName: \"Individual Envelope Lower Bound\", promptDesc: [\"This setting controls the envelope lower bound\", \"At $LO, your the envelope will output an upper envelope bound to 0, and at $HI your envelope will output an upper envelope bound to 2.\", \"This settings will not work if your lower envelope bound is higher than your upper envelope bound\",] },\n    { name: \"individual envelope upper bound\", pianoName: \"IndvEnvUp\", maxRawVol: _a.perEnvelopeBoundMax * 10, newNoteVol: 10, forSong: false, convertRealFactor: 0, associatedEffect: 11, associatedMDEffect: 6, maxIndex: _a.maxEnvelopeCount - 1,\n        promptName: \"Individual Envelope Upper Bound\", promptDesc: [\"This setting controls the envelope upper bound\", \"At $LO, your the envelope will output a 0 to lower envelope bound, and at $HI your envelope will output a 2 to lower envelope bound.\", \"This settings will not work if your lower envelope bound is higher than your upper envelope bound\",] },\n]);\nfunction centerWave(wave) {\n    let sum = 0.0;\n    for (let i = 0; i < wave.length; i++)\n        sum += wave[i];\n    const average = sum / wave.length;\n    for (let i = 0; i < wave.length; i++)\n        wave[i] -= average;\n    performIntegral(wave);\n    wave.push(0);\n    return new Float32Array(wave);\n}\nfunction centerAndNormalizeWave(wave) {\n    let magn = 0.0;\n    centerWave(wave);\n    for (let i = 0; i < wave.length - 1; i++) {\n        magn += Math.abs(wave[i]);\n    }\n    const magnAvg = magn / (wave.length - 1);\n    for (let i = 0; i < wave.length - 1; i++) {\n        wave[i] = wave[i] / magnAvg;\n    }\n    return new Float32Array(wave);\n}\nexport function performIntegral(wave) {\n    let cumulative = 0.0;\n    let newWave = new Float32Array(wave.length);\n    for (let i = 0; i < wave.length; i++) {\n        newWave[i] = cumulative;\n        cumulative += wave[i];\n    }\n    return newWave;\n}\nexport function performIntegralOld(wave) {\n    let cumulative = 0.0;\n    for (let i = 0; i < wave.length; i++) {\n        const temp = wave[i];\n        wave[i] = cumulative;\n        cumulative += temp;\n    }\n}\nexport function getPulseWidthRatio(pulseWidth) {\n    return pulseWidth / (Config.pulseWidthRange * 2);\n}\nexport function getDrumWave(index, inverseRealFourierTransform, scaleElementsByFactor) {\n    let wave = Config.chipNoises[index].samples;\n    if (wave == null) {\n        wave = new Float32Array(Config.chipNoiseLength + 1);\n        Config.chipNoises[index].samples = wave;\n        if (index == 0) {\n            let drumBuffer = 1;\n            for (let i = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = (drumBuffer & 1) * 2.0 - 1.0;\n                let newBuffer = drumBuffer >> 1;\n                if (((drumBuffer + newBuffer) & 1) == 1) {\n                    newBuffer += 1 << 14;\n                }\n                drumBuffer = newBuffer;\n            }\n        }\n        else if (index == 1) {\n            for (let i = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = Math.random() * 2.0 - 1.0;\n            }\n        }\n        else if (index == 2) {\n            let drumBuffer = 1;\n            for (let i = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = (drumBuffer & 1) * 2.0 - 1.0;\n                let newBuffer = drumBuffer >> 1;\n                if (((drumBuffer + newBuffer) & 1) == 1) {\n                    newBuffer += 2 << 14;\n                }\n                drumBuffer = newBuffer;\n            }\n        }\n        else if (index == 3) {\n            let drumBuffer = 1;\n            for (let i = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = (drumBuffer & 1) * 2.0 - 1.0;\n                let newBuffer = drumBuffer >> 1;\n                if (((drumBuffer + newBuffer) & 1) == 1) {\n                    newBuffer += 10 << 2;\n                }\n                drumBuffer = newBuffer;\n            }\n        }\n        else if (index == 4) {\n            drawNoiseSpectrum(wave, Config.chipNoiseLength, 10, 11, 1, 1, 0);\n            drawNoiseSpectrum(wave, Config.chipNoiseLength, 11, 14, .6578, .6578, 0);\n            inverseRealFourierTransform(wave, Config.chipNoiseLength);\n            scaleElementsByFactor(wave, 1.0 / Math.sqrt(Config.chipNoiseLength));\n        }\n        else if (index == 5) {\n            var drumBuffer = 1;\n            for (var i = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = (drumBuffer & 1) * 2.0 - 1.0;\n                var newBuffer = drumBuffer >> 1;\n                if (((drumBuffer + newBuffer) & 1) == 1) {\n                    newBuffer += 10 << 2;\n                }\n                drumBuffer = newBuffer;\n            }\n        }\n        else if (index == 6) {\n            drawNoiseSpectrum(wave, Config.chipNoiseLength, 1, 10, 1, 1, 0);\n            drawNoiseSpectrum(wave, Config.chipNoiseLength, 20, 14, -2, -2, 0);\n            inverseRealFourierTransform(wave, Config.chipNoiseLength);\n            scaleElementsByFactor(wave, 1.0 / Math.sqrt(Config.chipNoiseLength));\n        }\n        else if (index == 7) {\n            var drumBuffer = 1;\n            for (var i = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = (drumBuffer & 1) * 4.0 * (Math.random() * 14 + 1) - 8.0;\n                var newBuffer = drumBuffer >> 1;\n                if (((drumBuffer + newBuffer) & 1) == 1) {\n                    newBuffer += 15 << 2;\n                }\n                drumBuffer = newBuffer;\n            }\n        }\n        else if (index == 8) {\n            var drumBuffer = 1;\n            for (var i = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = (drumBuffer & 1) / 2.0 - 0.5;\n                var newBuffer = drumBuffer >> 1;\n                if (((drumBuffer + newBuffer) & 1) == 1) {\n                    newBuffer -= 10 << 2;\n                }\n                drumBuffer = newBuffer;\n            }\n        }\n        else if (index == 9) {\n            let drumBuffer = 1;\n            for (let i = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = (drumBuffer & 1) * 2.0 - 1.1;\n                let newBuffer = drumBuffer >> 1;\n                if (((drumBuffer + newBuffer) & 1) == 1) {\n                    newBuffer += 8 ^ 2 << 16;\n                }\n                drumBuffer = newBuffer;\n            }\n        }\n        else if (index == 10) {\n            for (let i = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = Math.round(Math.random());\n            }\n        }\n        else if (index == 11) {\n            var drumBuffer = 1;\n            for (var i = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = Math.round((drumBuffer & 1));\n                var newBuffer = drumBuffer >> 1;\n                if (((drumBuffer + newBuffer) & 1) == 1) {\n                    newBuffer -= 10 << 2;\n                }\n                drumBuffer = newBuffer;\n            }\n        }\n        else if (index == 12) {\n            for (let i = 0; i < Config.chipNoiseLength; i++) {\n                var ultraboxnewchipnoiserand = Math.random();\n                wave[i] = Math.pow(ultraboxnewchipnoiserand, Math.clz32(ultraboxnewchipnoiserand));\n            }\n        }\n        else if (index == 13) {\n            var b0 = 0, b1 = 0, b2 = 0, b3, b4, b5, b6;\n            b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;\n            for (let i = 0; i < Config.chipNoiseLength; i++) {\n                var white = Math.random() * 2 - 1;\n                b0 = 0.99886 * b0 + white * 0.0555179;\n                b1 = 0.99332 * b1 + white * 0.0750759;\n                b2 = 0.96900 * b2 + white * 0.1538520;\n                b3 = 0.86650 * b3 + white * 0.3104856;\n                b4 = 0.55000 * b4 + white * 0.5329522;\n                b5 = -0.7616 * b5 - white * 0.0168980;\n                wave[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n                wave[i] *= 0.44;\n                b6 = white * 0.115926;\n            }\n        }\n        else if (index == 14) {\n            var lastOut = 0.0;\n            for (let i = 0; i < Config.chipNoiseLength; i++) {\n                var white = Math.random() * 2 - 1;\n                wave[i] = (lastOut + (0.02 * white)) / 1.02;\n                lastOut = wave[i];\n                wave[i] *= 14;\n            }\n        }\n        else {\n            throw new Error(\"Unrecognized drum index: \" + index);\n        }\n        wave[Config.chipNoiseLength] = wave[0];\n    }\n    return wave;\n}\nexport function drawNoiseSpectrum(wave, waveLength, lowOctave, highOctave, lowPower, highPower, overallSlope) {\n    const referenceOctave = 11;\n    const referenceIndex = 1 << referenceOctave;\n    const lowIndex = Math.pow(2, lowOctave) | 0;\n    const highIndex = Math.min(waveLength >> 1, Math.pow(2, highOctave) | 0);\n    const retroWave = getDrumWave(0, null, null);\n    let combinedAmplitude = 0.0;\n    for (let i = lowIndex; i < highIndex; i++) {\n        let lerped = lowPower + (highPower - lowPower) * (Math.log2(i) - lowOctave) / (highOctave - lowOctave);\n        let amplitude = Math.pow(2, (lerped - 1) * 7 + 1) * lerped;\n        amplitude *= Math.pow(i / referenceIndex, overallSlope);\n        combinedAmplitude += amplitude;\n        amplitude *= retroWave[i];\n        const radians = 0.61803398875 * i * i * Math.PI * 2.0;\n        wave[i] = Math.cos(radians) * amplitude;\n        wave[waveLength - i] = Math.sin(radians) * amplitude;\n    }\n    return combinedAmplitude;\n}\nexport function getArpeggioPitchIndex(pitchCount, useFastTwoNoteArp, arpeggio) {\n    let arpeggioPattern = Config.arpeggioPatterns[pitchCount - 1];\n    if (arpeggioPattern != null) {\n        if (pitchCount == 2 && useFastTwoNoteArp == false) {\n            arpeggioPattern = [0, 0, 1, 1];\n        }\n        return arpeggioPattern[arpeggio % arpeggioPattern.length];\n    }\n    else {\n        return arpeggio % pitchCount;\n    }\n}\nexport function toNameMap(array) {\n    const dictionary = {};\n    for (let i = 0; i < array.length; i++) {\n        const value = array[i];\n        value.index = i;\n        dictionary[value.name] = value;\n    }\n    const result = array;\n    result.dictionary = dictionary;\n    return result;\n}\nexport function effectsIncludeTransition(effects) {\n    return (effects & (1 << 3)) != 0;\n}\nexport function effectsIncludeChord(effects) {\n    return (effects & (1 << 4)) != 0;\n}\nexport function effectsIncludePitchShift(effects) {\n    return (effects & (1 << 0)) != 0;\n}\nexport function effectsIncludeDetune(effects) {\n    return (effects & (1 << 1)) != 0;\n}\nexport function effectsIncludeVibrato(effects) {\n    return (effects & (1 << 2)) != 0;\n}\nexport function effectsIncludeNoteRange(effects) {\n    return (effects & (1 << 5)) != 0;\n}\nexport function calculateRingModHertz(sliderHz, sliderHzOffset = 0) {\n    if (sliderHz == 0)\n        return 0;\n    if (sliderHz > 0)\n        sliderHz -= 1 / Config.ringModHzRange;\n    if (sliderHz > 1 / Config.ringModHzRange)\n        sliderHz += 1 / Config.ringModHzRange;\n    return Math.floor(Config.ringModMinHz * Math.pow(Config.ringModMaxHz / Config.ringModMinHz, sliderHz));\n}\nexport function rawChipToIntegrated(raw) {\n    const newArray = new Array(raw.length);\n    const dictionary = {};\n    for (let i = 0; i < newArray.length; i++) {\n        newArray[i] = Object.assign([], raw[i]);\n        const value = newArray[i];\n        value.index = i;\n        dictionary[value.name] = value;\n    }\n    for (let key in dictionary) {\n        dictionary[key].samples = performIntegral(dictionary[key].samples);\n    }\n    const result = newArray;\n    result.dictionary = dictionary;\n    return result;\n}\n//# sourceMappingURL=SynthConfig.js.map","export class Deque {\n    constructor() {\n        this._capacity = 1;\n        this._buffer = [undefined];\n        this._mask = 0;\n        this._offset = 0;\n        this._count = 0;\n    }\n    pushFront(element) {\n        if (this._count >= this._capacity)\n            this._expandCapacity();\n        this._offset = (this._offset - 1) & this._mask;\n        this._buffer[this._offset] = element;\n        this._count++;\n    }\n    pushBack(element) {\n        if (this._count >= this._capacity)\n            this._expandCapacity();\n        this._buffer[(this._offset + this._count) & this._mask] = element;\n        this._count++;\n    }\n    popFront() {\n        if (this._count <= 0)\n            throw new Error(\"No elements left to pop.\");\n        const element = this._buffer[this._offset];\n        this._buffer[this._offset] = undefined;\n        this._offset = (this._offset + 1) & this._mask;\n        this._count--;\n        return element;\n    }\n    popBack() {\n        if (this._count <= 0)\n            throw new Error(\"No elements left to pop.\");\n        this._count--;\n        const index = (this._offset + this._count) & this._mask;\n        const element = this._buffer[index];\n        this._buffer[index] = undefined;\n        return element;\n    }\n    peakFront() {\n        if (this._count <= 0)\n            throw new Error(\"No elements left to pop.\");\n        return this._buffer[this._offset];\n    }\n    peakBack() {\n        if (this._count <= 0)\n            throw new Error(\"No elements left to pop.\");\n        return this._buffer[(this._offset + this._count - 1) & this._mask];\n    }\n    count() {\n        return this._count;\n    }\n    set(index, element) {\n        if (index < 0 || index >= this._count)\n            throw new Error(\"Invalid index\");\n        this._buffer[(this._offset + index) & this._mask] = element;\n    }\n    get(index) {\n        if (index < 0 || index >= this._count)\n            throw new Error(\"Invalid index\");\n        return this._buffer[(this._offset + index) & this._mask];\n    }\n    remove(index) {\n        if (index < 0 || index >= this._count)\n            throw new Error(\"Invalid index\");\n        if (index <= (this._count >> 1)) {\n            while (index > 0) {\n                this.set(index, this.get(index - 1));\n                index--;\n            }\n            this.popFront();\n        }\n        else {\n            index++;\n            while (index < this._count) {\n                this.set(index - 1, this.get(index));\n                index++;\n            }\n            this.popBack();\n        }\n    }\n    _expandCapacity() {\n        if (this._capacity >= 0x40000000)\n            throw new Error(\"Capacity too big.\");\n        this._capacity = this._capacity << 1;\n        const oldBuffer = this._buffer;\n        const newBuffer = new Array(this._capacity);\n        const size = this._count | 0;\n        const offset = this._offset | 0;\n        for (let i = 0; i < size; i++) {\n            newBuffer[i] = oldBuffer[(offset + i) & this._mask];\n        }\n        for (let i = size; i < this._capacity; i++) {\n            newBuffer[i] = undefined;\n        }\n        this._offset = 0;\n        this._buffer = newBuffer;\n        this._mask = this._capacity - 1;\n    }\n}\n//# sourceMappingURL=Deque.js.map","import { toNameMap, TypePresets } from \"../synth/SynthConfig\";\nexport const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|android|ipad|playbook|silk/i.test(navigator.userAgent);\nexport function prettyNumber(value) {\n    return value.toFixed(2).replace(/\\.?0*$/, \"\");\n}\nexport class EditorConfig {\n    static valueToPreset(presetValue) {\n        var _a;\n        const categoryIndex = presetValue >> 6;\n        const presetIndex = presetValue & 0x3F;\n        return (_a = EditorConfig.presetCategories[categoryIndex]) === null || _a === void 0 ? void 0 : _a.presets[presetIndex];\n    }\n    static midiProgramToPresetValue(program) {\n        for (let categoryIndex = 0; categoryIndex < EditorConfig.presetCategories.length; categoryIndex++) {\n            const category = EditorConfig.presetCategories[categoryIndex];\n            for (let presetIndex = 0; presetIndex < category.presets.length; presetIndex++) {\n                const preset = category.presets[presetIndex];\n                if (preset.generalMidi && preset.midiProgram == program)\n                    return (categoryIndex << 6) + presetIndex;\n            }\n        }\n        return null;\n    }\n    static nameToPresetValue(presetName) {\n        for (let categoryIndex = 0; categoryIndex < EditorConfig.presetCategories.length; categoryIndex++) {\n            const category = EditorConfig.presetCategories[categoryIndex];\n            for (let presetIndex = 0; presetIndex < category.presets.length; presetIndex++) {\n                const preset = category.presets[presetIndex];\n                if (preset.name == presetName)\n                    return (categoryIndex << 6) + presetIndex;\n            }\n        }\n        return null;\n    }\n    static instrumentToPreset(instrument) {\n        var _a;\n        return (_a = EditorConfig.presetCategories[0].presets.dictionary) === null || _a === void 0 ? void 0 : _a[TypePresets === null || TypePresets === void 0 ? void 0 : TypePresets[instrument]];\n    }\n}\nEditorConfig.version = \"v1\";\nEditorConfig.versionDisplayName = \"DragonBox!\";\nEditorConfig.releaseNotesURL = \"./patch_notes.html\";\nEditorConfig.isOnMac = /^Mac/i.test(navigator.platform) || /Mac OS X/i.test(navigator.userAgent) || /^(iPhone|iPad|iPod)/i.test(navigator.platform) || /(iPhone|iPad|iPod)/i.test(navigator.userAgent);\nEditorConfig.ctrlSymbol = EditorConfig.isOnMac ? \"⌘\" : \"Ctrl+\";\nEditorConfig.ctrlName = EditorConfig.isOnMac ? \"command\" : \"control\";\nEditorConfig.presetCategories = toNameMap([\n    {\n        name: \"Custom Instruments\", presets: toNameMap([\n            { name: TypePresets[0], customType: 0 },\n            { name: TypePresets[1], customType: 1 },\n            { name: TypePresets[2], customType: 2 },\n            { name: TypePresets[3], customType: 3 },\n            { name: TypePresets[4], customType: 4 },\n            { name: TypePresets[5], customType: 5 },\n            { name: TypePresets[6], customType: 6 },\n            { name: TypePresets[7], customType: 7 },\n            { name: TypePresets[8], customType: 8 },\n            { name: TypePresets[9], customType: 9 },\n            { name: TypePresets[11], customType: 11 },\n        ])\n    },\n    {\n        name: \"Retro Presets\", presets: toNameMap([\n            { name: \"square wave\", midiProgram: 80, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"aliasing\"], \"transition\": \"interrupt\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"chord\": \"arpeggio\", \"wave\": \"square\", \"unison\": \"none\", \"envelopes\": [] } },\n            { name: \"triangle wave\", midiProgram: 71, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"aliasing\"], \"transition\": \"interrupt\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"chord\": \"arpeggio\", \"wave\": \"triangle\", \"unison\": \"none\", \"envelopes\": [] } },\n            { name: \"square lead\", midiProgram: 80, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.3536 }], \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"wave\": \"square\", \"unison\": \"hum\", \"envelopes\": [] } },\n            { name: \"sawtooth lead 1\", midiProgram: 81, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"shimmer\", \"envelopes\": [] } },\n            { name: \"sawtooth lead 2\", midiProgram: 81, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 1 }], \"effects\": [\"vibrato\", \"aliasing\"], \"vibrato\": \"light\", \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"hum\", \"envelopes\": [] } },\n            { name: \"chip noise\", midiProgram: 116, isNoise: true, settings: { \"type\": \"noise\", \"transition\": \"hard\", \"effects\": [\"aliasing\"], \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"wave\": \"retro\" } },\n            { name: \"supersaw lead\", midiProgram: 81, settings: { \"type\": \"supersaw\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 2 }], \"effects\": [\"reverb\"], \"reverb\": 67, \"fadeInSeconds\": 0, \"fadeOutTicks\": -6, \"pulseWidth\": 50, \"dynamism\": 100, \"spread\": 58, \"shape\": 0, \"envelopes\": [] } },\n            { name: \"FM twang\", midiProgram: 32, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 1 }] } },\n            { name: \"FM bass\", midiProgram: 36, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"custom interval\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 11 }, { \"frequency\": \"1×\", \"amplitude\": 7 }, { \"frequency\": \"1×\", \"amplitude\": 9 }, { \"frequency\": \"20×\", \"amplitude\": 3 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 3 }] } },\n            { name: \"FM flute\", midiProgram: 73, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 6 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 1 }] } },\n            { name: \"FM organ\", midiProgram: 16, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"vibrato\"], \"vibrato\": \"delayed\", \"transition\": \"normal\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"custom interval\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14 }, { \"frequency\": \"2×\", \"amplitude\": 14 }, { \"frequency\": \"1×\", \"amplitude\": 11 }, { \"frequency\": \"2×\", \"amplitude\": 11 }], \"envelopes\": [] } },\n            { name: \"FM sine\", midiProgram: 55, settings: { \"type\": \"FM\", \"eqFilter\": [], \"eqFilterType\": true, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"effects\": [], \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\" }], \"envelopes\": [] } },\n            { name: \"NES Pulse\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"vibrato\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -24, -24, -24, -23, -23, -23, -23, -22, -22, -22, -22, -21, -21, -21, -21, -20, -20, -20, -20, -19, -19, -19, -19, -18, -18, -18, -18, -17, -17, -17, -17, 24, 24, 24, 24, 23, 23, 23, 23, 22, 22, 22, 22, 21, 21, 21, 21, 20, 20, 20, 20, 19, 19, 19, 19, 18, 18, 18, 18, 17, 17, 17, 17] } },\n            { name: \"Gameboy Pulse\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -20, -17, -15, -13, -13, -11, -11, -11, -9, -9, -9, -9, -7, -7, -7, -7, -7, -5, -5, -5, -5, -5, -5, -3, -3, -3, -3, -3, -3, -3, -3, 24, 20, 17, 15, 13, 13, 11, 11, 11, 9, 9, 9, 9, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3] } },\n            { name: \"VRC6 Sawtooth\", midiProgram: 81, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -20, -16, -13, -10, -8, -6, -5, -4, -4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 12, 12, 12, 12, 12, 12, 12, 12, 16, 16, 16, 16, 16, 16, 16, 16, 20, 20, 20, 20, 20, 20, 20, 20, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24] } },\n            { name: \"Atari Square\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -24, -24, -23, -23, -23, -22, -22, -22, -21, -21, -21, -20, -20, -20, -19, -19, -19, -18, -18, -18, -17, -17, -17, -16, -16, -16, -15, -15, -15, -14, -14, -14, -13, -13, -13, 24, 24, 24, 23, 23, 23, 22, 22, 22, 21, 21, 21, 20, 20, 20, 19, 19, 19, 18, 18, 18, 17, 17, 17, 16, 16, 15, 15] } },\n            { name: \"Atari Bass\", midiProgram: 36, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"interrupt\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, -24, -24, -24, 24, 24, 24, -24, -24, -24, 24, 24, 24, -24, -24, -24, 24, 24, -24, -24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, -24, -24, 24, 24, 24, 24, 24, -24, -24, -24, -24, 24, 24, -24, -24, 24, 24] } },\n            { name: \"Sunsoft Bass\", midiProgram: 36, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [24, 24, 15, 15, 9, 9, -4, -4, 0, 0, -13, -13, -19, -19, -24, -24, -24, -24, -10, -10, 0, 0, -7, -7, -7, -7, 0, 0, 6, 6, -4, -4, 3, 3, -4, -4, 3, 3, 3, 3, 9, 9, 15, 15, 15, 15, 6, 6, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, 3, 3, 12, 12, 24, 24] } },\n        ])\n    },\n    {\n        name: \"Keyboard Presets\", presets: toNameMap([\n            { name: \"grand piano 1\", midiProgram: 0, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.7071 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 2.8284 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.125 }], \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [100, 100, 86, 86, 86, 71, 71, 71, 0, 86, 71, 71, 71, 57, 57, 71, 57, 14, 57, 57, 57, 57, 57, 57, 57, 57, 29, 57], \"unison\": \"piano\", \"stringSustain\": 79, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"note size\" }] } },\n            { name: \"bright piano\", midiProgram: 1, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.7071 }, { \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 3363.59, \"linearGain\": 1.4142 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"chord\": \"simultaneous\", \"harmonics\": [100, 100, 86, 86, 71, 71, 0, 71, 71, 71, 71, 71, 71, 14, 57, 57, 57, 57, 57, 57, 29, 57, 57, 57, 57, 57, 57, 57], \"unison\": \"piano\", \"stringSustain\": 86, \"envelopes\": [] } },\n            { name: \"electric grand\", midiProgram: 2, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.5 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"wave\": \"1/8 pulse\", \"unison\": \"shimmer\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }] } },\n            { name: \"honky-tonk piano\", midiProgram: 3, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 0.3536 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [100, 100, 86, 71, 86, 71, 43, 71, 43, 43, 57, 57, 57, 29, 57, 57, 57, 57, 57, 57, 43, 57, 57, 57, 43, 43, 43, 43], \"unison\": \"honky tonk\", \"stringSustain\": 71, \"envelopes\": [] } },\n            { name: \"electric piano 1\", midiProgram: 4, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 0.5 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"harmonics\": [86, 100, 100, 71, 71, 57, 57, 43, 43, 43, 29, 29, 29, 14, 14, 14, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 2\" }] } },\n            { name: \"electric piano 2\", midiProgram: 5, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12 }, { \"frequency\": \"1×\", \"amplitude\": 6 }, { \"frequency\": \"1×\", \"amplitude\": 9 }, { \"frequency\": \"16×\", \"amplitude\": 6 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 3 }] } },\n            { name: \"harpsichord\", midiProgram: 6, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 11313.71, \"linearGain\": 2.8284 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"chord\": \"simultaneous\", \"harmonics\": [100, 100, 100, 86, 57, 86, 86, 86, 86, 57, 57, 71, 71, 86, 86, 71, 71, 86, 86, 71, 71, 71, 71, 71, 71, 71, 71, 71], \"unison\": \"none\", \"stringSustain\": 79, \"envelopes\": [] } },\n            { name: \"clavinet\", midiProgram: 7, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.3536 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 6, \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 15 }, { \"frequency\": \"~1×\", \"amplitude\": 6 }, { \"frequency\": \"8×\", \"amplitude\": 4 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 2\" }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 2\" }] } },\n            { name: \"dulcimer\", midiProgram: 15, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.3536 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"harmonics\": [100, 100, 100, 86, 100, 86, 57, 100, 100, 86, 100, 86, 100, 86, 100, 71, 57, 71, 71, 100, 86, 71, 86, 86, 100, 86, 86, 86], \"unison\": \"piano\", \"stringSustain\": 79, \"envelopes\": [] } },\n            { name: \"grand piano 2\", midiProgram: 0, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.7071 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 2.8284 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.125 }], \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [100, 86, 86, 86, 86, 71, 71, 57, 0, 57, 29, 43, 57, 57, 57, 43, 43, 0, 29, 43, 43, 43, 43, 43, 43, 29, 0, 29], \"unison\": \"piano\", \"stringSustain\": 79, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"note size\" }] } },\n            { name: \"grand piano 3\", midiProgram: 0, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.7071 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 4 }, { \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.1768 }, { \"type\": \"peak\", \"cutoffHz\": 3363.59, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 2378.41, \"linearGain\": 0.25 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 125, \"linearGain\": 0.0884 }], \"reverb\": 67, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"harmonics\": [100, 100, 86, 86, 86, 71, 71, 71, 0, 71, 71, 71, 71, 57, 57, 71, 57, 14, 57, 57, 57, 57, 57, 57, 57, 57, 29, 57], \"unison\": \"piano\", \"stringSustain\": 86, \"stringSustainType\": \"acoustic\", \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"note size\", \"index\": 0 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"twang 1\", \"index\": 1 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"twang 1\", \"index\": 1 }] } },\n        ])\n    },\n    {\n        name: \"Idiophone Presets\", presets: toNameMap([\n            { name: \"celesta\", midiProgram: 8, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 1\" }, { \"frequency\": \"3×\", \"amplitude\": 1, \"envelope\": \"twang 2\" }] } },\n            { name: \"glockenspiel\", midiProgram: 9, generalMidi: true, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"preset\": 193, \"effects\": [\"panning\", \"chord type\", \"note filter\", \"reverb\"], \"chord\": \"strum\", \"fastTwoNoteArp\": true, \"arpeggioSpeed\": 12, \"noteFilterType\": true, \"noteSimpleCut\": 9, \"noteSimplePeak\": 1, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.5 }], \"pan\": 0, \"panDelay\": 10, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"5×\", \"amplitude\": 11, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"8×\", \"amplitude\": 7, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"20×\", \"amplitude\": 2, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 8, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 10, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n            { name: \"music box 1\", midiProgram: 10, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.5 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"harmonics\": [100, 0, 0, 100, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 71, 0], \"unison\": \"none\", \"stringSustain\": 64, \"envelopes\": [] } },\n            { name: \"music box 2\", midiProgram: 10, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 0.7071 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"harmonics\": [100, 57, 57, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0], \"unison\": \"none\", \"stringSustain\": 29, \"envelopes\": [] } },\n            { name: \"vibraphone\", midiProgram: 11, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"9×\", \"amplitude\": 3, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }] } },\n            { name: \"marimba\", midiProgram: 12, generalMidi: true, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"preset\": 197, \"effects\": [\"panning\", \"chord type\", \"note filter\", \"reverb\"], \"chord\": \"strum\", \"fastTwoNoteArp\": true, \"arpeggioSpeed\": 12, \"noteFilterType\": true, \"noteSimpleCut\": 6, \"noteSimplePeak\": 2, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.7071 }], \"pan\": 0, \"panDelay\": 10, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 6, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"13×\", \"amplitude\": 6, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 10, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 2 }], \"isDrum\": false } },\n            { name: \"kalimba\", midiProgram: 108, generalMidi: true, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"preset\": 198, \"effects\": [\"panning\", \"chord type\", \"note filter\", \"reverb\"], \"chord\": \"strum\", \"fastTwoNoteArp\": true, \"arpeggioSpeed\": 12, \"noteFilterType\": true, \"noteSimpleCut\": 7, \"noteSimplePeak\": 1, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 0.5 }], \"pan\": 0, \"panDelay\": 10, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 11, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"5×\", \"amplitude\": 3, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"20×\", \"amplitude\": 3, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 10, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 8, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 2 }], \"isDrum\": false } },\n            { name: \"xylophone\", midiProgram: 13, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"11×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 6, \"envelope\": \"twang 1\" }] } },\n            { name: \"tubular bell\", midiProgram: 14, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }, { \"type\": \"high-pass\", \"cutoffHz\": 105.11, \"linearGain\": 0.3536 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 96, \"chord\": \"strum\", \"harmonics\": [43, 71, 0, 100, 0, 100, 0, 86, 0, 0, 86, 0, 14, 71, 14, 14, 57, 14, 14, 43, 14, 14, 43, 14, 14, 43, 14, 14], \"unison\": \"shimmer\", \"stringSustain\": 86, \"envelopes\": [] } },\n            { name: \"bell synth\", midiProgram: 14, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 6, \"envelope\": \"twang 3\" }, { \"frequency\": \"20×\", \"amplitude\": 1, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n            { name: \"rain drop\", midiProgram: 96, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 3, \"envelope\": \"twang 1\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"tremolo1\" }] } },\n            { name: \"crystal\", midiProgram: 98, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"delayed\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 4, \"envelope\": \"custom\" }] } },\n            { name: \"tinkle bell\", midiProgram: 112, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"~2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"5×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"16×\", \"amplitude\": 7, \"envelope\": \"custom\" }] } },\n            { name: \"agogo\", midiProgram: 113, generalMidi: true, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"preset\": 205, \"effects\": [\"panning\", \"chord type\", \"note filter\", \"reverb\"], \"chord\": \"strum\", \"fastTwoNoteArp\": true, \"arpeggioSpeed\": 12, \"noteFilterType\": true, \"noteSimpleCut\": 8, \"noteSimplePeak\": 1, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.5 }], \"pan\": 0, \"panDelay\": 10, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→4\", \"feedbackAmplitude\": 15, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"5×\", \"amplitude\": 6, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"8×\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"13×\", \"amplitude\": 11, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 10, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 10, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n        ])\n    },\n    {\n        name: \"Guitar Presets\", presets: toNameMap([\n            { name: \"nylon guitar\", midiProgram: 24, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"5×\", \"amplitude\": 2, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\n            { name: \"steel guitar\", midiProgram: 25, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"harmonics\": [100, 100, 86, 71, 71, 71, 86, 86, 71, 57, 43, 43, 43, 57, 57, 57, 57, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43], \"unison\": \"none\", \"stringSustain\": 71, \"envelopes\": [] } },\n            { name: \"jazz guitar\", midiProgram: 26, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 57, 71, 71, 43, 57, 71, 57, 43, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0] } },\n            { name: \"clean guitar\", midiProgram: 27, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 100, 100, 100, 86, 57, 86, 100, 100, 100, 71, 57, 43, 71, 86, 71, 57, 57, 71, 71, 71, 71, 57, 57, 57, 57, 57, 43] } },\n            { name: \"muted guitar\", midiProgram: 28, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 4, \"envelope\": \"twang 3\" }, { \"frequency\": \"4×\", \"amplitude\": 4, \"envelope\": \"twang 2\" }, { \"frequency\": \"16×\", \"amplitude\": 4, \"envelope\": \"twang 1\" }] } },\n        ])\n    },\n    {\n        name: \"Picked Bass Presets\", presets: toNameMap([\n            { name: \"acoustic bass\", midiProgram: 32, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14] } },\n            { name: \"fingered bass\", midiProgram: 33, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 71, 57, 71, 43, 57, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 0] } },\n            { name: \"picked bass\", midiProgram: 34, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 1, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"steady\" }] } },\n            { name: \"fretless bass\", midiProgram: 35, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 1000, \"filterResonance\": 14, \"filterEnvelope\": \"flare 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 71, 57, 57, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 29, 14] } },\n            { name: \"slap bass 1\", midiProgram: 36, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 100, 100, 86, 71, 57, 29, 29, 43, 43, 57, 71, 57, 29, 29, 43, 57, 57, 57, 43, 43, 43, 57, 71, 71, 71, 71] } },\n            { name: \"slap bass 2\", midiProgram: 37, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"13×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\n            { name: \"bass synth 1\", midiProgram: 38, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"twang 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 13, \"envelope\": \"twang 2\" }] } },\n            { name: \"bass synth 2\", midiProgram: 39, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 1000, \"filterResonance\": 57, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"steady\" }, { \"frequency\": \"3×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n            { name: \"bass & lead\", midiProgram: 87, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 86, \"filterEnvelope\": \"twang 2\", \"wave\": \"sawtooth\", \"interval\": \"shimmer\", \"vibrato\": \"none\" } },\n            { name: \"dubstep yoi yoi\", midiProgram: 87, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.7071 }], \"effects\": [\"note filter\", \"bitcrusher\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 594.6, \"linearGain\": 11.3137 }], \"bitcrusherOctave\": 1.5, \"bitcrusherQuantization\": 0, \"transition\": \"slide\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"wave\": \"sawtooth\", \"unison\": \"none\", \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"flare 2\", \"index\": 0 }] } },\n        ])\n    },\n    {\n        name: \"Picked String Presets\", presets: toNameMap([\n            { name: \"pizzicato strings\", midiProgram: 45, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 10, \"envelope\": \"steady\" }] } },\n            { name: \"harp\", midiProgram: 46, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"hard fade\", \"effects\": \"reverb\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"~2×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }] } },\n            { name: \"sitar\", midiProgram: 104, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"hard fade\", \"effects\": \"reverb\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 57, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"twang 3\" }, { \"frequency\": \"9×\", \"amplitude\": 3, \"envelope\": \"twang 3\" }, { \"frequency\": \"16×\", \"amplitude\": 9, \"envelope\": \"swell 3\" }] } },\n            { name: \"banjo\", midiProgram: 105, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 3, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\n            { name: \"ukulele\", midiProgram: 105, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"9×\", \"amplitude\": 4, \"envelope\": \"twang 2\" }, { \"frequency\": \"1×\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\n            { name: \"shamisen\", midiProgram: 106, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 4, \"envelope\": \"twang 3\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"steady\" }] } },\n            { name: \"koto\", midiProgram: 107, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 8, \"envelope\": \"twang 3\" }, { \"frequency\": \"~2×\", \"amplitude\": 8, \"envelope\": \"twang 3\" }] } },\n        ])\n    },\n    {\n        name: \"Distortion Presets\", presets: toNameMap([\n            { name: \"overdrive guitar\", midiProgram: 29, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.7071 }, { \"type\": \"high-pass\", \"cutoffHz\": 210.22, \"linearGain\": 1 }, { \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.5 }], \"effects\": [\"note filter\", \"distortion\"], \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 2 }, { \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.7071 }], \"distortion\": 71, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"chord\": \"strum\", \"harmonics\": [86, 100, 100, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57], \"unison\": \"none\", \"stringSustain\": 71, \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"note size\", \"index\": 1 }] } },\n            { name: \"distortion guitar\", midiProgram: 30, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.7071 }, { \"type\": \"high-pass\", \"cutoffHz\": 210.22, \"linearGain\": 1 }, { \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 0.25 }], \"effects\": [\"note filter\", \"distortion\", \"reverb\"], \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 353.55, \"linearGain\": 2 }, { \"type\": \"low-pass\", \"cutoffHz\": 2000, \"linearGain\": 1 }], \"distortion\": 86, \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"chord\": \"strum\", \"harmonics\": [86, 100, 100, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57], \"unison\": \"none\", \"stringSustain\": 71, \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"note size\", \"index\": 1 }] } },\n            { name: \"charango synth\", midiProgram: 84, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 1 }], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 8, \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 13 }, { \"frequency\": \"~1×\", \"amplitude\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 6 }, { \"frequency\": \"3×\", \"amplitude\": 7 }], \"envelopes\": [{ \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\n            { name: \"guitar harmonics\", midiProgram: 31, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 2 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"algorithm\": \"1←(2 3)←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 12 }, { \"frequency\": \"16×\", \"amplitude\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 2 }, { \"frequency\": \"~1×\", \"amplitude\": 12 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 1\", \"index\": 3 }] } },\n            { name: \"PWM overdrive\", midiProgram: 29, settings: { \"type\": \"PWM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1.4142 }], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"pulseWidth\": 17.67767, \"envelopes\": [{ \"target\": \"pulseWidth\", \"envelope\": \"punch\" }] } },\n            { name: \"PWM distortion\", midiProgram: 30, settings: { \"type\": \"PWM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 2 }], \"effects\": [\"vibrato\"], \"vibrato\": \"delayed\", \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"pulseWidth\": 50, \"envelopes\": [{ \"target\": \"pulseWidth\", \"envelope\": \"swell 1\" }] } },\n            { name: \"FM overdrive\", midiProgram: 29, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 1 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 12 }, { \"frequency\": \"~2×\", \"amplitude\": 6 }, { \"frequency\": \"1×\", \"amplitude\": 12 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"twang 1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 3\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"punch\" }] } },\n            { name: \"FM distortion\", midiProgram: 30, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 2 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 4, \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 11 }, { \"frequency\": \"1×\", \"amplitude\": 9 }, { \"frequency\": \"~2×\", \"amplitude\": 4 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 3\", \"index\": 3 }] } },\n        ])\n    },\n    {\n        name: \"Bellows Presets\", presets: toNameMap([\n            { name: \"drawbar organ 1\", midiProgram: 16, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 86, 0, 86, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\n            { name: \"drawbar organ 2\", midiProgram: 16, midiSubharmonicOctaves: 1, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 29, 71, 86, 71, 14, 0, 100, 0, 0, 0, 86, 0, 0, 0, 71, 0, 0, 0, 57, 0, 0, 0, 29, 0, 0, 0, 0] } },\n            { name: \"percussive organ\", midiProgram: 17, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"preset\": 515, \"effects\": [\"panning\", \"vibrato\", \"note filter\", \"chorus\", \"reverb\"], \"vibrato\": \"delayed\", \"vibratoDepth\": 0.3, \"vibratoDelay\": 18.5, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": true, \"noteSimpleCut\": 8, \"noteSimplePeak\": 1, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 0.5 }], \"pan\": 0, \"panDelay\": 10, \"chorus\": 100, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"6×\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"2×\", \"amplitude\": 5, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"punch\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n            { name: \"rock organ\", midiProgram: 18, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"flare 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 5, \"envelope\": \"steady\" }] } },\n            { name: \"pipe organ\", midiProgram: 19, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"transition\": \"cross fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 8, \"envelope\": \"custom\" }] } },\n            { name: \"reed organ\", midiProgram: 20, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [71, 86, 100, 86, 71, 100, 57, 71, 71, 71, 43, 43, 43, 71, 43, 71, 57, 57, 57, 57, 57, 57, 57, 29, 43, 29, 29, 14] } },\n            { name: \"accordion\", midiProgram: 21, generalMidi: true, settings: { \"type\": \"chip\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"swell 1\", \"wave\": \"double saw\", \"interval\": \"honky tonk\", \"vibrato\": \"none\" } },\n            { name: \"bandoneon\", midiProgram: 23, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"interval\": \"hum\", \"vibrato\": \"none\", \"harmonics\": [86, 86, 86, 57, 71, 86, 57, 71, 71, 71, 57, 43, 57, 43, 71, 43, 71, 57, 57, 43, 43, 43, 57, 43, 43, 29, 29, 29] } },\n            { name: \"bagpipe\", midiProgram: 109, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"punch\", \"interval\": \"hum\", \"vibrato\": \"none\", \"harmonics\": [71, 86, 86, 100, 100, 86, 57, 100, 86, 71, 71, 71, 57, 57, 57, 71, 57, 71, 57, 71, 43, 57, 57, 43, 43, 43, 43, 43] } },\n        ])\n    },\n    {\n        name: \"String Presets\", presets: toNameMap([\n            { name: \"violin 1\", midiProgram: 40, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 105.11, \"linearGain\": 0.3536 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"delayed\", \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 6, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1→2\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 9 }, { \"frequency\": \"3×\", \"amplitude\": 9 }, { \"frequency\": \"2×\", \"amplitude\": 7 }, { \"frequency\": \"7×\", \"amplitude\": 5 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\n            { name: \"viola\", midiProgram: 41, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"7×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"13×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"steady\" }] } },\n            { name: \"cello\", midiProgram: 42, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.1768 }, { \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 0.7071 }, { \"type\": \"peak\", \"cutoffHz\": 4756.83, \"linearGain\": 5.6569 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.0884 }], \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 12, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2)←3←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"16×\", \"amplitude\": 5 }, { \"frequency\": \"~1×\", \"amplitude\": 10 }, { \"frequency\": \"1×\", \"amplitude\": 9 }, { \"frequency\": \"6×\", \"amplitude\": 3 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 1\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 3 }] } },\n            { name: \"contrabass\", midiProgram: 43, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2)←3←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"steady\" }, { \"frequency\": \"6×\", \"amplitude\": 3, \"envelope\": \"swell 1\" }] } },\n            { name: \"fiddle\", midiProgram: 110, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 3, \"envelope\": \"steady\" }] } },\n            { name: \"tremolo strings\", midiProgram: 44, generalMidi: true, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"effects\": [\"panning\", \"note filter\", \"chorus\", \"reverb\"], \"noteFilterType\": true, \"noteSimpleCut\": 6, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 0.1768 }], \"pan\": 0, \"panDelay\": 10, \"chorus\": 100, \"reverb\": 0, \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 12, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2×\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"7×\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 4, \"perEnvelopeLowerBound\": 0.5, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n            { name: \"strings\", midiProgram: 48, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 3, \"envelope\": \"swell 1\" }] } },\n            { name: \"slow strings\", midiProgram: 49, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 0, \"filterEnvelope\": \"swell 2\", \"vibrato\": \"none\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"flare 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 4, \"envelope\": \"swell 1\" }] } },\n            { name: \"strings synth 1\", midiProgram: 50, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"soft fade\", \"effects\": \"chorus & reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"wave\": \"sawtooth\", \"interval\": \"hum\", \"vibrato\": \"delayed\" } },\n            { name: \"strings synth 2\", midiProgram: 51, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 12, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"3×\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 9, \"envelope\": \"custom\" }] } },\n            { name: \"orchestra hit 1\", midiProgram: 55, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"custom\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 14, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"twang 3\" }, { \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"flare 3\" }, { \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"flare 2\" }, { \"frequency\": \"8×\", \"amplitude\": 15, \"envelope\": \"flare 1\" }] } },\n            { name: \"violin 2\", midiProgram: 40, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 105.11, \"linearGain\": 0.3536 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"light\", \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 6, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7×\", \"amplitude\": 8, \"envelope\": \"swell 1\" }] } },\n            { name: \"orchestra hit 2\", midiProgram: 55, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"preset\": 588, \"effects\": [\"panning\", \"vibrato\", \"note filter\", \"chorus\", \"reverb\"], \"vibrato\": \"delayed\", \"vibratoDepth\": 0.3, \"vibratoDelay\": 18.5, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": true, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.5 }], \"pan\": 0, \"panDelay\": 10, \"chorus\": 100, \"reverb\": 0, \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 14, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"2×\", \"amplitude\": 14, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"3×\", \"amplitude\": 12, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 14, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 10, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n            { name: \"supersaw string\", midiProgram: 41, settings: { \"type\": \"supersaw\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 1.4142 }, { \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 0.1768 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 500, \"linearGain\": 0.1768 }], \"reverb\": 33, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": 6, \"pulseWidth\": 35.35534, \"dynamism\": 83, \"spread\": 8, \"shape\": 50, \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"twang 1\", \"index\": 0 }] } },\n            { name: \"supersaw string 2\", midiProgram: 41, settings: { \"type\": \"supersaw\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.5 }, { \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 4756.83, \"linearGain\": 2 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.5 }, { \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 4756.83, \"linearGain\": 2 }], \"effects\": [\"note filter\", \"chorus\", \"reverb\"], \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 1 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 1 }], \"chorus\": 57, \"reverb\": 42, \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": -6, \"pulseWidth\": 50, \"dynamism\": 67, \"spread\": 58, \"shape\": 0, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"punch\" }, { \"target\": \"pulseWidth\", \"envelope\": \"flare 2\" }] } },\n        ])\n    },\n    {\n        name: \"Vocal Presets\", presets: toNameMap([\n            { name: \"choir soprano\", midiProgram: 94, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 5.6569 }, { \"type\": \"high-pass\", \"cutoffHz\": 707.11, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.25 }, { \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 11.3137 }], \"effects\": [\"vibrato\", \"chorus\", \"reverb\"], \"vibrato\": \"shaky\", \"chorus\": 100, \"reverb\": 33, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 24, \"harmonics\": [100, 100, 86, 57, 29, 29, 57, 71, 57, 29, 14, 14, 14, 29, 43, 57, 43, 29, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [] } },\n            { name: \"choir tenor\", midiProgram: 52, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 11.3137 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 0.7071 }, { \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 11.3137 }], \"effects\": [\"vibrato\", \"chorus\", \"reverb\"], \"vibrato\": \"shaky\", \"chorus\": 100, \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [86, 100, 100, 86, 71, 57, 43, 29, 29, 29, 29, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14], \"unison\": \"none\", \"envelopes\": [] } },\n            { name: \"choir bass\", midiProgram: 52, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 11.3137 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 11.3137 }], \"effects\": [\"vibrato\", \"chorus\", \"reverb\"], \"vibrato\": \"shaky\", \"chorus\": 100, \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [71, 86, 100, 100, 86, 86, 57, 43, 29, 29, 29, 29, 29, 29, 43, 43, 43, 43, 43, 29, 29, 29, 29, 14, 14, 14, 14, 14], \"unison\": \"none\", \"envelopes\": [] } },\n            { name: \"solo soprano\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 5.6569 }, { \"type\": \"high-pass\", \"cutoffHz\": 707.11, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.25 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"shaky\", \"reverb\": 33, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 12, \"harmonics\": [86, 100, 86, 43, 14, 14, 57, 71, 57, 14, 14, 14, 14, 14, 43, 57, 43, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [] } },\n            { name: \"solo tenor\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 11.3137 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 0.7071 }, { \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 11.3137 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"shaky\", \"reverb\": 33, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 12, \"harmonics\": [86, 100, 100, 86, 71, 57, 43, 29, 29, 29, 29, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14], \"unison\": \"none\", \"envelopes\": [] } },\n            { name: \"solo bass\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 8 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 8 }, { \"type\": \"high-pass\", \"cutoffHz\": 210.22, \"linearGain\": 1.4142 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"shaky\", \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": 12, \"chord\": \"simultaneous\", \"harmonics\": [71, 86, 100, 100, 86, 86, 57, 43, 29, 29, 29, 29, 29, 29, 43, 43, 43, 43, 43, 29, 29, 29, 29, 14, 14, 14, 14, 14], \"unison\": \"none\", \"envelopes\": [] } },\n            { name: \"voice ooh\", midiProgram: 53, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [100, 57, 43, 43, 14, 14, 0, 0, 0, 14, 29, 29, 14, 0, 14, 29, 29, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\n            { name: \"voice synth\", midiProgram: 54, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"medium fade\", \"effects\": \"chorus & reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"wave\": \"rounded\", \"interval\": \"union\", \"vibrato\": \"light\" } },\n            { name: \"vox synth lead\", midiProgram: 85, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"punch\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"9×\", \"amplitude\": 5, \"envelope\": \"custom\" }, { \"frequency\": \"20×\", \"amplitude\": 1, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\n            { name: \"tiny robot\", midiProgram: 85, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"delayed\", \"reverb\": 33, \"transition\": \"slide\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 7 }, { \"frequency\": \"~1×\", \"amplitude\": 7 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 1 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\n            { name: \"yowie\", midiProgram: 85, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"effects\": [\"panning\", \"note filter\", \"reverb\"], \"noteFilterType\": true, \"noteSimpleCut\": 6, \"noteSimplePeak\": 6, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2000, \"linearGain\": 4 }], \"pan\": 0, \"panDelay\": 10, \"reverb\": 0, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 6, \"algorithm\": \"1←2←(3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 12, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 12, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"16×\", \"amplitude\": 5, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 5, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 2, \"perEnvelopeLowerBound\": 0.5, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 1, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n            { name: \"mouse\", midiProgram: 85, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"light\", \"reverb\": 33, \"transition\": \"slide in pattern\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 13 }, { \"frequency\": \"5×\", \"amplitude\": 12 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"note size\" }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 2\" }] } },\n            { name: \"gumdrop\", midiProgram: 85, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"7×\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"twang 1\" }] } },\n            { name: \"echo drop\", midiProgram: 102, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"~1×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"11×\", \"amplitude\": 2, \"envelope\": \"steady\" }, { \"frequency\": \"16×\", \"amplitude\": 5, \"envelope\": \"swell 3\" }] } },\n            { name: \"dark choir\", midiProgram: 85, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"spectrum\": [43, 14, 14, 14, 14, 14, 14, 100, 14, 14, 14, 57, 14, 14, 100, 14, 43, 14, 43, 14, 14, 43, 14, 29, 14, 29, 14, 14, 29, 0] } },\n        ])\n    },\n    {\n        name: \"Brass Presets\", presets: toNameMap([\n            { name: \"trumpet\", midiProgram: 56, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 5, \"envelope\": \"flare 2\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n            { name: \"trombone\", midiProgram: 57, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n            { name: \"tuba\", midiProgram: 58, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n            { name: \"muted trumpet\", midiProgram: 59, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 4000, \"linearGain\": 2.8284 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 1 }], \"reverb\": 33, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13 }, { \"frequency\": \"1×\", \"amplitude\": 5 }, { \"frequency\": \"9×\", \"amplitude\": 5 }, { \"frequency\": \"13×\", \"amplitude\": 7 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 1\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 2\" }] } },\n            { name: \"french horn\", midiProgram: 60, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 2378.41, \"linearGain\": 2.8284 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 12 }, { \"frequency\": \"1×\", \"amplitude\": 10 }, { \"frequency\": \"~1×\", \"amplitude\": 8 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 2\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"swell 1\" }] } },\n            { name: \"brass section\", midiProgram: 61, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"swell 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 10, \"envelope\": \"swell 1\" }] } },\n            { name: \"brass synth 1\", midiProgram: 62, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 11, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"flare 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 8, \"envelope\": \"flare 2\" }] } },\n            { name: \"brass synth 2\", midiProgram: 63, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"soft\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"flare 1\" }, { \"frequency\": \"~1×\", \"amplitude\": 7, \"envelope\": \"flare 1\" }] } },\n            { name: \"pulse brass\", midiProgram: 62, settings: { \"type\": \"PWM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"pulseWidth\": 50, \"pulseEnvelope\": \"flare 3\", \"vibrato\": \"none\" } },\n        ])\n    },\n    {\n        name: \"Reed Presets\", presets: toNameMap([\n            { name: \"soprano sax\", midiProgram: 64, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 4, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"5×\", \"amplitude\": 4, \"envelope\": \"punch\" }] } },\n            { name: \"alto sax\", midiProgram: 65, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"punch\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"4×\", \"amplitude\": 6, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"steady\" }] } },\n            { name: \"tenor sax\", midiProgram: 66, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"8×\", \"amplitude\": 3, \"envelope\": \"steady\" }] } },\n            { name: \"baritone sax\", midiProgram: 67, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"swell 2\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"8×\", \"amplitude\": 4, \"envelope\": \"steady\" }, { \"frequency\": \"4×\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 4, \"envelope\": \"punch\" }] } },\n            { name: \"sax synth\", midiProgram: 64, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n            { name: \"shehnai\", midiProgram: 111, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n            { name: \"oboe\", midiProgram: 68, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 1\", \"vibrato\": \"none\", \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"tremolo5\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"4×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"6×\", \"amplitude\": 2, \"envelope\": \"steady\" }] } },\n            { name: \"english horn\", midiProgram: 69, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"2⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 8, \"envelope\": \"punch\" }, { \"frequency\": \"8×\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\n            { name: \"bassoon\", midiProgram: 70, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 707, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"6×\", \"amplitude\": 6, \"envelope\": \"swell 1\" }, { \"frequency\": \"1×\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n            { name: \"clarinet\", midiProgram: 71, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 43, 86, 57, 86, 71, 86, 71, 71, 71, 71, 71, 71, 43, 71, 71, 57, 57, 57, 57, 57, 57, 43, 43, 43, 29, 14, 0] } },\n            { name: \"harmonica\", midiProgram: 22, generalMidi: true, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"preset\": 778, \"effects\": [\"panning\", \"note filter\", \"reverb\"], \"noteFilterType\": true, \"noteSimpleCut\": 9, \"noteSimplePeak\": 2, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 7231.23, \"linearGain\": 1 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 7231.23, \"linearGain\": 1 }], \"pan\": 0, \"panDelay\": 10, \"reverb\": 0, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 9, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2×\", \"amplitude\": 2, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 2, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 2 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"tremolo2\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 2, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n        ])\n    },\n    {\n        name: \"Flute Presets\", presets: toNameMap([\n            { name: \"flute 1\", midiProgram: 73, generalMidi: true, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9656.85, \"linearGain\": 0.5 }], \"eqFilterType\": true, \"eqSimpleCut\": 9, \"eqSimplePeak\": 1, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"preset\": 832, \"eqSubFilters1\": [], \"effects\": [\"panning\", \"reverb\"], \"pan\": 0, \"panDelay\": 10, \"reverb\": 0, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 7, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"2×\", \"amplitude\": 4, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 3, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~1×\", \"amplitude\": 1, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 7, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n            { name: \"recorder\", midiProgram: 74, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 43, 57, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0] } },\n            { name: \"whistle\", midiProgram: 78, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"chorus & reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"delayed\", \"harmonics\": [100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\n            { name: \"ocarina\", midiProgram: 79, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 14, 57, 14, 29, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\n            { name: \"piccolo\", midiProgram: 72, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"4⟲\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1×\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"~2×\", \"amplitude\": 3, \"envelope\": \"punch\" }, { \"frequency\": \"~1×\", \"amplitude\": 5, \"envelope\": \"punch\" }] } },\n            { name: \"shakuhachi\", midiProgram: 77, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"3→4\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"2×\", \"amplitude\": 3, \"envelope\": \"punch\" }, { \"frequency\": \"~1×\", \"amplitude\": 4, \"envelope\": \"twang 1\" }, { \"frequency\": \"20×\", \"amplitude\": 15, \"envelope\": \"steady\" }] } },\n            { name: \"pan flute\", midiProgram: 75, generalMidi: true, settings: { \"type\": \"spectrum\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 5.6569 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.7071 }], \"reverb\": 33, \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -3, \"spectrum\": [100, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 71, 0, 0, 14, 0, 57, 0, 29, 14, 29, 14, 14, 29, 14, 29, 14, 14, 29, 14], \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"twang 1\", \"index\": 0 }, { \"target\": \"noteVolume\", \"envelope\": \"punch\" }] } },\n            { name: \"blown bottle\", midiProgram: 76, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"3×\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"6×\", \"amplitude\": 2, \"envelope\": \"custom\" }, { \"frequency\": \"11×\", \"amplitude\": 2, \"envelope\": \"custom\" }] } },\n            { name: \"calliope\", midiProgram: 82, generalMidi: true, settings: { \"type\": \"spectrum\", \"transition\": \"cross fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"spectrum\": [100, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 71, 0, 0, 57, 0, 43, 0, 29, 14, 14, 29, 14, 14, 14, 14, 14, 14, 14, 14] } },\n            { name: \"chiffer\", midiProgram: 83, generalMidi: true, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"spectrum\": [86, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 71, 0, 0, 57, 0, 57, 0, 43, 14, 14, 43, 14, 29, 14, 29, 29, 29, 29, 14] } },\n            { name: \"breath noise\", midiProgram: 121, generalMidi: true, settings: { \"type\": \"spectrum\", \"eqFilter\": [], \"effects\": [\"chord type\", \"note filter\", \"reverb\"], \"chord\": \"strum\", \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 840.9, \"linearGain\": 0.3536 }, { \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.3536 }], \"reverb\": 33, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 12, \"spectrum\": [71, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 71, 0, 0, 29, 0, 100, 29, 14, 29, 100, 29, 100, 14, 14, 71, 0, 29, 0, 0], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 1\" }] } },\n            { name: \"flute 2\", midiProgram: 73, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"seamless\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"delayed\", \"harmonics\": [100, 43, 86, 57, 86, 71, 86, 71, 71, 71, 71, 71, 71, 43, 71, 71, 57, 57, 57, 57, 57, 57, 43, 43, 43, 29, 14, 0] } },\n        ])\n    },\n    {\n        name: \"Pad Presets\", presets: toNameMap([\n            { name: \"new age pad\", midiProgram: 88, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"chorus\"], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 14 }, { \"frequency\": \"~1×\", \"amplitude\": 4 }, { \"frequency\": \"6×\", \"amplitude\": 3 }, { \"frequency\": \"13×\", \"amplitude\": 3 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 2\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"swell 3\" }] } },\n            { name: \"warm pad\", midiProgram: 89, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 1 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 7, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14 }, { \"frequency\": \"1×\", \"amplitude\": 6 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 1 }] } },\n            { name: \"polysynth pad\", midiProgram: 90, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"vibrato\", \"note filter\", \"chorus\"], \"vibrato\": \"delayed\", \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 1 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"honky tonk\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }] } },\n            { name: \"space voice pad\", midiProgram: 91, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 1414.21, \"linearGain\": 0.1768 }], \"effects\": [\"chorus\"], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10 }, { \"frequency\": \"2×\", \"amplitude\": 8 }, { \"frequency\": \"3×\", \"amplitude\": 7 }, { \"frequency\": \"11×\", \"amplitude\": 2 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"swell 2\" }] } },\n            { name: \"bowed glass pad\", midiProgram: 92, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.5 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"simultaneous\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10 }, { \"frequency\": \"2×\", \"amplitude\": 12 }, { \"frequency\": \"3×\", \"amplitude\": 7 }, { \"frequency\": \"7×\", \"amplitude\": 4 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 3\", \"index\": 3 }] } },\n            { name: \"metallic pad\", midiProgram: 93, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.5 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 13, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"~1×\", \"amplitude\": 9 }, { \"frequency\": \"1×\", \"amplitude\": 7 }, { \"frequency\": \"11×\", \"amplitude\": 7 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 2\", \"index\": 2 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\n            { name: \"sweep pad\", midiProgram: 95, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 4 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"hum\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"flare 3\" }] } },\n            { name: \"atmosphere\", midiProgram: 99, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 1 }], \"effects\": [\"chorus\", \"reverb\"], \"chorus\": 100, \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"3⟲ 4⟲\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 14 }, { \"frequency\": \"~1×\", \"amplitude\": 10 }, { \"frequency\": \"3×\", \"amplitude\": 7 }, { \"frequency\": \"1×\", \"amplitude\": 7 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 3\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 3 }] } },\n            { name: \"brightness\", midiProgram: 100, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 2 }], \"effects\": [\"chorus\"], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"harmonics\": [100, 86, 86, 86, 43, 57, 43, 71, 43, 43, 43, 57, 43, 43, 57, 71, 57, 43, 29, 43, 57, 57, 43, 29, 29, 29, 29, 14], \"unison\": \"octave\", \"stringSustain\": 86, \"envelopes\": [] } },\n            { name: \"goblins\", midiProgram: 101, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 11.3137 }], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.5 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"simultaneous\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 10, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"4×\", \"amplitude\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 10 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 2\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 3\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"tremolo1\", \"index\": 2 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 3\" }] } },\n            { name: \"sci-fi\", midiProgram: 103, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 9513.66, \"linearGain\": 2.8284 }], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.5 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2)←3←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 8, \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 13 }, { \"frequency\": \"2×\", \"amplitude\": 10 }, { \"frequency\": \"5×\", \"amplitude\": 5 }, { \"frequency\": \"11×\", \"amplitude\": 8 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"tremolo5\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\n            { name: \"flutter pad\", midiProgram: 90, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"vibrato\", \"note filter\", \"chorus\"], \"vibrato\": \"delayed\", \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 4 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"algorithm\": \"(1 2)←(3 4)\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 9, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13 }, { \"frequency\": \"5×\", \"amplitude\": 7 }, { \"frequency\": \"7×\", \"amplitude\": 5 }, { \"frequency\": \"~1×\", \"amplitude\": 6 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"tremolo1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 3 }] } },\n            { name: \"feedback pad\", midiProgram: 89, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 2378.41, \"linearGain\": 8 }], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"custom interval\", \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 8, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"~1×\", \"amplitude\": 15 }], \"envelopes\": [{ \"target\": \"feedbackAmplitude\", \"envelope\": \"swell 2\" }] } },\n            { name: \"supersaw pad\", midiProgram: 93, settings: { \"type\": \"supersaw\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.1768 }], \"effects\": [\"reverb\"], \"reverb\": 100, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": 24, \"pulseWidth\": 50, \"dynamism\": 100, \"spread\": 58, \"shape\": 0, \"envelopes\": [] } },\n        ])\n    },\n    {\n        name: \"Drum Presets\", presets: toNameMap([\n            { name: \"standard drumset\", midiProgram: 116, isNoise: true, settings: { \"type\": \"drumset\", \"effects\": \"reverb\", \"drums\": [{ \"filterEnvelope\": \"twang 1\", \"spectrum\": [57, 71, 71, 86, 86, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 100, 71, 71, 57, 86, 57, 57, 57, 71, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 0, 100, 57, 43, 43, 29, 57, 43, 29, 71, 43, 43, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 43, 43, 43] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 0, 0, 71, 57, 43, 43, 43, 57, 57, 43, 29, 57, 43, 43, 43, 29, 43, 57, 43, 43, 43, 43, 43, 43, 29, 43, 43] }, { \"filterEnvelope\": \"decay 2\", \"spectrum\": [0, 14, 29, 43, 86, 71, 29, 43, 43, 43, 43, 29, 71, 29, 71, 29, 43, 43, 43, 43, 57, 43, 43, 57, 43, 43, 43, 57, 57, 57] }, { \"filterEnvelope\": \"decay 1\", \"spectrum\": [0, 0, 14, 14, 14, 14, 29, 29, 29, 43, 43, 43, 57, 57, 57, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43] }, { \"filterEnvelope\": \"twang 3\", \"spectrum\": [43, 43, 43, 71, 29, 29, 43, 43, 43, 29, 43, 43, 43, 29, 29, 43, 43, 29, 29, 29, 57, 14, 57, 43, 43, 57, 43, 43, 57, 57] }, { \"filterEnvelope\": \"decay 3\", \"spectrum\": [29, 43, 43, 43, 43, 29, 29, 43, 29, 29, 43, 29, 14, 29, 43, 29, 43, 29, 57, 29, 43, 57, 43, 71, 43, 71, 57, 57, 71, 71] }, { \"filterEnvelope\": \"twang 3\", \"spectrum\": [43, 29, 29, 43, 29, 29, 29, 57, 29, 29, 29, 57, 43, 43, 29, 29, 57, 43, 43, 43, 71, 43, 43, 71, 57, 71, 71, 71, 71, 71] }, { \"filterEnvelope\": \"decay 3\", \"spectrum\": [57, 57, 57, 43, 57, 57, 43, 43, 57, 43, 43, 43, 71, 57, 43, 57, 86, 71, 57, 86, 71, 57, 86, 100, 71, 86, 86, 86, 86, 86] }, { \"filterEnvelope\": \"flare 1\", \"spectrum\": [0, 0, 14, 14, 14, 14, 29, 29, 29, 43, 43, 43, 57, 57, 71, 71, 86, 86, 100, 100, 100, 100, 100, 100, 100, 100, 86, 57, 29, 0] }, { \"filterEnvelope\": \"decay 2\", \"spectrum\": [14, 14, 14, 14, 29, 14, 14, 29, 14, 43, 14, 43, 57, 86, 57, 57, 100, 57, 43, 43, 57, 100, 57, 43, 29, 14, 0, 0, 0, 0] }] } },\n            { name: \"steel pan\", midiProgram: 114, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 0.1768 }], \"effects\": [\"note filter\", \"chorus\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }], \"chorus\": 67, \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 14 }, { \"frequency\": \"7×\", \"amplitude\": 3 }, { \"frequency\": \"3×\", \"amplitude\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 4 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"decay 2\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 1\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 2\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 2\", \"index\": 3 }] } },\n            { name: \"steel pan synth\", midiProgram: 114, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1 2 3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"~1×\", \"amplitude\": 12 }, { \"frequency\": \"2×\", \"amplitude\": 15 }, { \"frequency\": \"4×\", \"amplitude\": 14 }, { \"frequency\": \"~1×\", \"amplitude\": 3 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 1\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 0 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 2\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 1\" }] } },\n            { name: \"timpani\", midiProgram: 47, generalMidi: true, settings: { \"type\": \"spectrum\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 6727.17, \"linearGain\": 5.6569 }], \"effects\": [\"pitch shift\", \"note filter\", \"reverb\"], \"pitchShiftSemitones\": 15, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.5 }], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"spectrum\": [100, 0, 0, 0, 86, 0, 0, 71, 0, 14, 43, 14, 43, 43, 0, 29, 43, 29, 29, 29, 43, 29, 43, 29, 43, 43, 43, 43, 43, 43], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 1\" }, { \"target\": \"pitchShift\", \"envelope\": \"twang 1\" }] } },\n            { name: \"dark strike\", midiProgram: 47, settings: { \"type\": \"spectrum\", \"eqFilter\": [], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.7071 }], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"spectrum\": [0, 0, 14, 14, 14, 29, 29, 43, 43, 86, 43, 43, 43, 29, 86, 29, 29, 29, 86, 29, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 2\" }] } },\n            { name: \"woodblock\", midiProgram: 115, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 14, 29, 43, 43, 57, 86, 86, 71, 57, 57, 43, 43, 57, 86, 86, 43, 43, 71, 57, 57, 57, 57, 57, 86, 86, 71, 71, 71, 71] } },\n            { name: \"taiko drum\", midiProgram: 116, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -0.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"twang 1\", \"spectrum\": [71, 100, 100, 43, 43, 71, 71, 43, 43, 43, 43, 43, 43, 57, 29, 57, 43, 57, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43] } },\n            { name: \"melodic drum\", midiProgram: 117, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -1.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"twang 1\", \"spectrum\": [100, 71, 71, 57, 57, 43, 43, 71, 43, 43, 43, 57, 43, 43, 57, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] } },\n            { name: \"drum synth\", midiProgram: 118, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"decay 1\", \"spectrum\": [100, 86, 71, 57, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] } },\n            { name: \"tom-tom\", midiProgram: 116, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"spectrum\": [100, 29, 14, 0, 0, 86, 14, 43, 29, 86, 29, 14, 29, 57, 43, 43, 43, 43, 57, 43, 43, 43, 29, 57, 43, 43, 43, 43, 43, 43] } },\n            { name: \"metal pipe\", midiProgram: 117, isNoise: true, midiSubharmonicOctaves: -1.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"spectrum\": [29, 43, 86, 43, 43, 43, 43, 43, 100, 29, 14, 14, 100, 14, 14, 0, 0, 0, 0, 0, 14, 29, 29, 14, 0, 0, 14, 29, 0, 0] } },\n            { name: \"synth kick\", midiProgram: 47, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -6, \"chord\": \"simultaneous\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"8×\", \"amplitude\": 15 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"operatorFrequency\", \"envelope\": \"twang 1\", \"index\": 0 }, { \"target\": \"noteVolume\", \"envelope\": \"twang 2\" }] } },\n        ])\n    },\n    {\n        name: \"Novelty Presets\", presets: toNameMap([\n            { name: \"guitar fret noise\", midiProgram: 120, generalMidi: true, settings: { \"type\": \"spectrum\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 1000, \"linearGain\": 0.1768 }], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 5.6569 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"spectrum\": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 29, 14, 0, 0, 43, 0, 43, 0, 71, 43, 0, 57, 0], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"flare 1\" }, { \"target\": \"noteVolume\", \"envelope\": \"twang 2\" }] } },\n            { name: \"fifth saw lead\", midiProgram: 86, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 1.4142 }], \"chorus\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"fifth\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }] } },\n            { name: \"fifth swell\", midiProgram: 86, midiSubharmonicOctaves: 1, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2000, \"linearGain\": 2 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"fifth\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 3\" }] } },\n            { name: \"soundtrack\", midiProgram: 97, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.5 }], \"chorus\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"fifth\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"flare 3\" }] } },\n            { name: \"reverse cymbal\", midiProgram: 119, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"effects\": \"none\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 3\", \"spectrum\": [29, 57, 57, 29, 57, 57, 29, 29, 43, 29, 29, 43, 29, 29, 57, 57, 14, 57, 14, 57, 71, 71, 57, 86, 57, 100, 86, 86, 86, 86] } },\n            { name: \"seashore\", midiProgram: 122, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"transition\": \"soft fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"swell 3\", \"spectrum\": [14, 14, 29, 29, 43, 43, 43, 57, 57, 57, 57, 57, 57, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57] } },\n            { name: \"bird tweet\", midiProgram: 123, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [], \"effects\": [\"chord type\", \"vibrato\", \"reverb\"], \"chord\": \"strum\", \"vibrato\": \"heavy\", \"reverb\": 67, \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": -6, \"harmonics\": [0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"unison\": \"hum\", \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"decay 1\" }] } },\n            { name: \"telephone ring\", midiProgram: 124, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 12 }, { \"frequency\": \"1×\", \"amplitude\": 4 }, { \"frequency\": \"20×\", \"amplitude\": 1 }, { \"frequency\": \"1×\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"tremolo4\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"tremolo1\", \"index\": 1 }] } },\n            { name: \"helicopter\", midiProgram: 125, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -0.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"seamless\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"tremolo4\", \"spectrum\": [14, 43, 43, 57, 57, 57, 71, 71, 71, 71, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 57, 57] } },\n            { name: \"applause\", midiProgram: 126, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 3\", \"spectrum\": [14, 14, 29, 29, 29, 43, 43, 57, 71, 71, 86, 86, 86, 71, 71, 57, 57, 57, 71, 86, 86, 86, 86, 86, 71, 71, 57, 57, 57, 57] } },\n            { name: \"gunshot\", midiProgram: 127, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 1414, \"filterResonance\": 29, \"filterEnvelope\": \"twang 1\", \"spectrum\": [14, 29, 43, 43, 57, 57, 57, 71, 71, 71, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43] } },\n            { name: \"scoot\", midiProgram: 92, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 707.11, \"linearGain\": 4 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"wave\": \"double saw\", \"unison\": \"shimmer\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"flare 1\" }] } },\n            { name: \"buzz saw\", midiProgram: 30, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.5 }], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"custom interval\", \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 4, \"operators\": [{ \"frequency\": \"5×\", \"amplitude\": 13 }, { \"frequency\": \"1×\", \"amplitude\": 10 }, { \"frequency\": \"~1×\", \"amplitude\": 6 }, { \"frequency\": \"11×\", \"amplitude\": 12 }], \"envelopes\": [] } },\n            { name: \"mosquito\", midiProgram: 93, settings: { \"type\": \"PWM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 2 }], \"effects\": [\"vibrato\"], \"vibrato\": \"shaky\", \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": -6, \"chord\": \"simultaneous\", \"pulseWidth\": 4.41942, \"envelopes\": [{ \"target\": \"pulseWidth\", \"envelope\": \"tremolo6\" }] } },\n            { name: \"breathing\", midiProgram: 126, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 2\", \"spectrum\": [14, 14, 14, 29, 29, 29, 29, 29, 43, 29, 29, 43, 43, 43, 29, 29, 71, 43, 86, 86, 57, 100, 86, 86, 86, 86, 71, 86, 71, 57] } },\n            { name: \"klaxon synth\", midiProgram: 125, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"noise\", \"effects\": \"reverb\", \"transition\": \"slide\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"wave\": \"buzz\" } },\n            { name: \"theremin\", midiProgram: 40, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.7071 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"heavy\", \"reverb\": 33, \"transition\": \"slide in pattern\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -6, \"chord\": \"simultaneous\", \"harmonics\": [100, 71, 57, 43, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [] } },\n            { name: \"sonar ping\", midiProgram: 121, settings: { \"type\": \"spectrum\", \"eqFilter\": [], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.5 }], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"spectrum\": [100, 43, 29, 29, 14, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 2\" }] } },\n        ])\n    },\n    {\n        name: \"UltraBox Presets\", presets: toNameMap([\n            { name: \"nes white\", midiProgram: 116, generalMidi: true, isNoise: true, settings: { \"type\": \"noise\", \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 8, \"eqSimplePeak\": 0, \"eqSubFilters1\": [], \"effects\": [\"panning\"], \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": 0, \"wave\": \"1-bit white\", \"envelopes\": [] } },\n            { name: \"nes ping\", midiProgram: 116, generalMidi: true, isNoise: true, settings: { \"type\": \"noise\", \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 8, \"eqSimplePeak\": 0, \"eqSubFilters1\": [], \"effects\": [\"panning\"], \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": 0, \"wave\": \"1-bit metallic\", \"envelopes\": [] } },\n            { name: \"distorted pulse vocal\", generalMidi: false, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.0884 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.0884 }], \"effects\": [\"panning\", \"transition type\", \"pitch shift\", \"vibrato\", \"note filter\", \"bitcrusher\", \"echo\", \"reverb\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"pitchShiftSemitones\": 0, \"vibrato\": \"delayed\", \"vibratoDepth\": 0.3, \"vibratoDelay\": 18.5, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 840.9, \"linearGain\": 11.3137 }, { \"type\": \"low-pass\", \"cutoffHz\": 297.3, \"linearGain\": 8 }, { \"type\": \"peak\", \"cutoffHz\": 500, \"linearGain\": 11.3137 }, { \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 1.4142 }, { \"type\": \"peak\", \"cutoffHz\": 176.78, \"linearGain\": 11.3137 }, { \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 11.3137 }], \"noteSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 840.9, \"linearGain\": 11.3137 }, { \"type\": \"low-pass\", \"cutoffHz\": 297.3, \"linearGain\": 8 }, { \"type\": \"peak\", \"cutoffHz\": 500, \"linearGain\": 11.3137 }, { \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 1.4142 }, { \"type\": \"peak\", \"cutoffHz\": 176.78, \"linearGain\": 11.3137 }, { \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 11.3137 }], \"bitcrusherOctave\": 6.5, \"bitcrusherQuantization\": 71, \"pan\": 0, \"panDelay\": 10, \"echoSustain\": 14, \"echoDelayBeats\": 0.167, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"wave\": \"1/8 pulse\", \"unison\": \"none\", \"envelopes\": [] } },\n            { name: \"dubsteb bwah\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.7071 }], \"eqFilterType\": true, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters1\": [], \"effects\": [\"panning\", \"transition type\", \"chord type\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"chord\": \"custom interval\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 10, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 11, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 13, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"note size\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 2\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 3 }] } },\n            { name: \"FM cool bass\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 1 }, { \"type\": \"high-pass\", \"cutoffHz\": 88.39, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 0.7071 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 1 }, { \"type\": \"high-pass\", \"cutoffHz\": 88.39, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 0.7071 }], \"effects\": [\"panning\", \"transition type\", \"note filter\", \"reverb\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"noteFilterType\": true, \"noteSimpleCut\": 9, \"noteSimplePeak\": 2, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 7231.23, \"linearGain\": 1 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 7231.23, \"linearGain\": 1 }], \"pan\": 0, \"panDelay\": 10, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1←(2 3←4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"2×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 7, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"13×\", \"amplitude\": 11, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"punch\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 3 }] } },\n            { name: \"FM funky bass\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.1768 }], \"eqFilterType\": true, \"eqSimpleCut\": 5, \"eqSimplePeak\": 0, \"eqSubFilters1\": [], \"effects\": [\"panning\", \"transition type\", \"reverb\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"pan\": 0, \"panDelay\": 10, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~1×\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"punch\" }, { \"target\": \"noteVolume\", \"envelope\": \"note size\" }] } },\n            { name: \"talking bass\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"chord type\"], \"chord\": \"custom interval\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"algorithm\": \"1←(2 3)←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 15, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15 }, { \"frequency\": \"2×\", \"amplitude\": 8 }, { \"frequency\": \"2×\", \"amplitude\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 12 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"note size\" }] } },\n            { name: \"synth marimba\", generalMidi: false, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 176.78, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"effects\": [\"note filter\", \"echo\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 1.4142 }], \"echoSustain\": 71, \"echoDelayBeats\": 0.5, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"harmonics\": [86, 100, 29, 29, 0, 0, 0, 100, 0, 0, 0, 86, 29, 0, 14, 100, 0, 0, 0, 0, 0, 14, 0, 0, 14, 0, 0, 86], \"unison\": \"fifth\", \"stringSustain\": 7, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"punch\" }] } },\n            { name: \"italian accordian\", generalMidi: false, settings: { \"type\": \"custom chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6000, \"linearGain\": 0.5 }], \"eqFilterType\": true, \"eqSimpleCut\": 8, \"eqSimplePeak\": 1, \"eqSubFilters1\": [], \"effects\": [\"panning\", \"chorus\", \"reverb\"], \"pan\": 0, \"panDelay\": 10, \"chorus\": 71, \"reverb\": 45, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"wave\": \"square\", \"unison\": \"honky tonk\", \"customChipWave\": { \"0\": -24, \"1\": -24, \"2\": -24, \"3\": -24, \"4\": -24, \"5\": -24, \"6\": -24, \"7\": -24, \"8\": -24, \"9\": -24, \"10\": -24, \"11\": -24, \"12\": -24, \"13\": -24, \"14\": -24, \"15\": -24, \"16\": 24, \"17\": 24, \"18\": 24, \"19\": 24, \"20\": 24, \"21\": 24, \"22\": 24, \"23\": 24, \"24\": -24, \"25\": -24, \"26\": -24, \"27\": -24, \"28\": -24, \"29\": -24, \"30\": -24, \"31\": -24, \"32\": -24, \"33\": -24, \"34\": -24, \"35\": -24, \"36\": -24, \"37\": -24, \"38\": -24, \"39\": -24, \"40\": 24, \"41\": 24, \"42\": 24, \"43\": 24, \"44\": 24, \"45\": 24, \"46\": 24, \"47\": 24, \"48\": -24, \"49\": -24, \"50\": -24, \"51\": -24, \"52\": -24, \"53\": -24, \"54\": -24, \"55\": -24, \"56\": -24, \"57\": -24, \"58\": -24, \"59\": -24, \"60\": -24, \"61\": -24, \"62\": -24, \"63\": -24 }, \"customChipWaveIntegral\": { \"0\": 0, \"1\": 0, \"2\": 0, \"3\": 0, \"4\": 0, \"5\": 0, \"6\": 0, \"7\": 0, \"8\": 0, \"9\": 0, \"10\": 0, \"11\": 0, \"12\": 0, \"13\": 0, \"14\": 0, \"15\": 0, \"16\": 0, \"17\": 0, \"18\": 0, \"19\": 0, \"20\": 0, \"21\": 0, \"22\": 0, \"23\": 0, \"24\": 0, \"25\": 0, \"26\": 0, \"27\": 0, \"28\": 0, \"29\": 0, \"30\": 0, \"31\": 0, \"32\": 0, \"33\": 0, \"34\": 0, \"35\": 0, \"36\": 0, \"37\": 0, \"38\": 0, \"39\": 0, \"40\": 0, \"41\": 0, \"42\": 0, \"43\": 0, \"44\": 0, \"45\": 0, \"46\": 0, \"47\": 0, \"48\": 0, \"49\": 0, \"50\": 0, \"51\": 0, \"52\": 0, \"53\": 0, \"54\": 0, \"55\": 0, \"56\": 0, \"57\": 0, \"58\": 0, \"59\": 0, \"60\": 0, \"61\": 0, \"62\": 0, \"63\": 0, \"64\": 0 }, \"envelopes\": [] } },\n            { name: \"chip supersaw\", generalMidi: false, settings: { \"type\": \"custom chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.7071 }], \"eqFilterType\": true, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters1\": [], \"effects\": [\"panning\", \"transition type\", \"vibrato\", \"chorus\", \"reverb\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"vibrato\": \"delayed\", \"vibratoDepth\": 0.3, \"vibratoDelay\": 18.5, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"pan\": 0, \"panDelay\": 10, \"chorus\": 29, \"reverb\": 29, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"wave\": \"square\", \"unison\": \"dissonant\", \"customChipWave\": { \"0\": 22, \"1\": 22, \"2\": 16, \"3\": 6, \"4\": 0, \"5\": -3, \"6\": -8, \"7\": -10, \"8\": -13, \"9\": -16, \"10\": -19, \"11\": -19, \"12\": -20, \"13\": -22, \"14\": -22, \"15\": -24, \"16\": -24, \"17\": -24, \"18\": -24, \"19\": -24, \"20\": -24, \"21\": -24, \"22\": -24, \"23\": -24, \"24\": -24, \"25\": -24, \"26\": -24, \"27\": -24, \"28\": -24, \"29\": -24, \"30\": -24, \"31\": 24, \"32\": 24, \"33\": 16, \"34\": 9, \"35\": 6, \"36\": 4, \"37\": 2, \"38\": 0, \"39\": -1, \"40\": -3, \"41\": -4, \"42\": -4, \"43\": -6, \"44\": -6, \"45\": -6, \"46\": -6, \"47\": -5, \"48\": -5, \"49\": -4, \"50\": -2, \"51\": -2, \"52\": 1, \"53\": 4, \"54\": 6, \"55\": 8, \"56\": 10, \"57\": 12, \"58\": 14, \"59\": 16, \"60\": 18, \"61\": 19, \"62\": 22, \"63\": 24 }, \"customChipWaveIntegral\": { \"0\": 0, \"1\": 0, \"2\": 0, \"3\": 0, \"4\": 0, \"5\": 0, \"6\": 0, \"7\": 0, \"8\": 0, \"9\": 0, \"10\": 0, \"11\": 0, \"12\": 0, \"13\": 0, \"14\": 0, \"15\": 0, \"16\": 0, \"17\": 0, \"18\": 0, \"19\": 0, \"20\": 0, \"21\": 0, \"22\": 0, \"23\": 0, \"24\": 0, \"25\": 0, \"26\": 0, \"27\": 0, \"28\": 0, \"29\": 0, \"30\": 0, \"31\": 0, \"32\": 0, \"33\": 0, \"34\": 0, \"35\": 0, \"36\": 0, \"37\": 0, \"38\": 0, \"39\": 0, \"40\": 0, \"41\": 0, \"42\": 0, \"43\": 0, \"44\": 0, \"45\": 0, \"46\": 0, \"47\": 0, \"48\": 0, \"49\": 0, \"50\": 0, \"51\": 0, \"52\": 0, \"53\": 0, \"54\": 0, \"55\": 0, \"56\": 0, \"57\": 0, \"58\": 0, \"59\": 0, \"60\": 0, \"61\": 0, \"62\": 0, \"63\": 0, \"64\": 0 }, \"envelopes\": [] } },\n            { name: \"fm supersaw\", generalMidi: false, settings: { \"type\": \"FM6op\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.7071 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.7071 }], \"effects\": [\"panning\", \"transition type\", \"pitch shift\", \"note filter\", \"chorus\", \"reverb\"], \"transition\": \"continue\", \"clicklessTransition\": false, \"pitchShiftSemitones\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [], \"noteSubFilters0\": [], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 1 }], \"pan\": 0, \"panDelay\": 10, \"chorus\": 71, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1 2 3 4 5 6\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"~1×\", \"amplitude\": 15, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"2×\", \"amplitude\": 10, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"3×\", \"amplitude\": 7, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 9, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"8×\", \"amplitude\": 6, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }], \"envelopes\": [] } },\n            { name: \"wind\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 250.03, \"linearGain\": 11.3137 }], \"eqFilterType\": true, \"eqSimpleCut\": 0, \"eqSimplePeak\": 7, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters1\": [], \"effects\": [\"transition type\", \"reverb\"], \"transition\": \"continue\", \"clicklessTransition\": false, \"panDelay\": 10, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1→3 2→4\", \"feedbackAmplitude\": 15, \"operators\": [{ \"frequency\": \"16×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"16×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"16×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"16×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [] } },\n            { name: \"mrow\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters0\": [], \"effects\": [\"panning\", \"chord type\", \"reverb\"], \"chord\": \"custom interval\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"pan\": 0, \"panDelay\": 10, \"reverb\": 35, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2×\", \"amplitude\": 13, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2×\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2×\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"flare 1\", \"index\": 0 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 3\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 1\" }] } },\n            { name: \"vocal why\", generalMidi: false, settings: { \"type\": \"harmonics\", \"eqFilter\": [], \"effects\": [\"note filter\", \"panning\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 840.9, \"linearGain\": 11.3137 }], \"pan\": 0, \"reverb\": 0, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"harmonics\": [100, 86, 29, 29, 14, 14, 0, 14, 14, 43, 71, 100, 100, 86, 71, 71, 57, 57, 43, 43, 43, 43, 43, 0, 0, 0, 0, 0], \"unison\": \"octave\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"note size\" }] } },\n        ])\n    },\n    {\n        name: \"Slarmoo's Box Presets\", presets: toNameMap([\n            { name: \"radio fm\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1189.21, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 74.33, \"linearGain\": 0.3536 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1189.21, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 74.33, \"linearGain\": 0.3536 }], \"effects\": [\"panning\", \"detune\", \"vibrato\", \"bitcrusher\", \"reverb\"], \"detuneCents\": 0, \"vibrato\": \"none\", \"vibratoDepth\": 0, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"bitcrusherOctave\": 6.5, \"bitcrusherQuantization\": 43, \"pan\": 0, \"panDelay\": 10, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": 6, \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲ 2⟲\", \"feedbackAmplitude\": 4, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"0.12×\", \"amplitude\": 7, \"waveform\": \"trapezoid\", \"pulseWidth\": 5 }, { \"frequency\": \"0.5×\", \"amplitude\": 10, \"waveform\": \"triangle\", \"pulseWidth\": 5 }, { \"frequency\": \"~1×\", \"amplitude\": 5, \"waveform\": \"triangle\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [], \"isDrum\": false } },\n            { name: \"anguished underworld\", generalMidi: false, settings: { \"type\": \"FM6op\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.5 }], \"effects\": [\"panning\", \"note filter\", \"distortion\", \"bitcrusher\", \"reverb\"], \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 2 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 2 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.5 }], \"distortion\": 43, \"aliases\": false, \"bitcrusherOctave\": 4.5, \"bitcrusherQuantization\": 43, \"pan\": 0, \"panDelay\": 10, \"reverb\": 0, \"fadeInSeconds\": 0.075, \"fadeOutTicks\": 6, \"algorithm\": \"1 2←4 3←(5 6)\", \"feedbackType\": \"1→5 2→6 3→4\", \"feedbackAmplitude\": 4, \"operators\": [{ \"frequency\": \"0.25×\", \"amplitude\": 14, \"waveform\": \"triangle\", \"pulseWidth\": 5 }, { \"frequency\": \"0.5×\", \"amplitude\": 13, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 12, \"waveform\": \"trapezoid\", \"pulseWidth\": 5 }, { \"frequency\": \"8×\", \"amplitude\": 5, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2×\", \"amplitude\": 10, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"0.75×\", \"amplitude\": 3, \"waveform\": \"ramp\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"punch\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"decay -1\", \"index\": 5 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"wibble 3\" }], \"isDrum\": false } },\n            { name: \"faint sorrow\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4240.89, \"linearGain\": 2 }], \"eqFilterType\": true, \"eqSimpleCut\": 8, \"eqSimplePeak\": 4, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters1\": [], \"effects\": [\"panning\", \"detune\", \"vibrato\", \"echo\", \"reverb\"], \"detuneCents\": 22, \"vibrato\": \"light\", \"vibratoDepth\": 0.15, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"pan\": 0, \"panDelay\": 10, \"echoSustain\": 100, \"echoDelayBeats\": 0.667, \"reverb\": 87, \"fadeInSeconds\": 0.075, \"fadeOutTicks\": 48, \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [], \"isDrum\": false } },\n            { name: \"bright sorrow fm\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [], \"effects\": [\"panning\", \"chord type\", \"note filter\", \"echo\", \"reverb\"], \"chord\": \"strum\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2000, \"linearGain\": 2.8284 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2000, \"linearGain\": 2.8284 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1414.21, \"linearGain\": 1.4142 }], \"pan\": 0, \"panDelay\": 10, \"echoSustain\": 71, \"echoDelayBeats\": 1.333, \"reverb\": 61, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 13, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"5×\", \"amplitude\": 10, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"5×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"2×\", \"amplitude\": 7, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [], \"isDrum\": false } },\n            { name: \"wet sorrow fm\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.7071 }], \"eqFilterType\": true, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters1\": [], \"effects\": [\"panning\", \"vibrato\", \"reverb\"], \"vibrato\": \"light\", \"vibratoDepth\": 0.15, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"pan\": 0, \"panDelay\": 10, \"reverb\": 23, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 4, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 3, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 2, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"decay 3\", \"index\": 2 }], \"isDrum\": false } },\n            { name: \"scream fm\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 2 }, { \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 0.125 }, { \"type\": \"peak\", \"cutoffHz\": 353.55, \"linearGain\": 0.7071 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 2 }, { \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 0.125 }, { \"type\": \"peak\", \"cutoffHz\": 353.55, \"linearGain\": 0.7071 }], \"effects\": [\"panning\", \"detune\", \"note filter\", \"distortion\", \"reverb\"], \"detuneCents\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.125 }, { \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 11.3137 }], \"noteSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.125 }, { \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 11.3137 }], \"distortion\": 0, \"aliases\": false, \"pan\": 0, \"panDelay\": 10, \"reverb\": 87, \"fadeInSeconds\": 0.135, \"fadeOutTicks\": -3, \"algorithm\": \"(1 2 3)←4\", \"feedbackType\": \"1⟲ 2⟲ 3⟲ 4⟲\", \"feedbackAmplitude\": 11, \"operators\": [{ \"frequency\": \"4×\", \"amplitude\": 13, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 10, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"2×\", \"amplitude\": 3, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"7×\", \"amplitude\": 5, \"waveform\": \"triangle\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"detune\", \"envelope\": \"swell 1\" }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"tremolo4\" }], \"isDrum\": false } },\n            { name: \"anguished radio fm pad\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 9513.66, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 353.55, \"linearGain\": 0.0884 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 62.5, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 9513.66, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 353.55, \"linearGain\": 0.0884 }], \"eqSubFilters4\": [], \"effects\": [\"panning\", \"detune\", \"note filter\", \"bitcrusher\", \"chorus\", \"echo\", \"reverb\"], \"detuneCents\": -16, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [], \"noteSubFilters0\": [], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 11313.71, \"linearGain\": 11.3137 }], \"noteSubFilters2\": [{ \"type\": \"low-pass\", \"cutoffHz\": 105.11, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 11313.71, \"linearGain\": 11.3137 }], \"noteSubFilters4\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 11313.71, \"linearGain\": 11.3137 }], \"bitcrusherOctave\": 5.5, \"bitcrusherQuantization\": 43, \"pan\": 0, \"panDelay\": 10, \"chorus\": 29, \"echoSustain\": 43, \"echoDelayBeats\": 1, \"reverb\": 58, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1→3\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2×\", \"amplitude\": 7, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [], \"isDrum\": false } },\n            { name: \"juicy kick\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 11.3137 }, { \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 0.0884 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 11.3137 }, { \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 0.0884 }], \"effects\": [\"panning\"], \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": -6, \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"20×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"operatorFrequency\", \"envelope\": \"twang 1\", \"index\": 0 }, { \"target\": \"noteVolume\", \"envelope\": \"twang 2\" }], \"isDrum\": false } },\n            { name: \"good vibes supersaw\", generalMidi: false, settings: { \"type\": \"supersaw\", \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 6, \"discreteEnvelope\": false, \"pitchEnvelopeStart\": 37, \"pitchEnvelopeEnd\": 96, \"pitchEnvelopeInverse\": true, \"eqSubFilters0\": [], \"effects\": [\"panning\", \"transition type\", \"detune\", \"chorus\", \"reverb\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"detuneCents\": 30, \"pan\": 0, \"panDelay\": 10, \"chorus\": 14, \"reverb\": 23, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": 12, \"pulseWidth\": 26, \"decimalOffset\": 0, \"dynamism\": 33, \"spread\": 33, \"shape\": 17, \"envelopes\": [{ \"target\": \"supersawShape\", \"envelope\": \"pitch\" }, { \"target\": \"detune\", \"envelope\": \"tremolo2\" }], \"isDrum\": false } },\n            { name: \"ethereal\", generalMidi: false, isNoise: false, settings: { \"type\": \"spectrum\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 4000, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 6727.17, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 88.39, \"linearGain\": 1.4142 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 4, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"peak\", \"cutoffHz\": 4000, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 6727.17, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 88.39, \"linearGain\": 1.4142 }], \"eqSubFilters1\": [], \"effects\": [\"panning\", \"transition type\", \"chord type\", \"pitch shift\", \"detune\", \"vibrato\", \"note filter\", \"bitcrusher\", \"chorus\", \"reverb\"], \"transition\": \"continue\", \"clicklessTransition\": false, \"chord\": \"simultaneous\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"pitchShiftSemitones\": 12, \"detuneCents\": 36, \"vibrato\": \"custom\", \"vibratoDepth\": 0.12, \"vibratoDelay\": 36, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 0.0884 }, { \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 0.7071 }], \"noteSubFilters0\": [{ \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 0.0884 }, { \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 0.7071 }], \"bitcrusherOctave\": 4.5, \"bitcrusherQuantization\": 43, \"pan\": 0, \"panDelay\": 10, \"chorus\": 71, \"reverb\": 100, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"spectrum\": [43, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 57, 0, 0, 57, 0, 43, 0, 43, 0, 0, 29, 0, 29, 0, 14, 14, 14, 0, 0], \"unison\": \"none\", \"pitchEnvelopeStart0\": 0, \"pitchEnvelopeEnd0\": 96, \"envelopeInverse0\": false, \"pitchEnvelopeStart1\": 0, \"pitchEnvelopeEnd1\": 96, \"envelopeInverse1\": false, \"pitchEnvelopeStart2\": 0, \"pitchEnvelopeEnd2\": 96, \"envelopeInverse2\": false, \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"note size\" }, { \"target\": \"detune\", \"envelope\": \"tremolo3\" }, { \"target\": \"bitcrusherQuantization\", \"envelope\": \"note size\" }], \"isDrum\": false } },\n            { name: \"walrus wuh\", generalMidi: false, settings: { \"type\": \"supersaw\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }, { \"type\": \"high-pass\", \"cutoffHz\": 353.55, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 4756.83, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 3363.59, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 74.33, \"linearGain\": 2.8284 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"pitchEnvelopeInverse\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }, { \"type\": \"high-pass\", \"cutoffHz\": 353.55, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 4756.83, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 3363.59, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 74.33, \"linearGain\": 2.8284 }], \"effects\": [\"panning\", \"note filter\", \"bitcrusher\", \"chorus\", \"reverb\"], \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 0.125 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 0.125 }], \"bitcrusherOctave\": 4, \"bitcrusherQuantization\": 71, \"pan\": 0, \"panDelay\": 10, \"chorus\": 86, \"reverb\": 32, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": 48, \"pulseWidth\": 50, \"decimalOffset\": 0, \"dynamism\": 100, \"spread\": 50, \"shape\": 0, \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"punch\" }, { \"target\": \"bitcrusherQuantization\", \"envelope\": \"decay 3\" }], \"isDrum\": false } },\n            { name: \"saturnic\", generalMidi: false, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4240.89, \"linearGain\": 2 }], \"eqFilterType\": true, \"eqSimpleCut\": 8, \"eqSimplePeak\": 4, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters1\": [], \"effects\": [\"panning\", \"vibrato\", \"chorus\", \"echo\", \"reverb\"], \"vibrato\": \"light\", \"vibratoDepth\": 0.15, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"pan\": 0, \"panDelay\": 10, \"chorus\": 100, \"echoSustain\": 71, \"echoDelayBeats\": 0.5, \"reverb\": 45, \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 15, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [], \"isDrum\": false } },\n            { name: \"glassy harmonics\", generalMidi: false, settings: { \"type\": \"harmonics\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1000, \"linearGain\": 11.3137 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1000, \"linearGain\": 11.3137 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.5 }], \"effects\": [\"panning\", \"detune\", \"note filter\", \"chorus\", \"reverb\"], \"detuneCents\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [], \"noteSubFilters0\": [], \"pan\": 0, \"panDelay\": 10, \"chorus\": 14, \"reverb\": 29, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"harmonics\": [100, 0, 43, 29, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 14, 29, 14, 0, 14, 0, 0, 0, 0, 100, 0, 0, 14, 0], \"unison\": \"none\", \"envelopes\": [], \"isDrum\": false } },\n            { name: \"plucked\", generalMidi: false, settings: { \"type\": \"Picked String\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.0884 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.0884 }], \"effects\": [\"panning\", \"transition type\", \"echo\", \"reverb\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"pan\": 0, \"panDelay\": 10, \"echoSustain\": 100, \"echoDelayBeats\": 1.333, \"reverb\": 26, \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"harmonics\": [100, 86, 57, 0, 0, 57, 57, 57, 86, 57, 57, 43, 43, 43, 29, 29, 14, 14, 29, 14, 14, 14, 29, 100, 57, 43, 14, 14], \"unison\": \"none\", \"stringSustain\": 14, \"envelopes\": [], \"isDrum\": false } },\n            { name: \"spectrum wind\", generalMidi: false, isNoise: true, settings: { \"type\": \"spectrum\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.7071 }], \"eqFilterType\": true, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters1\": [], \"effects\": [\"panning\", \"note filter\", \"reverb\"], \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 1.4142 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 1.4142 }], \"pan\": 0, \"panDelay\": 10, \"reverb\": 87, \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"spectrum\": [29, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 14, 57, 14, 0, 57, 57, 0, 0, 57, 0, 71, 14, 29, 100, 71, 0, 100, 14, 86], \"unison\": \"none\", \"envelopes\": [], \"isDrum\": true } },\n            { name: \"hi-hat\", generalMidi: false, isNoise: true, settings: { \"type\": \"noise\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.1768 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.1768 }], \"eqSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.1768 }], \"eqSubFilters2\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.1768 }], \"eqSubFilters3\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.1768 }, { \"type\": \"high-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.1768 }], \"effects\": [\"panning\"], \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"wave\": \"white\", \"unison\": \"none\", \"envelopes\": [], \"isDrum\": true } },\n            { name: \"jungle bass\", generalMidi: false, isNoise: false, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 148.65, \"linearGain\": 0.0884 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 148.65, \"linearGain\": 0.0884 }], \"effects\": [\"panning\", \"vibrato\", \"note filter\", \"chorus\", \"reverb\"], \"vibrato\": \"none\", \"vibratoDepth\": 0, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 297.3, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 74.33, \"linearGain\": 0.0884 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 297.3, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 74.33, \"linearGain\": 0.0884 }], \"pan\": 0, \"panDelay\": 10, \"chorus\": 14, \"reverb\": 3, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1↔2 3↔4\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 13, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"2×\", \"amplitude\": 5, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"8×\", \"amplitude\": 11, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"pitchEnvelopeStart0\": 0, \"pitchEnvelopeEnd0\": 96, \"envelopeInverse0\": false, \"pitchEnvelopeStart1\": 0, \"pitchEnvelopeEnd1\": 96, \"envelopeInverse1\": false, \"pitchEnvelopeStart2\": 12, \"pitchEnvelopeEnd2\": 28, \"envelopeInverse2\": false, \"envelopes\": [{ \"target\": \"operatorFrequency\", \"envelope\": \"swell 3\", \"index\": 0 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 3\", \"index\": 1 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"pitch\", \"index\": 0 }], \"isDrum\": false } },\n            { name: \"beach tide\", generalMidi: false, isNoise: false, settings: { \"type\": \"harmonics\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.3536 }, { \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.1768 }, { \"type\": \"peak\", \"cutoffHz\": 8000, \"linearGain\": 0.0884 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.3536 }, { \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.1768 }, { \"type\": \"peak\", \"cutoffHz\": 8000, \"linearGain\": 0.0884 }], \"effects\": [\"panning\", \"transition type\", \"chord type\", \"note filter\", \"chorus\", \"reverb\"], \"transition\": \"continue\", \"clicklessTransition\": false, \"chord\": \"simultaneous\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 0.1768 }], \"noteSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 0.1768 }], \"pan\": 0, \"panDelay\": 10, \"chorus\": 14, \"reverb\": 32, \"fadeInSeconds\": 0.0938, \"fadeOutTicks\": 72, \"harmonics\": [86, 86, 71, 57, 57, 43, 43, 43, 29, 29, 14, 14, 14, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"unison\": \"none\", \"pitchEnvelopeStart0\": 0, \"pitchEnvelopeEnd0\": 96, \"envelopeInverse0\": false, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"pitch\" }], \"isDrum\": false } },\n            { name: \"starlight\", generalMidi: false, isNoise: false, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.0884 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.0884 }], \"effects\": [\"panning\", \"transition type\", \"vibrato\", \"bitcrusher\", \"echo\", \"reverb\"], \"transition\": \"continue\", \"clicklessTransition\": false, \"vibrato\": \"light\", \"vibratoDepth\": 0.15, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"bitcrusherOctave\": 5.5, \"bitcrusherQuantization\": 29, \"pan\": 0, \"panDelay\": 10, \"echoSustain\": 29, \"echoDelayBeats\": 1, \"reverb\": 13, \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 6, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [], \"isDrum\": false } },\n            { name: \"distant monument\", generalMidi: false, isNoise: false, settings: { \"type\": \"chip\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 11313.71, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 500, \"linearGain\": 0.125 }, { \"type\": \"peak\", \"cutoffHz\": 210.22, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 5.6569 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 11313.71, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 500, \"linearGain\": 0.125 }, { \"type\": \"peak\", \"cutoffHz\": 210.22, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 5.6569 }], \"effects\": [\"panning\", \"transition type\", \"chord type\", \"detune\", \"bitcrusher\", \"chorus\", \"echo\", \"reverb\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"chord\": \"strum\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"detuneCents\": 24, \"bitcrusherOctave\": 2.5, \"bitcrusherQuantization\": 14, \"pan\": 0, \"panDelay\": 10, \"chorus\": 86, \"echoSustain\": 71, \"echoDelayBeats\": 1, \"reverb\": 35, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 12, \"wave\": \"modbox pnryshk a (u5)\", \"unison\": \"detune\", \"isUsingAdvancedLoopControls\": false, \"chipWaveLoopStart\": 0, \"chipWaveLoopEnd\": 11, \"chipWaveLoopMode\": 0, \"chipWavePlayBackwards\": false, \"chipWaveStartOffset\": 0, \"pitchEnvelopeStart0\": 0, \"pitchEnvelopeEnd0\": 96, \"envelopeInverse0\": false, \"pitchEnvelopeStart1\": 0, \"pitchEnvelopeEnd1\": 96, \"envelopeInverse1\": false, \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"punch\" }, { \"target\": \"noteVolume\", \"envelope\": \"twang 1\" }], \"isDrum\": false } },\n            { name: \"mercurial\", generalMidi: false, isNoise: false, settings: { \"type\": \"FM6op\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 88.39, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.1768 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 88.39, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.1768 }], \"eqSubFilters1\": [], \"effects\": [\"panning\", \"distortion\", \"chorus\"], \"distortion\": 43, \"aliases\": false, \"pan\": 0, \"panDelay\": 10, \"chorus\": 43, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"Custom\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 8, \"customAlgorithm\": { \"mods\": [[3], [5], [4], [], [6], []], \"carrierCount\": 2 }, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"0.5×\", \"amplitude\": 10, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 5, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 2, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"operatorFrequency\", \"envelope\": \"linear\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 2, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 3 }, { \"target\": \"distortion\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 20, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n            { name: \"air hiss\", generalMidi: false, isNoise: true, settings: { \"type\": \"spectrum\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }], \"eqFilterType\": true, \"eqSimpleCut\": 7, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters1\": [], \"effects\": [\"panning\", \"note filter\", \"distortion\", \"reverb\"], \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.25 }, { \"type\": \"high-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 0.3536 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.25 }, { \"type\": \"high-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 0.3536 }], \"distortion\": 71, \"aliases\": false, \"pan\": 0, \"panDelay\": 10, \"reverb\": 6, \"fadeInSeconds\": 0, \"fadeOutTicks\": -24, \"spectrum\": [57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 57, 71, 86, 100, 100, 100, 100, 86, 71, 71, 43], \"unison\": \"none\", \"envelopes\": [], \"isDrum\": true } },\n            { name: \"spectral phaser\", generalMidi: false, settings: { \"type\": \"spectrum\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 74.33, \"linearGain\": 0.25 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 10, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.3536 }], \"effects\": [\"panning\", \"note filter\", \"distortion\", \"bitcrusher\", \"chorus\", \"echo\", \"reverb\"], \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 9513.66, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 1414.21, \"linearGain\": 0.125 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 353.55, \"linearGain\": 0.1768 }, { \"type\": \"peak\", \"cutoffHz\": 148.65, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 88.39, \"linearGain\": 0.1768 }], \"noteSubFilters0\": [{ \"type\": \"peak\", \"cutoffHz\": 9513.66, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 1414.21, \"linearGain\": 0.125 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 353.55, \"linearGain\": 0.1768 }, { \"type\": \"peak\", \"cutoffHz\": 148.65, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 88.39, \"linearGain\": 0.1768 }], \"distortion\": 14, \"aliases\": false, \"bitcrusherOctave\": 6, \"bitcrusherQuantization\": 14, \"pan\": 0, \"panDelay\": 10, \"chorus\": 100, \"echoSustain\": 86, \"echoDelayBeats\": 1, \"reverb\": 32, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"spectrum\": [86, 0, 0, 0, 57, 0, 0, 71, 0, 0, 0, 86, 0, 0, 57, 0, 43, 0, 43, 0, 0, 43, 0, 29, 0, 29, 14, 14, 29, 14], \"unison\": \"piano\", \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0.07, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 0 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0.06, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 1 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0.05, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 2 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0.04, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 3 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0.09, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 4 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0.08, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 5 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0.1, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 6 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0.03, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 7 }, { \"target\": \"distortion\", \"envelope\": \"none\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 0.3 }], \"isDrum\": false } },\n            { name: \"shaker\", generalMidi: false, isNoise: true, settings: { \"type\": \"noise\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 4000, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 4756.83, \"linearGain\": 0.0884 }, { \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 8 }, { \"type\": \"peak\", \"cutoffHz\": 2378.41, \"linearGain\": 0.25 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 6, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 4000, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 4756.83, \"linearGain\": 0.0884 }, { \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 8 }, { \"type\": \"peak\", \"cutoffHz\": 2378.41, \"linearGain\": 0.25 }], \"effects\": [\"panning\", \"transition type\", \"detune\", \"distortion\", \"bitcrusher\", \"chorus\", \"echo\", \"reverb\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"detuneCents\": 30, \"distortion\": 43, \"aliases\": false, \"bitcrusherOctave\": 2.5, \"bitcrusherQuantization\": 43, \"pan\": 0, \"panDelay\": 10, \"chorus\": 43, \"echoSustain\": 29, \"echoDelayBeats\": 1, \"reverb\": 23, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": 96, \"wave\": \"deep\", \"unison\": \"none\", \"envelopes\": [{ \"target\": \"detune\", \"envelope\": \"tremolo2\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 2, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"bitcrusherQuantization\", \"envelope\": \"note size\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"noteVolume\", \"envelope\": \"note size\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"noteVolume\", \"envelope\": \"flare\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 12, \"inverse\": false, \"perEnvelopeSpeed\": 64, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": true } },\n            { name: \"distant sorrow\", generalMidi: false, settings: { \"type\": \"harmonics\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 707.11, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 707.11, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 0.5 }], \"effects\": [\"panning\", \"transition type\", \"detune\", \"vibrato\", \"note filter\", \"echo\", \"reverb\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"detuneCents\": 0, \"vibrato\": \"custom\", \"vibratoDepth\": 0.2, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.25 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.25 }], \"pan\": 0, \"panDelay\": 10, \"echoSustain\": 100, \"echoDelayBeats\": 1, \"reverb\": 74, \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"harmonics\": [86, 71, 57, 43, 43, 29, 57, 0, 14, 0, 29, 29, 29, 29, 29, 43, 43, 43, 43, 43, 57, 57, 57, 0, 57, 57, 0, 0], \"unison\": \"none\", \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"fall\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 10, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 2.5, \"perEnvelopeLowerBound\": 0.5, \"perEnvelopeUpperBound\": 2 }], \"isDrum\": false } },\n            { name: \"metallic kick\", generalMidi: false, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 28, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.5 }], \"effects\": [\"panning\"], \"pan\": 0, \"panDelay\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1←(2 3 4)\", \"feedbackType\": \"1→2→3→4\", \"feedbackAmplitude\": 15, \"operators\": [{ \"frequency\": \"8×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"256x\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"128x\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"256x\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"operatorFrequency\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 16, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 0 }, { \"target\": \"noteVolume\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 3.5, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 256, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 256, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 256, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 3 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 256, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 2 }], \"isDrum\": false } },\n            { name: \"chimes\", generalMidi: false, settings: { \"type\": \"Picked String\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 8000, \"linearGain\": 2.8284 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 8000, \"linearGain\": 2.8284 }], \"effects\": [\"panning\", \"chord type\", \"detune\", \"note filter\", \"bitcrusher\", \"chorus\", \"echo\", \"reverb\"], \"chord\": \"strum\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"detuneCents\": 24, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.5 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.5 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 1 }], \"bitcrusherOctave\": 4, \"bitcrusherQuantization\": 29, \"pan\": 0, \"panDelay\": 0, \"chorus\": 29, \"echoSustain\": 86, \"echoDelayBeats\": 0.667, \"reverb\": 84, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"harmonics\": [0, 100, 71, 71, 29, 0, 57, 86, 0, 0, 0, 0, 71, 29, 0, 0, 57, 0, 0, 86, 0, 0, 0, 100, 0, 100, 0, 57], \"unison\": \"none\", \"stringSustain\": 36, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 2, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"bitcrusherQuantization\", \"envelope\": \"swell\", \"inverse\": false, \"perEnvelopeSpeed\": 4.5, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"bitcrusherQuantization\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"noteVolume\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"stringSustain\", \"envelope\": \"random\", \"inverse\": false, \"perEnvelopeSpeed\": 16, \"perEnvelopeLowerBound\": 0.5, \"perEnvelopeUpperBound\": 1, \"steps\": 14, \"seed\": 2, \"waveform\": 0 }, { \"target\": \"detune\", \"envelope\": \"pitch\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96 }], \"isDrum\": false } },\n            { name: \"supersaw bass\", generalMidi: false, settings: { \"type\": \"supersaw\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.5 }], \"effects\": [\"panning\", \"note filter\", \"distortion\", \"chorus\", \"reverb\"], \"noteFilterType\": true, \"noteSimpleCut\": 9, \"noteSimplePeak\": 2, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 7231.23, \"linearGain\": 1 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 7231.23, \"linearGain\": 1 }], \"distortion\": 14, \"aliases\": false, \"pan\": 0, \"panDelay\": 10, \"chorus\": 29, \"reverb\": 0, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"pulseWidth\": 50, \"decimalOffset\": 0, \"dynamism\": 100, \"spread\": 67, \"shape\": 0, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell\", \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n            { name: \"ascension\", generalMidi: false, isNoise: false, settings: { \"type\": \"spectrum\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 0.25 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 0.25 }], \"eqSubFilters1\": [], \"effects\": [\"panning\", \"granular\", \"chorus\", \"reverb\"], \"granular\": 7, \"grainSize\": 44, \"grainAmounts\": 9, \"grainRange\": 37, \"pan\": 0, \"panDelay\": 10, \"chorus\": 71, \"reverb\": 19, \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"spectrum\": [43, 0, 0, 57, 0, 0, 14, 100, 29, 0, 0, 100, 29, 0, 100, 0, 57, 29, 86, 14, 14, 100, 14, 0, 14, 14, 0, 0, 43, 0], \"unison\": \"voiced\", \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"swell\", \"inverse\": false, \"perEnvelopeSpeed\": 0.7, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"panning\", \"envelope\": \"lfo\", \"inverse\": false, \"perEnvelopeSpeed\": 0.3, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false, \"waveform\": 2, \"steps\": 6 }], \"isDrum\": false } },\n            { name: \"liminal\", generalMidi: false, isNoise: false, settings: { \"type\": \"supersaw\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 840.9, \"linearGain\": 0.25 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 840.9, \"linearGain\": 0.25 }], \"effects\": [\"panning\", \"detune\", \"vibrato\", \"note filter\", \"granular\", \"distortion\", \"bitcrusher\", \"chorus\", \"reverb\"], \"detuneCents\": 8, \"vibrato\": \"custom\", \"vibratoDepth\": 0.48, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": true, \"noteSimpleCut\": 6, \"noteSimplePeak\": 2, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2196.8, \"linearGain\": 1 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2196.8, \"linearGain\": 1 }], \"granular\": 6, \"grainSize\": 49, \"grainAmounts\": 10, \"grainRange\": 40, \"distortion\": 57, \"aliases\": false, \"bitcrusherOctave\": 5, \"bitcrusherQuantization\": 0, \"pan\": 38, \"panDelay\": 10, \"chorus\": 29, \"reverb\": 48, \"fadeInSeconds\": 0, \"fadeOutTicks\": 72, \"pulseWidth\": 30, \"decimalOffset\": 0, \"dynamism\": 17, \"spread\": 83, \"shape\": 67, \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 17, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"pulseWidth\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 1.3333, \"perEnvelopeLowerBound\": 0.1, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"distortion\", \"envelope\": \"random\", \"inverse\": false, \"perEnvelopeSpeed\": 1, \"perEnvelopeLowerBound\": 0.2, \"perEnvelopeUpperBound\": 1, \"discrete\": true, \"steps\": 8, \"seed\": 2, \"waveform\": 2 }, { \"target\": \"panning\", \"envelope\": \"lfo\", \"inverse\": false, \"perEnvelopeSpeed\": 0.3333, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false, \"waveform\": 2, \"steps\": 2 }, { \"target\": \"noteVolume\", \"envelope\": \"swell\", \"inverse\": false, \"perEnvelopeSpeed\": 18, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"noteVolume\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"granular\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }], \"isDrum\": false } },\n        ])\n    },\n    {\n        name: \"Slarmoo's Box Chip Presets\", presets: toNameMap([\n            { name: \"Slarmoo's Pulse\", midiProgram: 80, settings: { \"type\": \"PWM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [], \"effects\": [\"panning\", \"transition type\", \"chord type\", \"detune\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"chord\": \"arpeggio\", \"fastTwoNoteArp\": true, \"arpeggioSpeed\": 8, \"detuneCents\": 24, \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"pulseWidth\": 50, \"decimalOffset\": 0, \"unison\": \"none\", \"pitchEnvelopeStart0\": 0, \"pitchEnvelopeEnd0\": 96, \"envelopeInverse0\": false, \"envelopes\": [{ \"target\": \"detune\", \"envelope\": \"pitch\" }], \"isDrum\": false } },\n            { name: \"discovery square\", midiProgram: 80, settings: { \"type\": \"chip\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.3536 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.3536 }], \"effects\": [\"panning\", \"bitcrusher\"], \"bitcrusherOctave\": 5.5, \"bitcrusherQuantization\": 57, \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"wave\": \"square\", \"unison\": \"octave\", \"isUsingAdvancedLoopControls\": false, \"chipWaveLoopStart\": 0, \"chipWaveLoopEnd\": 2, \"chipWaveLoopMode\": 0, \"chipWavePlayBackwards\": false, \"chipWaveStartOffset\": 0, \"envelopes\": [], \"isDrum\": false } },\n            { name: \"VRC6 Sawtooth alt\", midiProgram: 81, settings: { \"type\": \"custom chip\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 0.5 }], \"effects\": [\"panning\", \"transition type\", \"chord type\", \"pitch shift\", \"detune\", \"vibrato\", \"distortion\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"chord\": \"arpeggio\", \"fastTwoNoteArp\": true, \"arpeggioSpeed\": 12, \"pitchShiftSemitones\": 12, \"detuneCents\": 0, \"vibrato\": \"none\", \"vibratoDepth\": 0, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"distortion\": 0, \"aliases\": false, \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"wave\": \"square\", \"unison\": \"none\", \"customChipWave\": { \"0\": -1, \"1\": -1, \"2\": -1, \"3\": -1, \"4\": -1, \"5\": -1, \"6\": -1, \"7\": -1, \"8\": -1, \"9\": -5, \"10\": -5, \"11\": -5, \"12\": -4, \"13\": -4, \"14\": -4, \"15\": -3, \"16\": -3, \"17\": -3, \"18\": -7, \"19\": -7, \"20\": -6, \"21\": -6, \"22\": -5, \"23\": -5, \"24\": -4, \"25\": -4, \"26\": -4, \"27\": -7, \"28\": -7, \"29\": -6, \"30\": -6, \"31\": -5, \"32\": -5, \"33\": -4, \"34\": -4, \"35\": -4, \"36\": -8, \"37\": -8, \"38\": -7, \"39\": -7, \"40\": -6, \"41\": -6, \"42\": -5, \"43\": -5, \"44\": -4, \"45\": -4, \"46\": 21, \"47\": 20, \"48\": 18, \"49\": 17, \"50\": 16, \"51\": 14, \"52\": 13, \"53\": 12, \"54\": 11, \"55\": 7, \"56\": 6, \"57\": 6, \"58\": 5, \"59\": 5, \"60\": 5, \"61\": 4, \"62\": 4, \"63\": 4 }, \"customChipWaveIntegral\": { \"0\": 0, \"1\": 0, \"2\": 0, \"3\": 0, \"4\": 0, \"5\": 0, \"6\": 0, \"7\": 0, \"8\": 0, \"9\": 0, \"10\": 0, \"11\": 0, \"12\": 0, \"13\": 0, \"14\": 0, \"15\": 0, \"16\": 0, \"17\": 0, \"18\": 0, \"19\": 0, \"20\": 0, \"21\": 0, \"22\": 0, \"23\": 0, \"24\": 0, \"25\": 0, \"26\": 0, \"27\": 0, \"28\": 0, \"29\": 0, \"30\": 0, \"31\": 0, \"32\": 0, \"33\": 0, \"34\": 0, \"35\": 0, \"36\": 0, \"37\": 0, \"38\": 0, \"39\": 0, \"40\": 0, \"41\": 0, \"42\": 0, \"43\": 0, \"44\": 0, \"45\": 0, \"46\": 0, \"47\": 0, \"48\": 0, \"49\": 0, \"50\": 0, \"51\": 0, \"52\": 0, \"53\": 0, \"54\": 0, \"55\": 0, \"56\": 0, \"57\": 0, \"58\": 0, \"59\": 0, \"60\": 0, \"61\": 0, \"62\": 0, \"63\": 0, \"64\": 0 }, \"envelopes\": [], \"isDrum\": false } },\n            { name: \"pulse arps\", midiProgram: 80, settings: { \"type\": \"PWM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.125 }, { \"type\": \"high-pass\", \"cutoffHz\": 840.9, \"linearGain\": 2 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 7, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.125 }, { \"type\": \"high-pass\", \"cutoffHz\": 840.9, \"linearGain\": 2 }], \"effects\": [\"panning\", \"transition type\", \"chord type\", \"detune\", \"chorus\", \"echo\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"chord\": \"arpeggio\", \"fastTwoNoteArp\": true, \"arpeggioSpeed\": 8, \"detuneCents\": 64, \"pan\": 58, \"panDelay\": 10, \"chorus\": 43, \"echoSustain\": 71, \"echoDelayBeats\": 0.333, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"pulseWidth\": 50, \"decimalOffset\": 0, \"unison\": \"none\", \"envelopes\": [{ \"target\": \"detune\", \"envelope\": \"pitch\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96 }, { \"target\": \"pulseWidth\", \"envelope\": \"pitch\", \"inverse\": true, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"pitchEnvelopeStart\": 24, \"pitchEnvelopeEnd\": 83 }, { \"target\": \"panning\", \"envelope\": \"lfo\", \"inverse\": false, \"perEnvelopeSpeed\": 1, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"waveform\": 0, \"steps\": 2 }, { \"target\": \"noteVolume\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"chorus\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n        ])\n    },\n    {\n        name: \"Slarmoo's Box Instrumental Presets\", presets: toNameMap([\n            { name: \"rusty flute\", midiProgram: 73, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 13454.34, \"linearGain\": 2.8284 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"peak\", \"cutoffHz\": 13454.34, \"linearGain\": 2.8284 }], \"effects\": [\"panning\", \"transition type\", \"detune\", \"distortion\", \"reverb\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"detuneCents\": -7, \"distortion\": 14, \"aliases\": false, \"pan\": 0, \"panDelay\": 10, \"reverb\": 100, \"fadeInSeconds\": 0, \"fadeOutTicks\": 96, \"algorithm\": \"1←2←3←4\", \"feedbackType\": \"3→4\", \"feedbackAmplitude\": 8, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"2×\", \"amplitude\": 5, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"2×\", \"amplitude\": 4, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"20×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [], \"isDrum\": false } },\n            { name: \"bitcrushed piano\", midiProgram: 4, settings: { \"type\": \"chip\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 2.8284 }, { \"type\": \"high-pass\", \"cutoffHz\": 74.33, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 2.8284 }, { \"type\": \"high-pass\", \"cutoffHz\": 74.33, \"linearGain\": 0.5 }], \"effects\": [\"panning\", \"transition type\", \"detune\", \"distortion\", \"bitcrusher\", \"reverb\"], \"transition\": \"continue\", \"clicklessTransition\": false, \"detuneCents\": 0, \"distortion\": 29, \"aliases\": true, \"bitcrusherOctave\": 4, \"bitcrusherQuantization\": 43, \"pan\": 0, \"panDelay\": 0, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"wave\": \"triangle\", \"unison\": \"none\", \"isUsingAdvancedLoopControls\": true, \"chipWaveLoopStart\": 0, \"chipWaveLoopEnd\": 32, \"chipWaveLoopMode\": 0, \"chipWavePlayBackwards\": false, \"chipWaveStartOffset\": 0, \"envelopes\": [{ \"target\": \"bitcrusherQuantization\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0.6, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"noteVolume\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }], \"isDrum\": false } },\n            { name: \"detuned piano\", midiProgram: 3, settings: { \"type\": \"Picked String\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 2.8284 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 2.8284 }], \"effects\": [\"panning\", \"transition type\", \"detune\", \"vibrato\", \"note filter\", \"bitcrusher\"], \"transition\": \"continue\", \"clicklessTransition\": false, \"detuneCents\": 44, \"vibrato\": \"custom\", \"vibratoDepth\": 0.04, \"vibratoDelay\": 13, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 1 }], \"noteSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 1 }], \"bitcrusherOctave\": 4, \"bitcrusherQuantization\": 14, \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"harmonics\": [86, 86, 71, 71, 57, 57, 43, 29, 14, 29, 29, 29, 29, 29, 29, 29, 29, 43, 43, 43, 43, 43, 29, 14, 14, 0, 0, 0], \"unison\": \"custom\", \"unisonVoices\": 2, \"unisonSpread\": 0.26, \"unisonOffset\": 0, \"unisonExpression\": 1, \"unisonSign\": 1, \"stringSustain\": 79, \"envelopes\": [{ \"target\": \"detune\", \"envelope\": \"random\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 1, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"steps\": 2, \"seed\": 49, \"waveform\": 1 }, { \"target\": \"noteVolume\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 1.6667, \"perEnvelopeLowerBound\": 0.4, \"perEnvelopeUpperBound\": 1, \"steps\": 2, \"seed\": 2, \"waveform\": 0 }, { \"target\": \"unison\", \"envelope\": \"random\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 1, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"steps\": 2, \"seed\": 20, \"waveform\": 1 }, { \"target\": \"noteFilterAllFreqs\", \"envelope\": \"pitch\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": true, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"steps\": 2, \"seed\": 2, \"waveform\": 0 }], \"isDrum\": false } },\n            { name: \"pan flute 2\", midiProgram: 75, isNoise: false, settings: { \"type\": \"spectrum\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 2 }, { \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.3536 }, { \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 2 }, { \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.3536 }, { \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.5 }], \"effects\": [\"panning\", \"transition type\", \"note filter\", \"bitcrusher\", \"reverb\"], \"transition\": \"continue\", \"clicklessTransition\": false, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.5 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.5 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.5 }], \"bitcrusherOctave\": 6, \"bitcrusherQuantization\": 57, \"pan\": 0, \"panDelay\": 10, \"reverb\": 16, \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -6, \"spectrum\": [100, 29, 14, 14, 57, 0, 0, 71, 0, 86, 57, 43, 57, 71, 14, 29, 14, 14, 14, 100, 71, 14, 14, 14, 14, 86, 43, 14, 0, 0], \"unison\": \"none\", \"pitchEnvelopeStart0\": 0, \"pitchEnvelopeEnd0\": 96, \"envelopeInverse0\": false, \"pitchEnvelopeStart1\": 0, \"pitchEnvelopeEnd1\": 96, \"envelopeInverse1\": false, \"pitchEnvelopeStart2\": 0, \"pitchEnvelopeEnd2\": 96, \"envelopeInverse2\": false, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"note size\" }, { \"target\": \"bitcrusherQuantization\", \"envelope\": \"note size\" }, { \"target\": \"noteVolume\", \"envelope\": \"note size\" }], \"isDrum\": false } },\n            { name: \"trumpet 2\", midiProgram: 56, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3049.17, \"linearGain\": 1.4142 }], \"eqFilterType\": true, \"eqSimpleCut\": 7, \"eqSimplePeak\": 3, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters1\": [], \"effects\": [\"panning\", \"detune\", \"vibrato\", \"note filter\", \"distortion\", \"chorus\", \"reverb\"], \"detuneCents\": -64, \"vibrato\": \"custom\", \"vibratoDepth\": 0.68, \"vibratoDelay\": 17, \"vibratoSpeed\": 12, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 3363.59, \"linearGain\": 0.1768 }, { \"type\": \"high-pass\", \"cutoffHz\": 1000, \"linearGain\": 0.1768 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 3363.59, \"linearGain\": 0.1768 }, { \"type\": \"high-pass\", \"cutoffHz\": 1000, \"linearGain\": 0.1768 }], \"distortion\": 29, \"aliases\": false, \"pan\": 0, \"panDelay\": 10, \"chorus\": 14, \"reverb\": 0, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1 2←(3 4)\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 9, \"operators\": [{ \"frequency\": \"0.75×\", \"amplitude\": 14, \"waveform\": \"pulse width\", \"pulseWidth\": 2 }, { \"frequency\": \"1×\", \"amplitude\": 14, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 5, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"flare\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 8, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"swell\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"operatorFrequency\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 128, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 0 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"swell\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 2.5, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 2 }, { \"target\": \"noteVolume\", \"envelope\": \"note size\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"detune\", \"envelope\": \"note size\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": true, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n            { name: \"harp 2\", midiProgram: 46, settings: { \"type\": \"FM6op\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 2.8284 }, { \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 0.25 }, { \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 2.8284 }, { \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 0.25 }, { \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.5 }], \"eqSubFilters1\": [], \"effects\": [\"panning\", \"detune\", \"note filter\", \"echo\", \"reverb\"], \"detuneCents\": -23, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 105.11, \"linearGain\": 2.8284 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 105.11, \"linearGain\": 2.8284 }], \"pan\": 0, \"panDelay\": 10, \"echoSustain\": 29, \"echoDelayBeats\": 1.083, \"reverb\": 74, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1←4 2←5 3←6\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 10, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 5, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 10, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 6, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"6×\", \"amplitude\": 12, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 2, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 4, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"operatorFrequency\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 8, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 1 }, { \"target\": \"detune\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 7, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"tremolo2\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 1, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 0 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 8, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 4 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": true, \"perEnvelopeSpeed\": 8, \"perEnvelopeLowerBound\": 0.4, \"perEnvelopeUpperBound\": 1, \"index\": 0 }, { \"target\": \"noteVolume\", \"envelope\": \"punch\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n            { name: \"electric guitar 1\", midiProgram: 30, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 1189.21, \"linearGain\": 2 }, { \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 1.4142 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 0.0884 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 1189.21, \"linearGain\": 2 }, { \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 1.4142 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 0.0884 }], \"effects\": [\"panning\", \"chord type\", \"vibrato\", \"note filter\", \"distortion\", \"reverb\"], \"chord\": \"monophonic\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"monoChordTone\": 0, \"vibrato\": \"delayed\", \"vibratoDepth\": 0.3, \"vibratoDelay\": 18.5, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1414.21, \"linearGain\": 4 }, { \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 1 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1414.21, \"linearGain\": 4 }, { \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 1 }], \"distortion\": 100, \"aliases\": false, \"pan\": 0, \"panDelay\": 0, \"reverb\": 6, \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"algorithm\": \"1 2 3 4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"2×\", \"amplitude\": 0, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"4×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"0.25×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"punch\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"vibratoDepth\", \"envelope\": \"rise\", \"inverse\": false, \"perEnvelopeSpeed\": 9, \"perEnvelopeLowerBound\": 1, \"perEnvelopeUpperBound\": 2, \"discrete\": false }, { \"target\": \"noteVolume\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"distortion\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }], \"isDrum\": false } },\n            { name: \"electric guitar 2\", midiProgram: 30, settings: { \"type\": \"PWM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 5.6569 }, { \"type\": \"high-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 2 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 5.6569 }, { \"type\": \"high-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 2 }], \"effects\": [\"panning\", \"chord type\", \"vibrato\", \"note filter\", \"distortion\", \"bitcrusher\", \"chorus\", \"reverb\"], \"chord\": \"monophonic\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"monoChordTone\": 0, \"vibrato\": \"custom\", \"vibratoDepth\": 0.68, \"vibratoDelay\": 22, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1000, \"linearGain\": 2.8284 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1000, \"linearGain\": 2.8284 }], \"distortion\": 43, \"aliases\": false, \"bitcrusherOctave\": 6.5, \"bitcrusherQuantization\": 71, \"pan\": 0, \"panDelay\": 0, \"chorus\": 14, \"reverb\": 13, \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"pulseWidth\": 50, \"decimalOffset\": 0, \"unison\": \"none\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"rise\", \"inverse\": false, \"perEnvelopeSpeed\": 0.3333, \"perEnvelopeLowerBound\": 0.8, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"pulseWidth\", \"envelope\": \"twang\", \"inverse\": true, \"perEnvelopeSpeed\": 2.25, \"perEnvelopeLowerBound\": 0.5, \"perEnvelopeUpperBound\": 0.9, \"discrete\": false }, { \"target\": \"noteVolume\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"bitcrusherQuantization\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }], \"isDrum\": false } },\n        ])\n    },\n    {\n        name: \"Slarmoo's Box Novelty Presets\", presets: toNameMap([\n            { name: \"bitcrushed artifacts\", generalMidi: false, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9656.85, \"linearGain\": 0.5 }], \"eqFilterType\": true, \"eqSimpleCut\": 9, \"eqSimplePeak\": 1, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters1\": [], \"effects\": [\"panning\", \"distortion\", \"bitcrusher\", \"echo\"], \"distortion\": 71, \"aliases\": false, \"bitcrusherOctave\": 2, \"bitcrusherQuantization\": 86, \"pan\": 0, \"panDelay\": 10, \"echoSustain\": 0, \"echoDelayBeats\": 1, \"fadeInSeconds\": 0, \"fadeOutTicks\": -6, \"harmonics\": [0, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 100, 43, 0, 0, 14, 86, 0, 14, 0, 0, 0, 0, 0, 86], \"unison\": \"none\", \"stringSustain\": 14, \"envelopes\": [], \"isDrum\": false } },\n            { name: \"whistle 2\", midiProgram: 78, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2110.37, \"linearGain\": 1.4142 }], \"eqFilterType\": true, \"eqSimpleCut\": 6, \"eqSimplePeak\": 3, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters1\": [], \"effects\": [\"panning\", \"transition type\", \"pitch shift\", \"note filter\", \"distortion\", \"echo\", \"reverb\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"pitchShiftSemitones\": 11, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1414.21, \"linearGain\": 2 }, { \"type\": \"high-pass\", \"cutoffHz\": 88.39, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 4 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1414.21, \"linearGain\": 2 }, { \"type\": \"high-pass\", \"cutoffHz\": 88.39, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 4 }], \"distortion\": 43, \"aliases\": false, \"pan\": 0, \"panDelay\": 10, \"echoSustain\": 57, \"echoDelayBeats\": 1.083, \"reverb\": 87, \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": -1, \"harmonics\": [57, 0, 0, 0, 0, 0, 0, 0, 0, 86, 57, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 57, 29, 0, 29, 100, 0], \"unison\": \"none\", \"envelopes\": [{ \"target\": \"pitchShift\", \"envelope\": \"decay 1\" }], \"isDrum\": false } },\n            { name: \"frog wuh\", generalMidi: false, settings: { \"type\": \"spectrum\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 6727.17, \"linearGain\": 8 }, { \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.125 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 6727.17, \"linearGain\": 8 }, { \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.125 }], \"eqSubFilters1\": [], \"effects\": [\"panning\", \"pitch shift\", \"note filter\"], \"pitchShiftSemitones\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1000, \"linearGain\": 1 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1000, \"linearGain\": 1 }], \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"spectrum\": [100, 29, 14, 29, 0, 14, 0, 71, 0, 43, 14, 71, 0, 0, 71, 14, 100, 0, 71, 0, 43, 86, 43, 0, 43, 0, 0, 43, 29, 29], \"envelopes\": [{ \"target\": \"pitchShift\", \"envelope\": \"twang 1\" }, { \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 1\" }], \"isDrum\": false } },\n            { name: \"stationary harmonics\", generalMidi: false, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 353.55, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 353.55, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.5 }], \"effects\": [\"panning\", \"transition type\", \"chord type\", \"vibrato\"], \"transition\": \"continue\", \"clicklessTransition\": false, \"chord\": \"simultaneous\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"vibrato\": \"shaky\", \"vibratoDepth\": 0.1, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 1, \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"harmonics\": [100, 0, 57, 29, 14, 57, 29, 29, 14, 14, 29, 43, 14, 14, 14, 0, 14, 29, 29, 14, 0, 0, 14, 0, 0, 29, 14, 14], \"unison\": \"stationary\", \"envelopes\": [], \"isDrum\": false } },\n            { name: \"dead souls\", generalMidi: false, settings: { \"type\": \"spectrum\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.1768 }, { \"type\": \"high-pass\", \"cutoffHz\": 353.55, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 1.4142 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": true, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.1768 }, { \"type\": \"high-pass\", \"cutoffHz\": 353.55, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 1.4142 }], \"effects\": [\"panning\", \"transition type\", \"chord type\", \"pitch shift\", \"detune\", \"distortion\", \"chorus\", \"reverb\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"chord\": \"arpeggio\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"pitchShiftSemitones\": 24, \"detuneCents\": -200, \"distortion\": 100, \"aliases\": false, \"pan\": 0, \"panDelay\": 10, \"chorus\": 14, \"reverb\": 35, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"spectrum\": [100, 71, 43, 43, 29, 29, 29, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 14, 14, 0, 0], \"unison\": \"none\", \"envelopes\": [{ \"target\": \"pitchShift\", \"envelope\": \"random\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 24, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1.2, \"steps\": 16, \"seed\": 37, \"waveform\": 0 }, { \"target\": \"noteVolume\", \"envelope\": \"note size\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"steps\": 2, \"seed\": 2, \"waveform\": 0 }, { \"target\": \"detune\", \"envelope\": \"note size\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": true, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"steps\": 2, \"seed\": 2, \"waveform\": 0 }, { \"target\": \"distortion\", \"envelope\": \"note size\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"steps\": 2, \"seed\": 2, \"waveform\": 0 }], \"isDrum\": false } },\n            { name: \"flutter\", generalMidi: false, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 707.11, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 6727.17, \"linearGain\": 2.8284 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 707.11, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 6727.17, \"linearGain\": 2.8284 }], \"effects\": [\"panning\", \"transition type\", \"chorus\", \"reverb\", \"ring mod\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"ringMod\": 100, \"ringModHz\": 100, \"ringModWaveformIndex\": 0, \"pan\": 0, \"panDelay\": 0, \"chorus\": 14, \"reverb\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"algorithm\": \"1←3 2←4\", \"feedbackType\": \"1⟲\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"1×\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 10, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1×\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"ringModulationHz\", \"envelope\": \"fall\", \"inverse\": false, \"perEnvelopeSpeed\": 1.5, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1.9 }, { \"target\": \"noteVolume\", \"envelope\": \"blip\", \"inverse\": false, \"perEnvelopeSpeed\": 0.25, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n            { name: \"vinyl\", generalMidi: false, settings: { \"type\": \"noise\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 1414.21, \"linearGain\": 0.3536 }, { \"type\": \"low-pass\", \"cutoffHz\": 1189.21, \"linearGain\": 0.25 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 1414.21, \"linearGain\": 0.3536 }, { \"type\": \"low-pass\", \"cutoffHz\": 1189.21, \"linearGain\": 0.25 }], \"effects\": [\"panning\", \"transition type\", \"note filter\", \"distortion\", \"bitcrusher\", \"chorus\", \"echo\", \"reverb\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 0.5 }, { \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 1 }], \"noteSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 0.5 }, { \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 1 }], \"distortion\": 14, \"aliases\": false, \"bitcrusherOctave\": 5.5, \"bitcrusherQuantization\": 14, \"pan\": 0, \"panDelay\": 10, \"chorus\": 29, \"echoSustain\": 14, \"echoDelayBeats\": 0.083, \"reverb\": 32, \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"wave\": \"crackling\", \"unison\": \"none\", \"envelopes\": [], \"isDrum\": false } },\n        ])\n    }\n]);\n//# sourceMappingURL=EditorConfig.js.map","export class Channel {\n    constructor() {\n        this.octave = 0;\n        this.instruments = [];\n        this.patterns = [];\n        this.bars = [];\n        this.muted = false;\n        this.visible = true;\n        this.name = \"\";\n        this.color = 0;\n    }\n}\n//# sourceMappingURL=Channel.js.map","export class FilterCoefficients {\n    constructor() {\n        this.a = [1.0];\n        this.b = [1.0];\n        this.order = 0;\n    }\n    linearGain0thOrder(linearGain) {\n        this.b[0] = linearGain;\n        this.order = 0;\n    }\n    lowPass1stOrderButterworth(cornerRadiansPerSample) {\n        const g = 1.0 / Math.tan(cornerRadiansPerSample * 0.5);\n        const a0 = 1.0 + g;\n        this.a[1] = (1.0 - g) / a0;\n        this.b[1] = this.b[0] = 1 / a0;\n        this.order = 1;\n    }\n    lowPass1stOrderSimplified(cornerRadiansPerSample) {\n        const g = 2.0 * Math.sin(cornerRadiansPerSample * 0.5);\n        this.a[1] = g - 1.0;\n        this.b[0] = g;\n        this.b[1] = 0.0;\n        this.order = 1;\n    }\n    highPass1stOrderButterworth(cornerRadiansPerSample) {\n        const g = 1.0 / Math.tan(cornerRadiansPerSample * 0.5);\n        const a0 = 1.0 + g;\n        this.a[1] = (1.0 - g) / a0;\n        this.b[0] = g / a0;\n        this.b[1] = -g / a0;\n        this.order = 1;\n    }\n    highShelf1stOrder(cornerRadiansPerSample, shelfLinearGain) {\n        const tan = Math.tan(cornerRadiansPerSample * 0.5);\n        const sqrtGain = Math.sqrt(shelfLinearGain);\n        const g = (tan * sqrtGain - 1) / (tan * sqrtGain + 1.0);\n        const a0 = 1.0;\n        this.a[1] = g / a0;\n        this.b[0] = (1.0 + g + shelfLinearGain * (1.0 - g)) / (2.0 * a0);\n        this.b[1] = (1.0 + g - shelfLinearGain * (1.0 - g)) / (2.0 * a0);\n        this.order = 1;\n    }\n    allPass1stOrderInvertPhaseAbove(cornerRadiansPerSample) {\n        const g = (Math.sin(cornerRadiansPerSample) - 1.0) / Math.cos(cornerRadiansPerSample);\n        this.a[1] = g;\n        this.b[0] = g;\n        this.b[1] = 1.0;\n        this.order = 1;\n    }\n    allPass1stOrderFractionalDelay(delay) {\n        const g = (1.0 - delay) / (1.0 + delay);\n        this.a[1] = g;\n        this.b[0] = g;\n        this.b[1] = 1.0;\n        this.order = 1;\n    }\n    lowPass2ndOrderButterworth(cornerRadiansPerSample, peakLinearGain) {\n        const alpha = Math.sin(cornerRadiansPerSample) / (2.0 * peakLinearGain);\n        const cos = Math.cos(cornerRadiansPerSample);\n        const a0 = 1.0 + alpha;\n        this.a[1] = -2.0 * cos / a0;\n        this.a[2] = (1 - alpha) / a0;\n        this.b[2] = this.b[0] = (1 - cos) / (2.0 * a0);\n        this.b[1] = (1 - cos) / a0;\n        this.order = 2;\n    }\n    lowPass2ndOrderSimplified(cornerRadiansPerSample, peakLinearGain) {\n        const g = 2.0 * Math.sin(cornerRadiansPerSample / 2.0);\n        const filterResonance = 1.0 - 1.0 / (2.0 * peakLinearGain);\n        const feedback = filterResonance + filterResonance / (1.0 - g);\n        this.a[1] = 2.0 * g + (g - 1.0) * g * feedback - 2.0;\n        this.a[2] = (g - 1.0) * (g - g * feedback - 1.0);\n        this.b[0] = g * g;\n        this.b[1] = 0;\n        this.b[2] = 0;\n        this.order = 2;\n    }\n    highPass2ndOrderButterworth(cornerRadiansPerSample, peakLinearGain) {\n        const alpha = Math.sin(cornerRadiansPerSample) / (2 * peakLinearGain);\n        const cos = Math.cos(cornerRadiansPerSample);\n        const a0 = 1.0 + alpha;\n        this.a[1] = -2.0 * cos / a0;\n        this.a[2] = (1.0 - alpha) / a0;\n        this.b[2] = this.b[0] = (1.0 + cos) / (2.0 * a0);\n        this.b[1] = -(1.0 + cos) / a0;\n        this.order = 2;\n    }\n    highShelf2ndOrder(cornerRadiansPerSample, shelfLinearGain, slope) {\n        const A = Math.sqrt(shelfLinearGain);\n        const c = Math.cos(cornerRadiansPerSample);\n        const Aplus = A + 1.0;\n        const Aminus = A - 1.0;\n        const alpha = Math.sin(cornerRadiansPerSample) * 0.5 * Math.sqrt((Aplus / A) * (1.0 / slope - 1.0) + 2.0);\n        const sqrtA2Alpha = 2.0 * Math.sqrt(A) * alpha;\n        const a0 = (Aplus - Aminus * c + sqrtA2Alpha);\n        this.a[1] = 2 * (Aminus - Aplus * c) / a0;\n        this.a[2] = (Aplus - Aminus * c - sqrtA2Alpha) / a0;\n        this.b[0] = A * (Aplus + Aminus * c + sqrtA2Alpha) / a0;\n        this.b[1] = -2 * A * (Aminus + Aplus * c) / a0;\n        this.b[2] = A * (Aplus + Aminus * c - sqrtA2Alpha) / a0;\n        this.order = 2;\n    }\n    peak2ndOrder(cornerRadiansPerSample, peakLinearGain, bandWidthScale) {\n        const sqrtGain = Math.sqrt(peakLinearGain);\n        const bandWidth = bandWidthScale * cornerRadiansPerSample / (sqrtGain >= 1 ? sqrtGain : 1 / sqrtGain);\n        const alpha = Math.tan(bandWidth * 0.5);\n        const a0 = 1.0 + alpha / sqrtGain;\n        this.b[0] = (1.0 + alpha * sqrtGain) / a0;\n        this.b[1] = this.a[1] = -2.0 * Math.cos(cornerRadiansPerSample) / a0;\n        this.b[2] = (1.0 - alpha * sqrtGain) / a0;\n        this.a[2] = (1.0 - alpha / sqrtGain) / a0;\n        this.order = 2;\n    }\n}\nexport class FrequencyResponse {\n    constructor() {\n        this.real = 0.0;\n        this.imag = 0.0;\n        this.denom = 1.0;\n    }\n    analyze(filter, radiansPerSample) {\n        this.analyzeComplex(filter, Math.cos(radiansPerSample), Math.sin(radiansPerSample));\n    }\n    analyzeComplex(filter, real, imag) {\n        const a = filter.a;\n        const b = filter.b;\n        const realZ1 = real;\n        const imagZ1 = -imag;\n        let realNum = b[0] + b[1] * realZ1;\n        let imagNum = b[1] * imagZ1;\n        let realDenom = 1.0 + a[1] * realZ1;\n        let imagDenom = a[1] * imagZ1;\n        let realZ = realZ1;\n        let imagZ = imagZ1;\n        for (let i = 2; i <= filter.order; i++) {\n            const realTemp = realZ * realZ1 - imagZ * imagZ1;\n            const imagTemp = realZ * imagZ1 + imagZ * realZ1;\n            realZ = realTemp;\n            imagZ = imagTemp;\n            realNum += b[i] * realZ;\n            imagNum += b[i] * imagZ;\n            realDenom += a[i] * realZ;\n            imagDenom += a[i] * imagZ;\n        }\n        this.denom = realDenom * realDenom + imagDenom * imagDenom;\n        this.real = realNum * realDenom + imagNum * imagDenom;\n        this.imag = imagNum * realDenom - realNum * imagDenom;\n    }\n    magnitude() {\n        return Math.sqrt(this.real * this.real + this.imag * this.imag) / this.denom;\n    }\n    angle() {\n        return Math.atan2(this.imag, this.real);\n    }\n}\nexport class DynamicBiquadFilter {\n    constructor() {\n        this.a1 = 0.0;\n        this.a2 = 0.0;\n        this.b0 = 1.0;\n        this.b1 = 0.0;\n        this.b2 = 0.0;\n        this.a1Delta = 0.0;\n        this.a2Delta = 0.0;\n        this.b0Delta = 0.0;\n        this.b1Delta = 0.0;\n        this.b2Delta = 0.0;\n        this.output1 = 0.0;\n        this.output2 = 0.0;\n        this.useMultiplicativeInputCoefficients = false;\n    }\n    resetOutput() {\n        this.output1 = 0.0;\n        this.output2 = 0.0;\n    }\n    loadCoefficientsWithGradient(start, end, deltaRate, useMultiplicativeInputCoefficients) {\n        if (start.order != 2 || end.order != 2)\n            throw new Error();\n        this.a1 = start.a[1];\n        this.a2 = start.a[2];\n        this.b0 = start.b[0];\n        this.b1 = start.b[1];\n        this.b2 = start.b[2];\n        this.a1Delta = (end.a[1] - start.a[1]) * deltaRate;\n        this.a2Delta = (end.a[2] - start.a[2]) * deltaRate;\n        if (useMultiplicativeInputCoefficients) {\n            this.b0Delta = Math.pow(end.b[0] / start.b[0], deltaRate);\n            this.b1Delta = Math.pow(end.b[1] / start.b[1], deltaRate);\n            this.b2Delta = Math.pow(end.b[2] / start.b[2], deltaRate);\n        }\n        else {\n            this.b0Delta = (end.b[0] - start.b[0]) * deltaRate;\n            this.b1Delta = (end.b[1] - start.b[1]) * deltaRate;\n            this.b2Delta = (end.b[2] - start.b[2]) * deltaRate;\n        }\n        this.useMultiplicativeInputCoefficients = useMultiplicativeInputCoefficients;\n    }\n}\nexport function warpNyquistToInfinity(radians) {\n    return 2.0 * Math.tan(radians * 0.5);\n}\nexport function warpInfinityToNyquist(radians) {\n    return 2.0 * Math.atan(radians * 0.5);\n}\n//# sourceMappingURL=filtering.js.map","import { Config } from \"./SynthConfig\";\nimport { FilterCoefficients, FrequencyResponse } from \"./filtering\";\nexport class FilterSettings {\n    constructor() {\n        this.controlPoints = [];\n        this.controlPointCount = 0;\n        this.reset();\n    }\n    reset() {\n        this.controlPointCount = 0;\n    }\n    addPoint(type, freqSetting, gainSetting) {\n        let controlPoint;\n        if (this.controlPoints.length <= this.controlPointCount) {\n            controlPoint = new FilterControlPoint();\n            this.controlPoints[this.controlPointCount] = controlPoint;\n        }\n        else {\n            controlPoint = this.controlPoints[this.controlPointCount];\n        }\n        this.controlPointCount++;\n        controlPoint.type = type;\n        controlPoint.set(freqSetting, gainSetting);\n    }\n    toJsonObject() {\n        const filterArray = [];\n        for (let i = 0; i < this.controlPointCount; i++) {\n            const point = this.controlPoints[i];\n            filterArray.push({\n                \"type\": Config.filterTypeNames[point.type],\n                \"cutoffHz\": Math.round(point.getHz() * 100) / 100,\n                \"linearGain\": Math.round(point.getLinearGain() * 10000) / 10000,\n            });\n        }\n        return filterArray;\n    }\n    fromJsonObject(filterObject) {\n        this.controlPoints.length = 0;\n        if (filterObject) {\n            for (const pointObject of filterObject) {\n                const point = new FilterControlPoint();\n                point.type = Config.filterTypeNames.indexOf(pointObject[\"type\"]);\n                if (point.type == -1)\n                    point.type = 2;\n                if (pointObject[\"cutoffHz\"] != undefined) {\n                    point.freq = FilterControlPoint.getRoundedSettingValueFromHz(pointObject[\"cutoffHz\"]);\n                }\n                else {\n                    point.freq = 0;\n                }\n                if (pointObject[\"linearGain\"] != undefined) {\n                    point.gain = FilterControlPoint.getRoundedSettingValueFromLinearGain(pointObject[\"linearGain\"]);\n                }\n                else {\n                    point.gain = Config.filterGainCenter;\n                }\n                this.controlPoints.push(point);\n            }\n        }\n        this.controlPointCount = this.controlPoints.length;\n    }\n    static filtersCanMorph(filterA, filterB) {\n        if (filterA.controlPointCount != filterB.controlPointCount)\n            return false;\n        for (let i = 0; i < filterA.controlPointCount; i++) {\n            if (filterA.controlPoints[i].type != filterB.controlPoints[i].type)\n                return false;\n        }\n        return true;\n    }\n    static lerpFilters(filterA, filterB, pos) {\n        let lerpedFilter = new FilterSettings();\n        if (filterA == null) {\n            return filterA;\n        }\n        if (filterB == null) {\n            return filterB;\n        }\n        pos = Math.max(0, Math.min(1, pos));\n        if (this.filtersCanMorph(filterA, filterB)) {\n            for (let i = 0; i < filterA.controlPointCount; i++) {\n                lerpedFilter.controlPoints[i] = new FilterControlPoint();\n                lerpedFilter.controlPoints[i].type = filterA.controlPoints[i].type;\n                lerpedFilter.controlPoints[i].freq = filterA.controlPoints[i].freq + (filterB.controlPoints[i].freq - filterA.controlPoints[i].freq) * pos;\n                lerpedFilter.controlPoints[i].gain = filterA.controlPoints[i].gain + (filterB.controlPoints[i].gain - filterA.controlPoints[i].gain) * pos;\n            }\n            lerpedFilter.controlPointCount = filterA.controlPointCount;\n            return lerpedFilter;\n        }\n        else {\n            return (pos >= 1) ? filterB : filterA;\n        }\n    }\n    convertLegacySettings(legacyCutoffSetting, legacyResonanceSetting, legacyEnv) {\n        this.reset();\n        const legacyFilterCutoffMaxHz = 8000;\n        const legacyFilterMax = 0.95;\n        const legacyFilterMaxRadians = Math.asin(legacyFilterMax / 2.0) * 2.0;\n        const legacyFilterMaxResonance = 0.95;\n        const legacyFilterCutoffRange = 11;\n        const legacyFilterResonanceRange = 8;\n        const resonant = (legacyResonanceSetting > 1);\n        const firstOrder = (legacyResonanceSetting == 0);\n        const cutoffAtMax = (legacyCutoffSetting == legacyFilterCutoffRange - 1);\n        const envDecays = (legacyEnv.type == 5 || legacyEnv.type == 6 || legacyEnv.type == 10 || legacyEnv.type == 1);\n        const standardSampleRate = 48000;\n        const legacyHz = legacyFilterCutoffMaxHz * Math.pow(2.0, (legacyCutoffSetting - (legacyFilterCutoffRange - 1)) * 0.5);\n        const legacyRadians = Math.min(legacyFilterMaxRadians, 2 * Math.PI * legacyHz / standardSampleRate);\n        if (legacyEnv.type == 0 && !resonant && cutoffAtMax) {\n        }\n        else if (firstOrder) {\n            const extraOctaves = 3.5;\n            const targetRadians = legacyRadians * Math.pow(2.0, extraOctaves);\n            const curvedRadians = targetRadians / (1.0 + targetRadians / Math.PI);\n            const curvedHz = standardSampleRate * curvedRadians / (2.0 * Math.PI);\n            const freqSetting = FilterControlPoint.getRoundedSettingValueFromHz(curvedHz);\n            const finalHz = FilterControlPoint.getHzFromSettingValue(freqSetting);\n            const finalRadians = 2.0 * Math.PI * finalHz / standardSampleRate;\n            const legacyFilter = new FilterCoefficients();\n            legacyFilter.lowPass1stOrderSimplified(legacyRadians);\n            const response = new FrequencyResponse();\n            response.analyze(legacyFilter, finalRadians);\n            const legacyFilterGainAtNewRadians = response.magnitude();\n            let logGain = Math.log2(legacyFilterGainAtNewRadians);\n            logGain = -extraOctaves + (logGain + extraOctaves) * 0.82;\n            if (envDecays)\n                logGain = Math.min(logGain, -1.0);\n            const convertedGain = Math.pow(2.0, logGain);\n            const gainSetting = FilterControlPoint.getRoundedSettingValueFromLinearGain(convertedGain);\n            this.addPoint(0, freqSetting, gainSetting);\n        }\n        else {\n            const intendedGain = 0.5 / (1.0 - legacyFilterMaxResonance * Math.sqrt(Math.max(0.0, legacyResonanceSetting - 1.0) / (legacyFilterResonanceRange - 2.0)));\n            const invertedGain = 0.5 / intendedGain;\n            const maxRadians = 2.0 * Math.PI * legacyFilterCutoffMaxHz / standardSampleRate;\n            const freqRatio = legacyRadians / maxRadians;\n            const targetRadians = legacyRadians * (freqRatio * Math.pow(invertedGain, 0.9) + 1.0);\n            const curvedRadians = legacyRadians + (targetRadians - legacyRadians) * invertedGain;\n            let curvedHz;\n            if (envDecays) {\n                curvedHz = standardSampleRate * Math.min(curvedRadians, legacyRadians * Math.pow(2, 0.25)) / (2.0 * Math.PI);\n            }\n            else {\n                curvedHz = standardSampleRate * curvedRadians / (2.0 * Math.PI);\n            }\n            const freqSetting = FilterControlPoint.getRoundedSettingValueFromHz(curvedHz);\n            let legacyFilterGain;\n            if (envDecays) {\n                legacyFilterGain = intendedGain;\n            }\n            else {\n                const legacyFilter = new FilterCoefficients();\n                legacyFilter.lowPass2ndOrderSimplified(legacyRadians, intendedGain);\n                const response = new FrequencyResponse();\n                response.analyze(legacyFilter, curvedRadians);\n                legacyFilterGain = response.magnitude();\n            }\n            if (!resonant)\n                legacyFilterGain = Math.min(legacyFilterGain, Math.sqrt(0.5));\n            const gainSetting = FilterControlPoint.getRoundedSettingValueFromLinearGain(legacyFilterGain);\n            this.addPoint(0, freqSetting, gainSetting);\n        }\n        this.controlPoints.length = this.controlPointCount;\n    }\n    convertLegacySettingsForSynth(legacyCutoffSetting, legacyResonanceSetting, allowFirstOrder = false) {\n        this.reset();\n        const legacyFilterCutoffMaxHz = 8000;\n        const legacyFilterMax = 0.95;\n        const legacyFilterMaxRadians = Math.asin(legacyFilterMax / 2.0) * 2.0;\n        const legacyFilterMaxResonance = 0.95;\n        const legacyFilterCutoffRange = 11;\n        const legacyFilterResonanceRange = 8;\n        const firstOrder = (legacyResonanceSetting == 0 && allowFirstOrder);\n        const standardSampleRate = 48000;\n        const legacyHz = legacyFilterCutoffMaxHz * Math.pow(2.0, (legacyCutoffSetting - (legacyFilterCutoffRange - 1)) * 0.5);\n        const legacyRadians = Math.min(legacyFilterMaxRadians, 2 * Math.PI * legacyHz / standardSampleRate);\n        if (firstOrder) {\n            const extraOctaves = 3.5;\n            const targetRadians = legacyRadians * Math.pow(2.0, extraOctaves);\n            const curvedRadians = targetRadians / (1.0 + targetRadians / Math.PI);\n            const curvedHz = standardSampleRate * curvedRadians / (2.0 * Math.PI);\n            const freqSetting = FilterControlPoint.getRoundedSettingValueFromHz(curvedHz);\n            const finalHz = FilterControlPoint.getHzFromSettingValue(freqSetting);\n            const finalRadians = 2.0 * Math.PI * finalHz / standardSampleRate;\n            const legacyFilter = new FilterCoefficients();\n            legacyFilter.lowPass1stOrderSimplified(legacyRadians);\n            const response = new FrequencyResponse();\n            response.analyze(legacyFilter, finalRadians);\n            const legacyFilterGainAtNewRadians = response.magnitude();\n            let logGain = Math.log2(legacyFilterGainAtNewRadians);\n            logGain = -extraOctaves + (logGain + extraOctaves) * 0.82;\n            const convertedGain = Math.pow(2.0, logGain);\n            const gainSetting = FilterControlPoint.getRoundedSettingValueFromLinearGain(convertedGain);\n            this.addPoint(0, freqSetting, gainSetting);\n        }\n        else {\n            const intendedGain = 0.5 / (1.0 - legacyFilterMaxResonance * Math.sqrt(Math.max(0.0, legacyResonanceSetting - 1.0) / (legacyFilterResonanceRange - 2.0)));\n            const invertedGain = 0.5 / intendedGain;\n            const maxRadians = 2.0 * Math.PI * legacyFilterCutoffMaxHz / standardSampleRate;\n            const freqRatio = legacyRadians / maxRadians;\n            const targetRadians = legacyRadians * (freqRatio * Math.pow(invertedGain, 0.9) + 1.0);\n            const curvedRadians = legacyRadians + (targetRadians - legacyRadians) * invertedGain;\n            let curvedHz;\n            curvedHz = standardSampleRate * curvedRadians / (2.0 * Math.PI);\n            const freqSetting = FilterControlPoint.getSettingValueFromHz(curvedHz);\n            let legacyFilterGain;\n            const legacyFilter = new FilterCoefficients();\n            legacyFilter.lowPass2ndOrderSimplified(legacyRadians, intendedGain);\n            const response = new FrequencyResponse();\n            response.analyze(legacyFilter, curvedRadians);\n            legacyFilterGain = response.magnitude();\n            const gainSetting = FilterControlPoint.getRoundedSettingValueFromLinearGain(legacyFilterGain);\n            this.addPoint(0, freqSetting, gainSetting);\n        }\n    }\n}\nexport class FilterControlPoint {\n    constructor() {\n        this.freq = 0;\n        this.gain = Config.filterGainCenter;\n        this.type = 2;\n    }\n    set(freqSetting, gainSetting) {\n        this.freq = freqSetting;\n        this.gain = gainSetting;\n    }\n    getHz() {\n        return FilterControlPoint.getHzFromSettingValue(this.freq);\n    }\n    static getHzFromSettingValue(value) {\n        return Config.filterFreqReferenceHz * Math.pow(2.0, (value - Config.filterFreqReferenceSetting) * Config.filterFreqStep);\n    }\n    static getSettingValueFromHz(hz) {\n        return Math.log2(hz / Config.filterFreqReferenceHz) / Config.filterFreqStep + Config.filterFreqReferenceSetting;\n    }\n    static getRoundedSettingValueFromHz(hz) {\n        return Math.max(0, Math.min(Config.filterFreqRange - 1, Math.round(FilterControlPoint.getSettingValueFromHz(hz))));\n    }\n    getLinearGain(peakMult = 1.0) {\n        const power = (this.gain - Config.filterGainCenter) * Config.filterGainStep;\n        const neutral = (this.type == 2) ? 0.0 : -0.5;\n        const interpolatedPower = neutral + (power - neutral) * peakMult;\n        return Math.pow(2.0, interpolatedPower);\n    }\n    static getRoundedSettingValueFromLinearGain(linearGain) {\n        return Math.max(0, Math.min(Config.filterGainRange - 1, Math.round(Math.log2(linearGain) / Config.filterGainStep + Config.filterGainCenter)));\n    }\n    toCoefficients(filter, sampleRate, freqMult = 1.0, peakMult = 1.0) {\n        const cornerRadiansPerSample = 2.0 * Math.PI * Math.max(Config.filterFreqMinHz, Math.min(Config.filterFreqMaxHz, freqMult * this.getHz())) / sampleRate;\n        const linearGain = this.getLinearGain(peakMult);\n        switch (this.type) {\n            case 0:\n                filter.lowPass2ndOrderButterworth(cornerRadiansPerSample, linearGain);\n                break;\n            case 1:\n                filter.highPass2ndOrderButterworth(cornerRadiansPerSample, linearGain);\n                break;\n            case 2:\n                filter.peak2ndOrder(cornerRadiansPerSample, linearGain, 1.0);\n                break;\n            default:\n                throw new Error();\n        }\n    }\n    getVolumeCompensationMult() {\n        const octave = (this.freq - Config.filterFreqReferenceSetting) * Config.filterFreqStep;\n        const gainPow = (this.gain - Config.filterGainCenter) * Config.filterGainStep;\n        switch (this.type) {\n            case 0:\n                const freqRelativeTo8khz = Math.pow(2.0, octave) * Config.filterFreqReferenceHz / 8000.0;\n                const warpedFreq = (Math.sqrt(1.0 + 4.0 * freqRelativeTo8khz) - 1.0) / 2.0;\n                const warpedOctave = Math.log2(warpedFreq);\n                return Math.pow(0.5, 0.2 * Math.max(0.0, gainPow + 1.0) + Math.min(0.0, Math.max(-3.0, 0.595 * warpedOctave + 0.35 * Math.min(0.0, gainPow + 1.0))));\n            case 1:\n                return Math.pow(0.5, 0.125 * Math.max(0.0, gainPow + 1.0) + Math.min(0.0, 0.3 * (-octave - Math.log2(Config.filterFreqReferenceHz / 125.0)) + 0.2 * Math.min(0.0, gainPow + 1.0)));\n            case 2:\n                const distanceFromCenter = octave + Math.log2(Config.filterFreqReferenceHz / 2000.0);\n                const freqLoudness = Math.pow(1.0 / (1.0 + Math.pow(distanceFromCenter / 3.0, 2.0)), 2.0);\n                return Math.pow(0.5, 0.125 * Math.max(0.0, gainPow) + 0.1 * freqLoudness * Math.min(0.0, gainPow));\n            default:\n                throw new Error();\n        }\n    }\n}\n//# sourceMappingURL=Filter.js.map","import { Config } from \"./SynthConfig\";\nexport function clamp(min, max, val) {\n    max = max - 1;\n    if (val <= max) {\n        if (val >= min)\n            return val;\n        else\n            return min;\n    }\n    else {\n        return max;\n    }\n}\nexport function validateRange(min, max, val) {\n    if (min <= val && val <= max)\n        return val;\n    throw new Error(`Value ${val} not in range [${min}, ${max}]`);\n}\nexport function parseFloatWithDefault(s, defaultValue) {\n    let result = parseFloat(s);\n    if (Number.isNaN(result))\n        result = defaultValue;\n    return result;\n}\nexport function parseIntWithDefault(s, defaultValue) {\n    let result = parseInt(s);\n    if (Number.isNaN(result))\n        result = defaultValue;\n    return result;\n}\nexport function fadeInSettingToSeconds(setting) {\n    return 0.0125 * (0.95 * setting + 0.05 * setting * setting);\n}\nexport function secondsToFadeInSetting(seconds) {\n    return clamp(0, Config.fadeInRange, Math.round((-0.95 + Math.sqrt(0.9025 + 0.2 * seconds / 0.0125)) / 0.1));\n}\nexport function fadeOutSettingToTicks(setting) {\n    return Config.fadeOutTicks[setting];\n}\nexport function ticksToFadeOutSetting(ticks) {\n    let lower = Config.fadeOutTicks[0];\n    if (ticks <= lower)\n        return 0;\n    for (let i = 1; i < Config.fadeOutTicks.length; i++) {\n        let upper = Config.fadeOutTicks[i];\n        if (ticks <= upper)\n            return (ticks < (lower + upper) / 2) ? i - 1 : i;\n        lower = upper;\n    }\n    return Config.fadeOutTicks.length - 1;\n}\nexport function detuneToCents(detune) {\n    return detune - Config.detuneCenter;\n}\nexport function centsToDetune(cents) {\n    return cents + Config.detuneCenter;\n}\nexport function fittingPowerOfTwo(x) {\n    return 1 << (32 - Math.clz32(Math.ceil(x) - 1));\n}\n//# sourceMappingURL=utils.js.map","import { Config } from \"./SynthConfig\";\nimport { clamp } from \"./utils\";\nexport class EnvelopeSettings {\n    constructor(isNoiseEnvelope) {\n        this.isNoiseEnvelope = isNoiseEnvelope;\n        this.target = 0;\n        this.index = 0;\n        this.envelope = 0;\n        this.perEnvelopeSpeed = Config.envelopes[this.envelope].speed;\n        this.perEnvelopeLowerBound = 0;\n        this.perEnvelopeUpperBound = 1;\n        this.tempEnvelopeSpeed = null;\n        this.tempEnvelopeLowerBound = null;\n        this.tempEnvelopeUpperBound = null;\n        this.steps = 2;\n        this.seed = 2;\n        this.waveform = 0;\n        this.discrete = false;\n        this.reset();\n    }\n    reset() {\n        this.target = 0;\n        this.index = 0;\n        this.envelope = 0;\n        this.pitchEnvelopeStart = 0;\n        this.pitchEnvelopeEnd = this.isNoiseEnvelope ? Config.drumCount - 1 : Config.maxPitch;\n        this.inverse = false;\n        this.isNoiseEnvelope = false;\n        this.perEnvelopeSpeed = Config.envelopes[this.envelope].speed;\n        this.perEnvelopeLowerBound = 0;\n        this.perEnvelopeUpperBound = 1;\n        this.tempEnvelopeSpeed = null;\n        this.tempEnvelopeLowerBound = null;\n        this.tempEnvelopeUpperBound = null;\n        this.steps = 2;\n        this.seed = 2;\n        this.waveform = 0;\n        this.discrete = false;\n    }\n    toJsonObject() {\n        const envelopeObject = {\n            \"target\": Config.instrumentAutomationTargets[this.target].name,\n            \"envelope\": Config.newEnvelopes[this.envelope].name,\n            \"inverse\": this.inverse,\n            \"perEnvelopeSpeed\": this.perEnvelopeSpeed,\n            \"perEnvelopeLowerBound\": this.perEnvelopeLowerBound,\n            \"perEnvelopeUpperBound\": this.perEnvelopeUpperBound,\n            \"discrete\": this.discrete,\n        };\n        if (Config.instrumentAutomationTargets[this.target].maxCount > 1) {\n            envelopeObject[\"index\"] = this.index;\n        }\n        if (Config.newEnvelopes[this.envelope].name == \"pitch\") {\n            envelopeObject[\"pitchEnvelopeStart\"] = this.pitchEnvelopeStart;\n            envelopeObject[\"pitchEnvelopeEnd\"] = this.pitchEnvelopeEnd;\n        }\n        else if (Config.newEnvelopes[this.envelope].name == \"random\") {\n            envelopeObject[\"steps\"] = this.steps;\n            envelopeObject[\"seed\"] = this.seed;\n            envelopeObject[\"waveform\"] = this.waveform;\n        }\n        else if (Config.newEnvelopes[this.envelope].name == \"lfo\") {\n            envelopeObject[\"waveform\"] = this.waveform;\n            envelopeObject[\"steps\"] = this.steps;\n        }\n        return envelopeObject;\n    }\n    fromJsonObject(envelopeObject, format) {\n        this.reset();\n        let target = Config.instrumentAutomationTargets.dictionary[envelopeObject[\"target\"]];\n        if (target == null)\n            target = Config.instrumentAutomationTargets.dictionary[\"noteVolume\"];\n        this.target = target.index;\n        let envelope = Config.envelopes.dictionary[\"none\"];\n        let isTremolo2 = false;\n        if (format == \"slarmoosbox\") {\n            if (envelopeObject[\"envelope\"] == \"tremolo2\") {\n                envelope = Config.newEnvelopes[8];\n                isTremolo2 = true;\n            }\n            else if (envelopeObject[\"envelope\"] == \"tremolo\") {\n                envelope = Config.newEnvelopes[8];\n                isTremolo2 = false;\n            }\n            else {\n                envelope = Config.newEnvelopes.dictionary[envelopeObject[\"envelope\"]];\n            }\n        }\n        else {\n            if (Config.envelopes.dictionary[envelopeObject[\"envelope\"]].type == 9) {\n                envelope = Config.newEnvelopes[8];\n                isTremolo2 = true;\n            }\n            else if (Config.newEnvelopes[Math.max(Config.envelopes.dictionary[envelopeObject[\"envelope\"]].type - 1, 0)].index > 8) {\n                envelope = Config.newEnvelopes[Config.envelopes.dictionary[envelopeObject[\"envelope\"]].type - 1];\n            }\n            else {\n                envelope = Config.newEnvelopes[Config.envelopes.dictionary[envelopeObject[\"envelope\"]].type];\n            }\n        }\n        if (envelope == undefined) {\n            if (Config.envelopes.dictionary[envelopeObject[\"envelope\"]].type == 9) {\n                envelope = Config.newEnvelopes[8];\n                isTremolo2 = true;\n            }\n            else if (Config.newEnvelopes[Math.max(Config.envelopes.dictionary[envelopeObject[\"envelope\"]].type - 1, 0)].index > 8) {\n                envelope = Config.newEnvelopes[Config.envelopes.dictionary[envelopeObject[\"envelope\"]].type - 1];\n            }\n            else {\n                envelope = Config.newEnvelopes[Config.envelopes.dictionary[envelopeObject[\"envelope\"]].type];\n            }\n        }\n        if (envelope == null)\n            envelope = Config.envelopes.dictionary[\"none\"];\n        this.envelope = envelope.index;\n        if (envelopeObject[\"index\"] != undefined) {\n            this.index = clamp(0, Config.instrumentAutomationTargets[this.target].maxCount, envelopeObject[\"index\"] | 0);\n        }\n        else {\n            this.index = 0;\n        }\n        if (envelopeObject[\"pitchEnvelopeStart\"] != undefined) {\n            this.pitchEnvelopeStart = clamp(0, this.isNoiseEnvelope ? Config.drumCount : Config.maxPitch + 1, envelopeObject[\"pitchEnvelopeStart\"]);\n        }\n        else {\n            this.pitchEnvelopeStart = 0;\n        }\n        if (envelopeObject[\"pitchEnvelopeEnd\"] != undefined) {\n            this.pitchEnvelopeEnd = clamp(0, this.isNoiseEnvelope ? Config.drumCount : Config.maxPitch + 1, envelopeObject[\"pitchEnvelopeEnd\"]);\n        }\n        else {\n            this.pitchEnvelopeEnd = this.isNoiseEnvelope ? Config.drumCount : Config.maxPitch;\n        }\n        this.inverse = Boolean(envelopeObject[\"inverse\"]);\n        if (envelopeObject[\"perEnvelopeSpeed\"] != undefined) {\n            this.perEnvelopeSpeed = envelopeObject[\"perEnvelopeSpeed\"];\n        }\n        else {\n            this.perEnvelopeSpeed = Config.envelopes.dictionary[envelopeObject[\"envelope\"]].speed;\n        }\n        if (envelopeObject[\"perEnvelopeLowerBound\"] != undefined) {\n            this.perEnvelopeLowerBound = clamp(Config.perEnvelopeBoundMin, Config.perEnvelopeBoundMax + 1, envelopeObject[\"perEnvelopeLowerBound\"]);\n        }\n        else {\n            this.perEnvelopeLowerBound = 0;\n        }\n        if (envelopeObject[\"perEnvelopeUpperBound\"] != undefined) {\n            this.perEnvelopeUpperBound = clamp(Config.perEnvelopeBoundMin, Config.perEnvelopeBoundMax + 1, envelopeObject[\"perEnvelopeUpperBound\"]);\n        }\n        else {\n            this.perEnvelopeUpperBound = 1;\n        }\n        if (isTremolo2) {\n            if (this.inverse) {\n                this.perEnvelopeUpperBound = Math.floor((this.perEnvelopeUpperBound / 2) * 10) / 10;\n                this.perEnvelopeLowerBound = Math.floor((this.perEnvelopeLowerBound / 2) * 10) / 10;\n            }\n            else {\n                this.perEnvelopeUpperBound = Math.floor((0.5 + (this.perEnvelopeUpperBound - this.perEnvelopeLowerBound) / 2) * 10) / 10;\n                this.perEnvelopeLowerBound = 0.5;\n            }\n        }\n        if (envelopeObject[\"steps\"] != undefined) {\n            this.steps = clamp(1, Config.randomEnvelopeStepsMax + 1, envelopeObject[\"steps\"]);\n        }\n        else {\n            this.steps = 2;\n        }\n        if (envelopeObject[\"seed\"] != undefined) {\n            this.seed = clamp(1, Config.randomEnvelopeSeedMax + 1, envelopeObject[\"seed\"]);\n        }\n        else {\n            this.seed = 2;\n        }\n        if (envelopeObject[\"waveform\"] != undefined) {\n            this.waveform = envelopeObject[\"waveform\"];\n        }\n        else {\n            this.waveform = 0;\n        }\n        if (envelopeObject[\"discrete\"] != undefined) {\n            this.discrete = envelopeObject[\"discrete\"];\n        }\n        else {\n            this.discrete = false;\n        }\n    }\n}\n//# sourceMappingURL=Envelope.js.map","import { Config } from \"./SynthConfig\";\nimport { FilterSettings } from \"./Filter\";\nexport class Effect {\n    constructor(type) {\n        this.type = 0;\n        this.wetDryMix = 0.5;\n        this.send = 1;\n        this.eqFilter = new FilterSettings();\n        this.eqFilterType = false;\n        this.eqFilterSimpleCut = Config.filterSimpleCutRange - 1;\n        this.eqFilterSimplePeak = 0;\n        this.eqSubFilters = [];\n        this.gain = Config.volumeRange / 2;\n        this.pan = Config.panCenter;\n        this.panDelay = 0;\n        this.panMode = 0;\n        this.aliases = false;\n        this.distortion = 0;\n        this.bitcrusherFreq = 0;\n        this.bitcrusherQuantization = 0;\n        this.ringModulation = Math.floor(Config.ringModRange / 2);\n        this.ringModulationHz = Math.floor(Config.ringModHzRange / 2);\n        this.ringModWaveformIndex = 0;\n        this.ringModPulseWidth = 0;\n        this.ringModHzOffset = 200;\n        this.granular = 4;\n        this.grainSize = (Config.grainSizeMax - Config.grainSizeMin) / Config.grainSizeStep;\n        this.grainAmounts = Config.grainAmountsMax;\n        this.grainRange = 40;\n        this.flanger = 0;\n        this.flangerSpeed = 0;\n        this.flangerDepth = 0;\n        this.flangerFeedback = 0;\n        this.chorus = 0;\n        this.reverb = 0;\n        this.echoSustain = 0;\n        this.echoDelay = 0;\n        this.echoPingPong = Config.panCenter;\n        this.type = type;\n    }\n}\n//# sourceMappingURL=Effect.js.map","import { toNameMap, Config, effectsIncludeTransition, effectsIncludeChord, effectsIncludePitchShift, effectsIncludeDetune, effectsIncludeVibrato } from \"./SynthConfig\";\nimport { FilterSettings } from \"./Filter\";\nimport { EnvelopeSettings } from \"./Envelope\";\nimport { Effect } from \"./Effect\";\nimport { clamp, fadeInSettingToSeconds, secondsToFadeInSetting, fadeOutSettingToTicks, ticksToFadeOutSetting, detuneToCents, centsToDetune, fittingPowerOfTwo } from \"./utils\";\nexport class Operator {\n    constructor(index) {\n        this.frequency = 4;\n        this.amplitude = 0;\n        this.waveform = 0;\n        this.pulseWidth = 0.5;\n        this.reset(index);\n    }\n    reset(index) {\n        this.frequency = 4;\n        this.amplitude = (index <= 1) ? Config.operatorAmplitudeMax : 0;\n        this.waveform = 0;\n        this.pulseWidth = 5;\n    }\n    copy(other) {\n        this.frequency = other.frequency;\n        this.amplitude = other.amplitude;\n        this.waveform = other.waveform;\n        this.pulseWidth = other.pulseWidth;\n    }\n}\nexport class CustomAlgorithm {\n    constructor() {\n        this.name = \"\";\n        this.carrierCount = 0;\n        this.modulatedBy = [[], [], [], [], [], []];\n        this.associatedCarrier = [];\n        this.fromPreset(1);\n    }\n    set(carriers, modulation) {\n        this.reset();\n        this.carrierCount = carriers;\n        for (let i = 0; i < this.modulatedBy.length; i++) {\n            this.modulatedBy[i] = modulation[i];\n            if (i < carriers) {\n                this.associatedCarrier[i] = i + 1;\n            }\n            this.name += (i + 1);\n            for (let j = 0; j < modulation[i].length; j++) {\n                this.name += modulation[i][j];\n                if (modulation[i][j] > carriers - 1) {\n                    this.associatedCarrier[modulation[i][j] - 1] = i + 1;\n                }\n                this.name += \",\";\n            }\n            if (i < carriers) {\n                this.name += \"|\";\n            }\n            else {\n                this.name += \".\";\n            }\n        }\n    }\n    reset() {\n        this.name = \"\";\n        this.carrierCount = 1;\n        this.modulatedBy = [[2, 3, 4, 5, 6], [], [], [], [], []];\n        this.associatedCarrier = [1, 1, 1, 1, 1, 1];\n    }\n    copy(other) {\n        this.name = other.name;\n        this.carrierCount = other.carrierCount;\n        this.modulatedBy = other.modulatedBy;\n        this.associatedCarrier = other.associatedCarrier;\n    }\n    fromPreset(other) {\n        this.reset();\n        let preset = Config.algorithms6Op[other];\n        this.name = preset.name;\n        this.carrierCount = preset.carrierCount;\n        for (var i = 0; i < preset.modulatedBy.length; i++) {\n            this.modulatedBy[i] = Array.from(preset.modulatedBy[i]);\n            this.associatedCarrier[i] = preset.associatedCarrier[i];\n        }\n    }\n}\nexport class CustomFeedBack {\n    constructor() {\n        this.name = \"\";\n        this.indices = [[], [], [], [], [], []];\n        this.fromPreset(1);\n    }\n    set(inIndices) {\n        this.reset();\n        for (let i = 0; i < this.indices.length; i++) {\n            this.indices[i] = inIndices[i];\n            for (let j = 0; j < inIndices[i].length; j++) {\n                this.name += inIndices[i][j];\n                this.name += \",\";\n            }\n            this.name += \".\";\n        }\n    }\n    reset() {\n        this.reset;\n        this.name = \"\";\n        this.indices = [[1], [], [], [], [], []];\n    }\n    copy(other) {\n        this.name = other.name;\n        this.indices = other.indices;\n    }\n    fromPreset(other) {\n        this.reset();\n        let preset = Config.feedbacks6Op[other];\n        for (var i = 0; i < preset.indices.length; i++) {\n            this.indices[i] = Array.from(preset.indices[i]);\n            for (let j = 0; j < preset.indices[i].length; j++) {\n                this.name += preset.indices[i][j];\n                this.name += \",\";\n            }\n            this.name += \".\";\n        }\n    }\n}\nexport class SpectrumWave {\n    constructor(isNoiseChannel) {\n        this.spectrum = [];\n        this.hash = -1;\n        this.reset(isNoiseChannel);\n    }\n    reset(isNoiseChannel) {\n        for (let i = 0; i < Config.spectrumControlPoints; i++) {\n            if (isNoiseChannel) {\n                this.spectrum[i] = Math.round(Config.spectrumMax * (1 / Math.sqrt(1 + i / 3)));\n            }\n            else {\n                const isHarmonic = i == 0 || i == 7 || i == 11 || i == 14 || i == 16 || i == 18 || i == 21 || i == 23 || i >= 25;\n                this.spectrum[i] = isHarmonic ? Math.max(0, Math.round(Config.spectrumMax * (1 - i / 30))) : 0;\n            }\n        }\n        this.markCustomWaveDirty();\n    }\n    markCustomWaveDirty() {\n        const hashMult = fittingPowerOfTwo(Config.spectrumMax + 2) - 1;\n        let hash = 0;\n        for (const point of this.spectrum)\n            hash = ((hash * hashMult) + point) >>> 0;\n        this.hash = hash;\n    }\n}\nexport class HarmonicsWave {\n    constructor() {\n        this.harmonics = [];\n        this.hash = -1;\n        this.reset();\n    }\n    reset() {\n        for (let i = 0; i < Config.harmonicsControlPoints; i++) {\n            this.harmonics[i] = 0;\n        }\n        this.harmonics[0] = Config.harmonicsMax;\n        this.harmonics[3] = Config.harmonicsMax;\n        this.harmonics[6] = Config.harmonicsMax;\n        this.markCustomWaveDirty();\n    }\n    markCustomWaveDirty() {\n        const hashMult = fittingPowerOfTwo(Config.harmonicsMax + 2) - 1;\n        let hash = 0;\n        for (const point of this.harmonics)\n            hash = ((hash * hashMult) + point) >>> 0;\n        this.hash = hash;\n    }\n}\nexport class Instrument {\n    constructor(isNoiseChannel, isModChannel) {\n        this.type = 0;\n        this.preset = 0;\n        this.chipWave = 2;\n        this.isUsingAdvancedLoopControls = false;\n        this.chipWaveLoopStart = 0;\n        this.chipWaveLoopEnd = Config.rawRawChipWaves[this.chipWave].samples.length - 1;\n        this.chipWaveLoopMode = 0;\n        this.chipWavePlayBackwards = false;\n        this.chipWaveStartOffset = 0;\n        this.chipWaveInStereo = false;\n        this.chipNoise = 1;\n        this.noteFilter = new FilterSettings();\n        this.noteFilterType = false;\n        this.noteFilterSimpleCut = Config.filterSimpleCutRange - 1;\n        this.noteFilterSimplePeak = 0;\n        this.noteSubFilters = [];\n        this.envelopes = [];\n        this.fadeIn = 0;\n        this.fadeOut = Config.fadeOutNeutral;\n        this.envelopeCount = 0;\n        this.transition = Config.transitions.dictionary[\"normal\"].index;\n        this.pitchShift = 0;\n        this.detune = 0;\n        this.vibrato = 0;\n        this.interval = 0;\n        this.vibratoDepth = 0;\n        this.vibratoSpeed = 10;\n        this.vibratoDelay = 0;\n        this.vibratoType = 0;\n        this.envelopeSpeed = 12;\n        this.unison = 0;\n        this.unisonVoices = 1;\n        this.unisonSpread = 0.0;\n        this.unisonOffset = 0.0;\n        this.unisonExpression = 1.4;\n        this.unisonSign = 1.0;\n        this.effects = [];\n        this.effectCount = 0;\n        this.mdeffects = 0;\n        this.chord = 1;\n        this.volume = 0;\n        this.arpeggioSpeed = 12;\n        this.monoChordTone = 0;\n        this.fastTwoNoteArp = false;\n        this.legacyTieOver = false;\n        this.clicklessTransition = false;\n        this.aliases = false;\n        this.pulseWidth = Config.pulseWidthRange;\n        this.decimalOffset = 0;\n        this.supersawDynamism = Config.supersawDynamismMax;\n        this.supersawSpread = Math.ceil(Config.supersawSpreadMax / 2.0);\n        this.supersawShape = 0;\n        this.stringSustain = 10;\n        this.stringSustainType = 1;\n        this.algorithm = 0;\n        this.feedbackType = 0;\n        this.algorithm6Op = 1;\n        this.feedbackType6Op = 1;\n        this.customAlgorithm = new CustomAlgorithm();\n        this.customFeedbackType = new CustomFeedBack();\n        this.feedbackAmplitude = 0;\n        this.customChipWave = new Float32Array(64);\n        this.customChipWaveIntegral = new Float32Array(65);\n        this.operators = [];\n        this.harmonicsWave = new HarmonicsWave();\n        this.drumsetEnvelopes = [];\n        this.drumsetSpectrumWaves = [];\n        this.modChannels = [];\n        this.modInstruments = [];\n        this.modulators = [];\n        this.modFilterTypes = [];\n        this.modEnvelopeNumbers = [];\n        this.invalidModulators = [];\n        this.isNoiseInstrument = false;\n        if (isModChannel) {\n            for (let mod = 0; mod < Config.modCount; mod++) {\n                this.modChannels.push([-2]);\n                this.modInstruments.push([0]);\n                this.modulators.push(Config.modulators.dictionary[\"none\"].index);\n            }\n        }\n        this.spectrumWave = new SpectrumWave(isNoiseChannel);\n        for (let i = 0; i < Config.operatorCount + 2; i++) {\n            this.operators[i] = new Operator(i);\n        }\n        for (let i = 0; i < Config.drumCount; i++) {\n            this.drumsetEnvelopes[i] = Config.envelopes.dictionary[\"twang 2\"].index;\n            this.drumsetSpectrumWaves[i] = new SpectrumWave(true);\n        }\n        for (let i = 0; i < 64; i++) {\n            this.customChipWave[i] = 24 - Math.floor(i * (48 / 64));\n        }\n        let sum = 0.0;\n        for (let i = 0; i < this.customChipWave.length; i++) {\n            sum += this.customChipWave[i];\n        }\n        const average = sum / this.customChipWave.length;\n        let cumulative = 0;\n        let wavePrev = 0;\n        for (let i = 0; i < this.customChipWave.length; i++) {\n            cumulative += wavePrev;\n            wavePrev = this.customChipWave[i] - average;\n            this.customChipWaveIntegral[i] = cumulative;\n        }\n        this.customChipWaveIntegral[64] = 0.0;\n        this.isNoiseInstrument = isNoiseChannel;\n    }\n    setTypeAndReset(type, isNoiseChannel, isModChannel) {\n        if (isModChannel)\n            type = 10;\n        this.type = type;\n        this.preset = type;\n        this.volume = 0;\n        this.effects = [];\n        this.effectCount = 0;\n        this.mdeffects = 0;\n        for (let i = 0; i < Config.filterMorphCount; i++) {\n            this.noteSubFilters[i] = null;\n        }\n        this.noteFilter.reset();\n        this.noteFilterType = false;\n        this.noteFilterSimpleCut = Config.filterSimpleCutRange - 1;\n        this.noteFilterSimplePeak = 0;\n        this.pitchShift = Config.pitchShiftCenter;\n        this.detune = Config.detuneCenter;\n        this.vibrato = 0;\n        this.unison = 0;\n        this.stringSustain = 10;\n        this.stringSustainType = Config.enableAcousticSustain ? 1 : 0;\n        this.clicklessTransition = false;\n        this.arpeggioSpeed = 12;\n        this.monoChordTone = 1;\n        this.envelopeSpeed = 12;\n        this.legacyTieOver = false;\n        this.aliases = false;\n        this.fadeIn = 0;\n        this.fadeOut = Config.fadeOutNeutral;\n        this.transition = Config.transitions.dictionary[\"normal\"].index;\n        this.envelopeCount = 0;\n        this.isNoiseInstrument = isNoiseChannel;\n        switch (type) {\n            case 0:\n                this.chipWave = 2;\n                this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                this.isUsingAdvancedLoopControls = false;\n                this.chipWaveLoopStart = 0;\n                this.chipWaveLoopEnd = Config.rawRawChipWaves[this.chipWave].samples.length - 1;\n                this.chipWaveLoopMode = 0;\n                this.chipWavePlayBackwards = false;\n                this.chipWaveInStereo = false;\n                this.chipWaveStartOffset = 0;\n                break;\n            case 9:\n                this.chipWave = 2;\n                this.chipWaveInStereo = false;\n                this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                for (let i = 0; i < 64; i++) {\n                    this.customChipWave[i] = 24 - (Math.floor(i * (48 / 64)));\n                }\n                let sum = 0.0;\n                for (let i = 0; i < this.customChipWave.length; i++) {\n                    sum += this.customChipWave[i];\n                }\n                const average = sum / this.customChipWave.length;\n                let cumulative = 0;\n                let wavePrev = 0;\n                for (let i = 0; i < this.customChipWave.length; i++) {\n                    cumulative += wavePrev;\n                    wavePrev = this.customChipWave[i] - average;\n                    this.customChipWaveIntegral[i] = cumulative;\n                }\n                this.customChipWaveIntegral[64] = 0.0;\n                break;\n            case 1:\n                this.chord = Config.chords.dictionary[\"custom interval\"].index;\n                this.algorithm = 0;\n                this.feedbackType = 0;\n                this.feedbackAmplitude = 0;\n                for (let i = 0; i < this.operators.length; i++) {\n                    this.operators[i].reset(i);\n                }\n                break;\n            case 11:\n                this.transition = 1;\n                this.vibrato = 0;\n                this.chord = 3;\n                this.algorithm = 0;\n                this.feedbackType = 0;\n                this.algorithm6Op = 1;\n                this.feedbackType6Op = 1;\n                this.customAlgorithm.fromPreset(1);\n                this.feedbackAmplitude = 0;\n                for (let i = 0; i < this.operators.length; i++) {\n                    this.operators[i].reset(i);\n                }\n                break;\n            case 2:\n                this.chipNoise = 1;\n                this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                break;\n            case 3:\n                this.chord = Config.chords.dictionary[\"simultaneous\"].index;\n                this.spectrumWave.reset(isNoiseChannel);\n                break;\n            case 4:\n                this.chord = Config.chords.dictionary[\"simultaneous\"].index;\n                for (let i = 0; i < Config.drumCount; i++) {\n                    this.drumsetEnvelopes[i] = Config.envelopes.dictionary[\"twang 2\"].index;\n                    if (this.drumsetSpectrumWaves[i] == undefined) {\n                        this.drumsetSpectrumWaves[i] = new SpectrumWave(true);\n                    }\n                    this.drumsetSpectrumWaves[i].reset(isNoiseChannel);\n                }\n                break;\n            case 5:\n                this.chord = Config.chords.dictionary[\"simultaneous\"].index;\n                this.harmonicsWave.reset();\n                break;\n            case 6:\n                this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                this.pulseWidth = Config.pulseWidthRange;\n                this.decimalOffset = 0;\n                break;\n            case 7:\n                this.chord = Config.chords.dictionary[\"strum\"].index;\n                this.harmonicsWave.reset();\n                break;\n            case 10:\n                this.transition = 0;\n                this.vibrato = 0;\n                this.interval = 0;\n                this.chord = 0;\n                this.modChannels = [];\n                this.modInstruments = [];\n                this.modulators = [];\n                for (let mod = 0; mod < Config.modCount; mod++) {\n                    this.modChannels.push([-2]);\n                    this.modInstruments.push([0]);\n                    this.modulators.push(Config.modulators.dictionary[\"none\"].index);\n                    this.invalidModulators[mod] = false;\n                    this.modFilterTypes[mod] = 0;\n                    this.modEnvelopeNumbers[mod] = 0;\n                }\n                break;\n            case 8:\n                this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                this.supersawDynamism = Config.supersawDynamismMax;\n                this.supersawSpread = Math.ceil(Config.supersawSpreadMax / 2.0);\n                this.supersawShape = 0;\n                this.pulseWidth = Config.pulseWidthRange - 1;\n                this.decimalOffset = 0;\n                break;\n            default:\n                throw new Error(\"Unrecognized instrument type: \" + type);\n        }\n        if (this.chord != Config.chords.dictionary[\"simultaneous\"].index) {\n            this.mdeffects = (this.mdeffects | (1 << 4));\n        }\n    }\n    convertLegacySettings(legacySettings, forceSimpleFilter) {\n        let legacyCutoffSetting = legacySettings.filterCutoff;\n        let legacyResonanceSetting = legacySettings.filterResonance;\n        let legacyFilterEnv = legacySettings.filterEnvelope;\n        let legacyPulseEnv = legacySettings.pulseEnvelope;\n        let legacyOperatorEnvelopes = legacySettings.operatorEnvelopes;\n        let legacyFeedbackEnv = legacySettings.feedbackEnvelope;\n        if (legacyCutoffSetting == undefined)\n            legacyCutoffSetting = (this.type == 0) ? 6 : 10;\n        if (legacyResonanceSetting == undefined)\n            legacyResonanceSetting = 0;\n        if (legacyFilterEnv == undefined)\n            legacyFilterEnv = Config.envelopes.dictionary[\"none\"];\n        if (legacyPulseEnv == undefined)\n            legacyPulseEnv = Config.envelopes.dictionary[(this.type == 6) ? \"twang 2\" : \"none\"];\n        if (legacyOperatorEnvelopes == undefined)\n            legacyOperatorEnvelopes = [Config.envelopes.dictionary[(this.type == 1) ? \"note size\" : \"none\"], Config.envelopes.dictionary[\"none\"], Config.envelopes.dictionary[\"none\"], Config.envelopes.dictionary[\"none\"]];\n        if (legacyFeedbackEnv == undefined)\n            legacyFeedbackEnv = Config.envelopes.dictionary[\"none\"];\n        const legacyFilterCutoffRange = 11;\n        const cutoffAtMax = (legacyCutoffSetting == legacyFilterCutoffRange - 1);\n        if (cutoffAtMax && legacyFilterEnv.type == 4)\n            legacyFilterEnv = Config.envelopes.dictionary[\"none\"];\n        const carrierCount = Config.algorithms[this.algorithm].carrierCount;\n        let noCarriersControlledByNoteSize = true;\n        let allCarriersControlledByNoteSize = true;\n        let noteSizeControlsSomethingElse = (legacyFilterEnv.type == 1) || (legacyPulseEnv.type == 1);\n        if (this.type == 1 || this.type == 11) {\n            noteSizeControlsSomethingElse = noteSizeControlsSomethingElse || (legacyFeedbackEnv.type == 1);\n            for (let i = 0; i < legacyOperatorEnvelopes.length; i++) {\n                if (i < carrierCount) {\n                    if (legacyOperatorEnvelopes[i].type != 1) {\n                        allCarriersControlledByNoteSize = false;\n                    }\n                    else {\n                        noCarriersControlledByNoteSize = false;\n                    }\n                }\n                else {\n                    noteSizeControlsSomethingElse = noteSizeControlsSomethingElse || (legacyOperatorEnvelopes[i].type == 1);\n                }\n            }\n        }\n        this.envelopeCount = 0;\n        if (this.type == 1 || this.type == 11) {\n            if (allCarriersControlledByNoteSize && noteSizeControlsSomethingElse) {\n                this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"noteVolume\"].index, 0, Config.envelopes.dictionary[\"note size\"].index, false);\n            }\n            else if (noCarriersControlledByNoteSize && !noteSizeControlsSomethingElse) {\n                this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"none\"].index, 0, Config.envelopes.dictionary[\"note size\"].index, false);\n            }\n        }\n        if (legacyPulseEnv.type != 0) {\n            this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"pulseWidth\"].index, 0, legacyPulseEnv.index, false);\n        }\n        for (let i = 0; i < legacyOperatorEnvelopes.length; i++) {\n            if (i < carrierCount && allCarriersControlledByNoteSize)\n                continue;\n            if (legacyOperatorEnvelopes[i].type != 0) {\n                this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"operatorAmplitude\"].index, i, legacyOperatorEnvelopes[i].index, false);\n            }\n        }\n        if (legacyFeedbackEnv.type != 0) {\n            this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"feedbackAmplitude\"].index, 0, legacyFeedbackEnv.index, false);\n        }\n    }\n    toJsonObject() {\n        const instrumentObject = {\n            \"type\": Config.instrumentTypeNames[this.type],\n            \"volume\": this.volume,\n            \"noteFilter\": this.noteFilter.toJsonObject(),\n            \"noteFilterType\": this.noteFilterType,\n            \"noteSimpleCut\": this.noteFilterSimpleCut,\n            \"noteSimplePeak\": this.noteFilterSimplePeak,\n            \"envelopeSpeed\": this.envelopeSpeed,\n        };\n        if (this.preset != this.type) {\n            instrumentObject[\"preset\"] = this.preset;\n        }\n        for (let i = 0; i < Config.filterMorphCount; i++) {\n            if (this.noteSubFilters[i] != null)\n                instrumentObject[\"noteSubFilters\" + i] = this.noteSubFilters[i].toJsonObject();\n        }\n        instrumentObject[\"mdeffects\"] = this.mdeffects;\n        if (effectsIncludeTransition(this.mdeffects)) {\n            instrumentObject[\"transition\"] = Config.transitions[this.transition].name;\n            instrumentObject[\"clicklessTransition\"] = this.clicklessTransition;\n        }\n        if (effectsIncludeChord(this.mdeffects)) {\n            instrumentObject[\"chord\"] = this.getChord().name;\n            instrumentObject[\"fastTwoNoteArp\"] = this.fastTwoNoteArp;\n            instrumentObject[\"arpeggioSpeed\"] = this.arpeggioSpeed;\n            instrumentObject[\"monoChordTone\"] = this.monoChordTone;\n        }\n        if (effectsIncludePitchShift(this.mdeffects)) {\n            instrumentObject[\"pitchShiftSemitones\"] = this.pitchShift;\n        }\n        if (effectsIncludeDetune(this.mdeffects)) {\n            instrumentObject[\"detuneCents\"] = detuneToCents(this.detune);\n        }\n        if (effectsIncludeVibrato(this.mdeffects)) {\n            if (this.vibrato == -1) {\n                this.vibrato = 5;\n            }\n            if (this.vibrato != 5) {\n                instrumentObject[\"vibrato\"] = Config.vibratos[this.vibrato].name;\n            }\n            else {\n                instrumentObject[\"vibrato\"] = \"custom\";\n            }\n            instrumentObject[\"vibratoDepth\"] = this.vibratoDepth;\n            instrumentObject[\"vibratoDelay\"] = this.vibratoDelay;\n            instrumentObject[\"vibratoSpeed\"] = this.vibratoSpeed;\n            instrumentObject[\"vibratoType\"] = this.vibratoType;\n        }\n        if (this.type != 4) {\n            instrumentObject[\"fadeInSeconds\"] = Math.round(10000 * fadeInSettingToSeconds(this.fadeIn)) / 10000;\n            instrumentObject[\"fadeOutTicks\"] = fadeOutSettingToTicks(this.fadeOut);\n        }\n        if (this.type == 5 || this.type == 7) {\n            instrumentObject[\"harmonics\"] = [];\n            for (let i = 0; i < Config.harmonicsControlPoints; i++) {\n                instrumentObject[\"harmonics\"][i] = Math.round(100 * this.harmonicsWave.harmonics[i] / Config.harmonicsMax);\n            }\n        }\n        if (this.type == 2) {\n            instrumentObject[\"wave\"] = Config.chipNoises[this.chipNoise].name;\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\n            if (this.unison == Config.unisons.length) {\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\n            }\n        }\n        else if (this.type == 3) {\n            instrumentObject[\"spectrum\"] = [];\n            for (let i = 0; i < Config.spectrumControlPoints; i++) {\n                instrumentObject[\"spectrum\"][i] = Math.round(100 * this.spectrumWave.spectrum[i] / Config.spectrumMax);\n            }\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\n            if (this.unison == Config.unisons.length) {\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\n            }\n        }\n        else if (this.type == 4) {\n            instrumentObject[\"drums\"] = [];\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\n            if (this.unison == Config.unisons.length) {\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\n            }\n            for (let j = 0; j < Config.drumCount; j++) {\n                const spectrum = [];\n                for (let i = 0; i < Config.spectrumControlPoints; i++) {\n                    spectrum[i] = Math.round(100 * this.drumsetSpectrumWaves[j].spectrum[i] / Config.spectrumMax);\n                }\n                instrumentObject[\"drums\"][j] = {\n                    \"filterEnvelope\": this.getDrumsetEnvelope(j).name,\n                    \"spectrum\": spectrum,\n                };\n            }\n        }\n        else if (this.type == 0) {\n            instrumentObject[\"wave\"] = Config.chipWaves[this.chipWave].name;\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\n            if (this.unison == Config.unisons.length) {\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\n            }\n            instrumentObject[\"isUsingAdvancedLoopControls\"] = this.isUsingAdvancedLoopControls;\n            instrumentObject[\"chipWaveLoopStart\"] = this.chipWaveLoopStart;\n            instrumentObject[\"chipWaveLoopEnd\"] = this.chipWaveLoopEnd;\n            instrumentObject[\"chipWaveLoopMode\"] = this.chipWaveLoopMode;\n            instrumentObject[\"chipWavePlayBackwards\"] = this.chipWavePlayBackwards;\n            instrumentObject[\"chipWaveStartOffset\"] = this.chipWaveStartOffset;\n            instrumentObject[\"chipWaveInStereo\"] = this.chipWaveInStereo;\n        }\n        else if (this.type == 6) {\n            instrumentObject[\"pulseWidth\"] = this.pulseWidth;\n            instrumentObject[\"decimalOffset\"] = this.decimalOffset;\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\n            if (this.unison == Config.unisons.length) {\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\n            }\n        }\n        else if (this.type == 8) {\n            instrumentObject[\"pulseWidth\"] = this.pulseWidth;\n            instrumentObject[\"decimalOffset\"] = this.decimalOffset;\n            instrumentObject[\"dynamism\"] = Math.round(100 * this.supersawDynamism / Config.supersawDynamismMax);\n            instrumentObject[\"spread\"] = Math.round(100 * this.supersawSpread / Config.supersawSpreadMax);\n            instrumentObject[\"shape\"] = Math.round(100 * this.supersawShape / Config.supersawShapeMax);\n        }\n        else if (this.type == 7) {\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\n            if (this.unison == Config.unisons.length) {\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\n            }\n            instrumentObject[\"stringSustain\"] = Math.round(100 * this.stringSustain / (Config.stringSustainRange - 1));\n            if (Config.enableAcousticSustain) {\n                instrumentObject[\"stringSustainType\"] = Config.sustainTypeNames[this.stringSustainType];\n            }\n        }\n        else if (this.type == 5) {\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\n            if (this.unison == Config.unisons.length) {\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\n            }\n        }\n        else if (this.type == 1 || this.type == 11) {\n            const operatorArray = [];\n            for (const operator of this.operators) {\n                operatorArray.push({\n                    \"frequency\": Config.operatorFrequencies[operator.frequency].name,\n                    \"amplitude\": operator.amplitude,\n                    \"waveform\": Config.operatorWaves[operator.waveform].name,\n                    \"pulseWidth\": operator.pulseWidth,\n                });\n            }\n            if (this.type == 1) {\n                instrumentObject[\"algorithm\"] = Config.algorithms[this.algorithm].name;\n                instrumentObject[\"feedbackType\"] = Config.feedbacks[this.feedbackType].name;\n                instrumentObject[\"feedbackAmplitude\"] = this.feedbackAmplitude;\n                instrumentObject[\"operators\"] = operatorArray;\n            }\n            else {\n                instrumentObject[\"algorithm\"] = Config.algorithms6Op[this.algorithm6Op].name;\n                instrumentObject[\"feedbackType\"] = Config.feedbacks6Op[this.feedbackType6Op].name;\n                instrumentObject[\"feedbackAmplitude\"] = this.feedbackAmplitude;\n                if (this.algorithm6Op == 0) {\n                    const customAlgorithm = {};\n                    customAlgorithm[\"mods\"] = this.customAlgorithm.modulatedBy;\n                    customAlgorithm[\"carrierCount\"] = this.customAlgorithm.carrierCount;\n                    instrumentObject[\"customAlgorithm\"] = customAlgorithm;\n                }\n                if (this.feedbackType6Op == 0) {\n                    const customFeedback = {};\n                    customFeedback[\"mods\"] = this.customFeedbackType.indices;\n                    instrumentObject[\"customFeedback\"] = customFeedback;\n                }\n                instrumentObject[\"operators\"] = operatorArray;\n            }\n        }\n        else if (this.type == 9) {\n            instrumentObject[\"wave\"] = Config.chipWaves[this.chipWave].name;\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\n            if (this.unison == Config.unisons.length) {\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\n            }\n            instrumentObject[\"customChipWave\"] = new Float64Array(64);\n            instrumentObject[\"customChipWaveIntegral\"] = new Float64Array(65);\n            for (let i = 0; i < this.customChipWave.length; i++) {\n                instrumentObject[\"customChipWave\"][i] = this.customChipWave[i];\n            }\n        }\n        else if (this.type == 10) {\n            instrumentObject[\"modChannels\"] = [];\n            instrumentObject[\"modInstruments\"] = [];\n            instrumentObject[\"modSettings\"] = [];\n            instrumentObject[\"modFilterTypes\"] = [];\n            instrumentObject[\"modEnvelopeNumbers\"] = [];\n            for (let mod = 0; mod < Config.modCount; mod++) {\n                instrumentObject[\"modChannels\"][mod] = this.modChannels[mod];\n                instrumentObject[\"modInstruments\"][mod] = this.modInstruments[mod];\n                instrumentObject[\"modSettings\"][mod] = this.modulators[mod];\n                instrumentObject[\"modFilterTypes\"][mod] = this.modFilterTypes[mod];\n                instrumentObject[\"modEnvelopeNumbers\"][mod] = this.modEnvelopeNumbers[mod];\n            }\n        }\n        else {\n            throw new Error(\"Unrecognized instrument type\");\n        }\n        const envelopes = [];\n        for (let i = 0; i < this.envelopeCount; i++) {\n            envelopes.push(this.envelopes[i].toJsonObject());\n        }\n        instrumentObject[\"envelopes\"] = envelopes;\n        return instrumentObject;\n    }\n    fromJsonObject(instrumentObject, isNoiseChannel, isModChannel, useSlowerRhythm, useFastTwoNoteArp, legacyGlobalReverb = 0, jsonFormat = Config.jsonFormat) {\n        if (instrumentObject == undefined)\n            instrumentObject = {};\n        const format = jsonFormat.toLowerCase();\n        let type = Config.instrumentTypeNames.indexOf(instrumentObject[\"type\"]);\n        if ((format == \"synthbox\") && (instrumentObject[\"type\"] == \"FM\"))\n            type = Config.instrumentTypeNames.indexOf(\"FM6op\");\n        if (type == -1)\n            type = isModChannel ? 10 : (isNoiseChannel ? 2 : 0);\n        this.setTypeAndReset(type, isNoiseChannel, isModChannel);\n        if (instrumentObject[\"preset\"] != undefined) {\n            this.preset = instrumentObject[\"preset\"] >>> 0;\n        }\n        if (instrumentObject[\"volume\"] != undefined) {\n            if (format == \"jummbox\" || format == \"midbox\" || format == \"synthbox\" || format == \"goldbox\" || format == \"paandorasbox\" || format == \"ultrabox\" || format == \"slarmoosbox\" || format == \"Theepbox\") {\n                this.volume = clamp(-Config.volumeRange / 2, (Config.volumeRange / 2) + 1, instrumentObject[\"volume\"] | 0);\n            }\n            else {\n                this.volume = Math.round(-clamp(0, 8, Math.round(5 - (instrumentObject[\"volume\"] | 0) / 20)) * 25.0 / 7.0);\n            }\n        }\n        else {\n            this.volume = 0;\n        }\n        this.envelopeSpeed = instrumentObject[\"envelopeSpeed\"] != undefined ? clamp(0, Config.modulators.dictionary[\"envelope speed\"].maxRawVol + 1, instrumentObject[\"envelopeSpeed\"] | 0) : 12;\n        if (Array.isArray(instrumentObject[\"effects\"])) {\n        }\n        else {\n        }\n        if (instrumentObject[\"mdeffects\"] != undefined) {\n            this.mdeffects = instrumentObject[\"mdeffects\"];\n        }\n        else\n            this.mdeffects = 0;\n        this.transition = Config.transitions.dictionary[\"normal\"].index;\n        const transitionProperty = instrumentObject[\"transition\"] || instrumentObject[\"envelope\"];\n        if (transitionProperty != undefined) {\n            let transition = Config.transitions.dictionary[transitionProperty];\n            if (instrumentObject[\"fadeInSeconds\"] == undefined || instrumentObject[\"fadeOutTicks\"] == undefined) {\n                const legacySettings = {\n                    \"binary\": { transition: \"interrupt\", fadeInSeconds: 0.0, fadeOutTicks: -1 },\n                    \"seamless\": { transition: \"interrupt\", fadeInSeconds: 0.0, fadeOutTicks: -1 },\n                    \"sudden\": { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: -3 },\n                    \"hard\": { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: -3 },\n                    \"smooth\": { transition: \"normal\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\n                    \"soft\": { transition: \"normal\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\n                    \"slide\": { transition: \"slide in pattern\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\n                    \"cross fade\": { transition: \"normal\", fadeInSeconds: 0.04, fadeOutTicks: 6 },\n                    \"hard fade\": { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: 48 },\n                    \"medium fade\": { transition: \"normal\", fadeInSeconds: 0.0125, fadeOutTicks: 72 },\n                    \"soft fade\": { transition: \"normal\", fadeInSeconds: 0.06, fadeOutTicks: 96 },\n                }[transitionProperty];\n                if (legacySettings != undefined) {\n                    transition = Config.transitions.dictionary[legacySettings.transition];\n                    this.fadeIn = secondsToFadeInSetting(legacySettings.fadeInSeconds);\n                    this.fadeOut = ticksToFadeOutSetting(legacySettings.fadeOutTicks);\n                }\n            }\n            if (transition != undefined)\n                this.transition = transition.index;\n            if (this.transition != Config.transitions.dictionary[\"normal\"].index) {\n                this.mdeffects = (this.mdeffects | (1 << 3));\n            }\n        }\n        if (instrumentObject[\"fadeInSeconds\"] != undefined) {\n            this.fadeIn = secondsToFadeInSetting(+instrumentObject[\"fadeInSeconds\"]);\n        }\n        if (instrumentObject[\"fadeOutTicks\"] != undefined) {\n            this.fadeOut = ticksToFadeOutSetting(+instrumentObject[\"fadeOutTicks\"]);\n        }\n        {\n            const chordProperty = instrumentObject[\"chord\"];\n            const legacyChordNames = { \"harmony\": \"simultaneous\" };\n            const chord = Config.chords.dictionary[legacyChordNames[chordProperty]] || Config.chords.dictionary[chordProperty];\n            if (chord != undefined) {\n                this.chord = chord.index;\n            }\n            else {\n                if (this.type == 2) {\n                    this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                }\n                else if (this.type == 7) {\n                    this.chord = Config.chords.dictionary[\"strum\"].index;\n                }\n                else if (this.type == 0) {\n                    this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                }\n                else if (this.type == 1 || this.type == 11) {\n                    this.chord = Config.chords.dictionary[\"custom interval\"].index;\n                }\n                else {\n                    this.chord = Config.chords.dictionary[\"simultaneous\"].index;\n                }\n            }\n        }\n        this.unison = Config.unisons.dictionary[\"none\"].index;\n        const unisonProperty = instrumentObject[\"unison\"] || instrumentObject[\"interval\"] || instrumentObject[\"chorus\"];\n        if (unisonProperty != undefined) {\n            const legacyChorusNames = { \"union\": \"none\", \"fifths\": \"fifth\", \"octaves\": \"octave\", \"error\": \"voiced\" };\n            const unison = Config.unisons.dictionary[legacyChorusNames[unisonProperty]] || Config.unisons.dictionary[unisonProperty];\n            if (unison != undefined)\n                this.unison = unison.index;\n            if (unisonProperty == \"custom\")\n                this.unison = Config.unisons.length;\n        }\n        this.unisonVoices = (instrumentObject[\"unisonVoices\"] == undefined) ? Config.unisons[this.unison].voices : instrumentObject[\"unisonVoices\"];\n        this.unisonSpread = (instrumentObject[\"unisonSpread\"] == undefined) ? Config.unisons[this.unison].spread : instrumentObject[\"unisonSpread\"];\n        this.unisonOffset = (instrumentObject[\"unisonOffset\"] == undefined) ? Config.unisons[this.unison].offset : instrumentObject[\"unisonOffset\"];\n        this.unisonExpression = (instrumentObject[\"unisonExpression\"] == undefined) ? Config.unisons[this.unison].expression : instrumentObject[\"unisonExpression\"];\n        this.unisonSign = (instrumentObject[\"unisonSign\"] == undefined) ? Config.unisons[this.unison].sign : instrumentObject[\"unisonSign\"];\n        if (instrumentObject[\"chorus\"] == \"custom harmony\") {\n            this.unison = Config.unisons.dictionary[\"hum\"].index;\n            this.chord = Config.chords.dictionary[\"custom interval\"].index;\n        }\n        if (this.chord != Config.chords.dictionary[\"simultaneous\"].index && !Array.isArray(instrumentObject[\"mdeffects\"])) {\n            this.mdeffects = (this.mdeffects | (1 << 4));\n        }\n        if (instrumentObject[\"pitchShiftSemitones\"] != undefined) {\n            this.pitchShift = clamp(0, Config.pitchShiftRange, Math.round(+instrumentObject[\"pitchShiftSemitones\"]));\n        }\n        if (instrumentObject[\"octoff\"] != undefined) {\n            let potentialPitchShift = instrumentObject[\"octoff\"];\n            this.mdeffects = (this.mdeffects | (1 << 0));\n            if ((potentialPitchShift == \"+1 (octave)\") || (potentialPitchShift == \"+2 (2 octaves)\")) {\n                this.pitchShift = 24;\n            }\n            else if ((potentialPitchShift == \"+1/2 (fifth)\") || (potentialPitchShift == \"+1 1/2 (octave and fifth)\")) {\n                this.pitchShift = 18;\n            }\n            else if ((potentialPitchShift == \"-1 (octave)\") || (potentialPitchShift == \"-2 (2 octaves\")) {\n                this.pitchShift = 0;\n            }\n            else if ((potentialPitchShift == \"-1/2 (fifth)\") || (potentialPitchShift == \"-1 1/2 (octave and fifth)\")) {\n                this.pitchShift = 6;\n            }\n            else {\n                this.pitchShift = 12;\n            }\n        }\n        if (instrumentObject[\"detuneCents\"] != undefined) {\n            this.detune = clamp(Config.detuneMin, Config.detuneMax + 1, Math.round(centsToDetune(+instrumentObject[\"detuneCents\"])));\n        }\n        this.vibrato = Config.vibratos.dictionary[\"none\"].index;\n        const vibratoProperty = instrumentObject[\"vibrato\"] || instrumentObject[\"effect\"];\n        if (vibratoProperty != undefined) {\n            const legacyVibratoNames = { \"vibrato light\": \"light\", \"vibrato delayed\": \"delayed\", \"vibrato heavy\": \"heavy\" };\n            const vibrato = Config.vibratos.dictionary[legacyVibratoNames[unisonProperty]] || Config.vibratos.dictionary[vibratoProperty];\n            if (vibrato != undefined)\n                this.vibrato = vibrato.index;\n            else if (vibratoProperty == \"custom\")\n                this.vibrato = Config.vibratos.length;\n            if (this.vibrato == Config.vibratos.length) {\n                this.vibratoDepth = instrumentObject[\"vibratoDepth\"];\n                this.vibratoSpeed = instrumentObject[\"vibratoSpeed\"];\n                this.vibratoDelay = instrumentObject[\"vibratoDelay\"];\n                this.vibratoType = instrumentObject[\"vibratoType\"];\n            }\n            else {\n                this.vibratoDepth = Config.vibratos[this.vibrato].amplitude;\n                this.vibratoDelay = Config.vibratos[this.vibrato].delayTicks / 2;\n                this.vibratoSpeed = 10;\n                this.vibratoType = Config.vibratos[this.vibrato].type;\n            }\n            if (vibrato != Config.vibratos.dictionary[\"none\"]) {\n                this.mdeffects = (this.mdeffects | (1 << 2));\n            }\n        }\n        if (instrumentObject[\"detune\"] != undefined) {\n            this.detune = clamp(Config.detuneMin, Config.detuneMax + 1, (instrumentObject[\"detune\"] | 0));\n        }\n        else if (instrumentObject[\"detuneCents\"] == undefined) {\n            this.detune = Config.detuneCenter;\n        }\n        if (instrumentObject[\"pulseWidth\"] != undefined) {\n            this.pulseWidth = clamp(1, Config.pulseWidthRange + 1, Math.round(instrumentObject[\"pulseWidth\"]));\n        }\n        else {\n            this.pulseWidth = Config.pulseWidthRange;\n        }\n        if (instrumentObject[\"decimalOffset\"] != undefined) {\n            this.decimalOffset = clamp(0, 99 + 1, Math.round(instrumentObject[\"decimalOffset\"]));\n        }\n        else {\n            this.decimalOffset = 0;\n        }\n        if (instrumentObject[\"dynamism\"] != undefined) {\n            this.supersawDynamism = clamp(0, Config.supersawDynamismMax + 1, Math.round(Config.supersawDynamismMax * (instrumentObject[\"dynamism\"] | 0) / 100));\n        }\n        else {\n            this.supersawDynamism = Config.supersawDynamismMax;\n        }\n        if (instrumentObject[\"spread\"] != undefined) {\n            this.supersawSpread = clamp(0, Config.supersawSpreadMax + 1, Math.round(Config.supersawSpreadMax * (instrumentObject[\"spread\"] | 0) / 100));\n        }\n        else {\n            this.supersawSpread = Math.ceil(Config.supersawSpreadMax / 2.0);\n        }\n        if (instrumentObject[\"shape\"] != undefined) {\n            this.supersawShape = clamp(0, Config.supersawShapeMax + 1, Math.round(Config.supersawShapeMax * (instrumentObject[\"shape\"] | 0) / 100));\n        }\n        else {\n            this.supersawShape = 0;\n        }\n        if (instrumentObject[\"harmonics\"] != undefined) {\n            for (let i = 0; i < Config.harmonicsControlPoints; i++) {\n                this.harmonicsWave.harmonics[i] = Math.max(0, Math.min(Config.harmonicsMax, Math.round(Config.harmonicsMax * (+instrumentObject[\"harmonics\"][i]) / 100)));\n            }\n            this.harmonicsWave.markCustomWaveDirty();\n        }\n        else {\n            this.harmonicsWave.reset();\n        }\n        if (instrumentObject[\"spectrum\"] != undefined) {\n            for (let i = 0; i < Config.spectrumControlPoints; i++) {\n                this.spectrumWave.spectrum[i] = Math.max(0, Math.min(Config.spectrumMax, Math.round(Config.spectrumMax * (+instrumentObject[\"spectrum\"][i]) / 100)));\n                this.spectrumWave.markCustomWaveDirty();\n            }\n        }\n        else {\n            this.spectrumWave.reset(isNoiseChannel);\n        }\n        if (instrumentObject[\"stringSustain\"] != undefined) {\n            this.stringSustain = clamp(0, Config.stringSustainRange, Math.round((Config.stringSustainRange - 1) * (instrumentObject[\"stringSustain\"] | 0) / 100));\n        }\n        else {\n            this.stringSustain = 10;\n        }\n        this.stringSustainType = Config.enableAcousticSustain ? Config.sustainTypeNames.indexOf(instrumentObject[\"stringSustainType\"]) : 0;\n        if (this.stringSustainType == -1)\n            this.stringSustainType = 0;\n        if (this.type == 2) {\n            this.chipNoise = Config.chipNoises.findIndex(wave => wave.name == instrumentObject[\"wave\"]);\n            if (instrumentObject[\"wave\"] == \"pink noise\")\n                this.chipNoise = Config.chipNoises.findIndex(wave => wave.name == \"pink\");\n            if (instrumentObject[\"wave\"] == \"brownian noise\")\n                this.chipNoise = Config.chipNoises.findIndex(wave => wave.name == \"brownian\");\n            if (this.chipNoise == -1)\n                this.chipNoise = 1;\n        }\n        const legacyEnvelopeNames = { \"custom\": \"note size\", \"steady\": \"none\", \"pluck 1\": \"twang 1\", \"pluck 2\": \"twang 2\", \"pluck 3\": \"twang 3\" };\n        const getEnvelope = (name) => {\n            if (legacyEnvelopeNames[name] != undefined)\n                return Config.envelopes.dictionary[legacyEnvelopeNames[name]];\n            else {\n                return Config.envelopes.dictionary[name];\n            }\n        };\n        if (this.type == 4) {\n            if (instrumentObject[\"drums\"] != undefined) {\n                for (let j = 0; j < Config.drumCount; j++) {\n                    const drum = instrumentObject[\"drums\"][j];\n                    if (drum == undefined)\n                        continue;\n                    this.drumsetEnvelopes[j] = Config.envelopes.dictionary[\"twang 2\"].index;\n                    if (drum[\"filterEnvelope\"] != undefined) {\n                        const envelope = getEnvelope(drum[\"filterEnvelope\"]);\n                        if (envelope != undefined)\n                            this.drumsetEnvelopes[j] = envelope.index;\n                    }\n                    if (drum[\"spectrum\"] != undefined) {\n                        for (let i = 0; i < Config.spectrumControlPoints; i++) {\n                            this.drumsetSpectrumWaves[j].spectrum[i] = Math.max(0, Math.min(Config.spectrumMax, Math.round(Config.spectrumMax * (+drum[\"spectrum\"][i]) / 100)));\n                        }\n                    }\n                    this.drumsetSpectrumWaves[j].markCustomWaveDirty();\n                }\n            }\n        }\n        if (this.type == 0) {\n            const legacyWaveNames = { \"triangle\": 1, \"square\": 2, \"pulse wide\": 3, \"pulse narrow\": 4, \"sawtooth\": 5, \"double saw\": 6, \"double pulse\": 7, \"spiky\": 8, \"plateau\": 0 };\n            const modboxWaveNames = { \"10% pulse\": 22, \"sunsoft bass\": 23, \"loud pulse\": 24, \"sax\": 25, \"guitar\": 26, \"atari bass\": 28, \"atari pulse\": 29, \"1% pulse\": 30, \"curved sawtooth\": 31, \"viola\": 32, \"brass\": 33, \"acoustic bass\": 34, \"lyre\": 35, \"ramp pulse\": 36, \"piccolo\": 37, \"squaretooth\": 38, \"flatline\": 39, \"pnryshk a (u5)\": 40, \"pnryshk b (riff)\": 41 };\n            const sandboxWaveNames = { \"shrill lute\": 42, \"shrill bass\": 44, \"nes pulse\": 45, \"saw bass\": 46, \"euphonium\": 47, \"shrill pulse\": 48, \"r-sawtooth\": 49, \"recorder\": 50, \"narrow saw\": 51, \"deep square\": 52, \"ring pulse\": 53, \"double sine\": 54, \"contrabass\": 55, \"double bass\": 56 };\n            const zefboxWaveNames = { \"semi-square\": 63, \"deep square\": 64, \"squaretal\": 40, \"saw wide\": 65, \"saw narrow \": 66, \"deep sawtooth\": 67, \"sawtal\": 68, \"pulse\": 69, \"triple pulse\": 70, \"high pulse\": 71, \"deep pulse\": 72 };\n            const miscWaveNames = { \"test1\": 56, \"pokey 4bit lfsr\": 57, \"pokey 5step bass\": 58, \"isolated spiky\": 59, \"unnamed 1\": 60, \"unnamed 2\": 61, \"guitar string\": 75, \"intense\": 76, \"buzz wave\": 77, \"pokey square\": 57, \"pokey bass\": 58, \"banana wave\": 83, \"test 1\": 84, \"test 2\": 84, \"real snare\": 85, \"earthbound o. guitar\": 86 };\n            const paandorasboxWaveNames = { \"kick\": 87, \"snare\": 88, \"piano1\": 89, \"WOW\": 90, \"overdrive\": 91, \"trumpet\": 92, \"saxophone\": 93, \"orchestrahit\": 94, \"detached violin\": 95, \"synth\": 96, \"sonic3snare\": 97, \"come on\": 98, \"choir\": 99, \"overdriveguitar\": 100, \"flute\": 101, \"legato violin\": 102, \"tremolo violin\": 103, \"amen break\": 104, \"pizzicato violin\": 105, \"tim allen grunt\": 106, \"tuba\": 107, \"loopingcymbal\": 108, \"standardkick\": 109, \"standardsnare\": 110, \"closedhihat\": 111, \"foothihat\": 112, \"openhihat\": 113, \"crashcymbal\": 114, \"pianoC4\": 115, \"liver pad\": 116, \"marimba\": 117, \"susdotwav\": 118, \"wackyboxtts\": 119 };\n            this.chipWave = -1;\n            const rawName = instrumentObject[\"wave\"];\n            for (const table of [\n                legacyWaveNames,\n                modboxWaveNames,\n                sandboxWaveNames,\n                zefboxWaveNames,\n                miscWaveNames,\n                paandorasboxWaveNames\n            ]) {\n                if (this.chipWave == -1 && table[rawName] != undefined && Config.chipWaves[table[rawName]] != undefined) {\n                    this.chipWave = table[rawName];\n                    break;\n                }\n            }\n            if (this.chipWave == -1) {\n                const potentialChipWaveIndex = Config.chipWaves.findIndex(wave => wave.name == rawName);\n                if (potentialChipWaveIndex != -1)\n                    this.chipWave = potentialChipWaveIndex;\n            }\n            if (this.chipWave == -1)\n                this.chipWave = 1;\n        }\n        if (this.type == 1 || this.type == 11) {\n            if (this.type == 1) {\n                this.algorithm = Config.algorithms.findIndex(algorithm => algorithm.name == instrumentObject[\"algorithm\"]);\n                if (this.algorithm == -1)\n                    this.algorithm = 0;\n                this.feedbackType = Config.feedbacks.findIndex(feedback => feedback.name == instrumentObject[\"feedbackType\"]);\n                if (this.feedbackType == -1)\n                    this.feedbackType = 0;\n            }\n            else {\n                this.algorithm6Op = Config.algorithms6Op.findIndex(algorithm6Op => algorithm6Op.name == instrumentObject[\"algorithm\"]);\n                if (this.algorithm6Op == -1)\n                    this.algorithm6Op = 1;\n                if (this.algorithm6Op == 0) {\n                    this.customAlgorithm.set(instrumentObject[\"customAlgorithm\"][\"carrierCount\"], instrumentObject[\"customAlgorithm\"][\"mods\"]);\n                }\n                else {\n                    this.customAlgorithm.fromPreset(this.algorithm6Op);\n                }\n                this.feedbackType6Op = Config.feedbacks6Op.findIndex(feedback6Op => feedback6Op.name == instrumentObject[\"feedbackType\"]);\n                if (this.feedbackType6Op == -1) {\n                    let synthboxLegacyFeedbacks = toNameMap([\n                        { name: \"2⟲ 3⟲\", indices: [[], [2], [3], [], [], []] },\n                        { name: \"3⟲ 4⟲\", indices: [[], [], [3], [4], [], []] },\n                        { name: \"4⟲ 5⟲\", indices: [[], [], [], [4], [5], []] },\n                        { name: \"5⟲ 6⟲\", indices: [[], [], [], [], [5], [6]] },\n                        { name: \"1⟲ 6⟲\", indices: [[1], [], [], [], [], [6]] },\n                        { name: \"1⟲ 3⟲\", indices: [[1], [], [3], [], [], []] },\n                        { name: \"1⟲ 4⟲\", indices: [[1], [], [], [4], [], []] },\n                        { name: \"1⟲ 5⟲\", indices: [[1], [], [], [], [5], []] },\n                        { name: \"4⟲ 6⟲\", indices: [[], [], [], [4], [], [6]] },\n                        { name: \"2⟲ 6⟲\", indices: [[], [2], [], [], [], [6]] },\n                        { name: \"3⟲ 6⟲\", indices: [[], [], [3], [], [], [6]] },\n                        { name: \"4⟲ 5⟲ 6⟲\", indices: [[], [], [], [4], [5], [6]] },\n                        { name: \"1⟲ 3⟲ 6⟲\", indices: [[1], [], [3], [], [], [6]] },\n                        { name: \"2→5\", indices: [[], [], [], [], [2], []] },\n                        { name: \"2→6\", indices: [[], [], [], [], [], [2]] },\n                        { name: \"3→5\", indices: [[], [], [], [], [3], []] },\n                        { name: \"3→6\", indices: [[], [], [], [], [], [3]] },\n                        { name: \"4→6\", indices: [[], [], [], [], [], [4]] },\n                        { name: \"5→6\", indices: [[], [], [], [], [], [5]] },\n                        { name: \"1→3→4\", indices: [[], [], [1], [], [3], []] },\n                        { name: \"2→5→6\", indices: [[], [], [], [], [2], [5]] },\n                        { name: \"2→4→6\", indices: [[], [], [], [2], [], [4]] },\n                        { name: \"4→5→6\", indices: [[], [], [], [], [4], [5]] },\n                        { name: \"3→4→5→6\", indices: [[], [], [], [3], [4], [5]] },\n                        { name: \"2→3→4→5→6\", indices: [[], [1], [2], [3], [4], [5]] },\n                        { name: \"1→2→3→4→5→6\", indices: [[], [1], [2], [3], [4], [5]] },\n                    ]);\n                    let synthboxFeedbackType = synthboxLegacyFeedbacks[synthboxLegacyFeedbacks.findIndex(feedback => feedback.name == instrumentObject[\"feedbackType\"])].indices;\n                    if (synthboxFeedbackType != undefined) {\n                        this.feedbackType6Op = 0;\n                        this.customFeedbackType.set(synthboxFeedbackType);\n                    }\n                    else {\n                        this.feedbackType6Op = 1;\n                    }\n                }\n                if ((this.feedbackType6Op == 0) && (instrumentObject[\"customFeedback\"] != undefined)) {\n                    this.customFeedbackType.set(instrumentObject[\"customFeedback\"][\"mods\"]);\n                }\n                else {\n                    this.customFeedbackType.fromPreset(this.feedbackType6Op);\n                }\n            }\n            if (instrumentObject[\"feedbackAmplitude\"] != undefined) {\n                this.feedbackAmplitude = clamp(0, Config.operatorAmplitudeMax + 1, instrumentObject[\"feedbackAmplitude\"] | 0);\n            }\n            else {\n                this.feedbackAmplitude = 0;\n            }\n            for (let j = 0; j < Config.operatorCount + (this.type == 11 ? 2 : 0); j++) {\n                const operator = this.operators[j];\n                let operatorObject = undefined;\n                if (instrumentObject[\"operators\"] != undefined)\n                    operatorObject = instrumentObject[\"operators\"][j];\n                if (operatorObject == undefined)\n                    operatorObject = {};\n                operator.frequency = Config.operatorFrequencies.findIndex(freq => freq.name == operatorObject[\"frequency\"]);\n                if (operator.frequency == -1)\n                    operator.frequency = 0;\n                if (operatorObject[\"amplitude\"] != undefined) {\n                    operator.amplitude = clamp(0, Config.operatorAmplitudeMax + 1, operatorObject[\"amplitude\"] | 0);\n                }\n                else {\n                    operator.amplitude = 0;\n                }\n                if (operatorObject[\"waveform\"] != undefined) {\n                    if (format == \"goldbox\" && j > 3) {\n                        operator.waveform = 0;\n                        continue;\n                    }\n                    operator.waveform = Config.operatorWaves.findIndex(wave => wave.name == operatorObject[\"waveform\"]);\n                    if (operator.waveform == -1) {\n                        if (operatorObject[\"waveform\"] == \"square\") {\n                            operator.waveform = Config.operatorWaves.dictionary[\"pulse width\"].index;\n                            operator.pulseWidth = 5;\n                        }\n                        else if (operatorObject[\"waveform\"] == \"rounded\") {\n                            operator.waveform = Config.operatorWaves.dictionary[\"quasi-sine\"].index;\n                        }\n                        else {\n                            operator.waveform = 0;\n                        }\n                    }\n                }\n                else {\n                    operator.waveform = 0;\n                }\n                if (operatorObject[\"pulseWidth\"] != undefined) {\n                    operator.pulseWidth = operatorObject[\"pulseWidth\"] | 0;\n                }\n                else {\n                    operator.pulseWidth = 5;\n                }\n            }\n        }\n        else if (this.type == 9) {\n            if (instrumentObject[\"customChipWave\"]) {\n                for (let i = 0; i < 64; i++) {\n                    this.customChipWave[i] = instrumentObject[\"customChipWave\"][i];\n                }\n                let sum = 0.0;\n                for (let i = 0; i < this.customChipWave.length; i++) {\n                    sum += this.customChipWave[i];\n                }\n                const average = sum / this.customChipWave.length;\n                let cumulative = 0;\n                let wavePrev = 0;\n                for (let i = 0; i < this.customChipWave.length; i++) {\n                    cumulative += wavePrev;\n                    wavePrev = this.customChipWave[i] - average;\n                    this.customChipWaveIntegral[i] = cumulative;\n                }\n                this.customChipWaveIntegral[64] = 0.0;\n            }\n        }\n        else if (this.type == 10) {\n            if (instrumentObject[\"modChannels\"] != undefined) {\n                for (let mod = 0; mod < Config.modCount; mod++) {\n                    this.modChannels[mod] = instrumentObject[\"modChannels\"][mod];\n                    this.modInstruments[mod] = instrumentObject[\"modInstruments\"][mod];\n                    this.modulators[mod] = instrumentObject[\"modSettings\"][mod];\n                    if (instrumentObject[\"modFilterTypes\"] != undefined)\n                        this.modFilterTypes[mod] = instrumentObject[\"modFilterTypes\"][mod];\n                    if (instrumentObject[\"modEnvelopeNumbers\"] != undefined)\n                        this.modEnvelopeNumbers[mod] = instrumentObject[\"modEnvelopeNumbers\"][mod];\n                }\n            }\n        }\n        if (this.type != 10) {\n            if (this.chord == Config.chords.dictionary[\"arpeggio\"].index && instrumentObject[\"arpeggioSpeed\"] != undefined) {\n                this.arpeggioSpeed = instrumentObject[\"arpeggioSpeed\"];\n            }\n            else {\n                this.arpeggioSpeed = (useSlowerRhythm) ? 9 : 12;\n            }\n            if (this.chord == Config.chords.dictionary[\"monophonic\"].index && instrumentObject[\"monoChordTone\"] != undefined) {\n                this.monoChordTone = instrumentObject[\"monoChordTone\"];\n            }\n            if (instrumentObject[\"fastTwoNoteArp\"] != undefined) {\n                this.fastTwoNoteArp = instrumentObject[\"fastTwoNoteArp\"];\n            }\n            else {\n                this.fastTwoNoteArp = useFastTwoNoteArp;\n            }\n            if (instrumentObject[\"clicklessTransition\"] != undefined) {\n                this.clicklessTransition = instrumentObject[\"clicklessTransition\"];\n            }\n            else {\n                this.clicklessTransition = false;\n            }\n            if (instrumentObject[\"aliases\"] != undefined) {\n                this.aliases = instrumentObject[\"aliases\"];\n            }\n            else {\n                if (format == \"modbox\") {\n                    let newEffect = this.addEffect(3);\n                    this.aliases = true;\n                    newEffect.distortion = 0;\n                }\n                else {\n                    this.aliases = false;\n                }\n            }\n            if (instrumentObject[\"noteFilterType\"] != undefined) {\n                this.noteFilterType = instrumentObject[\"noteFilterType\"];\n            }\n            if (instrumentObject[\"noteSimpleCut\"] != undefined) {\n                this.noteFilterSimpleCut = instrumentObject[\"noteSimpleCut\"];\n            }\n            if (instrumentObject[\"noteSimplePeak\"] != undefined) {\n                this.noteFilterSimplePeak = instrumentObject[\"noteSimplePeak\"];\n            }\n            if (instrumentObject[\"noteFilter\"] != undefined) {\n                this.noteFilter.fromJsonObject(instrumentObject[\"noteFilter\"]);\n            }\n            else {\n                this.noteFilter.reset();\n            }\n            for (let i = 0; i < Config.filterMorphCount; i++) {\n                if (Array.isArray(instrumentObject[\"noteSubFilters\" + i])) {\n                    this.noteSubFilters[i] = new FilterSettings();\n                    this.noteSubFilters[i].fromJsonObject(instrumentObject[\"noteSubFilters\" + i]);\n                }\n            }\n            if (!Array.isArray(instrumentObject[\"eqFilter\"])) {\n                const legacySettings = {};\n                const filterCutoffMaxHz = 8000;\n                const filterCutoffRange = 11;\n                const filterResonanceRange = 8;\n                if (instrumentObject[\"filterCutoffHz\"] != undefined) {\n                    legacySettings.filterCutoff = clamp(0, filterCutoffRange, Math.round((filterCutoffRange - 1) + 2.0 * Math.log((instrumentObject[\"filterCutoffHz\"] | 0) / filterCutoffMaxHz) / Math.LN2));\n                }\n                else {\n                    legacySettings.filterCutoff = (this.type == 0) ? 6 : 10;\n                }\n                if (instrumentObject[\"filterResonance\"] != undefined) {\n                    legacySettings.filterResonance = clamp(0, filterResonanceRange, Math.round((filterResonanceRange - 1) * (instrumentObject[\"filterResonance\"] | 0) / 100));\n                }\n                else {\n                    legacySettings.filterResonance = 0;\n                }\n                legacySettings.filterEnvelope = getEnvelope(instrumentObject[\"filterEnvelope\"]);\n                legacySettings.pulseEnvelope = getEnvelope(instrumentObject[\"pulseEnvelope\"]);\n                legacySettings.feedbackEnvelope = getEnvelope(instrumentObject[\"feedbackEnvelope\"]);\n                if (Array.isArray(instrumentObject[\"operators\"])) {\n                    legacySettings.operatorEnvelopes = [];\n                    for (let j = 0; j < Config.operatorCount + (this.type == 11 ? 2 : 0); j++) {\n                        let envelope;\n                        if (instrumentObject[\"operators\"][j] != undefined) {\n                            envelope = getEnvelope(instrumentObject[\"operators\"][j][\"envelope\"]);\n                        }\n                        legacySettings.operatorEnvelopes[j] = (envelope != undefined) ? envelope : Config.envelopes.dictionary[\"none\"];\n                    }\n                }\n                if (instrumentObject[\"filter\"] != undefined) {\n                    const legacyToCutoff = [10, 6, 3, 0, 8, 5, 2];\n                    const legacyToEnvelope = [\"none\", \"none\", \"none\", \"none\", \"decay 1\", \"decay 2\", \"decay 3\"];\n                    const filterNames = [\"none\", \"bright\", \"medium\", \"soft\", \"decay bright\", \"decay medium\", \"decay soft\"];\n                    const oldFilterNames = { \"sustain sharp\": 1, \"sustain medium\": 2, \"sustain soft\": 3, \"decay sharp\": 4 };\n                    let legacyFilter = oldFilterNames[instrumentObject[\"filter\"]] != undefined ? oldFilterNames[instrumentObject[\"filter\"]] : filterNames.indexOf(instrumentObject[\"filter\"]);\n                    if (legacyFilter == -1)\n                        legacyFilter = 0;\n                    legacySettings.filterCutoff = legacyToCutoff[legacyFilter];\n                    legacySettings.filterEnvelope = getEnvelope(legacyToEnvelope[legacyFilter]);\n                    legacySettings.filterResonance = 0;\n                }\n                this.convertLegacySettings(legacySettings, true);\n            }\n            if (Array.isArray(instrumentObject[\"envelopes\"])) {\n                const envelopeArray = instrumentObject[\"envelopes\"];\n                for (let i = 0; i < envelopeArray.length; i++) {\n                    if (this.envelopeCount >= Config.maxEnvelopeCount)\n                        break;\n                    const tempEnvelope = new EnvelopeSettings(this.isNoiseInstrument);\n                    tempEnvelope.fromJsonObject(envelopeArray[i], format);\n                    let pitchEnvelopeStart;\n                    if (instrumentObject[\"pitchEnvelopeStart\"] != undefined && instrumentObject[\"pitchEnvelopeStart\"] != null) {\n                        pitchEnvelopeStart = instrumentObject[\"pitchEnvelopeStart\"];\n                    }\n                    else if (instrumentObject[\"pitchEnvelopeStart\" + i] != undefined && instrumentObject[\"pitchEnvelopeStart\" + i] != undefined) {\n                        pitchEnvelopeStart = instrumentObject[\"pitchEnvelopeStart\" + i];\n                    }\n                    else {\n                        pitchEnvelopeStart = tempEnvelope.pitchEnvelopeStart;\n                    }\n                    let pitchEnvelopeEnd;\n                    if (instrumentObject[\"pitchEnvelopeEnd\"] != undefined && instrumentObject[\"pitchEnvelopeEnd\"] != null) {\n                        pitchEnvelopeEnd = instrumentObject[\"pitchEnvelopeEnd\"];\n                    }\n                    else if (instrumentObject[\"pitchEnvelopeEnd\" + i] != undefined && instrumentObject[\"pitchEnvelopeEnd\" + i] != null) {\n                        pitchEnvelopeEnd = instrumentObject[\"pitchEnvelopeEnd\" + i];\n                    }\n                    else {\n                        pitchEnvelopeEnd = tempEnvelope.pitchEnvelopeEnd;\n                    }\n                    let envelopeInverse;\n                    if (instrumentObject[\"envelopeInverse\" + i] != undefined && instrumentObject[\"envelopeInverse\" + i] != null) {\n                        envelopeInverse = instrumentObject[\"envelopeInverse\" + i];\n                    }\n                    else if (instrumentObject[\"pitchEnvelopeInverse\"] != undefined && instrumentObject[\"pitchEnvelopeInverse\"] != null && Config.envelopes[tempEnvelope.envelope].name == \"pitch\") {\n                        envelopeInverse = instrumentObject[\"pitchEnvelopeInverse\"];\n                    }\n                    else {\n                        envelopeInverse = tempEnvelope.inverse;\n                    }\n                    let discreteEnvelope;\n                    if (instrumentObject[\"discreteEnvelope\"] != undefined) {\n                        discreteEnvelope = instrumentObject[\"discreteEnvelope\"];\n                    }\n                    else {\n                        discreteEnvelope = tempEnvelope.discrete;\n                    }\n                    this.addEnvelope(tempEnvelope.target, tempEnvelope.index, tempEnvelope.envelope, true, pitchEnvelopeStart, pitchEnvelopeEnd, envelopeInverse, tempEnvelope.perEnvelopeSpeed, tempEnvelope.perEnvelopeLowerBound, tempEnvelope.perEnvelopeUpperBound, tempEnvelope.steps, tempEnvelope.seed, tempEnvelope.waveform, discreteEnvelope);\n                }\n            }\n        }\n        if (type === 0) {\n            if (instrumentObject[\"isUsingAdvancedLoopControls\"] != undefined) {\n                this.isUsingAdvancedLoopControls = instrumentObject[\"isUsingAdvancedLoopControls\"];\n                this.chipWaveLoopStart = instrumentObject[\"chipWaveLoopStart\"];\n                this.chipWaveLoopEnd = instrumentObject[\"chipWaveLoopEnd\"];\n                this.chipWaveLoopMode = instrumentObject[\"chipWaveLoopMode\"];\n                this.chipWavePlayBackwards = instrumentObject[\"chipWavePlayBackwards\"];\n                this.chipWaveStartOffset = instrumentObject[\"chipWaveStartOffset\"];\n            }\n            else {\n                this.isUsingAdvancedLoopControls = false;\n                this.chipWaveLoopStart = 0;\n                this.chipWaveLoopEnd = Config.rawRawChipWaves[this.chipWave].samples.length - 1;\n                this.chipWaveLoopMode = 0;\n                this.chipWavePlayBackwards = false;\n                this.chipWaveStartOffset = 0;\n            }\n            this.chipWaveInStereo = instrumentObject[\"chipWaveInStereo\"];\n        }\n    }\n    getLargestControlPointCount(forNoteFilter) {\n        let largest;\n        if (forNoteFilter) {\n            largest = this.noteFilter.controlPointCount;\n            for (let i = 0; i < Config.filterMorphCount; i++) {\n                if (this.noteSubFilters[i] != null && this.noteSubFilters[i].controlPointCount > largest)\n                    largest = this.noteSubFilters[i].controlPointCount;\n            }\n        }\n        else {\n            largest = this.effects[0].eqFilter.controlPointCount;\n            for (let effectIndex = 0; effectIndex < this.effectCount; effectIndex++) {\n                if (this.effects[effectIndex] != null && this.effects[effectIndex].type == 5) {\n                    for (let i = 0; i < Config.filterMorphCount; i++) {\n                        if (this.effects[effectIndex].eqSubFilters[i] != null && this.effects[effectIndex].eqSubFilters[i].controlPointCount > largest)\n                            largest = this.effects[effectIndex].eqSubFilters[i].controlPointCount;\n                    }\n                }\n            }\n        }\n        return largest;\n    }\n    static frequencyFromPitch(pitch) {\n        return 440.0 * Math.pow(2.0, (pitch - 69.0) / 12.0);\n    }\n    addEffect(type) {\n        let newEffect = new Effect(type);\n        this.effects.push(newEffect);\n        this.effectCount++;\n        return newEffect;\n    }\n    removeEffect(type) {\n        for (let i = 0; i < this.effectCount; i++) {\n            if (this.effects[i] != null && this.effects[i].type == type) {\n                this.effects.splice(i, 1);\n                break;\n            }\n        }\n        this.effectCount--;\n    }\n    effectsIncludeType(type) {\n        for (let i = 0; i < this.effects.length; i++)\n            if (this.effects[i] != null && this.effects[i].type == type)\n                return true;\n        return false;\n    }\n    addEnvelope(target, index, envelope, newEnvelopes, start = 0, end = -1, inverse = false, perEnvelopeSpeed = -1, perEnvelopeLowerBound = 0, perEnvelopeUpperBound = 1, steps = 2, seed = 2, waveform = 0, discrete = false) {\n        end = end != -1 ? end : this.isNoiseInstrument ? Config.drumCount - 1 : Config.maxPitch;\n        perEnvelopeSpeed = perEnvelopeSpeed != -1 ? perEnvelopeSpeed : newEnvelopes ? 1 : Config.envelopes[envelope].speed;\n        let makeEmpty = false;\n        if (!this.supportsEnvelopeTarget(target, index))\n            makeEmpty = true;\n        if (this.envelopeCount >= Config.maxEnvelopeCount)\n            throw new Error();\n        while (this.envelopes.length <= this.envelopeCount)\n            this.envelopes[this.envelopes.length] = new EnvelopeSettings(this.isNoiseInstrument);\n        const envelopeSettings = this.envelopes[this.envelopeCount];\n        envelopeSettings.target = makeEmpty ? Config.instrumentAutomationTargets.dictionary[\"none\"].index : target;\n        envelopeSettings.index = makeEmpty ? 0 : index;\n        if (!newEnvelopes) {\n            envelopeSettings.envelope = clamp(0, Config.newEnvelopes.length, Config.envelopes[envelope].type);\n        }\n        else {\n            envelopeSettings.envelope = envelope;\n        }\n        envelopeSettings.pitchEnvelopeStart = start;\n        envelopeSettings.pitchEnvelopeEnd = end;\n        envelopeSettings.inverse = inverse;\n        envelopeSettings.perEnvelopeSpeed = perEnvelopeSpeed;\n        envelopeSettings.perEnvelopeLowerBound = perEnvelopeLowerBound;\n        envelopeSettings.perEnvelopeUpperBound = perEnvelopeUpperBound;\n        envelopeSettings.steps = steps;\n        envelopeSettings.seed = seed;\n        envelopeSettings.waveform = waveform;\n        envelopeSettings.discrete = discrete;\n        this.envelopeCount++;\n    }\n    supportsEnvelopeTarget(target, index) {\n        const automationTarget = Config.instrumentAutomationTargets[target];\n        if (automationTarget.computeIndex == null && automationTarget.name != \"none\") {\n            return false;\n        }\n        if (index >= automationTarget.maxCount) {\n            return false;\n        }\n        if (automationTarget.compatibleInstruments != null && automationTarget.compatibleInstruments.indexOf(this.type) == -1) {\n            return false;\n        }\n        if ((automationTarget.effect != null && !this.effectsIncludeType(automationTarget.effect)) || (automationTarget.mdeffect != null && (this.mdeffects & (1 << automationTarget.mdeffect)) == 0)) {\n            return false;\n        }\n        if (automationTarget.isFilter) {\n            let useControlPointCount = this.noteFilter.controlPointCount;\n            if (this.noteFilterType)\n                useControlPointCount = 1;\n            if (index >= useControlPointCount)\n                return false;\n        }\n        if ((automationTarget.name == \"operatorFrequency\") || (automationTarget.name == \"operatorAmplitude\")) {\n            if (index >= 4 + (this.type == 11 ? 2 : 0))\n                return false;\n        }\n        return true;\n    }\n    clearInvalidEnvelopeTargets() {\n        for (let envelopeIndex = 0; envelopeIndex < this.envelopeCount; envelopeIndex++) {\n            const target = this.envelopes[envelopeIndex].target;\n            const index = this.envelopes[envelopeIndex].index;\n            if (!this.supportsEnvelopeTarget(target, index)) {\n                this.envelopes[envelopeIndex].target = Config.instrumentAutomationTargets.dictionary[\"none\"].index;\n                this.envelopes[envelopeIndex].index = 0;\n            }\n        }\n    }\n    getTransition() {\n        return effectsIncludeTransition(this.mdeffects) ? Config.transitions[this.transition] :\n            (this.type == 10 ? Config.transitions.dictionary[\"interrupt\"] : Config.transitions.dictionary[\"normal\"]);\n    }\n    getFadeInSeconds() {\n        return (this.type == 4) ? 0.0 : fadeInSettingToSeconds(this.fadeIn);\n    }\n    getFadeOutTicks() {\n        return (this.type == 4) ? Config.drumsetFadeOutTicks : fadeOutSettingToTicks(this.fadeOut);\n    }\n    getChord() {\n        return effectsIncludeChord(this.mdeffects) ? Config.chords[this.chord] : Config.chords.dictionary[\"simultaneous\"];\n    }\n    getDrumsetEnvelope(pitch) {\n        if (this.type != 4)\n            throw new Error(\"Can't getDrumsetEnvelope() for non-drumset.\");\n        return Config.envelopes[this.drumsetEnvelopes[pitch]];\n    }\n}\n//# sourceMappingURL=Instrument.js.map","import { Config } from \"./SynthConfig\";\nimport { clamp } from \"./utils\";\nexport function makeNotePin(interval, time, size) {\n    return { interval: interval, time: time, size: size };\n}\nexport class Note {\n    constructor(pitch, start, end, size, fadeout = false, chipWaveStartOffset = 0) {\n        this.pitches = [pitch];\n        this.pins = [makeNotePin(0, 0, size), makeNotePin(0, end - start, fadeout ? 0 : size)];\n        this.start = start;\n        this.end = end;\n        this.continuesLastPattern = false;\n        this.chipWaveStartOffset = chipWaveStartOffset;\n    }\n    pickMainInterval() {\n        let longestFlatIntervalDuration = 0;\n        let mainInterval = 0;\n        for (let pinIndex = 1; pinIndex < this.pins.length; pinIndex++) {\n            const pinA = this.pins[pinIndex - 1];\n            const pinB = this.pins[pinIndex];\n            if (pinA.interval == pinB.interval) {\n                const duration = pinB.time - pinA.time;\n                if (longestFlatIntervalDuration < duration) {\n                    longestFlatIntervalDuration = duration;\n                    mainInterval = pinA.interval;\n                }\n            }\n        }\n        if (longestFlatIntervalDuration == 0) {\n            let loudestSize = 0;\n            for (let pinIndex = 0; pinIndex < this.pins.length; pinIndex++) {\n                const pin = this.pins[pinIndex];\n                if (loudestSize < pin.size) {\n                    loudestSize = pin.size;\n                    mainInterval = pin.interval;\n                }\n            }\n        }\n        return mainInterval;\n    }\n    clone() {\n        const newNote = new Note(-1, this.start, this.end, 3);\n        newNote.pitches = this.pitches.concat();\n        newNote.pins = [];\n        for (const pin of this.pins) {\n            newNote.pins.push(makeNotePin(pin.interval, pin.time, pin.size));\n        }\n        newNote.continuesLastPattern = this.continuesLastPattern;\n        return newNote;\n    }\n    getEndPinIndex(part) {\n        let endPinIndex;\n        for (endPinIndex = 1; endPinIndex < this.pins.length - 1; endPinIndex++) {\n            if (this.pins[endPinIndex].time + this.start > part)\n                break;\n        }\n        return endPinIndex;\n    }\n}\nexport class Pattern {\n    constructor() {\n        this.notes = [];\n        this.instruments = [0];\n    }\n    cloneNotes() {\n        const result = [];\n        for (const note of this.notes) {\n            result.push(note.clone());\n        }\n        return result;\n    }\n    reset() {\n        this.notes.length = 0;\n        this.instruments[0] = 0;\n        this.instruments.length = 1;\n    }\n    toJsonObject(song, channel, isModChannel) {\n        const noteArray = [];\n        for (const note of this.notes) {\n            let instrument = channel.instruments[this.instruments[0]];\n            let mod = Math.max(0, Config.modCount - note.pitches[0] - 1);\n            let volumeCap = song.getVolumeCapForSetting(isModChannel, instrument.modulators[mod], instrument.modFilterTypes[mod]);\n            const pointArray = [];\n            for (const pin of note.pins) {\n                let useVol = isModChannel ? Math.round(pin.size) : Math.round(pin.size * 100 / volumeCap);\n                pointArray.push({\n                    \"tick\": (pin.time + note.start) * Config.rhythms[song.rhythm].stepsPerBeat / Config.partsPerBeat,\n                    \"pitchBend\": pin.interval,\n                    \"volume\": useVol,\n                    \"forMod\": isModChannel,\n                });\n            }\n            const noteObject = {\n                \"pitches\": note.pitches,\n                \"points\": pointArray,\n            };\n            if (note.start == 0) {\n                noteObject[\"continuesLastPattern\"] = note.continuesLastPattern;\n            }\n            noteArray.push(noteObject);\n        }\n        const patternObject = { \"notes\": noteArray };\n        if (song.patternInstruments) {\n            patternObject[\"instruments\"] = this.instruments.map(i => i + 1);\n        }\n        return patternObject;\n    }\n    fromJsonObject(patternObject, song, channel, importedPartsPerBeat, isNoiseChannel, isModChannel, jsonFormat = \"auto\") {\n        const format = jsonFormat.toLowerCase();\n        if (song.patternInstruments) {\n            if (Array.isArray(patternObject[\"instruments\"])) {\n                const instruments = patternObject[\"instruments\"];\n                const instrumentCount = clamp(Config.instrumentCountMin, song.getMaxInstrumentsPerPatternForChannel(channel) + 1, instruments.length);\n                for (let j = 0; j < instrumentCount; j++) {\n                    this.instruments[j] = clamp(0, channel.instruments.length, (instruments[j] | 0) - 1);\n                }\n                this.instruments.length = instrumentCount;\n            }\n            else {\n                this.instruments[0] = clamp(0, channel.instruments.length, (patternObject[\"instrument\"] | 0) - 1);\n                this.instruments.length = 1;\n            }\n        }\n        if (patternObject[\"notes\"] && patternObject[\"notes\"].length > 0) {\n            const maxNoteCount = Math.min(song.beatsPerBar * Config.partsPerBeat * (isModChannel ? Config.modCount : 1), patternObject[\"notes\"].length >>> 0);\n            for (let j = 0; j < patternObject[\"notes\"].length; j++) {\n                if (j >= maxNoteCount)\n                    break;\n                const noteObject = patternObject[\"notes\"][j];\n                if (!noteObject || !noteObject[\"pitches\"] || !(noteObject[\"pitches\"].length >= 1) || !noteObject[\"points\"] || !(noteObject[\"points\"].length >= 2)) {\n                    continue;\n                }\n                const note = new Note(0, 0, 0, 0);\n                note.pitches = [];\n                note.pins = [];\n                for (let k = 0; k < noteObject[\"pitches\"].length; k++) {\n                    const pitch = noteObject[\"pitches\"][k] | 0;\n                    if (note.pitches.indexOf(pitch) != -1)\n                        continue;\n                    note.pitches.push(pitch);\n                    if (note.pitches.length >= Config.maxChordSize)\n                        break;\n                }\n                if (note.pitches.length < 1)\n                    continue;\n                let startInterval = 0;\n                let instrument = channel.instruments[this.instruments[0]];\n                let mod = Math.max(0, Config.modCount - note.pitches[0] - 1);\n                for (let k = 0; k < noteObject[\"points\"].length; k++) {\n                    const pointObject = noteObject[\"points\"][k];\n                    if (pointObject == undefined || pointObject[\"tick\"] == undefined)\n                        continue;\n                    const interval = (pointObject[\"pitchBend\"] == undefined) ? 0 : (pointObject[\"pitchBend\"] | 0);\n                    const time = Math.round((+pointObject[\"tick\"]) * Config.partsPerBeat / importedPartsPerBeat);\n                    let volumeCap = song.getVolumeCapForSetting(isModChannel, instrument.modulators[mod], instrument.modFilterTypes[mod]);\n                    let size;\n                    if (pointObject[\"volume\"] == undefined) {\n                        size = volumeCap;\n                    }\n                    else if (pointObject[\"forMod\"] == undefined) {\n                        size = Math.max(0, Math.min(volumeCap, Math.round((pointObject[\"volume\"] | 0) * volumeCap / 100)));\n                    }\n                    else {\n                        size = ((pointObject[\"forMod\"] | 0) > 0) ? Math.round(pointObject[\"volume\"] | 0) : Math.max(0, Math.min(volumeCap, Math.round((pointObject[\"volume\"] | 0) * volumeCap / 100)));\n                    }\n                    if (time > song.beatsPerBar * Config.partsPerBeat)\n                        continue;\n                    if (note.pins.length == 0) {\n                        note.start = time;\n                        startInterval = interval;\n                    }\n                    else {\n                    }\n                    note.pins.push(makeNotePin(interval - startInterval, time - note.start, size));\n                }\n                if (note.pins.length < 2)\n                    continue;\n                note.end = note.pins[note.pins.length - 1].time + note.start;\n                const maxPitch = isNoiseChannel ? Config.drumCount - 1 : Config.maxPitch;\n                let lowestPitch = maxPitch;\n                let highestPitch = 0;\n                for (let k = 0; k < note.pitches.length; k++) {\n                    note.pitches[k] += startInterval;\n                    if (note.pitches[k] < 0 || note.pitches[k] > maxPitch) {\n                        note.pitches.splice(k, 1);\n                        k--;\n                    }\n                    if (note.pitches[k] < lowestPitch)\n                        lowestPitch = note.pitches[k];\n                    if (note.pitches[k] > highestPitch)\n                        highestPitch = note.pitches[k];\n                }\n                if (note.pitches.length < 1)\n                    continue;\n                for (let k = 0; k < note.pins.length; k++) {\n                    const pin = note.pins[k];\n                    if (pin.interval + lowestPitch < 0)\n                        pin.interval = -lowestPitch;\n                    if (pin.interval + highestPitch > maxPitch)\n                        pin.interval = maxPitch - highestPitch;\n                    if (k >= 2) {\n                        if (pin.interval == note.pins[k - 1].interval &&\n                            pin.interval == note.pins[k - 2].interval &&\n                            pin.size == note.pins[k - 1].size &&\n                            pin.size == note.pins[k - 2].size) {\n                            note.pins.splice(k - 1, 1);\n                            k--;\n                        }\n                    }\n                }\n                if (note.start == 0) {\n                    note.continuesLastPattern = (noteObject[\"continuesLastPattern\"] === true);\n                }\n                else {\n                    note.continuesLastPattern = false;\n                }\n                if ((format != \"ultrabox\" && format != \"slarmoosbox\") && instrument.modulators[mod] == Config.modulators.dictionary[\"tempo\"].index) {\n                    for (const pin of note.pins) {\n                        const oldMin = 30;\n                        const newMin = 1;\n                        const old = pin.size + oldMin;\n                        pin.size = old - newMin;\n                    }\n                }\n                this.notes.push(note);\n            }\n        }\n    }\n}\n//# sourceMappingURL=Pattern.js.map","import { startLoadingSample, sampleLoadingState, sampleLoadEvents, SampleLoadedEvent, loadBuiltInSamples, toNameMap, Config, effectsIncludeTransition, effectsIncludeChord, effectsIncludePitchShift, effectsIncludeDetune, effectsIncludeVibrato } from \"./SynthConfig\";\nimport { EditorConfig } from \"../editor/EditorConfig\";\nimport { Channel } from \"./Channel\";\nimport { Instrument } from \"./Instrument\";\nimport { Note, makeNotePin, Pattern } from \"./Pattern\";\nimport { FilterSettings, FilterControlPoint } from \"./Filter\";\nimport { clamp, validateRange, parseFloatWithDefault, parseIntWithDefault, secondsToFadeInSetting, ticksToFadeOutSetting } from \"./utils\";\nfunction encode32BitNumber(buffer, x) {\n    buffer.push(base64IntToCharCode[(x >>> (6 * 5)) & 0x3]);\n    buffer.push(base64IntToCharCode[(x >>> (6 * 4)) & 0x3f]);\n    buffer.push(base64IntToCharCode[(x >>> (6 * 3)) & 0x3f]);\n    buffer.push(base64IntToCharCode[(x >>> (6 * 2)) & 0x3f]);\n    buffer.push(base64IntToCharCode[(x >>> (6 * 1)) & 0x3f]);\n    buffer.push(base64IntToCharCode[(x >>> (6 * 0)) & 0x3f]);\n}\nfunction decode32BitNumber(compressed, charIndex) {\n    let x = 0;\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 5);\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 4);\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 3);\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 2);\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 1);\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 0);\n    return x;\n}\nfunction encodeUnisonSettings(buffer, v, s, o, e, i) {\n    buffer.push(base64IntToCharCode[v]);\n    buffer.push(base64IntToCharCode[Number((s > 0))]);\n    let cleanS = Math.round(Math.abs(s) * 1000);\n    let cleanSDivided = Math.floor(cleanS / 63);\n    buffer.push(base64IntToCharCode[cleanS % 63], base64IntToCharCode[cleanSDivided % 63], base64IntToCharCode[Math.floor(cleanSDivided / 63)]);\n    buffer.push(base64IntToCharCode[Number((o > 0))]);\n    let cleanO = Math.round(Math.abs(o) * 1000);\n    let cleanODivided = Math.floor(cleanO / 63);\n    buffer.push(base64IntToCharCode[cleanO % 63], base64IntToCharCode[cleanODivided % 63], base64IntToCharCode[Math.floor(cleanODivided / 63)]);\n    buffer.push(base64IntToCharCode[Number((e > 0))]);\n    let cleanE = Math.round(Math.abs(e) * 1000);\n    buffer.push(base64IntToCharCode[cleanE % 63], base64IntToCharCode[Math.floor(cleanE / 63)]);\n    buffer.push(base64IntToCharCode[Number((i > 0))]);\n    let cleanI = Math.round(Math.abs(i) * 1000);\n    buffer.push(base64IntToCharCode[cleanI % 63], base64IntToCharCode[Math.floor(cleanI / 63)]);\n}\nfunction convertLegacyKeyToKeyAndOctave(rawKeyIndex) {\n    let key = clamp(0, Config.keys.length, rawKeyIndex);\n    let octave = 0;\n    if (rawKeyIndex === 12) {\n        key = 0;\n        octave = 1;\n    }\n    else if (rawKeyIndex === 13) {\n        key = 6;\n        octave = -1;\n    }\n    else if (rawKeyIndex === 14) {\n        key = 0;\n        octave = -1;\n    }\n    else if (rawKeyIndex === 15) {\n        key = 5;\n        octave = -1;\n    }\n    return [key, octave];\n}\nconst base64IntToCharCode = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 45, 95];\nconst base64CharCodeToInt = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 62, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0, 0, 0, 0, 63, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 0, 0, 0, 0, 0];\nclass BitFieldReader {\n    constructor(source, startIndex, stopIndex) {\n        this._bits = [];\n        this._readIndex = 0;\n        for (let i = startIndex; i < stopIndex; i++) {\n            const value = base64CharCodeToInt[source.charCodeAt(i)];\n            this._bits.push((value >> 5) & 0x1);\n            this._bits.push((value >> 4) & 0x1);\n            this._bits.push((value >> 3) & 0x1);\n            this._bits.push((value >> 2) & 0x1);\n            this._bits.push((value >> 1) & 0x1);\n            this._bits.push(value & 0x1);\n        }\n    }\n    read(bitCount) {\n        let result = 0;\n        while (bitCount > 0) {\n            result = result << 1;\n            result += this._bits[this._readIndex++];\n            bitCount--;\n        }\n        return result;\n    }\n    readLongTail(minValue, minBits) {\n        let result = minValue;\n        let numBits = minBits;\n        while (this._bits[this._readIndex++]) {\n            result += 1 << numBits;\n            numBits++;\n        }\n        while (numBits > 0) {\n            numBits--;\n            if (this._bits[this._readIndex++]) {\n                result += 1 << numBits;\n            }\n        }\n        return result;\n    }\n    readPartDuration() {\n        return this.readLongTail(1, 3);\n    }\n    readLegacyPartDuration() {\n        return this.readLongTail(1, 2);\n    }\n    readPinCount() {\n        return this.readLongTail(1, 0);\n    }\n    readPitchInterval() {\n        if (this.read(1)) {\n            return -this.readLongTail(1, 3);\n        }\n        else {\n            return this.readLongTail(1, 3);\n        }\n    }\n}\nclass BitFieldWriter {\n    constructor() {\n        this._index = 0;\n        this._bits = [];\n    }\n    clear() {\n        this._index = 0;\n    }\n    write(bitCount, value) {\n        bitCount--;\n        while (bitCount >= 0) {\n            this._bits[this._index++] = (value >>> bitCount) & 1;\n            bitCount--;\n        }\n    }\n    writeLongTail(minValue, minBits, value) {\n        if (value < minValue)\n            throw new Error(\"value out of bounds\");\n        value -= minValue;\n        let numBits = minBits;\n        while (value >= (1 << numBits)) {\n            this._bits[this._index++] = 1;\n            value -= 1 << numBits;\n            numBits++;\n        }\n        this._bits[this._index++] = 0;\n        while (numBits > 0) {\n            numBits--;\n            this._bits[this._index++] = (value >>> numBits) & 1;\n        }\n    }\n    writePartDuration(value) {\n        this.writeLongTail(1, 3, value);\n    }\n    writePinCount(value) {\n        this.writeLongTail(1, 0, value);\n    }\n    writePitchInterval(value) {\n        if (value < 0) {\n            this.write(1, 1);\n            this.writeLongTail(1, 3, -value);\n        }\n        else {\n            this.write(1, 0);\n            this.writeLongTail(1, 3, value);\n        }\n    }\n    concat(other) {\n        for (let i = 0; i < other._index; i++) {\n            this._bits[this._index++] = other._bits[i];\n        }\n    }\n    encodeBase64(buffer) {\n        for (let i = 0; i < this._index; i += 6) {\n            const value = (this._bits[i] << 5) | (this._bits[i + 1] << 4) | (this._bits[i + 2] << 3) | (this._bits[i + 3] << 2) | (this._bits[i + 4] << 1) | this._bits[i + 5];\n            buffer.push(base64IntToCharCode[value]);\n        }\n        return buffer;\n    }\n    lengthBase64() {\n        return Math.ceil(this._index / 6);\n    }\n}\nexport class Song {\n    constructor(string) {\n        this.scaleCustom = [];\n        this.channels = [];\n        this.limitDecay = 4.0;\n        this.limitRise = 4000.0;\n        this.compressionThreshold = 1.0;\n        this.limitThreshold = 1.0;\n        this.compressionRatio = 1.0;\n        this.limitRatio = 1.0;\n        this.masterGain = 1.0;\n        this.inVolumeCap = 0.0;\n        this.outVolumeCap = 0.0;\n        this.outVolumeCapL = 0.0;\n        this.outVolumeCapR = 0.0;\n        this.eqFilter = new FilterSettings();\n        this.eqFilterType = false;\n        this.eqFilterSimpleCut = Config.filterSimpleCutRange - 1;\n        this.eqFilterSimplePeak = 0;\n        this.eqSubFilters = [];\n        this.getNewNoteVolume = (isMod, modChannel, modInstrument, modCount) => {\n            if (!isMod || modChannel == undefined || modInstrument == undefined || modCount == undefined)\n                return Config.noteSizeMax;\n            else {\n                modCount = Config.modCount - modCount - 1;\n                const instrument = this.channels[modChannel].instruments[modInstrument];\n                let vol = Config.modulators[instrument.modulators[modCount]].newNoteVol;\n                let currentIndex = instrument.modulators[modCount];\n                let tempoIndex = Config.modulators.dictionary[\"tempo\"].index;\n                if (currentIndex == tempoIndex)\n                    vol = this.tempo - Config.modulators[tempoIndex].convertRealFactor;\n                if (!Config.modulators[currentIndex].forSong && instrument.modInstruments[modCount][0] < this.channels[instrument.modChannels[modCount][0]].instruments.length) {\n                    let chorusIndex = Config.modulators.dictionary[\"chorus\"].index;\n                    let reverbIndex = Config.modulators.dictionary[\"reverb\"].index;\n                    let gainIndex = Config.modulators.dictionary[\"gain\"].index;\n                    let panningIndex = Config.modulators.dictionary[\"pan\"].index;\n                    let panDelayIndex = Config.modulators.dictionary[\"pan delay\"].index;\n                    let distortionIndex = Config.modulators.dictionary[\"distortion\"].index;\n                    let detuneIndex = Config.modulators.dictionary[\"detune\"].index;\n                    let vibratoDepthIndex = Config.modulators.dictionary[\"vibrato depth\"].index;\n                    let vibratoSpeedIndex = Config.modulators.dictionary[\"vibrato speed\"].index;\n                    let vibratoDelayIndex = Config.modulators.dictionary[\"vibrato delay\"].index;\n                    let arpSpeedIndex = Config.modulators.dictionary[\"arp speed\"].index;\n                    let bitCrushIndex = Config.modulators.dictionary[\"bit crush\"].index;\n                    let freqCrushIndex = Config.modulators.dictionary[\"freq crush\"].index;\n                    let echoIndex = Config.modulators.dictionary[\"echo\"].index;\n                    let echoDelayIndex = Config.modulators.dictionary[\"echo delay\"].index;\n                    let echoPingPongIndex = Config.modulators.dictionary[\"echo ping pong\"].index;\n                    let pitchShiftIndex = Config.modulators.dictionary[\"pitch shift\"].index;\n                    let ringModIndex = Config.modulators.dictionary[\"ring modulation\"].index;\n                    let ringModHertzIndex = Config.modulators.dictionary[\"ring mod hertz\"].index;\n                    let granularIndex = Config.modulators.dictionary[\"granular\"].index;\n                    let grainAmountIndex = Config.modulators.dictionary[\"grain freq\"].index;\n                    let grainSizeIndex = Config.modulators.dictionary[\"grain size\"].index;\n                    let grainRangeIndex = Config.modulators.dictionary[\"grain range\"].index;\n                    let envSpeedIndex = Config.modulators.dictionary[\"envelope speed\"].index;\n                    let perEnvSpeedIndex = Config.modulators.dictionary[\"individual envelope speed\"].index;\n                    let perEnvLowerIndex = Config.modulators.dictionary[\"individual envelope lower bound\"].index;\n                    let perEnvUpperIndex = Config.modulators.dictionary[\"individual envelope upper bound\"].index;\n                    let instrumentIndex = instrument.modInstruments[modCount][0];\n                    let effectIndex = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effectCount;\n                    switch (currentIndex) {\n                        case chorusIndex:\n                            vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex].chorus - Config.modulators[chorusIndex].convertRealFactor;\n                            break;\n                        case reverbIndex:\n                            vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex].reverb - Config.modulators[reverbIndex].convertRealFactor;\n                            break;\n                        case gainIndex:\n                            vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex].gain - Config.modulators[gainIndex].convertRealFactor;\n                            break;\n                        case panningIndex:\n                            vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex].pan - Config.modulators[panningIndex].convertRealFactor;\n                            break;\n                        case panDelayIndex:\n                            vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex].panDelay - Config.modulators[panDelayIndex].convertRealFactor;\n                            break;\n                        case distortionIndex:\n                            vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex].distortion - Config.modulators[distortionIndex].convertRealFactor;\n                            break;\n                        case detuneIndex:\n                            vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].detune;\n                            break;\n                        case vibratoDepthIndex:\n                            vol = Math.round(this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].vibratoDepth * 25 - Config.modulators[vibratoDepthIndex].convertRealFactor);\n                            break;\n                        case vibratoSpeedIndex:\n                            vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].vibratoSpeed - Config.modulators[vibratoSpeedIndex].convertRealFactor;\n                            break;\n                        case vibratoDelayIndex:\n                            vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].vibratoDelay - Config.modulators[vibratoDelayIndex].convertRealFactor;\n                            break;\n                        case arpSpeedIndex:\n                            vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].arpeggioSpeed - Config.modulators[arpSpeedIndex].convertRealFactor;\n                            break;\n                        case bitCrushIndex:\n                            vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex].bitcrusherQuantization - Config.modulators[bitCrushIndex].convertRealFactor;\n                            break;\n                        case freqCrushIndex:\n                            vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex].bitcrusherFreq - Config.modulators[freqCrushIndex].convertRealFactor;\n                            break;\n                        case echoIndex:\n                            vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex].echoSustain - Config.modulators[echoIndex].convertRealFactor;\n                            break;\n                        case echoDelayIndex:\n                            vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex].echoDelay - Config.modulators[echoDelayIndex].convertRealFactor;\n                            break;\n                        case echoPingPongIndex:\n                            vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex].echoPingPong - Config.modulators[echoPingPongIndex].convertRealFactor;\n                            break;\n                        case pitchShiftIndex:\n                            vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].pitchShift;\n                            break;\n                        case ringModIndex:\n                            vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex].ringModulation - Config.modulators[ringModIndex].convertRealFactor;\n                            break;\n                        case ringModHertzIndex:\n                            vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex].ringModulationHz - Config.modulators[ringModHertzIndex].convertRealFactor;\n                            break;\n                        case granularIndex:\n                            vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex].granular - Config.modulators[granularIndex].convertRealFactor;\n                            break;\n                        case grainAmountIndex:\n                            vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex].grainAmounts - Config.modulators[grainAmountIndex].convertRealFactor;\n                            break;\n                        case grainSizeIndex:\n                            vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex].grainSize - Config.modulators[grainSizeIndex].convertRealFactor;\n                            break;\n                        case grainRangeIndex:\n                            vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex].grainRange - Config.modulators[grainRangeIndex].convertRealFactor;\n                            break;\n                        case envSpeedIndex:\n                            vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].envelopeSpeed - Config.modulators[envSpeedIndex].convertRealFactor;\n                            break;\n                        case perEnvSpeedIndex:\n                            vol = Config.perEnvelopeSpeedToIndices[this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].envelopes[instrument.modEnvelopeNumbers[modCount]].perEnvelopeSpeed] - Config.modulators[perEnvSpeedIndex].convertRealFactor;\n                            break;\n                        case perEnvLowerIndex:\n                            vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].envelopes[instrument.modEnvelopeNumbers[modCount]].perEnvelopeLowerBound - Config.modulators[perEnvLowerIndex].convertRealFactor;\n                            break;\n                        case perEnvUpperIndex:\n                            vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].envelopes[instrument.modEnvelopeNumbers[modCount]].perEnvelopeUpperBound - Config.modulators[perEnvUpperIndex].convertRealFactor;\n                            break;\n                    }\n                }\n                if (vol != undefined)\n                    return vol;\n                else\n                    return Config.noteSizeMax;\n            }\n        };\n        this.getVolumeCap = (isMod, modChannel, modInstrument, modCount) => {\n            if (!isMod || modChannel == undefined || modInstrument == undefined || modCount == undefined)\n                return Config.noteSizeMax;\n            else {\n                modCount = Config.modCount - modCount - 1;\n                let instrument = this.channels[modChannel].instruments[modInstrument];\n                let modulator = Config.modulators[instrument.modulators[modCount]];\n                let cap = modulator.maxRawVol;\n                if (cap != undefined) {\n                    if (modulator.name == \"post eq\" || modulator.name == \"pre eq\" || modulator.name == \"song eq\") {\n                        cap = Config.filterMorphCount - 1;\n                        if (instrument.modFilterTypes[modCount] > 0 && instrument.modFilterTypes[modCount] % 2) {\n                            cap = Config.filterFreqRange;\n                        }\n                        else if (instrument.modFilterTypes[modCount] > 0) {\n                            cap = Config.filterGainRange;\n                        }\n                    }\n                    return cap;\n                }\n                else\n                    return Config.noteSizeMax;\n            }\n        };\n        this.getVolumeCapForSetting = (isMod, modSetting, filterType) => {\n            if (!isMod)\n                return Config.noteSizeMax;\n            else {\n                let cap = Config.modulators[modSetting].maxRawVol;\n                if (cap != undefined) {\n                    if (filterType != undefined && (Config.modulators[modSetting].name == \"post eq\" || Config.modulators[modSetting].name == \"pre eq\" || Config.modulators[modSetting].name == \"song eq\")) {\n                        cap = Config.filterMorphCount - 1;\n                        if (filterType > 0 && filterType % 2) {\n                            cap = Config.filterFreqRange;\n                        }\n                        else if (filterType > 0) {\n                            cap = Config.filterGainRange;\n                        }\n                    }\n                    return cap;\n                }\n                else\n                    return Config.noteSizeMax;\n            }\n        };\n        if (string != undefined) {\n            this.fromBase64String(string);\n        }\n        else {\n            this.initToDefault(true);\n        }\n    }\n    getChannelCount() {\n        return this.pitchChannelCount + this.noiseChannelCount + this.modChannelCount;\n    }\n    getMaxInstrumentsPerChannel() {\n        return Math.max(this.layeredInstruments ? Config.layeredInstrumentCountMax : Config.instrumentCountMin, this.patternInstruments ? Config.patternInstrumentCountMax : Config.instrumentCountMin);\n    }\n    getMaxInstrumentsPerPattern(channelIndex) {\n        return this.getMaxInstrumentsPerPatternForChannel(this.channels[channelIndex]);\n    }\n    getMaxInstrumentsPerPatternForChannel(channel) {\n        return this.layeredInstruments\n            ? Math.min(Config.layeredInstrumentCountMax, channel.instruments.length)\n            : 1;\n    }\n    getChannelIsNoise(channelIndex) {\n        return (channelIndex >= this.pitchChannelCount && channelIndex < this.pitchChannelCount + this.noiseChannelCount);\n    }\n    getChannelIsMod(channelIndex) {\n        return (channelIndex >= this.pitchChannelCount + this.noiseChannelCount);\n    }\n    static secondsToFadeInSetting(seconds) {\n        return clamp(0, Config.fadeInRange, Math.round((-0.95 + Math.sqrt(0.9025 + 0.2 * seconds / 0.0125)) / 0.1));\n    }\n    static ticksToFadeOutSetting(ticks) {\n        let lower = Config.fadeOutTicks[0];\n        if (ticks <= lower)\n            return 0;\n        for (let i = 1; i < Config.fadeOutTicks.length; i++) {\n            let upper = Config.fadeOutTicks[i];\n            if (ticks <= upper)\n                return (ticks < (lower + upper) / 2) ? i - 1 : i;\n            lower = upper;\n        }\n        return Config.fadeOutTicks.length - 1;\n    }\n    initToDefault(andResetChannels = true) {\n        this.scale = 1;\n        this.scaleCustom = [true, false, true, true, false, false, false, true, true, false, true, true];\n        this.key = 0;\n        this.octave = 0;\n        this.loopStart = 0;\n        this.loopLength = 4;\n        this.tempo = 151;\n        this.reverb = 0;\n        this.beatsPerBar = 8;\n        this.barCount = 16;\n        this.patternsPerChannel = 8;\n        this.rhythm = 1;\n        this.layeredInstruments = false;\n        this.patternInstruments = false;\n        this.eqFilter.reset();\n        for (let i = 0; i < Config.filterMorphCount - 1; i++) {\n            this.eqSubFilters[i] = null;\n        }\n        this.title = \"Untitled\";\n        document.title = this.title + \" - \" + EditorConfig.versionDisplayName;\n        if (andResetChannels) {\n            this.pitchChannelCount = 4;\n            this.noiseChannelCount = 1;\n            this.modChannelCount = 0;\n            for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                const isNoiseChannel = channelIndex >= this.pitchChannelCount && channelIndex < this.pitchChannelCount + this.noiseChannelCount;\n                const isModChannel = channelIndex >= this.pitchChannelCount + this.noiseChannelCount;\n                if (this.channels.length <= channelIndex) {\n                    this.channels[channelIndex] = new Channel();\n                    this.channels[channelIndex].color = channelIndex;\n                }\n                const channel = this.channels[channelIndex];\n                channel.octave = Math.max(4 - channelIndex, 0);\n                for (let pattern = 0; pattern < this.patternsPerChannel; pattern++) {\n                    if (channel.patterns.length <= pattern) {\n                        channel.patterns[pattern] = new Pattern();\n                    }\n                    else {\n                        channel.patterns[pattern].reset();\n                    }\n                }\n                channel.patterns.length = this.patternsPerChannel;\n                for (let instrument = 0; instrument < Config.instrumentCountMin; instrument++) {\n                    if (channel.instruments.length <= instrument) {\n                        channel.instruments[instrument] = new Instrument(isNoiseChannel, isModChannel);\n                    }\n                    channel.instruments[instrument].setTypeAndReset(isModChannel ? 10 : (isNoiseChannel ? 2 : 0), isNoiseChannel, isModChannel);\n                }\n                channel.instruments.length = Config.instrumentCountMin;\n                for (let bar = 0; bar < this.barCount; bar++) {\n                    channel.bars[bar] = bar < 16 ? 1 : 0;\n                }\n                channel.bars.length = this.barCount;\n            }\n            this.channels.length = this.getChannelCount();\n        }\n    }\n    toBase64String() {\n        let bits;\n        let buffer = [];\n        buffer.push(Song._variant);\n        buffer.push(base64IntToCharCode[Song._latestSlarmoosBoxVersion]);\n        buffer.push(78);\n        var encodedSongTitle = encodeURIComponent(this.title);\n        buffer.push(base64IntToCharCode[encodedSongTitle.length >> 6], base64IntToCharCode[encodedSongTitle.length & 0x3f]);\n        for (let i = 0; i < encodedSongTitle.length; i++) {\n            buffer.push(encodedSongTitle.charCodeAt(i));\n        }\n        buffer.push(110, base64IntToCharCode[this.pitchChannelCount], base64IntToCharCode[this.noiseChannelCount], base64IntToCharCode[this.modChannelCount]);\n        buffer.push(115, base64IntToCharCode[this.scale]);\n        if (this.scale == Config.scales[\"dictionary\"][\"Custom\"].index) {\n            for (var i = 1; i < Config.pitchesPerOctave; i++) {\n                buffer.push(base64IntToCharCode[this.scaleCustom[i] ? 1 : 0]);\n            }\n        }\n        buffer.push(107, base64IntToCharCode[this.key], base64IntToCharCode[this.octave - Config.octaveMin]);\n        buffer.push(108, base64IntToCharCode[this.loopStart >> 6], base64IntToCharCode[this.loopStart & 0x3f]);\n        buffer.push(101, base64IntToCharCode[(this.loopLength - 1) >> 6], base64IntToCharCode[(this.loopLength - 1) & 0x3f]);\n        buffer.push(116, base64IntToCharCode[this.tempo >> 6], base64IntToCharCode[this.tempo & 0x3F]);\n        buffer.push(97, base64IntToCharCode[this.beatsPerBar - 1]);\n        buffer.push(103, base64IntToCharCode[(this.barCount - 1) >> 6], base64IntToCharCode[(this.barCount - 1) & 0x3f]);\n        buffer.push(106, base64IntToCharCode[(this.patternsPerChannel - 1) >> 6], base64IntToCharCode[(this.patternsPerChannel - 1) & 0x3f]);\n        buffer.push(114, base64IntToCharCode[this.rhythm]);\n        buffer.push(79);\n        if (this.compressionRatio != 1.0 || this.limitRatio != 1.0 || this.limitRise != 4000.0 || this.limitDecay != 4.0 || this.limitThreshold != 1.0 || this.compressionThreshold != 1.0 || this.masterGain != 1.0) {\n            buffer.push(base64IntToCharCode[Math.round(this.compressionRatio < 1 ? this.compressionRatio * 10 : 10 + (this.compressionRatio - 1) * 60)]);\n            buffer.push(base64IntToCharCode[Math.round(this.limitRatio < 1 ? this.limitRatio * 10 : 9 + this.limitRatio)]);\n            buffer.push(base64IntToCharCode[this.limitDecay]);\n            buffer.push(base64IntToCharCode[Math.round((this.limitRise - 2000.0) / 250.0)]);\n            buffer.push(base64IntToCharCode[Math.round(this.compressionThreshold * 20)]);\n            buffer.push(base64IntToCharCode[Math.round(this.limitThreshold * 20)]);\n            buffer.push(base64IntToCharCode[Math.round(this.masterGain * 50) >> 6], base64IntToCharCode[Math.round(this.masterGain * 50) & 0x3f]);\n        }\n        else {\n            buffer.push(base64IntToCharCode[0x3f]);\n        }\n        buffer.push(99);\n        if (this.eqFilter == null) {\n            buffer.push(base64IntToCharCode[0]);\n            console.log(\"Null post eq settings detected in toBase64String for song\");\n        }\n        else {\n            buffer.push(base64IntToCharCode[this.eqFilter.controlPointCount]);\n            for (let j = 0; j < this.eqFilter.controlPointCount; j++) {\n                const point = this.eqFilter.controlPoints[j];\n                buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\n            }\n        }\n        let usingSubFilterBitfield = 0;\n        for (let j = 0; j < Config.filterMorphCount - 1; j++) {\n            usingSubFilterBitfield |= (+(this.eqSubFilters[j + 1] != null) << j);\n        }\n        buffer.push(base64IntToCharCode[usingSubFilterBitfield >> 6], base64IntToCharCode[usingSubFilterBitfield & 63]);\n        for (let j = 0; j < Config.filterMorphCount - 1; j++) {\n            if (usingSubFilterBitfield & (1 << j)) {\n                buffer.push(base64IntToCharCode[this.eqSubFilters[j + 1].controlPointCount]);\n                for (let k = 0; k < this.eqSubFilters[j + 1].controlPointCount; k++) {\n                    const point = this.eqSubFilters[j + 1].controlPoints[k];\n                    buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\n                }\n            }\n        }\n        buffer.push(85);\n        for (let channel = 0; channel < this.getChannelCount(); channel++) {\n            var encodedChannelName = encodeURIComponent(this.channels[channel].name);\n            buffer.push(base64IntToCharCode[encodedChannelName.length >> 6], base64IntToCharCode[encodedChannelName.length & 0x3f]);\n            for (let i = 0; i < encodedChannelName.length; i++) {\n                buffer.push(encodedChannelName.charCodeAt(i));\n            }\n            buffer.push(base64IntToCharCode[this.channels[channel].color % 60]);\n        }\n        buffer.push(105, base64IntToCharCode[(this.layeredInstruments << 1) | this.patternInstruments]);\n        if (this.layeredInstruments || this.patternInstruments) {\n            for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                buffer.push(base64IntToCharCode[this.channels[channelIndex].instruments.length - Config.instrumentCountMin]);\n            }\n        }\n        buffer.push(111);\n        for (let channelIndex = 0; channelIndex < this.pitchChannelCount; channelIndex++) {\n            buffer.push(base64IntToCharCode[this.channels[channelIndex].octave]);\n        }\n        for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n            for (let i = 0; i < this.channels[channelIndex].instruments.length; i++) {\n                const instrument = this.channels[channelIndex].instruments[i];\n                buffer.push(84, base64IntToCharCode[instrument.type]);\n                buffer.push(118, base64IntToCharCode[(instrument.volume + Config.volumeRange / 2) >> 6], base64IntToCharCode[(instrument.volume + Config.volumeRange / 2) & 0x3f]);\n                buffer.push(117, base64IntToCharCode[instrument.preset >> 6], base64IntToCharCode[instrument.preset & 63]);\n                buffer.push(102);\n                buffer.push(base64IntToCharCode[+instrument.noteFilterType]);\n                if (instrument.noteFilterType) {\n                    buffer.push(base64IntToCharCode[instrument.noteFilterSimpleCut]);\n                    buffer.push(base64IntToCharCode[instrument.noteFilterSimplePeak]);\n                }\n                else {\n                    if (instrument.noteFilter == null) {\n                        buffer.push(base64IntToCharCode[0]);\n                        console.log(\"Null pre eq settings detected in toBase64String for channelIndex \" + channelIndex + \", instrumentIndex \" + i);\n                    }\n                    else {\n                        buffer.push(base64IntToCharCode[instrument.noteFilter.controlPointCount]);\n                        for (let j = 0; j < instrument.noteFilter.controlPointCount; j++) {\n                            const point = instrument.noteFilter.controlPoints[j];\n                            buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\n                        }\n                    }\n                    let usingSubFilterBitfield = 0;\n                    for (let j = 0; j < Config.filterMorphCount - 1; j++) {\n                        usingSubFilterBitfield |= (+(instrument.noteSubFilters[j + 1] != null) << j);\n                    }\n                    buffer.push(base64IntToCharCode[usingSubFilterBitfield >> 6], base64IntToCharCode[usingSubFilterBitfield & 63]);\n                    for (let j = 0; j < Config.filterMorphCount - 1; j++) {\n                        if (usingSubFilterBitfield & (1 << j)) {\n                            buffer.push(base64IntToCharCode[instrument.noteSubFilters[j + 1].controlPointCount]);\n                            for (let k = 0; k < instrument.noteSubFilters[j + 1].controlPointCount; k++) {\n                                const point = instrument.noteSubFilters[j + 1].controlPoints[k];\n                                buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\n                            }\n                        }\n                    }\n                }\n                buffer.push(113, base64IntToCharCode[instrument.effectCount]);\n                for (let effectIndex = 0; effectIndex < instrument.effectCount; effectIndex++) {\n                    if (instrument.effects[effectIndex] != null)\n                        buffer.push(base64IntToCharCode[instrument.effects[effectIndex].type & 63]);\n                    else {\n                        buffer.push(base64IntToCharCode[0]);\n                        continue;\n                    }\n                    let effect = instrument.effects[effectIndex];\n                    if (effect.type == 5) {\n                        buffer.push(base64IntToCharCode[+effect.eqFilterType]);\n                        if (effect.eqFilterType) {\n                            buffer.push(base64IntToCharCode[effect.eqFilterSimpleCut]);\n                            buffer.push(base64IntToCharCode[effect.eqFilterSimplePeak]);\n                        }\n                        else {\n                            if (effect.eqFilter == null) {\n                                buffer.push(base64IntToCharCode[0]);\n                                console.log(\"Null post eq settings detected in toBase64String for channelIndex \" + channelIndex + \", instrumentIndex \" + i);\n                            }\n                            else {\n                                buffer.push(base64IntToCharCode[effect.eqFilter.controlPointCount]);\n                                for (let j = 0; j < effect.eqFilter.controlPointCount; j++) {\n                                    const point = effect.eqFilter.controlPoints[j];\n                                    buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\n                                }\n                            }\n                            let usingSubFilterBitfield = 0;\n                            for (let j = 0; j < Config.filterMorphCount - 1; j++) {\n                                usingSubFilterBitfield |= (+(effect.eqSubFilters[j + 1] != null) << j);\n                            }\n                            buffer.push(base64IntToCharCode[usingSubFilterBitfield >> 6], base64IntToCharCode[usingSubFilterBitfield & 63]);\n                            for (let j = 0; j < Config.filterMorphCount - 1; j++) {\n                                if (usingSubFilterBitfield & (1 << j)) {\n                                    buffer.push(base64IntToCharCode[effect.eqSubFilters[j + 1].controlPointCount]);\n                                    for (let k = 0; k < effect.eqSubFilters[j + 1].controlPointCount; k++) {\n                                        const point = effect.eqSubFilters[j + 1].controlPoints[k];\n                                        buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    else if (effect.type == 3) {\n                        buffer.push(base64IntToCharCode[effect.distortion]);\n                        buffer.push(base64IntToCharCode[+instrument.aliases]);\n                    }\n                    else if (effect.type == 4) {\n                        buffer.push(base64IntToCharCode[effect.bitcrusherFreq], base64IntToCharCode[effect.bitcrusherQuantization]);\n                    }\n                    else if (effect.type == 9) {\n                        buffer.push(base64IntToCharCode[effect.gain >> 6], base64IntToCharCode[effect.gain & 0x3f]);\n                    }\n                    else if (effect.type == 2) {\n                        buffer.push(base64IntToCharCode[effect.pan >> 6], base64IntToCharCode[effect.pan & 0x3f]);\n                        buffer.push(base64IntToCharCode[effect.panDelay]);\n                        buffer.push(base64IntToCharCode[effect.panMode]);\n                    }\n                    else if (effect.type == 10) {\n                        buffer.push(base64IntToCharCode[effect.flanger]);\n                        buffer.push(base64IntToCharCode[effect.flangerSpeed]);\n                        buffer.push(base64IntToCharCode[effect.flangerDepth]);\n                        buffer.push(base64IntToCharCode[effect.flangerFeedback]);\n                    }\n                    else if (effect.type == 1) {\n                        buffer.push(base64IntToCharCode[effect.chorus]);\n                    }\n                    else if (effect.type == 6) {\n                        buffer.push(base64IntToCharCode[effect.echoSustain], base64IntToCharCode[effect.echoDelay], base64IntToCharCode[effect.echoPingPong >> 6], base64IntToCharCode[effect.echoPingPong & 0x3f]);\n                    }\n                    else if (effect.type == 0) {\n                        buffer.push(base64IntToCharCode[effect.reverb]);\n                    }\n                    else if (effect.type == 8) {\n                        buffer.push(base64IntToCharCode[effect.granular]);\n                        buffer.push(base64IntToCharCode[effect.grainSize]);\n                        buffer.push(base64IntToCharCode[effect.grainAmounts]);\n                        buffer.push(base64IntToCharCode[effect.grainRange]);\n                    }\n                    else if (effect.type == 7) {\n                        buffer.push(base64IntToCharCode[effect.ringModulation]);\n                        buffer.push(base64IntToCharCode[effect.ringModulationHz]);\n                        buffer.push(base64IntToCharCode[effect.ringModWaveformIndex]);\n                        buffer.push(base64IntToCharCode[effect.ringModPulseWidth]);\n                        buffer.push(base64IntToCharCode[(effect.ringModHzOffset - Config.rmHzOffsetMin) >> 6], base64IntToCharCode[(effect.ringModHzOffset - Config.rmHzOffsetMin) & 0x3F]);\n                    }\n                }\n                buffer.push(base64IntToCharCode[instrument.mdeffects & 63]);\n                if (effectsIncludeTransition(instrument.mdeffects)) {\n                    buffer.push(base64IntToCharCode[instrument.transition]);\n                }\n                if (effectsIncludeChord(instrument.mdeffects)) {\n                    buffer.push(base64IntToCharCode[instrument.chord]);\n                    if (instrument.chord == Config.chords.dictionary[\"arpeggio\"].index) {\n                        buffer.push(base64IntToCharCode[instrument.arpeggioSpeed]);\n                        buffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]);\n                    }\n                    if (instrument.chord == Config.chords.dictionary[\"monophonic\"].index) {\n                        buffer.push(base64IntToCharCode[instrument.monoChordTone]);\n                    }\n                }\n                if (effectsIncludePitchShift(instrument.mdeffects)) {\n                    buffer.push(base64IntToCharCode[instrument.pitchShift]);\n                }\n                if (effectsIncludeDetune(instrument.mdeffects)) {\n                    buffer.push(base64IntToCharCode[(instrument.detune - Config.detuneMin) >> 6], base64IntToCharCode[(instrument.detune - Config.detuneMin) & 0x3F]);\n                }\n                if (effectsIncludeVibrato(instrument.mdeffects)) {\n                    buffer.push(base64IntToCharCode[instrument.vibrato]);\n                    if (instrument.vibrato == Config.vibratos.length) {\n                        buffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\n                        buffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\n                        buffer.push(base64IntToCharCode[Math.round(instrument.vibratoDelay)]);\n                        buffer.push(base64IntToCharCode[instrument.vibratoType]);\n                    }\n                }\n                if (instrument.type != 4) {\n                    buffer.push(100, base64IntToCharCode[instrument.fadeIn], base64IntToCharCode[instrument.fadeOut]);\n                    buffer.push(base64IntToCharCode[+instrument.clicklessTransition]);\n                }\n                if (instrument.type == 5 || instrument.type == 7) {\n                    buffer.push(72);\n                    const harmonicsBits = new BitFieldWriter();\n                    for (let i = 0; i < Config.harmonicsControlPoints; i++) {\n                        harmonicsBits.write(Config.harmonicsControlPointBits, instrument.harmonicsWave.harmonics[i]);\n                    }\n                    harmonicsBits.encodeBase64(buffer);\n                }\n                if (instrument.type == 0) {\n                    if (instrument.chipWave > 186) {\n                        buffer.push(119, base64IntToCharCode[instrument.chipWave - 186]);\n                        buffer.push(base64IntToCharCode[3]);\n                    }\n                    else if (instrument.chipWave > 124) {\n                        buffer.push(119, base64IntToCharCode[instrument.chipWave - 124]);\n                        buffer.push(base64IntToCharCode[2]);\n                    }\n                    else if (instrument.chipWave > 62) {\n                        buffer.push(119, base64IntToCharCode[instrument.chipWave - 62]);\n                        buffer.push(base64IntToCharCode[1]);\n                    }\n                    else {\n                        buffer.push(119, base64IntToCharCode[instrument.chipWave]);\n                        buffer.push(base64IntToCharCode[0]);\n                    }\n                    buffer.push(104, base64IntToCharCode[instrument.unison]);\n                    if (instrument.unison == Config.unisons.length)\n                        encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\n                    buffer.push(121);\n                    const encodedLoopMode = ((clamp(0, 31 + 1, instrument.chipWaveLoopMode) << 1)\n                        | (instrument.isUsingAdvancedLoopControls ? 1 : 0));\n                    buffer.push(base64IntToCharCode[encodedLoopMode]);\n                    const encodedReleaseMode = ((clamp(0, 31 + 1, 0) << 2)\n                        | ((instrument.chipWaveInStereo ? 1 : 0) << 1)\n                        | (instrument.chipWavePlayBackwards ? 1 : 0));\n                    buffer.push(base64IntToCharCode[encodedReleaseMode]);\n                    encode32BitNumber(buffer, instrument.chipWaveLoopStart);\n                    encode32BitNumber(buffer, instrument.chipWaveLoopEnd);\n                    encode32BitNumber(buffer, instrument.chipWaveStartOffset);\n                }\n                else if (instrument.type == 1 || instrument.type == 11) {\n                    if (instrument.type == 1) {\n                        buffer.push(65, base64IntToCharCode[instrument.algorithm]);\n                        buffer.push(70, base64IntToCharCode[instrument.feedbackType]);\n                    }\n                    else {\n                        buffer.push(65, base64IntToCharCode[instrument.algorithm6Op]);\n                        if (instrument.algorithm6Op == 0) {\n                            buffer.push(67, base64IntToCharCode[instrument.customAlgorithm.carrierCount]);\n                            buffer.push(113);\n                            for (let o = 0; o < instrument.customAlgorithm.modulatedBy.length; o++) {\n                                for (let j = 0; j < instrument.customAlgorithm.modulatedBy[o].length; j++) {\n                                    buffer.push(base64IntToCharCode[instrument.customAlgorithm.modulatedBy[o][j]]);\n                                }\n                                buffer.push(82);\n                            }\n                            buffer.push(113);\n                        }\n                        buffer.push(70, base64IntToCharCode[instrument.feedbackType6Op]);\n                        if (instrument.feedbackType6Op == 0) {\n                            buffer.push(113);\n                            for (let o = 0; o < instrument.customFeedbackType.indices.length; o++) {\n                                for (let j = 0; j < instrument.customFeedbackType.indices[o].length; j++) {\n                                    buffer.push(base64IntToCharCode[instrument.customFeedbackType.indices[o][j]]);\n                                }\n                                buffer.push(82);\n                            }\n                            buffer.push(113);\n                        }\n                    }\n                    buffer.push(66, base64IntToCharCode[instrument.feedbackAmplitude]);\n                    buffer.push(81);\n                    for (let o = 0; o < (instrument.type == 11 ? 6 : Config.operatorCount); o++) {\n                        buffer.push(base64IntToCharCode[instrument.operators[o].frequency]);\n                    }\n                    buffer.push(80);\n                    for (let o = 0; o < (instrument.type == 11 ? 6 : Config.operatorCount); o++) {\n                        buffer.push(base64IntToCharCode[instrument.operators[o].amplitude]);\n                    }\n                    buffer.push(82);\n                    for (let o = 0; o < (instrument.type == 11 ? 6 : Config.operatorCount); o++) {\n                        buffer.push(base64IntToCharCode[instrument.operators[o].waveform]);\n                        if (instrument.operators[o].waveform == 2) {\n                            buffer.push(base64IntToCharCode[instrument.operators[o].pulseWidth]);\n                        }\n                    }\n                }\n                else if (instrument.type == 9) {\n                    if (instrument.chipWave > 186) {\n                        buffer.push(119, base64IntToCharCode[instrument.chipWave - 186]);\n                        buffer.push(base64IntToCharCode[3]);\n                    }\n                    else if (instrument.chipWave > 124) {\n                        buffer.push(119, base64IntToCharCode[instrument.chipWave - 124]);\n                        buffer.push(base64IntToCharCode[2]);\n                    }\n                    else if (instrument.chipWave > 62) {\n                        buffer.push(119, base64IntToCharCode[instrument.chipWave - 62]);\n                        buffer.push(base64IntToCharCode[1]);\n                    }\n                    else {\n                        buffer.push(119, base64IntToCharCode[instrument.chipWave]);\n                        buffer.push(base64IntToCharCode[0]);\n                    }\n                    buffer.push(104, base64IntToCharCode[instrument.unison]);\n                    if (instrument.unison == Config.unisons.length)\n                        encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\n                    buffer.push(77);\n                    for (let j = 0; j < 64; j++) {\n                        buffer.push(base64IntToCharCode[(instrument.customChipWave[j] + 24)]);\n                    }\n                }\n                else if (instrument.type == 2) {\n                    buffer.push(119, base64IntToCharCode[instrument.chipNoise]);\n                    buffer.push(104, base64IntToCharCode[instrument.unison]);\n                    if (instrument.unison == Config.unisons.length)\n                        encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\n                }\n                else if (instrument.type == 3) {\n                    buffer.push(83);\n                    const spectrumBits = new BitFieldWriter();\n                    for (let i = 0; i < Config.spectrumControlPoints; i++) {\n                        spectrumBits.write(Config.spectrumControlPointBits, instrument.spectrumWave.spectrum[i]);\n                    }\n                    spectrumBits.encodeBase64(buffer);\n                    buffer.push(104, base64IntToCharCode[instrument.unison]);\n                    if (instrument.unison == Config.unisons.length)\n                        encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\n                }\n                else if (instrument.type == 4) {\n                    buffer.push(122);\n                    for (let j = 0; j < Config.drumCount; j++) {\n                        buffer.push(base64IntToCharCode[instrument.drumsetEnvelopes[j]]);\n                    }\n                    buffer.push(83);\n                    const spectrumBits = new BitFieldWriter();\n                    for (let j = 0; j < Config.drumCount; j++) {\n                        for (let i = 0; i < Config.spectrumControlPoints; i++) {\n                            spectrumBits.write(Config.spectrumControlPointBits, instrument.drumsetSpectrumWaves[j].spectrum[i]);\n                        }\n                    }\n                    spectrumBits.encodeBase64(buffer);\n                    buffer.push(104, base64IntToCharCode[instrument.unison]);\n                    if (instrument.unison == Config.unisons.length)\n                        encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\n                }\n                else if (instrument.type == 5) {\n                    buffer.push(104, base64IntToCharCode[instrument.unison]);\n                    if (instrument.unison == Config.unisons.length)\n                        encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\n                }\n                else if (instrument.type == 6) {\n                    buffer.push(87, base64IntToCharCode[instrument.pulseWidth]);\n                    buffer.push(base64IntToCharCode[instrument.decimalOffset >> 6], base64IntToCharCode[instrument.decimalOffset & 0x3f]);\n                    buffer.push(104, base64IntToCharCode[instrument.unison]);\n                    if (instrument.unison == Config.unisons.length)\n                        encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\n                }\n                else if (instrument.type == 8) {\n                    buffer.push(120, base64IntToCharCode[instrument.supersawDynamism], base64IntToCharCode[instrument.supersawSpread], base64IntToCharCode[instrument.supersawShape]);\n                    buffer.push(87, base64IntToCharCode[instrument.pulseWidth]);\n                    buffer.push(base64IntToCharCode[instrument.decimalOffset >> 6], base64IntToCharCode[instrument.decimalOffset & 0x3f]);\n                }\n                else if (instrument.type == 7) {\n                    if (Config.stringSustainRange > 0x20 || 2 > 2) {\n                        throw new Error(\"Not enough bits to represent sustain value and type in same base64 character.\");\n                    }\n                    buffer.push(104, base64IntToCharCode[instrument.unison]);\n                    if (instrument.unison == Config.unisons.length)\n                        encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\n                    buffer.push(73, base64IntToCharCode[instrument.stringSustain | (instrument.stringSustainType << 5)]);\n                }\n                else if (instrument.type == 10) {\n                }\n                else {\n                    throw new Error(\"Unknown instrument type.\");\n                }\n                buffer.push(69, base64IntToCharCode[instrument.envelopeCount]);\n                buffer.push(base64IntToCharCode[instrument.envelopeSpeed]);\n                for (let envelopeIndex = 0; envelopeIndex < instrument.envelopeCount; envelopeIndex++) {\n                    buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].target]);\n                    if (Config.instrumentAutomationTargets[instrument.envelopes[envelopeIndex].target].maxCount > 1) {\n                        buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].index]);\n                    }\n                    buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].envelope]);\n                    if (Config.newEnvelopes[instrument.envelopes[envelopeIndex].envelope].name == \"pitch\") {\n                        if (!instrument.isNoiseInstrument) {\n                            buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].pitchEnvelopeStart >> 6], base64IntToCharCode[instrument.envelopes[envelopeIndex].pitchEnvelopeStart & 0x3f]);\n                            buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].pitchEnvelopeEnd >> 6], base64IntToCharCode[instrument.envelopes[envelopeIndex].pitchEnvelopeEnd & 0x3f]);\n                        }\n                        else {\n                            buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].pitchEnvelopeStart]);\n                            buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].pitchEnvelopeEnd]);\n                        }\n                    }\n                    else if (Config.newEnvelopes[instrument.envelopes[envelopeIndex].envelope].name == \"random\") {\n                        buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].steps]);\n                        buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].seed]);\n                        buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].waveform]);\n                    }\n                    else if (Config.newEnvelopes[instrument.envelopes[envelopeIndex].envelope].name == \"lfo\") {\n                        buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].waveform]);\n                        if (instrument.envelopes[envelopeIndex].waveform == 5 || instrument.envelopes[envelopeIndex].waveform == 6) {\n                            buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].steps]);\n                        }\n                    }\n                    let checkboxValues = +instrument.envelopes[envelopeIndex].discrete;\n                    checkboxValues = checkboxValues << 1;\n                    checkboxValues += +instrument.envelopes[envelopeIndex].inverse;\n                    buffer.push(base64IntToCharCode[checkboxValues] ? base64IntToCharCode[checkboxValues] : base64IntToCharCode[0]);\n                    if (Config.newEnvelopes[instrument.envelopes[envelopeIndex].envelope].name != \"pitch\" && Config.newEnvelopes[instrument.envelopes[envelopeIndex].envelope].name != \"note size\" && Config.newEnvelopes[instrument.envelopes[envelopeIndex].envelope].name != \"punch\" && Config.newEnvelopes[instrument.envelopes[envelopeIndex].envelope].name != \"none\") {\n                        buffer.push(base64IntToCharCode[Config.perEnvelopeSpeedToIndices[instrument.envelopes[envelopeIndex].perEnvelopeSpeed]]);\n                    }\n                    buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].perEnvelopeLowerBound * 10]);\n                    buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].perEnvelopeUpperBound * 10]);\n                }\n            }\n        }\n        buffer.push(98);\n        bits = new BitFieldWriter();\n        let neededBits = 0;\n        while ((1 << neededBits) < this.patternsPerChannel + 1)\n            neededBits++;\n        for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++)\n            for (let i = 0; i < this.barCount; i++) {\n                bits.write(neededBits, this.channels[channelIndex].bars[i]);\n            }\n        bits.encodeBase64(buffer);\n        buffer.push(112);\n        bits = new BitFieldWriter();\n        const shapeBits = new BitFieldWriter();\n        const bitsPerNoteSize = Song.getNeededBits(Config.noteSizeMax);\n        for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n            const channel = this.channels[channelIndex];\n            const maxInstrumentsPerPattern = this.getMaxInstrumentsPerPattern(channelIndex);\n            const isNoiseChannel = this.getChannelIsNoise(channelIndex);\n            const isModChannel = this.getChannelIsMod(channelIndex);\n            const neededInstrumentCountBits = Song.getNeededBits(maxInstrumentsPerPattern - Config.instrumentCountMin);\n            const neededInstrumentIndexBits = Song.getNeededBits(channel.instruments.length - 1);\n            if (isModChannel) {\n                const neededModInstrumentIndexBits = Song.getNeededBits(this.getMaxInstrumentsPerChannel() + 2);\n                for (let instrumentIndex = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n                    let instrument = this.channels[channelIndex].instruments[instrumentIndex];\n                    for (let mod = 0; mod < Config.modCount; mod++) {\n                        const modChannels = instrument.modChannels[mod];\n                        const modInstruments = instrument.modInstruments[mod];\n                        const modSetting = instrument.modulators[mod];\n                        const modFilter = instrument.modFilterTypes[mod];\n                        const modEnvelope = instrument.modEnvelopeNumbers[mod];\n                        let status = Config.modulators[modSetting].forSong ? 2 : 0;\n                        if (modSetting == Config.modulators.dictionary[\"none\"].index)\n                            status = 3;\n                        bits.write(2, status);\n                        if (status == 0 || status == 1) {\n                            bits.write(8, modChannels.length);\n                            for (let i = 0; i < modChannels.length; i++)\n                                bits.write(8, modChannels[i]);\n                            bits.write(8, modInstruments.length);\n                            for (let i = 0; i < modInstruments.length; i++)\n                                bits.write(neededModInstrumentIndexBits, modInstruments[i]);\n                        }\n                        if (status != 3) {\n                            bits.write(6, modSetting);\n                        }\n                        if (Config.modulators[instrument.modulators[mod]].name == \"post eq\" || Config.modulators[instrument.modulators[mod]].name == \"pre eq\" || Config.modulators[instrument.modulators[mod]].name == \"song eq\") {\n                            bits.write(6, modFilter);\n                        }\n                        if (Config.modulators[instrument.modulators[mod]].name == \"individual envelope speed\" ||\n                            Config.modulators[instrument.modulators[mod]].name == \"reset envelope\" ||\n                            Config.modulators[instrument.modulators[mod]].name == \"individual envelope lower bound\" ||\n                            Config.modulators[instrument.modulators[mod]].name == \"individual envelope upper bound\") {\n                            bits.write(6, modEnvelope);\n                        }\n                    }\n                }\n            }\n            const octaveOffset = (isNoiseChannel || isModChannel) ? 0 : channel.octave * Config.pitchesPerOctave;\n            let lastPitch = (isNoiseChannel ? 4 : octaveOffset);\n            const recentPitches = isModChannel ? [0, 1, 2, 3, 4, 5] : (isNoiseChannel ? [4, 6, 7, 2, 3, 8, 0, 10] : [0, 7, 12, 19, 24, -5, -12]);\n            const recentShapes = [];\n            for (let i = 0; i < recentPitches.length; i++) {\n                recentPitches[i] += octaveOffset;\n            }\n            for (const pattern of channel.patterns) {\n                if (this.patternInstruments) {\n                    const instrumentCount = validateRange(Config.instrumentCountMin, maxInstrumentsPerPattern, pattern.instruments.length);\n                    bits.write(neededInstrumentCountBits, instrumentCount - Config.instrumentCountMin);\n                    for (let i = 0; i < instrumentCount; i++) {\n                        bits.write(neededInstrumentIndexBits, pattern.instruments[i]);\n                    }\n                }\n                if (pattern.notes.length > 0) {\n                    bits.write(1, 1);\n                    let curPart = 0;\n                    for (const note of pattern.notes) {\n                        if (note.start < curPart && isModChannel) {\n                            bits.write(2, 0);\n                            bits.write(1, 1);\n                            bits.writePartDuration(curPart - note.start);\n                        }\n                        if (note.start > curPart) {\n                            bits.write(2, 0);\n                            if (isModChannel)\n                                bits.write(1, 0);\n                            bits.writePartDuration(note.start - curPart);\n                        }\n                        shapeBits.clear();\n                        if (note.pitches.length == 1) {\n                            shapeBits.write(1, 0);\n                        }\n                        else {\n                            shapeBits.write(1, 1);\n                            shapeBits.write(3, note.pitches.length - 2);\n                        }\n                        if (note.chipWaveStartOffset == 0) {\n                            shapeBits.write(1, 0);\n                        }\n                        else {\n                            shapeBits.write(1, 1);\n                            shapeBits.write(31, note.chipWaveStartOffset);\n                        }\n                        shapeBits.writePinCount(note.pins.length - 1);\n                        if (!isModChannel) {\n                            shapeBits.write(bitsPerNoteSize, note.pins[0].size);\n                        }\n                        else {\n                            shapeBits.write(11, note.pins[0].size);\n                        }\n                        let shapePart = 0;\n                        let startPitch = note.pitches[0];\n                        let currentPitch = startPitch;\n                        const pitchBends = [];\n                        for (let i = 1; i < note.pins.length; i++) {\n                            const pin = note.pins[i];\n                            const nextPitch = startPitch + pin.interval;\n                            if (currentPitch != nextPitch) {\n                                shapeBits.write(1, 1);\n                                pitchBends.push(nextPitch);\n                                currentPitch = nextPitch;\n                            }\n                            else {\n                                shapeBits.write(1, 0);\n                            }\n                            shapeBits.writePartDuration(pin.time - shapePart);\n                            shapePart = pin.time;\n                            if (!isModChannel) {\n                                shapeBits.write(bitsPerNoteSize, pin.size);\n                            }\n                            else {\n                                shapeBits.write(11, pin.size);\n                            }\n                        }\n                        const shapeString = String.fromCharCode.apply(null, shapeBits.encodeBase64([]));\n                        const shapeIndex = recentShapes.indexOf(shapeString);\n                        if (shapeIndex == -1) {\n                            bits.write(2, 1);\n                            bits.concat(shapeBits);\n                        }\n                        else {\n                            bits.write(1, 1);\n                            bits.writeLongTail(0, 0, shapeIndex);\n                            recentShapes.splice(shapeIndex, 1);\n                        }\n                        recentShapes.unshift(shapeString);\n                        if (recentShapes.length > 10)\n                            recentShapes.pop();\n                        const allPitches = note.pitches.concat(pitchBends);\n                        for (let i = 0; i < allPitches.length; i++) {\n                            const pitch = allPitches[i];\n                            const pitchIndex = recentPitches.indexOf(pitch);\n                            if (pitchIndex == -1) {\n                                let interval = 0;\n                                let pitchIter = lastPitch;\n                                if (pitchIter < pitch) {\n                                    while (pitchIter != pitch) {\n                                        pitchIter++;\n                                        if (recentPitches.indexOf(pitchIter) == -1)\n                                            interval++;\n                                    }\n                                }\n                                else {\n                                    while (pitchIter != pitch) {\n                                        pitchIter--;\n                                        if (recentPitches.indexOf(pitchIter) == -1)\n                                            interval--;\n                                    }\n                                }\n                                bits.write(1, 0);\n                                bits.writePitchInterval(interval);\n                            }\n                            else {\n                                bits.write(1, 1);\n                                bits.write(4, pitchIndex);\n                                recentPitches.splice(pitchIndex, 1);\n                            }\n                            recentPitches.unshift(pitch);\n                            if (recentPitches.length > 16)\n                                recentPitches.pop();\n                            if (i == note.pitches.length - 1) {\n                                lastPitch = note.pitches[0];\n                            }\n                            else {\n                                lastPitch = pitch;\n                            }\n                        }\n                        if (note.start == 0) {\n                            bits.write(1, note.continuesLastPattern ? 1 : 0);\n                        }\n                        curPart = note.end;\n                    }\n                    if (curPart < this.beatsPerBar * Config.partsPerBeat + (+isModChannel)) {\n                        bits.write(2, 0);\n                        if (isModChannel)\n                            bits.write(1, 0);\n                        bits.writePartDuration(this.beatsPerBar * Config.partsPerBeat + (+isModChannel) - curPart);\n                    }\n                }\n                else {\n                    bits.write(1, 0);\n                }\n            }\n        }\n        let stringLength = bits.lengthBase64();\n        let digits = [];\n        while (stringLength > 0) {\n            digits.unshift(base64IntToCharCode[stringLength & 0x3f]);\n            stringLength = stringLength >> 6;\n        }\n        buffer.push(base64IntToCharCode[digits.length]);\n        Array.prototype.push.apply(buffer, digits);\n        bits.encodeBase64(buffer);\n        const maxApplyArgs = 64000;\n        let customSamplesStr = \"\";\n        if (EditorConfig.customSamples != undefined && EditorConfig.customSamples.length > 0) {\n            customSamplesStr = \"|\" + EditorConfig.customSamples.join(\"|\");\n        }\n        if (buffer.length < maxApplyArgs) {\n            return String.fromCharCode.apply(null, buffer) + customSamplesStr;\n        }\n        else {\n            let result = \"\";\n            for (let i = 0; i < buffer.length; i += maxApplyArgs) {\n                result += String.fromCharCode.apply(null, buffer.slice(i, i + maxApplyArgs));\n            }\n            return result + customSamplesStr;\n        }\n    }\n    static _envelopeFromLegacyIndex(legacyIndex) {\n        if (legacyIndex == 0)\n            legacyIndex = 1;\n        else if (legacyIndex == 1)\n            legacyIndex = 0;\n        return Config.envelopes[clamp(0, Config.envelopes.length, legacyIndex)];\n    }\n    fromBase64String(compressed, jsonFormat = \"auto\") {\n        if (compressed == null || compressed == \"\") {\n            Song._clearSamples();\n            this.initToDefault(true);\n            return;\n        }\n        let charIndex = 0;\n        while (compressed.charCodeAt(charIndex) <= 32)\n            charIndex++;\n        if (compressed.charCodeAt(charIndex) == 35)\n            charIndex++;\n        if (compressed.charCodeAt(charIndex) == 123) {\n            this.fromJsonObject(JSON.parse(charIndex == 0 ? compressed : compressed.substring(charIndex)), jsonFormat);\n            return;\n        }\n        const variantTest = compressed.charCodeAt(charIndex);\n        let fromBeepBox = false;\n        let fromJummBox = false;\n        let fromGoldBox = false;\n        let fromUltraBox = false;\n        let fromSlarmoosBox = false;\n        let fromTheepBox = false;\n        if (variantTest == 0x74) {\n            fromTheepBox = true;\n            fromSlarmoosBox = true;\n            charIndex++;\n        }\n        else if (variantTest == 0x6A) {\n            fromJummBox = true;\n            charIndex++;\n        }\n        else if (variantTest == 0x67) {\n            fromGoldBox = true;\n            charIndex++;\n        }\n        else if (variantTest == 0x75) {\n            fromUltraBox = true;\n            charIndex++;\n        }\n        else if (variantTest == 0x64) {\n            fromJummBox = true;\n            charIndex++;\n        }\n        else if (variantTest == 0x61) {\n            fromUltraBox = true;\n            charIndex++;\n        }\n        else if (variantTest == 0x73) {\n            fromSlarmoosBox = true;\n            charIndex++;\n        }\n        else {\n            fromBeepBox = true;\n        }\n        const version = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n        if (fromBeepBox && (version == -1 || version > Song._latestBeepboxVersion || version < Song._oldestBeepboxVersion))\n            return;\n        if (fromJummBox && (version == -1 || version > Song._latestJummBoxVersion || version < Song._oldestJummBoxVersion))\n            return;\n        if (fromGoldBox && (version == -1 || version > Song._latestGoldBoxVersion || version < Song._oldestGoldBoxVersion))\n            return;\n        if (fromUltraBox && (version == -1 || version > Song._latestUltraBoxVersion || version < Song._oldestUltraBoxVersion))\n            return;\n        if ((fromSlarmoosBox || fromTheepBox) && (version == -1 || version > Song._latestSlarmoosBoxVersion || version < Song._oldestSlarmoosBoxVersion))\n            return;\n        const beforeTwo = version < 2;\n        const beforeThree = version < 3;\n        const beforeFour = version < 4;\n        const beforeFive = version < 5;\n        const beforeSix = version < 6;\n        const beforeSeven = version < 7;\n        const beforeEight = version < 8;\n        const beforeNine = version < 9;\n        this.initToDefault((fromBeepBox && beforeNine) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)));\n        const forceSimpleFilter = (fromBeepBox && beforeNine || fromJummBox && beforeFive);\n        let willLoadLegacySamplesForOldSongs = false;\n        if (fromSlarmoosBox || fromUltraBox || fromGoldBox) {\n            compressed = compressed.replaceAll(\"%7C\", \"|\");\n            var compressed_array = compressed.split(\"|\");\n            compressed = compressed_array.shift();\n            if (EditorConfig.customSamples == null || EditorConfig.customSamples.join(\", \") != compressed_array.join(\", \")) {\n                Song._restoreChipWaveListToDefault();\n                let willLoadLegacySamples = false;\n                let willLoadNintariboxSamples = false;\n                let willLoadMarioPaintboxSamples = false;\n                const customSampleUrls = [];\n                const customSamplePresets = [];\n                sampleLoadingState.statusTable = {};\n                sampleLoadingState.urlTable = {};\n                sampleLoadingState.totalSamples = 0;\n                sampleLoadingState.samplesLoaded = 0;\n                sampleLoadEvents.dispatchEvent(new SampleLoadedEvent(sampleLoadingState.totalSamples, sampleLoadingState.samplesLoaded));\n                for (const url of compressed_array) {\n                    if (url.toLowerCase() === \"legacysamples\") {\n                        if (!willLoadLegacySamples) {\n                            willLoadLegacySamples = true;\n                            customSampleUrls.push(url);\n                            loadBuiltInSamples(0);\n                        }\n                    }\n                    else if (url.toLowerCase() === \"nintariboxsamples\") {\n                        if (!willLoadNintariboxSamples) {\n                            willLoadNintariboxSamples = true;\n                            customSampleUrls.push(url);\n                            loadBuiltInSamples(1);\n                        }\n                    }\n                    else if (url.toLowerCase() === \"mariopaintboxsamples\") {\n                        if (!willLoadMarioPaintboxSamples) {\n                            willLoadMarioPaintboxSamples = true;\n                            customSampleUrls.push(url);\n                            loadBuiltInSamples(2);\n                        }\n                    }\n                    else {\n                        const parseOldSyntax = beforeThree;\n                        const ok = Song._parseAndConfigureCustomSample(url, customSampleUrls, customSamplePresets, sampleLoadingState, parseOldSyntax);\n                        if (!ok) {\n                            continue;\n                        }\n                    }\n                }\n                if (customSampleUrls.length > 0) {\n                    EditorConfig.customSamples = customSampleUrls;\n                }\n                if (customSamplePresets.length > 0) {\n                    const customSamplePresetsMap = toNameMap(customSamplePresets);\n                    EditorConfig.presetCategories[EditorConfig.presetCategories.length] = {\n                        name: \"Custom Sample Presets\",\n                        presets: customSamplePresetsMap,\n                        index: EditorConfig.presetCategories.length,\n                    };\n                }\n            }\n        }\n        if (beforeThree && fromBeepBox) {\n            for (const channel of this.channels) {\n                channel.instruments[0].transition = Config.transitions.dictionary[\"interrupt\"].index;\n                channel.instruments[0].mdeffects |= 1 << 3;\n            }\n            this.channels[3].instruments[0].chipNoise = 0;\n        }\n        let legacySettingsCache = null;\n        if ((fromBeepBox && beforeNine) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n            legacySettingsCache = [];\n            for (let i = legacySettingsCache.length; i < this.getChannelCount(); i++) {\n                legacySettingsCache[i] = [];\n                for (let j = 0; j < Config.instrumentCountMin; j++)\n                    legacySettingsCache[i][j] = {};\n            }\n        }\n        let legacyGlobalReverb = 0;\n        let instrumentChannelIterator = 0;\n        let instrumentIndexIterator = -1;\n        let command;\n        let useSlowerArpSpeed = false;\n        let useFastTwoNoteArp = false;\n        while (charIndex < compressed.length)\n            switch (command = compressed.charCodeAt(charIndex++)) {\n                case 78:\n                    {\n                        var songNameLength = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        this.title = decodeURIComponent(compressed.substring(charIndex, charIndex + songNameLength));\n                        document.title = this.title + \" - \" + EditorConfig.versionDisplayName;\n                        charIndex += songNameLength;\n                    }\n                    break;\n                case 110:\n                    {\n                        this.pitchChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        this.noiseChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        if (fromBeepBox || (fromJummBox && beforeTwo)) {\n                            this.modChannelCount = 0;\n                        }\n                        else {\n                            this.modChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        }\n                        this.pitchChannelCount = validateRange(Config.pitchChannelCountMin, Config.pitchChannelCountMax, this.pitchChannelCount);\n                        this.noiseChannelCount = validateRange(Config.noiseChannelCountMin, Config.noiseChannelCountMax, this.noiseChannelCount);\n                        this.modChannelCount = validateRange(Config.modChannelCountMin, Config.modChannelCountMax, this.modChannelCount);\n                        for (let channelIndex = this.channels.length; channelIndex < this.getChannelCount(); channelIndex++) {\n                            this.channels[channelIndex] = new Channel();\n                        }\n                        this.channels.length = this.getChannelCount();\n                        if ((fromBeepBox && beforeNine) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                            for (let i = legacySettingsCache.length; i < this.getChannelCount(); i++) {\n                                legacySettingsCache[i] = [];\n                                for (let j = 0; j < Config.instrumentCountMin; j++)\n                                    legacySettingsCache[i][j] = {};\n                            }\n                        }\n                    }\n                    break;\n                case 115:\n                    {\n                        this.scale = clamp(0, Config.scales.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        if (this.scale == Config.scales[\"dictionary\"][\"Custom\"].index) {\n                            for (var i = 1; i < Config.pitchesPerOctave; i++) {\n                                this.scaleCustom[i] = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] == 1;\n                            }\n                        }\n                        if (fromBeepBox)\n                            this.scale = 0;\n                    }\n                    break;\n                case 107:\n                    {\n                        if (beforeSeven && fromBeepBox) {\n                            this.key = clamp(0, Config.keys.length, 11 - base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            this.octave = 0;\n                        }\n                        else if (fromBeepBox || fromJummBox) {\n                            this.key = clamp(0, Config.keys.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            this.octave = 0;\n                        }\n                        else if (fromGoldBox || (beforeThree && fromUltraBox)) {\n                            const rawKeyIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            const [key, octave] = convertLegacyKeyToKeyAndOctave(rawKeyIndex);\n                            this.key = key;\n                            this.octave = octave;\n                        }\n                        else {\n                            this.key = clamp(0, Config.keys.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            this.octave = clamp(Config.octaveMin, Config.octaveMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + Config.octaveMin);\n                        }\n                    }\n                    break;\n                case 108:\n                    {\n                        if (beforeFive && fromBeepBox) {\n                            this.loopStart = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        }\n                        else {\n                            this.loopStart = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        }\n                    }\n                    break;\n                case 101:\n                    {\n                        if (beforeFive && fromBeepBox) {\n                            this.loopLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        }\n                        else {\n                            this.loopLength = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\n                        }\n                    }\n                    break;\n                case 116:\n                    {\n                        if (beforeFour && fromBeepBox) {\n                            this.tempo = [95, 120, 151, 190][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\n                        }\n                        else if (beforeSeven && fromBeepBox) {\n                            this.tempo = [88, 95, 103, 111, 120, 130, 140, 151, 163, 176, 190, 206, 222, 240, 259][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\n                        }\n                        else {\n                            this.tempo = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                        this.tempo = clamp(Config.tempoMin, Config.tempoMax + 1, this.tempo);\n                    }\n                    break;\n                case 109:\n                    {\n                        if (beforeNine && fromBeepBox) {\n                            legacyGlobalReverb = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 12;\n                            legacyGlobalReverb = clamp(0, Config.reverbRange, legacyGlobalReverb);\n                        }\n                        else if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\n                            legacyGlobalReverb = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            legacyGlobalReverb = clamp(0, Config.reverbRange, legacyGlobalReverb);\n                        }\n                        else {\n                        }\n                    }\n                    break;\n                case 97:\n                    {\n                        if (beforeThree && fromBeepBox) {\n                            this.beatsPerBar = [6, 7, 8, 9, 10][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\n                        }\n                        else {\n                            this.beatsPerBar = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\n                        }\n                        this.beatsPerBar = Math.max(Config.beatsPerBarMin, Math.min(Config.beatsPerBarMax, this.beatsPerBar));\n                    }\n                    break;\n                case 103:\n                    {\n                        const barCount = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\n                        this.barCount = validateRange(Config.barCountMin, Config.barCountMax, barCount);\n                        for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                            for (let bar = this.channels[channelIndex].bars.length; bar < this.barCount; bar++) {\n                                this.channels[channelIndex].bars[bar] = (bar < 4) ? 1 : 0;\n                            }\n                            this.channels[channelIndex].bars.length = this.barCount;\n                        }\n                    }\n                    break;\n                case 106:\n                    {\n                        let patternsPerChannel;\n                        if (beforeEight && fromBeepBox) {\n                            patternsPerChannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\n                        }\n                        else {\n                            patternsPerChannel = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\n                        }\n                        this.patternsPerChannel = validateRange(1, Config.barCountMax, patternsPerChannel);\n                        const channelCount = this.getChannelCount();\n                        for (let channelIndex = 0; channelIndex < channelCount; channelIndex++) {\n                            const patterns = this.channels[channelIndex].patterns;\n                            for (let pattern = patterns.length; pattern < this.patternsPerChannel; pattern++) {\n                                patterns[pattern] = new Pattern();\n                            }\n                            patterns.length = this.patternsPerChannel;\n                        }\n                    }\n                    break;\n                case 105:\n                    {\n                        if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                            const instrumentsPerChannel = validateRange(Config.instrumentCountMin, Config.patternInstrumentCountMax, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + Config.instrumentCountMin);\n                            this.layeredInstruments = false;\n                            this.patternInstruments = (instrumentsPerChannel > 1);\n                            for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                                const isNoiseChannel = channelIndex >= this.pitchChannelCount && channelIndex < this.pitchChannelCount + this.noiseChannelCount;\n                                const isModChannel = channelIndex >= this.pitchChannelCount + this.noiseChannelCount;\n                                for (let instrumentIndex = this.channels[channelIndex].instruments.length; instrumentIndex < instrumentsPerChannel; instrumentIndex++) {\n                                    this.channels[channelIndex].instruments[instrumentIndex] = new Instrument(isNoiseChannel, isModChannel);\n                                }\n                                this.channels[channelIndex].instruments.length = instrumentsPerChannel;\n                                if (beforeSix && fromBeepBox) {\n                                    for (let instrumentIndex = 0; instrumentIndex < instrumentsPerChannel; instrumentIndex++) {\n                                        this.channels[channelIndex].instruments[instrumentIndex].setTypeAndReset(isNoiseChannel ? 2 : 0, isNoiseChannel, isModChannel);\n                                    }\n                                }\n                                for (let j = legacySettingsCache[channelIndex].length; j < instrumentsPerChannel; j++) {\n                                    legacySettingsCache[channelIndex][j] = {};\n                                }\n                            }\n                        }\n                        else {\n                            const instrumentsFlagBits = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            this.layeredInstruments = (instrumentsFlagBits & (1 << 1)) != 0;\n                            this.patternInstruments = (instrumentsFlagBits & (1 << 0)) != 0;\n                            for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                                let instrumentCount = 1;\n                                if (this.layeredInstruments || this.patternInstruments) {\n                                    instrumentCount = validateRange(Config.instrumentCountMin, this.getMaxInstrumentsPerChannel(), base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + Config.instrumentCountMin);\n                                }\n                                const channel = this.channels[channelIndex];\n                                const isNoiseChannel = this.getChannelIsNoise(channelIndex);\n                                const isModChannel = this.getChannelIsMod(channelIndex);\n                                for (let i = channel.instruments.length; i < instrumentCount; i++) {\n                                    channel.instruments[i] = new Instrument(isNoiseChannel, isModChannel);\n                                }\n                                channel.instruments.length = instrumentCount;\n                            }\n                        }\n                    }\n                    break;\n                case 114:\n                    {\n                        if (!fromUltraBox && !fromSlarmoosBox) {\n                            let newRhythm = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            this.rhythm = clamp(0, Config.rhythms.length, newRhythm);\n                            if (fromJummBox && beforeThree || fromBeepBox) {\n                                if (this.rhythm == Config.rhythms.dictionary[\"÷3 (triplets)\"].index || this.rhythm == Config.rhythms.dictionary[\"÷6\"].index) {\n                                    useSlowerArpSpeed = true;\n                                }\n                                if (this.rhythm >= Config.rhythms.dictionary[\"÷6\"].index) {\n                                    useFastTwoNoteArp = true;\n                                }\n                            }\n                        }\n                        else if ((fromSlarmoosBox && beforeFour) || (fromUltraBox && beforeFive)) {\n                            const rhythmMap = [1, 1, 0, 1, 2, 3, 4, 5];\n                            this.rhythm = clamp(0, Config.rhythms.length, rhythmMap[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]]);\n                        }\n                        else {\n                            this.rhythm = clamp(0, Config.rhythms.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                    }\n                    break;\n                case 111:\n                    {\n                        if (beforeThree && fromBeepBox) {\n                            const channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            this.channels[channelIndex].octave = clamp(0, Config.pitchOctaves, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);\n                            if (channelIndex >= this.pitchChannelCount)\n                                this.channels[channelIndex].octave = 0;\n                        }\n                        else if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                            for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                                this.channels[channelIndex].octave = clamp(0, Config.pitchOctaves, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);\n                                if (channelIndex >= this.pitchChannelCount)\n                                    this.channels[channelIndex].octave = 0;\n                            }\n                        }\n                        else {\n                            for (let channelIndex = 0; channelIndex < this.pitchChannelCount; channelIndex++) {\n                                this.channels[channelIndex].octave = clamp(0, Config.pitchOctaves, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                            for (let channelIndex = this.pitchChannelCount; channelIndex < this.getChannelCount(); channelIndex++) {\n                                this.channels[channelIndex].octave = 0;\n                            }\n                        }\n                    }\n                    break;\n                case 84:\n                    {\n                        instrumentIndexIterator++;\n                        if (instrumentIndexIterator >= this.channels[instrumentChannelIterator].instruments.length) {\n                            instrumentChannelIterator++;\n                            instrumentIndexIterator = 0;\n                        }\n                        validateRange(0, this.channels.length - 1, instrumentChannelIterator);\n                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        let instrumentType = validateRange(0, 12 - 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\n                            if (instrumentType == 7 || instrumentType == 8) {\n                                instrumentType += 2;\n                            }\n                        }\n                        else if ((fromJummBox && beforeSix) || (fromGoldBox && !beforeFour) || (fromUltraBox && beforeFive)) {\n                            if (instrumentType == 8 || instrumentType == 9 || instrumentType == 10) {\n                                instrumentType += 1;\n                            }\n                        }\n                        instrument.setTypeAndReset(instrumentType, instrumentChannelIterator >= this.pitchChannelCount && instrumentChannelIterator < this.pitchChannelCount + this.noiseChannelCount, instrumentChannelIterator >= this.pitchChannelCount + this.noiseChannelCount);\n                        if (((beforeSeven && fromBeepBox) || (beforeTwo && fromJummBox)) && (instrumentType == 0 || instrumentType == 9 || instrumentType == 6)) {\n                            instrument.aliases = true;\n                            let newEffect = instrument.addEffect(3);\n                            newEffect.distortion = 0;\n                        }\n                        if (useSlowerArpSpeed) {\n                            instrument.arpeggioSpeed = 9;\n                        }\n                        if (useFastTwoNoteArp) {\n                            instrument.fastTwoNoteArp = true;\n                        }\n                        if (beforeSeven && fromBeepBox) {\n                            if (instrument.chord != Config.chords.dictionary[\"simultaneous\"].index) {\n                                instrument.mdeffects |= 1 << 4;\n                            }\n                        }\n                    }\n                    break;\n                case 117:\n                    {\n                        const presetValue = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = presetValue;\n                        if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\n                            if (this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset == 7) {\n                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = 9;\n                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].type = 9;\n                            }\n                        }\n                        else if ((fromJummBox && beforeSix) || (fromUltraBox && beforeFive)) {\n                            if (this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset == 8) {\n                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = 9;\n                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].type = 9;\n                            }\n                            if (this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset == 10) {\n                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = 11;\n                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].type = 11;\n                            }\n                        }\n                        if (fromBeepBox && presetValue == EditorConfig.nameToPresetValue(\"grand piano 1\")) {\n                            this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = EditorConfig.nameToPresetValue(\"grand piano 3\");\n                        }\n                    }\n                    break;\n                case 119:\n                    {\n                        if (beforeThree && fromBeepBox) {\n                            const legacyWaves = [1, 2, 3, 4, 5, 6, 7, 8, 0];\n                            const channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            const instrument = this.channels[channelIndex].instruments[0];\n                            instrument.chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\n                            instrument.convertLegacySettings(legacySettingsCache[channelIndex][0], forceSimpleFilter);\n                        }\n                        else if (beforeSix && fromBeepBox) {\n                            const legacyWaves = [1, 2, 3, 4, 5, 6, 7, 8, 0];\n                            for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                                for (const instrument of this.channels[channelIndex].instruments) {\n                                    if (channelIndex >= this.pitchChannelCount) {\n                                        instrument.chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    }\n                                    else {\n                                        instrument.chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\n                                    }\n                                }\n                            }\n                        }\n                        else if (beforeSeven && fromBeepBox) {\n                            const legacyWaves = [1, 2, 3, 4, 5, 6, 7, 8, 0];\n                            if (instrumentChannelIterator >= this.pitchChannelCount) {\n                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                            else {\n                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\n                            }\n                        }\n                        else {\n                            if (this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].type == 2) {\n                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                            else {\n                                if (fromSlarmoosBox || fromUltraBox) {\n                                    const chipWaveReal = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    const chipWaveCounter = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    if (chipWaveCounter == 3) {\n                                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveReal + 186);\n                                    }\n                                    else if (chipWaveCounter == 2) {\n                                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveReal + 124);\n                                    }\n                                    else if (chipWaveCounter == 1) {\n                                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveReal + 62);\n                                    }\n                                    else {\n                                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveReal);\n                                    }\n                                }\n                                else {\n                                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                }\n                            }\n                        }\n                    }\n                    break;\n                case 102:\n                    {\n                        if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\n                            if (beforeSeven && fromBeepBox) {\n                                const legacyToCutoff = [10, 6, 3, 0, 8, 5, 2];\n                                const legacyToEnvelope = [\"none\", \"none\", \"none\", \"none\", \"decay 1\", \"decay 2\", \"decay 3\"];\n                                if (beforeThree && fromBeepBox) {\n                                    const channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    const instrument = this.channels[channelIndex].instruments[0];\n                                    const legacySettings = legacySettingsCache[channelIndex][0];\n                                    const legacyFilter = [1, 3, 4, 5][clamp(0, legacyToCutoff.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                                    legacySettings.filterCutoff = legacyToCutoff[legacyFilter];\n                                    legacySettings.filterResonance = 0;\n                                    legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyToEnvelope[legacyFilter]];\n                                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                                }\n                                else if (beforeSix && fromBeepBox) {\n                                    for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                                        for (let i = 0; i < this.channels[channelIndex].instruments.length; i++) {\n                                            const instrument = this.channels[channelIndex].instruments[i];\n                                            const legacySettings = legacySettingsCache[channelIndex][i];\n                                            const legacyFilter = clamp(0, legacyToCutoff.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);\n                                            if (channelIndex < this.pitchChannelCount) {\n                                                legacySettings.filterCutoff = legacyToCutoff[legacyFilter];\n                                                legacySettings.filterResonance = 0;\n                                                legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyToEnvelope[legacyFilter]];\n                                            }\n                                            else {\n                                                legacySettings.filterCutoff = 10;\n                                                legacySettings.filterResonance = 0;\n                                                legacySettings.filterEnvelope = Config.envelopes.dictionary[\"none\"];\n                                            }\n                                            instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                                        }\n                                    }\n                                }\n                                else {\n                                    const legacyFilter = clamp(0, legacyToCutoff.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                                    const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];\n                                    legacySettings.filterCutoff = legacyToCutoff[legacyFilter];\n                                    legacySettings.filterResonance = 0;\n                                    legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyToEnvelope[legacyFilter]];\n                                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                                }\n                            }\n                            else {\n                                const filterCutoffRange = 11;\n                                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                                const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];\n                                legacySettings.filterCutoff = clamp(0, filterCutoffRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                            }\n                        }\n                        else {\n                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            let typeCheck = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            if (fromTheepBox) {\n                                if (typeCheck == 0) {\n                                    instrument.noteFilterType = false;\n                                    typeCheck = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    const originalControlPointCount = typeCheck;\n                                    instrument.noteFilter.controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalControlPointCount);\n                                    for (let i = instrument.noteFilter.controlPoints.length; i < instrument.noteFilter.controlPointCount; i++) {\n                                        instrument.noteFilter.controlPoints[i] = new FilterControlPoint();\n                                    }\n                                    for (let i = 0; i < instrument.noteFilter.controlPointCount; i++) {\n                                        const point = instrument.noteFilter.controlPoints[i];\n                                        point.type = clamp(0, 3, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    }\n                                    for (let i = instrument.noteFilter.controlPointCount; i < originalControlPointCount; i++) {\n                                        charIndex += 3;\n                                    }\n                                    instrument.noteSubFilters[0] = instrument.noteFilter;\n                                    let usingSubFilterBitfield = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    for (let j = 0; j < Config.filterMorphCount - 1; j++) {\n                                        if (usingSubFilterBitfield & (1 << j)) {\n                                            const originalSubfilterControlPointCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                            if (instrument.noteSubFilters[j + 1] == null)\n                                                instrument.noteSubFilters[j + 1] = new FilterSettings();\n                                            instrument.noteSubFilters[j + 1].controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalSubfilterControlPointCount);\n                                            for (let i = instrument.noteSubFilters[j + 1].controlPoints.length; i < instrument.noteSubFilters[j + 1].controlPointCount; i++) {\n                                                instrument.noteSubFilters[j + 1].controlPoints[i] = new FilterControlPoint();\n                                            }\n                                            for (let i = 0; i < instrument.noteSubFilters[j + 1].controlPointCount; i++) {\n                                                const point = instrument.noteSubFilters[j + 1].controlPoints[i];\n                                                point.type = clamp(0, 3, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                                point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                                point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                            }\n                                            for (let i = instrument.noteSubFilters[j + 1].controlPointCount; i < originalSubfilterControlPointCount; i++) {\n                                                charIndex += 3;\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    instrument.noteFilterType = true;\n                                    instrument.noteFilterSimpleCut = clamp(0, Config.filterSimpleCutRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    instrument.noteFilterSimplePeak = clamp(0, Config.filterSimplePeakRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                }\n                            }\n                            else {\n                                let newEffect = instrument.addEffect(5);\n                                if (fromBeepBox || typeCheck == 0) {\n                                    newEffect.eqFilterType = false;\n                                    if (fromJummBox || fromGoldBox || fromUltraBox || fromSlarmoosBox)\n                                        typeCheck = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    const originalControlPointCount = typeCheck;\n                                    newEffect.eqFilter.controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalControlPointCount);\n                                    for (let i = newEffect.eqFilter.controlPoints.length; i < newEffect.eqFilter.controlPointCount; i++) {\n                                        newEffect.eqFilter.controlPoints[i] = new FilterControlPoint();\n                                    }\n                                    for (let i = 0; i < newEffect.eqFilter.controlPointCount; i++) {\n                                        const point = newEffect.eqFilter.controlPoints[i];\n                                        point.type = clamp(0, 3, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    }\n                                    for (let i = newEffect.eqFilter.controlPointCount; i < originalControlPointCount; i++) {\n                                        charIndex += 3;\n                                    }\n                                    newEffect.eqSubFilters[0] = newEffect.eqFilter;\n                                    if ((fromJummBox && !beforeFive) || (fromGoldBox && !beforeFour) || fromUltraBox || fromSlarmoosBox) {\n                                        let usingSubFilterBitfield = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        for (let j = 0; j < Config.filterMorphCount - 1; j++) {\n                                            if (usingSubFilterBitfield & (1 << j)) {\n                                                const originalSubfilterControlPointCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                                if (newEffect.eqSubFilters[j + 1] == null)\n                                                    newEffect.eqSubFilters[j + 1] = new FilterSettings();\n                                                newEffect.eqSubFilters[j + 1].controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalSubfilterControlPointCount);\n                                                for (let i = newEffect.eqSubFilters[j + 1].controlPoints.length; i < newEffect.eqSubFilters[j + 1].controlPointCount; i++) {\n                                                    newEffect.eqSubFilters[j + 1].controlPoints[i] = new FilterControlPoint();\n                                                }\n                                                for (let i = 0; i < newEffect.eqSubFilters[j + 1].controlPointCount; i++) {\n                                                    const point = newEffect.eqSubFilters[j + 1].controlPoints[i];\n                                                    point.type = clamp(0, 3, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                                    point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                                    point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                                }\n                                                for (let i = newEffect.eqSubFilters[j + 1].controlPointCount; i < originalSubfilterControlPointCount; i++) {\n                                                    charIndex += 3;\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    newEffect.eqFilterType = true;\n                                    newEffect.eqFilterSimpleCut = clamp(0, Config.filterSimpleCutRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    newEffect.eqFilterSimplePeak = clamp(0, Config.filterSimplePeakRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                }\n                            }\n                        }\n                    }\n                    break;\n                case 121:\n                    {\n                        if (fromSlarmoosBox || fromUltraBox) {\n                            if (beforeThree && fromUltraBox) {\n                                const sampleLoopInfoEncodedLength = decode32BitNumber(compressed, charIndex);\n                                charIndex += 6;\n                                const sampleLoopInfoEncoded = compressed.slice(charIndex, charIndex + sampleLoopInfoEncodedLength);\n                                charIndex += sampleLoopInfoEncodedLength;\n                                const sampleLoopInfo = JSON.parse(atob(sampleLoopInfoEncoded));\n                                for (const entry of sampleLoopInfo) {\n                                    const channelIndex = entry[\"channel\"];\n                                    const instrumentIndex = entry[\"instrument\"];\n                                    const info = entry[\"info\"];\n                                    const instrument = this.channels[channelIndex].instruments[instrumentIndex];\n                                    instrument.isUsingAdvancedLoopControls = info[\"isUsingAdvancedLoopControls\"];\n                                    instrument.chipWaveLoopStart = info[\"chipWaveLoopStart\"];\n                                    instrument.chipWaveLoopEnd = info[\"chipWaveLoopEnd\"];\n                                    instrument.chipWaveLoopMode = info[\"chipWaveLoopMode\"];\n                                    instrument.chipWavePlayBackwards = info[\"chipWavePlayBackwards\"];\n                                    instrument.chipWaveStartOffset = info[\"chipWaveStartOffset\"];\n                                }\n                            }\n                            else {\n                                const encodedLoopMode = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                const isUsingAdvancedLoopControls = Boolean(encodedLoopMode & 1);\n                                const chipWaveLoopMode = encodedLoopMode >> 1;\n                                const encodedReleaseMode = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                const chipWaveInStereo = Boolean(encodedReleaseMode & 2);\n                                const chipWavePlayBackwards = Boolean(encodedReleaseMode & 1);\n                                const chipWaveLoopStart = decode32BitNumber(compressed, charIndex);\n                                charIndex += 6;\n                                const chipWaveLoopEnd = decode32BitNumber(compressed, charIndex);\n                                charIndex += 6;\n                                const chipWaveStartOffset = decode32BitNumber(compressed, charIndex);\n                                charIndex += 6;\n                                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                                instrument.isUsingAdvancedLoopControls = isUsingAdvancedLoopControls;\n                                instrument.chipWaveLoopStart = chipWaveLoopStart;\n                                instrument.chipWaveLoopEnd = chipWaveLoopEnd;\n                                instrument.chipWaveLoopMode = chipWaveLoopMode;\n                                instrument.chipWavePlayBackwards = chipWavePlayBackwards;\n                                instrument.chipWaveStartOffset = chipWaveStartOffset;\n                                instrument.chipWaveInStereo = chipWaveInStereo;\n                            }\n                        }\n                        else if (fromGoldBox && !beforeFour && beforeSix) {\n                            if (document.URL.substring(document.URL.length - 13).toLowerCase() != \"legacysamples\") {\n                                if (!willLoadLegacySamplesForOldSongs) {\n                                    willLoadLegacySamplesForOldSongs = true;\n                                    Config.willReloadForCustomSamples = true;\n                                    EditorConfig.customSamples = [\"legacySamples\"];\n                                    loadBuiltInSamples(0);\n                                }\n                            }\n                            this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 125);\n                        }\n                        else if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                            const filterResonanceRange = 8;\n                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];\n                            legacySettings.filterResonance = clamp(0, filterResonanceRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                        }\n                    }\n                    break;\n                case 122:\n                    {\n                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        const pregoldToEnvelope = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];\n                        if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\n                            if ((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox && !fromSlarmoosBox)) {\n                            }\n                            if (instrument.type == 4) {\n                                for (let i = 0; i < Config.drumCount; i++) {\n                                    let aa = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    if ((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox && !fromSlarmoosBox))\n                                        aa = pregoldToEnvelope[aa];\n                                    instrument.drumsetEnvelopes[i] = Song._envelopeFromLegacyIndex(aa).index;\n                                }\n                            }\n                            else {\n                                const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];\n                                let aa = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                if ((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox && !fromSlarmoosBox))\n                                    aa = pregoldToEnvelope[aa];\n                                legacySettings.filterEnvelope = Song._envelopeFromLegacyIndex(aa);\n                                instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                            }\n                        }\n                        else {\n                            for (let i = 0; i < Config.drumCount; i++) {\n                                let aa = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                if ((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox && !fromSlarmoosBox))\n                                    aa = pregoldToEnvelope[aa];\n                                if (!fromSlarmoosBox && aa >= 2)\n                                    aa++;\n                                instrument.drumsetEnvelopes[i] = clamp(0, Config.envelopes.length, aa);\n                            }\n                        }\n                    }\n                    break;\n                case 87:\n                    {\n                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        instrument.pulseWidth = clamp(0, Config.pulseWidthRange + (+(fromJummBox)) + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        if (fromBeepBox) {\n                            instrument.pulseWidth = Math.round(Math.pow(0.5, (7 - instrument.pulseWidth) * Config.pulseWidthStepPower) * Config.pulseWidthRange);\n                        }\n                        if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\n                            const pregoldToEnvelope = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];\n                            const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];\n                            let aa = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            if ((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox && !fromSlarmoosBox))\n                                aa = pregoldToEnvelope[aa];\n                            legacySettings.pulseEnvelope = Song._envelopeFromLegacyIndex(aa);\n                            instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                        }\n                        if ((fromUltraBox && !beforeFour) || fromSlarmoosBox) {\n                            instrument.decimalOffset = clamp(0, 99 + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                    }\n                    break;\n                case 73:\n                    {\n                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        const sustainValue = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        instrument.stringSustain = clamp(0, Config.stringSustainRange, sustainValue & 0x1F);\n                        instrument.stringSustainType = Config.enableAcousticSustain ? clamp(0, 2, sustainValue >> 5) : 0;\n                    }\n                    break;\n                case 100:\n                    {\n                        if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                            const legacySettings = [\n                                { transition: \"interrupt\", fadeInSeconds: 0.0, fadeOutTicks: -1 },\n                                { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: -3 },\n                                { transition: \"normal\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\n                                { transition: \"slide in pattern\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\n                                { transition: \"normal\", fadeInSeconds: 0.04, fadeOutTicks: 6 },\n                                { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: 48 },\n                                { transition: \"normal\", fadeInSeconds: 0.0125, fadeOutTicks: 72 },\n                                { transition: \"normal\", fadeInSeconds: 0.06, fadeOutTicks: 96 },\n                                { transition: \"slide in pattern\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\n                            ];\n                            if (beforeThree && fromBeepBox) {\n                                const channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                                const instrument = this.channels[channelIndex].instruments[0];\n                                instrument.fadeIn = secondsToFadeInSetting(settings.fadeInSeconds);\n                                instrument.fadeOut = ticksToFadeOutSetting(settings.fadeOutTicks);\n                                instrument.transition = Config.transitions.dictionary[settings.transition].index;\n                                if (instrument.transition != Config.transitions.dictionary[\"normal\"].index) {\n                                    instrument.mdeffects |= 1 << 3;\n                                }\n                            }\n                            else if (beforeSix && fromBeepBox) {\n                                for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                                    for (const instrument of this.channels[channelIndex].instruments) {\n                                        const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                                        instrument.fadeIn = secondsToFadeInSetting(settings.fadeInSeconds);\n                                        instrument.fadeOut = ticksToFadeOutSetting(settings.fadeOutTicks);\n                                        instrument.transition = Config.transitions.dictionary[settings.transition].index;\n                                        if (instrument.transition != Config.transitions.dictionary[\"normal\"].index) {\n                                            instrument.mdeffects |= 1 << 3;\n                                        }\n                                    }\n                                }\n                            }\n                            else if ((beforeFour && !fromGoldBox && !fromUltraBox && !fromSlarmoosBox) || fromBeepBox) {\n                                const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                                instrument.fadeIn = secondsToFadeInSetting(settings.fadeInSeconds);\n                                instrument.fadeOut = ticksToFadeOutSetting(settings.fadeOutTicks);\n                                instrument.transition = Config.transitions.dictionary[settings.transition].index;\n                                if (instrument.transition != Config.transitions.dictionary[\"normal\"].index) {\n                                    instrument.mdeffects |= 1 << 3;\n                                }\n                            }\n                            else {\n                                const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                                instrument.fadeIn = secondsToFadeInSetting(settings.fadeInSeconds);\n                                instrument.fadeOut = ticksToFadeOutSetting(settings.fadeOutTicks);\n                                instrument.transition = Config.transitions.dictionary[settings.transition].index;\n                                if (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] > 0) {\n                                    instrument.legacyTieOver = true;\n                                }\n                                instrument.clicklessTransition = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\n                                if (instrument.transition != Config.transitions.dictionary[\"normal\"].index || instrument.clicklessTransition) {\n                                    instrument.mdeffects |= 1 << 3;\n                                }\n                            }\n                        }\n                        else {\n                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            instrument.fadeIn = clamp(0, Config.fadeInRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.fadeOut = clamp(0, Config.fadeOutTicks.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            if (fromJummBox || fromGoldBox || fromUltraBox || fromSlarmoosBox)\n                                instrument.clicklessTransition = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\n                        }\n                    }\n                    break;\n                case 99:\n                    {\n                        if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                            if (beforeSeven && fromBeepBox) {\n                                if (beforeThree && fromBeepBox) {\n                                    const legacyEffects = [0, 3, 2, 0];\n                                    const legacyEnvelopes = [\"none\", \"none\", \"none\", \"tremolo2\"];\n                                    const channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    const effect = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    const instrument = this.channels[channelIndex].instruments[0];\n                                    const legacySettings = legacySettingsCache[channelIndex][0];\n                                    instrument.vibrato = legacyEffects[effect];\n                                    if (legacySettings.filterEnvelope == undefined || legacySettings.filterEnvelope.type == 0) {\n                                        legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyEnvelopes[effect]];\n                                        instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                                    }\n                                    if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\n                                        instrument.mdeffects |= 1 << 2;\n                                    }\n                                }\n                                else if (beforeSix && fromBeepBox) {\n                                    const legacyEffects = [0, 1, 2, 3, 0, 0];\n                                    const legacyEnvelopes = [\"none\", \"none\", \"none\", \"none\", \"tremolo5\", \"tremolo2\"];\n                                    for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                                        for (let i = 0; i < this.channels[channelIndex].instruments.length; i++) {\n                                            const effect = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                            const instrument = this.channels[channelIndex].instruments[i];\n                                            const legacySettings = legacySettingsCache[channelIndex][i];\n                                            instrument.vibrato = legacyEffects[effect];\n                                            if (legacySettings.filterEnvelope == undefined || legacySettings.filterEnvelope.type == 0) {\n                                                legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyEnvelopes[effect]];\n                                                instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                                            }\n                                            if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\n                                                instrument.mdeffects |= 1 << 2;\n                                            }\n                                            if ((legacyGlobalReverb != 0 || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) && !this.getChannelIsNoise(channelIndex)) {\n                                                let newEffect = instrument.addEffect(0);\n                                                newEffect.reverb = legacyGlobalReverb;\n                                            }\n                                        }\n                                    }\n                                }\n                                else {\n                                    const legacyEffects = [0, 1, 2, 3, 0, 0];\n                                    const legacyEnvelopes = [\"none\", \"none\", \"none\", \"none\", \"tremolo5\", \"tremolo2\"];\n                                    const effect = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                                    const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];\n                                    instrument.vibrato = legacyEffects[effect];\n                                    if (legacySettings.filterEnvelope == undefined || legacySettings.filterEnvelope.type == 0) {\n                                        legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyEnvelopes[effect]];\n                                        instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                                    }\n                                    if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\n                                        instrument.mdeffects |= 1 << 2;\n                                    }\n                                    if (legacyGlobalReverb != 0 || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                                        let newEffect = instrument.addEffect(0);\n                                        newEffect.reverb = legacyGlobalReverb;\n                                    }\n                                }\n                            }\n                            else {\n                                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                                const vibrato = clamp(0, Config.vibratos.length + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                instrument.vibrato = vibrato;\n                                if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\n                                    instrument.mdeffects |= 1 << 2;\n                                }\n                                if (vibrato == Config.vibratos.length) {\n                                    instrument.vibratoDepth = clamp(0, Config.modulators.dictionary[\"vibrato depth\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 50;\n                                    instrument.vibratoSpeed = clamp(0, Config.modulators.dictionary[\"vibrato speed\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    instrument.vibratoDelay = clamp(0, Config.modulators.dictionary[\"vibrato delay\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 2;\n                                    instrument.vibratoType = clamp(0, Config.vibratoTypes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    instrument.mdeffects |= 1 << 2;\n                                }\n                                else {\n                                    instrument.vibratoDepth = Config.vibratos[instrument.vibrato].amplitude;\n                                    instrument.vibratoSpeed = 10;\n                                    instrument.vibratoDelay = Config.vibratos[instrument.vibrato].delayTicks / 2;\n                                    instrument.vibratoType = Config.vibratos[instrument.vibrato].type;\n                                }\n                            }\n                        }\n                        else {\n                            if (fromSlarmoosBox && !beforeFour) {\n                                const originalControlPointCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                this.eqFilter.controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalControlPointCount);\n                                for (let i = this.eqFilter.controlPoints.length; i < this.eqFilter.controlPointCount; i++) {\n                                    this.eqFilter.controlPoints[i] = new FilterControlPoint();\n                                }\n                                for (let i = 0; i < this.eqFilter.controlPointCount; i++) {\n                                    const point = this.eqFilter.controlPoints[i];\n                                    point.type = clamp(0, 3, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                }\n                                for (let i = this.eqFilter.controlPointCount; i < originalControlPointCount; i++) {\n                                    charIndex += 3;\n                                }\n                                this.eqSubFilters[0] = this.eqFilter;\n                                let usingSubFilterBitfield = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                for (let j = 0; j < Config.filterMorphCount - 1; j++) {\n                                    if (usingSubFilterBitfield & (1 << j)) {\n                                        const originalSubfilterControlPointCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                        if (this.eqSubFilters[j + 1] == null)\n                                            this.eqSubFilters[j + 1] = new FilterSettings();\n                                        this.eqSubFilters[j + 1].controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalSubfilterControlPointCount);\n                                        for (let i = this.eqSubFilters[j + 1].controlPoints.length; i < this.eqSubFilters[j + 1].controlPointCount; i++) {\n                                            this.eqSubFilters[j + 1].controlPoints[i] = new FilterControlPoint();\n                                        }\n                                        for (let i = 0; i < this.eqSubFilters[j + 1].controlPointCount; i++) {\n                                            const point = this.eqSubFilters[j + 1].controlPoints[i];\n                                            point.type = clamp(0, 3, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                            point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                            point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        }\n                                        for (let i = this.eqSubFilters[j + 1].controlPointCount; i < originalSubfilterControlPointCount; i++) {\n                                            charIndex += 3;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    break;\n                case 71:\n                    {\n                        if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\n                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            instrument.arpeggioSpeed = clamp(0, Config.modulators.dictionary[\"arp speed\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.fastTwoNoteArp = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\n                        }\n                        else {\n                        }\n                    }\n                    break;\n                case 104:\n                    {\n                        if (beforeThree && fromBeepBox) {\n                            const channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            const instrument = this.channels[channelIndex].instruments[0];\n                            instrument.unison = clamp(0, Config.unisons.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.unisonVoices = Config.unisons[instrument.unison].voices;\n                            instrument.unisonSpread = Config.unisons[instrument.unison].spread;\n                            instrument.unisonOffset = Config.unisons[instrument.unison].offset;\n                            instrument.unisonExpression = Config.unisons[instrument.unison].expression;\n                            instrument.unisonSign = Config.unisons[instrument.unison].sign;\n                        }\n                        else if (beforeSix && fromBeepBox) {\n                            for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                                for (const instrument of this.channels[channelIndex].instruments) {\n                                    const originalValue = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    let unison = clamp(0, Config.unisons.length, originalValue);\n                                    if (originalValue == 8) {\n                                        unison = 2;\n                                        instrument.chord = 3;\n                                    }\n                                    instrument.unison = unison;\n                                    instrument.unisonVoices = Config.unisons[instrument.unison].voices;\n                                    instrument.unisonSpread = Config.unisons[instrument.unison].spread;\n                                    instrument.unisonOffset = Config.unisons[instrument.unison].offset;\n                                    instrument.unisonExpression = Config.unisons[instrument.unison].expression;\n                                    instrument.unisonSign = Config.unisons[instrument.unison].sign;\n                                }\n                            }\n                        }\n                        else if (beforeSeven && fromBeepBox) {\n                            const originalValue = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            let unison = clamp(0, Config.unisons.length, originalValue);\n                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            if (originalValue == 8) {\n                                unison = 2;\n                                instrument.chord = 3;\n                            }\n                            instrument.unison = unison;\n                            instrument.unisonVoices = Config.unisons[instrument.unison].voices;\n                            instrument.unisonSpread = Config.unisons[instrument.unison].spread;\n                            instrument.unisonOffset = Config.unisons[instrument.unison].offset;\n                            instrument.unisonExpression = Config.unisons[instrument.unison].expression;\n                            instrument.unisonSign = Config.unisons[instrument.unison].sign;\n                        }\n                        else {\n                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            instrument.unison = clamp(0, Config.unisons.length + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            const unisonLength = (beforeFive || !fromSlarmoosBox) ? 27 : Config.unisons.length;\n                            if (((fromUltraBox && !beforeFive) || fromSlarmoosBox) && (instrument.unison == unisonLength)) {\n                                instrument.unison = Config.unisons.length;\n                                instrument.unisonVoices = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                const unisonSpreadNegative = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                const unisonSpread = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 63)) * 63);\n                                const unisonOffsetNegative = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                const unisonOffset = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 63)) * 63);\n                                const unisonExpressionNegative = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                const unisonExpression = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 63);\n                                const unisonSignNegative = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                const unisonSign = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 63);\n                                instrument.unisonSpread = unisonSpread / 1000;\n                                if (unisonSpreadNegative == 0)\n                                    instrument.unisonSpread *= -1;\n                                instrument.unisonOffset = unisonOffset / 1000;\n                                if (unisonOffsetNegative == 0)\n                                    instrument.unisonOffset *= -1;\n                                instrument.unisonExpression = unisonExpression / 1000;\n                                if (unisonExpressionNegative == 0)\n                                    instrument.unisonExpression *= -1;\n                                instrument.unisonSign = unisonSign / 1000;\n                                if (unisonSignNegative == 0)\n                                    instrument.unisonSign *= -1;\n                            }\n                            else {\n                                instrument.unisonVoices = Config.unisons[instrument.unison].voices;\n                                instrument.unisonSpread = Config.unisons[instrument.unison].spread;\n                                instrument.unisonOffset = Config.unisons[instrument.unison].offset;\n                                instrument.unisonExpression = Config.unisons[instrument.unison].expression;\n                                instrument.unisonSign = Config.unisons[instrument.unison].sign;\n                            }\n                        }\n                    }\n                    break;\n                case 67:\n                    {\n                        if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            instrument.chord = clamp(0, Config.chords.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            if (instrument.chord != Config.chords.dictionary[\"simultaneous\"].index) {\n                                instrument.mdeffects |= 1 << 4;\n                            }\n                        }\n                        else {\n                        }\n                    }\n                    break;\n                case 113:\n                    {\n                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                            instrument.addEffect(base64CharCodeToInt[compressed.charCodeAt(charIndex++)] & ((1 << 11) - 1));\n                            const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];\n                            instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                        }\n                        else {\n                            const effectCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            if (fromTheepBox) {\n                                instrument.effects = [];\n                                for (let i = 0; i < effectCount; i++) {\n                                    let newEffect = instrument.addEffect(base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    if (newEffect.type == 5) {\n                                        let typeCheck = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                        if (typeCheck == 0) {\n                                            newEffect.eqFilterType = false;\n                                            typeCheck = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                            newEffect.eqFilter.controlPointCount = clamp(0, Config.filterMaxPoints + 1, typeCheck);\n                                            for (let i = newEffect.eqFilter.controlPoints.length; i < newEffect.eqFilter.controlPointCount; i++) {\n                                                newEffect.eqFilter.controlPoints[i] = new FilterControlPoint();\n                                            }\n                                            for (let i = 0; i < newEffect.eqFilter.controlPointCount; i++) {\n                                                const point = newEffect.eqFilter.controlPoints[i];\n                                                point.type = clamp(0, 3, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                                point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                                point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                            }\n                                            for (let i = newEffect.eqFilter.controlPointCount; i < typeCheck; i++) {\n                                                charIndex += 3;\n                                            }\n                                            newEffect.eqSubFilters[0] = newEffect.eqFilter;\n                                            let usingSubFilterBitfield = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                            for (let j = 0; j < Config.filterMorphCount - 1; j++) {\n                                                if (usingSubFilterBitfield & (1 << j)) {\n                                                    const originalSubfilterControlPointCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                                    if (newEffect.eqSubFilters[j + 1] == null)\n                                                        newEffect.eqSubFilters[j + 1] = new FilterSettings();\n                                                    newEffect.eqSubFilters[j + 1].controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalSubfilterControlPointCount);\n                                                    for (let i = newEffect.eqSubFilters[j + 1].controlPoints.length; i < newEffect.eqSubFilters[j + 1].controlPointCount; i++) {\n                                                        newEffect.eqSubFilters[j + 1].controlPoints[i] = new FilterControlPoint();\n                                                    }\n                                                    for (let i = 0; i < newEffect.eqSubFilters[j + 1].controlPointCount; i++) {\n                                                        const point = newEffect.eqSubFilters[j + 1].controlPoints[i];\n                                                        point.type = clamp(0, 3, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                                        point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                                        point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                                    }\n                                                    for (let i = newEffect.eqSubFilters[j + 1].controlPointCount; i < originalSubfilterControlPointCount; i++) {\n                                                        charIndex += 3;\n                                                    }\n                                                }\n                                            }\n                                        }\n                                        else {\n                                            newEffect.eqFilterType = true;\n                                            newEffect.eqFilter.reset();\n                                            newEffect.eqFilterSimpleCut = clamp(0, Config.filterSimpleCutRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                            newEffect.eqFilterSimplePeak = clamp(0, Config.filterSimplePeakRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        }\n                                    }\n                                    if (newEffect.type == 3) {\n                                        if (fromTheepBox)\n                                            newEffect.distortion = clamp(0, Config.distortionRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        else\n                                            newEffect.distortion = clamp(0, Config.distortionRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) * 2;\n                                        if ((fromJummBox && !beforeFive) || fromGoldBox || fromUltraBox || fromSlarmoosBox)\n                                            instrument.aliases = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\n                                    }\n                                    if (newEffect.type == 4) {\n                                        newEffect.bitcrusherFreq = clamp(0, Config.bitcrusherFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        newEffect.bitcrusherQuantization = clamp(0, Config.bitcrusherQuantizationRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    }\n                                    if (newEffect.type == 2) {\n                                        if (fromBeepBox) {\n                                            newEffect.pan = clamp(0, Config.panMax + 1, Math.round(base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * ((Config.panMax) / 8.0)));\n                                        }\n                                        else {\n                                            newEffect.pan = clamp(0, Config.panMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        }\n                                        if ((fromJummBox && !beforeTwo) || fromGoldBox || fromUltraBox || fromSlarmoosBox)\n                                            newEffect.panDelay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                        if (fromTheepBox)\n                                            newEffect.panMode = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    }\n                                    if (newEffect.type == 10) {\n                                        newEffect.flanger = clamp(0, Config.flangerRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        newEffect.flangerSpeed = clamp(0, Config.flangerSpeedRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        newEffect.flangerDepth = clamp(0, Config.flangerDepthRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        newEffect.flangerFeedback = clamp(0, Config.flangerFeedbackRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    }\n                                    if (newEffect.type == 1) {\n                                        if (fromTheepBox)\n                                            newEffect.chorus = clamp(0, (Config.chorusRange / 2) + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        else if (fromBeepBox)\n                                            newEffect.chorus = clamp(0, (Config.chorusRange / 2) + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) * 4;\n                                        else\n                                            newEffect.chorus = clamp(0, Config.chorusRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) * 2;\n                                    }\n                                    if (newEffect.type == 9) {\n                                        newEffect.gain = clamp(0, Config.volumeRange, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    }\n                                    if (newEffect.type == 6) {\n                                        if (!fromTheepBox)\n                                            newEffect.echoSustain = clamp(0, Config.echoSustainRange / 3, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) * 3;\n                                        else\n                                            newEffect.echoSustain = clamp(0, Config.echoSustainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        newEffect.echoDelay = clamp(0, Config.echoDelayRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        newEffect.echoPingPong = clamp(0, Config.panMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    }\n                                    if (newEffect.type == 0) {\n                                        if (fromBeepBox) {\n                                            newEffect.reverb = clamp(0, Config.reverbRange, Math.round(base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * Config.reverbRange / 3.0));\n                                        }\n                                        else {\n                                            newEffect.reverb = clamp(0, Config.reverbRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        }\n                                    }\n                                    if (newEffect.type == 8) {\n                                        newEffect.granular = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                        newEffect.grainSize = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                        newEffect.grainAmounts = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                        newEffect.grainRange = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    }\n                                    if (newEffect.type == 7) {\n                                        newEffect.ringModulation = clamp(0, Config.ringModRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        newEffect.ringModulationHz = clamp(0, Config.ringModHzRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        newEffect.ringModWaveformIndex = clamp(0, Config.operatorWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        newEffect.ringModPulseWidth = clamp(0, Config.pulseWidthRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        newEffect.ringModHzOffset = clamp(Config.rmHzOffsetMin, Config.rmHzOffsetMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    }\n                                }\n                                instrument.mdeffects = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            }\n                            else {\n                                const legacyEffectTypes = [0, 1, 2, 3, 4, 5, 6, 0, 1, 2, 3, 4, 5, 7, 8];\n                                let bit = 0;\n                                if (fromSlarmoosBox && !beforeFive) {\n                                    const bits = new BitFieldReader(compressed, charIndex, charIndex + 18);\n                                    for (let i = 0; i < 18; i++) {\n                                        bit = bits.read(1);\n                                        if (i > 6 && i < 13)\n                                            instrument.mdeffects &= legacyEffectTypes[bit];\n                                        else if (bit == 1)\n                                            instrument.addEffect(legacyEffectTypes[i]);\n                                    }\n                                }\n                                else {\n                                    const bits = new BitFieldReader(compressed, charIndex, charIndex + 12);\n                                    for (let i = 0; i < 12; i++) {\n                                        bit = bits.read(1);\n                                        if (i > 6)\n                                            instrument.mdeffects &= legacyEffectTypes[bit];\n                                        else if (bit == 1)\n                                            instrument.addEffect(legacyEffectTypes[i]);\n                                    }\n                                }\n                            }\n                            if (effectsIncludeTransition(instrument.mdeffects)) {\n                                instrument.transition = clamp(0, Config.transitions.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                            if (effectsIncludeChord(instrument.mdeffects)) {\n                                instrument.chord = clamp(0, Config.chords.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                if (instrument.chord == Config.chords.dictionary[\"arpeggio\"].index && (fromJummBox || fromGoldBox || fromUltraBox || fromSlarmoosBox)) {\n                                    instrument.arpeggioSpeed = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    instrument.fastTwoNoteArp = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) ? true : false;\n                                }\n                                if (instrument.chord == Config.chords.dictionary[\"monophonic\"].index && fromSlarmoosBox && !beforeFive) {\n                                    instrument.monoChordTone = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                }\n                            }\n                            if (effectsIncludePitchShift(instrument.mdeffects)) {\n                                instrument.pitchShift = clamp(0, Config.pitchShiftRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                            if (effectsIncludeDetune(instrument.mdeffects)) {\n                                if (fromBeepBox) {\n                                    instrument.detune = clamp(Config.detuneMin, Config.detuneMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    instrument.detune = Math.round((instrument.detune - 9) * (Math.abs(instrument.detune - 9) + 1) / 2 + Config.detuneCenter);\n                                }\n                                else {\n                                    instrument.detune = clamp(Config.detuneMin, Config.detuneMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                }\n                            }\n                            if (effectsIncludeVibrato(instrument.mdeffects)) {\n                                instrument.vibrato = clamp(0, Config.vibratos.length + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                if (instrument.vibrato == Config.vibratos.length && (fromJummBox || fromGoldBox || fromUltraBox || fromSlarmoosBox)) {\n                                    instrument.vibratoDepth = clamp(0, Config.modulators.dictionary[\"vibrato depth\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 25;\n                                    instrument.vibratoSpeed = clamp(0, Config.modulators.dictionary[\"vibrato speed\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    instrument.vibratoDelay = clamp(0, Config.modulators.dictionary[\"vibrato delay\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    instrument.vibratoType = clamp(0, Config.vibratoTypes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                }\n                                else {\n                                    instrument.vibratoDepth = Config.vibratos[instrument.vibrato].amplitude;\n                                    instrument.vibratoSpeed = 10;\n                                    instrument.vibratoDelay = Config.vibratos[instrument.vibrato].delayTicks / 2;\n                                    instrument.vibratoType = Config.vibratos[instrument.vibrato].type;\n                                }\n                            }\n                        }\n                    }\n                    break;\n                case 118:\n                    {\n                        if (beforeThree && fromBeepBox) {\n                            const channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            const instrument = this.channels[channelIndex].instruments[0];\n                            instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\n                        }\n                        else if (beforeSix && fromBeepBox) {\n                            for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                                for (const instrument of this.channels[channelIndex].instruments) {\n                                    instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\n                                }\n                            }\n                        }\n                        else if (beforeSeven && fromBeepBox) {\n                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\n                        }\n                        else if (fromBeepBox) {\n                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 25.0 / 7.0));\n                        }\n                        else if (!fromTheepBox) {\n                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            instrument.volume = Math.round(clamp(-Config.volumeRange / 2, Config.volumeRange / 2 + 1, ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)])) - Config.volumeRange / 2) * 2.0);\n                        }\n                        else {\n                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            instrument.volume = Math.round(clamp(-Config.volumeRange / 2, Config.volumeRange / 2 + 1, ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)])) - Config.volumeRange / 2));\n                        }\n                    }\n                    break;\n                case 76:\n                    {\n                    }\n                    break;\n                case 68:\n                    {\n                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\n                            instrument.detune = clamp(Config.detuneMin, Config.detuneMax + 1, ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) * 4);\n                            instrument.mdeffects |= 1 << 1;\n                        }\n                        else {\n                        }\n                    }\n                    break;\n                case 77:\n                    {\n                        let instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        for (let j = 0; j < 64; j++) {\n                            instrument.customChipWave[j]\n                                = clamp(-24, 25, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] - 24);\n                        }\n                        let sum = 0.0;\n                        for (let i = 0; i < instrument.customChipWave.length; i++) {\n                            sum += instrument.customChipWave[i];\n                        }\n                        const average = sum / instrument.customChipWave.length;\n                        let cumulative = 0;\n                        let wavePrev = 0;\n                        for (let i = 0; i < instrument.customChipWave.length; i++) {\n                            cumulative += wavePrev;\n                            wavePrev = instrument.customChipWave[i] - average;\n                            instrument.customChipWaveIntegral[i] = cumulative;\n                        }\n                        instrument.customChipWaveIntegral[64] = 0.0;\n                    }\n                    break;\n                case 79:\n                    {\n                        let nextValue = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        if (nextValue == 0x3f) {\n                            this.restoreLimiterDefaults();\n                        }\n                        else {\n                            this.compressionRatio = (nextValue < 10 ? nextValue / 10 : (1 + (nextValue - 10) / 60));\n                            nextValue = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            this.limitRatio = (nextValue < 10 ? nextValue / 10 : (nextValue - 9));\n                            this.limitDecay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            this.limitRise = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 250.0) + 2000.0;\n                            this.compressionThreshold = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 20.0;\n                            this.limitThreshold = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 20.0;\n                            this.masterGain = ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 50.0;\n                        }\n                    }\n                    break;\n                case 85:\n                    {\n                        for (let channel = 0; channel < this.getChannelCount(); channel++) {\n                            var channelNameLength;\n                            if (beforeFour && !fromGoldBox && !fromUltraBox && !fromSlarmoosBox)\n                                channelNameLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            else\n                                channelNameLength = ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            this.channels[channel].name = decodeURIComponent(compressed.substring(charIndex, charIndex + channelNameLength));\n                            charIndex += channelNameLength;\n                            if (fromTheepBox)\n                                this.channels[channel].color = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        }\n                    }\n                    break;\n                case 65:\n                    {\n                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        if (instrument.type == 1) {\n                            instrument.algorithm = clamp(0, Config.algorithms.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                        else {\n                            instrument.algorithm6Op = clamp(0, Config.algorithms6Op.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.customAlgorithm.fromPreset(instrument.algorithm6Op);\n                            if (compressed.charCodeAt(charIndex) == 67) {\n                                let carrierCountTemp = clamp(1, Config.operatorCount + 2 + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex + 1)]);\n                                charIndex++;\n                                let tempModArray = [];\n                                if (compressed.charCodeAt(charIndex + 1) == 113) {\n                                    charIndex++;\n                                    let j = 0;\n                                    charIndex++;\n                                    while (compressed.charCodeAt(charIndex) != 113) {\n                                        tempModArray[j] = [];\n                                        let o = 0;\n                                        while (compressed.charCodeAt(charIndex) != 82) {\n                                            tempModArray[j][o] = clamp(1, Config.operatorCount + 3, base64CharCodeToInt[compressed.charCodeAt(charIndex)]);\n                                            o++;\n                                            charIndex++;\n                                        }\n                                        j++;\n                                        charIndex++;\n                                    }\n                                    instrument.customAlgorithm.set(carrierCountTemp, tempModArray);\n                                    charIndex++;\n                                }\n                            }\n                        }\n                        if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\n                            const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];\n                            instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                        }\n                    }\n                    break;\n                case 120:\n                    {\n                        if (fromGoldBox && !beforeFour && beforeSix) {\n                            const chipWaveForCompat = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            if ((chipWaveForCompat + 62) > 85) {\n                                if (document.URL.substring(document.URL.length - 13).toLowerCase() != \"legacysamples\") {\n                                    if (!willLoadLegacySamplesForOldSongs) {\n                                        willLoadLegacySamplesForOldSongs = true;\n                                        Config.willReloadForCustomSamples = true;\n                                        EditorConfig.customSamples = [\"legacySamples\"];\n                                        loadBuiltInSamples(0);\n                                    }\n                                }\n                            }\n                            if ((chipWaveForCompat + 62) > 78) {\n                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveForCompat + 63);\n                            }\n                            else if ((chipWaveForCompat + 62) > 67) {\n                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveForCompat + 61);\n                            }\n                            else if ((chipWaveForCompat + 62) == 67) {\n                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = 40;\n                            }\n                            else {\n                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveForCompat + 62);\n                            }\n                        }\n                        else {\n                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            instrument.supersawDynamism = clamp(0, Config.supersawDynamismMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.supersawSpread = clamp(0, Config.supersawSpreadMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.supersawShape = clamp(0, Config.supersawShapeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                    }\n                    break;\n                case 70:\n                    {\n                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        if (instrument.type == 1) {\n                            instrument.feedbackType = clamp(0, Config.feedbacks.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                        else {\n                            instrument.feedbackType6Op = clamp(0, Config.feedbacks6Op.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.customFeedbackType.fromPreset(instrument.feedbackType6Op);\n                            let tempModArray = [];\n                            if (compressed.charCodeAt(charIndex) == 113) {\n                                let j = 0;\n                                charIndex++;\n                                while (compressed.charCodeAt(charIndex) != 113) {\n                                    tempModArray[j] = [];\n                                    let o = 0;\n                                    while (compressed.charCodeAt(charIndex) != 82) {\n                                        tempModArray[j][o] = clamp(1, Config.operatorCount + 2, base64CharCodeToInt[compressed.charCodeAt(charIndex)]);\n                                        o++;\n                                        charIndex++;\n                                    }\n                                    j++;\n                                    charIndex++;\n                                }\n                                instrument.customFeedbackType.set(tempModArray);\n                                charIndex++;\n                            }\n                        }\n                    }\n                    break;\n                case 66:\n                    {\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].feedbackAmplitude = clamp(0, Config.operatorAmplitudeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    }\n                    break;\n                case 86:\n                    {\n                        if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\n                            const pregoldToEnvelope = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];\n                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];\n                            let aa = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            if ((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox && !fromSlarmoosBox))\n                                aa = pregoldToEnvelope[aa];\n                            legacySettings.feedbackEnvelope = Song._envelopeFromLegacyIndex(base64CharCodeToInt[aa]);\n                            instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                        }\n                        else {\n                        }\n                    }\n                    break;\n                case 81:\n                    {\n                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        if (beforeThree && fromGoldBox) {\n                            const freqToGold3 = [4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 18, 20, 22, 24, 2, 1, 9, 17, 19, 21, 23, 0, 3];\n                            for (let o = 0; o < (instrument.type == 11 ? 6 : Config.operatorCount); o++) {\n                                instrument.operators[o].frequency = freqToGold3[clamp(0, freqToGold3.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                            }\n                        }\n                        else if (!fromGoldBox && !fromUltraBox && !fromSlarmoosBox) {\n                            const freqToUltraBox = [4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 18, 20, 23, 27, 2, 1, 9, 17, 19, 21, 23, 0, 3];\n                            for (let o = 0; o < (instrument.type == 11 ? 6 : Config.operatorCount); o++) {\n                                instrument.operators[o].frequency = freqToUltraBox[clamp(0, freqToUltraBox.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                            }\n                        }\n                        else {\n                            for (let o = 0; o < (instrument.type == 11 ? 6 : Config.operatorCount); o++) {\n                                instrument.operators[o].frequency = clamp(0, Config.operatorFrequencies.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                        }\n                    }\n                    break;\n                case 80:\n                    {\n                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        for (let o = 0; o < (instrument.type == 11 ? 6 : Config.operatorCount); o++) {\n                            instrument.operators[o].amplitude = clamp(0, Config.operatorAmplitudeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                    }\n                    break;\n                case 69:\n                    {\n                        const pregoldToEnvelope = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];\n                        const jummToUltraEnvelope = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 58, 59, 60];\n                        const slarURL3toURL4Envelope = [0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14];\n                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\n                            const legacySettings = legacySettingsCache[instrumentChannelIterator][instrumentIndexIterator];\n                            legacySettings.operatorEnvelopes = [];\n                            for (let o = 0; o < (instrument.type == 11 ? 6 : Config.operatorCount); o++) {\n                                let aa = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                if ((beforeTwo && fromGoldBox) || (fromBeepBox))\n                                    aa = pregoldToEnvelope[aa];\n                                if (fromJummBox)\n                                    aa = jummToUltraEnvelope[aa];\n                                legacySettings.operatorEnvelopes[o] = Song._envelopeFromLegacyIndex(aa);\n                            }\n                            instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                        }\n                        else {\n                            const envelopeCount = clamp(0, Config.maxEnvelopeCount + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            let envelopeDiscrete = false;\n                            if ((fromJummBox && !beforeSix) || (fromUltraBox && !beforeFive) || (fromSlarmoosBox)) {\n                                instrument.envelopeSpeed = clamp(0, Config.modulators.dictionary[\"envelope speed\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                if (!fromSlarmoosBox || beforeFive) {\n                                    envelopeDiscrete = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) ? true : false;\n                                }\n                            }\n                            for (let i = 0; i < envelopeCount; i++) {\n                                const target = clamp(0, Config.instrumentAutomationTargets.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                let index = 0;\n                                const maxCount = Config.instrumentAutomationTargets[target].maxCount;\n                                if (maxCount > 1) {\n                                    index = clamp(0, maxCount, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                }\n                                let aa = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                if ((beforeTwo && fromGoldBox) || (fromBeepBox))\n                                    aa = pregoldToEnvelope[aa];\n                                if (fromJummBox)\n                                    aa = jummToUltraEnvelope[aa];\n                                if (!fromSlarmoosBox && aa >= 2)\n                                    aa++;\n                                let updatedEnvelopes = false;\n                                let perEnvelopeSpeed = 1;\n                                if (!fromSlarmoosBox || beforeThree) {\n                                    updatedEnvelopes = true;\n                                    perEnvelopeSpeed = Config.envelopes[aa].speed;\n                                    aa = Config.envelopes[aa].type;\n                                }\n                                else if (beforeFour && aa >= 3)\n                                    aa++;\n                                let isTremolo2 = false;\n                                if ((fromSlarmoosBox && !beforeThree && beforeFour) || updatedEnvelopes) {\n                                    if (aa == 9)\n                                        isTremolo2 = true;\n                                    aa = slarURL3toURL4Envelope[aa];\n                                }\n                                const envelope = clamp(0, ((fromSlarmoosBox && !beforeThree || updatedEnvelopes) ? Config.newEnvelopes.length : Config.envelopes.length), aa);\n                                let pitchEnvelopeStart = 0;\n                                let pitchEnvelopeEnd = Config.maxPitch;\n                                let envelopeInverse = false;\n                                perEnvelopeSpeed = (fromSlarmoosBox && !beforeThree) ? Config.newEnvelopes[envelope].speed : perEnvelopeSpeed;\n                                let perEnvelopeLowerBound = 0;\n                                let perEnvelopeUpperBound = 1;\n                                let steps = 2;\n                                let seed = 2;\n                                let waveform = 0;\n                                if (fromSlarmoosBox && !beforeFour) {\n                                    if (Config.newEnvelopes[envelope].name == \"lfo\") {\n                                        waveform = clamp(0, 7, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        if (waveform == 5 || waveform == 6) {\n                                            steps = clamp(1, Config.randomEnvelopeStepsMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        }\n                                    }\n                                    else if (Config.newEnvelopes[envelope].name == \"random\") {\n                                        steps = clamp(1, Config.randomEnvelopeStepsMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        seed = clamp(1, Config.randomEnvelopeSeedMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        waveform = clamp(0, 4, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    }\n                                }\n                                if (fromSlarmoosBox && !beforeThree) {\n                                    if (Config.newEnvelopes[envelope].name == \"pitch\") {\n                                        if (!instrument.isNoiseInstrument) {\n                                            let pitchEnvelopeCompact = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                            pitchEnvelopeStart = clamp(0, Config.maxPitch + 1, pitchEnvelopeCompact * 64 + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                            pitchEnvelopeCompact = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                            pitchEnvelopeEnd = clamp(0, Config.maxPitch + 1, pitchEnvelopeCompact * 64 + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        }\n                                        else {\n                                            pitchEnvelopeStart = clamp(0, Config.drumCount, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                            pitchEnvelopeEnd = clamp(0, Config.drumCount, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        }\n                                    }\n                                    let checkboxValues = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    if (fromSlarmoosBox && !beforeFive) {\n                                        envelopeDiscrete = (checkboxValues >> 1) == 1 ? true : false;\n                                    }\n                                    envelopeInverse = (checkboxValues & 1) == 1 ? true : false;\n                                    if (Config.newEnvelopes[envelope].name != \"pitch\" && Config.newEnvelopes[envelope].name != \"note size\" && Config.newEnvelopes[envelope].name != \"punch\" && Config.newEnvelopes[envelope].name != \"none\") {\n                                        perEnvelopeSpeed = Config.perEnvelopeSpeedIndices[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\n                                    }\n                                    perEnvelopeLowerBound = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 10;\n                                    perEnvelopeUpperBound = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 10;\n                                }\n                                if (!fromSlarmoosBox || beforeFour) {\n                                    if (isTremolo2) {\n                                        waveform = 0;\n                                        if (envelopeInverse) {\n                                            perEnvelopeUpperBound = Math.floor((perEnvelopeUpperBound / 2) * 10) / 10;\n                                            perEnvelopeLowerBound = Math.floor((perEnvelopeLowerBound / 2) * 10) / 10;\n                                        }\n                                        else {\n                                            perEnvelopeUpperBound = Math.floor((0.5 + (perEnvelopeUpperBound - perEnvelopeLowerBound) / 2) * 10) / 10;\n                                            perEnvelopeLowerBound = 0.5;\n                                        }\n                                    }\n                                }\n                                instrument.addEnvelope(target, index, envelope, true, pitchEnvelopeStart, pitchEnvelopeEnd, envelopeInverse, perEnvelopeSpeed, perEnvelopeLowerBound, perEnvelopeUpperBound, steps, seed, waveform, envelopeDiscrete);\n                                if (fromSlarmoosBox && beforeThree && !beforeTwo) {\n                                    let pitchEnvelopeCompact = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    instrument.envelopes[i].pitchEnvelopeStart = pitchEnvelopeCompact * 64 + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    pitchEnvelopeCompact = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    instrument.envelopes[i].pitchEnvelopeEnd = pitchEnvelopeCompact * 64 + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    instrument.envelopes[i].inverse = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] == 1 ? true : false;\n                                }\n                            }\n                            let instrumentPitchEnvelopeStart = 0;\n                            let instrumentPitchEnvelopeEnd = Config.maxPitch;\n                            let instrumentEnvelopeInverse = false;\n                            if (fromSlarmoosBox && beforeTwo) {\n                                let pitchEnvelopeCompact = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                instrumentPitchEnvelopeStart = pitchEnvelopeCompact * 64 + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                pitchEnvelopeCompact = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                instrumentPitchEnvelopeEnd = pitchEnvelopeCompact * 64 + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                instrumentEnvelopeInverse = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] === 1 ? true : false;\n                                for (let i = 0; i < envelopeCount; i++) {\n                                    instrument.envelopes[i].pitchEnvelopeStart = instrumentPitchEnvelopeStart;\n                                    instrument.envelopes[i].pitchEnvelopeEnd = instrumentPitchEnvelopeEnd;\n                                    instrument.envelopes[i].inverse = Config.envelopes[instrument.envelopes[i].envelope].name == \"pitch\" ? instrumentEnvelopeInverse : false;\n                                }\n                            }\n                        }\n                    }\n                    break;\n                case 82:\n                    {\n                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        if (beforeThree && fromGoldBox) {\n                            for (let o = 0; o < Config.operatorCount; o++) {\n                                const pre3To3g = [0, 1, 3, 2, 2, 2, 4, 5];\n                                const old = clamp(0, pre3To3g.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                if (old == 3) {\n                                    instrument.operators[o].pulseWidth = 5;\n                                }\n                                else if (old == 4) {\n                                    instrument.operators[o].pulseWidth = 4;\n                                }\n                                else if (old == 5) {\n                                    instrument.operators[o].pulseWidth = 6;\n                                }\n                                instrument.operators[o].waveform = pre3To3g[old];\n                            }\n                        }\n                        else {\n                            for (let o = 0; o < (instrument.type == 11 ? 6 : Config.operatorCount); o++) {\n                                if (fromJummBox) {\n                                    const jummToG = [0, 1, 3, 2, 4, 5];\n                                    instrument.operators[o].waveform = jummToG[clamp(0, Config.operatorWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                                }\n                                else {\n                                    instrument.operators[o].waveform = clamp(0, Config.operatorWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                }\n                                if (instrument.operators[o].waveform == 2) {\n                                    instrument.operators[o].pulseWidth = clamp(0, Config.pwmOperatorWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                }\n                            }\n                        }\n                    }\n                    break;\n                case 83:\n                    {\n                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        if (instrument.type == 3) {\n                            const byteCount = Math.ceil(Config.spectrumControlPoints * Config.spectrumControlPointBits / 6);\n                            const bits = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\n                            for (let i = 0; i < Config.spectrumControlPoints; i++) {\n                                instrument.spectrumWave.spectrum[i] = bits.read(Config.spectrumControlPointBits);\n                            }\n                            instrument.spectrumWave.markCustomWaveDirty();\n                            charIndex += byteCount;\n                        }\n                        else if (instrument.type == 4) {\n                            const byteCount = Math.ceil(Config.drumCount * Config.spectrumControlPoints * Config.spectrumControlPointBits / 6);\n                            const bits = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\n                            for (let j = 0; j < Config.drumCount; j++) {\n                                for (let i = 0; i < Config.spectrumControlPoints; i++) {\n                                    instrument.drumsetSpectrumWaves[j].spectrum[i] = bits.read(Config.spectrumControlPointBits);\n                                }\n                                instrument.drumsetSpectrumWaves[j].markCustomWaveDirty();\n                            }\n                            charIndex += byteCount;\n                        }\n                        else {\n                            throw new Error(\"Unhandled instrument type for spectrum song tag code.\");\n                        }\n                    }\n                    break;\n                case 72:\n                    {\n                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        const byteCount = Math.ceil(Config.harmonicsControlPoints * Config.harmonicsControlPointBits / 6);\n                        const bits = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\n                        for (let i = 0; i < Config.harmonicsControlPoints; i++) {\n                            instrument.harmonicsWave.harmonics[i] = bits.read(Config.harmonicsControlPointBits);\n                        }\n                        instrument.harmonicsWave.markCustomWaveDirty();\n                        charIndex += byteCount;\n                    }\n                    break;\n                case 88:\n                    {\n                        if ((fromJummBox && beforeFive) || (fromGoldBox && beforeFour)) {\n                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            instrument.aliases = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) ? true : false;\n                            if (instrument.aliases) {\n                                let newEffect = instrument.addEffect(3);\n                                newEffect.distortion = 0;\n                            }\n                        }\n                        else {\n                            if (fromUltraBox || fromSlarmoosBox) {\n                                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                                instrument.decimalOffset = clamp(0, 50 + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                        }\n                    }\n                    break;\n                case 98:\n                    {\n                        let subStringLength;\n                        if (beforeThree && fromBeepBox) {\n                            const channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            const barCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            subStringLength = Math.ceil(barCount * 0.5);\n                            const bits = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\n                            for (let i = 0; i < barCount; i++) {\n                                this.channels[channelIndex].bars[i] = bits.read(3) + 1;\n                            }\n                        }\n                        else if (beforeFive && fromBeepBox) {\n                            let neededBits = 0;\n                            while ((1 << neededBits) < this.patternsPerChannel)\n                                neededBits++;\n                            subStringLength = Math.ceil(this.getChannelCount() * this.barCount * neededBits / 6);\n                            const bits = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\n                            for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                                for (let i = 0; i < this.barCount; i++) {\n                                    this.channels[channelIndex].bars[i] = bits.read(neededBits) + 1;\n                                }\n                            }\n                        }\n                        else {\n                            let neededBits = 0;\n                            while ((1 << neededBits) < this.patternsPerChannel + 1)\n                                neededBits++;\n                            subStringLength = Math.ceil(this.getChannelCount() * this.barCount * neededBits / 6);\n                            const bits = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\n                            for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                                for (let i = 0; i < this.barCount; i++) {\n                                    this.channels[channelIndex].bars[i] = bits.read(neededBits);\n                                }\n                            }\n                        }\n                        charIndex += subStringLength;\n                    }\n                    break;\n                case 112:\n                    {\n                        let bitStringLength = 0;\n                        let channelIndex;\n                        let largerChords = !((beforeFour && fromJummBox) || fromBeepBox);\n                        let recentPitchBitLength = (largerChords ? 4 : 3);\n                        let recentPitchLength = (largerChords ? 16 : 8);\n                        if (beforeThree && fromBeepBox) {\n                            channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            charIndex++;\n                            bitStringLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            bitStringLength = bitStringLength << 6;\n                            bitStringLength += base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        }\n                        else {\n                            channelIndex = 0;\n                            let bitStringLengthLength = validateRange(1, 4, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            while (bitStringLengthLength > 0) {\n                                bitStringLength = bitStringLength << 6;\n                                bitStringLength += base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                bitStringLengthLength--;\n                            }\n                        }\n                        const bits = new BitFieldReader(compressed, charIndex, charIndex + bitStringLength);\n                        charIndex += bitStringLength;\n                        const bitsPerNoteSize = Song.getNeededBits(Config.noteSizeMax);\n                        let songReverbChannel = -1;\n                        let songReverbInstrument = -1;\n                        let songReverbIndex = -1;\n                        const shouldCorrectTempoMods = fromJummBox;\n                        const jummboxTempoMin = 30;\n                        while (true) {\n                            const channel = this.channels[channelIndex];\n                            const isNoiseChannel = this.getChannelIsNoise(channelIndex);\n                            const isModChannel = this.getChannelIsMod(channelIndex);\n                            const maxInstrumentsPerPattern = this.getMaxInstrumentsPerPattern(channelIndex);\n                            const neededInstrumentCountBits = Song.getNeededBits(maxInstrumentsPerPattern - Config.instrumentCountMin);\n                            const neededInstrumentIndexBits = Song.getNeededBits(channel.instruments.length - 1);\n                            if (isModChannel) {\n                                let jumfive = (beforeFive && fromJummBox) || (beforeFour && fromGoldBox);\n                                const neededModInstrumentIndexBits = (jumfive) ? neededInstrumentIndexBits : Song.getNeededBits(this.getMaxInstrumentsPerChannel() + 2);\n                                for (let instrumentIndex = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n                                    let instrument = channel.instruments[instrumentIndex];\n                                    for (let mod = 0; mod < Config.modCount; mod++) {\n                                        let status = bits.read(2);\n                                        switch (status) {\n                                            case 0:\n                                                let modChannelLength = bits.read(8);\n                                                for (let i = 0; i < modChannelLength; i++)\n                                                    instrument.modChannels[mod][i] = clamp(0, this.pitchChannelCount + this.noiseChannelCount + 1, bits.read(8));\n                                                let modInstrumentLength = bits.read(8);\n                                                for (let i = 0; i < modInstrumentLength; i++)\n                                                    instrument.modInstruments[mod][i] = clamp(0, this.channels[instrument.modChannels[mod][i]].instruments.length + 2, bits.read(neededModInstrumentIndexBits));\n                                                break;\n                                            case 1:\n                                                instrument.modChannels[mod][0] = this.pitchChannelCount + clamp(0, this.noiseChannelCount + 1, bits.read(8));\n                                                instrument.modInstruments[mod][0] = clamp(0, this.channels[instrument.modChannels[mod][0]].instruments.length + 2, bits.read(neededInstrumentIndexBits));\n                                                break;\n                                            case 2:\n                                                instrument.modChannels[mod][0] = -1;\n                                                break;\n                                            case 3:\n                                                instrument.modChannels[mod][0] = -2;\n                                                break;\n                                        }\n                                        if (status != 3) {\n                                            instrument.modulators[mod] = bits.read(6);\n                                        }\n                                        if (!jumfive && (Config.modulators[instrument.modulators[mod]].name == \"post eq\" || Config.modulators[instrument.modulators[mod]].name == \"pre eq\" || Config.modulators[instrument.modulators[mod]].name == \"song eq\")) {\n                                            instrument.modFilterTypes[mod] = bits.read(6);\n                                        }\n                                        if (Config.modulators[instrument.modulators[mod]].name == \"individual envelope speed\" ||\n                                            Config.modulators[instrument.modulators[mod]].name == \"reset envelope\" ||\n                                            Config.modulators[instrument.modulators[mod]].name == \"individual envelope lower bound\" ||\n                                            Config.modulators[instrument.modulators[mod]].name == \"individual envelope upper bound\") {\n                                            instrument.modEnvelopeNumbers[mod] = bits.read(6);\n                                        }\n                                        if (jumfive && instrument.modChannels[mod][0] >= 0) {\n                                            let forNoteFilter = this.channels[instrument.modChannels[mod][0]].instruments[instrument.modInstruments[mod][0]].effectsIncludeType(5);\n                                            if (instrument.modulators[mod] == 7) {\n                                                if (forNoteFilter) {\n                                                    instrument.modulators[mod] = Config.modulators.dictionary[\"note filt cut\"].index;\n                                                }\n                                                else {\n                                                    instrument.modulators[mod] = Config.modulators.dictionary[\"eq filt cut\"].index;\n                                                }\n                                                instrument.modFilterTypes[mod] = 1;\n                                            }\n                                            else if (instrument.modulators[mod] == 8) {\n                                                if (forNoteFilter) {\n                                                    instrument.modulators[mod] = Config.modulators.dictionary[\"note filt peak\"].index;\n                                                }\n                                                else {\n                                                    instrument.modulators[mod] = Config.modulators.dictionary[\"eq filt peak\"].index;\n                                                }\n                                                instrument.modFilterTypes[mod] = 2;\n                                            }\n                                        }\n                                        else if (jumfive) {\n                                            if (instrument.modulators[mod] == Config.modulators.dictionary[\"song reverb\"].index) {\n                                                songReverbChannel = channelIndex;\n                                                songReverbInstrument = instrumentIndex;\n                                                songReverbIndex = mod;\n                                            }\n                                        }\n                                        if (jumfive && Config.modulators[instrument.modulators[mod]].associatedEffect != 11) {\n                                            this.channels[instrument.modChannels[mod][0]].instruments[instrument.modInstruments[mod][0]].addEffect(Config.modulators[instrument.modulators[mod]].associatedEffect);\n                                        }\n                                    }\n                                }\n                            }\n                            const detuneScaleNotes = [];\n                            for (let j = 0; j < channel.instruments.length; j++) {\n                                detuneScaleNotes[j] = [];\n                                for (let i = 0; i < Config.modCount; i++) {\n                                    detuneScaleNotes[j][Config.modCount - 1 - i] = 1 + 3 * +(((beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) && isModChannel && (channel.instruments[j].modulators[i] == Config.modulators.dictionary[\"detune\"].index));\n                                }\n                            }\n                            const octaveOffset = (isNoiseChannel || isModChannel) ? 0 : channel.octave * 12;\n                            let lastPitch = ((isNoiseChannel || isModChannel) ? 4 : octaveOffset);\n                            const recentPitches = isModChannel ? [0, 1, 2, 3, 4, 5] : (isNoiseChannel ? [4, 6, 7, 2, 3, 8, 0, 10] : [0, 7, 12, 19, 24, -5, -12]);\n                            const recentShapes = [];\n                            for (let i = 0; i < recentPitches.length; i++) {\n                                recentPitches[i] += octaveOffset;\n                            }\n                            for (let i = 0; i < this.patternsPerChannel; i++) {\n                                const newPattern = channel.patterns[i];\n                                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\n                                    newPattern.instruments[0] = validateRange(0, channel.instruments.length - 1, bits.read(neededInstrumentIndexBits));\n                                    newPattern.instruments.length = 1;\n                                }\n                                else {\n                                    if (this.patternInstruments) {\n                                        const instrumentCount = validateRange(Config.instrumentCountMin, maxInstrumentsPerPattern, bits.read(neededInstrumentCountBits) + Config.instrumentCountMin);\n                                        for (let j = 0; j < instrumentCount; j++) {\n                                            newPattern.instruments[j] = validateRange(0, channel.instruments.length - 1 + +(isModChannel) * 2, bits.read(neededInstrumentIndexBits));\n                                        }\n                                        newPattern.instruments.length = instrumentCount;\n                                    }\n                                    else {\n                                        newPattern.instruments[0] = 0;\n                                        newPattern.instruments.length = Config.instrumentCountMin;\n                                    }\n                                }\n                                if (!(fromBeepBox && beforeThree) && bits.read(1) == 0) {\n                                    newPattern.notes.length = 0;\n                                    continue;\n                                }\n                                let curPart = 0;\n                                const newNotes = newPattern.notes;\n                                let noteCount = 0;\n                                while (curPart < this.beatsPerBar * Config.partsPerBeat + (+isModChannel)) {\n                                    const useOldShape = bits.read(1) == 1;\n                                    let newNote = false;\n                                    let shapeIndex = 0;\n                                    if (useOldShape) {\n                                        shapeIndex = validateRange(0, recentShapes.length - 1, bits.readLongTail(0, 0));\n                                    }\n                                    else {\n                                        newNote = bits.read(1) == 1;\n                                    }\n                                    if (!useOldShape && !newNote) {\n                                        if (isModChannel) {\n                                            const isBackwards = bits.read(1) == 1;\n                                            const restLength = bits.readPartDuration();\n                                            if (isBackwards) {\n                                                curPart -= restLength;\n                                            }\n                                            else {\n                                                curPart += restLength;\n                                            }\n                                        }\n                                        else {\n                                            const restLength = (beforeSeven && fromBeepBox)\n                                                ? bits.readLegacyPartDuration() * Config.partsPerBeat / Config.rhythms[this.rhythm].stepsPerBeat\n                                                : bits.readPartDuration();\n                                            curPart += restLength;\n                                        }\n                                    }\n                                    else {\n                                        let shape;\n                                        if (useOldShape) {\n                                            shape = recentShapes[shapeIndex];\n                                            recentShapes.splice(shapeIndex, 1);\n                                        }\n                                        else {\n                                            shape = {};\n                                            if (!largerChords) {\n                                                shape.pitchCount = 1;\n                                                while (shape.pitchCount < 4 && bits.read(1) == 1)\n                                                    shape.pitchCount++;\n                                            }\n                                            else {\n                                                if (bits.read(1) == 1) {\n                                                    shape.pitchCount = bits.read(3) + 2;\n                                                }\n                                                else {\n                                                    shape.pitchCount = 1;\n                                                }\n                                            }\n                                            if (fromTheepBox) {\n                                                if (bits.read(1) == 1) {\n                                                    shape.startOffset = bits.read(31);\n                                                }\n                                            }\n                                            else {\n                                                shape.startOffset = 0;\n                                            }\n                                            shape.pinCount = bits.readPinCount();\n                                            if (fromBeepBox) {\n                                                shape.initialSize = bits.read(2) * 2;\n                                            }\n                                            else if (!isModChannel) {\n                                                shape.initialSize = bits.read(bitsPerNoteSize);\n                                            }\n                                            else {\n                                                shape.initialSize = bits.read(11);\n                                            }\n                                            shape.pins = [];\n                                            shape.length = 0;\n                                            shape.bendCount = 0;\n                                            for (let j = 0; j < shape.pinCount; j++) {\n                                                let pinObj = {};\n                                                pinObj.pitchBend = bits.read(1) == 1;\n                                                if (pinObj.pitchBend)\n                                                    shape.bendCount++;\n                                                shape.length += (beforeSeven && fromBeepBox)\n                                                    ? bits.readLegacyPartDuration() * Config.partsPerBeat / Config.rhythms[this.rhythm].stepsPerBeat\n                                                    : bits.readPartDuration();\n                                                pinObj.time = shape.length;\n                                                if (fromBeepBox) {\n                                                    pinObj.size = bits.read(2) * 2;\n                                                }\n                                                else if (!isModChannel) {\n                                                    pinObj.size = bits.read(bitsPerNoteSize);\n                                                }\n                                                else {\n                                                    pinObj.size = bits.read(11);\n                                                }\n                                                shape.pins.push(pinObj);\n                                            }\n                                        }\n                                        recentShapes.unshift(shape);\n                                        if (recentShapes.length > 10)\n                                            recentShapes.pop();\n                                        let note;\n                                        if (newNotes.length <= noteCount) {\n                                            note = new Note(0, curPart, curPart + shape.length, shape.initialSize, false, shape.startOffset);\n                                            newNotes[noteCount++] = note;\n                                        }\n                                        else {\n                                            note = newNotes[noteCount++];\n                                            note.start = curPart;\n                                            note.end = curPart + shape.length;\n                                            note.pins[0].size = shape.initialSize;\n                                        }\n                                        let pitch;\n                                        let pitchCount = 0;\n                                        const pitchBends = [];\n                                        for (let j = 0; j < shape.pitchCount + shape.bendCount; j++) {\n                                            const useOldPitch = bits.read(1) == 1;\n                                            if (!useOldPitch) {\n                                                const interval = bits.readPitchInterval();\n                                                pitch = lastPitch;\n                                                let intervalIter = interval;\n                                                while (intervalIter > 0) {\n                                                    pitch++;\n                                                    while (recentPitches.indexOf(pitch) != -1)\n                                                        pitch++;\n                                                    intervalIter--;\n                                                }\n                                                while (intervalIter < 0) {\n                                                    pitch--;\n                                                    while (recentPitches.indexOf(pitch) != -1)\n                                                        pitch--;\n                                                    intervalIter++;\n                                                }\n                                            }\n                                            else {\n                                                const pitchIndex = validateRange(0, recentPitches.length - 1, bits.read(recentPitchBitLength));\n                                                pitch = recentPitches[pitchIndex];\n                                                recentPitches.splice(pitchIndex, 1);\n                                            }\n                                            recentPitches.unshift(pitch);\n                                            if (recentPitches.length > recentPitchLength)\n                                                recentPitches.pop();\n                                            if (j < shape.pitchCount) {\n                                                note.pitches[pitchCount++] = pitch;\n                                            }\n                                            else {\n                                                pitchBends.push(pitch);\n                                            }\n                                            if (j == shape.pitchCount - 1) {\n                                                lastPitch = note.pitches[0];\n                                            }\n                                            else {\n                                                lastPitch = pitch;\n                                            }\n                                        }\n                                        note.pitches.length = pitchCount;\n                                        pitchBends.unshift(note.pitches[0]);\n                                        const noteIsForTempoMod = isModChannel && channel.instruments[newPattern.instruments[0]].modulators[Config.modCount - 1 - note.pitches[0]] === Config.modulators.dictionary[\"tempo\"].index;\n                                        let tempoOffset = 0;\n                                        if (shouldCorrectTempoMods && noteIsForTempoMod) {\n                                            tempoOffset = jummboxTempoMin - Config.tempoMin;\n                                        }\n                                        if (isModChannel) {\n                                            note.pins[0].size += tempoOffset;\n                                            note.pins[0].size *= detuneScaleNotes[newPattern.instruments[0]][note.pitches[0]];\n                                        }\n                                        let pinCount = 1;\n                                        for (const pinObj of shape.pins) {\n                                            if (pinObj.pitchBend)\n                                                pitchBends.shift();\n                                            const interval = pitchBends[0] - note.pitches[0];\n                                            if (note.pins.length <= pinCount) {\n                                                if (isModChannel) {\n                                                    note.pins[pinCount++] = makeNotePin(interval, pinObj.time, pinObj.size * detuneScaleNotes[newPattern.instruments[0]][note.pitches[0]] + tempoOffset);\n                                                }\n                                                else {\n                                                    note.pins[pinCount++] = makeNotePin(interval, pinObj.time, pinObj.size);\n                                                }\n                                            }\n                                            else {\n                                                const pin = note.pins[pinCount++];\n                                                pin.interval = interval;\n                                                pin.time = pinObj.time;\n                                                if (isModChannel) {\n                                                    pin.size = pinObj.size * detuneScaleNotes[newPattern.instruments[0]][note.pitches[0]] + tempoOffset;\n                                                }\n                                                else {\n                                                    pin.size = pinObj.size;\n                                                }\n                                            }\n                                        }\n                                        note.pins.length = pinCount;\n                                        if (note.start == 0) {\n                                            if (!((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox))) {\n                                                note.continuesLastPattern = (bits.read(1) == 1);\n                                            }\n                                            else {\n                                                if ((beforeFour && !fromUltraBox && !fromSlarmoosBox) || fromBeepBox) {\n                                                    note.continuesLastPattern = false;\n                                                }\n                                                else {\n                                                    note.continuesLastPattern = channel.instruments[newPattern.instruments[0]].legacyTieOver;\n                                                }\n                                            }\n                                        }\n                                        curPart = validateRange(0, this.beatsPerBar * Config.partsPerBeat, note.end);\n                                    }\n                                }\n                                newNotes.length = noteCount;\n                            }\n                            if (beforeThree && fromBeepBox) {\n                                break;\n                            }\n                            else {\n                                channelIndex++;\n                                if (channelIndex >= this.getChannelCount())\n                                    break;\n                            }\n                        }\n                        if (((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) && songReverbIndex >= 0) {\n                            for (let channelIndex = 0; channelIndex < this.channels.length; channelIndex++) {\n                                for (let instrumentIndex = 0; instrumentIndex < this.channels[channelIndex].instruments.length; instrumentIndex++) {\n                                    const instrument = this.channels[channelIndex].instruments[instrumentIndex];\n                                    if (instrument.effectsIncludeType(0)) {\n                                    }\n                                    if (songReverbChannel == channelIndex && songReverbInstrument == instrumentIndex) {\n                                        const patternIndex = this.channels[channelIndex].bars[0];\n                                        if (patternIndex > 0) {\n                                            const pattern = this.channels[channelIndex].patterns[patternIndex - 1];\n                                            let lowestPart = 6;\n                                            for (const note of pattern.notes) {\n                                                if (note.pitches[0] == Config.modCount - 1 - songReverbIndex) {\n                                                    lowestPart = Math.min(lowestPart, note.start);\n                                                }\n                                            }\n                                            if (lowestPart > 0) {\n                                                pattern.notes.push(new Note(Config.modCount - 1 - songReverbIndex, 0, lowestPart, legacyGlobalReverb));\n                                            }\n                                        }\n                                        else {\n                                            if (this.channels[channelIndex].patterns.length < Config.barCountMax) {\n                                                const pattern = new Pattern();\n                                                this.channels[channelIndex].patterns.push(pattern);\n                                                this.channels[channelIndex].bars[0] = this.channels[channelIndex].patterns.length;\n                                                if (this.channels[channelIndex].patterns.length > this.patternsPerChannel) {\n                                                    for (let chn = 0; chn < this.channels.length; chn++) {\n                                                        if (this.channels[chn].patterns.length <= this.patternsPerChannel) {\n                                                            this.channels[chn].patterns.push(new Pattern());\n                                                        }\n                                                    }\n                                                    this.patternsPerChannel++;\n                                                }\n                                                pattern.instruments.length = 1;\n                                                pattern.instruments[0] = songReverbInstrument;\n                                                pattern.notes.length = 0;\n                                                pattern.notes.push(new Note(Config.modCount - 1 - songReverbIndex, 0, 6, legacyGlobalReverb));\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    break;\n                default:\n                    {\n                        throw new Error(\"Unrecognized song tag code \" + String.fromCharCode(command) + \" at index \" + (charIndex - 1) + \" \" + compressed.substring(0, charIndex));\n                    }\n                    break;\n            }\n        if (Config.willReloadForCustomSamples) {\n            window.location.hash = this.toBase64String();\n            setTimeout(() => { location.reload(); }, 50);\n        }\n    }\n    static _isProperUrl(string) {\n        try {\n            if (OFFLINE) {\n                return Boolean(string);\n            }\n            else {\n                return Boolean(new URL(string));\n            }\n        }\n        catch (x) {\n            return false;\n        }\n    }\n    static _parseAndConfigureCustomSample(url, customSampleUrls, customSamplePresets, sampleLoadingState, parseOldSyntax) {\n        const defaultIndex = 0;\n        const defaultIntegratedSamplesL = Config.chipWaves[defaultIndex].samples;\n        const defaultIntegratedSamplesR = Config.chipWaves[defaultIndex].samplesR || Config.chipWaves[defaultIndex].samples;\n        const defaultSamplesL = Config.rawRawChipWaves[defaultIndex].samples;\n        const defaultSamplesR = Config.rawRawChipWaves[defaultIndex].samplesR || Config.chipWaves[defaultIndex].samples;\n        const customSampleUrlIndex = customSampleUrls.length;\n        customSampleUrls.push(url);\n        const chipWaveIndex = Config.chipWaves.length;\n        let urlSliced = url;\n        let customSampleRate = 44100;\n        let isCustomPercussive = false;\n        let customRootKey = 60;\n        let presetIsUsingAdvancedLoopControls = false;\n        let presetChipWaveLoopStart = null;\n        let presetChipWaveLoopEnd = null;\n        let presetChipWaveStartOffset = null;\n        let presetChipWaveLoopMode = null;\n        let presetChipWavePlayBackwards = false;\n        let presetChipWaveInStereo = false;\n        let parsedSampleOptions = false;\n        let optionsStartIndex = url.indexOf(\"!\");\n        let optionsEndIndex = -1;\n        if (optionsStartIndex === 0) {\n            optionsEndIndex = url.indexOf(\"!\", optionsStartIndex + 1);\n            if (optionsEndIndex !== -1) {\n                const rawOptions = url.slice(optionsStartIndex + 1, optionsEndIndex).split(\",\");\n                for (const rawOption of rawOptions) {\n                    const optionCode = rawOption.charAt(0);\n                    const optionData = rawOption.slice(1, rawOption.length);\n                    if (optionCode === \"s\") {\n                        customSampleRate = clamp(8000, 96000 + 1, parseFloatWithDefault(optionData, 44100));\n                    }\n                    else if (optionCode === \"r\") {\n                        customRootKey = parseFloatWithDefault(optionData, 60);\n                    }\n                    else if (optionCode === \"p\") {\n                        isCustomPercussive = true;\n                    }\n                    else if (optionCode === \"a\") {\n                        presetChipWaveLoopStart = parseIntWithDefault(optionData, null);\n                        if (presetChipWaveLoopStart != null) {\n                            presetIsUsingAdvancedLoopControls = true;\n                        }\n                    }\n                    else if (optionCode === \"b\") {\n                        presetChipWaveLoopEnd = parseIntWithDefault(optionData, null);\n                        if (presetChipWaveLoopEnd != null) {\n                            presetIsUsingAdvancedLoopControls = true;\n                        }\n                    }\n                    else if (optionCode === \"c\") {\n                        presetChipWaveStartOffset = parseIntWithDefault(optionData, null);\n                        if (presetChipWaveStartOffset != null) {\n                            presetIsUsingAdvancedLoopControls = true;\n                        }\n                    }\n                    else if (optionCode === \"d\") {\n                        presetChipWaveLoopMode = parseIntWithDefault(optionData, null);\n                        if (presetChipWaveLoopMode != null) {\n                            presetChipWaveLoopMode = clamp(0, 3 + 1, presetChipWaveLoopMode);\n                            presetIsUsingAdvancedLoopControls = true;\n                        }\n                    }\n                    else if (optionCode === \"e\") {\n                        presetChipWavePlayBackwards = true;\n                        presetIsUsingAdvancedLoopControls = true;\n                    }\n                    else if (optionCode === \"f\") {\n                        presetChipWaveInStereo = true;\n                        presetIsUsingAdvancedLoopControls = true;\n                    }\n                }\n                urlSliced = url.slice(optionsEndIndex + 1, url.length);\n                parsedSampleOptions = true;\n            }\n        }\n        let parsedUrl = null;\n        if (Song._isProperUrl(urlSliced)) {\n            if (OFFLINE) {\n                parsedUrl = urlSliced;\n            }\n            else {\n                parsedUrl = new URL(urlSliced);\n            }\n        }\n        else {\n            alert(url + \" is not a valid url\");\n            return false;\n        }\n        if (parseOldSyntax) {\n            if (!parsedSampleOptions && parsedUrl != null) {\n                if (url.indexOf(\"@\") != -1) {\n                    urlSliced = url.replaceAll(\"@\", \"\");\n                    if (OFFLINE) {\n                        parsedUrl = urlSliced;\n                    }\n                    else {\n                        parsedUrl = new URL(urlSliced);\n                    }\n                    isCustomPercussive = true;\n                }\n                function sliceForSampleRate() {\n                    urlSliced = url.slice(0, url.indexOf(\",\"));\n                    if (OFFLINE) {\n                        parsedUrl = urlSliced;\n                    }\n                    else {\n                        parsedUrl = new URL(urlSliced);\n                    }\n                    customSampleRate = clamp(8000, 96000 + 1, parseFloatWithDefault(url.slice(url.indexOf(\",\") + 1), 44100));\n                }\n                function sliceForRootKey() {\n                    urlSliced = url.slice(0, url.indexOf(\"!\"));\n                    if (OFFLINE) {\n                        parsedUrl = urlSliced;\n                    }\n                    else {\n                        parsedUrl = new URL(urlSliced);\n                    }\n                    customRootKey = parseFloatWithDefault(url.slice(url.indexOf(\"!\") + 1), 60);\n                }\n                if (url.indexOf(\",\") != -1 && url.indexOf(\"!\") != -1) {\n                    if (url.indexOf(\",\") < url.indexOf(\"!\")) {\n                        sliceForRootKey();\n                        sliceForSampleRate();\n                    }\n                    else {\n                        sliceForSampleRate();\n                        sliceForRootKey();\n                    }\n                }\n                else {\n                    if (url.indexOf(\",\") != -1) {\n                        sliceForSampleRate();\n                    }\n                    if (url.indexOf(\"!\") != -1) {\n                        sliceForRootKey();\n                    }\n                }\n            }\n        }\n        if (parsedUrl != null) {\n            let urlWithNamedOptions = urlSliced;\n            const namedOptions = [];\n            if (customSampleRate !== 44100)\n                namedOptions.push(\"s\" + customSampleRate);\n            if (customRootKey !== 60)\n                namedOptions.push(\"r\" + customRootKey);\n            if (isCustomPercussive)\n                namedOptions.push(\"p\");\n            if (presetIsUsingAdvancedLoopControls) {\n                if (presetChipWaveLoopStart != null)\n                    namedOptions.push(\"a\" + presetChipWaveLoopStart);\n                if (presetChipWaveLoopEnd != null)\n                    namedOptions.push(\"b\" + presetChipWaveLoopEnd);\n                if (presetChipWaveStartOffset != null)\n                    namedOptions.push(\"c\" + presetChipWaveStartOffset);\n                if (presetChipWaveLoopMode != null)\n                    namedOptions.push(\"d\" + presetChipWaveLoopMode);\n                if (presetChipWavePlayBackwards)\n                    namedOptions.push(\"e\");\n                if (presetChipWaveInStereo)\n                    namedOptions.push(\"f\");\n            }\n            if (namedOptions.length > 0) {\n                urlWithNamedOptions = \"!\" + namedOptions.join(\",\") + \"!\" + urlSliced;\n            }\n            customSampleUrls[customSampleUrlIndex] = urlWithNamedOptions;\n            let name;\n            if (OFFLINE) {\n                name = decodeURIComponent(parsedUrl.replace(/^([^\\/]*\\/)+/, \"\"));\n            }\n            else {\n                name = decodeURIComponent(parsedUrl.pathname.replace(/^([^\\/]*\\/)+/, \"\"));\n            }\n            const expression = 1.0;\n            Config.chipWaves[chipWaveIndex] = {\n                name: name,\n                expression: expression,\n                isCustomSampled: true,\n                isPercussion: isCustomPercussive,\n                rootKey: customRootKey,\n                sampleRate: customSampleRate,\n                samples: defaultIntegratedSamplesL,\n                samplesR: defaultIntegratedSamplesR,\n                index: chipWaveIndex,\n            };\n            Config.rawChipWaves[chipWaveIndex] = {\n                name: name,\n                expression: expression,\n                isCustomSampled: true,\n                isPercussion: isCustomPercussive,\n                rootKey: customRootKey,\n                sampleRate: customSampleRate,\n                samples: defaultSamplesL,\n                samplesR: defaultSamplesR,\n                index: chipWaveIndex,\n            };\n            Config.rawRawChipWaves[chipWaveIndex] = {\n                name: name,\n                expression: expression,\n                isCustomSampled: true,\n                isPercussion: isCustomPercussive,\n                rootKey: customRootKey,\n                sampleRate: customSampleRate,\n                samples: defaultSamplesL,\n                samplesR: defaultSamplesR,\n                index: chipWaveIndex,\n            };\n            const customSamplePresetSettings = {\n                \"type\": \"chip\",\n                \"eqFilter\": [],\n                \"effects\": [],\n                \"mdeffects\": [],\n                \"transition\": \"normal\",\n                \"fadeInSeconds\": 0,\n                \"fadeOutTicks\": -3,\n                \"chord\": \"harmony\",\n                \"wave\": name,\n                \"unison\": \"none\",\n                \"envelopes\": [],\n                \"chipWaveInStereo\": true,\n            };\n            if (presetIsUsingAdvancedLoopControls) {\n                customSamplePresetSettings[\"isUsingAdvancedLoopControls\"] = true;\n                customSamplePresetSettings[\"chipWaveLoopStart\"] = presetChipWaveLoopStart != null ? presetChipWaveLoopStart : 0;\n                customSamplePresetSettings[\"chipWaveLoopEnd\"] = presetChipWaveLoopEnd != null ? presetChipWaveLoopEnd : 2;\n                customSamplePresetSettings[\"chipWaveLoopMode\"] = presetChipWaveLoopMode != null ? presetChipWaveLoopMode : 0;\n                customSamplePresetSettings[\"chipWavePlayBackwards\"] = presetChipWavePlayBackwards;\n                customSamplePresetSettings[\"chipWaveStartOffset\"] = presetChipWaveStartOffset != null ? presetChipWaveStartOffset : 0;\n            }\n            const customSamplePreset = {\n                index: 0,\n                name: name,\n                midiProgram: 80,\n                settings: customSamplePresetSettings,\n            };\n            customSamplePresets.push(customSamplePreset);\n            if (!Config.willReloadForCustomSamples) {\n                const rawLoopOptions = {\n                    \"isUsingAdvancedLoopControls\": presetIsUsingAdvancedLoopControls,\n                    \"chipWaveLoopStart\": presetChipWaveLoopStart,\n                    \"chipWaveLoopEnd\": presetChipWaveLoopEnd,\n                    \"chipWaveLoopMode\": presetChipWaveLoopMode,\n                    \"chipWavePlayBackwards\": presetChipWavePlayBackwards,\n                    \"chipWaveStartOffset\": presetChipWaveStartOffset,\n                };\n                startLoadingSample(urlSliced, chipWaveIndex, customSamplePresetSettings, rawLoopOptions, customSampleRate);\n            }\n            sampleLoadingState.statusTable[chipWaveIndex] = 0;\n            sampleLoadingState.urlTable[chipWaveIndex] = urlSliced;\n            sampleLoadingState.totalSamples++;\n        }\n        return true;\n    }\n    static _restoreChipWaveListToDefault() {\n        Config.chipWaves = toNameMap(Config.chipWaves.slice(0, Config.firstIndexForSamplesInChipWaveList));\n        Config.rawChipWaves = toNameMap(Config.rawChipWaves.slice(0, Config.firstIndexForSamplesInChipWaveList));\n        Config.rawRawChipWaves = toNameMap(Config.rawRawChipWaves.slice(0, Config.firstIndexForSamplesInChipWaveList));\n    }\n    static _clearSamples() {\n        EditorConfig.customSamples = null;\n        Song._restoreChipWaveListToDefault();\n        sampleLoadingState.statusTable = {};\n        sampleLoadingState.urlTable = {};\n        sampleLoadingState.totalSamples = 0;\n        sampleLoadingState.samplesLoaded = 0;\n        sampleLoadEvents.dispatchEvent(new SampleLoadedEvent(sampleLoadingState.totalSamples, sampleLoadingState.samplesLoaded));\n    }\n    toJsonObject(enableIntro = true, loopCount = 1, enableOutro = true) {\n        const channelArray = [];\n        for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n            const channel = this.channels[channelIndex];\n            const instrumentArray = [];\n            const isNoiseChannel = this.getChannelIsNoise(channelIndex);\n            const isModChannel = this.getChannelIsMod(channelIndex);\n            for (const instrument of channel.instruments) {\n                instrumentArray.push(instrument.toJsonObject());\n            }\n            const patternArray = [];\n            for (const pattern of channel.patterns) {\n                patternArray.push(pattern.toJsonObject(this, channel, isModChannel));\n            }\n            const sequenceArray = [];\n            if (enableIntro)\n                for (let i = 0; i < this.loopStart; i++) {\n                    sequenceArray.push(channel.bars[i]);\n                }\n            for (let l = 0; l < loopCount; l++)\n                for (let i = this.loopStart; i < this.loopStart + this.loopLength; i++) {\n                    sequenceArray.push(channel.bars[i]);\n                }\n            if (enableOutro)\n                for (let i = this.loopStart + this.loopLength; i < this.barCount; i++) {\n                    sequenceArray.push(channel.bars[i]);\n                }\n            const channelObject = {\n                \"type\": isModChannel ? \"mod\" : (isNoiseChannel ? \"drum\" : \"pitch\"),\n                \"name\": channel.name,\n                \"instruments\": instrumentArray,\n                \"patterns\": patternArray,\n                \"sequence\": sequenceArray,\n            };\n            if (!isNoiseChannel) {\n                channelObject[\"octaveScrollBar\"] = channel.octave - 1;\n            }\n            channelArray.push(channelObject);\n        }\n        const result = {\n            \"name\": this.title,\n            \"format\": Song._format,\n            \"version\": Song._latestSlarmoosBoxVersion,\n            \"scale\": Config.scales[this.scale].name,\n            \"customScale\": this.scaleCustom,\n            \"key\": Config.keys[this.key].name,\n            \"keyOctave\": this.octave,\n            \"introBars\": this.loopStart,\n            \"loopBars\": this.loopLength,\n            \"beatsPerBar\": this.beatsPerBar,\n            \"ticksPerBeat\": Config.rhythms[this.rhythm].stepsPerBeat,\n            \"beatsPerMinute\": this.tempo,\n            \"reverb\": this.reverb,\n            \"masterGain\": this.masterGain,\n            \"compressionThreshold\": this.compressionThreshold,\n            \"limitThreshold\": this.limitThreshold,\n            \"limitDecay\": this.limitDecay,\n            \"limitRise\": this.limitRise,\n            \"limitRatio\": this.limitRatio,\n            \"compressionRatio\": this.compressionRatio,\n            \"songEq\": this.eqFilter.toJsonObject(),\n            \"layeredInstruments\": this.layeredInstruments,\n            \"patternInstruments\": this.patternInstruments,\n            \"channels\": channelArray,\n        };\n        for (let i = 0; i < Config.filterMorphCount - 1; i++) {\n            result[\"songEq\" + i] = this.eqSubFilters[i];\n        }\n        if (EditorConfig.customSamples != null && EditorConfig.customSamples.length > 0) {\n            result[\"customSamples\"] = EditorConfig.customSamples;\n        }\n        return result;\n    }\n    fromJsonObject(jsonObject, jsonFormat = \"auto\") {\n        this.initToDefault(true);\n        if (!jsonObject)\n            return;\n        if (jsonFormat == \"auto\") {\n            if (jsonObject[\"format\"] == \"BeepBox\") {\n                if (jsonObject[\"riff\"] != undefined) {\n                    jsonFormat = \"modbox\";\n                }\n                if (jsonObject[\"masterGain\"] != undefined) {\n                    jsonFormat = \"jummbox\";\n                }\n            }\n        }\n        const format = (jsonFormat == \"auto\" ? jsonObject[\"format\"] : jsonFormat).toLowerCase();\n        if (jsonObject[\"name\"] != undefined) {\n            this.title = jsonObject[\"name\"];\n        }\n        if (jsonObject[\"customSamples\"] != undefined) {\n            const customSamples = jsonObject[\"customSamples\"];\n            if (EditorConfig.customSamples == null || EditorConfig.customSamples.join(\", \") != customSamples.join(\", \")) {\n                Config.willReloadForCustomSamples = true;\n                Song._restoreChipWaveListToDefault();\n                let willLoadLegacySamples = false;\n                let willLoadNintariboxSamples = false;\n                let willLoadMarioPaintboxSamples = false;\n                const customSampleUrls = [];\n                const customSamplePresets = [];\n                for (const url of customSamples) {\n                    if (url.toLowerCase() === \"legacysamples\") {\n                        if (!willLoadLegacySamples) {\n                            willLoadLegacySamples = true;\n                            customSampleUrls.push(url);\n                            loadBuiltInSamples(0);\n                        }\n                    }\n                    else if (url.toLowerCase() === \"nintariboxsamples\") {\n                        if (!willLoadNintariboxSamples) {\n                            willLoadNintariboxSamples = true;\n                            customSampleUrls.push(url);\n                            loadBuiltInSamples(1);\n                        }\n                    }\n                    else if (url.toLowerCase() === \"mariopaintboxsamples\") {\n                        if (!willLoadMarioPaintboxSamples) {\n                            willLoadMarioPaintboxSamples = true;\n                            customSampleUrls.push(url);\n                            loadBuiltInSamples(2);\n                        }\n                    }\n                    else {\n                        const parseOldSyntax = false;\n                        Song._parseAndConfigureCustomSample(url, customSampleUrls, customSamplePresets, sampleLoadingState, parseOldSyntax);\n                    }\n                }\n                if (customSampleUrls.length > 0) {\n                    EditorConfig.customSamples = customSampleUrls;\n                }\n                if (customSamplePresets.length > 0) {\n                    const customSamplePresetsMap = toNameMap(customSamplePresets);\n                    EditorConfig.presetCategories[EditorConfig.presetCategories.length] = {\n                        name: \"Custom Sample Presets\",\n                        presets: customSamplePresetsMap,\n                        index: EditorConfig.presetCategories.length,\n                    };\n                }\n            }\n        }\n        else {\n            let shouldLoadLegacySamples = false;\n            if (jsonObject[\"channels\"] != undefined) {\n                for (let channelIndex = 0; channelIndex < jsonObject[\"channels\"].length; channelIndex++) {\n                    const channelObject = jsonObject[\"channels\"][channelIndex];\n                    if (channelObject[\"type\"] !== \"pitch\") {\n                        continue;\n                    }\n                    if (Array.isArray(channelObject[\"instruments\"])) {\n                        const instrumentObjects = channelObject[\"instruments\"];\n                        for (let i = 0; i < instrumentObjects.length; i++) {\n                            const instrumentObject = instrumentObjects[i];\n                            if (instrumentObject[\"type\"] !== \"chip\") {\n                                continue;\n                            }\n                            if (instrumentObject[\"wave\"] == null) {\n                                continue;\n                            }\n                            const waveName = instrumentObject[\"wave\"];\n                            const names = [\n                                \"paandorasbox kick\",\n                                \"paandorasbox snare\",\n                                \"paandorasbox piano1\",\n                                \"paandorasbox WOW\",\n                                \"paandorasbox overdrive\",\n                                \"paandorasbox trumpet\",\n                                \"paandorasbox saxophone\",\n                                \"paandorasbox orchestrahit\",\n                                \"paandorasbox detatched violin\",\n                                \"paandorasbox synth\",\n                                \"paandorasbox sonic3snare\",\n                                \"paandorasbox come on\",\n                                \"paandorasbox choir\",\n                                \"paandorasbox overdriveguitar\",\n                                \"paandorasbox flute\",\n                                \"paandorasbox legato violin\",\n                                \"paandorasbox tremolo violin\",\n                                \"paandorasbox amen break\",\n                                \"paandorasbox pizzicato violin\",\n                                \"paandorasbox tim allen grunt\",\n                                \"paandorasbox tuba\",\n                                \"paandorasbox loopingcymbal\",\n                                \"paandorasbox standardkick\",\n                                \"paandorasbox standardsnare\",\n                                \"paandorasbox closedhihat\",\n                                \"paandorasbox foothihat\",\n                                \"paandorasbox openhihat\",\n                                \"paandorasbox crashcymbal\",\n                                \"paandorasbox pianoC4\",\n                                \"paandorasbox liver pad\",\n                                \"paandorasbox marimba\",\n                                \"paandorasbox susdotwav\",\n                                \"paandorasbox wackyboxtts\",\n                                \"paandorasbox peppersteak_1\",\n                                \"paandorasbox peppersteak_2\",\n                                \"paandorasbox vinyl_noise\",\n                                \"paandorasbeta slap bass\",\n                                \"paandorasbeta HD EB overdrive guitar\",\n                                \"paandorasbeta sunsoft bass\",\n                                \"paandorasbeta masculine choir\",\n                                \"paandorasbeta feminine choir\",\n                                \"paandorasbeta tololoche\",\n                                \"paandorasbeta harp\",\n                                \"paandorasbeta pan flute\",\n                                \"paandorasbeta krumhorn\",\n                                \"paandorasbeta timpani\",\n                                \"paandorasbeta crowd hey\",\n                                \"paandorasbeta wario land 4 brass\",\n                                \"paandorasbeta wario land 4 rock organ\",\n                                \"paandorasbeta wario land 4 DAOW\",\n                                \"paandorasbeta wario land 4 hour chime\",\n                                \"paandorasbeta wario land 4 tick\",\n                                \"paandorasbeta kirby kick\",\n                                \"paandorasbeta kirby snare\",\n                                \"paandorasbeta kirby bongo\",\n                                \"paandorasbeta kirby click\",\n                                \"paandorasbeta sonor kick\",\n                                \"paandorasbeta sonor snare\",\n                                \"paandorasbeta sonor snare (left hand)\",\n                                \"paandorasbeta sonor snare (right hand)\",\n                                \"paandorasbeta sonor high tom\",\n                                \"paandorasbeta sonor low tom\",\n                                \"paandorasbeta sonor hihat (closed)\",\n                                \"paandorasbeta sonor hihat (half opened)\",\n                                \"paandorasbeta sonor hihat (open)\",\n                                \"paandorasbeta sonor hihat (open tip)\",\n                                \"paandorasbeta sonor hihat (pedal)\",\n                                \"paandorasbeta sonor crash\",\n                                \"paandorasbeta sonor crash (tip)\",\n                                \"paandorasbeta sonor ride\"\n                            ];\n                            const oldNames = [\n                                \"pandoraasbox kick\",\n                                \"pandoraasbox snare\",\n                                \"pandoraasbox piano1\",\n                                \"pandoraasbox WOW\",\n                                \"pandoraasbox overdrive\",\n                                \"pandoraasbox trumpet\",\n                                \"pandoraasbox saxophone\",\n                                \"pandoraasbox orchestrahit\",\n                                \"pandoraasbox detatched violin\",\n                                \"pandoraasbox synth\",\n                                \"pandoraasbox sonic3snare\",\n                                \"pandoraasbox come on\",\n                                \"pandoraasbox choir\",\n                                \"pandoraasbox overdriveguitar\",\n                                \"pandoraasbox flute\",\n                                \"pandoraasbox legato violin\",\n                                \"pandoraasbox tremolo violin\",\n                                \"pandoraasbox amen break\",\n                                \"pandoraasbox pizzicato violin\",\n                                \"pandoraasbox tim allen grunt\",\n                                \"pandoraasbox tuba\",\n                                \"pandoraasbox loopingcymbal\",\n                                \"pandoraasbox standardkick\",\n                                \"pandoraasbox standardsnare\",\n                                \"pandoraasbox closedhihat\",\n                                \"pandoraasbox foothihat\",\n                                \"pandoraasbox openhihat\",\n                                \"pandoraasbox crashcymbal\",\n                                \"pandoraasbox pianoC4\",\n                                \"pandoraasbox liver pad\",\n                                \"pandoraasbox marimba\",\n                                \"pandoraasbox susdotwav\",\n                                \"pandoraasbox wackyboxtts\",\n                                \"pandoraasbox peppersteak_1\",\n                                \"pandoraasbox peppersteak_2\",\n                                \"pandoraasbox vinyl_noise\",\n                                \"pandoraasbeta slap bass\",\n                                \"pandoraasbeta HD EB overdrive guitar\",\n                                \"pandoraasbeta sunsoft bass\",\n                                \"pandoraasbeta masculine choir\",\n                                \"pandoraasbeta feminine choir\",\n                                \"pandoraasbeta tololoche\",\n                                \"pandoraasbeta harp\",\n                                \"pandoraasbeta pan flute\",\n                                \"pandoraasbeta krumhorn\",\n                                \"pandoraasbeta timpani\",\n                                \"pandoraasbeta crowd hey\",\n                                \"pandoraasbeta wario land 4 brass\",\n                                \"pandoraasbeta wario land 4 rock organ\",\n                                \"pandoraasbeta wario land 4 DAOW\",\n                                \"pandoraasbeta wario land 4 hour chime\",\n                                \"pandoraasbeta wario land 4 tick\",\n                                \"pandoraasbeta kirby kick\",\n                                \"pandoraasbeta kirby snare\",\n                                \"pandoraasbeta kirby bongo\",\n                                \"pandoraasbeta kirby click\",\n                                \"pandoraasbeta sonor kick\",\n                                \"pandoraasbeta sonor snare\",\n                                \"pandoraasbeta sonor snare (left hand)\",\n                                \"pandoraasbeta sonor snare (right hand)\",\n                                \"pandoraasbeta sonor high tom\",\n                                \"pandoraasbeta sonor low tom\",\n                                \"pandoraasbeta sonor hihat (closed)\",\n                                \"pandoraasbeta sonor hihat (half opened)\",\n                                \"pandoraasbeta sonor hihat (open)\",\n                                \"pandoraasbeta sonor hihat (open tip)\",\n                                \"pandoraasbeta sonor hihat (pedal)\",\n                                \"pandoraasbeta sonor crash\",\n                                \"pandoraasbeta sonor crash (tip)\",\n                                \"pandoraasbeta sonor ride\"\n                            ];\n                            const veryOldNames = [\n                                \"kick\",\n                                \"snare\",\n                                \"piano1\",\n                                \"WOW\",\n                                \"overdrive\",\n                                \"trumpet\",\n                                \"saxophone\",\n                                \"orchestrahit\",\n                                \"detatched violin\",\n                                \"synth\",\n                                \"sonic3snare\",\n                                \"come on\",\n                                \"choir\",\n                                \"overdriveguitar\",\n                                \"flute\",\n                                \"legato violin\",\n                                \"tremolo violin\",\n                                \"amen break\",\n                                \"pizzicato violin\",\n                                \"tim allen grunt\",\n                                \"tuba\",\n                                \"loopingcymbal\",\n                                \"standardkick\",\n                                \"standardsnare\",\n                                \"closedhihat\",\n                                \"foothihat\",\n                                \"openhihat\",\n                                \"crashcymbal\",\n                                \"pianoC4\",\n                                \"liver pad\",\n                                \"marimba\",\n                                \"susdotwav\",\n                                \"wackyboxtts\"\n                            ];\n                            if (names.includes(waveName)) {\n                                shouldLoadLegacySamples = true;\n                            }\n                            else if (oldNames.includes(waveName)) {\n                                shouldLoadLegacySamples = true;\n                                instrumentObject[\"wave\"] = names[oldNames.findIndex(x => x === waveName)];\n                            }\n                            else if (veryOldNames.includes(waveName)) {\n                                if ((waveName === \"trumpet\" || waveName === \"flute\") && (format != \"paandorasbox\")) {\n                                }\n                                else {\n                                    shouldLoadLegacySamples = true;\n                                    instrumentObject[\"wave\"] = names[veryOldNames.findIndex(x => x === waveName)];\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            if (shouldLoadLegacySamples) {\n                Config.willReloadForCustomSamples = true;\n                Song._restoreChipWaveListToDefault();\n                loadBuiltInSamples(0);\n                EditorConfig.customSamples = [\"legacySamples\"];\n            }\n            else {\n                if (EditorConfig.customSamples != null && EditorConfig.customSamples.length > 0) {\n                    Config.willReloadForCustomSamples = true;\n                    Song._clearSamples();\n                }\n            }\n        }\n        this.scale = 0;\n        if (jsonObject[\"scale\"] != undefined) {\n            const oldScaleNames = {\n                \"romani :)\": \"double harmonic :)\",\n                \"romani :(\": \"double harmonic :(\",\n                \"dbl harmonic :)\": \"double harmonic :)\",\n                \"dbl harmonic :(\": \"double harmonic :(\",\n                \"enigma\": \"strange\",\n            };\n            const scaleName = (oldScaleNames[jsonObject[\"scale\"]] != undefined) ? oldScaleNames[jsonObject[\"scale\"]] : jsonObject[\"scale\"];\n            const scale = Config.scales.findIndex(scale => scale.name == scaleName);\n            if (scale != -1)\n                this.scale = scale;\n            if (this.scale == Config.scales[\"dictionary\"][\"Custom\"].index) {\n                if (jsonObject[\"customScale\"] != undefined) {\n                    for (var i of jsonObject[\"customScale\"].keys()) {\n                        this.scaleCustom[i] = jsonObject[\"customScale\"][i];\n                    }\n                }\n            }\n        }\n        if (jsonObject[\"key\"] != undefined) {\n            if (typeof (jsonObject[\"key\"]) == \"number\") {\n                this.key = ((jsonObject[\"key\"] + 1200) >>> 0) % Config.keys.length;\n            }\n            else if (typeof (jsonObject[\"key\"]) == \"string\") {\n                const key = jsonObject[\"key\"];\n                if (key === \"C+\") {\n                    this.key = 0;\n                    this.octave = 1;\n                }\n                else if (key === \"G- (actually F#-)\") {\n                    this.key = 6;\n                    this.octave = -1;\n                }\n                else if (key === \"C-\") {\n                    this.key = 0;\n                    this.octave = -1;\n                }\n                else if (key === \"oh no (F-)\") {\n                    this.key = 5;\n                    this.octave = -1;\n                }\n                else {\n                    const letter = key.charAt(0).toUpperCase();\n                    const symbol = key.charAt(1).toLowerCase();\n                    const letterMap = { \"C\": 0, \"D\": 2, \"E\": 4, \"F\": 5, \"G\": 7, \"A\": 9, \"B\": 11 };\n                    const accidentalMap = { \"#\": 1, \"♯\": 1, \"b\": -1, \"♭\": -1 };\n                    let index = letterMap[letter];\n                    const offset = accidentalMap[symbol];\n                    if (index != undefined) {\n                        if (offset != undefined)\n                            index += offset;\n                        if (index < 0)\n                            index += 12;\n                        index = index % 12;\n                        this.key = index;\n                    }\n                }\n            }\n        }\n        if (jsonObject[\"beatsPerMinute\"] != undefined) {\n            this.tempo = clamp(Config.tempoMin, Config.tempoMax + 1, jsonObject[\"beatsPerMinute\"] | 0);\n        }\n        if (jsonObject[\"keyOctave\"] != undefined) {\n            this.octave = clamp(Config.octaveMin, Config.octaveMax + 1, jsonObject[\"keyOctave\"] | 0);\n        }\n        let legacyGlobalReverb = 0;\n        if (jsonObject[\"reverb\"] != undefined) {\n            legacyGlobalReverb = clamp(0, 32, jsonObject[\"reverb\"] | 0);\n        }\n        if (jsonObject[\"beatsPerBar\"] != undefined) {\n            this.beatsPerBar = Math.max(Config.beatsPerBarMin, Math.min(Config.beatsPerBarMax, jsonObject[\"beatsPerBar\"] | 0));\n        }\n        let importedPartsPerBeat = 4;\n        if (jsonObject[\"ticksPerBeat\"] != undefined) {\n            importedPartsPerBeat = (jsonObject[\"ticksPerBeat\"] | 0) || 4;\n            this.rhythm = Config.rhythms.findIndex(rhythm => rhythm.stepsPerBeat == importedPartsPerBeat);\n            if (this.rhythm == -1) {\n                this.rhythm = 1;\n            }\n        }\n        if (jsonObject[\"masterGain\"] != undefined) {\n            this.masterGain = Math.max(0.0, Math.min(5.0, jsonObject[\"masterGain\"] || 0));\n        }\n        else {\n            this.masterGain = 1.0;\n        }\n        if (jsonObject[\"limitThreshold\"] != undefined) {\n            this.limitThreshold = Math.max(0.0, Math.min(2.0, jsonObject[\"limitThreshold\"] || 0));\n        }\n        else {\n            this.limitThreshold = 1.0;\n        }\n        if (jsonObject[\"compressionThreshold\"] != undefined) {\n            this.compressionThreshold = Math.max(0.0, Math.min(1.1, jsonObject[\"compressionThreshold\"] || 0));\n        }\n        else {\n            this.compressionThreshold = 1.0;\n        }\n        if (jsonObject[\"limitRise\"] != undefined) {\n            this.limitRise = Math.max(2000.0, Math.min(10000.0, jsonObject[\"limitRise\"] || 0));\n        }\n        else {\n            this.limitRise = 4000.0;\n        }\n        if (jsonObject[\"limitDecay\"] != undefined) {\n            this.limitDecay = Math.max(1.0, Math.min(30.0, jsonObject[\"limitDecay\"] || 0));\n        }\n        else {\n            this.limitDecay = 4.0;\n        }\n        if (jsonObject[\"limitRatio\"] != undefined) {\n            this.limitRatio = Math.max(0.0, Math.min(11.0, jsonObject[\"limitRatio\"] || 0));\n        }\n        else {\n            this.limitRatio = 1.0;\n        }\n        if (jsonObject[\"compressionRatio\"] != undefined) {\n            this.compressionRatio = Math.max(0.0, Math.min(1.168, jsonObject[\"compressionRatio\"] || 0));\n        }\n        else {\n            this.compressionRatio = 1.0;\n        }\n        if (jsonObject[\"songEq\"] != undefined) {\n            this.eqFilter.fromJsonObject(jsonObject[\"songEq\"]);\n        }\n        else {\n            this.eqFilter.reset();\n        }\n        for (let i = 0; i < Config.filterMorphCount - 1; i++) {\n            if (jsonObject[\"songEq\" + i]) {\n                this.eqSubFilters[i] = jsonObject[\"songEq\" + i];\n            }\n            else {\n                this.eqSubFilters[i] = null;\n            }\n        }\n        let maxInstruments = 1;\n        let maxPatterns = 1;\n        let maxBars = 1;\n        if (jsonObject[\"channels\"] != undefined) {\n            for (const channelObject of jsonObject[\"channels\"]) {\n                if (channelObject[\"instruments\"])\n                    maxInstruments = Math.max(maxInstruments, channelObject[\"instruments\"].length | 0);\n                if (channelObject[\"patterns\"])\n                    maxPatterns = Math.max(maxPatterns, channelObject[\"patterns\"].length | 0);\n                if (channelObject[\"sequence\"])\n                    maxBars = Math.max(maxBars, channelObject[\"sequence\"].length | 0);\n            }\n        }\n        if (jsonObject[\"layeredInstruments\"] != undefined) {\n            this.layeredInstruments = !!jsonObject[\"layeredInstruments\"];\n        }\n        else {\n            this.layeredInstruments = false;\n        }\n        if (jsonObject[\"patternInstruments\"] != undefined) {\n            this.patternInstruments = !!jsonObject[\"patternInstruments\"];\n        }\n        else {\n            this.patternInstruments = (maxInstruments > 1);\n        }\n        this.patternsPerChannel = Math.min(maxPatterns, Config.barCountMax);\n        this.barCount = Math.min(maxBars, Config.barCountMax);\n        if (jsonObject[\"introBars\"] != undefined) {\n            this.loopStart = clamp(0, this.barCount, jsonObject[\"introBars\"] | 0);\n        }\n        if (jsonObject[\"loopBars\"] != undefined) {\n            this.loopLength = clamp(1, this.barCount - this.loopStart + 1, jsonObject[\"loopBars\"] | 0);\n        }\n        const newPitchChannels = [];\n        const newNoiseChannels = [];\n        const newModChannels = [];\n        if (jsonObject[\"channels\"] != undefined) {\n            for (let channelIndex = 0; channelIndex < jsonObject[\"channels\"].length; channelIndex++) {\n                let channelObject = jsonObject[\"channels\"][channelIndex];\n                const channel = new Channel();\n                let isNoiseChannel = false;\n                let isModChannel = false;\n                if (channelObject[\"type\"] != undefined) {\n                    isNoiseChannel = (channelObject[\"type\"] == \"drum\");\n                    isModChannel = (channelObject[\"type\"] == \"mod\");\n                }\n                else {\n                    isNoiseChannel = (channelIndex >= 3);\n                }\n                if (isNoiseChannel) {\n                    newNoiseChannels.push(channel);\n                }\n                else if (isModChannel) {\n                    newModChannels.push(channel);\n                }\n                else {\n                    newPitchChannels.push(channel);\n                }\n                if (channelObject[\"octaveScrollBar\"] != undefined) {\n                    channel.octave = clamp(0, Config.pitchOctaves, (channelObject[\"octaveScrollBar\"] | 0) + 1);\n                    if (isNoiseChannel)\n                        channel.octave = 0;\n                }\n                if (channelObject[\"name\"] != undefined) {\n                    channel.name = channelObject[\"name\"];\n                }\n                else {\n                    channel.name = \"\";\n                }\n                if (Array.isArray(channelObject[\"instruments\"])) {\n                    const instrumentObjects = channelObject[\"instruments\"];\n                    for (let i = 0; i < instrumentObjects.length; i++) {\n                        if (i >= this.getMaxInstrumentsPerChannel())\n                            break;\n                        const instrument = new Instrument(isNoiseChannel, isModChannel);\n                        channel.instruments[i] = instrument;\n                        instrument.fromJsonObject(instrumentObjects[i], isNoiseChannel, isModChannel, false, false, legacyGlobalReverb, format);\n                    }\n                }\n                for (let i = 0; i < this.patternsPerChannel; i++) {\n                    const pattern = new Pattern();\n                    channel.patterns[i] = pattern;\n                    let patternObject = undefined;\n                    if (channelObject[\"patterns\"])\n                        patternObject = channelObject[\"patterns\"][i];\n                    if (patternObject == undefined)\n                        continue;\n                    pattern.fromJsonObject(patternObject, this, channel, importedPartsPerBeat, isNoiseChannel, isModChannel, format);\n                }\n                channel.patterns.length = this.patternsPerChannel;\n                for (let i = 0; i < this.barCount; i++) {\n                    channel.bars[i] = (channelObject[\"sequence\"] != undefined) ? Math.min(this.patternsPerChannel, channelObject[\"sequence\"][i] >>> 0) : 0;\n                }\n                channel.bars.length = this.barCount;\n            }\n        }\n        if (newPitchChannels.length > Config.pitchChannelCountMax)\n            newPitchChannels.length = Config.pitchChannelCountMax;\n        if (newNoiseChannels.length > Config.noiseChannelCountMax)\n            newNoiseChannels.length = Config.noiseChannelCountMax;\n        if (newModChannels.length > Config.modChannelCountMax)\n            newModChannels.length = Config.modChannelCountMax;\n        this.pitchChannelCount = newPitchChannels.length;\n        this.noiseChannelCount = newNoiseChannels.length;\n        this.modChannelCount = newModChannels.length;\n        this.channels.length = 0;\n        Array.prototype.push.apply(this.channels, newPitchChannels);\n        Array.prototype.push.apply(this.channels, newNoiseChannels);\n        Array.prototype.push.apply(this.channels, newModChannels);\n        if (Config.willReloadForCustomSamples) {\n            window.location.hash = this.toBase64String();\n            setTimeout(() => { location.reload(); }, 50);\n        }\n    }\n    getPattern(channelIndex, bar) {\n        if (bar < 0 || bar >= this.barCount)\n            return null;\n        const patternIndex = this.channels[channelIndex].bars[bar];\n        if (patternIndex == 0)\n            return null;\n        return this.channels[channelIndex].patterns[patternIndex - 1];\n    }\n    getBeatsPerMinute() {\n        return this.tempo;\n    }\n    static getNeededBits(maxValue) {\n        return 32 - Math.clz32(Math.ceil(maxValue + 1) - 1);\n    }\n    restoreLimiterDefaults() {\n        this.compressionRatio = 1.0;\n        this.limitRatio = 1.0;\n        this.limitRise = 4000.0;\n        this.limitDecay = 4.0;\n        this.limitThreshold = 1.0;\n        this.compressionThreshold = 1.0;\n        this.masterGain = 1.0;\n    }\n}\nSong._format = Config.jsonFormat;\nSong._oldestBeepboxVersion = 2;\nSong._latestBeepboxVersion = 9;\nSong._oldestJummBoxVersion = 1;\nSong._latestJummBoxVersion = 6;\nSong._oldestGoldBoxVersion = 1;\nSong._latestGoldBoxVersion = 4;\nSong._oldestUltraBoxVersion = 1;\nSong._latestUltraBoxVersion = 5;\nSong._oldestSlarmoosBoxVersion = 1;\nSong._latestSlarmoosBoxVersion = 5;\nSong._variant = 0x74;\n//# sourceMappingURL=Song.js.map","export class ChannelState {\n    constructor() {\n        this.instruments = [];\n        this.muted = false;\n        this.singleSeamlessInstrument = null;\n    }\n}\n//# sourceMappingURL=ChannelState.js.map","export function scaleElementsByFactor(array, factor) {\n    for (let i = 0; i < array.length; i++) {\n        array[i] *= factor;\n    }\n}\nfunction isPowerOf2(n) {\n    return !!n && !(n & (n - 1));\n}\nfunction countBits(n) {\n    if (!isPowerOf2(n))\n        throw new Error(\"FFT array length must be a power of 2.\");\n    return Math.round(Math.log(n) / Math.log(2));\n}\nfunction reverseIndexBits(array, fullArrayLength) {\n    const bitCount = countBits(fullArrayLength);\n    if (bitCount > 16)\n        throw new Error(\"FFT array length must not be greater than 2^16.\");\n    const finalShift = 16 - bitCount;\n    for (let i = 0; i < fullArrayLength; i++) {\n        let j;\n        j = ((i & 0xaaaa) >> 1) | ((i & 0x5555) << 1);\n        j = ((j & 0xcccc) >> 2) | ((j & 0x3333) << 2);\n        j = ((j & 0xf0f0) >> 4) | ((j & 0x0f0f) << 4);\n        j = ((j >> 8) | ((j & 0xff) << 8)) >> finalShift;\n        if (j > i) {\n            let temp = array[i];\n            array[i] = array[j];\n            array[j] = temp;\n        }\n    }\n}\nexport function discreteFourierTransform(realArray, imagArray) {\n    const fullArrayLength = realArray.length;\n    if (fullArrayLength != imagArray.length)\n        throw new Error(\"FFT arrays must be the same length.\");\n    const realOut = [];\n    const imagOut = [];\n    for (let i = 0; i < fullArrayLength; i++) {\n        realOut[i] = 0.0;\n        imagOut[i] = 0.0;\n        for (let j = 0; j < fullArrayLength; j++) {\n            const radians = -6.2831853 * j * i / fullArrayLength;\n            const c = Math.cos(radians);\n            const s = Math.sin(radians);\n            realOut[i] += realArray[j] * c - imagArray[j] * s;\n            imagOut[i] += realArray[j] * s + imagArray[j] * c;\n        }\n    }\n    return [realOut, imagOut];\n}\nexport function fastFourierTransform(realArray, imagArray) {\n    const fullArrayLength = realArray.length;\n    if (!isPowerOf2(fullArrayLength))\n        throw new Error(\"FFT array length must be a power of 2.\");\n    if (fullArrayLength < 4)\n        throw new Error(\"FFT array length must be at least 4.\");\n    if (fullArrayLength != imagArray.length)\n        throw new Error(\"FFT arrays must be the same length.\");\n    reverseIndexBits(realArray, fullArrayLength);\n    reverseIndexBits(imagArray, fullArrayLength);\n    for (let startIndex = 0; startIndex < fullArrayLength; startIndex += 4) {\n        const startIndex1 = startIndex + 1;\n        const startIndex2 = startIndex + 2;\n        const startIndex3 = startIndex + 3;\n        const real0 = realArray[startIndex];\n        const real1 = realArray[startIndex1];\n        const real2 = realArray[startIndex2];\n        const real3 = realArray[startIndex3];\n        const imag0 = imagArray[startIndex];\n        const imag1 = imagArray[startIndex1];\n        const imag2 = imagArray[startIndex2];\n        const imag3 = imagArray[startIndex3];\n        const realTemp0 = real0 + real1;\n        const realTemp1 = real0 - real1;\n        const realTemp2 = real2 + real3;\n        const realTemp3 = real2 - real3;\n        const imagTemp0 = imag0 + imag1;\n        const imagTemp1 = imag0 - imag1;\n        const imagTemp2 = imag2 + imag3;\n        const imagTemp3 = imag2 - imag3;\n        realArray[startIndex] = realTemp0 + realTemp2;\n        realArray[startIndex1] = realTemp1 + imagTemp3;\n        realArray[startIndex2] = realTemp0 - realTemp2;\n        realArray[startIndex3] = realTemp1 - imagTemp3;\n        imagArray[startIndex] = imagTemp0 + imagTemp2;\n        imagArray[startIndex1] = imagTemp1 - realTemp3;\n        imagArray[startIndex2] = imagTemp0 - imagTemp2;\n        imagArray[startIndex3] = imagTemp1 + realTemp3;\n    }\n    for (let stride = 8; stride <= fullArrayLength; stride += stride) {\n        const halfLength = stride >>> 1;\n        const radiansIncrement = Math.PI * 2.0 / stride;\n        const cosIncrement = Math.cos(radiansIncrement);\n        const sinIncrement = Math.sin(radiansIncrement);\n        const oscillatorMultiplier = 2.0 * cosIncrement;\n        for (let startIndex = 0; startIndex < fullArrayLength; startIndex += stride) {\n            let c = 1.0;\n            let s = 0.0;\n            let cPrev = cosIncrement;\n            let sPrev = sinIncrement;\n            const secondHalf = startIndex + halfLength;\n            for (let i = startIndex; i < secondHalf; i++) {\n                const j = i + halfLength;\n                const real0 = realArray[i];\n                const imag0 = imagArray[i];\n                const real1 = realArray[j] * c - imagArray[j] * s;\n                const imag1 = realArray[j] * s + imagArray[j] * c;\n                realArray[i] = real0 + real1;\n                imagArray[i] = imag0 + imag1;\n                realArray[j] = real0 - real1;\n                imagArray[j] = imag0 - imag1;\n                const cTemp = oscillatorMultiplier * c - cPrev;\n                const sTemp = oscillatorMultiplier * s - sPrev;\n                cPrev = c;\n                sPrev = s;\n                c = cTemp;\n                s = sTemp;\n            }\n        }\n    }\n}\nexport function forwardRealFourierTransform(array) {\n    const fullArrayLength = array.length;\n    const totalPasses = countBits(fullArrayLength);\n    if (fullArrayLength < 4)\n        throw new Error(\"FFT array length must be at least 4.\");\n    reverseIndexBits(array, fullArrayLength);\n    for (let index = 0; index < fullArrayLength; index += 4) {\n        const index1 = index + 1;\n        const index2 = index + 2;\n        const index3 = index + 3;\n        const real0 = array[index];\n        const real1 = array[index1];\n        const real2 = array[index2];\n        const real3 = array[index3];\n        const tempA = real0 + real1;\n        const tempB = real2 + real3;\n        array[index] = tempA + tempB;\n        array[index1] = real0 - real1;\n        array[index2] = tempA - tempB;\n        array[index3] = real2 - real3;\n    }\n    const sqrt2over2 = Math.sqrt(2.0) / 2.0;\n    for (let index = 0; index < fullArrayLength; index += 8) {\n        const index1 = index + 1;\n        const index3 = index + 3;\n        const index4 = index + 4;\n        const index5 = index + 5;\n        const index7 = index + 7;\n        const real0 = array[index];\n        const real1 = array[index1];\n        const imag3 = array[index3];\n        const real4 = array[index4];\n        const real5 = array[index5];\n        const imag7 = array[index7];\n        const tempA = (real5 - imag7) * sqrt2over2;\n        const tempB = (real5 + imag7) * sqrt2over2;\n        array[index] = real0 + real4;\n        array[index1] = real1 + tempA;\n        array[index3] = real1 - tempA;\n        array[index4] = real0 - real4;\n        array[index5] = tempB - imag3;\n        array[index7] = tempB + imag3;\n    }\n    for (let pass = 3; pass < totalPasses; pass++) {\n        const subStride = 1 << pass;\n        const midSubStride = subStride >> 1;\n        const stride = subStride << 1;\n        const radiansIncrement = Math.PI * 2.0 / stride;\n        const cosIncrement = Math.cos(radiansIncrement);\n        const sinIncrement = Math.sin(radiansIncrement);\n        const oscillatorMultiplier = 2.0 * cosIncrement;\n        for (let startIndex = 0; startIndex < fullArrayLength; startIndex += stride) {\n            const startIndexA = startIndex;\n            const startIndexB = startIndexA + subStride;\n            const stopIndex = startIndexB + subStride;\n            const realStartA = array[startIndexA];\n            const realStartB = array[startIndexB];\n            array[startIndexA] = realStartA + realStartB;\n            array[startIndexB] = realStartA - realStartB;\n            let c = cosIncrement;\n            let s = -sinIncrement;\n            let cPrev = 1.0;\n            let sPrev = 0.0;\n            for (let index = 1; index < midSubStride; index++) {\n                const indexA0 = startIndexA + index;\n                const indexA1 = startIndexB - index;\n                const indexB0 = startIndexB + index;\n                const indexB1 = stopIndex - index;\n                const real0 = array[indexA0];\n                const imag0 = array[indexA1];\n                const real1 = array[indexB0];\n                const imag1 = array[indexB1];\n                const tempA = real1 * c + imag1 * s;\n                const tempB = real1 * s - imag1 * c;\n                array[indexA0] = real0 + tempA;\n                array[indexA1] = real0 - tempA;\n                array[indexB0] = -imag0 - tempB;\n                array[indexB1] = imag0 - tempB;\n                const cTemp = oscillatorMultiplier * c - cPrev;\n                const sTemp = oscillatorMultiplier * s - sPrev;\n                cPrev = c;\n                sPrev = s;\n                c = cTemp;\n                s = sTemp;\n            }\n        }\n    }\n}\nexport function inverseRealFourierTransform(array, fullArrayLength) {\n    const totalPasses = countBits(fullArrayLength);\n    if (fullArrayLength < 4)\n        throw new Error(\"FFT array length must be at least 4.\");\n    for (let pass = totalPasses - 1; pass >= 2; pass--) {\n        const subStride = 1 << pass;\n        const midSubStride = subStride >> 1;\n        const stride = subStride << 1;\n        const radiansIncrement = Math.PI * 2.0 / stride;\n        const cosIncrement = Math.cos(radiansIncrement);\n        const sinIncrement = Math.sin(radiansIncrement);\n        const oscillatorMultiplier = 2.0 * cosIncrement;\n        for (let startIndex = 0; startIndex < fullArrayLength; startIndex += stride) {\n            const startIndexA = startIndex;\n            const midIndexA = startIndexA + midSubStride;\n            const startIndexB = startIndexA + subStride;\n            const midIndexB = startIndexB + midSubStride;\n            const stopIndex = startIndexB + subStride;\n            const realStartA = array[startIndexA];\n            const imagStartB = array[startIndexB];\n            array[startIndexA] = realStartA + imagStartB;\n            array[midIndexA] *= 2;\n            array[startIndexB] = realStartA - imagStartB;\n            array[midIndexB] *= 2;\n            let c = cosIncrement;\n            let s = -sinIncrement;\n            let cPrev = 1.0;\n            let sPrev = 0.0;\n            for (let index = 1; index < midSubStride; index++) {\n                const indexA0 = startIndexA + index;\n                const indexA1 = startIndexB - index;\n                const indexB0 = startIndexB + index;\n                const indexB1 = stopIndex - index;\n                const real0 = array[indexA0];\n                const real1 = array[indexA1];\n                const imag0 = array[indexB0];\n                const imag1 = array[indexB1];\n                const tempA = real0 - real1;\n                const tempB = imag0 + imag1;\n                array[indexA0] = real0 + real1;\n                array[indexA1] = imag1 - imag0;\n                array[indexB0] = tempA * c - tempB * s;\n                array[indexB1] = tempB * c + tempA * s;\n                const cTemp = oscillatorMultiplier * c - cPrev;\n                const sTemp = oscillatorMultiplier * s - sPrev;\n                cPrev = c;\n                sPrev = s;\n                c = cTemp;\n                s = sTemp;\n            }\n        }\n    }\n    for (let index = 0; index < fullArrayLength; index += 4) {\n        const index1 = index + 1;\n        const index2 = index + 2;\n        const index3 = index + 3;\n        const real0 = array[index];\n        const real1 = array[index1] * 2;\n        const imag2 = array[index2];\n        const imag3 = array[index3] * 2;\n        const tempA = real0 + imag2;\n        const tempB = real0 - imag2;\n        array[index] = tempA + real1;\n        array[index1] = tempA - real1;\n        array[index2] = tempB + imag3;\n        array[index3] = tempB - imag3;\n    }\n    reverseIndexBits(array, fullArrayLength);\n}\n//# sourceMappingURL=FFT.js.map","import { Config, calculateRingModHertz } from \"./SynthConfig\";\nimport { DynamicBiquadFilter } from \"./filtering\";\nimport { Instrument } from \"./Instrument\";\nimport { Synth } from \"./synth\";\nimport { FilterSettings } from \"./Filter\";\nimport { fittingPowerOfTwo } from \"./utils\";\nclass Grain {\n    constructor() {\n        this.delayLinePosition = 0;\n        this.ageInSamples = 0;\n        this.maxAgeInSamples = 0;\n        this.delay = 0;\n        this.parabolicEnvelopeAmplitude = 0;\n        this.parabolicEnvelopeSlope = 0;\n        this.parabolicEnvelopeCurve = 0;\n        this.rcbEnvelopeAmplitude = 0;\n        this.rcbEnvelopeAttackIndex = 0;\n        this.rcbEnvelopeReleaseIndex = 0;\n        this.rcbEnvelopeSustain = 0;\n    }\n    initializeParabolicEnvelope(durationInSamples, amplitude) {\n        this.parabolicEnvelopeAmplitude = 0;\n        const invDuration = 1.0 / durationInSamples;\n        const invDurationSquared = invDuration * invDuration;\n        this.parabolicEnvelopeSlope = 4.0 * amplitude * (invDuration - invDurationSquared);\n        this.parabolicEnvelopeCurve = -8.0 * amplitude * invDurationSquared;\n    }\n    updateParabolicEnvelope() {\n        this.parabolicEnvelopeAmplitude += this.parabolicEnvelopeSlope;\n        this.parabolicEnvelopeSlope += this.parabolicEnvelopeCurve;\n    }\n    initializeRCBEnvelope(durationInSamples, amplitude) {\n        this.rcbEnvelopeAttackIndex = Math.floor(durationInSamples / 6);\n        this.rcbEnvelopeSustain = amplitude;\n        this.rcbEnvelopeReleaseIndex = Math.floor(durationInSamples * 5 / 6);\n    }\n    updateRCBEnvelope() {\n        if (this.ageInSamples < this.rcbEnvelopeAttackIndex) {\n            this.rcbEnvelopeAmplitude = (1.0 + Math.cos(Math.PI + (Math.PI * (this.ageInSamples / this.rcbEnvelopeAttackIndex) * (this.rcbEnvelopeSustain / 2.0))));\n        }\n        else if (this.ageInSamples > this.rcbEnvelopeReleaseIndex) {\n            this.rcbEnvelopeAmplitude = (1.0 + Math.cos(Math.PI * ((this.ageInSamples - this.rcbEnvelopeReleaseIndex) / this.rcbEnvelopeAttackIndex)) * (this.rcbEnvelopeSustain / 2.0));\n        }\n    }\n    addDelay(delay) {\n        this.delay = delay;\n    }\n}\nexport class EffectState {\n    constructor(type) {\n        this.type = 0;\n        this.eqFilterVolume = 1.0;\n        this.eqFilterVolumeDelta = 0.0;\n        this.granularMix = 1.0;\n        this.granularMixDelta = 0.0;\n        this.granularDelayLineL = null;\n        this.granularDelayLineR = null;\n        this.granularDelayLineIndex = 0;\n        this.granularMaximumDelayTimeInSeconds = 1;\n        this.usesRandomGrainLocation = true;\n        this.granularDelayLineDirty = false;\n        this.computeGrains = true;\n        this.ringModMix = 0;\n        this.ringModMixDelta = 0;\n        this.ringModPhase = 0;\n        this.ringModPhaseDelta = 0;\n        this.ringModPhaseDeltaScale = 1.0;\n        this.ringModWaveformIndex = 0.0;\n        this.ringModPulseWidth = 0.0;\n        this.ringModHzOffset = 0.0;\n        this.ringModMixFade = 1.0;\n        this.ringModMixFadeDelta = 0;\n        this.distortion = 0.0;\n        this.distortionDelta = 0.0;\n        this.distortionDrive = 0.0;\n        this.distortionDriveDelta = 0.0;\n        this.distortionFractionalInputL1 = 0.0;\n        this.distortionFractionalInputL2 = 0.0;\n        this.distortionFractionalInputL3 = 0.0;\n        this.distortionFractionalInputR1 = 0.0;\n        this.distortionFractionalInputR2 = 0.0;\n        this.distortionFractionalInputR3 = 0.0;\n        this.distortionPrevInputL = 0.0;\n        this.distortionPrevInputR = 0.0;\n        this.distortionNextOutputL = 0.0;\n        this.distortionNextOutputR = 0.0;\n        this.bitcrusherPrevInputL = 0.0;\n        this.bitcrusherPrevInputR = 0.0;\n        this.bitcrusherCurrentOutputL = 0.0;\n        this.bitcrusherCurrentOutputR = 0.0;\n        this.bitcrusherPhase = 1.0;\n        this.bitcrusherPhaseDelta = 0.0;\n        this.bitcrusherPhaseDeltaScale = 1.0;\n        this.bitcrusherScale = 1.0;\n        this.bitcrusherScaleScale = 1.0;\n        this.bitcrusherFoldLevel = 1.0;\n        this.bitcrusherFoldLevelScale = 1.0;\n        this.eqFiltersL = [];\n        this.eqFiltersR = [];\n        this.eqFilterCount = 0;\n        this.initialEqFilterInputL1 = 0.0;\n        this.initialEqFilterInputR1 = 0.0;\n        this.initialEqFilterInputL2 = 0.0;\n        this.initialEqFilterInputR2 = 0.0;\n        this.gain = 1.0;\n        this.gainDelta = 0.0;\n        this.panningDelayLineL = null;\n        this.panningDelayLineR = null;\n        this.panningDelayPos = 0;\n        this.panningVolumeL = 0.0;\n        this.panningVolumeR = 0.0;\n        this.panningVolumeDeltaL = 0.0;\n        this.panningVolumeDeltaR = 0.0;\n        this.panningOffsetL = 0.0;\n        this.panningOffsetR = 0.0;\n        this.panningOffsetDeltaL = 0.0;\n        this.panningOffsetDeltaR = 0.0;\n        this.panningMode = 0;\n        this.flangerDelayLineL = null;\n        this.flangerDelayLineR = null;\n        this.flangerDelayLineDirty = false;\n        this.flangerDelayPos = 0;\n        this.flanger = 0;\n        this.flangerDelta = 0;\n        this.flangerSpeed = 0;\n        this.flangerSpeedDelta = 0;\n        this.flangerDepth = 0;\n        this.flangerDepthDelta = 0;\n        this.flangerFeedback = 0;\n        this.flangerFeedbackDelta = 0;\n        this.flangerPhase = 0;\n        this.chorusDelayLineL = null;\n        this.chorusDelayLineR = null;\n        this.chorusDelayLineDirty = false;\n        this.chorusDelayPos = 0;\n        this.chorusPhase = 0;\n        this.chorusVoiceMult = 0;\n        this.chorusVoiceMultDelta = 0;\n        this.chorusCombinedMult = 0;\n        this.chorusCombinedMultDelta = 0;\n        this.echoDelayLineL = null;\n        this.echoDelayLineR = null;\n        this.echoDelayLineDirty = false;\n        this.echoDelayPosL = 0;\n        this.echoDelayPosR = 0;\n        this.echoDelayOffsetStart = 0;\n        this.echoDelayOffsetEnd = null;\n        this.echoDelayOffsetRatio = 0.0;\n        this.echoDelayOffsetRatioDelta = 0.0;\n        this.echoMult = 0.0;\n        this.echoMultDelta = 0.0;\n        this.echoPingPong = 0.0;\n        this.echoShelfA1 = 0.0;\n        this.echoShelfB0 = 0.0;\n        this.echoShelfB1 = 0.0;\n        this.echoShelfSampleL = 0.0;\n        this.echoShelfSampleR = 0.0;\n        this.echoShelfPrevInputL = 0.0;\n        this.echoShelfPrevInputR = 0.0;\n        this.reverbDelayLine = null;\n        this.reverbDelayLineDirty = false;\n        this.reverbDelayPos = 0;\n        this.reverbMult = 0.0;\n        this.reverbMultDelta = 0.0;\n        this.reverbShelfA1 = 0.0;\n        this.reverbShelfB0 = 0.0;\n        this.reverbShelfB1 = 0.0;\n        this.reverbShelfSample0 = 0.0;\n        this.reverbShelfSample1 = 0.0;\n        this.reverbShelfSample2 = 0.0;\n        this.reverbShelfSample3 = 0.0;\n        this.reverbShelfPrevInput0 = 0.0;\n        this.reverbShelfPrevInput1 = 0.0;\n        this.reverbShelfPrevInput2 = 0.0;\n        this.reverbShelfPrevInput3 = 0.0;\n        this.type = type;\n        this.granularGrains = [];\n        this.granularMaximumGrains = 256;\n        for (let i = 0; i < this.granularMaximumGrains; i++) {\n            this.granularGrains.push(new Grain());\n        }\n        this.granularGrainsLength = 0;\n    }\n    reset() {\n        if (this.chorusDelayLineDirty) {\n            for (let i = 0; i < this.chorusDelayLineL.length; i++)\n                this.chorusDelayLineL[i] = 0.0;\n            for (let i = 0; i < this.chorusDelayLineR.length; i++)\n                this.chorusDelayLineR[i] = 0.0;\n        }\n        if (this.flangerDelayLineDirty) {\n            for (let i = 0; i < this.flangerDelayLineL.length; i++)\n                this.flangerDelayLineL[i] = 0.0;\n            for (let i = 0; i < this.flangerDelayLineR.length; i++)\n                this.flangerDelayLineR[i] = 0.0;\n        }\n        if (this.echoDelayLineDirty) {\n            for (let i = 0; i < this.echoDelayLineL.length; i++)\n                this.echoDelayLineL[i] = 0.0;\n            for (let i = 0; i < this.echoDelayLineR.length; i++)\n                this.echoDelayLineR[i] = 0.0;\n        }\n        if (this.reverbDelayLineDirty) {\n            for (let i = 0; i < this.reverbDelayLine.length; i++)\n                this.reverbDelayLine[i] = 0.0;\n        }\n        if (this.granularDelayLineDirty) {\n            for (let i = 0; i < this.granularDelayLineL.length; i++)\n                this.granularDelayLineL[i] = 0.0;\n            for (let i = 0; i < this.granularDelayLineR.length; i++)\n                this.granularDelayLineR[i] = 0.0;\n        }\n        this.flangerPhase = 0.0;\n        this.chorusPhase = 0.0;\n        this.ringModPhase = 0.0;\n        this.ringModMixFade = 1.0;\n    }\n    allocateNecessaryBuffers(synth, instrument, effect, samplesPerTick) {\n        if (effect.type == 2) {\n            if (this.panningDelayLineL == null || this.panningDelayLineR == null || this.panningDelayLineL.length < synth.panningDelayBufferSize || this.panningDelayLineR.length < synth.panningDelayBufferSize) {\n                this.panningDelayLineL = new Float32Array(synth.panningDelayBufferSize);\n                this.panningDelayLineR = new Float32Array(synth.panningDelayBufferSize);\n            }\n        }\n        if (effect.type == 1) {\n            if (this.chorusDelayLineL == null || this.chorusDelayLineL.length < synth.chorusDelayBufferSize) {\n                this.chorusDelayLineL = new Float32Array(synth.chorusDelayBufferSize);\n            }\n            if (this.chorusDelayLineR == null || this.chorusDelayLineR.length < synth.chorusDelayBufferSize) {\n                this.chorusDelayLineR = new Float32Array(synth.chorusDelayBufferSize);\n            }\n        }\n        if (effect.type == 10) {\n            if (this.flangerDelayLineL == null || this.flangerDelayLineL.length < synth.flangerDelayBufferSize) {\n                this.flangerDelayLineL = new Float32Array(synth.flangerDelayBufferSize);\n            }\n            if (this.flangerDelayLineR == null || this.flangerDelayLineR.length < synth.flangerDelayBufferSize) {\n                this.flangerDelayLineR = new Float32Array(synth.flangerDelayBufferSize);\n            }\n        }\n        if (effect.type == 6) {\n            this.allocateEchoBuffers(samplesPerTick, effect.echoDelay);\n        }\n        if (effect.type == 0) {\n            if (this.reverbDelayLine == null) {\n                this.reverbDelayLine = new Float32Array(Config.reverbDelayBufferSize);\n            }\n        }\n        if (effect.type == 8) {\n            const granularDelayLineSizeInMilliseconds = 2500;\n            const granularDelayLineSizeInSeconds = granularDelayLineSizeInMilliseconds / 1000;\n            this.granularMaximumDelayTimeInSeconds = granularDelayLineSizeInSeconds;\n            const granularDelayLineSizeInSamples = fittingPowerOfTwo(Math.floor(granularDelayLineSizeInSeconds * synth.samplesPerSecond));\n            if (this.granularDelayLineL == null || this.granularDelayLineR == null || this.granularDelayLineL.length != granularDelayLineSizeInSamples || this.granularDelayLineR.length != granularDelayLineSizeInSamples) {\n                this.granularDelayLineL = new Float32Array(granularDelayLineSizeInSamples);\n                this.granularDelayLineR = new Float32Array(granularDelayLineSizeInSamples);\n                this.granularDelayLineIndex = 0;\n            }\n            const oldGrainsLength = this.granularGrains.length;\n            if (this.granularMaximumGrains > oldGrainsLength) {\n                for (let i = oldGrainsLength; i < this.granularMaximumGrains + 1; i++) {\n                    this.granularGrains.push(new Grain());\n                }\n            }\n            if (this.granularMaximumGrains < this.granularGrainsLength) {\n                this.granularGrainsLength = Math.round(this.granularMaximumGrains);\n            }\n        }\n    }\n    allocateEchoBuffers(samplesPerTick, echoDelay) {\n        const safeEchoDelaySteps = Math.max(Config.echoDelayRange >> 1, (echoDelay + 1));\n        const baseEchoDelayBufferSize = fittingPowerOfTwo(safeEchoDelaySteps * Config.echoDelayStepTicks * samplesPerTick);\n        const safeEchoDelayBufferSize = baseEchoDelayBufferSize * 2;\n        if (this.echoDelayLineL == null || this.echoDelayLineR == null) {\n            this.echoDelayLineL = new Float32Array(safeEchoDelayBufferSize);\n            this.echoDelayLineR = new Float32Array(safeEchoDelayBufferSize);\n        }\n        else if (this.echoDelayLineL.length < safeEchoDelayBufferSize || this.echoDelayLineR.length < safeEchoDelayBufferSize) {\n            const newDelayLineL = new Float32Array(safeEchoDelayBufferSize);\n            const newDelayLineR = new Float32Array(safeEchoDelayBufferSize);\n            const oldMask = this.echoDelayLineL.length - 1;\n            for (let i = 0; i < this.echoDelayLineL.length; i++) {\n                newDelayLineL[i] = this.echoDelayLineL[(this.echoDelayPosL + i) & oldMask];\n                newDelayLineR[i] = this.echoDelayLineR[(this.echoDelayPosR + i) & oldMask];\n            }\n            this.echoDelayPosL = this.echoDelayLineL.length;\n            this.echoDelayPosR = this.echoDelayLineR.length;\n            this.echoDelayLineL = newDelayLineL;\n            this.echoDelayLineR = newDelayLineR;\n        }\n    }\n    deactivate() {\n        this.bitcrusherPrevInputL = 0.0;\n        this.bitcrusherPrevInputR = 0.0;\n        this.bitcrusherCurrentOutputL = 0.0;\n        this.bitcrusherCurrentOutputR = 0.0;\n        this.bitcrusherPhase = 1.0;\n        for (let i = 0; i < this.eqFilterCount; i++) {\n            this.eqFiltersL[i].resetOutput();\n            this.eqFiltersR[i].resetOutput();\n        }\n        this.eqFilterCount = 0;\n        this.initialEqFilterInputL1 = 0.0;\n        this.initialEqFilterInputR1 = 0.0;\n        this.initialEqFilterInputL2 = 0.0;\n        this.initialEqFilterInputR2 = 0.0;\n        this.distortionFractionalInputL1 = 0.0;\n        this.distortionFractionalInputL2 = 0.0;\n        this.distortionFractionalInputL3 = 0.0;\n        this.distortionFractionalInputR1 = 0.0;\n        this.distortionFractionalInputR2 = 0.0;\n        this.distortionFractionalInputR3 = 0.0;\n        this.distortionPrevInputL = 0.0;\n        this.distortionPrevInputR = 0.0;\n        this.distortionNextOutputL = 0.0;\n        this.distortionNextOutputR = 0.0;\n        this.flangerDelayPos = 0;\n        this.panningDelayPos = 0;\n        if (this.panningDelayLineL != null)\n            for (let i = 0; i < this.panningDelayLineL.length; i++)\n                this.panningDelayLineL[i] = 0.0;\n        if (this.panningDelayLineR != null)\n            for (let i = 0; i < this.panningDelayLineR.length; i++)\n                this.panningDelayLineR[i] = 0.0;\n        this.echoDelayOffsetEnd = null;\n        this.echoShelfSampleL = 0.0;\n        this.echoShelfSampleR = 0.0;\n        this.echoShelfPrevInputL = 0.0;\n        this.echoShelfPrevInputR = 0.0;\n        this.reverbShelfSample0 = 0.0;\n        this.reverbShelfSample1 = 0.0;\n        this.reverbShelfSample2 = 0.0;\n        this.reverbShelfSample3 = 0.0;\n        this.reverbShelfPrevInput0 = 0.0;\n        this.reverbShelfPrevInput1 = 0.0;\n        this.reverbShelfPrevInput2 = 0.0;\n        this.reverbShelfPrevInput3 = 0.0;\n    }\n    compute(synth, instrument, effect, instrumentState, samplesPerTick, roundedSamplesPerTick, tone, channelIndex, instrumentIndex, envelopeStarts, envelopeEnds) {\n        const samplesPerSecond = synth.samplesPerSecond;\n        this.type = effect.type;\n        const usesGranular = effect.type == 8;\n        const usesRingModulation = effect.type == 7;\n        const usesDistortion = effect.type == 3;\n        const usesBitcrusher = effect.type == 4;\n        const usesGain = effect.type == 9;\n        const usesPanning = effect.type == 2;\n        const usesFlanger = effect.type == 10;\n        const usesChorus = effect.type == 1;\n        const usesEcho = effect.type == 6;\n        const usesReverb = effect.type == 0;\n        const usesEQFilter = effect.type == 5;\n        if (usesGranular) {\n            this.granularMaximumGrains = Math.pow(2, effect.grainAmounts * envelopeStarts[53]);\n            if (synth.isModActive(Config.modulators.dictionary[\"grain freq\"].index, channelIndex, instrumentIndex)) {\n                this.granularMaximumGrains = Math.pow(2, synth.getModValue(Config.modulators.dictionary[\"grain freq\"].index, channelIndex, instrumentIndex, false) * envelopeStarts[53]);\n            }\n            this.granularMaximumGrains == Math.floor(this.granularMaximumGrains);\n        }\n        this.allocateNecessaryBuffers(synth, instrument, effect, samplesPerTick);\n        if (usesGranular) {\n            this.granularMix = effect.granular / Config.granularRange;\n            this.computeGrains = true;\n            let granularMixEnd = this.granularMix;\n            if (synth.isModActive(Config.modulators.dictionary[\"granular\"].index, channelIndex, instrumentIndex)) {\n                this.granularMix = synth.getModValue(Config.modulators.dictionary[\"granular\"].index, channelIndex, instrumentIndex, false) / Config.granularRange;\n                granularMixEnd = synth.getModValue(Config.modulators.dictionary[\"granular\"].index, channelIndex, instrumentIndex, true) / Config.granularRange;\n            }\n            this.granularMix *= envelopeStarts[52];\n            granularMixEnd *= envelopeEnds[52];\n            this.granularMixDelta = (granularMixEnd - this.granularMix) / roundedSamplesPerTick;\n            for (let iterations = 0; iterations < Math.ceil(Math.random() * Math.random() * 10); iterations++) {\n                if (this.granularGrainsLength < this.granularMaximumGrains) {\n                    let granularMinGrainSizeInMilliseconds = effect.grainSize;\n                    if (synth.isModActive(Config.modulators.dictionary[\"grain size\"].index, channelIndex, instrumentIndex)) {\n                        granularMinGrainSizeInMilliseconds = synth.getModValue(Config.modulators.dictionary[\"grain size\"].index, channelIndex, instrumentIndex, false);\n                    }\n                    granularMinGrainSizeInMilliseconds *= envelopeStarts[54];\n                    let grainRange = effect.grainRange;\n                    if (synth.isModActive(Config.modulators.dictionary[\"grain range\"].index, channelIndex, instrumentIndex)) {\n                        grainRange = synth.getModValue(Config.modulators.dictionary[\"grain range\"].index, channelIndex, instrumentIndex, false);\n                    }\n                    grainRange *= envelopeStarts[55];\n                    const granularMaxGrainSizeInMilliseconds = granularMinGrainSizeInMilliseconds + grainRange;\n                    const granularGrainSizeInMilliseconds = granularMinGrainSizeInMilliseconds + (granularMaxGrainSizeInMilliseconds - granularMinGrainSizeInMilliseconds) * Math.random();\n                    const granularGrainSizeInSeconds = granularGrainSizeInMilliseconds / 1000.0;\n                    const granularGrainSizeInSamples = Math.floor(granularGrainSizeInSeconds * samplesPerSecond);\n                    const granularDelayLineLength = this.granularDelayLineL.length;\n                    const grainIndex = this.granularGrainsLength;\n                    this.granularGrainsLength++;\n                    const grain = this.granularGrains[grainIndex];\n                    grain.ageInSamples = 0;\n                    grain.maxAgeInSamples = granularGrainSizeInSamples;\n                    const minDelayTimeInSeconds = 0.02;\n                    const maxDelayTimeInSeconds = 2.4;\n                    grain.delayLinePosition = this.usesRandomGrainLocation ? (minDelayTimeInSeconds + (maxDelayTimeInSeconds - minDelayTimeInSeconds) * Math.random() * Math.random() * samplesPerSecond) % (granularDelayLineLength - 1) : minDelayTimeInSeconds;\n                    if (Config.granularEnvelopeType == 0) {\n                        grain.initializeParabolicEnvelope(grain.maxAgeInSamples, 1.0);\n                    }\n                    else if (Config.granularEnvelopeType == 1) {\n                        grain.initializeRCBEnvelope(grain.maxAgeInSamples, 1.0);\n                    }\n                    grain.addDelay(Math.random() * samplesPerTick * 4);\n                }\n            }\n        }\n        if (usesDistortion) {\n            let useDistortionStart = effect.distortion;\n            let useDistortionEnd = effect.distortion;\n            if (synth.isModActive(Config.modulators.dictionary[\"distortion\"].index, channelIndex, instrumentIndex)) {\n                useDistortionStart = synth.getModValue(Config.modulators.dictionary[\"distortion\"].index, channelIndex, instrumentIndex, false);\n                useDistortionEnd = synth.getModValue(Config.modulators.dictionary[\"distortion\"].index, channelIndex, instrumentIndex, true);\n            }\n            const distortionSliderStart = Math.min(1.0, envelopeStarts[43] * useDistortionStart / (Config.distortionRange - 1));\n            const distortionSliderEnd = Math.min(1.0, envelopeEnds[43] * useDistortionEnd / (Config.distortionRange - 1));\n            const distortionStart = Math.pow(1.0 - 0.895 * (Math.pow(20.0, distortionSliderStart) - 1.0) / 19.0, 2.0);\n            const distortionEnd = Math.pow(1.0 - 0.895 * (Math.pow(20.0, distortionSliderEnd) - 1.0) / 19.0, 2.0);\n            const distortionDriveStart = (1.0 + 2.0 * distortionSliderStart) / Config.distortionBaseVolume;\n            const distortionDriveEnd = (1.0 + 2.0 * distortionSliderEnd) / Config.distortionBaseVolume;\n            this.distortion = distortionStart;\n            this.distortionDelta = (distortionEnd - distortionStart) / roundedSamplesPerTick;\n            this.distortionDrive = distortionDriveStart;\n            this.distortionDriveDelta = (distortionDriveEnd - distortionDriveStart) / roundedSamplesPerTick;\n        }\n        if (usesBitcrusher) {\n            let freqSettingStart = effect.bitcrusherFreq * Math.sqrt(envelopeStarts[45]);\n            let freqSettingEnd = effect.bitcrusherFreq * Math.sqrt(envelopeEnds[45]);\n            if (synth.isModActive(Config.modulators.dictionary[\"freq crush\"].index, channelIndex, instrumentIndex)) {\n                freqSettingStart = synth.getModValue(Config.modulators.dictionary[\"freq crush\"].index, channelIndex, instrumentIndex, false) * Math.sqrt(envelopeStarts[45]);\n                freqSettingEnd = synth.getModValue(Config.modulators.dictionary[\"freq crush\"].index, channelIndex, instrumentIndex, true) * Math.sqrt(envelopeEnds[45]);\n            }\n            let quantizationSettingStart = effect.bitcrusherQuantization * Math.sqrt(envelopeStarts[44]);\n            let quantizationSettingEnd = effect.bitcrusherQuantization * Math.sqrt(envelopeEnds[44]);\n            if (synth.isModActive(Config.modulators.dictionary[\"bit crush\"].index, channelIndex, instrumentIndex)) {\n                quantizationSettingStart = synth.getModValue(Config.modulators.dictionary[\"bit crush\"].index, channelIndex, instrumentIndex, false) * Math.sqrt(envelopeStarts[44]);\n                quantizationSettingEnd = synth.getModValue(Config.modulators.dictionary[\"bit crush\"].index, channelIndex, instrumentIndex, true) * Math.sqrt(envelopeEnds[44]);\n            }\n            const basePitch = Config.keys[synth.song.key].basePitch + (Config.pitchesPerOctave * synth.song.octave);\n            const freqStart = Instrument.frequencyFromPitch(basePitch + 60) * Math.pow(2.0, (Config.bitcrusherFreqRange - 1 - freqSettingStart) * Config.bitcrusherOctaveStep);\n            const freqEnd = Instrument.frequencyFromPitch(basePitch + 60) * Math.pow(2.0, (Config.bitcrusherFreqRange - 1 - freqSettingEnd) * Config.bitcrusherOctaveStep);\n            const phaseDeltaStart = Math.min(1.0, freqStart / samplesPerSecond);\n            const phaseDeltaEnd = Math.min(1.0, freqEnd / samplesPerSecond);\n            this.bitcrusherPhaseDelta = phaseDeltaStart;\n            this.bitcrusherPhaseDeltaScale = Math.pow(phaseDeltaEnd / phaseDeltaStart, 1.0 / roundedSamplesPerTick);\n            const scaleStart = 2.0 * Config.bitcrusherBaseVolume * Math.pow(2.0, 1.0 - Math.pow(2.0, (Config.bitcrusherQuantizationRange - 1 - quantizationSettingStart) * 0.5));\n            const scaleEnd = 2.0 * Config.bitcrusherBaseVolume * Math.pow(2.0, 1.0 - Math.pow(2.0, (Config.bitcrusherQuantizationRange - 1 - quantizationSettingEnd) * 0.5));\n            this.bitcrusherScale = scaleStart;\n            this.bitcrusherScaleScale = Math.pow(scaleEnd / scaleStart, 1.0 / roundedSamplesPerTick);\n            const foldLevelStart = 2.0 * Config.bitcrusherBaseVolume * Math.pow(1.5, Config.bitcrusherQuantizationRange - 1 - quantizationSettingStart);\n            const foldLevelEnd = 2.0 * Config.bitcrusherBaseVolume * Math.pow(1.5, Config.bitcrusherQuantizationRange - 1 - quantizationSettingEnd);\n            this.bitcrusherFoldLevel = foldLevelStart;\n            this.bitcrusherFoldLevelScale = Math.pow(foldLevelEnd / foldLevelStart, 1.0 / roundedSamplesPerTick);\n        }\n        if (usesEQFilter) {\n            let eqFilterVolume = 1.0;\n            if (effect.eqFilterType) {\n                const eqFilterSettingsStart = effect.eqFilter;\n                if (effect.eqSubFilters[1] == null)\n                    effect.eqSubFilters[1] = new FilterSettings();\n                const eqFilterSettingsEnd = effect.eqSubFilters[1];\n                let startSimpleFreq = effect.eqFilterSimpleCut;\n                let startSimpleGain = effect.eqFilterSimplePeak;\n                let endSimpleFreq = effect.eqFilterSimpleCut;\n                let endSimpleGain = effect.eqFilterSimplePeak;\n                let filterChanges = false;\n                if (synth.isModActive(Config.modulators.dictionary[\"eq filt cut\"].index, channelIndex, instrumentIndex)) {\n                    startSimpleFreq = synth.getModValue(Config.modulators.dictionary[\"eq filt cut\"].index, channelIndex, instrumentIndex, false);\n                    endSimpleFreq = synth.getModValue(Config.modulators.dictionary[\"eq filt cut\"].index, channelIndex, instrumentIndex, true);\n                    filterChanges = true;\n                }\n                if (synth.isModActive(Config.modulators.dictionary[\"eq filt peak\"].index, channelIndex, instrumentIndex)) {\n                    startSimpleGain = synth.getModValue(Config.modulators.dictionary[\"eq filt peak\"].index, channelIndex, instrumentIndex, false);\n                    endSimpleGain = synth.getModValue(Config.modulators.dictionary[\"eq filt peak\"].index, channelIndex, instrumentIndex, true);\n                    filterChanges = true;\n                }\n                let startPoint;\n                if (filterChanges) {\n                    eqFilterSettingsStart.convertLegacySettingsForSynth(startSimpleFreq, startSimpleGain);\n                    eqFilterSettingsEnd.convertLegacySettingsForSynth(endSimpleFreq, endSimpleGain);\n                    startPoint = eqFilterSettingsStart.controlPoints[0];\n                    let endPoint = eqFilterSettingsEnd.controlPoints[0];\n                    startPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, 1.0, 1.0);\n                    endPoint.toCoefficients(Synth.tempFilterEndCoefficients, samplesPerSecond, 1.0, 1.0);\n                    if (this.eqFiltersL.length < 1)\n                        this.eqFiltersL[0] = new DynamicBiquadFilter();\n                    if (this.eqFiltersR.length < 1)\n                        this.eqFiltersR[0] = new DynamicBiquadFilter();\n                    this.eqFiltersL[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == 0);\n                    this.eqFiltersR[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == 0);\n                }\n                else {\n                    eqFilterSettingsStart.convertLegacySettingsForSynth(startSimpleFreq, startSimpleGain, true);\n                    startPoint = eqFilterSettingsStart.controlPoints[0];\n                    startPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, 1.0, 1.0);\n                    if (this.eqFiltersL.length < 1)\n                        this.eqFiltersL[0] = new DynamicBiquadFilter();\n                    if (this.eqFiltersR.length < 1)\n                        this.eqFiltersR[0] = new DynamicBiquadFilter();\n                    this.eqFiltersL[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterStartCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == 0);\n                    this.eqFiltersR[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterStartCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == 0);\n                }\n                this.eqFilterCount = 1;\n                eqFilterVolume *= startPoint.getVolumeCompensationMult();\n            }\n            else {\n                const eqFilterSettings = (effect.tmpEqFilterStart != null) ? effect.tmpEqFilterStart : effect.eqFilter;\n                for (let i = 0; i < eqFilterSettings.controlPointCount; i++) {\n                    let startPoint = eqFilterSettings.controlPoints[i];\n                    let endPoint = (effect.tmpEqFilterEnd != null && effect.tmpEqFilterEnd.controlPoints[i] != null) ? effect.tmpEqFilterEnd.controlPoints[i] : eqFilterSettings.controlPoints[i];\n                    if (startPoint.type != endPoint.type) {\n                        startPoint = endPoint;\n                    }\n                    startPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, 1.0, 1.0);\n                    endPoint.toCoefficients(Synth.tempFilterEndCoefficients, samplesPerSecond, 1.0, 1.0);\n                    if (this.eqFiltersL.length <= i)\n                        this.eqFiltersL[i] = new DynamicBiquadFilter();\n                    if (this.eqFiltersR.length <= i)\n                        this.eqFiltersR[i] = new DynamicBiquadFilter();\n                    this.eqFiltersL[i].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == 0);\n                    this.eqFiltersR[i].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == 0);\n                    eqFilterVolume *= startPoint.getVolumeCompensationMult();\n                }\n                this.eqFilterCount = eqFilterSettings.controlPointCount;\n            }\n            eqFilterVolume = Math.min(3.0, eqFilterVolume);\n            let eqFilterVolumeStart = eqFilterVolume;\n            let eqFilterVolumeEnd = eqFilterVolume;\n            this.eqFilterVolume = eqFilterVolumeStart;\n            this.eqFilterVolumeDelta = (eqFilterVolumeEnd - eqFilterVolumeStart) / roundedSamplesPerTick;\n        }\n        if (usesPanning) {\n            this.panningMode = effect.panMode;\n            const panEnvelopeStart = envelopeStarts[42] * 2.0 - 1.0;\n            const panEnvelopeEnd = envelopeEnds[42] * 2.0 - 1.0;\n            let usePanStart = effect.pan;\n            let usePanEnd = effect.pan;\n            if (synth.isModActive(Config.modulators.dictionary[\"pan\"].index, channelIndex, instrumentIndex)) {\n                usePanStart = synth.getModValue(Config.modulators.dictionary[\"pan\"].index, channelIndex, instrumentIndex, false);\n                usePanEnd = synth.getModValue(Config.modulators.dictionary[\"pan\"].index, channelIndex, instrumentIndex, true);\n            }\n            let panStart = Math.max(-1.0, Math.min(1.0, (usePanStart - Config.panCenter) / Config.panCenter * panEnvelopeStart));\n            let panEnd = Math.max(-1.0, Math.min(1.0, (usePanEnd - Config.panCenter) / Config.panCenter * panEnvelopeEnd));\n            const volumeStartL = Math.cos((1 + panStart) * Math.PI * 0.25) * 1.414;\n            const volumeStartR = Math.cos((1 - panStart) * Math.PI * 0.25) * 1.414;\n            const volumeEndL = Math.cos((1 + panEnd) * Math.PI * 0.25) * 1.414;\n            const volumeEndR = Math.cos((1 - panEnd) * Math.PI * 0.25) * 1.414;\n            const maxDelaySamples = samplesPerSecond * Config.panDelaySecondsMax;\n            let usePanDelayStart = effect.panDelay;\n            let usePanDelayEnd = effect.panDelay;\n            if (synth.isModActive(Config.modulators.dictionary[\"pan delay\"].index, channelIndex, instrumentIndex)) {\n                usePanDelayStart = synth.getModValue(Config.modulators.dictionary[\"pan delay\"].index, channelIndex, instrumentIndex, false);\n                usePanDelayEnd = synth.getModValue(Config.modulators.dictionary[\"pan delay\"].index, channelIndex, instrumentIndex, true);\n            }\n            const delayStart = panStart * usePanDelayStart * maxDelaySamples / 10;\n            const delayEnd = panEnd * usePanDelayEnd * maxDelaySamples / 10;\n            const delayStartL = Math.max(0.0, delayStart);\n            const delayStartR = Math.max(0.0, -delayStart);\n            const delayEndL = Math.max(0.0, delayEnd);\n            const delayEndR = Math.max(0.0, -delayEnd);\n            this.panningVolumeL = volumeStartL;\n            this.panningVolumeR = volumeStartR;\n            this.panningVolumeDeltaL = (volumeEndL - volumeStartL) / roundedSamplesPerTick;\n            this.panningVolumeDeltaR = (volumeEndR - volumeStartR) / roundedSamplesPerTick;\n            this.panningOffsetL = this.panningDelayPos - delayStartL + synth.panningDelayBufferSize;\n            this.panningOffsetR = this.panningDelayPos - delayStartR + synth.panningDelayBufferSize;\n            this.panningOffsetDeltaL = (delayEndL - delayStartL) / roundedSamplesPerTick;\n            this.panningOffsetDeltaR = (delayEndR - delayStartR) / roundedSamplesPerTick;\n        }\n        if (usesGain) {\n            const gainEnvelopeStart = envelopeStarts[57];\n            const gainEnvelopeEnd = envelopeEnds[57];\n            let useGainStart = effect.gain;\n            let useGainEnd = effect.gain;\n            if (synth.isModActive(Config.modulators.dictionary[\"gain\"].index, channelIndex, instrumentIndex)) {\n                useGainStart = synth.getModValue(Config.modulators.dictionary[\"gain\"].index, channelIndex, instrumentIndex, false);\n                useGainEnd = synth.getModValue(Config.modulators.dictionary[\"gain\"].index, channelIndex, instrumentIndex, true);\n            }\n            let gainStart = Math.min(Config.gainRangeMult, gainEnvelopeStart * useGainStart / (Config.volumeRange / 2 * Config.gainRangeMult)) * Config.gainRangeMult;\n            let gainEnd = Math.min(Config.gainRangeMult, gainEnvelopeEnd * useGainEnd / (Config.volumeRange / 2 * Config.gainRangeMult)) * Config.gainRangeMult;\n            this.gain = gainStart;\n            this.gainDelta = (gainEnd - gainStart) / roundedSamplesPerTick;\n        }\n        if (usesChorus) {\n            const chorusEnvelopeStart = envelopeStarts[46];\n            const chorusEnvelopeEnd = envelopeEnds[46];\n            let useChorusStart = effect.chorus;\n            let useChorusEnd = effect.chorus;\n            if (synth.isModActive(Config.modulators.dictionary[\"chorus\"].index, channelIndex, instrumentIndex)) {\n                useChorusStart = synth.getModValue(Config.modulators.dictionary[\"chorus\"].index, channelIndex, instrumentIndex, false);\n                useChorusEnd = synth.getModValue(Config.modulators.dictionary[\"chorus\"].index, channelIndex, instrumentIndex, true);\n            }\n            let chorusStart = Math.min(1.0, chorusEnvelopeStart * useChorusStart / (Config.chorusRange - 1));\n            let chorusEnd = Math.min(1.0, chorusEnvelopeEnd * useChorusEnd / (Config.chorusRange - 1));\n            chorusStart = chorusStart * 0.6 + (Math.pow(chorusStart, 6.0)) * 0.4;\n            chorusEnd = chorusEnd * 0.6 + (Math.pow(chorusEnd, 6.0)) * 0.4;\n            const chorusCombinedMultStart = 1.0 / Math.sqrt(3.0 * chorusStart * chorusStart + 1.0);\n            const chorusCombinedMultEnd = 1.0 / Math.sqrt(3.0 * chorusEnd * chorusEnd + 1.0);\n            this.chorusVoiceMult = chorusStart;\n            this.chorusVoiceMultDelta = (chorusEnd - chorusStart) / roundedSamplesPerTick;\n            this.chorusCombinedMult = chorusCombinedMultStart;\n            this.chorusCombinedMultDelta = (chorusCombinedMultEnd - chorusCombinedMultStart) / roundedSamplesPerTick;\n        }\n        if (usesFlanger) {\n            const flangerEnvelopeStart = envelopeStarts[58];\n            const flangerEnvelopeEnd = envelopeEnds[58];\n            let useFlangerStart = effect.flanger;\n            let useFlangerEnd = effect.flanger;\n            if (synth.isModActive(Config.modulators.dictionary[\"flanger\"].index, channelIndex, instrumentIndex)) {\n                useFlangerStart = synth.getModValue(Config.modulators.dictionary[\"flanger\"].index, channelIndex, instrumentIndex, false);\n                useFlangerEnd = synth.getModValue(Config.modulators.dictionary[\"flanger\"].index, channelIndex, instrumentIndex, true);\n            }\n            let flangerStart = Math.min(1.0, flangerEnvelopeStart * useFlangerStart / (Config.flangerRange - 1));\n            let flangerEnd = Math.min(1.0, flangerEnvelopeEnd * useFlangerEnd / (Config.flangerRange - 1));\n            const flangerSpeedEnvelopeStart = envelopeStarts[59];\n            const flangerSpeedEnvelopeEnd = envelopeEnds[59];\n            let useFlangerSpeedStart = effect.flangerSpeed;\n            let useFlangerSpeedEnd = effect.flangerSpeed;\n            if (synth.isModActive(Config.modulators.dictionary[\"flanger speed\"].index, channelIndex, instrumentIndex)) {\n                useFlangerSpeedStart = synth.getModValue(Config.modulators.dictionary[\"flanger speed\"].index, channelIndex, instrumentIndex, false);\n                useFlangerSpeedEnd = synth.getModValue(Config.modulators.dictionary[\"flanger speed\"].index, channelIndex, instrumentIndex, true);\n            }\n            let flangerSpeedStart = flangerSpeedEnvelopeStart * useFlangerSpeedStart + 2;\n            let flangerSpeedEnd = flangerSpeedEnvelopeEnd * useFlangerSpeedEnd + 2;\n            const flangerDepthEnvelopeStart = envelopeStarts[60];\n            const flangerDepthEnvelopeEnd = envelopeEnds[60];\n            let useFlangerDepthStart = effect.flangerDepth;\n            let useFlangerDepthEnd = effect.flangerDepth;\n            if (synth.isModActive(Config.modulators.dictionary[\"flanger depth\"].index, channelIndex, instrumentIndex)) {\n                useFlangerDepthStart = synth.getModValue(Config.modulators.dictionary[\"flanger depth\"].index, channelIndex, instrumentIndex, false);\n                useFlangerDepthEnd = synth.getModValue(Config.modulators.dictionary[\"flanger depth\"].index, channelIndex, instrumentIndex, true);\n            }\n            let flangerDepthStart = flangerDepthEnvelopeStart * useFlangerDepthStart * 2 + 2;\n            let flangerDepthEnd = flangerDepthEnvelopeEnd * useFlangerDepthEnd * 2 + 2;\n            const flangerFeedbackEnvelopeStart = envelopeStarts[61];\n            const flangerFeedbackEnvelopeEnd = envelopeEnds[61];\n            let useFlangerFeedbackStart = effect.flangerFeedback;\n            let useFlangerFeedbackEnd = effect.flangerFeedback;\n            if (synth.isModActive(Config.modulators.dictionary[\"flanger feedback\"].index, channelIndex, instrumentIndex)) {\n                useFlangerFeedbackStart = synth.getModValue(Config.modulators.dictionary[\"flanger feedback\"].index, channelIndex, instrumentIndex, false);\n                useFlangerFeedbackEnd = synth.getModValue(Config.modulators.dictionary[\"flanger feedback\"].index, channelIndex, instrumentIndex, true);\n            }\n            let flangerFeedbackStart = flangerFeedbackEnvelopeStart * useFlangerFeedbackStart * 1.5;\n            let flangerFeedbackEnd = flangerFeedbackEnvelopeEnd * useFlangerFeedbackEnd * 1.5;\n            this.flanger = flangerStart;\n            this.flangerDelta = (flangerEnd - flangerStart) / roundedSamplesPerTick;\n            this.flangerSpeed = flangerSpeedStart;\n            this.flangerSpeedDelta = (flangerSpeedEnd - flangerSpeedStart) / roundedSamplesPerTick;\n            this.flangerDepth = flangerDepthStart;\n            this.flangerDepthDelta = (flangerDepthEnd - flangerDepthStart) / roundedSamplesPerTick;\n            this.flangerFeedback = (Math.sqrt(flangerFeedbackStart) / Math.sqrt(Config.flangerFeedbackRange));\n            this.flangerFeedbackDelta = ((Math.sqrt(flangerFeedbackEnd) / Math.sqrt(Config.flangerFeedbackRange)) - (Math.sqrt(flangerFeedbackStart) / Math.sqrt(Config.flangerFeedbackRange))) / roundedSamplesPerTick;\n        }\n        if (usesRingModulation) {\n            let useRingModStart = effect.ringModulation;\n            let useRingModEnd = effect.ringModulation;\n            let useRingModEnvelopeStart = envelopeStarts[50];\n            let useRingModEnvelopeEnd = envelopeEnds[50];\n            let useRingModHzStart = Math.min(1.0, effect.ringModulationHz / (Config.ringModHzRange - 1));\n            let useRingModHzEnd = Math.min(1.0, effect.ringModulationHz / (Config.ringModHzRange - 1));\n            let useRingModHzEnvelopeStart = envelopeStarts[51];\n            let useRingModHzEnvelopeEnd = envelopeEnds[51];\n            if (synth.isModActive(Config.modulators.dictionary[\"ring modulation\"].index, channelIndex, instrumentIndex)) {\n                useRingModStart = (synth.getModValue(Config.modulators.dictionary[\"ring modulation\"].index, channelIndex, instrumentIndex, false));\n                useRingModEnd = (synth.getModValue(Config.modulators.dictionary[\"ring modulation\"].index, channelIndex, instrumentIndex, true));\n            }\n            if (synth.isModActive(Config.modulators.dictionary[\"ring mod hertz\"].index, channelIndex, instrumentIndex)) {\n                useRingModHzStart = Math.min(1.0, Math.max(0.0, (synth.getModValue(Config.modulators.dictionary[\"ring mod hertz\"].index, channelIndex, instrumentIndex, false)) / (Config.ringModHzRange - 1)));\n                useRingModHzEnd = Math.min(1.0, Math.max(0.0, (synth.getModValue(Config.modulators.dictionary[\"ring mod hertz\"].index, channelIndex, instrumentIndex, false)) / (Config.ringModHzRange - 1)));\n            }\n            useRingModHzStart *= useRingModHzEnvelopeStart;\n            useRingModHzEnd *= useRingModHzEnvelopeEnd;\n            let ringModStart = Math.min(1.0, (useRingModStart * useRingModEnvelopeStart) / (Config.ringModRange - 1));\n            let ringModEnd = Math.min(1.0, (useRingModEnd * useRingModEnvelopeEnd) / (Config.ringModRange - 1));\n            this.ringModMix = ringModStart;\n            this.ringModMixDelta = (ringModEnd - ringModStart) / roundedSamplesPerTick;\n            this.ringModHzOffset = effect.ringModHzOffset;\n            let ringModPhaseDeltaStart = (Math.max(0, calculateRingModHertz(useRingModHzStart))) / synth.samplesPerSecond;\n            let ringModPhaseDeltaEnd = (Math.max(0, calculateRingModHertz(useRingModHzEnd))) / synth.samplesPerSecond;\n            this.ringModMixFadeDelta = 0;\n            if (this.ringModMixFade < 0)\n                this.ringModMixFade = 0;\n            if (ringModPhaseDeltaStart <= 0 && ringModPhaseDeltaEnd <= 0 && this.ringModMixFade != 0) {\n                this.ringModMixFadeDelta = this.ringModMixFade / -10;\n            }\n            else if (ringModPhaseDeltaStart > 0 && ringModPhaseDeltaEnd > 0) {\n                this.ringModMixFade = 1.0;\n            }\n            this.ringModPhaseDelta = ringModPhaseDeltaStart;\n            this.ringModPhaseDeltaScale = ringModPhaseDeltaStart == 0 ? 1 : Math.pow(ringModPhaseDeltaEnd / ringModPhaseDeltaStart, 1.0 / roundedSamplesPerTick);\n            this.ringModWaveformIndex = effect.ringModWaveformIndex;\n            this.ringModPulseWidth = effect.ringModPulseWidth;\n        }\n        let maxEchoMult = 0.0;\n        let averageEchoDelaySeconds = 0.0;\n        if (usesEcho) {\n            const echoSustainEnvelopeStart = envelopeStarts[47];\n            const echoSustainEnvelopeEnd = envelopeEnds[47];\n            let useEchoSustainStart = effect.echoSustain;\n            let useEchoSustainEnd = effect.echoSustain;\n            if (synth.isModActive(Config.modulators.dictionary[\"echo\"].index, channelIndex, instrumentIndex)) {\n                useEchoSustainStart = Math.max(0.0, synth.getModValue(Config.modulators.dictionary[\"echo\"].index, channelIndex, instrumentIndex, false));\n                useEchoSustainEnd = Math.max(0.0, synth.getModValue(Config.modulators.dictionary[\"echo\"].index, channelIndex, instrumentIndex, true));\n            }\n            const echoMultStart = Math.min(1.0, Math.pow(echoSustainEnvelopeStart * useEchoSustainStart / Config.echoSustainRange, 1.1)) * 0.9;\n            const echoMultEnd = Math.min(1.0, Math.pow(echoSustainEnvelopeEnd * useEchoSustainEnd / Config.echoSustainRange, 1.1)) * 0.9;\n            this.echoMult = echoMultStart;\n            this.echoMultDelta = Math.max(0.0, (echoMultEnd - echoMultStart) / roundedSamplesPerTick);\n            maxEchoMult = Math.max(echoMultStart, echoMultEnd);\n            const echoDelayEnvelopeStart = envelopeStarts[56];\n            const echoDelayEnvelopeEnd = envelopeEnds[56];\n            let useEchoDelayStart = effect.echoDelay * echoDelayEnvelopeStart;\n            let useEchoDelayEnd = effect.echoDelay * echoDelayEnvelopeEnd;\n            if (synth.isModActive(Config.modulators.dictionary[\"echo delay\"].index, channelIndex, instrumentIndex)) {\n                useEchoDelayStart = synth.getModValue(Config.modulators.dictionary[\"echo delay\"].index, channelIndex, instrumentIndex, false) * echoDelayEnvelopeStart;\n                useEchoDelayEnd = synth.getModValue(Config.modulators.dictionary[\"echo delay\"].index, channelIndex, instrumentIndex, true) * echoDelayEnvelopeEnd;\n            }\n            const tmpEchoDelayOffsetStart = Math.round((useEchoDelayStart + 1) * Config.echoDelayStepTicks * samplesPerTick);\n            const tmpEchoDelayOffsetEnd = Math.round((useEchoDelayEnd + 1) * Config.echoDelayStepTicks * samplesPerTick);\n            if (this.echoDelayOffsetEnd != null) {\n                this.echoDelayOffsetStart = this.echoDelayOffsetEnd;\n            }\n            else {\n                this.echoDelayOffsetStart = tmpEchoDelayOffsetStart;\n            }\n            this.echoDelayOffsetEnd = tmpEchoDelayOffsetEnd;\n            averageEchoDelaySeconds = (this.echoDelayOffsetStart + this.echoDelayOffsetEnd) * 0.5 / samplesPerSecond;\n            this.echoDelayOffsetRatio = 0.0;\n            this.echoDelayOffsetRatioDelta = 1.0 / roundedSamplesPerTick;\n            this.echoPingPong = ((effect.echoPingPong / Config.panMax) - 0.5) * 2;\n            const shelfRadians = 2.0 * Math.PI * Config.echoShelfHz / synth.samplesPerSecond;\n            Synth.tempFilterStartCoefficients.highShelf1stOrder(shelfRadians, Config.echoShelfGain);\n            this.echoShelfA1 = Synth.tempFilterStartCoefficients.a[1];\n            this.echoShelfB0 = Synth.tempFilterStartCoefficients.b[0];\n            this.echoShelfB1 = Synth.tempFilterStartCoefficients.b[1];\n        }\n        let maxReverbMult = 0.0;\n        if (usesReverb) {\n            const reverbEnvelopeStart = envelopeStarts[48];\n            const reverbEnvelopeEnd = envelopeEnds[48];\n            let useReverbStart = effect.reverb;\n            let useReverbEnd = effect.reverb;\n            if (synth.isModActive(Config.modulators.dictionary[\"reverb\"].index, channelIndex, instrumentIndex)) {\n                useReverbStart = synth.getModValue(Config.modulators.dictionary[\"reverb\"].index, channelIndex, instrumentIndex, false);\n                useReverbEnd = synth.getModValue(Config.modulators.dictionary[\"reverb\"].index, channelIndex, instrumentIndex, true);\n            }\n            if (synth.isModActive(Config.modulators.dictionary[\"song reverb\"].index, channelIndex, instrumentIndex)) {\n                useReverbStart *= (synth.getModValue(Config.modulators.dictionary[\"song reverb\"].index, undefined, undefined, false) - Config.modulators.dictionary[\"song reverb\"].convertRealFactor) / Config.reverbRange;\n                useReverbEnd *= (synth.getModValue(Config.modulators.dictionary[\"song reverb\"].index, undefined, undefined, true) - Config.modulators.dictionary[\"song reverb\"].convertRealFactor) / Config.reverbRange;\n            }\n            const reverbStart = Math.min(1.0, Math.pow(reverbEnvelopeStart * useReverbStart / Config.reverbRange, 0.667)) * 0.425;\n            const reverbEnd = Math.min(1.0, Math.pow(reverbEnvelopeEnd * useReverbEnd / Config.reverbRange, 0.667)) * 0.425;\n            this.reverbMult = reverbStart;\n            this.reverbMultDelta = (reverbEnd - reverbStart) / roundedSamplesPerTick;\n            maxReverbMult = Math.max(reverbStart, reverbEnd);\n            const shelfRadians = 2.0 * Math.PI * Config.reverbShelfHz / synth.samplesPerSecond;\n            Synth.tempFilterStartCoefficients.highShelf1stOrder(shelfRadians, Config.reverbShelfGain);\n            this.reverbShelfA1 = Synth.tempFilterStartCoefficients.a[1];\n            this.reverbShelfB0 = Synth.tempFilterStartCoefficients.b[0];\n            this.reverbShelfB1 = Synth.tempFilterStartCoefficients.b[1];\n        }\n        if (!instrumentState.tonesAddedInThisTick && !instrumentState.flushingDelayLines) {\n            const attenuationThreshold = 1.0 / 256.0;\n            const halfLifeMult = -Math.log2(attenuationThreshold);\n            if (usesChorus) {\n                instrumentState.delayDuration += Config.chorusMaxDelay;\n            }\n            if (usesFlanger) {\n                instrumentState.delayDuration += Config.flangerMaxDelay;\n            }\n            if (usesEcho) {\n                const attenuationPerSecond = Math.pow(maxEchoMult, 1.0 / averageEchoDelaySeconds);\n                const halfLife = -1.0 / Math.log2(attenuationPerSecond);\n                const echoDuration = halfLife * halfLifeMult;\n                instrumentState.delayDuration += echoDuration;\n            }\n            if (usesReverb) {\n                const averageMult = maxReverbMult * 2.0;\n                const averageReverbDelaySeconds = (Config.reverbDelayBufferSize / 4.0) / samplesPerSecond;\n                const attenuationPerSecond = Math.pow(averageMult, 1.0 / averageReverbDelaySeconds);\n                const halfLife = -1.0 / Math.log2(attenuationPerSecond);\n                const reverbDuration = halfLife * halfLifeMult;\n                instrumentState.delayDuration += reverbDuration;\n            }\n            if (usesGranular) {\n                this.computeGrains = false;\n            }\n        }\n        else {\n            if (usesChorus)\n                instrumentState.totalDelaySamples += synth.chorusDelayBufferSize;\n            if (usesFlanger)\n                instrumentState.totalDelaySamples += synth.flangerDelayBufferSize;\n            if (usesEcho)\n                instrumentState.totalDelaySamples += this.echoDelayLineL.length;\n            if (usesReverb)\n                instrumentState.totalDelaySamples += Config.reverbDelayBufferSize;\n            if (usesGranular)\n                instrumentState.totalDelaySamples += this.granularMaximumDelayTimeInSeconds;\n        }\n    }\n}\n//# sourceMappingURL=EffectState.js.map","const PRIME32_1 = 2654435761;\nconst PRIME32_2 = 2246822519;\nconst PRIME32_3 = 3266489917;\nconst PRIME32_4 = 668265263;\nconst PRIME32_5 = 374761393;\nlet encoder;\n/**\n *\n * @param input - byte array or string\n * @param seed - optional seed (32-bit unsigned);\n */\nexport function xxHash32(input, seed = 0) {\n    const buffer = typeof input === 'string' ? (encoder ??= new TextEncoder()).encode(input) : input;\n    const b = buffer;\n    /*\n        Step 1. Initialize internal accumulators\n        Each accumulator gets an initial value based on optional seed input. Since the seed is optional, it can be 0.\n\n        ```\n            u32 acc1 = seed + PRIME32_1 + PRIME32_2;\n            u32 acc2 = seed + PRIME32_2;\n            u32 acc3 = seed + 0;\n            u32 acc4 = seed - PRIME32_1;\n        ```\n        Special case : input is less than 16 bytes\n        When input is too small (< 16 bytes), the algorithm will not process any stripe. Consequently, it will not\n        make use of parallel accumulators.\n\n        In which case, a simplified initialization is performed, using a single accumulator :\n\n        u32 acc  = seed + PRIME32_5;\n        The algorithm then proceeds directly to step 4.\n    */\n    let acc = (seed + PRIME32_5) & 0xffffffff;\n    let offset = 0;\n    if (b.length >= 16) {\n        const accN = [\n            (seed + PRIME32_1 + PRIME32_2) & 0xffffffff,\n            (seed + PRIME32_2) & 0xffffffff,\n            (seed + 0) & 0xffffffff,\n            (seed - PRIME32_1) & 0xffffffff,\n        ];\n        /*\n            Step 2. Process stripes\n            A stripe is a contiguous segment of 16 bytes. It is evenly divided into 4 lanes, of 4 bytes each.\n            The first lane is used to update accumulator 1, the second lane is used to update accumulator 2, and so on.\n\n            Each lane read its associated 32-bit value using little-endian convention.\n\n            For each {lane, accumulator}, the update process is called a round, and applies the following formula :\n\n            ```\n            accN = accN + (laneN * PRIME32_2);\n            accN = accN <<< 13;\n            accN = accN * PRIME32_1;\n            ```\n\n            This shuffles the bits so that any bit from input lane impacts several bits in output accumulator.\n            All operations are performed modulo 2^32.\n\n            Input is consumed one full stripe at a time. Step 2 is looped as many times as necessary to consume\n            the whole input, except the last remaining bytes which cannot form a stripe (< 16 bytes). When that\n            happens, move to step 3.\n        */\n        const b = buffer;\n        const limit = b.length - 16;\n        let lane = 0;\n        for (offset = 0; (offset & 0xfffffff0) <= limit; offset += 4) {\n            const i = offset;\n            const laneN0 = b[i + 0] + (b[i + 1] << 8);\n            const laneN1 = b[i + 2] + (b[i + 3] << 8);\n            const laneNP = laneN0 * PRIME32_2 + ((laneN1 * PRIME32_2) << 16);\n            let acc = (accN[lane] + laneNP) & 0xffffffff;\n            acc = (acc << 13) | (acc >>> 19);\n            const acc0 = acc & 0xffff;\n            const acc1 = acc >>> 16;\n            accN[lane] = (acc0 * PRIME32_1 + ((acc1 * PRIME32_1) << 16)) & 0xffffffff;\n            lane = (lane + 1) & 0x3;\n        }\n        /*\n            Step 3. Accumulator convergence\n            All 4 lane accumulators from previous steps are merged to produce a single remaining accumulator\n            of same width (32-bit). The associated formula is as follows :\n\n            ```\n            acc = (acc1 <<< 1) + (acc2 <<< 7) + (acc3 <<< 12) + (acc4 <<< 18);\n            ```\n        */\n        acc =\n            (((accN[0] << 1) | (accN[0] >>> 31)) +\n                ((accN[1] << 7) | (accN[1] >>> 25)) +\n                ((accN[2] << 12) | (accN[2] >>> 20)) +\n                ((accN[3] << 18) | (accN[3] >>> 14))) &\n                0xffffffff;\n    }\n    /*\n        Step 4. Add input length\n        The input total length is presumed known at this stage. This step is just about adding the length to\n        accumulator, so that it participates to final mixing.\n\n        ```\n        acc = acc + (u32)inputLength;\n        ```\n    */\n    acc = (acc + buffer.length) & 0xffffffff;\n    /*\n        Step 5. Consume remaining input\n        There may be up to 15 bytes remaining to consume from the input. The final stage will digest them according\n        to following pseudo-code :\n        ```\n        while (remainingLength >= 4) {\n            lane = read_32bit_little_endian(input_ptr);\n            acc = acc + lane * PRIME32_3;\n            acc = (acc <<< 17) * PRIME32_4;\n            input_ptr += 4; remainingLength -= 4;\n        }\n        ```\n        This process ensures that all input bytes are present in the final mix.\n    */\n    const limit = buffer.length - 4;\n    for (; offset <= limit; offset += 4) {\n        const i = offset;\n        const laneN0 = b[i + 0] + (b[i + 1] << 8);\n        const laneN1 = b[i + 2] + (b[i + 3] << 8);\n        const laneP = laneN0 * PRIME32_3 + ((laneN1 * PRIME32_3) << 16);\n        acc = (acc + laneP) & 0xffffffff;\n        acc = (acc << 17) | (acc >>> 15);\n        acc = ((acc & 0xffff) * PRIME32_4 + (((acc >>> 16) * PRIME32_4) << 16)) & 0xffffffff;\n    }\n    /*\n        ```\n        while (remainingLength >= 1) {\n            lane = read_byte(input_ptr);\n            acc = acc + lane * PRIME32_5;\n            acc = (acc <<< 11) * PRIME32_1;\n            input_ptr += 1; remainingLength -= 1;\n        }\n        ```\n    */\n    for (; offset < b.length; ++offset) {\n        const lane = b[offset];\n        acc = acc + lane * PRIME32_5;\n        acc = (acc << 11) | (acc >>> 21);\n        acc = ((acc & 0xffff) * PRIME32_1 + (((acc >>> 16) * PRIME32_1) << 16)) & 0xffffffff;\n    }\n    /*\n        Step 6. Final mix (avalanche)\n        The final mix ensures that all input bits have a chance to impact any bit in the output digest,\n        resulting in an unbiased distribution. This is also called avalanche effect.\n        ```\n        acc = acc xor (acc >> 15);\n        acc = acc * PRIME32_2;\n        acc = acc xor (acc >> 13);\n        acc = acc * PRIME32_3;\n        acc = acc xor (acc >> 16);\n        ```\n    */\n    acc = acc ^ (acc >>> 15);\n    acc = (((acc & 0xffff) * PRIME32_2) & 0xffffffff) + (((acc >>> 16) * PRIME32_2) << 16);\n    acc = acc ^ (acc >>> 13);\n    acc = (((acc & 0xffff) * PRIME32_3) & 0xffffffff) + (((acc >>> 16) * PRIME32_3) << 16);\n    acc = acc ^ (acc >>> 16);\n    // turn any negatives back into a positive number;\n    return acc < 0 ? acc + 4294967296 : acc;\n}\n//# sourceMappingURL=xxHash32.js.map","import { Config, getArpeggioPitchIndex } from \"./SynthConfig\";\nimport { Synth } from \"./synth\";\nimport { xxHash32 } from \"js-xxhash\";\nexport class EnvelopeComputer {\n    constructor() {\n        this.noteSecondsStart = [];\n        this.noteSecondsStartUnscaled = 0.0;\n        this.noteSecondsEnd = [];\n        this.noteSecondsEndUnscaled = 0.0;\n        this.noteTicksStart = 0.0;\n        this.noteTicksEnd = 0.0;\n        this.noteSizeStart = Config.noteSizeMax;\n        this.noteSizeEnd = Config.noteSizeMax;\n        this.prevNoteSize = Config.noteSizeMax;\n        this.nextNoteSize = Config.noteSizeMax;\n        this._noteSizeFinal = Config.noteSizeMax;\n        this.prevNoteSecondsStart = [];\n        this.prevNoteSecondsStartUnscaled = 0.0;\n        this.prevNoteSecondsEnd = [];\n        this.prevNoteSecondsEndUnscaled = 0.0;\n        this.prevNoteTicksStart = 0.0;\n        this.prevNoteTicksEnd = 0.0;\n        this._prevNoteSizeFinal = Config.noteSizeMax;\n        this.tickTimeEnd = [];\n        this.drumsetFilterEnvelopeStart = 0.0;\n        this.drumsetFilterEnvelopeEnd = 0.0;\n        this.prevSlideStart = false;\n        this.prevSlideEnd = false;\n        this.nextSlideStart = false;\n        this.nextSlideEnd = false;\n        this.prevSlideRatioStart = 0.0;\n        this.prevSlideRatioEnd = 0.0;\n        this.nextSlideRatioStart = 0.0;\n        this.nextSlideRatioEnd = 0.0;\n        this.startPinTickAbsolute = null;\n        this.startPinTickDefaultPitch = null;\n        this.startPinTickPitch = null;\n        this.envelopeStarts = [];\n        this.envelopeEnds = [];\n        this._modifiedEnvelopeIndices = [];\n        this._modifiedEnvelopeCount = 0;\n        this.lowpassCutoffDecayVolumeCompensation = 1.0;\n        const length = 62;\n        for (let i = 0; i < length; i++) {\n            this.envelopeStarts[i] = 1.0;\n            this.envelopeEnds[i] = 1.0;\n        }\n        this.reset();\n    }\n    reset() {\n        for (let envelopeIndex = 0; envelopeIndex < Config.maxEnvelopeCount + 1; envelopeIndex++) {\n            this.noteSecondsEnd[envelopeIndex] = 0.0;\n            this.prevNoteSecondsEnd[envelopeIndex] = 0.0;\n        }\n        this.noteSecondsEndUnscaled = 0.0;\n        this.noteTicksEnd = 0.0;\n        this._noteSizeFinal = Config.noteSizeMax;\n        this.prevNoteSecondsEndUnscaled = 0.0;\n        this.prevNoteTicksEnd = 0.0;\n        this._prevNoteSizeFinal = Config.noteSizeMax;\n        this._modifiedEnvelopeCount = 0;\n        this.drumsetFilterEnvelopeStart = 0.0;\n        this.drumsetFilterEnvelopeEnd = 0.0;\n        this.startPinTickAbsolute = null;\n        this.startPinTickDefaultPitch = null;\n        this.startPinTickPitch = null;\n    }\n    computeEnvelopes(instrument, currentPart, tickTimeStart, tickTimeStartReal, secondsPerTick, tone, timeScale, instrumentState, synth, channelIndex, instrumentIndex) {\n        const secondsPerTickUnscaled = secondsPerTick;\n        const transition = instrument.getTransition();\n        if (tone != null && tone.atNoteStart && !transition.continues && !tone.forceContinueAtStart) {\n            this.prevNoteSecondsEndUnscaled = this.noteSecondsEndUnscaled;\n            this.prevNoteTicksEnd = this.noteTicksEnd;\n            this._prevNoteSizeFinal = this._noteSizeFinal;\n            this.noteSecondsEndUnscaled = 0.0;\n            this.noteTicksEnd = 0.0;\n            for (let envelopeIndex = 0; envelopeIndex < Config.maxEnvelopeCount + 1; envelopeIndex++) {\n                this.prevNoteSecondsEnd[envelopeIndex] = this.noteSecondsEnd[envelopeIndex];\n                this.noteSecondsEnd[envelopeIndex] = 0.0;\n            }\n        }\n        if (tone != null) {\n            if (tone.note != null) {\n                this._noteSizeFinal = tone.note.pins[tone.note.pins.length - 1].size;\n            }\n            else {\n                this._noteSizeFinal = Config.noteSizeMax;\n            }\n        }\n        const tickTimeEnd = [];\n        const tickTimeEndReal = tickTimeStartReal + 1.0;\n        const noteSecondsStart = [];\n        const noteSecondsStartUnscaled = this.noteSecondsEndUnscaled;\n        const noteSecondsEnd = [];\n        const noteSecondsEndUnscaled = noteSecondsStartUnscaled + secondsPerTickUnscaled;\n        const noteTicksStart = this.noteTicksEnd;\n        const noteTicksEnd = noteTicksStart + 1.0;\n        const prevNoteSecondsStart = [];\n        const prevNoteSecondsEnd = [];\n        const prevNoteSecondsStartUnscaled = this.prevNoteSecondsEndUnscaled;\n        const prevNoteSecondsEndUnscaled = prevNoteSecondsStartUnscaled + secondsPerTickUnscaled;\n        const prevNoteTicksStart = this.prevNoteTicksEnd;\n        const prevNoteTicksEnd = prevNoteTicksStart + 1.0;\n        const beatsPerTick = 1.0 / (Config.ticksPerPart * Config.partsPerBeat);\n        const beatTimeStart = [];\n        const beatTimeEnd = [];\n        let noteSizeStart = this._noteSizeFinal;\n        let noteSizeEnd = this._noteSizeFinal;\n        let prevNoteSize = this._prevNoteSizeFinal;\n        let nextNoteSize = 0;\n        let prevSlideStart = false;\n        let prevSlideEnd = false;\n        let nextSlideStart = false;\n        let nextSlideEnd = false;\n        let prevSlideRatioStart = 0.0;\n        let prevSlideRatioEnd = 0.0;\n        let nextSlideRatioStart = 0.0;\n        let nextSlideRatioEnd = 0.0;\n        if (tone == null) {\n            this.startPinTickAbsolute = null;\n            this.startPinTickDefaultPitch = null;\n        }\n        if (tone != null && tone.note != null && !tone.passedEndOfNote) {\n            const endPinIndex = tone.note.getEndPinIndex(currentPart);\n            const startPin = tone.note.pins[endPinIndex - 1];\n            const endPin = tone.note.pins[endPinIndex];\n            const startPinTick = (tone.note.start + startPin.time) * Config.ticksPerPart;\n            if (this.startPinTickAbsolute == null || (!(transition.continues || transition.slides)) && tone.passedEndOfNote)\n                this.startPinTickAbsolute = startPinTick + synth.computeTicksSinceStart(true);\n            if (this.startPinTickDefaultPitch == null || tone.passedEndOfNote)\n                this.startPinTickDefaultPitch = this.getPitchValue(instrument, tone, instrumentState, false);\n            if (!tone.passedEndOfNote)\n                this.startPinTickPitch = this.getPitchValue(instrument, tone, instrumentState, true);\n            const endPinTick = (tone.note.start + endPin.time) * Config.ticksPerPart;\n            const ratioStart = (tickTimeStartReal - startPinTick) / (endPinTick - startPinTick);\n            const ratioEnd = (tickTimeEndReal - startPinTick) / (endPinTick - startPinTick);\n            noteSizeStart = startPin.size + (endPin.size - startPin.size) * ratioStart;\n            noteSizeEnd = startPin.size + (endPin.size - startPin.size) * ratioEnd;\n            if (transition.slides) {\n                const noteStartTick = tone.noteStartPart * Config.ticksPerPart;\n                const noteEndTick = tone.noteEndPart * Config.ticksPerPart;\n                const noteLengthTicks = noteEndTick - noteStartTick;\n                const maximumSlideTicks = noteLengthTicks * 0.5;\n                const slideTicks = Math.min(maximumSlideTicks, transition.slideTicks);\n                if (tone.prevNote != null && !tone.forceContinueAtStart) {\n                    if (tickTimeStartReal - noteStartTick < slideTicks) {\n                        prevSlideStart = true;\n                        prevSlideRatioStart = 0.5 * (1.0 - (tickTimeStartReal - noteStartTick) / slideTicks);\n                    }\n                    if (tickTimeEndReal - noteStartTick < slideTicks) {\n                        prevSlideEnd = true;\n                        prevSlideRatioEnd = 0.5 * (1.0 - (tickTimeEndReal - noteStartTick) / slideTicks);\n                    }\n                }\n                if (tone.nextNote != null && !tone.forceContinueAtEnd) {\n                    nextNoteSize = tone.nextNote.pins[0].size;\n                    if (noteEndTick - tickTimeStartReal < slideTicks) {\n                        nextSlideStart = true;\n                        nextSlideRatioStart = 0.5 * (1.0 - (noteEndTick - tickTimeStartReal) / slideTicks);\n                    }\n                    if (noteEndTick - tickTimeEndReal < slideTicks) {\n                        nextSlideEnd = true;\n                        nextSlideRatioEnd = 0.5 * (1.0 - (noteEndTick - tickTimeEndReal) / slideTicks);\n                    }\n                }\n            }\n        }\n        let lowpassCutoffDecayVolumeCompensation = 1.0;\n        let usedNoteSize = false;\n        for (let envelopeIndex = 0; envelopeIndex <= instrument.envelopeCount; envelopeIndex++) {\n            let automationTarget;\n            let targetIndex;\n            let envelope;\n            let inverse = false;\n            let isDiscrete = false;\n            let perEnvelopeSpeed = 1;\n            let globalEnvelopeSpeed = 1;\n            let envelopeSpeed = perEnvelopeSpeed * globalEnvelopeSpeed;\n            let perEnvelopeLowerBound = 0;\n            let perEnvelopeUpperBound = 1;\n            let timeSinceStart = 0;\n            let steps = 2;\n            let seed = 2;\n            let waveform = 0;\n            let startPinTickAbsolute = this.startPinTickAbsolute || 0.0;\n            let defaultPitch = this.startPinTickDefaultPitch || 0.0;\n            if (envelopeIndex == instrument.envelopeCount) {\n                if (usedNoteSize)\n                    break;\n                automationTarget = Config.instrumentAutomationTargets.dictionary[\"noteVolume\"];\n                targetIndex = 0;\n                envelope = Config.newEnvelopes.dictionary[\"note size\"];\n            }\n            else {\n                let envelopeSettings = instrument.envelopes[envelopeIndex];\n                automationTarget = Config.instrumentAutomationTargets[envelopeSettings.target];\n                targetIndex = envelopeSettings.index;\n                envelope = Config.newEnvelopes[envelopeSettings.envelope];\n                inverse = instrument.envelopes[envelopeIndex].inverse;\n                isDiscrete = instrument.envelopes[envelopeIndex].discrete;\n                perEnvelopeSpeed = instrument.envelopes[envelopeIndex].perEnvelopeSpeed;\n                globalEnvelopeSpeed = Math.pow(instrument.envelopeSpeed, 2) / 144;\n                envelopeSpeed = perEnvelopeSpeed * globalEnvelopeSpeed;\n                perEnvelopeLowerBound = instrument.envelopes[envelopeIndex].perEnvelopeLowerBound;\n                perEnvelopeUpperBound = instrument.envelopes[envelopeIndex].perEnvelopeUpperBound;\n                if (synth.isModActive(Config.modulators.dictionary[\"individual envelope lower bound\"].index, channelIndex, instrumentIndex) && instrument.envelopes[envelopeIndex].tempEnvelopeLowerBound != null) {\n                    perEnvelopeLowerBound = instrument.envelopes[envelopeIndex].tempEnvelopeLowerBound;\n                }\n                if (synth.isModActive(Config.modulators.dictionary[\"individual envelope upper bound\"].index, channelIndex, instrumentIndex) && instrument.envelopes[envelopeIndex].tempEnvelopeUpperBound != null) {\n                    perEnvelopeUpperBound = instrument.envelopes[envelopeIndex].tempEnvelopeUpperBound;\n                }\n                if (!(perEnvelopeLowerBound <= perEnvelopeUpperBound)) {\n                    perEnvelopeLowerBound = 0;\n                    perEnvelopeUpperBound = 1;\n                }\n                timeSinceStart = synth.computeTicksSinceStart();\n                steps = instrument.envelopes[envelopeIndex].steps;\n                seed = instrument.envelopes[envelopeIndex].seed;\n                if (instrument.envelopes[envelopeIndex].waveform >= (envelope.name == \"lfo\" ? 7 : 4)) {\n                    instrument.envelopes[envelopeIndex].waveform = 0;\n                }\n                waveform = instrument.envelopes[envelopeIndex].waveform;\n                if (!timeScale[envelopeIndex])\n                    timeScale[envelopeIndex] = 0;\n                const secondsPerTickScaled = secondsPerTick * timeScale[envelopeIndex];\n                if (!tickTimeStart[envelopeIndex])\n                    tickTimeStart[envelopeIndex] = 0;\n                tickTimeEnd[envelopeIndex] = tickTimeStart[envelopeIndex] ? tickTimeStart[envelopeIndex] + timeScale[envelopeIndex] : timeScale[envelopeIndex];\n                noteSecondsStart[envelopeIndex] = this.noteSecondsEnd[envelopeIndex] ? this.noteSecondsEnd[envelopeIndex] : 0;\n                prevNoteSecondsStart[envelopeIndex] = this.prevNoteSecondsEnd[envelopeIndex] ? this.prevNoteSecondsEnd[envelopeIndex] : 0;\n                noteSecondsEnd[envelopeIndex] = noteSecondsStart[envelopeIndex] ? noteSecondsStart[envelopeIndex] + secondsPerTickScaled : secondsPerTickScaled;\n                prevNoteSecondsEnd[envelopeIndex] = prevNoteSecondsStart[envelopeIndex] ? prevNoteSecondsStart[envelopeIndex] + secondsPerTickScaled : secondsPerTickScaled;\n                beatTimeStart[envelopeIndex] = tickTimeStart[envelopeIndex] ? beatsPerTick * tickTimeStart[envelopeIndex] : beatsPerTick;\n                beatTimeEnd[envelopeIndex] = tickTimeEnd[envelopeIndex] ? beatsPerTick * tickTimeEnd[envelopeIndex] : beatsPerTick;\n                if (envelope.type == 1)\n                    usedNoteSize = true;\n            }\n            const pitch = (envelope.type == 2) ? this.computePitchEnvelope(instrument, envelopeIndex, (this.startPinTickPitch || this.getPitchValue(instrument, tone, instrumentState, true))) : 0;\n            if (automationTarget.computeIndex != null) {\n                const computeIndex = automationTarget.computeIndex + targetIndex;\n                let envelopeStart = EnvelopeComputer.computeEnvelope(envelope, envelopeSpeed, globalEnvelopeSpeed, noteSecondsStartUnscaled, noteSecondsStart[envelopeIndex], beatTimeStart[envelopeIndex], timeSinceStart, noteSizeStart, pitch, inverse, perEnvelopeLowerBound, perEnvelopeUpperBound, false, steps, seed, waveform, defaultPitch, startPinTickAbsolute);\n                if (prevSlideStart) {\n                    const other = EnvelopeComputer.computeEnvelope(envelope, envelopeSpeed, globalEnvelopeSpeed, prevNoteSecondsStartUnscaled, prevNoteSecondsStart[envelopeIndex], beatTimeStart[envelopeIndex], timeSinceStart, prevNoteSize, pitch, inverse, perEnvelopeLowerBound, perEnvelopeUpperBound, false, steps, seed, waveform, defaultPitch, startPinTickAbsolute);\n                    envelopeStart += (other - envelopeStart) * prevSlideRatioStart;\n                }\n                if (nextSlideStart) {\n                    const other = EnvelopeComputer.computeEnvelope(envelope, envelopeSpeed, globalEnvelopeSpeed, 0.0, 0.0, beatTimeStart[envelopeIndex], timeSinceStart, nextNoteSize, pitch, inverse, perEnvelopeLowerBound, perEnvelopeUpperBound, false, steps, seed, waveform, defaultPitch, startPinTickAbsolute);\n                    envelopeStart += (other - envelopeStart) * nextSlideRatioStart;\n                }\n                let envelopeEnd = envelopeStart;\n                if (isDiscrete == false) {\n                    envelopeEnd = EnvelopeComputer.computeEnvelope(envelope, envelopeSpeed, globalEnvelopeSpeed, noteSecondsEndUnscaled, noteSecondsEnd[envelopeIndex], beatTimeEnd[envelopeIndex], timeSinceStart, noteSizeEnd, pitch, inverse, perEnvelopeLowerBound, perEnvelopeUpperBound, false, steps, seed, waveform, defaultPitch, startPinTickAbsolute);\n                    if (prevSlideEnd) {\n                        const other = EnvelopeComputer.computeEnvelope(envelope, envelopeSpeed, globalEnvelopeSpeed, prevNoteSecondsEndUnscaled, prevNoteSecondsEnd[envelopeIndex], beatTimeEnd[envelopeIndex], timeSinceStart, prevNoteSize, pitch, inverse, perEnvelopeLowerBound, perEnvelopeUpperBound, false, steps, seed, waveform, defaultPitch, startPinTickAbsolute);\n                        envelopeEnd += (other - envelopeEnd) * prevSlideRatioEnd;\n                    }\n                    if (nextSlideEnd) {\n                        const other = EnvelopeComputer.computeEnvelope(envelope, envelopeSpeed, globalEnvelopeSpeed, 0.0, 0.0, beatTimeEnd[envelopeIndex], timeSinceStart, nextNoteSize, pitch, inverse, perEnvelopeLowerBound, perEnvelopeUpperBound, false, steps, seed, waveform, defaultPitch, startPinTickAbsolute);\n                        envelopeEnd += (other - envelopeEnd) * nextSlideRatioEnd;\n                    }\n                }\n                this.envelopeStarts[computeIndex] *= envelopeStart;\n                this.envelopeEnds[computeIndex] *= envelopeEnd;\n                this._modifiedEnvelopeIndices[this._modifiedEnvelopeCount++] = computeIndex;\n                if (automationTarget.isFilter) {\n                    const filterSettings = (instrument.tmpNoteFilterStart != null) ? instrument.tmpNoteFilterStart : instrument.noteFilter;\n                    if (filterSettings.controlPointCount > targetIndex && filterSettings.controlPoints[targetIndex].type == 0) {\n                        lowpassCutoffDecayVolumeCompensation = Math.max(lowpassCutoffDecayVolumeCompensation, EnvelopeComputer.getLowpassCutoffDecayVolumeCompensation(envelope, perEnvelopeSpeed));\n                    }\n                }\n            }\n        }\n        this.noteSecondsStartUnscaled = noteSecondsStartUnscaled;\n        this.noteSecondsEndUnscaled = noteSecondsEndUnscaled;\n        this.noteTicksStart = noteTicksStart;\n        this.noteTicksEnd = noteTicksEnd;\n        this.prevNoteSecondsStartUnscaled = prevNoteSecondsStartUnscaled;\n        this.prevNoteSecondsEndUnscaled = prevNoteSecondsEndUnscaled;\n        this.prevNoteTicksStart = prevNoteTicksStart;\n        this.prevNoteTicksEnd = prevNoteTicksEnd;\n        for (let envelopeIndex = 0; envelopeIndex < Config.maxEnvelopeCount + 1; envelopeIndex++) {\n            this.noteSecondsStart[envelopeIndex] = noteSecondsStart[envelopeIndex];\n            this.noteSecondsEnd[envelopeIndex] = noteSecondsEnd[envelopeIndex];\n            this.prevNoteSecondsStart[envelopeIndex] = prevNoteSecondsStart[envelopeIndex];\n            this.prevNoteSecondsEnd[envelopeIndex] = prevNoteSecondsEnd[envelopeIndex];\n        }\n        this.prevNoteSize = prevNoteSize;\n        this.nextNoteSize = nextNoteSize;\n        this.noteSizeStart = noteSizeStart;\n        this.noteSizeEnd = noteSizeEnd;\n        this.prevSlideStart = prevSlideStart;\n        this.prevSlideEnd = prevSlideEnd;\n        this.nextSlideStart = nextSlideStart;\n        this.nextSlideEnd = nextSlideEnd;\n        this.prevSlideRatioStart = prevSlideRatioStart;\n        this.prevSlideRatioEnd = prevSlideRatioEnd;\n        this.nextSlideRatioStart = nextSlideRatioStart;\n        this.nextSlideRatioEnd = nextSlideRatioEnd;\n        this.lowpassCutoffDecayVolumeCompensation = lowpassCutoffDecayVolumeCompensation;\n    }\n    clearEnvelopes() {\n        for (let envelopeIndex = 0; envelopeIndex < this._modifiedEnvelopeCount; envelopeIndex++) {\n            const computeIndex = this._modifiedEnvelopeIndices[envelopeIndex];\n            this.envelopeStarts[computeIndex] = 1.0;\n            this.envelopeEnds[computeIndex] = 1.0;\n        }\n        this._modifiedEnvelopeCount = 0;\n    }\n    static computeEnvelope(envelope, perEnvelopeSpeed, globalEnvelopeSpeed, unspedTime, time, beats, timeSinceStart, noteSize, pitch, inverse, perEnvelopeLowerBound, perEnvelopeUpperBound, isDrumset = false, steps, seed, waveform, defaultPitch, notePinStart) {\n        const envelopeSpeed = isDrumset ? envelope.speed : 1;\n        const boundAdjust = (perEnvelopeUpperBound - perEnvelopeLowerBound);\n        switch (envelope.type) {\n            case 0: return perEnvelopeUpperBound;\n            case 1:\n                if (!inverse) {\n                    return Synth.noteSizeToVolumeMult(noteSize) * (boundAdjust) + perEnvelopeLowerBound;\n                }\n                else {\n                    return perEnvelopeUpperBound - Synth.noteSizeToVolumeMult(noteSize) * (boundAdjust);\n                }\n            case 2:\n                return pitch;\n            case 3:\n                const hashMax = 0xffffffff;\n                const step = steps;\n                switch (waveform) {\n                    case 0:\n                        if (step <= 1)\n                            return 1;\n                        const timeHash = xxHash32((perEnvelopeSpeed == 0 ? 0 : Math.floor((timeSinceStart * perEnvelopeSpeed) / (256))) + \"\", seed);\n                        if (inverse) {\n                            return perEnvelopeUpperBound - boundAdjust * (step / (step - 1)) * Math.floor(timeHash * step / (hashMax + 1)) / step;\n                        }\n                        else {\n                            return boundAdjust * (step / (step - 1)) * Math.floor(timeHash * (step) / (hashMax + 1)) / step + perEnvelopeLowerBound;\n                        }\n                    case 1:\n                        const pitchHash = xxHash32(defaultPitch + \"\", seed);\n                        if (inverse) {\n                            return perEnvelopeUpperBound - boundAdjust * pitchHash / (hashMax + 1);\n                        }\n                        else {\n                            return boundAdjust * pitchHash / (hashMax + 1) + perEnvelopeLowerBound;\n                        }\n                    case 2:\n                        if (step <= 1)\n                            return 1;\n                        const noteHash = xxHash32(notePinStart + \"\", seed);\n                        if (inverse) {\n                            return perEnvelopeUpperBound - boundAdjust * (step / (step - 1)) * Math.floor(noteHash * step / (hashMax + 1)) / step;\n                        }\n                        else {\n                            return boundAdjust * (step / (step - 1)) * Math.floor(noteHash * (step) / (hashMax + 1)) / step + perEnvelopeLowerBound;\n                        }\n                    case 3:\n                        const timeHashA = xxHash32((perEnvelopeSpeed == 0 ? 0 : Math.floor((timeSinceStart * perEnvelopeSpeed) / (256))) + \"\", seed);\n                        const timeHashB = xxHash32((perEnvelopeSpeed == 0 ? 0 : Math.floor((timeSinceStart * perEnvelopeSpeed + 256) / (256))) + \"\", seed);\n                        const weightedAverage = timeHashA * (1 - ((timeSinceStart * perEnvelopeSpeed) / (256)) % 1) + timeHashB * (((timeSinceStart * perEnvelopeSpeed) / (256)) % 1);\n                        if (inverse) {\n                            return perEnvelopeUpperBound - boundAdjust * weightedAverage / (hashMax + 1);\n                        }\n                        else {\n                            return boundAdjust * weightedAverage / (hashMax + 1) + perEnvelopeLowerBound;\n                        }\n                    default: throw new Error(\"Unrecognized operator envelope waveform type: \" + waveform);\n                }\n            case 6:\n                if (inverse) {\n                    return perEnvelopeUpperBound - boundAdjust * (1.0 / (1.0 + time * envelopeSpeed));\n                }\n                else {\n                    return boundAdjust / (1.0 + time * envelopeSpeed) + perEnvelopeLowerBound;\n                }\n            case 7:\n                if (inverse) {\n                    return boundAdjust / (1.0 + time * envelopeSpeed) + perEnvelopeLowerBound;\n                }\n                else {\n                    return perEnvelopeUpperBound - boundAdjust / (1.0 + time * envelopeSpeed);\n                }\n            case 8:\n                switch (waveform) {\n                    case 0:\n                        if (inverse) {\n                            return (perEnvelopeUpperBound / 2) + boundAdjust * Math.cos(beats * 2.0 * Math.PI * envelopeSpeed) * 0.5 + (perEnvelopeLowerBound / 2);\n                        }\n                        else {\n                            return (perEnvelopeUpperBound / 2) - boundAdjust * Math.cos(beats * 2.0 * Math.PI * envelopeSpeed) * 0.5 + (perEnvelopeLowerBound / 2);\n                        }\n                    case 1:\n                        if (inverse) {\n                            return (Math.cos(beats * 2.0 * Math.PI * envelopeSpeed + 3 * Math.PI / 2) < 0) ? perEnvelopeUpperBound : perEnvelopeLowerBound;\n                        }\n                        else {\n                            return (Math.cos(beats * 2.0 * Math.PI * envelopeSpeed + 3 * Math.PI / 2) < 0) ? perEnvelopeLowerBound : perEnvelopeUpperBound;\n                        }\n                    case 2:\n                        if (inverse) {\n                            return (perEnvelopeUpperBound / 2) - (boundAdjust / Math.PI) * Math.asin(Math.sin((Math.PI / 2) + beats * Math.PI * 2.0 * envelopeSpeed)) + (perEnvelopeLowerBound / 2);\n                        }\n                        else {\n                            return (perEnvelopeUpperBound / 2) + (boundAdjust / Math.PI) * Math.asin(Math.sin((Math.PI / 2) + beats * Math.PI * 2.0 * envelopeSpeed)) + (perEnvelopeLowerBound / 2);\n                        }\n                    case 3:\n                        if (inverse) {\n                            return perEnvelopeUpperBound - (beats * envelopeSpeed) % 1 * boundAdjust;\n                        }\n                        else {\n                            return (beats * envelopeSpeed) % 1 * boundAdjust + perEnvelopeLowerBound;\n                        }\n                    case 4:\n                        let trap = 0;\n                        if (inverse) {\n                            trap = (perEnvelopeUpperBound / 2) - (boundAdjust * 2 / Math.PI) * Math.asin(Math.sin((Math.PI / 2) + beats * Math.PI * 2.0 * envelopeSpeed)) + (perEnvelopeLowerBound / 2);\n                        }\n                        else {\n                            trap = (perEnvelopeUpperBound / 2) + (boundAdjust * 2 / Math.PI) * Math.asin(Math.sin((Math.PI / 2) + beats * Math.PI * 2.0 * envelopeSpeed)) + (perEnvelopeLowerBound / 2);\n                        }\n                        return Math.max(perEnvelopeLowerBound, Math.min(perEnvelopeUpperBound, trap));\n                    case 5:\n                        if (steps <= 1)\n                            return 1;\n                        let saw = (beats * envelopeSpeed) % 1;\n                        if (inverse) {\n                            return perEnvelopeUpperBound - Math.floor(saw * steps) * boundAdjust / (steps - 1);\n                        }\n                        else {\n                            return Math.floor(saw * steps) * boundAdjust / (steps - 1) + perEnvelopeLowerBound;\n                        }\n                    case 6:\n                        if (steps <= 1)\n                            return 1;\n                        let tri = 0.5 + (inverse ? -1 : 1) * (1 / Math.PI) * Math.asin(Math.sin((Math.PI / 2) + beats * Math.PI * 2.0 * envelopeSpeed));\n                        return Math.round(tri * (steps - 1)) * boundAdjust / (steps - 1) + perEnvelopeLowerBound;\n                    default: throw new Error(\"Unrecognized operator envelope waveform type: \" + waveform);\n                }\n            case 9:\n                if (inverse) {\n                    return (perEnvelopeUpperBound / 4) + boundAdjust * Math.cos(beats * 2.0 * Math.PI * envelopeSpeed) * 0.25 + (perEnvelopeLowerBound / 4);\n                }\n                else {\n                    return 0.5 + (perEnvelopeUpperBound / 4) - boundAdjust * Math.cos(beats * 2.0 * Math.PI * envelopeSpeed) * 0.25 - (perEnvelopeLowerBound / 4);\n                }\n            case 4:\n                if (inverse) {\n                    return Math.max(0, perEnvelopeUpperBound + 1.0 - Math.max(1.0 - perEnvelopeLowerBound, 1.0 - perEnvelopeUpperBound - unspedTime * globalEnvelopeSpeed * 10.0));\n                }\n                else {\n                    return Math.max(1.0 + perEnvelopeLowerBound, 1.0 + perEnvelopeUpperBound - unspedTime * globalEnvelopeSpeed * 10.0);\n                }\n            case 5:\n                const attack = 0.25 / Math.sqrt(envelopeSpeed * perEnvelopeSpeed);\n                if (inverse) {\n                    return perEnvelopeUpperBound - boundAdjust * (unspedTime < attack ? unspedTime / attack : 1.0 / (1.0 + (unspedTime - attack) * envelopeSpeed * perEnvelopeSpeed));\n                }\n                else {\n                    return boundAdjust * (unspedTime < attack ? unspedTime / attack : 1.0 / (1.0 + (unspedTime - attack) * envelopeSpeed * perEnvelopeSpeed)) + perEnvelopeLowerBound;\n                }\n            case 10:\n                if (inverse) {\n                    return perEnvelopeUpperBound - boundAdjust * Math.pow(2, -envelopeSpeed * time);\n                }\n                else {\n                    return boundAdjust * Math.pow(2, -envelopeSpeed * time) + perEnvelopeLowerBound;\n                }\n            case 14:\n                if (inverse) {\n                    return perEnvelopeUpperBound - boundAdjust * +(unspedTime < (0.25 / Math.sqrt(envelopeSpeed * perEnvelopeSpeed)));\n                }\n                else {\n                    return boundAdjust * +(unspedTime < (0.25 / Math.sqrt(envelopeSpeed * perEnvelopeSpeed))) + perEnvelopeLowerBound;\n                }\n            case 11:\n                let temp = 0.5 - Math.cos(beats * envelopeSpeed) * 0.5;\n                temp = 1.0 / (1.0 + time * (envelopeSpeed - (temp / (1.5 / envelopeSpeed))));\n                temp = temp > 0.0 ? temp : 0.0;\n                if (inverse) {\n                    return perEnvelopeUpperBound - boundAdjust * temp;\n                }\n                else {\n                    return boundAdjust * temp + perEnvelopeLowerBound;\n                }\n            case 12: {\n                let lin = (1.0 - (time / (16 / envelopeSpeed)));\n                lin = lin > 0.0 ? lin : 0.0;\n                if (inverse) {\n                    return perEnvelopeUpperBound - boundAdjust * lin;\n                }\n                else {\n                    return boundAdjust * lin + perEnvelopeLowerBound;\n                }\n            }\n            case 13: {\n                let lin = (time / (16 / envelopeSpeed));\n                lin = lin < 1.0 ? lin : 1.0;\n                if (inverse) {\n                    return perEnvelopeUpperBound - boundAdjust * lin;\n                }\n                else {\n                    return boundAdjust * lin + perEnvelopeLowerBound;\n                }\n            }\n            case 15: {\n                if (inverse) {\n                    return Math.min(Math.max(perEnvelopeLowerBound, perEnvelopeUpperBound - boundAdjust * Math.sqrt(Math.max(1.0 - envelopeSpeed * time / 2, 0))), perEnvelopeUpperBound);\n                }\n                else {\n                    return Math.max(perEnvelopeLowerBound, boundAdjust * Math.sqrt(Math.max(1.0 - envelopeSpeed * time / 2, 0)) + perEnvelopeLowerBound);\n                }\n            }\n            default: throw new Error(\"Unrecognized operator envelope type.\");\n        }\n    }\n    getPitchValue(instrument, tone, instrumentState, calculateBends = true) {\n        if (tone && tone.pitchCount >= 1) {\n            const chord = instrument.getChord();\n            const arpeggiates = chord.arpeggiates;\n            const monophonic = chord.name == \"monophonic\";\n            const arpeggio = Math.floor(instrumentState.arpTime / Config.ticksPerArpeggio);\n            const tonePitch = tone.pitches[arpeggiates ? getArpeggioPitchIndex(tone.pitchCount, instrument.fastTwoNoteArp, arpeggio) : monophonic ? instrument.monoChordTone : 0];\n            if (calculateBends) {\n                return tone.lastInterval != tonePitch ? tonePitch + tone.lastInterval : tonePitch;\n            }\n            else {\n                return tonePitch;\n            }\n        }\n        return 0;\n    }\n    computePitchEnvelope(instrument, index, pitch = 0) {\n        let startNote = 0;\n        let endNote = Config.maxPitch;\n        let inverse = false;\n        let envelopeLowerBound = 0;\n        let envelopeUpperBound = 1;\n        if (instrument.isNoiseInstrument) {\n            endNote = Config.drumCount - 1;\n        }\n        if (index < instrument.envelopeCount && index !== -2) {\n            startNote = instrument.envelopes[index].pitchEnvelopeStart;\n            endNote = instrument.envelopes[index].pitchEnvelopeEnd;\n            inverse = instrument.envelopes[index].inverse;\n            envelopeLowerBound = instrument.envelopes[index].perEnvelopeLowerBound;\n            envelopeUpperBound = instrument.envelopes[index].perEnvelopeUpperBound;\n        }\n        if (startNote > endNote) {\n            startNote = 0;\n            endNote = instrument.isNoiseInstrument ? Config.drumCount - 1 : Config.maxPitch;\n        }\n        const range = endNote - startNote + 1;\n        if (!inverse) {\n            if (pitch <= startNote) {\n                return envelopeLowerBound;\n            }\n            else if (pitch >= endNote) {\n                return envelopeUpperBound;\n            }\n            else {\n                return (pitch - startNote) * (envelopeUpperBound - envelopeLowerBound) / range + envelopeLowerBound;\n            }\n        }\n        else {\n            if (pitch <= startNote) {\n                return envelopeUpperBound;\n            }\n            else if (pitch >= endNote) {\n                return envelopeLowerBound;\n            }\n            else {\n                return envelopeUpperBound - (pitch - startNote) * (envelopeUpperBound - envelopeLowerBound) / range;\n            }\n        }\n    }\n    static getLowpassCutoffDecayVolumeCompensation(envelope, perEnvelopeSpeed = 1) {\n        if (envelope.type == 10)\n            return 1.25 + 0.025 * perEnvelopeSpeed;\n        if (envelope.type == 6)\n            return 1.0 + 0.02 * perEnvelopeSpeed;\n        return 1.0;\n    }\n    computeDrumsetEnvelopes(instrument, drumsetFilterEnvelope, beatsPerPart, partTimeStart, partTimeEnd) {\n        const pitch = 1;\n        function computeDrumsetEnvelope(unspedTime, time, beats, noteSize) {\n            return EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, 1, 1, unspedTime, time, beats, 0, noteSize, pitch, false, 0, 1, true, 2, 2, 0, pitch, 0);\n        }\n        let drumsetFilterEnvelopeStart = computeDrumsetEnvelope(this.noteSecondsStartUnscaled, this.noteSecondsStartUnscaled, beatsPerPart * partTimeStart, this.noteSizeStart);\n        if (this.prevSlideStart) {\n            const other = computeDrumsetEnvelope(this.prevNoteSecondsStartUnscaled, this.prevNoteSecondsStartUnscaled, beatsPerPart * partTimeStart, this.prevNoteSize);\n            drumsetFilterEnvelopeStart += (other - drumsetFilterEnvelopeStart) * this.prevSlideRatioStart;\n        }\n        if (this.nextSlideStart) {\n            const other = computeDrumsetEnvelope(0.0, 0.0, beatsPerPart * partTimeStart, this.nextNoteSize);\n            drumsetFilterEnvelopeStart += (other - drumsetFilterEnvelopeStart) * this.nextSlideRatioStart;\n        }\n        let drumsetFilterEnvelopeEnd = drumsetFilterEnvelopeStart;\n        drumsetFilterEnvelopeEnd = computeDrumsetEnvelope(this.noteSecondsEndUnscaled, this.noteSecondsEndUnscaled, beatsPerPart * partTimeEnd, this.noteSizeEnd);\n        if (this.prevSlideEnd) {\n            const other = computeDrumsetEnvelope(this.prevNoteSecondsEndUnscaled, this.prevNoteSecondsEndUnscaled, beatsPerPart * partTimeEnd, this.prevNoteSize);\n            drumsetFilterEnvelopeEnd += (other - drumsetFilterEnvelopeEnd) * this.prevSlideRatioEnd;\n        }\n        if (this.nextSlideEnd) {\n            const other = computeDrumsetEnvelope(0.0, 0.0, beatsPerPart * partTimeEnd, this.nextNoteSize);\n            drumsetFilterEnvelopeEnd += (other - drumsetFilterEnvelopeEnd) * this.nextSlideRatioEnd;\n        }\n        this.drumsetFilterEnvelopeStart = drumsetFilterEnvelopeStart;\n        this.drumsetFilterEnvelopeEnd = drumsetFilterEnvelopeEnd;\n    }\n}\n//# sourceMappingURL=EnvelopeComputer.js.map","import { Config, getDrumWave, drawNoiseSpectrum, performIntegralOld } from \"./SynthConfig\";\nimport { scaleElementsByFactor, inverseRealFourierTransform } from \"./FFT\";\nimport { Deque } from \"./Deque\";\nimport { warpInfinityToNyquist } from \"./filtering\";\nimport { Instrument } from \"./Instrument\";\nimport { EffectState } from \"./EffectState\";\nimport { Synth } from \"./synth\";\nimport { EnvelopeComputer } from \"./EnvelopeComputer\";\nimport { fittingPowerOfTwo } from \"./utils\";\nexport class SpectrumWaveState {\n    constructor() {\n        this.wave = null;\n        this._hash = -1;\n    }\n    getCustomWave(settings, lowestOctave) {\n        if (this._hash == settings.hash)\n            return this.wave;\n        this._hash = settings.hash;\n        const waveLength = Config.spectrumNoiseLength;\n        if (this.wave == null || this.wave.length != waveLength + 1) {\n            this.wave = new Float32Array(waveLength + 1);\n        }\n        const wave = this.wave;\n        for (let i = 0; i < waveLength; i++) {\n            wave[i] = 0;\n        }\n        const highestOctave = 14;\n        const falloffRatio = 0.25;\n        const pitchTweak = [0, 1 / 7, Math.log2(5 / 4), 3 / 7, Math.log2(3 / 2), 5 / 7, 6 / 7];\n        function controlPointToOctave(point) {\n            return lowestOctave + Math.floor(point / Config.spectrumControlPointsPerOctave) + pitchTweak[(point + Config.spectrumControlPointsPerOctave) % Config.spectrumControlPointsPerOctave];\n        }\n        let combinedAmplitude = 1;\n        for (let i = 0; i < Config.spectrumControlPoints + 1; i++) {\n            const value1 = (i <= 0) ? 0 : settings.spectrum[i - 1];\n            const value2 = (i >= Config.spectrumControlPoints) ? settings.spectrum[Config.spectrumControlPoints - 1] : settings.spectrum[i];\n            const octave1 = controlPointToOctave(i - 1);\n            let octave2 = controlPointToOctave(i);\n            if (i >= Config.spectrumControlPoints)\n                octave2 = highestOctave + (octave2 - highestOctave) * falloffRatio;\n            if (value1 == 0 && value2 == 0)\n                continue;\n            combinedAmplitude += 0.02 * drawNoiseSpectrum(wave, waveLength, octave1, octave2, value1 / Config.spectrumMax, value2 / Config.spectrumMax, -0.5);\n        }\n        if (settings.spectrum[Config.spectrumControlPoints - 1] > 0) {\n            combinedAmplitude += 0.02 * drawNoiseSpectrum(wave, waveLength, highestOctave + (controlPointToOctave(Config.spectrumControlPoints) - highestOctave) * falloffRatio, highestOctave, settings.spectrum[Config.spectrumControlPoints - 1] / Config.spectrumMax, 0, -0.5);\n        }\n        inverseRealFourierTransform(wave, waveLength);\n        scaleElementsByFactor(wave, 5.0 / (Math.sqrt(waveLength) * Math.pow(combinedAmplitude, 0.75)));\n        wave[waveLength] = wave[0];\n        return wave;\n    }\n}\nexport class HarmonicsWaveState {\n    constructor() {\n        this.wave = null;\n        this._hash = -1;\n    }\n    getCustomWave(settings, instrumentType) {\n        if (this._hash == settings.hash && this._generatedForType == instrumentType)\n            return this.wave;\n        this._hash = settings.hash;\n        this._generatedForType = instrumentType;\n        const harmonicsRendered = (instrumentType == 7) ? Config.harmonicsRenderedForPickedString : Config.harmonicsRendered;\n        const waveLength = Config.harmonicsWavelength;\n        const retroWave = getDrumWave(0, null, null);\n        if (this.wave == null || this.wave.length != waveLength + 1) {\n            this.wave = new Float32Array(waveLength + 1);\n        }\n        const wave = this.wave;\n        for (let i = 0; i < waveLength; i++) {\n            wave[i] = 0;\n        }\n        const overallSlope = -0.25;\n        let combinedControlPointAmplitude = 1;\n        for (let harmonicIndex = 0; harmonicIndex < harmonicsRendered; harmonicIndex++) {\n            const harmonicFreq = harmonicIndex + 1;\n            let controlValue = harmonicIndex < Config.harmonicsControlPoints ? settings.harmonics[harmonicIndex] : settings.harmonics[Config.harmonicsControlPoints - 1];\n            if (harmonicIndex >= Config.harmonicsControlPoints) {\n                controlValue *= 1 - (harmonicIndex - Config.harmonicsControlPoints) / (harmonicsRendered - Config.harmonicsControlPoints);\n            }\n            const normalizedValue = controlValue / Config.harmonicsMax;\n            let amplitude = Math.pow(2, controlValue - Config.harmonicsMax + 1) * Math.sqrt(normalizedValue);\n            if (harmonicIndex < Config.harmonicsControlPoints) {\n                combinedControlPointAmplitude += amplitude;\n            }\n            amplitude *= Math.pow(harmonicFreq, overallSlope);\n            amplitude *= retroWave[harmonicIndex + 589];\n            wave[waveLength - harmonicFreq] = amplitude;\n        }\n        inverseRealFourierTransform(wave, waveLength);\n        const mult = 1 / Math.pow(combinedControlPointAmplitude, 0.7);\n        for (let i = 0; i < wave.length; i++)\n            wave[i] *= mult;\n        performIntegralOld(wave);\n        wave[waveLength] = wave[0];\n        return wave;\n    }\n}\nexport class PickedString {\n    constructor() {\n        this.delayLine = null;\n        this.allPassG = 0.0;\n        this.allPassGDelta = 0.0;\n        this.sustainFilterA1 = 0.0;\n        this.sustainFilterA1Delta = 0.0;\n        this.sustainFilterA2 = 0.0;\n        this.sustainFilterA2Delta = 0.0;\n        this.sustainFilterB0 = 0.0;\n        this.sustainFilterB0Delta = 0.0;\n        this.sustainFilterB1 = 0.0;\n        this.sustainFilterB1Delta = 0.0;\n        this.sustainFilterB2 = 0.0;\n        this.sustainFilterB2Delta = 0.0;\n        this.reset();\n    }\n    reset() {\n        this.delayIndex = -1;\n        this.allPassSample = 0.0;\n        this.allPassPrevInput = 0.0;\n        this.sustainFilterSample = 0.0;\n        this.sustainFilterPrevOutput2 = 0.0;\n        this.sustainFilterPrevInput1 = 0.0;\n        this.sustainFilterPrevInput2 = 0.0;\n        this.fractionalDelaySample = 0.0;\n        this.prevDelayLength = -1.0;\n        this.delayResetOffset = 0;\n    }\n    update(synth, instrumentState, tone, stringIndex, roundedSamplesPerTick, stringDecayStart, stringDecayEnd, sustainType) {\n        const allPassCenter = 2.0 * Math.PI * Config.pickedStringDispersionCenterFreq / synth.samplesPerSecond;\n        const prevDelayLength = this.prevDelayLength;\n        const phaseDeltaStart = tone.phaseDeltas[stringIndex];\n        const phaseDeltaScale = tone.phaseDeltaScales[stringIndex];\n        const phaseDeltaEnd = phaseDeltaStart * Math.pow(phaseDeltaScale, roundedSamplesPerTick);\n        const radiansPerSampleStart = Math.PI * 2.0 * phaseDeltaStart;\n        const radiansPerSampleEnd = Math.PI * 2.0 * phaseDeltaEnd;\n        const centerHarmonicStart = radiansPerSampleStart * 2.0;\n        const centerHarmonicEnd = radiansPerSampleEnd * 2.0;\n        const allPassRadiansStart = Math.min(Math.PI, radiansPerSampleStart * Config.pickedStringDispersionFreqMult * Math.pow(allPassCenter / radiansPerSampleStart, Config.pickedStringDispersionFreqScale));\n        const allPassRadiansEnd = Math.min(Math.PI, radiansPerSampleEnd * Config.pickedStringDispersionFreqMult * Math.pow(allPassCenter / radiansPerSampleEnd, Config.pickedStringDispersionFreqScale));\n        const shelfRadians = 2.0 * Math.PI * Config.pickedStringShelfHz / synth.samplesPerSecond;\n        const decayCurveStart = (Math.pow(100.0, stringDecayStart) - 1.0) / 99.0;\n        const decayCurveEnd = (Math.pow(100.0, stringDecayEnd) - 1.0) / 99.0;\n        const register = sustainType == 1 ? 0.25 : 0.0;\n        const registerShelfCenter = 15.6;\n        const registerLowpassCenter = 3.0 * synth.samplesPerSecond / 48000;\n        const decayRateStart = Math.pow(0.5, decayCurveStart * Math.pow(shelfRadians / (radiansPerSampleStart * registerShelfCenter), (1.0 + 2.0 * register)) * registerShelfCenter);\n        const decayRateEnd = Math.pow(0.5, decayCurveEnd * Math.pow(shelfRadians / (radiansPerSampleEnd * registerShelfCenter), (1.0 + 2.0 * register)) * registerShelfCenter);\n        const expressionDecayStart = Math.pow(decayRateStart, 0.002);\n        const expressionDecayEnd = Math.pow(decayRateEnd, 0.002);\n        Synth.tempFilterStartCoefficients.allPass1stOrderInvertPhaseAbove(allPassRadiansStart);\n        synth.tempFrequencyResponse.analyze(Synth.tempFilterStartCoefficients, centerHarmonicStart);\n        const allPassGStart = Synth.tempFilterStartCoefficients.b[0];\n        const allPassPhaseDelayStart = -synth.tempFrequencyResponse.angle() / centerHarmonicStart;\n        Synth.tempFilterEndCoefficients.allPass1stOrderInvertPhaseAbove(allPassRadiansEnd);\n        synth.tempFrequencyResponse.analyze(Synth.tempFilterEndCoefficients, centerHarmonicEnd);\n        const allPassGEnd = Synth.tempFilterEndCoefficients.b[0];\n        const allPassPhaseDelayEnd = -synth.tempFrequencyResponse.angle() / centerHarmonicEnd;\n        const brightnessType = sustainType == 0 ? 0 : 1;\n        if (brightnessType == 0) {\n            const shelfGainStart = Math.pow(decayRateStart, Config.stringDecayRate);\n            const shelfGainEnd = Math.pow(decayRateEnd, Config.stringDecayRate);\n            Synth.tempFilterStartCoefficients.highShelf2ndOrder(shelfRadians, shelfGainStart, 0.5);\n            Synth.tempFilterEndCoefficients.highShelf2ndOrder(shelfRadians, shelfGainEnd, 0.5);\n        }\n        else {\n            const cornerHardness = Math.pow(brightnessType == 1 ? 0.0 : 1.0, 0.25);\n            const lowpass1stOrderCutoffRadiansStart = Math.pow(registerLowpassCenter * registerLowpassCenter * radiansPerSampleStart * 3.3 * 48000 / synth.samplesPerSecond, 0.5 + register) / registerLowpassCenter / Math.pow(decayCurveStart, .5);\n            const lowpass1stOrderCutoffRadiansEnd = Math.pow(registerLowpassCenter * registerLowpassCenter * radiansPerSampleEnd * 3.3 * 48000 / synth.samplesPerSecond, 0.5 + register) / registerLowpassCenter / Math.pow(decayCurveEnd, .5);\n            const lowpass2ndOrderCutoffRadiansStart = lowpass1stOrderCutoffRadiansStart * Math.pow(2.0, 0.5 - 1.75 * (1.0 - Math.pow(1.0 - cornerHardness, 0.85)));\n            const lowpass2ndOrderCutoffRadiansEnd = lowpass1stOrderCutoffRadiansEnd * Math.pow(2.0, 0.5 - 1.75 * (1.0 - Math.pow(1.0 - cornerHardness, 0.85)));\n            const lowpass2ndOrderGainStart = Math.pow(2.0, -Math.pow(2.0, -Math.pow(cornerHardness, 0.9)));\n            const lowpass2ndOrderGainEnd = Math.pow(2.0, -Math.pow(2.0, -Math.pow(cornerHardness, 0.9)));\n            Synth.tempFilterStartCoefficients.lowPass2ndOrderButterworth(warpInfinityToNyquist(lowpass2ndOrderCutoffRadiansStart), lowpass2ndOrderGainStart);\n            Synth.tempFilterEndCoefficients.lowPass2ndOrderButterworth(warpInfinityToNyquist(lowpass2ndOrderCutoffRadiansEnd), lowpass2ndOrderGainEnd);\n        }\n        synth.tempFrequencyResponse.analyze(Synth.tempFilterStartCoefficients, centerHarmonicStart);\n        const sustainFilterA1Start = Synth.tempFilterStartCoefficients.a[1];\n        const sustainFilterA2Start = Synth.tempFilterStartCoefficients.a[2];\n        const sustainFilterB0Start = Synth.tempFilterStartCoefficients.b[0] * expressionDecayStart;\n        const sustainFilterB1Start = Synth.tempFilterStartCoefficients.b[1] * expressionDecayStart;\n        const sustainFilterB2Start = Synth.tempFilterStartCoefficients.b[2] * expressionDecayStart;\n        const sustainFilterPhaseDelayStart = -synth.tempFrequencyResponse.angle() / centerHarmonicStart;\n        synth.tempFrequencyResponse.analyze(Synth.tempFilterEndCoefficients, centerHarmonicEnd);\n        const sustainFilterA1End = Synth.tempFilterEndCoefficients.a[1];\n        const sustainFilterA2End = Synth.tempFilterEndCoefficients.a[2];\n        const sustainFilterB0End = Synth.tempFilterEndCoefficients.b[0] * expressionDecayEnd;\n        const sustainFilterB1End = Synth.tempFilterEndCoefficients.b[1] * expressionDecayEnd;\n        const sustainFilterB2End = Synth.tempFilterEndCoefficients.b[2] * expressionDecayEnd;\n        const sustainFilterPhaseDelayEnd = -synth.tempFrequencyResponse.angle() / centerHarmonicEnd;\n        const periodLengthStart = 1.0 / phaseDeltaStart;\n        const periodLengthEnd = 1.0 / phaseDeltaEnd;\n        const minBufferLength = Math.ceil(Math.max(periodLengthStart, periodLengthEnd) * 2);\n        const delayLength = periodLengthStart - allPassPhaseDelayStart - sustainFilterPhaseDelayStart;\n        const delayLengthEnd = periodLengthEnd - allPassPhaseDelayEnd - sustainFilterPhaseDelayEnd;\n        this.prevDelayLength = delayLength;\n        this.delayLengthDelta = (delayLengthEnd - delayLength) / roundedSamplesPerTick;\n        this.allPassG = allPassGStart;\n        this.sustainFilterA1 = sustainFilterA1Start;\n        this.sustainFilterA2 = sustainFilterA2Start;\n        this.sustainFilterB0 = sustainFilterB0Start;\n        this.sustainFilterB1 = sustainFilterB1Start;\n        this.sustainFilterB2 = sustainFilterB2Start;\n        this.allPassGDelta = (allPassGEnd - allPassGStart) / roundedSamplesPerTick;\n        this.sustainFilterA1Delta = (sustainFilterA1End - sustainFilterA1Start) / roundedSamplesPerTick;\n        this.sustainFilterA2Delta = (sustainFilterA2End - sustainFilterA2Start) / roundedSamplesPerTick;\n        this.sustainFilterB0Delta = (sustainFilterB0End - sustainFilterB0Start) / roundedSamplesPerTick;\n        this.sustainFilterB1Delta = (sustainFilterB1End - sustainFilterB1Start) / roundedSamplesPerTick;\n        this.sustainFilterB2Delta = (sustainFilterB2End - sustainFilterB2Start) / roundedSamplesPerTick;\n        const pitchChanged = Math.abs(Math.log2(delayLength / prevDelayLength)) > 0.01;\n        const reinitializeImpulse = (this.delayIndex == -1 || pitchChanged);\n        if (this.delayLine == null || this.delayLine.length <= minBufferLength) {\n            const likelyMaximumLength = Math.ceil(2 * synth.samplesPerSecond / Instrument.frequencyFromPitch(12));\n            const newDelayLine = new Float32Array(fittingPowerOfTwo(Math.max(likelyMaximumLength, minBufferLength)));\n            if (!reinitializeImpulse && this.delayLine != null) {\n                const oldDelayBufferMask = (this.delayLine.length - 1) >> 0;\n                const startCopyingFromIndex = this.delayIndex + this.delayResetOffset;\n                this.delayIndex = this.delayLine.length - this.delayResetOffset;\n                for (let i = 0; i < this.delayLine.length; i++) {\n                    newDelayLine[i] = this.delayLine[(startCopyingFromIndex + i) & oldDelayBufferMask];\n                }\n            }\n            this.delayLine = newDelayLine;\n        }\n        const delayLine = this.delayLine;\n        const delayBufferMask = (delayLine.length - 1) >> 0;\n        if (reinitializeImpulse) {\n            this.delayIndex = 0;\n            this.allPassSample = 0.0;\n            this.allPassPrevInput = 0.0;\n            this.sustainFilterSample = 0.0;\n            this.sustainFilterPrevOutput2 = 0.0;\n            this.sustainFilterPrevInput1 = 0.0;\n            this.sustainFilterPrevInput2 = 0.0;\n            this.fractionalDelaySample = 0.0;\n            const startImpulseFrom = -delayLength;\n            const startZerosFrom = Math.floor(startImpulseFrom - periodLengthStart / 2);\n            const stopZerosAt = Math.ceil(startZerosFrom + periodLengthStart * 2);\n            this.delayResetOffset = stopZerosAt;\n            for (let i = startZerosFrom; i <= stopZerosAt; i++) {\n                delayLine[i & delayBufferMask] = 0.0;\n            }\n            const impulseWave = instrumentState.waveL;\n            const impulseWaveLength = impulseWave.length - 1;\n            const impulsePhaseDelta = impulseWaveLength / periodLengthStart;\n            const fadeDuration = Math.min(periodLengthStart * 0.2, synth.samplesPerSecond * 0.003);\n            const startImpulseFromSample = Math.ceil(startImpulseFrom);\n            const stopImpulseAt = startImpulseFrom + periodLengthStart + fadeDuration;\n            const stopImpulseAtSample = stopImpulseAt;\n            let impulsePhase = (startImpulseFromSample - startImpulseFrom) * impulsePhaseDelta;\n            let prevWaveIntegral = 0.0;\n            for (let i = startImpulseFromSample; i <= stopImpulseAtSample; i++) {\n                const impulsePhaseInt = impulsePhase | 0;\n                const index = impulsePhaseInt % impulseWaveLength;\n                let nextWaveIntegral = impulseWave[index];\n                const phaseRatio = impulsePhase - impulsePhaseInt;\n                nextWaveIntegral += (impulseWave[index + 1] - nextWaveIntegral) * phaseRatio;\n                const sample = (nextWaveIntegral - prevWaveIntegral) / impulsePhaseDelta;\n                const fadeIn = Math.min(1.0, (i - startImpulseFrom) / fadeDuration);\n                const fadeOut = Math.min(1.0, (stopImpulseAt - i) / fadeDuration);\n                const combinedFade = fadeIn * fadeOut;\n                const curvedFade = combinedFade * combinedFade * (3.0 - 2.0 * combinedFade);\n                delayLine[i & delayBufferMask] += sample * curvedFade;\n                prevWaveIntegral = nextWaveIntegral;\n                impulsePhase += impulsePhaseDelta;\n            }\n        }\n    }\n}\nexport class InstrumentState {\n    constructor() {\n        this.awake = false;\n        this.computed = false;\n        this.tonesAddedInThisTick = false;\n        this.flushingDelayLines = false;\n        this.deactivateAfterThisTick = false;\n        this.attentuationProgress = 0.0;\n        this.flushedSamples = 0;\n        this.activeTones = new Deque();\n        this.activeModTones = new Deque();\n        this.releasedTones = new Deque();\n        this.liveInputTones = new Deque();\n        this.type = 0;\n        this.synthesizer = null;\n        this.waveL = null;\n        this.waveR = null;\n        this.isStereo = false;\n        this.isUsingAdvancedLoopControls = false;\n        this.chipWaveLoopStart = 0;\n        this.chipWaveLoopEnd = 0;\n        this.chipWaveLoopMode = 0;\n        this.chipWavePlayBackwards = false;\n        this.chipWaveStartOffset = 0;\n        this.chipWaveInStereo = false;\n        this.noisePitchFilterMult = 1.0;\n        this.unison = null;\n        this.unisonVoices = 1;\n        this.unisonSpread = 0.0;\n        this.unisonOffset = 0.0;\n        this.unisonExpression = 1.4;\n        this.unisonSign = 1.0;\n        this.chord = null;\n        this.effects = [];\n        this.volumeScale = 0;\n        this.aliases = false;\n        this.arpTime = 0;\n        this.vibratoTime = 0;\n        this.nextVibratoTime = 0;\n        this.envelopeTime = [];\n        this.mixVolume = 1.0;\n        this.mixVolumeDelta = 0.0;\n        this.delayDuration = 0.0;\n        this.totalDelaySamples = 0.0;\n        this.delayInputMult = 0.0;\n        this.delayInputMultDelta = 0.0;\n        this.spectrumWave = new SpectrumWaveState();\n        this.harmonicsWave = new HarmonicsWaveState();\n        this.drumsetSpectrumWaves = [];\n        this.envelopeComputer = new EnvelopeComputer();\n        for (let i = 0; i < Config.drumCount; i++) {\n            this.drumsetSpectrumWaves[i] = new SpectrumWaveState();\n        }\n    }\n    allocateNecessaryBuffers(synth, instrument, samplesPerTick) {\n        for (let effectIndex = 0; effectIndex < instrument.effects.length; effectIndex++) {\n            if (this.effects[effectIndex] != null) {\n                let effect = instrument.effects[effectIndex];\n                this.effects[effectIndex].allocateNecessaryBuffers(synth, instrument, effect, samplesPerTick);\n            }\n        }\n    }\n    deactivate() {\n        for (let effectIndex = 0; effectIndex < this.effects.length; effectIndex++) {\n            if (this.effects[effectIndex] != null)\n                this.effects[effectIndex].deactivate();\n        }\n        this.volumeScale = 1.0;\n        this.aliases = false;\n        this.awake = false;\n        this.flushingDelayLines = false;\n        this.deactivateAfterThisTick = false;\n        this.attentuationProgress = 0.0;\n        this.flushedSamples = 0;\n    }\n    resetAllEffects() {\n        this.deactivate();\n        this.vibratoTime = 0;\n        this.nextVibratoTime = 0;\n        this.arpTime = 0;\n        for (let envelopeIndex = 0; envelopeIndex < Config.maxEnvelopeCount + 1; envelopeIndex++)\n            this.envelopeTime[envelopeIndex] = 0;\n        this.envelopeComputer.reset();\n        for (let effectIndex = 0; effectIndex < this.effects.length; effectIndex++) {\n            if (this.effects[effectIndex] != null)\n                this.effects[effectIndex].reset();\n        }\n    }\n    compute(synth, instrument, samplesPerTick, roundedSamplesPerTick, tone, channelIndex, instrumentIndex) {\n        this.computed = true;\n        this.type = instrument.type;\n        this.synthesizer = Synth.getInstrumentSynthFunction(instrument);\n        this.unison = Config.unisons[instrument.unison];\n        this.chord = instrument.getChord();\n        this.noisePitchFilterMult = Config.chipNoises[instrument.chipNoise].pitchFilterMult;\n        this.aliases = instrument.aliases;\n        this.volumeScale = 1.0;\n        this.delayDuration = 0.0;\n        this.totalDelaySamples = 0.0;\n        for (let effectIndex = 0; effectIndex < instrument.effects.length; effectIndex++) {\n            if (this.effects[effectIndex] == null)\n                this.effects[effectIndex] = new EffectState(instrument.effects[effectIndex].type);\n        }\n        this.effects.length = instrument.effects.length;\n        this.allocateNecessaryBuffers(synth, instrument, samplesPerTick);\n        const samplesPerSecond = synth.samplesPerSecond;\n        this.updateWaves(instrument, samplesPerSecond);\n        const ticksIntoBar = synth.getTicksIntoBar();\n        const tickTimeStart = ticksIntoBar;\n        const secondsPerTick = samplesPerTick / synth.samplesPerSecond;\n        const currentPart = synth.getCurrentPart();\n        const envelopeSpeeds = [];\n        for (let i = 0; i < Config.maxEnvelopeCount; i++) {\n            envelopeSpeeds[i] = 0;\n        }\n        let useEnvelopeSpeed = Config.arpSpeedScale[instrument.envelopeSpeed];\n        if (synth.isModActive(Config.modulators.dictionary[\"envelope speed\"].index, channelIndex, instrumentIndex)) {\n            useEnvelopeSpeed = Math.max(0, Math.min(Config.arpSpeedScale.length - 1, synth.getModValue(Config.modulators.dictionary[\"envelope speed\"].index, channelIndex, instrumentIndex, false)));\n            if (Number.isInteger(useEnvelopeSpeed)) {\n                useEnvelopeSpeed = Config.arpSpeedScale[useEnvelopeSpeed];\n            }\n            else {\n                useEnvelopeSpeed = ((1 - (useEnvelopeSpeed % 1)) * Config.arpSpeedScale[Math.floor(useEnvelopeSpeed)] + (useEnvelopeSpeed % 1) * Config.arpSpeedScale[Math.ceil(useEnvelopeSpeed)]);\n            }\n        }\n        for (let envelopeIndex = 0; envelopeIndex < instrument.envelopeCount; envelopeIndex++) {\n            let perEnvelopeSpeed = instrument.envelopes[envelopeIndex].perEnvelopeSpeed;\n            if (synth.isModActive(Config.modulators.dictionary[\"individual envelope speed\"].index, channelIndex, instrumentIndex) && instrument.envelopes[envelopeIndex].tempEnvelopeSpeed != null) {\n                perEnvelopeSpeed = instrument.envelopes[envelopeIndex].tempEnvelopeSpeed;\n            }\n            envelopeSpeeds[envelopeIndex] = useEnvelopeSpeed * perEnvelopeSpeed;\n        }\n        this.envelopeComputer.computeEnvelopes(instrument, currentPart, this.envelopeTime, tickTimeStart, secondsPerTick, tone, envelopeSpeeds, this, synth, channelIndex, instrumentIndex);\n        const envelopeStarts = this.envelopeComputer.envelopeStarts;\n        const envelopeEnds = this.envelopeComputer.envelopeEnds;\n        for (let effectIndex = 0; effectIndex < instrument.effects.length; effectIndex++) {\n            if (this.effects[effectIndex] != null) {\n                let effect = instrument.effects[effectIndex];\n                this.effects[effectIndex].compute(synth, instrument, effect, this, samplesPerTick, roundedSamplesPerTick, tone, channelIndex, instrumentIndex, envelopeStarts, envelopeEnds);\n            }\n        }\n        this.mixVolume = envelopeStarts[1] * Synth.instrumentVolumeToVolumeMult(instrument.volume);\n        let mixVolumeEnd = envelopeEnds[1] * Synth.instrumentVolumeToVolumeMult(instrument.volume);\n        if (synth.isModActive(Config.modulators.dictionary[\"post volume\"].index, channelIndex, instrumentIndex)) {\n            const startVal = synth.getModValue(Config.modulators.dictionary[\"post volume\"].index, channelIndex, instrumentIndex, false);\n            const endVal = synth.getModValue(Config.modulators.dictionary[\"post volume\"].index, channelIndex, instrumentIndex, true);\n            this.mixVolume *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(startVal));\n            mixVolumeEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(endVal));\n        }\n        if (synth.isModActive(Config.modulators.dictionary[\"song volume\"].index)) {\n            this.mixVolume *= (synth.getModValue(Config.modulators.dictionary[\"song volume\"].index, undefined, undefined, false)) / 100.0;\n            mixVolumeEnd *= (synth.getModValue(Config.modulators.dictionary[\"song volume\"].index, undefined, undefined, true)) / 100.0;\n        }\n        this.mixVolumeDelta = (mixVolumeEnd - this.mixVolume) / roundedSamplesPerTick;\n        let delayInputMultStart = 1.0;\n        let delayInputMultEnd = 1.0;\n        if (this.tonesAddedInThisTick) {\n            this.attentuationProgress = 0.0;\n            this.flushedSamples = 0;\n            this.flushingDelayLines = false;\n        }\n        else if (!this.flushingDelayLines) {\n            if (this.attentuationProgress == 0.0) {\n            }\n            else {\n            }\n            const secondsInTick = samplesPerTick / samplesPerSecond;\n            const progressInTick = secondsInTick / this.delayDuration;\n            const progressAtEndOfTick = this.attentuationProgress + progressInTick;\n            if (progressAtEndOfTick >= 1.0) {\n                delayInputMultEnd = 0.0;\n            }\n            this.attentuationProgress = progressAtEndOfTick;\n            if (this.attentuationProgress >= 1.0) {\n                this.flushingDelayLines = true;\n            }\n        }\n        else {\n            delayInputMultStart = 0.0;\n            delayInputMultEnd = 0.0;\n            this.flushedSamples += roundedSamplesPerTick;\n            if (this.flushedSamples >= this.totalDelaySamples) {\n                this.deactivateAfterThisTick = true;\n            }\n        }\n        this.delayInputMult = delayInputMultStart;\n        this.delayInputMultDelta = (delayInputMultEnd - delayInputMultStart) / roundedSamplesPerTick;\n        this.envelopeComputer.clearEnvelopes();\n    }\n    updateWaves(instrument, samplesPerSecond) {\n        this.volumeScale = 1.0;\n        if (instrument.type == 0) {\n            this.waveL = (this.aliases) ? Config.rawChipWaves[instrument.chipWave].samples : Config.chipWaves[instrument.chipWave].samples;\n            this.waveR = (this.aliases) ? Config.rawChipWaves[instrument.chipWave].samplesR || Config.rawChipWaves[instrument.chipWave].samples : Config.chipWaves[instrument.chipWave].samplesR || Config.chipWaves[instrument.chipWave].samples;\n            this.isUsingAdvancedLoopControls = instrument.isUsingAdvancedLoopControls;\n            this.chipWaveLoopStart = instrument.chipWaveLoopStart;\n            this.chipWaveLoopEnd = instrument.chipWaveLoopEnd;\n            this.chipWaveLoopMode = instrument.chipWaveLoopMode;\n            this.chipWavePlayBackwards = instrument.chipWavePlayBackwards;\n            this.chipWaveStartOffset = instrument.chipWaveStartOffset;\n            this.chipWaveInStereo = instrument.chipWaveInStereo;\n            this.unisonVoices = instrument.unisonVoices;\n            this.unisonSpread = instrument.unisonSpread;\n            this.unisonOffset = instrument.unisonOffset;\n            this.unisonExpression = instrument.unisonExpression;\n            this.unisonSign = instrument.unisonSign;\n        }\n        else if (instrument.type == 6) {\n            this.unisonVoices = instrument.unisonVoices;\n            this.unisonSpread = instrument.unisonSpread;\n            this.unisonOffset = instrument.unisonOffset;\n            this.unisonExpression = instrument.unisonExpression;\n            this.unisonSign = instrument.unisonSign;\n        }\n        else if (instrument.type == 9) {\n            this.waveL = (this.aliases) ? instrument.customChipWave : instrument.customChipWaveIntegral;\n            this.waveR = (this.aliases) ? instrument.customChipWave : instrument.customChipWaveIntegral;\n            this.volumeScale = 0.05;\n            this.unisonVoices = instrument.unisonVoices;\n            this.unisonSpread = instrument.unisonSpread;\n            this.unisonOffset = instrument.unisonOffset;\n            this.unisonExpression = instrument.unisonExpression;\n            this.unisonSign = instrument.unisonSign;\n        }\n        else if (instrument.type == 2) {\n            this.waveL = getDrumWave(instrument.chipNoise, inverseRealFourierTransform, scaleElementsByFactor);\n            this.unisonVoices = instrument.unisonVoices;\n            this.unisonSpread = instrument.unisonSpread;\n            this.unisonOffset = instrument.unisonOffset;\n            this.unisonExpression = instrument.unisonExpression;\n            this.unisonSign = instrument.unisonSign;\n        }\n        else if (instrument.type == 5) {\n            this.waveL = this.harmonicsWave.getCustomWave(instrument.harmonicsWave, instrument.type);\n            this.unisonVoices = instrument.unisonVoices;\n            this.unisonSpread = instrument.unisonSpread;\n            this.unisonOffset = instrument.unisonOffset;\n            this.unisonExpression = instrument.unisonExpression;\n            this.unisonSign = instrument.unisonSign;\n        }\n        else if (instrument.type == 7) {\n            this.waveL = this.harmonicsWave.getCustomWave(instrument.harmonicsWave, instrument.type);\n            this.unisonVoices = instrument.unisonVoices;\n            this.unisonSpread = instrument.unisonSpread;\n            this.unisonOffset = instrument.unisonOffset;\n            this.unisonExpression = instrument.unisonExpression;\n            this.unisonSign = instrument.unisonSign;\n        }\n        else if (instrument.type == 3) {\n            this.waveL = this.spectrumWave.getCustomWave(instrument.spectrumWave, 8);\n            this.unisonVoices = instrument.unisonVoices;\n            this.unisonSpread = instrument.unisonSpread;\n            this.unisonOffset = instrument.unisonOffset;\n            this.unisonExpression = instrument.unisonExpression;\n            this.unisonSign = instrument.unisonSign;\n        }\n        else if (instrument.type == 4) {\n            for (let i = 0; i < Config.drumCount; i++) {\n                this.drumsetSpectrumWaves[i].getCustomWave(instrument.drumsetSpectrumWaves[i], InstrumentState._drumsetIndexToSpectrumOctave(i));\n            }\n            this.waveL = null;\n            this.unisonVoices = instrument.unisonVoices;\n            this.unisonSpread = instrument.unisonSpread;\n            this.unisonOffset = instrument.unisonOffset;\n            this.unisonExpression = instrument.unisonExpression;\n            this.unisonSign = instrument.unisonSign;\n        }\n        else {\n            this.waveL = null;\n        }\n    }\n    getDrumsetWave(pitch) {\n        if (this.type == 4) {\n            return this.drumsetSpectrumWaves[pitch].wave;\n        }\n        else {\n            throw new Error(\"Unhandled instrument type in getDrumsetWave\");\n        }\n    }\n    static drumsetIndexReferenceDelta(index) {\n        return Instrument.frequencyFromPitch(Config.spectrumBasePitch + index * 6) / 44100;\n    }\n    static _drumsetIndexToSpectrumOctave(index) {\n        return 15 + Math.log2(InstrumentState.drumsetIndexReferenceDelta(index));\n    }\n    effectsIncludeType(type) {\n        for (let i = 0; i < this.effects.length; i++)\n            if (this.effects[i] != null && this.effects[i].type == type)\n                return true;\n        return false;\n    }\n}\n//# sourceMappingURL=InstrumentState.js.map","class EventManager {\n    constructor() {\n        this.activeEvents = [];\n        this.listeners = {};\n        this.activeEvents = [];\n        this.listeners = {};\n    }\n    raise(eventType, eventData, extraEventData) {\n        if (this.listeners[eventType] == undefined) {\n            return;\n        }\n        this.activeEvents.push(eventType);\n        for (let i = 0; i < this.listeners[eventType].length; i++) {\n            this.listeners[eventType][i](eventData, extraEventData);\n        }\n        this.activeEvents.pop();\n    }\n    listen(eventType, callback) {\n        if (this.listeners[eventType] == undefined) {\n            this.listeners[eventType] = [];\n        }\n        this.listeners[eventType].push(callback);\n    }\n    unlisten(eventType, callback) {\n        if (this.listeners[eventType] == undefined) {\n            return;\n        }\n        const lisen = this.listeners[eventType].indexOf(callback);\n        if (lisen != -1) {\n            this.listeners[eventType].splice(lisen, 1);\n        }\n    }\n    unlistenAll(eventType) {\n        if (this.listeners[eventType] == undefined) {\n            return;\n        }\n        this.listeners[eventType] = [];\n    }\n}\nexport const events = new EventManager();\n//# sourceMappingURL=Events.js.map","import { Config, getArpeggioPitchIndex, getPulseWidthRatio, effectsIncludePitchShift, effectsIncludeDetune, effectsIncludeVibrato } from \"./SynthConfig\";\nimport { Deque } from \"./Deque\";\nimport { Song } from \"./Song\";\nimport { ChannelState } from \"./ChannelState\";\nimport { Instrument } from \"./Instrument\";\nimport { PickedString, InstrumentState } from \"./InstrumentState\";\nimport { EnvelopeComputer } from \"./EnvelopeComputer\";\nimport { FilterSettings, FilterControlPoint } from \"./Filter\";\nimport { events } from \"../global/Events\";\nimport { FilterCoefficients, FrequencyResponse, DynamicBiquadFilter } from \"./filtering\";\nimport { clamp, detuneToCents, fittingPowerOfTwo } from \"./utils\";\nconst epsilon = (1.0e-24);\nexport class Tone {\n    constructor() {\n        this.pitches = Array(Config.maxChordSize + 2).fill(0);\n        this.pitchCount = 0;\n        this.chordSize = 0;\n        this.drumsetPitch = null;\n        this.note = null;\n        this.prevNote = null;\n        this.nextNote = null;\n        this.prevNotePitchIndex = 0;\n        this.nextNotePitchIndex = 0;\n        this.freshlyAllocated = true;\n        this.atNoteStart = false;\n        this.isOnLastTick = false;\n        this.passedEndOfNote = false;\n        this.forceContinueAtStart = false;\n        this.forceContinueAtEnd = false;\n        this.noteStartPart = 0;\n        this.noteEndPart = 0;\n        this.ticksSinceReleased = 0;\n        this.liveInputSamplesHeld = 0;\n        this.lastInterval = 0;\n        this.chipWaveStartOffset = 0;\n        this.noiseSample = 0.0;\n        this.noiseSampleA = 0.0;\n        this.noiseSampleB = 0.0;\n        this.stringSustainStart = 0;\n        this.stringSustainEnd = 0;\n        this.noiseSamples = [];\n        this.phases = [];\n        this.operatorWaves = [];\n        this.phaseDeltas = [];\n        this.directions = [];\n        this.chipWaveCompletions = [];\n        this.chipWavePrevWavesL = [];\n        this.chipWavePrevWavesR = [];\n        this.chipWaveCompletionsLastWaveL = [];\n        this.chipWaveCompletionsLastWaveR = [];\n        this.phaseDeltaScales = [];\n        this.expression = 0.0;\n        this.expressionDelta = 0.0;\n        this.operatorExpressions = [];\n        this.operatorExpressionDeltas = [];\n        this.prevPitchExpressions = Array(Config.maxPitchOrOperatorCount).fill(null);\n        this.prevVibrato = null;\n        this.prevStringDecay = null;\n        this.pulseWidth = 0.0;\n        this.pulseWidthDelta = 0.0;\n        this.decimalOffset = 0.0;\n        this.supersawDynamism = 0.0;\n        this.supersawDynamismDelta = 0.0;\n        this.supersawUnisonDetunes = [];\n        this.supersawShape = 0.0;\n        this.supersawShapeDelta = 0.0;\n        this.supersawDelayLength = 0.0;\n        this.supersawDelayLengthDelta = 0.0;\n        this.supersawDelayLine = null;\n        this.supersawDelayIndex = -1;\n        this.supersawPrevPhaseDelta = null;\n        this.pickedStrings = [];\n        this.noteFiltersL = [];\n        this.noteFiltersR = [];\n        this.noteFilterCount = 0;\n        this.initialNoteFilterInputL1 = 0.0;\n        this.initialNoteFilterInputR1 = 0.0;\n        this.initialNoteFilterInputL2 = 0.0;\n        this.initialNoteFilterInputR2 = 0.0;\n        this.specialIntervalExpressionMult = 1.0;\n        this.feedbackOutputs = [];\n        this.feedbackMult = 0.0;\n        this.feedbackDelta = 0.0;\n        this.stereoVolumeLStart = 0.0;\n        this.stereoVolumeRStart = 0.0;\n        this.stereoVolumeLDelta = 0.0;\n        this.stereoVolumeRDelta = 0.0;\n        this.stereoDelayStart = 0.0;\n        this.stereoDelayEnd = 0.0;\n        this.stereoDelayDelta = 0.0;\n        this.customVolumeStart = 0.0;\n        this.customVolumeEnd = 0.0;\n        this.filterResonanceStart = 0.0;\n        this.filterResonanceDelta = 0.0;\n        this.isFirstOrder = false;\n        this.envelopeComputer = new EnvelopeComputer();\n        this.reset();\n    }\n    reset() {\n        for (let i = 0; i < Config.unisonVoicesMax; i++) {\n            this.noiseSamples[i] = 0.0;\n        }\n        for (let i = 0; i < Config.maxPitchOrOperatorCount; i++) {\n            this.phases[i] = 0.0;\n            this.directions[i] = 1;\n            this.chipWaveCompletions[i] = 0;\n            this.chipWavePrevWavesL[i] = 0;\n            this.chipWavePrevWavesR[i] = 0;\n            this.chipWaveCompletionsLastWaveL[i] = 0;\n            this.chipWaveCompletionsLastWaveR[i] = 0;\n            this.operatorWaves[i] = Config.operatorWaves[0];\n            this.feedbackOutputs[i] = 0.0;\n            this.prevPitchExpressions[i] = null;\n        }\n        for (let i = 0; i < this.noteFilterCount; i++) {\n            this.noteFiltersL[i].resetOutput();\n            this.noteFiltersR[i].resetOutput();\n        }\n        this.noteFilterCount = 0;\n        this.initialNoteFilterInputL1 = 0.0;\n        this.initialNoteFilterInputR1 = 0.0;\n        this.initialNoteFilterInputL2 = 0.0;\n        this.initialNoteFilterInputR2 = 0.0;\n        this.liveInputSamplesHeld = 0;\n        this.supersawDelayIndex = -1;\n        for (const pickedString of this.pickedStrings) {\n            pickedString.reset();\n        }\n        this.envelopeComputer.reset();\n        this.prevVibrato = null;\n        this.prevStringDecay = null;\n        this.supersawPrevPhaseDelta = null;\n        this.drumsetPitch = null;\n    }\n}\nexport class Synth {\n    syncSongState() {\n        const channelCount = this.song.getChannelCount();\n        for (let i = this.channels.length; i < channelCount; i++) {\n            this.channels[i] = new ChannelState();\n        }\n        this.channels.length = channelCount;\n        for (let i = 0; i < channelCount; i++) {\n            const channel = this.song.channels[i];\n            const channelState = this.channels[i];\n            for (let j = channelState.instruments.length; j < channel.instruments.length; j++) {\n                channelState.instruments[j] = new InstrumentState();\n            }\n            channelState.instruments.length = channel.instruments.length;\n            if (channelState.muted != channel.muted) {\n                channelState.muted = channel.muted;\n                if (channelState.muted) {\n                    for (const instrumentState of channelState.instruments) {\n                        instrumentState.resetAllEffects();\n                    }\n                }\n            }\n        }\n    }\n    initModFilters(song) {\n        if (song != null) {\n            song.tmpEqFilterStart = song.eqFilter;\n            song.tmpEqFilterEnd = null;\n            for (let channelIndex = 0; channelIndex < song.getChannelCount(); channelIndex++) {\n                for (let instrumentIndex = 0; instrumentIndex < song.channels[channelIndex].instruments.length; instrumentIndex++) {\n                    const instrument = song.channels[channelIndex].instruments[instrumentIndex];\n                    for (let effectIndex = 0; effectIndex < song.channels[channelIndex].instruments[instrumentIndex].effects.length; effectIndex++) {\n                        const effect = song.channels[channelIndex].instruments[instrumentIndex].effects[effectIndex];\n                        effect.tmpEqFilterStart = effect.eqFilter;\n                        effect.tmpEqFilterEnd = null;\n                    }\n                    instrument.tmpNoteFilterStart = instrument.noteFilter;\n                    instrument.tmpNoteFilterEnd = null;\n                }\n            }\n        }\n    }\n    warmUpSynthesizer(song) {\n        if (song != null) {\n            this.syncSongState();\n            const samplesPerTick = this.getSamplesPerTick();\n            for (let channelIndex = 0; channelIndex < song.getChannelCount(); channelIndex++) {\n                for (let instrumentIndex = 0; instrumentIndex < song.channels[channelIndex].instruments.length; instrumentIndex++) {\n                    const instrument = song.channels[channelIndex].instruments[instrumentIndex];\n                    const instrumentState = this.channels[channelIndex].instruments[instrumentIndex];\n                    Synth.getInstrumentSynthFunction(instrument);\n                    instrumentState.vibratoTime = 0;\n                    instrumentState.nextVibratoTime = 0;\n                    for (let envelopeIndex = 0; envelopeIndex < Config.maxEnvelopeCount + 1; envelopeIndex++)\n                        instrumentState.envelopeTime[envelopeIndex] = 0;\n                    instrumentState.arpTime = 0;\n                    instrumentState.updateWaves(instrument, this.samplesPerSecond);\n                    instrumentState.allocateNecessaryBuffers(this, instrument, samplesPerTick);\n                }\n            }\n        }\n        var dummyArray = new Float32Array(1);\n        this.isPlayingSong = true;\n        this.synthesize(dummyArray, dummyArray, 1, true);\n        this.isPlayingSong = false;\n    }\n    computeLatestModValues() {\n        if (this.song != null && this.song.modChannelCount > 0) {\n            let latestModTimes = [];\n            let latestModInsTimes = [];\n            this.modValues = [];\n            this.nextModValues = [];\n            this.modInsValues = [];\n            this.nextModInsValues = [];\n            this.heldMods = [];\n            for (let channel = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\n                latestModInsTimes[channel] = [];\n                this.modInsValues[channel] = [];\n                this.nextModInsValues[channel] = [];\n                for (let instrument = 0; instrument < this.song.channels[channel].instruments.length; instrument++) {\n                    this.modInsValues[channel][instrument] = [];\n                    this.nextModInsValues[channel][instrument] = [];\n                    latestModInsTimes[channel][instrument] = [];\n                }\n            }\n            let currentPart = this.beat * Config.partsPerBeat + this.part;\n            for (let channelIndex = this.song.pitchChannelCount + this.song.noiseChannelCount; channelIndex < this.song.getChannelCount(); channelIndex++) {\n                if (!(this.song.channels[channelIndex].muted)) {\n                    let pattern;\n                    for (let currentBar = this.bar; currentBar >= 0; currentBar--) {\n                        pattern = this.song.getPattern(channelIndex, currentBar);\n                        if (pattern != null) {\n                            let instrumentIdx = pattern.instruments[0];\n                            let instrument = this.song.channels[channelIndex].instruments[instrumentIdx];\n                            let latestPinParts = [];\n                            let latestPinValues = [];\n                            let partsInBar = (currentBar == this.bar)\n                                ? currentPart\n                                : this.findPartsInBar(currentBar);\n                            for (const note of pattern.notes) {\n                                if (note.start <= partsInBar && (latestPinParts[Config.modCount - 1 - note.pitches[0]] == null || note.end > latestPinParts[Config.modCount - 1 - note.pitches[0]])) {\n                                    if (note.start == partsInBar) {\n                                        latestPinParts[Config.modCount - 1 - note.pitches[0]] = note.start;\n                                        latestPinValues[Config.modCount - 1 - note.pitches[0]] = note.pins[0].size;\n                                    }\n                                    if (note.end <= partsInBar) {\n                                        latestPinParts[Config.modCount - 1 - note.pitches[0]] = note.end;\n                                        latestPinValues[Config.modCount - 1 - note.pitches[0]] = note.pins[note.pins.length - 1].size;\n                                    }\n                                    else {\n                                        latestPinParts[Config.modCount - 1 - note.pitches[0]] = partsInBar;\n                                        for (let pinIdx = 0; pinIdx < note.pins.length; pinIdx++) {\n                                            if (note.pins[pinIdx].time + note.start > partsInBar) {\n                                                const transitionLength = note.pins[pinIdx].time - note.pins[pinIdx - 1].time;\n                                                const toNextBarLength = partsInBar - note.start - note.pins[pinIdx - 1].time;\n                                                const deltaVolume = note.pins[pinIdx].size - note.pins[pinIdx - 1].size;\n                                                latestPinValues[Config.modCount - 1 - note.pitches[0]] = Math.round(note.pins[pinIdx - 1].size + deltaVolume * toNextBarLength / transitionLength);\n                                                pinIdx = note.pins.length;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                            for (let mod = 0; mod < Config.modCount; mod++) {\n                                if (latestPinParts[mod] != null) {\n                                    if (Config.modulators[instrument.modulators[mod]].forSong) {\n                                        const songFilterParam = instrument.modulators[mod] == Config.modulators.dictionary[\"song eq\"].index;\n                                        if (latestModTimes[instrument.modulators[mod]] == null || currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod] > latestModTimes[instrument.modulators[mod]]) {\n                                            if (songFilterParam) {\n                                                let tgtSong = this.song;\n                                                if (instrument.modFilterTypes[mod] == 0) {\n                                                    tgtSong.tmpEqFilterStart = tgtSong.eqSubFilters[latestPinValues[mod]];\n                                                }\n                                                else {\n                                                    for (let i = 0; i < Config.filterMorphCount; i++) {\n                                                        if (tgtSong.tmpEqFilterStart != null && tgtSong.tmpEqFilterStart == tgtSong.eqSubFilters[i]) {\n                                                            tgtSong.tmpEqFilterStart = new FilterSettings();\n                                                            tgtSong.tmpEqFilterStart.fromJsonObject(tgtSong.eqSubFilters[i].toJsonObject());\n                                                            i = Config.filterMorphCount;\n                                                        }\n                                                    }\n                                                    if (tgtSong.tmpEqFilterStart != null && Math.floor((instrument.modFilterTypes[mod] - 1) / 2) < tgtSong.tmpEqFilterStart.controlPointCount) {\n                                                        if (instrument.modFilterTypes[mod] % 2)\n                                                            tgtSong.tmpEqFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].freq = latestPinValues[mod];\n                                                        else\n                                                            tgtSong.tmpEqFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].gain = latestPinValues[mod];\n                                                    }\n                                                }\n                                                tgtSong.tmpEqFilterEnd = tgtSong.tmpEqFilterStart;\n                                            }\n                                            for (let i = 0; i < instrument.modChannels[mod].length; i++)\n                                                this.setModValue(latestPinValues[mod], latestPinValues[mod], instrument.modChannels[mod][i], instrument.modInstruments[mod][i], instrument.modulators[mod]);\n                                            latestModTimes[instrument.modulators[mod]] = currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod];\n                                        }\n                                    }\n                                    else {\n                                        let usedChannels = [];\n                                        let usedInstruments = [];\n                                        if (instrument.modInstruments[mod][0] == this.song.channels[instrument.modChannels[mod][0]].instruments.length) {\n                                            for (let i = 0; i < this.song.channels[instrument.modChannels[mod][0]].instruments.length; i++) {\n                                                usedChannels.push(instrument.modChannels[mod][0]);\n                                                usedInstruments.push(i);\n                                            }\n                                        }\n                                        else if (instrument.modInstruments[mod][0] > this.song.channels[instrument.modChannels[mod][0]].instruments.length) {\n                                            const tgtPattern = this.song.getPattern(instrument.modChannels[mod][0], currentBar);\n                                            if (tgtPattern != null) {\n                                                usedChannels.push(instrument.modChannels[mod][0]);\n                                                usedInstruments = tgtPattern.instruments;\n                                            }\n                                        }\n                                        else {\n                                            for (let i = 0; i < instrument.modChannels[mod].length; i++) {\n                                                usedChannels.push(instrument.modChannels[mod][i]);\n                                                usedInstruments.push(instrument.modInstruments[mod][i]);\n                                            }\n                                        }\n                                        for (let instrumentIndex = 0; instrumentIndex < usedInstruments.length; instrumentIndex++) {\n                                            const eqFilterParam = instrument.modulators[mod] == Config.modulators.dictionary[\"post eq\"].index;\n                                            const noteFilterParam = instrument.modulators[mod] == Config.modulators.dictionary[\"pre eq\"].index;\n                                            let modulatorAdjust = instrument.modulators[mod];\n                                            if (eqFilterParam) {\n                                                modulatorAdjust = Config.modulators.length + (instrument.modFilterTypes[mod] | 0);\n                                            }\n                                            else if (noteFilterParam) {\n                                                modulatorAdjust = Config.modulators.length + 1 + (2 * Config.filterMaxPoints) + (instrument.modFilterTypes[mod] | 0);\n                                            }\n                                            if (latestModInsTimes[instrument.modChannels[mod][instrumentIndex]][usedInstruments[instrumentIndex]][modulatorAdjust] == null\n                                                || currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod] > latestModInsTimes[instrument.modChannels[mod][instrumentIndex]][usedInstruments[instrumentIndex]][modulatorAdjust]) {\n                                                if (eqFilterParam) {\n                                                    let tgtInstrument = this.song.channels[instrument.modChannels[mod][instrumentIndex]].instruments[usedInstruments[instrumentIndex]];\n                                                    for (let effectIndex = 0; effectIndex < tgtInstrument.effects.length; effectIndex++) {\n                                                        let tgtEffect = tgtInstrument.effects[effectIndex];\n                                                        if (instrument.modFilterTypes[mod] == 0) {\n                                                            tgtEffect.tmpEqFilterStart = tgtEffect.eqSubFilters[latestPinValues[mod]];\n                                                        }\n                                                        else {\n                                                            for (let i = 0; i < Config.filterMorphCount; i++) {\n                                                                if (tgtEffect.tmpEqFilterStart != null && tgtEffect.tmpEqFilterStart == tgtEffect.eqSubFilters[i]) {\n                                                                    tgtEffect.tmpEqFilterStart = new FilterSettings();\n                                                                    tgtEffect.tmpEqFilterStart.fromJsonObject(tgtEffect.eqSubFilters[i].toJsonObject());\n                                                                    i = Config.filterMorphCount;\n                                                                }\n                                                            }\n                                                            if (tgtEffect.tmpEqFilterStart != null && Math.floor((instrument.modFilterTypes[mod] - 1) / 2) < tgtEffect.tmpEqFilterStart.controlPointCount) {\n                                                                if (instrument.modFilterTypes[mod] % 2)\n                                                                    tgtEffect.tmpEqFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].freq = latestPinValues[mod];\n                                                                else\n                                                                    tgtEffect.tmpEqFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].gain = latestPinValues[mod];\n                                                            }\n                                                        }\n                                                        tgtEffect.tmpEqFilterEnd = tgtEffect.tmpEqFilterStart;\n                                                    }\n                                                }\n                                                else if (noteFilterParam) {\n                                                    let tgtInstrument = this.song.channels[instrument.modChannels[mod][instrumentIndex]].instruments[usedInstruments[instrumentIndex]];\n                                                    if (instrument.modFilterTypes[mod] == 0) {\n                                                        tgtInstrument.tmpNoteFilterStart = tgtInstrument.noteSubFilters[latestPinValues[mod]];\n                                                    }\n                                                    else {\n                                                        for (let i = 0; i < Config.filterMorphCount; i++) {\n                                                            if (tgtInstrument.tmpNoteFilterStart != null && tgtInstrument.tmpNoteFilterStart == tgtInstrument.noteSubFilters[i]) {\n                                                                tgtInstrument.tmpNoteFilterStart = new FilterSettings();\n                                                                tgtInstrument.tmpNoteFilterStart.fromJsonObject(tgtInstrument.noteSubFilters[i].toJsonObject());\n                                                                i = Config.filterMorphCount;\n                                                            }\n                                                        }\n                                                        if (tgtInstrument.tmpNoteFilterStart != null && Math.floor((instrument.modFilterTypes[mod] - 1) / 2) < tgtInstrument.tmpNoteFilterStart.controlPointCount) {\n                                                            if (instrument.modFilterTypes[mod] % 2)\n                                                                tgtInstrument.tmpNoteFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].freq = latestPinValues[mod];\n                                                            else\n                                                                tgtInstrument.tmpNoteFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].gain = latestPinValues[mod];\n                                                        }\n                                                    }\n                                                    tgtInstrument.tmpNoteFilterEnd = tgtInstrument.tmpNoteFilterStart;\n                                                }\n                                                else\n                                                    this.setModValue(latestPinValues[mod], latestPinValues[mod], instrument.modChannels[mod][instrumentIndex], usedInstruments[instrumentIndex], modulatorAdjust);\n                                                latestModInsTimes[instrument.modChannels[mod][instrumentIndex]][usedInstruments[instrumentIndex]][modulatorAdjust] = currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod];\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n    determineInvalidModulators(instrument) {\n        if (this.song == null)\n            return;\n        for (let mod = 0; mod < Config.modCount; mod++) {\n            instrument.invalidModulators[mod] = true;\n            if (instrument.modChannels[mod][0] == -1) {\n                if (instrument.modulators[mod] != 0)\n                    instrument.invalidModulators[mod] = false;\n                continue;\n            }\n            for (let channelIndex = 0; channelIndex < instrument.modChannels[mod].length; channelIndex++) {\n                const channel = this.song.channels[instrument.modChannels[mod][channelIndex]];\n                if (channel == null)\n                    continue;\n                let tgtInstrumentList = [];\n                if (instrument.modInstruments[mod][channelIndex] >= channel.instruments.length) {\n                    tgtInstrumentList = channel.instruments;\n                }\n                else {\n                    tgtInstrumentList = [channel.instruments[instrument.modInstruments[mod][channelIndex]]];\n                }\n                for (let i = 0; i < tgtInstrumentList.length; i++) {\n                    const tgtInstrument = tgtInstrumentList[i];\n                    const tgtEffect = tgtInstrument.effects[0];\n                    if (tgtInstrument == null)\n                        continue;\n                    const str = Config.modulators[instrument.modulators[mod]].name;\n                    if (!(Config.modulators[instrument.modulators[mod]].associatedEffect != 11 && !(tgtInstrument.effectsIncludeType(Config.modulators[instrument.modulators[mod]].associatedEffect))) && !(Config.modulators[instrument.modulators[mod]].associatedMDEffect != 6 && !(tgtInstrument.mdeffects & (1 << Config.modulators[instrument.modulators[mod]].associatedMDEffect)))\n                        || ((tgtInstrument.type != 1 && tgtInstrument.type != 11) && (str == \"fm slider 1\" || str == \"fm slider 2\" || str == \"fm slider 3\" || str == \"fm slider 4\" || str == \"fm feedback\"))\n                        || tgtInstrument.type != 11 && (str == \"fm slider 5\" || str == \"fm slider 6\")\n                        || ((tgtInstrument.type != 6 && tgtInstrument.type != 8) && (str == \"pulse width\" || str == \"decimal offset\"))\n                        || ((tgtInstrument.type != 8) && (str == \"dynamism\" || str == \"spread\" || str == \"saw shape\"))\n                        || (!tgtInstrument.getChord().arpeggiates && (str == \"arp speed\" || str == \"reset arp\"))\n                        || (tgtEffect.eqFilterType && str == \"post eq\")\n                        || (!tgtEffect.eqFilterType && (str == \"post eq cut\" || str == \"post eq peak\"))\n                        || (str == \"post eq\" && Math.floor((instrument.modFilterTypes[mod] + 1) / 2) > tgtInstrument.getLargestControlPointCount(false))\n                        || (tgtInstrument.noteFilterType && str == \"pre eq\")\n                        || (!tgtInstrument.noteFilterType && (str == \"pre eq cut\" || str == \"pre eq peak\"))\n                        || (str == \"pre eq\" && Math.floor((instrument.modFilterTypes[mod] + 1) / 2) > tgtInstrument.getLargestControlPointCount(true))) {\n                        instrument.invalidModulators[mod] = false;\n                        i = tgtInstrumentList.length;\n                    }\n                }\n            }\n        }\n    }\n    static operatorAmplitudeCurve(amplitude) {\n        return (Math.pow(16.0, amplitude / 15.0) - 1.0) / 15.0;\n    }\n    get playing() {\n        return this.isPlayingSong;\n    }\n    get recording() {\n        return this.isRecording;\n    }\n    get playhead() {\n        return this.playheadInternal;\n    }\n    set playhead(value) {\n        if (this.song != null) {\n            this.playheadInternal = Math.max(0, Math.min(this.song.barCount, value));\n            let remainder = this.playheadInternal;\n            this.bar = Math.floor(remainder);\n            remainder = this.song.beatsPerBar * (remainder - this.bar);\n            this.beat = Math.floor(remainder);\n            remainder = Config.partsPerBeat * (remainder - this.beat);\n            this.part = Math.floor(remainder);\n            remainder = Config.ticksPerPart * (remainder - this.part);\n            this.tick = Math.floor(remainder);\n            this.tickSampleCountdown = 0;\n            this.isAtStartOfTick = true;\n            this.prevBar = null;\n        }\n    }\n    getSamplesPerBar() {\n        if (this.song == null)\n            throw new Error();\n        return this.getSamplesPerTick() * Config.ticksPerPart * Config.partsPerBeat * this.song.beatsPerBar;\n    }\n    getTicksIntoBar() {\n        return (this.beat * Config.partsPerBeat + this.part) * Config.ticksPerPart + this.tick;\n    }\n    getCurrentPart() {\n        return (this.beat * Config.partsPerBeat + this.part);\n    }\n    findPartsInBar(bar) {\n        if (this.song == null)\n            return 0;\n        let partsInBar = Config.partsPerBeat * this.song.beatsPerBar;\n        for (let channel = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\n            let pattern = this.song.getPattern(channel, bar);\n            if (pattern != null) {\n                let instrument = this.song.channels[channel].instruments[pattern.instruments[0]];\n                for (let mod = 0; mod < Config.modCount; mod++) {\n                    if (instrument.modulators[mod] == Config.modulators.dictionary[\"next bar\"].index) {\n                        for (const note of pattern.notes) {\n                            if (note.pitches[0] == (Config.modCount - 1 - mod)) {\n                                if (partsInBar > note.start)\n                                    partsInBar = note.start;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return partsInBar;\n    }\n    getTotalSamples(enableIntro, enableOutro, loop) {\n        if (this.song == null)\n            return -1;\n        let startBar = enableIntro ? 0 : this.song.loopStart;\n        let endBar = enableOutro ? this.song.barCount : (this.song.loopStart + this.song.loopLength);\n        let hasTempoMods = false;\n        let hasNextBarMods = false;\n        let prevTempo = this.song.tempo;\n        for (let channel = this.song.getChannelCount() - 1; channel >= this.song.pitchChannelCount + this.song.noiseChannelCount; channel--) {\n            for (let bar = startBar; bar < endBar; bar++) {\n                let pattern = this.song.getPattern(channel, bar);\n                if (pattern != null) {\n                    let instrument = this.song.channels[channel].instruments[pattern.instruments[0]];\n                    for (let mod = 0; mod < Config.modCount; mod++) {\n                        if (instrument.modulators[mod] == Config.modulators.dictionary[\"tempo\"].index) {\n                            hasTempoMods = true;\n                        }\n                        if (instrument.modulators[mod] == Config.modulators.dictionary[\"next bar\"].index) {\n                            hasNextBarMods = true;\n                        }\n                    }\n                }\n            }\n        }\n        if (startBar > 0) {\n            let latestTempoPin = null;\n            let latestTempoValue = 0;\n            for (let bar = startBar - 1; bar >= 0; bar--) {\n                for (let channel = this.song.getChannelCount() - 1; channel >= this.song.pitchChannelCount + this.song.noiseChannelCount; channel--) {\n                    let pattern = this.song.getPattern(channel, bar);\n                    if (pattern != null) {\n                        let instrumentIdx = pattern.instruments[0];\n                        let instrument = this.song.channels[channel].instruments[instrumentIdx];\n                        let partsInBar = this.findPartsInBar(bar);\n                        for (const note of pattern.notes) {\n                            if (instrument.modulators[Config.modCount - 1 - note.pitches[0]] == Config.modulators.dictionary[\"tempo\"].index) {\n                                if (note.start < partsInBar && (latestTempoPin == null || note.end > latestTempoPin)) {\n                                    if (note.end <= partsInBar) {\n                                        latestTempoPin = note.end;\n                                        latestTempoValue = note.pins[note.pins.length - 1].size;\n                                    }\n                                    else {\n                                        latestTempoPin = partsInBar;\n                                        for (let pinIdx = 0; pinIdx < note.pins.length; pinIdx++) {\n                                            if (note.pins[pinIdx].time + note.start > partsInBar) {\n                                                const transitionLength = note.pins[pinIdx].time - note.pins[pinIdx - 1].time;\n                                                const toNextBarLength = partsInBar - note.start - note.pins[pinIdx - 1].time;\n                                                const deltaVolume = note.pins[pinIdx].size - note.pins[pinIdx - 1].size;\n                                                latestTempoValue = Math.round(note.pins[pinIdx - 1].size + deltaVolume * toNextBarLength / transitionLength);\n                                                pinIdx = note.pins.length;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                if (latestTempoPin != null) {\n                    prevTempo = latestTempoValue + Config.modulators.dictionary[\"tempo\"].convertRealFactor;\n                    bar = -1;\n                }\n            }\n        }\n        if (hasTempoMods || hasNextBarMods) {\n            let bar = startBar;\n            let ended = false;\n            let totalSamples = 0;\n            while (!ended) {\n                let partsInBar = Config.partsPerBeat * this.song.beatsPerBar;\n                let currentPart = 0;\n                if (hasNextBarMods) {\n                    partsInBar = this.findPartsInBar(bar);\n                }\n                if (hasTempoMods) {\n                    let foundMod = false;\n                    for (let channel = this.song.getChannelCount() - 1; channel >= this.song.pitchChannelCount + this.song.noiseChannelCount; channel--) {\n                        if (foundMod == false) {\n                            let pattern = this.song.getPattern(channel, bar);\n                            if (pattern != null) {\n                                let instrument = this.song.channels[channel].instruments[pattern.instruments[0]];\n                                for (let mod = 0; mod < Config.modCount; mod++) {\n                                    if (foundMod == false && instrument.modulators[mod] == Config.modulators.dictionary[\"tempo\"].index\n                                        && pattern.notes.find(n => n.pitches[0] == (Config.modCount - 1 - mod))) {\n                                        foundMod = true;\n                                        pattern.notes.sort(function (a, b) { return (a.start == b.start) ? a.pitches[0] - b.pitches[0] : a.start - b.start; });\n                                        for (const note of pattern.notes) {\n                                            if (note.pitches[0] == (Config.modCount - 1 - mod)) {\n                                                totalSamples += (Math.min(partsInBar - currentPart, note.start - currentPart)) * Config.ticksPerPart * this.getSamplesPerTickSpecificBPM(prevTempo);\n                                                if (note.start < partsInBar) {\n                                                    for (let pinIdx = 1; pinIdx < note.pins.length; pinIdx++) {\n                                                        if (note.pins[pinIdx - 1].time + note.start <= partsInBar) {\n                                                            const tickLength = Config.ticksPerPart * Math.min(partsInBar - (note.start + note.pins[pinIdx - 1].time), note.pins[pinIdx].time - note.pins[pinIdx - 1].time);\n                                                            const prevPinTempo = note.pins[pinIdx - 1].size + Config.modulators.dictionary[\"tempo\"].convertRealFactor;\n                                                            let currPinTempo = note.pins[pinIdx].size + Config.modulators.dictionary[\"tempo\"].convertRealFactor;\n                                                            if (note.pins[pinIdx].time + note.start > partsInBar) {\n                                                                currPinTempo = note.pins[pinIdx - 1].size + (note.pins[pinIdx].size - note.pins[pinIdx - 1].size) * (partsInBar - (note.start + note.pins[pinIdx - 1].time)) / (note.pins[pinIdx].time - note.pins[pinIdx - 1].time) + Config.modulators.dictionary[\"tempo\"].convertRealFactor;\n                                                            }\n                                                            let bpmScalar = Config.partsPerBeat * Config.ticksPerPart / 60;\n                                                            if (currPinTempo != prevPinTempo) {\n                                                                totalSamples += -this.samplesPerSecond * tickLength * (Math.log(bpmScalar * currPinTempo * tickLength) - Math.log(bpmScalar * prevPinTempo * tickLength)) / (bpmScalar * (prevPinTempo - currPinTempo));\n                                                            }\n                                                            else {\n                                                                totalSamples += tickLength * this.getSamplesPerTickSpecificBPM(currPinTempo);\n                                                            }\n                                                            prevTempo = currPinTempo;\n                                                        }\n                                                        currentPart = Math.min(note.start + note.pins[pinIdx].time, partsInBar);\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n                totalSamples += (partsInBar - currentPart) * Config.ticksPerPart * this.getSamplesPerTickSpecificBPM(prevTempo);\n                bar++;\n                if (loop != 0 && bar == this.song.loopStart + this.song.loopLength) {\n                    bar = this.song.loopStart;\n                    if (loop > 0)\n                        loop--;\n                }\n                if (bar >= endBar) {\n                    ended = true;\n                }\n            }\n            return Math.ceil(totalSamples);\n        }\n        else {\n            return this.getSamplesPerBar() * this.getTotalBars(enableIntro, enableOutro, loop);\n        }\n    }\n    getTotalBars(enableIntro, enableOutro, useLoopCount = this.loopRepeatCount) {\n        if (this.song == null)\n            throw new Error();\n        let bars = this.song.loopLength * (useLoopCount + 1);\n        if (enableIntro)\n            bars += this.song.loopStart;\n        if (enableOutro)\n            bars += this.song.barCount - (this.song.loopStart + this.song.loopLength);\n        return bars;\n    }\n    constructor(song = null) {\n        this.samplesPerSecond = 44100;\n        this.song = null;\n        this.preferLowerLatency = false;\n        this.anticipatePoorPerformance = false;\n        this.liveInputDuration = 0;\n        this.liveBassInputDuration = 0;\n        this.liveInputStarted = false;\n        this.liveBassInputStarted = false;\n        this.liveInputPitches = [];\n        this.liveBassInputPitches = [];\n        this.liveInputChannel = 0;\n        this.liveBassInputChannel = 0;\n        this.liveInputInstruments = [];\n        this.liveBassInputInstruments = [];\n        this.loopRepeatCount = -1;\n        this.volume = 1.0;\n        this.oscRefreshEventTimer = 0;\n        this.oscEnabled = true;\n        this.enableMetronome = false;\n        this.countInMetronome = false;\n        this.renderingSong = false;\n        this.heldMods = [];\n        this.wantToSkip = false;\n        this.playheadInternal = 0.0;\n        this.bar = 0;\n        this.prevBar = null;\n        this.nextBar = null;\n        this.beat = 0;\n        this.part = 0;\n        this.tick = 0;\n        this.isAtStartOfTick = true;\n        this.isAtEndOfTick = true;\n        this.tickSampleCountdown = 0;\n        this.modValues = [];\n        this.modInsValues = [];\n        this.nextModValues = [];\n        this.nextModInsValues = [];\n        this.isPlayingSong = false;\n        this.isRecording = false;\n        this.liveInputEndTime = 0.0;\n        this.browserAutomaticallyClearsAudioBuffer = true;\n        this.tempDrumSetControlPoint = new FilterControlPoint();\n        this.tempFrequencyResponse = new FrequencyResponse();\n        this.loopBarStart = -1;\n        this.loopBarEnd = -1;\n        this.channels = [];\n        this.tonePool = new Deque();\n        this.tempMatchedPitchTones = Array(Config.maxChordSize).fill(null);\n        this.startedMetronome = false;\n        this.metronomeSamplesRemaining = -1;\n        this.metronomeAmplitude = 0.0;\n        this.metronomePrevAmplitude = 0.0;\n        this.metronomeFilter = 0.0;\n        this.limit = 0.0;\n        this.songEqFilterVolume = 1.0;\n        this.songEqFilterVolumeDelta = 0.0;\n        this.songEqFiltersL = [];\n        this.songEqFiltersR = [];\n        this.songEqFilterCount = 0;\n        this.initialSongEqFilterInput1L = 0.0;\n        this.initialSongEqFilterInput2L = 0.0;\n        this.initialSongEqFilterInput1R = 0.0;\n        this.initialSongEqFilterInput2R = 0.0;\n        this.tempInstrumentSampleBufferL = null;\n        this.tempInstrumentSampleBufferR = null;\n        this.audioCtx = null;\n        this.scriptNode = null;\n        this.audioProcessCallback = (audioProcessingEvent) => {\n            const outputBuffer = audioProcessingEvent.outputBuffer;\n            const outputDataL = outputBuffer.getChannelData(0);\n            const outputDataR = outputBuffer.getChannelData(1);\n            if (this.browserAutomaticallyClearsAudioBuffer && (outputDataL[0] != 0.0 || outputDataR[0] != 0.0 || outputDataL[outputBuffer.length - 1] != 0.0 || outputDataR[outputBuffer.length - 1] != 0.0)) {\n                this.browserAutomaticallyClearsAudioBuffer = false;\n            }\n            if (!this.browserAutomaticallyClearsAudioBuffer) {\n                const length = outputBuffer.length;\n                for (let i = 0; i < length; i++) {\n                    outputDataL[i] = 0.0;\n                    outputDataR[i] = 0.0;\n                }\n            }\n            if (!this.isPlayingSong && performance.now() >= this.liveInputEndTime) {\n                this.deactivateAudio();\n            }\n            else {\n                this.synthesize(outputDataL, outputDataR, outputBuffer.length, this.isPlayingSong);\n                if (this.oscEnabled) {\n                    if (this.oscRefreshEventTimer <= 0) {\n                        events.raise(\"oscilloscopeUpdate\", outputDataL, outputDataR);\n                        this.oscRefreshEventTimer = 2;\n                    }\n                    else {\n                        this.oscRefreshEventTimer--;\n                    }\n                }\n            }\n        };\n        this.computeDelayBufferSizes();\n        if (song != null)\n            this.setSong(song);\n    }\n    setSong(song) {\n        if (typeof (song) == \"string\") {\n            this.song = new Song(song);\n        }\n        else if (song instanceof Song) {\n            this.song = song;\n        }\n        this.prevBar = null;\n    }\n    computeDelayBufferSizes() {\n        this.panningDelayBufferSize = fittingPowerOfTwo(this.samplesPerSecond * Config.panDelaySecondsMax);\n        this.panningDelayBufferMask = this.panningDelayBufferSize - 1;\n        this.flangerDelayBufferSize = fittingPowerOfTwo(this.samplesPerSecond * Config.flangerMaxDelay);\n        this.flangerDelayBufferMask = this.flangerDelayBufferSize - 1;\n        this.chorusDelayBufferSize = fittingPowerOfTwo(this.samplesPerSecond * Config.chorusMaxDelay);\n        this.chorusDelayBufferMask = this.chorusDelayBufferSize - 1;\n    }\n    activateAudio() {\n        const bufferSize = this.anticipatePoorPerformance ? (this.preferLowerLatency ? 2048 : 4096) : (this.preferLowerLatency ? 512 : 2048);\n        if (this.audioCtx == null || this.scriptNode == null || this.scriptNode.bufferSize != bufferSize) {\n            if (this.scriptNode != null)\n                this.deactivateAudio();\n            const latencyHint = this.anticipatePoorPerformance ? (this.preferLowerLatency ? \"balanced\" : \"playback\") : (this.preferLowerLatency ? \"interactive\" : \"balanced\");\n            this.audioCtx = this.audioCtx || new (window.AudioContext || window.webkitAudioContext)({ latencyHint: latencyHint });\n            this.samplesPerSecond = this.audioCtx.sampleRate;\n            this.scriptNode = this.audioCtx.createScriptProcessor ? this.audioCtx.createScriptProcessor(bufferSize, 0, 2) : this.audioCtx.createJavaScriptNode(bufferSize, 0, 2);\n            this.scriptNode.onaudioprocess = this.audioProcessCallback;\n            this.scriptNode.channelCountMode = 'explicit';\n            this.scriptNode.channelInterpretation = 'speakers';\n            this.scriptNode.connect(this.audioCtx.destination);\n            this.computeDelayBufferSizes();\n        }\n        this.audioCtx.resume();\n    }\n    deactivateAudio() {\n        if (this.audioCtx != null && this.scriptNode != null) {\n            this.scriptNode.disconnect(this.audioCtx.destination);\n            this.scriptNode = null;\n            if (this.audioCtx.close)\n                this.audioCtx.close();\n            this.audioCtx = null;\n        }\n    }\n    maintainLiveInput() {\n        this.activateAudio();\n        this.liveInputEndTime = performance.now() + 10000.0;\n    }\n    play() {\n        if (this.isPlayingSong)\n            return;\n        this.initModFilters(this.song);\n        this.computeLatestModValues();\n        this.activateAudio();\n        this.warmUpSynthesizer(this.song);\n        this.isPlayingSong = true;\n    }\n    pause() {\n        if (!this.isPlayingSong)\n            return;\n        this.isPlayingSong = false;\n        this.isRecording = false;\n        this.preferLowerLatency = false;\n        this.modValues = [];\n        this.nextModValues = [];\n        this.heldMods = [];\n        if (this.song != null) {\n            this.song.inVolumeCap = 0.0;\n            this.song.outVolumeCap = 0.0;\n            this.song.outVolumeCapL = 0.0;\n            this.song.outVolumeCapR = 0.0;\n            this.song.tmpEqFilterStart = null;\n            this.song.tmpEqFilterEnd = null;\n            for (let channelIndex = 0; channelIndex < this.song.pitchChannelCount + this.song.noiseChannelCount; channelIndex++) {\n                this.modInsValues[channelIndex] = [];\n                this.nextModInsValues[channelIndex] = [];\n            }\n        }\n    }\n    startRecording() {\n        this.preferLowerLatency = true;\n        this.isRecording = true;\n        this.play();\n    }\n    resetEffects() {\n        this.limit = 0.0;\n        this.freeAllTones();\n        if (this.song != null) {\n            for (const channelState of this.channels) {\n                for (const instrumentState of channelState.instruments) {\n                    instrumentState.resetAllEffects();\n                }\n            }\n        }\n    }\n    setModValue(volumeStart, volumeEnd, channelIndex, instrumentIndex, setting) {\n        let val = volumeStart + Config.modulators[setting].convertRealFactor;\n        let nextVal = volumeEnd + Config.modulators[setting].convertRealFactor;\n        if (Config.modulators[setting].forSong) {\n            if (this.modValues[setting] == null || this.modValues[setting] != val || this.nextModValues[setting] != nextVal) {\n                this.modValues[setting] = val;\n                this.nextModValues[setting] = nextVal;\n            }\n        }\n        else {\n            if (this.modInsValues[channelIndex][instrumentIndex][setting] == null\n                || this.modInsValues[channelIndex][instrumentIndex][setting] != val\n                || this.nextModInsValues[channelIndex][instrumentIndex][setting] != nextVal) {\n                this.modInsValues[channelIndex][instrumentIndex][setting] = val;\n                this.nextModInsValues[channelIndex][instrumentIndex][setting] = nextVal;\n            }\n        }\n        return val;\n    }\n    getModValue(setting, channel, instrument, nextVal) {\n        const forSong = Config.modulators[setting].forSong;\n        if (forSong) {\n            if (this.modValues[setting] != null && this.nextModValues[setting] != null) {\n                return nextVal ? this.nextModValues[setting] : this.modValues[setting];\n            }\n        }\n        else if (channel != undefined && instrument != undefined) {\n            if (this.modInsValues[channel][instrument][setting] != null && this.nextModInsValues[channel][instrument][setting] != null) {\n                return nextVal ? this.nextModInsValues[channel][instrument][setting] : this.modInsValues[channel][instrument][setting];\n            }\n        }\n        return -1;\n    }\n    isAnyModActive(channel, instrument) {\n        for (let setting = 0; setting < Config.modulators.length; setting++) {\n            if ((this.modValues != undefined && this.modValues[setting] != null)\n                || (this.modInsValues != undefined && this.modInsValues[channel] != undefined && this.modInsValues[channel][instrument] != undefined && this.modInsValues[channel][instrument][setting] != null)) {\n                return true;\n            }\n        }\n        return false;\n    }\n    unsetMod(setting, channel, instrument) {\n        if (this.isModActive(setting) || (channel != undefined && instrument != undefined && this.isModActive(setting, channel, instrument))) {\n            this.modValues[setting] = null;\n            this.nextModValues[setting] = null;\n            for (let i = 0; i < this.heldMods.length; i++) {\n                if (channel != undefined && instrument != undefined) {\n                    if (this.heldMods[i].channelIndex == channel && this.heldMods[i].instrumentIndex == instrument && this.heldMods[i].setting == setting)\n                        this.heldMods.splice(i, 1);\n                }\n                else {\n                    if (this.heldMods[i].setting == setting)\n                        this.heldMods.splice(i, 1);\n                }\n            }\n            if (channel != undefined && instrument != undefined) {\n                this.modInsValues[channel][instrument][setting] = null;\n                this.nextModInsValues[channel][instrument][setting] = null;\n            }\n        }\n    }\n    isFilterModActive(forNoteFilter, channelIdx, instrumentIdx, forSong) {\n        var _a;\n        const instrument = this.song.channels[channelIdx].instruments[instrumentIdx];\n        if (forNoteFilter) {\n            if (instrument.noteFilterType)\n                return false;\n            if (instrument.tmpNoteFilterEnd != null)\n                return true;\n        }\n        else {\n            if (forSong) {\n                if (((_a = this === null || this === void 0 ? void 0 : this.song) === null || _a === void 0 ? void 0 : _a.tmpEqFilterEnd) != null)\n                    return true;\n            }\n            else {\n                for (let i = 0; i < instrument.effects.length; i++) {\n                    let effect = instrument.effects[i];\n                    if (effect.eqFilterType)\n                        return false;\n                    if (effect.tmpEqFilterEnd != null)\n                        return true;\n                }\n            }\n        }\n        return false;\n    }\n    isModActive(setting, channel, instrument) {\n        const forSong = Config.modulators[setting].forSong;\n        if (forSong) {\n            return (this.modValues != undefined && this.modValues[setting] != null);\n        }\n        else if (channel != undefined && instrument != undefined && this.modInsValues != undefined && this.modInsValues[channel] != null && this.modInsValues[channel][instrument] != null) {\n            return (this.modInsValues[channel][instrument][setting] != null);\n        }\n        return false;\n    }\n    forceHoldMods(volumeStart, channelIndex, instrumentIndex, setting) {\n        let found = false;\n        for (let i = 0; i < this.heldMods.length; i++) {\n            if (this.heldMods[i].channelIndex == channelIndex && this.heldMods[i].instrumentIndex == instrumentIndex && this.heldMods[i].setting == setting) {\n                this.heldMods[i].volume = volumeStart;\n                this.heldMods[i].holdFor = 24;\n                found = true;\n            }\n        }\n        if (!found)\n            this.heldMods.push({ volume: volumeStart, channelIndex: channelIndex, instrumentIndex: instrumentIndex, setting: setting, holdFor: 24 });\n    }\n    snapToStart() {\n        this.bar = 0;\n        this.resetEffects();\n        this.snapToBar();\n    }\n    goToBar(bar) {\n        this.bar = bar;\n        this.resetEffects();\n        this.playheadInternal = this.bar;\n    }\n    snapToBar() {\n        this.playheadInternal = this.bar;\n        this.beat = 0;\n        this.part = 0;\n        this.tick = 0;\n        this.tickSampleCountdown = 0;\n    }\n    jumpIntoLoop() {\n        if (!this.song)\n            return;\n        if (this.bar < this.song.loopStart || this.bar >= this.song.loopStart + this.song.loopLength) {\n            const oldBar = this.bar;\n            this.bar = this.song.loopStart;\n            this.playheadInternal += this.bar - oldBar;\n            if (this.playing)\n                this.computeLatestModValues();\n        }\n    }\n    goToNextBar() {\n        if (!this.song)\n            return;\n        this.prevBar = this.bar;\n        const oldBar = this.bar;\n        this.bar++;\n        if (this.bar >= this.song.barCount) {\n            this.bar = 0;\n        }\n        this.playheadInternal += this.bar - oldBar;\n        if (this.playing)\n            this.computeLatestModValues();\n    }\n    goToPrevBar() {\n        if (!this.song)\n            return;\n        this.prevBar = null;\n        const oldBar = this.bar;\n        this.bar--;\n        if (this.bar < 0 || this.bar >= this.song.barCount) {\n            this.bar = this.song.barCount - 1;\n        }\n        this.playheadInternal += this.bar - oldBar;\n        if (this.playing)\n            this.computeLatestModValues();\n    }\n    getNextBar() {\n        let nextBar = this.bar + 1;\n        if (this.isRecording) {\n            if (nextBar >= this.song.barCount) {\n                nextBar = this.song.barCount - 1;\n            }\n        }\n        else if (this.bar == this.loopBarEnd && !this.renderingSong) {\n            nextBar = this.loopBarStart;\n        }\n        else if (this.loopRepeatCount != 0 && nextBar == Math.max(this.loopBarEnd + 1, this.song.loopStart + this.song.loopLength)) {\n            nextBar = this.song.loopStart;\n        }\n        return nextBar;\n    }\n    skipBar() {\n        if (!this.song)\n            return;\n        const samplesPerTick = this.getSamplesPerTick();\n        this.prevBar = this.bar;\n        if (this.loopBarEnd != this.bar)\n            this.bar++;\n        else {\n            this.bar = this.loopBarStart;\n        }\n        this.beat = 0;\n        this.part = 0;\n        this.tick = 0;\n        this.tickSampleCountdown = samplesPerTick;\n        this.isAtStartOfTick = true;\n        if (this.loopRepeatCount != 0 && this.bar == Math.max(this.song.loopStart + this.song.loopLength, this.loopBarEnd)) {\n            this.bar = this.song.loopStart;\n            if (this.loopBarStart != -1)\n                this.bar = this.loopBarStart;\n            if (this.loopRepeatCount > 0)\n                this.loopRepeatCount--;\n        }\n    }\n    computeSongState(samplesPerTick) {\n        if (this.song == null)\n            return;\n        const roundedSamplesPerTick = Math.ceil(samplesPerTick);\n        const samplesPerSecond = this.samplesPerSecond;\n        let eqFilterVolume = 1.0;\n        if (this.song.eqFilterType) {\n            const eqFilterSettingsStart = this.song.eqFilter;\n            if (this.song.eqSubFilters[1] == null)\n                this.song.eqSubFilters[1] = new FilterSettings();\n            const eqFilterSettingsEnd = this.song.eqSubFilters[1];\n            let startSimpleFreq = this.song.eqFilterSimpleCut;\n            let startSimpleGain = this.song.eqFilterSimplePeak;\n            let endSimpleFreq = this.song.eqFilterSimpleCut;\n            let endSimpleGain = this.song.eqFilterSimplePeak;\n            let filterChanges = false;\n            let startPoint;\n            if (filterChanges) {\n                eqFilterSettingsStart.convertLegacySettingsForSynth(startSimpleFreq, startSimpleGain);\n                eqFilterSettingsEnd.convertLegacySettingsForSynth(endSimpleFreq, endSimpleGain);\n                startPoint = eqFilterSettingsStart.controlPoints[0];\n                let endPoint = eqFilterSettingsEnd.controlPoints[0];\n                startPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, 1.0, 1.0);\n                endPoint.toCoefficients(Synth.tempFilterEndCoefficients, samplesPerSecond, 1.0, 1.0);\n                if (this.songEqFiltersL.length < 1)\n                    this.songEqFiltersL[0] = new DynamicBiquadFilter();\n                this.songEqFiltersL[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == 0);\n                if (this.songEqFiltersR.length < 1)\n                    this.songEqFiltersR[0] = new DynamicBiquadFilter();\n                this.songEqFiltersR[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == 0);\n            }\n            else {\n                eqFilterSettingsStart.convertLegacySettingsForSynth(startSimpleFreq, startSimpleGain, true);\n                startPoint = eqFilterSettingsStart.controlPoints[0];\n                startPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, 1.0, 1.0);\n                if (this.songEqFiltersL.length < 1)\n                    this.songEqFiltersL[0] = new DynamicBiquadFilter();\n                this.songEqFiltersL[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterStartCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == 0);\n                if (this.songEqFiltersR.length < 1)\n                    this.songEqFiltersR[0] = new DynamicBiquadFilter();\n                this.songEqFiltersR[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterStartCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == 0);\n            }\n            eqFilterVolume *= startPoint.getVolumeCompensationMult();\n            this.songEqFilterCount = 1;\n            eqFilterVolume = Math.min(3.0, eqFilterVolume);\n        }\n        else {\n            const eqFilterSettings = (this.song.tmpEqFilterStart != null) ? this.song.tmpEqFilterStart : this.song.eqFilter;\n            for (let i = 0; i < eqFilterSettings.controlPointCount; i++) {\n                let startPoint = eqFilterSettings.controlPoints[i];\n                let endPoint = (this.song.tmpEqFilterEnd != null && this.song.tmpEqFilterEnd.controlPoints[i] != null) ? this.song.tmpEqFilterEnd.controlPoints[i] : eqFilterSettings.controlPoints[i];\n                if (startPoint.type != endPoint.type) {\n                    startPoint = endPoint;\n                }\n                startPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, 1.0, 1.0);\n                endPoint.toCoefficients(Synth.tempFilterEndCoefficients, samplesPerSecond, 1.0, 1.0);\n                if (this.songEqFiltersL.length <= i)\n                    this.songEqFiltersL[i] = new DynamicBiquadFilter();\n                this.songEqFiltersL[i].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == 0);\n                if (this.songEqFiltersR.length <= i)\n                    this.songEqFiltersR[i] = new DynamicBiquadFilter();\n                this.songEqFiltersR[i].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == 0);\n                eqFilterVolume *= startPoint.getVolumeCompensationMult();\n            }\n            this.songEqFilterCount = eqFilterSettings.controlPointCount;\n            eqFilterVolume = Math.min(3.0, eqFilterVolume);\n        }\n        let eqFilterVolumeStart = eqFilterVolume;\n        let eqFilterVolumeEnd = eqFilterVolume;\n        this.songEqFilterVolume = eqFilterVolumeStart;\n        this.songEqFilterVolumeDelta = (eqFilterVolumeEnd - eqFilterVolumeStart) / roundedSamplesPerTick;\n    }\n    synthesize(outputDataL, outputDataR, outputBufferLength, playSong = true) {\n        if (this.song == null) {\n            for (let i = 0; i < outputBufferLength; i++) {\n                outputDataL[i] = 0.0;\n                outputDataR[i] = 0.0;\n            }\n            this.deactivateAudio();\n            return;\n        }\n        const song = this.song;\n        this.song.inVolumeCap = 0.0;\n        this.song.outVolumeCap = 0.0;\n        this.song.outVolumeCapL = 0.0;\n        this.song.outVolumeCapR = 0.0;\n        let samplesPerTick = this.getSamplesPerTick();\n        let ended = false;\n        if (this.tickSampleCountdown <= 0 || this.tickSampleCountdown > samplesPerTick) {\n            this.tickSampleCountdown = samplesPerTick;\n            this.isAtStartOfTick = true;\n        }\n        if (playSong) {\n            if (this.beat >= song.beatsPerBar) {\n                this.beat = 0;\n                this.part = 0;\n                this.tick = 0;\n                this.tickSampleCountdown = samplesPerTick;\n                this.isAtStartOfTick = true;\n                this.prevBar = this.bar;\n                this.bar = this.getNextBar();\n                if (this.bar <= this.prevBar && this.loopRepeatCount > 0)\n                    this.loopRepeatCount--;\n            }\n            if (this.bar >= song.barCount) {\n                this.bar = 0;\n                if (this.loopRepeatCount != -1) {\n                    ended = true;\n                    this.pause();\n                }\n            }\n        }\n        this.syncSongState();\n        if (this.tempInstrumentSampleBufferL == null || this.tempInstrumentSampleBufferL.length < outputBufferLength || this.tempInstrumentSampleBufferR == null || this.tempInstrumentSampleBufferR.length < outputBufferLength) {\n            this.tempInstrumentSampleBufferL = new Float32Array(outputBufferLength);\n            this.tempInstrumentSampleBufferR = new Float32Array(outputBufferLength);\n        }\n        const volume = +this.volume;\n        const limitDecay = 1.0 - Math.pow(0.5, this.song.limitDecay / this.samplesPerSecond);\n        const limitRise = 1.0 - Math.pow(0.5, this.song.limitRise / this.samplesPerSecond);\n        let limit = +this.limit;\n        let skippedBars = [];\n        let firstSkippedBufferIndex = -1;\n        let bufferIndex = 0;\n        while (bufferIndex < outputBufferLength && !ended) {\n            this.nextBar = this.getNextBar();\n            if (this.nextBar >= song.barCount)\n                this.nextBar = null;\n            const samplesLeftInBuffer = outputBufferLength - bufferIndex;\n            const samplesLeftInTick = Math.ceil(this.tickSampleCountdown);\n            const runLength = Math.min(samplesLeftInTick, samplesLeftInBuffer);\n            const runEnd = bufferIndex + runLength;\n            if (this.isPlayingSong || this.renderingSong) {\n                for (let channelIndex = song.pitchChannelCount + song.noiseChannelCount; channelIndex < song.getChannelCount(); channelIndex++) {\n                    const channel = song.channels[channelIndex];\n                    const channelState = this.channels[channelIndex];\n                    this.determineCurrentActiveTones(song, channelIndex, samplesPerTick, playSong);\n                    for (let instrumentIndex = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n                        const instrumentState = channelState.instruments[instrumentIndex];\n                        for (let i = 0; i < instrumentState.activeModTones.count(); i++) {\n                            const tone = instrumentState.activeModTones.get(i);\n                            const channel = song.channels[channelIndex];\n                            const instrument = channel.instruments[tone.instrumentIndex];\n                            let mod = Config.modCount - 1 - tone.pitches[0];\n                            if ((instrument.modulators[mod] == Config.modulators.dictionary[\"pre eq\"].index\n                                || instrument.modulators[mod] == Config.modulators.dictionary[\"post eq\"].index\n                                || instrument.modulators[mod] == Config.modulators.dictionary[\"song eq\"].index)\n                                && instrument.modFilterTypes[mod] != null && instrument.modFilterTypes[mod] > 0) {\n                                continue;\n                            }\n                            this.playModTone(song, channelIndex, samplesPerTick, bufferIndex, runLength, tone, false, false);\n                        }\n                    }\n                }\n                for (let channelIndex = song.pitchChannelCount + song.noiseChannelCount; channelIndex < song.getChannelCount(); channelIndex++) {\n                    const channel = song.channels[channelIndex];\n                    const channelState = this.channels[channelIndex];\n                    for (let instrumentIndex = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n                        const instrumentState = channelState.instruments[instrumentIndex];\n                        for (let i = 0; i < instrumentState.activeModTones.count(); i++) {\n                            const tone = instrumentState.activeModTones.get(i);\n                            const channel = song.channels[channelIndex];\n                            const instrument = channel.instruments[tone.instrumentIndex];\n                            let mod = Config.modCount - 1 - tone.pitches[0];\n                            if ((instrument.modulators[mod] == Config.modulators.dictionary[\"pre eq\"].index\n                                || instrument.modulators[mod] == Config.modulators.dictionary[\"post eq\"].index\n                                || instrument.modulators[mod] == Config.modulators.dictionary[\"song eq\"].index)\n                                && instrument.modFilterTypes[mod] != null && instrument.modFilterTypes[mod] > 0) {\n                                this.playModTone(song, channelIndex, samplesPerTick, bufferIndex, runLength, tone, false, false);\n                            }\n                        }\n                    }\n                }\n            }\n            if (this.wantToSkip) {\n                let barVisited = skippedBars.includes(this.bar);\n                if (barVisited && bufferIndex == firstSkippedBufferIndex) {\n                    this.pause();\n                    return;\n                }\n                if (firstSkippedBufferIndex == -1) {\n                    firstSkippedBufferIndex = bufferIndex;\n                }\n                if (!barVisited)\n                    skippedBars.push(this.bar);\n                this.wantToSkip = false;\n                this.skipBar();\n                continue;\n            }\n            this.computeSongState(samplesPerTick);\n            for (let channelIndex = 0; channelIndex < song.pitchChannelCount + song.noiseChannelCount; channelIndex++) {\n                const channel = song.channels[channelIndex];\n                const channelState = this.channels[channelIndex];\n                if (this.isAtStartOfTick) {\n                    this.determineCurrentActiveTones(song, channelIndex, samplesPerTick, playSong && !this.countInMetronome);\n                    this.determineLiveInputTones(song, channelIndex, samplesPerTick);\n                }\n                for (let instrumentIndex = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n                    const instrument = channel.instruments[instrumentIndex];\n                    const instrumentState = channelState.instruments[instrumentIndex];\n                    if (this.isAtStartOfTick) {\n                        let tonesPlayedInThisInstrument = instrumentState.activeTones.count() + instrumentState.liveInputTones.count();\n                        for (let i = 0; i < instrumentState.releasedTones.count(); i++) {\n                            const tone = instrumentState.releasedTones.get(i);\n                            if (tone.ticksSinceReleased >= Math.abs(instrument.getFadeOutTicks())) {\n                                this.freeReleasedTone(instrumentState, i);\n                                i--;\n                                continue;\n                            }\n                            const shouldFadeOutFast = (tonesPlayedInThisInstrument >= Config.maximumTonesPerChannel);\n                            this.computeTone(song, channelIndex, samplesPerTick, tone, true, shouldFadeOutFast);\n                            tonesPlayedInThisInstrument++;\n                        }\n                        if (instrumentState.awake) {\n                            if (!instrumentState.computed) {\n                                instrumentState.compute(this, instrument, samplesPerTick, Math.ceil(samplesPerTick), null, channelIndex, instrumentIndex);\n                            }\n                            instrumentState.computed = false;\n                            instrumentState.envelopeComputer.clearEnvelopes();\n                        }\n                    }\n                    for (let i = 0; i < instrumentState.activeTones.count(); i++) {\n                        const tone = instrumentState.activeTones.get(i);\n                        this.playTone(channelIndex, bufferIndex, runLength, tone);\n                    }\n                    for (let i = 0; i < instrumentState.liveInputTones.count(); i++) {\n                        const tone = instrumentState.liveInputTones.get(i);\n                        this.playTone(channelIndex, bufferIndex, runLength, tone);\n                    }\n                    for (let i = 0; i < instrumentState.releasedTones.count(); i++) {\n                        const tone = instrumentState.releasedTones.get(i);\n                        this.playTone(channelIndex, bufferIndex, runLength, tone);\n                    }\n                    if (instrumentState.awake) {\n                        Synth.effectsSynth(this, outputDataL, outputDataR, bufferIndex, runLength, instrumentState);\n                    }\n                    const tickSampleCountdown = this.tickSampleCountdown;\n                    const startRatio = 1.0 - (tickSampleCountdown) / samplesPerTick;\n                    const endRatio = 1.0 - (tickSampleCountdown - runLength) / samplesPerTick;\n                    const ticksIntoBar = (this.beat * Config.partsPerBeat + this.part) * Config.ticksPerPart + this.tick;\n                    const partTimeTickStart = (ticksIntoBar) / Config.ticksPerPart;\n                    const partTimeTickEnd = (ticksIntoBar + 1) / Config.ticksPerPart;\n                    const partTimeStart = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * startRatio;\n                    const partTimeEnd = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * endRatio;\n                    let useVibratoSpeed = instrument.vibratoSpeed;\n                    instrumentState.vibratoTime = instrumentState.nextVibratoTime;\n                    if (this.isModActive(Config.modulators.dictionary[\"vibrato speed\"].index, channelIndex, instrumentIndex)) {\n                        useVibratoSpeed = this.getModValue(Config.modulators.dictionary[\"vibrato speed\"].index, channelIndex, instrumentIndex);\n                    }\n                    if (useVibratoSpeed == 0) {\n                        instrumentState.vibratoTime = 0;\n                        instrumentState.nextVibratoTime = 0;\n                    }\n                    else {\n                        instrumentState.nextVibratoTime += useVibratoSpeed * 0.1 * (partTimeEnd - partTimeStart);\n                    }\n                }\n            }\n            if (this.enableMetronome || this.countInMetronome) {\n                if (this.part == 0) {\n                    if (!this.startedMetronome) {\n                        const midBeat = (song.beatsPerBar > 4 && (song.beatsPerBar % 2 == 0) && this.beat == song.beatsPerBar / 2);\n                        const periods = (this.beat == 0) ? 8 : midBeat ? 6 : 4;\n                        const hz = (this.beat == 0) ? 1600 : midBeat ? 1200 : 800;\n                        const amplitude = (this.beat == 0) ? 0.06 : midBeat ? 0.05 : 0.04;\n                        const samplesPerPeriod = this.samplesPerSecond / hz;\n                        const radiansPerSample = Math.PI * 2.0 / samplesPerPeriod;\n                        this.metronomeSamplesRemaining = Math.floor(samplesPerPeriod * periods);\n                        this.metronomeFilter = 2.0 * Math.cos(radiansPerSample);\n                        this.metronomeAmplitude = amplitude * Math.sin(radiansPerSample);\n                        this.metronomePrevAmplitude = 0.0;\n                        this.startedMetronome = true;\n                    }\n                    if (this.metronomeSamplesRemaining > 0) {\n                        const stopIndex = Math.min(runEnd, bufferIndex + this.metronomeSamplesRemaining);\n                        this.metronomeSamplesRemaining -= stopIndex - bufferIndex;\n                        for (let i = bufferIndex; i < stopIndex; i++) {\n                            outputDataL[i] += this.metronomeAmplitude;\n                            outputDataR[i] += this.metronomeAmplitude;\n                            const tempAmplitude = this.metronomeFilter * this.metronomeAmplitude - this.metronomePrevAmplitude;\n                            this.metronomePrevAmplitude = this.metronomeAmplitude;\n                            this.metronomeAmplitude = tempAmplitude;\n                        }\n                    }\n                }\n                else {\n                    this.startedMetronome = false;\n                }\n            }\n            for (let i = bufferIndex; i < runEnd; i++) {\n                {\n                    let filtersL = this.songEqFiltersL;\n                    let filtersR = this.songEqFiltersR;\n                    const filterCount = this.songEqFilterCount | 0;\n                    let initialFilterInput1L = +this.initialSongEqFilterInput1L;\n                    let initialFilterInput2L = +this.initialSongEqFilterInput2L;\n                    let initialFilterInput1R = +this.initialSongEqFilterInput1R;\n                    let initialFilterInput2R = +this.initialSongEqFilterInput2R;\n                    const applyFilters = Synth.applyFilters;\n                    let eqFilterVolume = +this.songEqFilterVolume;\n                    const eqFilterVolumeDelta = +this.songEqFilterVolumeDelta;\n                    const inputSampleL = outputDataL[i];\n                    let sampleL = inputSampleL;\n                    sampleL = applyFilters(sampleL, initialFilterInput1L, initialFilterInput2L, filterCount, filtersL);\n                    initialFilterInput2L = initialFilterInput1L;\n                    initialFilterInput1L = inputSampleL;\n                    sampleL *= eqFilterVolume;\n                    outputDataL[i] = sampleL;\n                    const inputSampleR = outputDataR[i];\n                    let sampleR = inputSampleR;\n                    sampleR = applyFilters(sampleR, initialFilterInput1R, initialFilterInput2R, filterCount, filtersR);\n                    initialFilterInput2R = initialFilterInput1R;\n                    initialFilterInput1R = inputSampleR;\n                    sampleR *= eqFilterVolume;\n                    outputDataR[i] = sampleR;\n                    eqFilterVolume += eqFilterVolumeDelta;\n                    this.sanitizeFilters(filtersL);\n                    if (!(initialFilterInput1L < 100) || !(initialFilterInput2L < 100)) {\n                        initialFilterInput1L = 0.0;\n                        initialFilterInput2L = 0.0;\n                    }\n                    if (Math.abs(initialFilterInput1L) < epsilon)\n                        initialFilterInput1L = 0.0;\n                    if (Math.abs(initialFilterInput2L) < epsilon)\n                        initialFilterInput2L = 0.0;\n                    this.initialSongEqFilterInput1L = initialFilterInput1L;\n                    this.initialSongEqFilterInput2L = initialFilterInput2L;\n                    this.sanitizeFilters(filtersR);\n                    if (!(initialFilterInput1R < 100) || !(initialFilterInput2R < 100)) {\n                        initialFilterInput1R = 0.0;\n                        initialFilterInput2R = 0.0;\n                    }\n                    if (Math.abs(initialFilterInput1R) < epsilon)\n                        initialFilterInput1R = 0.0;\n                    if (Math.abs(initialFilterInput2R) < epsilon)\n                        initialFilterInput2R = 0.0;\n                    this.initialSongEqFilterInput1R = initialFilterInput1R;\n                    this.initialSongEqFilterInput2R = initialFilterInput2R;\n                }\n                const sampleL = outputDataL[i] * song.masterGain * song.masterGain;\n                const sampleR = outputDataR[i] * song.masterGain * song.masterGain;\n                const absL = sampleL < 0.0 ? -sampleL : sampleL;\n                const absR = sampleR < 0.0 ? -sampleR : sampleR;\n                const abs = absL > absR ? absL : absR;\n                this.song.inVolumeCap = (this.song.inVolumeCap > abs ? this.song.inVolumeCap : abs);\n                const limitRange = (+(abs > song.compressionThreshold)) + (+(abs > song.limitThreshold));\n                const limitTarget = (+(limitRange == 0)) * (((abs + 1 - song.compressionThreshold) * 0.8 + 0.25) * song.compressionRatio + 1.05 * (1 - song.compressionRatio))\n                    + (+(limitRange == 1)) * (1.05)\n                    + (+(limitRange == 2)) * (1.05 * ((abs + 1 - song.limitThreshold) * song.limitRatio + (1 - song.limitThreshold)));\n                limit += ((limitTarget - limit) * (limit < limitTarget ? limitRise : limitDecay));\n                const limitedVolume = volume / (limit >= 1 ? limit * 1.05 : limit * 0.8 + 0.25);\n                outputDataL[i] = sampleL * limitedVolume;\n                outputDataR[i] = sampleR * limitedVolume;\n                this.song.outVolumeCap = (this.song.outVolumeCap > abs * limitedVolume ? this.song.outVolumeCap : abs * limitedVolume);\n                this.song.outVolumeCapL = (this.song.outVolumeCapL > absL * limitedVolume ? this.song.outVolumeCapL : absL * limitedVolume);\n                this.song.outVolumeCapR = (this.song.outVolumeCapR > absR * limitedVolume ? this.song.outVolumeCapR : absR * limitedVolume);\n            }\n            bufferIndex += runLength;\n            this.isAtStartOfTick = false;\n            this.tickSampleCountdown -= runLength;\n            if (this.tickSampleCountdown <= 0) {\n                this.isAtStartOfTick = true;\n                for (const channelState of this.channels) {\n                    for (const instrumentState of channelState.instruments) {\n                        for (let i = 0; i < instrumentState.releasedTones.count(); i++) {\n                            const tone = instrumentState.releasedTones.get(i);\n                            if (tone.isOnLastTick) {\n                                this.freeReleasedTone(instrumentState, i);\n                                i--;\n                            }\n                            else {\n                                tone.ticksSinceReleased++;\n                            }\n                        }\n                        if (instrumentState.deactivateAfterThisTick) {\n                            instrumentState.deactivate();\n                        }\n                        instrumentState.tonesAddedInThisTick = false;\n                    }\n                }\n                const ticksIntoBar = this.getTicksIntoBar();\n                const tickTimeStart = ticksIntoBar;\n                const secondsPerTick = samplesPerTick / this.samplesPerSecond;\n                const currentPart = this.getCurrentPart();\n                for (let channel = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\n                    for (let instrumentIdx = 0; instrumentIdx < this.song.channels[channel].instruments.length; instrumentIdx++) {\n                        let instrument = this.song.channels[channel].instruments[instrumentIdx];\n                        let instrumentState = this.channels[channel].instruments[instrumentIdx];\n                        const envelopeComputer = instrumentState.envelopeComputer;\n                        const envelopeSpeeds = [];\n                        for (let i = 0; i < Config.maxEnvelopeCount; i++) {\n                            envelopeSpeeds[i] = 0;\n                        }\n                        for (let envelopeIndex = 0; envelopeIndex < instrument.envelopeCount; envelopeIndex++) {\n                            let useEnvelopeSpeed = instrument.envelopeSpeed;\n                            let perEnvelopeSpeed = instrument.envelopes[envelopeIndex].perEnvelopeSpeed;\n                            if (this.isModActive(Config.modulators.dictionary[\"individual envelope speed\"].index, channel, instrumentIdx) && instrument.envelopes[envelopeIndex].tempEnvelopeSpeed != null) {\n                                perEnvelopeSpeed = instrument.envelopes[envelopeIndex].tempEnvelopeSpeed;\n                            }\n                            if (this.isModActive(Config.modulators.dictionary[\"envelope speed\"].index, channel, instrumentIdx)) {\n                                useEnvelopeSpeed = Math.max(0, Math.min(Config.arpSpeedScale.length - 1, this.getModValue(Config.modulators.dictionary[\"envelope speed\"].index, channel, instrumentIdx, false)));\n                                if (Number.isInteger(useEnvelopeSpeed)) {\n                                    instrumentState.envelopeTime[envelopeIndex] += Config.arpSpeedScale[useEnvelopeSpeed] * perEnvelopeSpeed;\n                                }\n                                else {\n                                    instrumentState.envelopeTime[envelopeIndex] += ((1 - (useEnvelopeSpeed % 1)) * Config.arpSpeedScale[Math.floor(useEnvelopeSpeed)] + (useEnvelopeSpeed % 1) * Config.arpSpeedScale[Math.ceil(useEnvelopeSpeed)]) * perEnvelopeSpeed;\n                                }\n                            }\n                            else {\n                                instrumentState.envelopeTime[envelopeIndex] += Config.arpSpeedScale[useEnvelopeSpeed] * perEnvelopeSpeed;\n                            }\n                        }\n                        if (instrumentState.activeTones.count() > 0) {\n                            const tone = instrumentState.activeTones.get(0);\n                            envelopeComputer.computeEnvelopes(instrument, currentPart, instrumentState.envelopeTime, tickTimeStart, secondsPerTick, tone, envelopeSpeeds, instrumentState, this, channel, instrumentIdx);\n                        }\n                        const envelopeStarts = envelopeComputer.envelopeStarts;\n                        const arpEnvelopeStart = envelopeStarts[49];\n                        let useArpeggioSpeed = instrument.arpeggioSpeed;\n                        if (this.isModActive(Config.modulators.dictionary[\"arp speed\"].index, channel, instrumentIdx)) {\n                            useArpeggioSpeed = clamp(0, Config.arpSpeedScale.length, arpEnvelopeStart * this.getModValue(Config.modulators.dictionary[\"arp speed\"].index, channel, instrumentIdx, false));\n                            if (Number.isInteger(useArpeggioSpeed)) {\n                                instrumentState.arpTime += Config.arpSpeedScale[useArpeggioSpeed];\n                            }\n                            else {\n                                instrumentState.arpTime += (1 - (useArpeggioSpeed % 1)) * Config.arpSpeedScale[Math.floor(useArpeggioSpeed)] + (useArpeggioSpeed % 1) * Config.arpSpeedScale[Math.ceil(useArpeggioSpeed)];\n                            }\n                        }\n                        else {\n                            useArpeggioSpeed = clamp(0, Config.arpSpeedScale.length, arpEnvelopeStart * useArpeggioSpeed);\n                            if (Number.isInteger(useArpeggioSpeed)) {\n                                instrumentState.arpTime += Config.arpSpeedScale[useArpeggioSpeed];\n                            }\n                            else {\n                                instrumentState.arpTime += (1 - (useArpeggioSpeed % 1)) * Config.arpSpeedScale[Math.floor(useArpeggioSpeed)] + (useArpeggioSpeed % 1) * Config.arpSpeedScale[Math.ceil(useArpeggioSpeed)];\n                            }\n                        }\n                        envelopeComputer.clearEnvelopes();\n                    }\n                }\n                for (let channel = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\n                    for (let instrumentIdx = 0; instrumentIdx < this.song.channels[channel].instruments.length; instrumentIdx++) {\n                        let instrument = this.song.channels[channel].instruments[instrumentIdx];\n                        for (let effectIdx = 0; effectIdx < instrument.effects.length; effectIdx++) {\n                            let effect = instrument.effects[effectIdx];\n                            if (effect.tmpEqFilterEnd != null) {\n                                effect.tmpEqFilterStart = effect.tmpEqFilterEnd;\n                            }\n                            else {\n                                effect.tmpEqFilterStart = effect.eqFilter;\n                            }\n                        }\n                        if (instrument.tmpNoteFilterEnd != null) {\n                            instrument.tmpNoteFilterStart = instrument.tmpNoteFilterEnd;\n                        }\n                        else {\n                            instrument.tmpNoteFilterStart = instrument.noteFilter;\n                        }\n                    }\n                }\n                if (song.tmpEqFilterEnd != null) {\n                    song.tmpEqFilterStart = song.tmpEqFilterEnd;\n                }\n                else {\n                    song.tmpEqFilterStart = song.eqFilter;\n                }\n                this.tick++;\n                this.tickSampleCountdown += samplesPerTick;\n                if (this.tick == Config.ticksPerPart) {\n                    this.tick = 0;\n                    this.part++;\n                    this.liveInputDuration--;\n                    this.liveBassInputDuration--;\n                    for (let i = 0; i < this.heldMods.length; i++) {\n                        this.heldMods[i].holdFor--;\n                        if (this.heldMods[i].holdFor <= 0) {\n                            this.heldMods.splice(i, 1);\n                        }\n                    }\n                    if (this.part == Config.partsPerBeat) {\n                        this.part = 0;\n                        if (playSong) {\n                            this.beat++;\n                            if (this.beat == song.beatsPerBar) {\n                                this.beat = 0;\n                                if (this.countInMetronome) {\n                                    this.countInMetronome = false;\n                                }\n                                else {\n                                    this.prevBar = this.bar;\n                                    this.bar = this.getNextBar();\n                                    if (this.bar <= this.prevBar && this.loopRepeatCount > 0)\n                                        this.loopRepeatCount--;\n                                    if (this.bar >= song.barCount) {\n                                        this.bar = 0;\n                                        if (this.loopRepeatCount != -1) {\n                                            ended = true;\n                                            this.resetEffects();\n                                            this.pause();\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            for (let setting = 0; setting < Config.modulators.length; setting++) {\n                if (this.nextModValues != null && this.nextModValues[setting] != null)\n                    this.modValues[setting] = this.nextModValues[setting];\n            }\n            if (this.isModActive(Config.modulators.dictionary[\"tempo\"].index)) {\n                samplesPerTick = this.getSamplesPerTick();\n                this.tickSampleCountdown = Math.min(this.tickSampleCountdown, samplesPerTick);\n            }\n            for (let channelIndex = 0; channelIndex < this.song.pitchChannelCount + this.song.noiseChannelCount; channelIndex++) {\n                for (let instrumentIndex = 0; instrumentIndex < this.channels[channelIndex].instruments.length; instrumentIndex++) {\n                    const instrumentState = this.channels[channelIndex].instruments[instrumentIndex];\n                    const instrument = this.song.channels[channelIndex].instruments[instrumentIndex];\n                    instrumentState.nextVibratoTime = (instrumentState.nextVibratoTime % (Config.vibratoTypes[instrument.vibratoType].period / (Config.ticksPerPart * samplesPerTick / this.samplesPerSecond)));\n                    instrumentState.arpTime = (instrumentState.arpTime % (2520 * Config.ticksPerArpeggio));\n                    for (let envelopeIndex = 0; envelopeIndex < instrument.envelopeCount; envelopeIndex++) {\n                        instrumentState.envelopeTime[envelopeIndex] = (instrumentState.envelopeTime[envelopeIndex] % (Config.partsPerBeat * Config.ticksPerPart * this.song.beatsPerBar));\n                    }\n                }\n            }\n            const maxInstrumentsPerChannel = this.song.getMaxInstrumentsPerChannel();\n            for (let setting = 0; setting < Config.modulators.length; setting++) {\n                for (let channel = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\n                    for (let instrument = 0; instrument < maxInstrumentsPerChannel; instrument++) {\n                        if (this.nextModInsValues != null && this.nextModInsValues[channel] != null && this.nextModInsValues[channel][instrument] != null && this.nextModInsValues[channel][instrument][setting] != null) {\n                            this.modInsValues[channel][instrument][setting] = this.nextModInsValues[channel][instrument][setting];\n                        }\n                    }\n                }\n            }\n        }\n        if (!Number.isFinite(limit) || Math.abs(limit) < epsilon)\n            limit = 0.0;\n        this.limit = limit;\n        if (playSong && !this.countInMetronome) {\n            this.playheadInternal = (((this.tick + 1.0 - this.tickSampleCountdown / samplesPerTick) / 2.0 + this.part) / Config.partsPerBeat + this.beat) / song.beatsPerBar + this.bar;\n        }\n    }\n    freeTone(tone) {\n        this.tonePool.pushBack(tone);\n    }\n    newTone() {\n        if (this.tonePool.count() > 0) {\n            const tone = this.tonePool.popBack();\n            tone.freshlyAllocated = true;\n            return tone;\n        }\n        return new Tone();\n    }\n    releaseTone(instrumentState, tone) {\n        instrumentState.releasedTones.pushFront(tone);\n        tone.atNoteStart = false;\n        tone.passedEndOfNote = true;\n    }\n    freeReleasedTone(instrumentState, toneIndex) {\n        this.freeTone(instrumentState.releasedTones.get(toneIndex));\n        instrumentState.releasedTones.remove(toneIndex);\n    }\n    freeAllTones() {\n        for (const channelState of this.channels) {\n            for (const instrumentState of channelState.instruments) {\n                while (instrumentState.activeTones.count() > 0)\n                    this.freeTone(instrumentState.activeTones.popBack());\n                while (instrumentState.activeModTones.count() > 0)\n                    this.freeTone(instrumentState.activeModTones.popBack());\n                while (instrumentState.releasedTones.count() > 0)\n                    this.freeTone(instrumentState.releasedTones.popBack());\n                while (instrumentState.liveInputTones.count() > 0)\n                    this.freeTone(instrumentState.liveInputTones.popBack());\n            }\n        }\n    }\n    determineLiveInputTones(song, channelIndex, samplesPerTick) {\n        const channel = song.channels[channelIndex];\n        const channelState = this.channels[channelIndex];\n        const pitches = this.liveInputPitches;\n        const bassPitches = this.liveBassInputPitches;\n        if (this.liveInputPitches.length > 0 || this.liveBassInputPitches.length > 0) {\n            this.computeLatestModValues();\n        }\n        for (let instrumentIndex = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n            const instrumentState = channelState.instruments[instrumentIndex];\n            const toneList = instrumentState.liveInputTones;\n            let toneCount = 0;\n            if (this.liveInputDuration > 0 && (channelIndex == this.liveInputChannel) && pitches.length > 0 && this.liveInputInstruments.indexOf(instrumentIndex) != -1) {\n                const instrument = channel.instruments[instrumentIndex];\n                if (instrument.getChord().singleTone) {\n                    let tone;\n                    if (toneList.count() <= toneCount) {\n                        tone = this.newTone();\n                        toneList.pushBack(tone);\n                    }\n                    else if (!instrument.getTransition().isSeamless && this.liveInputStarted) {\n                        this.releaseTone(instrumentState, toneList.get(toneCount));\n                        tone = this.newTone();\n                        toneList.set(toneCount, tone);\n                    }\n                    else {\n                        tone = toneList.get(toneCount);\n                    }\n                    toneCount++;\n                    for (let i = 0; i < pitches.length; i++) {\n                        tone.pitches[i] = pitches[i];\n                    }\n                    tone.pitchCount = pitches.length;\n                    tone.chordSize = 1;\n                    tone.instrumentIndex = instrumentIndex;\n                    tone.note = tone.prevNote = tone.nextNote = null;\n                    tone.atNoteStart = this.liveInputStarted;\n                    tone.forceContinueAtStart = false;\n                    tone.forceContinueAtEnd = false;\n                    this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\n                }\n                else {\n                    this.moveTonesIntoOrderedTempMatchedList(toneList, pitches);\n                    for (let i = 0; i < pitches.length; i++) {\n                        let tone;\n                        if (this.tempMatchedPitchTones[toneCount] != null) {\n                            tone = this.tempMatchedPitchTones[toneCount];\n                            this.tempMatchedPitchTones[toneCount] = null;\n                            if (tone.pitchCount != 1 || tone.pitches[0] != pitches[i]) {\n                                this.releaseTone(instrumentState, tone);\n                                tone = this.newTone();\n                            }\n                            toneList.pushBack(tone);\n                        }\n                        else {\n                            tone = this.newTone();\n                            toneList.pushBack(tone);\n                        }\n                        toneCount++;\n                        tone.pitches[0] = pitches[i];\n                        tone.pitchCount = 1;\n                        tone.chordSize = pitches.length;\n                        tone.instrumentIndex = instrumentIndex;\n                        tone.note = tone.prevNote = tone.nextNote = null;\n                        tone.atNoteStart = this.liveInputStarted;\n                        tone.forceContinueAtStart = false;\n                        tone.forceContinueAtEnd = false;\n                        this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\n                    }\n                }\n            }\n            if (this.liveBassInputDuration > 0 && (channelIndex == this.liveBassInputChannel) && bassPitches.length > 0 && this.liveBassInputInstruments.indexOf(instrumentIndex) != -1) {\n                const instrument = channel.instruments[instrumentIndex];\n                if (instrument.getChord().singleTone) {\n                    let tone;\n                    if (toneList.count() <= toneCount) {\n                        tone = this.newTone();\n                        toneList.pushBack(tone);\n                    }\n                    else if (!instrument.getTransition().isSeamless && this.liveInputStarted) {\n                        this.releaseTone(instrumentState, toneList.get(toneCount));\n                        tone = this.newTone();\n                        toneList.set(toneCount, tone);\n                    }\n                    else {\n                        tone = toneList.get(toneCount);\n                    }\n                    toneCount++;\n                    for (let i = 0; i < bassPitches.length; i++) {\n                        tone.pitches[i] = bassPitches[i];\n                    }\n                    tone.pitchCount = bassPitches.length;\n                    tone.chordSize = 1;\n                    tone.instrumentIndex = instrumentIndex;\n                    tone.note = tone.prevNote = tone.nextNote = null;\n                    tone.atNoteStart = this.liveBassInputStarted;\n                    tone.forceContinueAtStart = false;\n                    tone.forceContinueAtEnd = false;\n                    this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\n                }\n                else {\n                    this.moveTonesIntoOrderedTempMatchedList(toneList, bassPitches);\n                    for (let i = 0; i < bassPitches.length; i++) {\n                        let tone;\n                        if (this.tempMatchedPitchTones[toneCount] != null) {\n                            tone = this.tempMatchedPitchTones[toneCount];\n                            this.tempMatchedPitchTones[toneCount] = null;\n                            if (tone.pitchCount != 1 || tone.pitches[0] != bassPitches[i]) {\n                                this.releaseTone(instrumentState, tone);\n                                tone = this.newTone();\n                            }\n                            toneList.pushBack(tone);\n                        }\n                        else {\n                            tone = this.newTone();\n                            toneList.pushBack(tone);\n                        }\n                        toneCount++;\n                        tone.pitches[0] = bassPitches[i];\n                        tone.pitchCount = 1;\n                        tone.chordSize = bassPitches.length;\n                        tone.instrumentIndex = instrumentIndex;\n                        tone.note = tone.prevNote = tone.nextNote = null;\n                        tone.atNoteStart = this.liveBassInputStarted;\n                        tone.forceContinueAtStart = false;\n                        tone.forceContinueAtEnd = false;\n                        this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\n                    }\n                }\n            }\n            while (toneList.count() > toneCount) {\n                this.releaseTone(instrumentState, toneList.popBack());\n            }\n            this.clearTempMatchedPitchTones(toneCount, instrumentState);\n        }\n        this.liveInputStarted = false;\n        this.liveBassInputStarted = false;\n    }\n    adjacentPatternHasCompatibleInstrumentTransition(song, channel, pattern, otherPattern, instrumentIndex, transition, chord, note, otherNote, forceContinue) {\n        if (song.patternInstruments && otherPattern.instruments.indexOf(instrumentIndex) == -1) {\n            if (pattern.instruments.length > 1 || otherPattern.instruments.length > 1) {\n                return null;\n            }\n            const otherInstrument = channel.instruments[otherPattern.instruments[0]];\n            if (forceContinue) {\n                return otherInstrument.getChord();\n            }\n            const otherTransition = otherInstrument.getTransition();\n            if (transition.includeAdjacentPatterns && otherTransition.includeAdjacentPatterns && otherTransition.slides == transition.slides) {\n                return otherInstrument.getChord();\n            }\n            else {\n                return null;\n            }\n        }\n        else {\n            return (forceContinue || transition.includeAdjacentPatterns) ? chord : null;\n        }\n    }\n    static adjacentNotesHaveMatchingPitches(firstNote, secondNote) {\n        if (firstNote.pitches.length != secondNote.pitches.length)\n            return false;\n        const firstNoteInterval = firstNote.pins[firstNote.pins.length - 1].interval;\n        for (const pitch of firstNote.pitches) {\n            if (secondNote.pitches.indexOf(pitch + firstNoteInterval) == -1)\n                return false;\n        }\n        return true;\n    }\n    moveTonesIntoOrderedTempMatchedList(toneList, notePitches) {\n        for (let i = 0; i < toneList.count(); i++) {\n            const tone = toneList.get(i);\n            const pitch = tone.pitches[0] + tone.lastInterval;\n            for (let j = 0; j < notePitches.length; j++) {\n                if (notePitches[j] == pitch) {\n                    this.tempMatchedPitchTones[j] = tone;\n                    toneList.remove(i);\n                    i--;\n                    break;\n                }\n            }\n        }\n        while (toneList.count() > 0) {\n            const tone = toneList.popFront();\n            for (let j = 0; j < this.tempMatchedPitchTones.length; j++) {\n                if (this.tempMatchedPitchTones[j] == null) {\n                    this.tempMatchedPitchTones[j] = tone;\n                    break;\n                }\n            }\n        }\n    }\n    determineCurrentActiveTones(song, channelIndex, samplesPerTick, playSong) {\n        const channel = song.channels[channelIndex];\n        const channelState = this.channels[channelIndex];\n        const pattern = song.getPattern(channelIndex, this.bar);\n        const currentPart = this.getCurrentPart();\n        const currentTick = this.tick + Config.ticksPerPart * currentPart;\n        if (playSong && song.getChannelIsMod(channelIndex)) {\n            let notes = [];\n            let prevNotes = [];\n            let nextNotes = [];\n            let fillCount = Config.modCount;\n            while (fillCount--) {\n                notes.push(null);\n                prevNotes.push(null);\n                nextNotes.push(null);\n            }\n            if (pattern != null && !channel.muted) {\n                for (let i = 0; i < pattern.notes.length; i++) {\n                    if (pattern.notes[i].end <= currentPart) {\n                        if (prevNotes[pattern.notes[i].pitches[0]] == null || pattern.notes[i].end > prevNotes[pattern.notes[i].pitches[0]].start) {\n                            prevNotes[pattern.notes[i].pitches[0]] = pattern.notes[i];\n                        }\n                    }\n                    else if (pattern.notes[i].start <= currentPart && pattern.notes[i].end > currentPart) {\n                        notes[pattern.notes[i].pitches[0]] = pattern.notes[i];\n                    }\n                    else if (pattern.notes[i].start > currentPart) {\n                        if (nextNotes[pattern.notes[i].pitches[0]] == null || pattern.notes[i].start < nextNotes[pattern.notes[i].pitches[0]].start) {\n                            nextNotes[pattern.notes[i].pitches[0]] = pattern.notes[i];\n                        }\n                    }\n                }\n            }\n            let modToneCount = 0;\n            const newInstrumentIndex = (song.patternInstruments && (pattern != null)) ? pattern.instruments[0] : 0;\n            const instrumentState = channelState.instruments[newInstrumentIndex];\n            const toneList = instrumentState.activeModTones;\n            for (let mod = 0; mod < Config.modCount; mod++) {\n                if (notes[mod] != null) {\n                    if (prevNotes[mod] != null && prevNotes[mod].end != notes[mod].start)\n                        prevNotes[mod] = null;\n                    if (nextNotes[mod] != null && nextNotes[mod].start != notes[mod].end)\n                        nextNotes[mod] = null;\n                }\n                if (channelState.singleSeamlessInstrument != null && channelState.singleSeamlessInstrument != newInstrumentIndex && channelState.singleSeamlessInstrument < channelState.instruments.length) {\n                    const sourceInstrumentState = channelState.instruments[channelState.singleSeamlessInstrument];\n                    const destInstrumentState = channelState.instruments[newInstrumentIndex];\n                    while (sourceInstrumentState.activeModTones.count() > 0) {\n                        destInstrumentState.activeModTones.pushFront(sourceInstrumentState.activeModTones.popBack());\n                    }\n                }\n                channelState.singleSeamlessInstrument = newInstrumentIndex;\n                if (notes[mod] != null) {\n                    let prevNoteForThisInstrument = prevNotes[mod];\n                    let nextNoteForThisInstrument = nextNotes[mod];\n                    let forceContinueAtStart = false;\n                    let forceContinueAtEnd = false;\n                    const atNoteStart = (Config.ticksPerPart * notes[mod].start == currentTick) && this.isAtStartOfTick;\n                    let tone;\n                    if (toneList.count() <= modToneCount) {\n                        tone = this.newTone();\n                        toneList.pushBack(tone);\n                    }\n                    else if (atNoteStart && (prevNoteForThisInstrument == null)) {\n                        const oldTone = toneList.get(modToneCount);\n                        if (oldTone.isOnLastTick) {\n                            this.freeTone(oldTone);\n                        }\n                        else {\n                            this.releaseTone(instrumentState, oldTone);\n                        }\n                        tone = this.newTone();\n                        toneList.set(modToneCount, tone);\n                    }\n                    else {\n                        tone = toneList.get(modToneCount);\n                    }\n                    modToneCount++;\n                    for (let i = 0; i < notes[mod].pitches.length; i++) {\n                        tone.pitches[i] = notes[mod].pitches[i];\n                    }\n                    tone.pitchCount = notes[mod].pitches.length;\n                    tone.chordSize = 1;\n                    tone.instrumentIndex = newInstrumentIndex;\n                    tone.note = notes[mod];\n                    tone.noteStartPart = notes[mod].start;\n                    tone.noteEndPart = notes[mod].end;\n                    tone.prevNote = prevNoteForThisInstrument;\n                    tone.nextNote = nextNoteForThisInstrument;\n                    tone.prevNotePitchIndex = 0;\n                    tone.nextNotePitchIndex = 0;\n                    tone.atNoteStart = atNoteStart;\n                    tone.passedEndOfNote = false;\n                    tone.forceContinueAtStart = forceContinueAtStart;\n                    tone.forceContinueAtEnd = forceContinueAtEnd;\n                }\n            }\n            while (toneList.count() > modToneCount) {\n                const tone = toneList.popBack();\n                const channel = song.channels[channelIndex];\n                if (tone.instrumentIndex < channel.instruments.length && !tone.isOnLastTick) {\n                    const instrumentState = this.channels[channelIndex].instruments[tone.instrumentIndex];\n                    this.releaseTone(instrumentState, tone);\n                }\n                else {\n                    this.freeTone(tone);\n                }\n            }\n        }\n        else if (!song.getChannelIsMod(channelIndex)) {\n            let note = null;\n            let prevNote = null;\n            let nextNote = null;\n            if (playSong && pattern != null && !channel.muted && (!this.isRecording || this.liveInputChannel != channelIndex)) {\n                for (let i = 0; i < pattern.notes.length; i++) {\n                    if (pattern.notes[i].end <= currentPart) {\n                        prevNote = pattern.notes[i];\n                    }\n                    else if (pattern.notes[i].start <= currentPart && pattern.notes[i].end > currentPart) {\n                        note = pattern.notes[i];\n                    }\n                    else if (pattern.notes[i].start > currentPart) {\n                        nextNote = pattern.notes[i];\n                        break;\n                    }\n                }\n                if (note != null) {\n                    if (prevNote != null && prevNote.end != note.start)\n                        prevNote = null;\n                    if (nextNote != null && nextNote.start != note.end)\n                        nextNote = null;\n                }\n            }\n            if (pattern != null && (!song.layeredInstruments || channel.instruments.length == 1 || (song.patternInstruments && pattern.instruments.length == 1))) {\n                const newInstrumentIndex = song.patternInstruments ? pattern.instruments[0] : 0;\n                if (channelState.singleSeamlessInstrument != null && channelState.singleSeamlessInstrument != newInstrumentIndex && channelState.singleSeamlessInstrument < channelState.instruments.length) {\n                    const sourceInstrumentState = channelState.instruments[channelState.singleSeamlessInstrument];\n                    const destInstrumentState = channelState.instruments[newInstrumentIndex];\n                    while (sourceInstrumentState.activeTones.count() > 0) {\n                        destInstrumentState.activeTones.pushFront(sourceInstrumentState.activeTones.popBack());\n                    }\n                }\n                channelState.singleSeamlessInstrument = newInstrumentIndex;\n            }\n            else {\n                channelState.singleSeamlessInstrument = null;\n            }\n            for (let instrumentIndex = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n                const instrumentState = channelState.instruments[instrumentIndex];\n                const toneList = instrumentState.activeTones;\n                let toneCount = 0;\n                if ((note != null) && (!song.patternInstruments || (pattern.instruments.indexOf(instrumentIndex) != -1))) {\n                    const instrument = channel.instruments[instrumentIndex];\n                    let prevNoteForThisInstrument = prevNote;\n                    let nextNoteForThisInstrument = nextNote;\n                    const partsPerBar = Config.partsPerBeat * song.beatsPerBar;\n                    const transition = instrument.getTransition();\n                    const chord = instrument.getChord();\n                    let forceContinueAtStart = false;\n                    let forceContinueAtEnd = false;\n                    let tonesInPrevNote = 0;\n                    let tonesInNextNote = 0;\n                    if (note.start == 0) {\n                        let prevPattern = (this.prevBar == null) ? null : song.getPattern(channelIndex, this.prevBar);\n                        if (prevPattern != null) {\n                            const lastNote = (prevPattern.notes.length <= 0) ? null : prevPattern.notes[prevPattern.notes.length - 1];\n                            if (lastNote != null && lastNote.end == partsPerBar) {\n                                const patternForcesContinueAtStart = note.continuesLastPattern && Synth.adjacentNotesHaveMatchingPitches(lastNote, note);\n                                const chordOfCompatibleInstrument = this.adjacentPatternHasCompatibleInstrumentTransition(song, channel, pattern, prevPattern, instrumentIndex, transition, chord, note, lastNote, patternForcesContinueAtStart);\n                                if (chordOfCompatibleInstrument != null) {\n                                    prevNoteForThisInstrument = lastNote;\n                                    tonesInPrevNote = chordOfCompatibleInstrument.singleTone ? 1 : prevNoteForThisInstrument.pitches.length;\n                                    forceContinueAtStart = patternForcesContinueAtStart;\n                                }\n                            }\n                        }\n                    }\n                    else if (prevNoteForThisInstrument != null) {\n                        tonesInPrevNote = chord.singleTone ? 1 : prevNoteForThisInstrument.pitches.length;\n                    }\n                    if (note.end == partsPerBar) {\n                        let nextPattern = (this.nextBar == null) ? null : song.getPattern(channelIndex, this.nextBar);\n                        if (nextPattern != null) {\n                            const firstNote = (nextPattern.notes.length <= 0) ? null : nextPattern.notes[0];\n                            if (firstNote != null && firstNote.start == 0) {\n                                const nextPatternForcesContinueAtStart = firstNote.continuesLastPattern && Synth.adjacentNotesHaveMatchingPitches(note, firstNote);\n                                const chordOfCompatibleInstrument = this.adjacentPatternHasCompatibleInstrumentTransition(song, channel, pattern, nextPattern, instrumentIndex, transition, chord, note, firstNote, nextPatternForcesContinueAtStart);\n                                if (chordOfCompatibleInstrument != null) {\n                                    nextNoteForThisInstrument = firstNote;\n                                    tonesInNextNote = chordOfCompatibleInstrument.singleTone ? 1 : nextNoteForThisInstrument.pitches.length;\n                                    forceContinueAtEnd = nextPatternForcesContinueAtStart;\n                                }\n                            }\n                        }\n                    }\n                    else if (nextNoteForThisInstrument != null) {\n                        tonesInNextNote = chord.singleTone ? 1 : nextNoteForThisInstrument.pitches.length;\n                    }\n                    if (chord.singleTone) {\n                        const atNoteStart = (Config.ticksPerPart * note.start == currentTick);\n                        let tone;\n                        if (toneList.count() <= toneCount) {\n                            tone = this.newTone();\n                            toneList.pushBack(tone);\n                        }\n                        else if (atNoteStart && ((!(transition.isSeamless || instrument.clicklessTransition) && !forceContinueAtStart) || prevNoteForThisInstrument == null)) {\n                            const oldTone = toneList.get(toneCount);\n                            if (oldTone.isOnLastTick) {\n                                this.freeTone(oldTone);\n                            }\n                            else {\n                                this.releaseTone(instrumentState, oldTone);\n                            }\n                            tone = this.newTone();\n                            toneList.set(toneCount, tone);\n                        }\n                        else {\n                            tone = toneList.get(toneCount);\n                        }\n                        toneCount++;\n                        for (let i = 0; i < note.pitches.length; i++) {\n                            tone.pitches[i] = note.pitches[i];\n                        }\n                        tone.pitchCount = note.pitches.length;\n                        tone.chordSize = 1;\n                        tone.instrumentIndex = instrumentIndex;\n                        tone.note = note;\n                        tone.noteStartPart = note.start;\n                        tone.noteEndPart = note.end;\n                        tone.prevNote = prevNoteForThisInstrument;\n                        tone.nextNote = nextNoteForThisInstrument;\n                        tone.prevNotePitchIndex = 0;\n                        tone.nextNotePitchIndex = 0;\n                        tone.atNoteStart = atNoteStart;\n                        tone.passedEndOfNote = false;\n                        tone.forceContinueAtStart = forceContinueAtStart;\n                        tone.forceContinueAtEnd = forceContinueAtEnd;\n                        this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\n                    }\n                    else {\n                        const transition = instrument.getTransition();\n                        if (((transition.isSeamless && !transition.slides && chord.strumParts == 0) || forceContinueAtStart) && (Config.ticksPerPart * note.start == currentTick) && prevNoteForThisInstrument != null) {\n                            this.moveTonesIntoOrderedTempMatchedList(toneList, note.pitches);\n                        }\n                        let strumOffsetParts = 0;\n                        for (let i = 0; i < note.pitches.length; i++) {\n                            let prevNoteForThisTone = (tonesInPrevNote > i) ? prevNoteForThisInstrument : null;\n                            let noteForThisTone = note;\n                            let nextNoteForThisTone = (tonesInNextNote > i) ? nextNoteForThisInstrument : null;\n                            let noteStartPart = noteForThisTone.start + strumOffsetParts;\n                            let passedEndOfNote = false;\n                            if (noteStartPart > currentPart) {\n                                if (toneList.count() > i && (transition.isSeamless || forceContinueAtStart) && prevNoteForThisTone != null) {\n                                    nextNoteForThisTone = noteForThisTone;\n                                    noteForThisTone = prevNoteForThisTone;\n                                    prevNoteForThisTone = null;\n                                    noteStartPart = noteForThisTone.start + strumOffsetParts;\n                                    passedEndOfNote = true;\n                                }\n                                else {\n                                    break;\n                                }\n                            }\n                            let noteEndPart = noteForThisTone.end;\n                            if ((transition.isSeamless || forceContinueAtStart) && nextNoteForThisTone != null) {\n                                noteEndPart = Math.min(Config.partsPerBeat * this.song.beatsPerBar, noteEndPart + strumOffsetParts);\n                            }\n                            if ((!transition.continues && !forceContinueAtStart) || prevNoteForThisTone == null) {\n                                strumOffsetParts += chord.strumParts;\n                            }\n                            const atNoteStart = (Config.ticksPerPart * noteStartPart == currentTick);\n                            let tone;\n                            if (this.tempMatchedPitchTones[toneCount] != null) {\n                                tone = this.tempMatchedPitchTones[toneCount];\n                                this.tempMatchedPitchTones[toneCount] = null;\n                                toneList.pushBack(tone);\n                            }\n                            else if (toneList.count() <= toneCount) {\n                                tone = this.newTone();\n                                toneList.pushBack(tone);\n                            }\n                            else if (atNoteStart && ((!transition.isSeamless && !forceContinueAtStart) || prevNoteForThisTone == null)) {\n                                const oldTone = toneList.get(toneCount);\n                                if (oldTone.isOnLastTick) {\n                                    this.freeTone(oldTone);\n                                }\n                                else {\n                                    this.releaseTone(instrumentState, oldTone);\n                                }\n                                tone = this.newTone();\n                                toneList.set(toneCount, tone);\n                            }\n                            else {\n                                tone = toneList.get(toneCount);\n                            }\n                            toneCount++;\n                            tone.pitches[0] = noteForThisTone.pitches[i];\n                            tone.pitchCount = 1;\n                            tone.chordSize = noteForThisTone.pitches.length;\n                            tone.instrumentIndex = instrumentIndex;\n                            tone.note = noteForThisTone;\n                            tone.noteStartPart = noteStartPart;\n                            tone.noteEndPart = noteEndPart;\n                            tone.prevNote = prevNoteForThisTone;\n                            tone.nextNote = nextNoteForThisTone;\n                            tone.prevNotePitchIndex = i;\n                            tone.nextNotePitchIndex = i;\n                            tone.atNoteStart = atNoteStart;\n                            tone.passedEndOfNote = passedEndOfNote;\n                            tone.forceContinueAtStart = forceContinueAtStart && prevNoteForThisTone != null;\n                            tone.forceContinueAtEnd = forceContinueAtEnd && nextNoteForThisTone != null;\n                            this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\n                        }\n                    }\n                    if (transition.continues && (toneList.count() <= 0) || (note.pitches.length <= 0))\n                        instrumentState.envelopeComputer.reset();\n                }\n                while (toneList.count() > toneCount) {\n                    const tone = toneList.popBack();\n                    const channel = song.channels[channelIndex];\n                    if (tone.instrumentIndex < channel.instruments.length && !tone.isOnLastTick) {\n                        const instrumentState = channelState.instruments[tone.instrumentIndex];\n                        this.releaseTone(instrumentState, tone);\n                    }\n                    else {\n                        this.freeTone(tone);\n                    }\n                }\n                this.clearTempMatchedPitchTones(toneCount, instrumentState);\n            }\n        }\n    }\n    clearTempMatchedPitchTones(toneCount, instrumentState) {\n        for (let i = toneCount; i < this.tempMatchedPitchTones.length; i++) {\n            const oldTone = this.tempMatchedPitchTones[i];\n            if (oldTone != null) {\n                if (oldTone.isOnLastTick) {\n                    this.freeTone(oldTone);\n                }\n                else {\n                    this.releaseTone(instrumentState, oldTone);\n                }\n                this.tempMatchedPitchTones[i] = null;\n            }\n        }\n    }\n    playTone(channelIndex, bufferIndex, runLength, tone) {\n        const channelState = this.channels[channelIndex];\n        const instrumentState = channelState.instruments[tone.instrumentIndex];\n        if (instrumentState.synthesizer != null)\n            instrumentState.synthesizer(this, bufferIndex, runLength, tone, instrumentState);\n        tone.envelopeComputer.clearEnvelopes();\n        instrumentState.envelopeComputer.clearEnvelopes();\n    }\n    playModTone(song, channelIndex, samplesPerTick, bufferIndex, roundedSamplesPerTick, tone, released, shouldFadeOutFast) {\n        const channel = song.channels[channelIndex];\n        const instrument = channel.instruments[tone.instrumentIndex];\n        if (tone.note != null) {\n            const ticksIntoBar = this.getTicksIntoBar();\n            const partTimeTickStart = (ticksIntoBar) / Config.ticksPerPart;\n            const partTimeTickEnd = (ticksIntoBar + 1) / Config.ticksPerPart;\n            const tickSampleCountdown = this.tickSampleCountdown;\n            const startRatio = 1.0 - (tickSampleCountdown) / samplesPerTick;\n            const endRatio = 1.0 - (tickSampleCountdown - roundedSamplesPerTick) / samplesPerTick;\n            const partTimeStart = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * startRatio;\n            const partTimeEnd = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * endRatio;\n            const tickTimeStart = Config.ticksPerPart * partTimeStart;\n            const tickTimeEnd = Config.ticksPerPart * partTimeEnd;\n            const endPinIndex = tone.note.getEndPinIndex(this.getCurrentPart());\n            const startPin = tone.note.pins[endPinIndex - 1];\n            const endPin = tone.note.pins[endPinIndex];\n            const startPinTick = (tone.note.start + startPin.time) * Config.ticksPerPart;\n            const endPinTick = (tone.note.start + endPin.time) * Config.ticksPerPart;\n            const ratioStart = (tickTimeStart - startPinTick) / (endPinTick - startPinTick);\n            const ratioEnd = (tickTimeEnd - startPinTick) / (endPinTick - startPinTick);\n            tone.expression = startPin.size + (endPin.size - startPin.size) * ratioStart;\n            tone.expressionDelta = (startPin.size + (endPin.size - startPin.size) * ratioEnd) - tone.expression;\n            Synth.modSynth(this, bufferIndex, roundedSamplesPerTick, tone, instrument);\n        }\n    }\n    static computeChordExpression(chordSize) {\n        return 1.0 / ((chordSize - 1) * 0.25 + 1.0);\n    }\n    computeTone(song, channelIndex, samplesPerTick, tone, released, shouldFadeOutFast) {\n        const roundedSamplesPerTick = Math.ceil(samplesPerTick);\n        const channel = song.channels[channelIndex];\n        const channelState = this.channels[channelIndex];\n        const instrument = channel.instruments[tone.instrumentIndex];\n        const instrumentState = channelState.instruments[tone.instrumentIndex];\n        instrumentState.awake = true;\n        instrumentState.tonesAddedInThisTick = true;\n        if (!instrumentState.computed) {\n            instrumentState.compute(this, instrument, samplesPerTick, roundedSamplesPerTick, tone, channelIndex, tone.instrumentIndex);\n        }\n        const transition = instrument.getTransition();\n        const chord = instrument.getChord();\n        const chordExpression = chord.singleTone ? 1.0 : Synth.computeChordExpression(tone.chordSize);\n        const isNoiseChannel = song.getChannelIsNoise(channelIndex);\n        const intervalScale = isNoiseChannel ? Config.noiseInterval : 1;\n        const secondsPerPart = Config.ticksPerPart * samplesPerTick / this.samplesPerSecond;\n        const sampleTime = 1.0 / this.samplesPerSecond;\n        const beatsPerPart = 1.0 / Config.partsPerBeat;\n        const ticksIntoBar = this.getTicksIntoBar();\n        const partTimeStart = (ticksIntoBar) / Config.ticksPerPart;\n        const partTimeEnd = (ticksIntoBar + 1.0) / Config.ticksPerPart;\n        const currentPart = this.getCurrentPart();\n        let specialIntervalMult = 1.0;\n        tone.specialIntervalExpressionMult = 1.0;\n        let toneIsOnLastTick = shouldFadeOutFast;\n        let intervalStart = 0.0;\n        let intervalEnd = 0.0;\n        let fadeExpressionStart = 1.0;\n        let fadeExpressionEnd = 1.0;\n        let chordExpressionStart = chordExpression;\n        let chordExpressionEnd = chordExpression;\n        let expressionReferencePitch = 16;\n        let basePitch = Config.keys[song.key].basePitch + (Config.pitchesPerOctave * song.octave);\n        let baseExpression = 1.0;\n        let pitchDamping = 48;\n        if (instrument.type == 3) {\n            baseExpression = Config.spectrumBaseExpression;\n            if (isNoiseChannel) {\n                basePitch = Config.spectrumBasePitch;\n                baseExpression *= 2.0;\n            }\n            expressionReferencePitch = Config.spectrumBasePitch;\n            pitchDamping = 28;\n        }\n        else if (instrument.type == 4) {\n            basePitch = Config.spectrumBasePitch;\n            baseExpression = Config.drumsetBaseExpression;\n            expressionReferencePitch = basePitch;\n        }\n        else if (instrument.type == 2) {\n            basePitch = isNoiseChannel ? Config.chipNoises[instrument.chipNoise].basePitch : basePitch + Config.chipNoises[instrument.chipNoise].basePitch - 12;\n            baseExpression = Config.noiseBaseExpression;\n            expressionReferencePitch = basePitch;\n            pitchDamping = Config.chipNoises[instrument.chipNoise].isSoft ? 24.0 : 60.0;\n        }\n        else if (instrument.type == 1 || instrument.type == 11) {\n            baseExpression = Config.fmBaseExpression;\n        }\n        else if (instrument.type == 0) {\n            baseExpression = Config.chipBaseExpression;\n            if (Config.chipWaves[instrument.chipWave].isCustomSampled) {\n                if (Config.chipWaves[instrument.chipWave].isPercussion) {\n                    basePitch = -84.37 + Math.log2(Config.chipWaves[instrument.chipWave].samples.length / Config.chipWaves[instrument.chipWave].sampleRate) * -12 - (-60 + Config.chipWaves[instrument.chipWave].rootKey);\n                }\n                else {\n                    basePitch += -96.37 + Math.log2(Config.chipWaves[instrument.chipWave].samples.length / Config.chipWaves[instrument.chipWave].sampleRate) * -12 - (-60 + Config.chipWaves[instrument.chipWave].rootKey);\n                }\n            }\n            else {\n                if (Config.chipWaves[instrument.chipWave].isSampled && !Config.chipWaves[instrument.chipWave].isPercussion) {\n                    basePitch = basePitch - 63 + Config.chipWaves[instrument.chipWave].extraSampleDetune;\n                }\n                else if (Config.chipWaves[instrument.chipWave].isSampled && Config.chipWaves[instrument.chipWave].isPercussion) {\n                    basePitch = -51 + Config.chipWaves[instrument.chipWave].extraSampleDetune;\n                }\n            }\n        }\n        else if (instrument.type == 9) {\n            baseExpression = Config.chipBaseExpression;\n        }\n        else if (instrument.type == 5) {\n            baseExpression = Config.harmonicsBaseExpression;\n        }\n        else if (instrument.type == 6) {\n            baseExpression = Config.pwmBaseExpression;\n        }\n        else if (instrument.type == 8) {\n            baseExpression = Config.supersawBaseExpression;\n        }\n        else if (instrument.type == 7) {\n            baseExpression = Config.pickedStringBaseExpression;\n        }\n        else if (instrument.type == 10) {\n            baseExpression = 1.0;\n            expressionReferencePitch = 0;\n            pitchDamping = 1.0;\n            basePitch = 0;\n        }\n        else {\n            throw new Error(\"Unknown instrument type in computeTone.\");\n        }\n        if ((tone.atNoteStart && !transition.isSeamless && !tone.forceContinueAtStart) || tone.freshlyAllocated) {\n            tone.reset();\n            if (tone.note != null)\n                tone.chipWaveStartOffset = tone.note.chipWaveStartOffset;\n            instrumentState.envelopeComputer.reset();\n            if (instrument.type == 0 && instrument.isUsingAdvancedLoopControls) {\n                const chipWaveLength = Config.rawRawChipWaves[instrument.chipWave].samples.length - 1;\n                const firstOffset = (tone.chipWaveStartOffset + instrument.chipWaveStartOffset) / chipWaveLength;\n                const lastOffset = 0.999999999999999;\n                for (let i = 0; i < Config.maxPitchOrOperatorCount; i++) {\n                    tone.phases[i] = instrument.chipWavePlayBackwards ? Math.max(0, Math.min(lastOffset, firstOffset)) : Math.max(0, firstOffset);\n                    tone.directions[i] = instrument.chipWavePlayBackwards ? -1 : 1;\n                    tone.chipWaveCompletions[i] = 0;\n                    tone.chipWavePrevWavesL[i] = 0;\n                    tone.chipWavePrevWavesR[i] = 0;\n                    tone.chipWaveCompletionsLastWaveL[i] = 0;\n                    tone.chipWaveCompletionsLastWaveR[i] = 0;\n                }\n            }\n        }\n        tone.freshlyAllocated = false;\n        for (let i = 0; i < Config.maxPitchOrOperatorCount; i++) {\n            tone.phaseDeltas[i] = 0.0;\n            tone.phaseDeltaScales[i] = 0.0;\n            tone.operatorExpressions[i] = 0.0;\n            tone.operatorExpressionDeltas[i] = 0.0;\n        }\n        tone.expression = 0.0;\n        tone.expressionDelta = 0.0;\n        for (let i = 0; i < (instrument.type == 11 ? 6 : Config.operatorCount); i++) {\n            tone.operatorWaves[i] = Synth.getOperatorWave(instrument.operators[i].waveform, instrument.operators[i].pulseWidth);\n        }\n        if (released) {\n            const startTicksSinceReleased = tone.ticksSinceReleased;\n            const endTicksSinceReleased = tone.ticksSinceReleased + 1.0;\n            intervalStart = intervalEnd = tone.lastInterval;\n            const fadeOutTicks = Math.abs(instrument.getFadeOutTicks());\n            fadeExpressionStart = Synth.noteSizeToVolumeMult((1.0 - startTicksSinceReleased / fadeOutTicks) * Config.noteSizeMax);\n            fadeExpressionEnd = Synth.noteSizeToVolumeMult((1.0 - endTicksSinceReleased / fadeOutTicks) * Config.noteSizeMax);\n            if (shouldFadeOutFast) {\n                fadeExpressionEnd = 0.0;\n            }\n            if (tone.ticksSinceReleased + 1 >= fadeOutTicks)\n                toneIsOnLastTick = true;\n        }\n        else if (tone.note == null) {\n            fadeExpressionStart = fadeExpressionEnd = 1.0;\n            tone.lastInterval = 0;\n            tone.ticksSinceReleased = 0;\n            tone.liveInputSamplesHeld += roundedSamplesPerTick;\n        }\n        else {\n            const note = tone.note;\n            const nextNote = tone.nextNote;\n            const noteStartPart = tone.noteStartPart;\n            const noteEndPart = tone.noteEndPart;\n            const endPinIndex = note.getEndPinIndex(currentPart);\n            const startPin = note.pins[endPinIndex - 1];\n            const endPin = note.pins[endPinIndex];\n            const noteStartTick = noteStartPart * Config.ticksPerPart;\n            const noteEndTick = noteEndPart * Config.ticksPerPart;\n            const pinStart = (note.start + startPin.time) * Config.ticksPerPart;\n            const pinEnd = (note.start + endPin.time) * Config.ticksPerPart;\n            tone.ticksSinceReleased = 0;\n            const tickTimeStart = currentPart * Config.ticksPerPart + this.tick;\n            const tickTimeEnd = tickTimeStart + 1.0;\n            const noteTicksPassedTickStart = tickTimeStart - noteStartTick;\n            const noteTicksPassedTickEnd = tickTimeEnd - noteStartTick;\n            const pinRatioStart = Math.min(1.0, (tickTimeStart - pinStart) / (pinEnd - pinStart));\n            const pinRatioEnd = Math.min(1.0, (tickTimeEnd - pinStart) / (pinEnd - pinStart));\n            fadeExpressionStart = 1.0;\n            fadeExpressionEnd = 1.0;\n            intervalStart = startPin.interval + (endPin.interval - startPin.interval) * pinRatioStart;\n            intervalEnd = startPin.interval + (endPin.interval - startPin.interval) * pinRatioEnd;\n            tone.lastInterval = intervalEnd;\n            if ((!transition.isSeamless && !tone.forceContinueAtEnd) || nextNote == null) {\n                const fadeOutTicks = -instrument.getFadeOutTicks();\n                if (fadeOutTicks > 0.0) {\n                    const noteLengthTicks = noteEndTick - noteStartTick;\n                    fadeExpressionStart *= Math.min(1.0, (noteLengthTicks - noteTicksPassedTickStart) / fadeOutTicks);\n                    fadeExpressionEnd *= Math.min(1.0, (noteLengthTicks - noteTicksPassedTickEnd) / fadeOutTicks);\n                    if (tickTimeEnd >= noteStartTick + noteLengthTicks)\n                        toneIsOnLastTick = true;\n                }\n            }\n        }\n        tone.isOnLastTick = toneIsOnLastTick;\n        let tmpNoteFilter = instrument.noteFilter;\n        let startPoint;\n        let endPoint;\n        if (instrument.noteFilterType) {\n            const noteFilterSettingsStart = instrument.noteFilter;\n            if (instrument.noteSubFilters[1] == null)\n                instrument.noteSubFilters[1] = new FilterSettings();\n            const noteFilterSettingsEnd = instrument.noteSubFilters[1];\n            let startSimpleFreq = instrument.noteFilterSimpleCut;\n            let startSimpleGain = instrument.noteFilterSimplePeak;\n            let endSimpleFreq = instrument.noteFilterSimpleCut;\n            let endSimpleGain = instrument.noteFilterSimplePeak;\n            let filterChanges = false;\n            if (this.isModActive(Config.modulators.dictionary[\"note filt cut\"].index, channelIndex, tone.instrumentIndex)) {\n                startSimpleFreq = this.getModValue(Config.modulators.dictionary[\"note filt cut\"].index, channelIndex, tone.instrumentIndex, false);\n                endSimpleFreq = this.getModValue(Config.modulators.dictionary[\"note filt cut\"].index, channelIndex, tone.instrumentIndex, true);\n                filterChanges = true;\n            }\n            if (this.isModActive(Config.modulators.dictionary[\"note filt peak\"].index, channelIndex, tone.instrumentIndex)) {\n                startSimpleGain = this.getModValue(Config.modulators.dictionary[\"note filt peak\"].index, channelIndex, tone.instrumentIndex, false);\n                endSimpleGain = this.getModValue(Config.modulators.dictionary[\"note filt peak\"].index, channelIndex, tone.instrumentIndex, true);\n                filterChanges = true;\n            }\n            noteFilterSettingsStart.convertLegacySettingsForSynth(startSimpleFreq, startSimpleGain, !filterChanges);\n            noteFilterSettingsEnd.convertLegacySettingsForSynth(endSimpleFreq, endSimpleGain, !filterChanges);\n            startPoint = noteFilterSettingsStart.controlPoints[0];\n            endPoint = noteFilterSettingsEnd.controlPoints[0];\n            instrument.noteFilter = noteFilterSettingsStart;\n            instrument.tmpNoteFilterStart = noteFilterSettingsStart;\n        }\n        const envelopeComputer = tone.envelopeComputer;\n        const envelopeSpeeds = [];\n        for (let i = 0; i < Config.maxEnvelopeCount; i++) {\n            envelopeSpeeds[i] = 0;\n        }\n        for (let envelopeIndex = 0; envelopeIndex < instrument.envelopeCount; envelopeIndex++) {\n            let perEnvelopeSpeed = instrument.envelopes[envelopeIndex].perEnvelopeSpeed;\n            if (this.isModActive(Config.modulators.dictionary[\"individual envelope speed\"].index, channelIndex, tone.instrumentIndex) && instrument.envelopes[envelopeIndex].tempEnvelopeSpeed != null) {\n                perEnvelopeSpeed = instrument.envelopes[envelopeIndex].tempEnvelopeSpeed;\n            }\n            let useEnvelopeSpeed = Config.arpSpeedScale[instrument.envelopeSpeed] * perEnvelopeSpeed;\n            if (this.isModActive(Config.modulators.dictionary[\"envelope speed\"].index, channelIndex, tone.instrumentIndex)) {\n                useEnvelopeSpeed = Math.max(0, Math.min(Config.arpSpeedScale.length - 1, this.getModValue(Config.modulators.dictionary[\"envelope speed\"].index, channelIndex, tone.instrumentIndex, false)));\n                if (Number.isInteger(useEnvelopeSpeed)) {\n                    useEnvelopeSpeed = Config.arpSpeedScale[useEnvelopeSpeed] * perEnvelopeSpeed;\n                }\n                else {\n                    useEnvelopeSpeed = (1 - (useEnvelopeSpeed % 1)) * Config.arpSpeedScale[Math.floor(useEnvelopeSpeed)] + (useEnvelopeSpeed % 1) * Config.arpSpeedScale[Math.ceil(useEnvelopeSpeed)] * perEnvelopeSpeed;\n                }\n            }\n            envelopeSpeeds[envelopeIndex] = useEnvelopeSpeed;\n        }\n        envelopeComputer.computeEnvelopes(instrument, currentPart, instrumentState.envelopeTime, Config.ticksPerPart * partTimeStart, samplesPerTick / this.samplesPerSecond, tone, envelopeSpeeds, instrumentState, this, channelIndex, tone.instrumentIndex);\n        const envelopeStarts = tone.envelopeComputer.envelopeStarts;\n        const envelopeEnds = tone.envelopeComputer.envelopeEnds;\n        instrument.noteFilter = tmpNoteFilter;\n        if (transition.continues && (tone.prevNote == null || tone.note == null)) {\n            instrumentState.envelopeComputer.reset();\n        }\n        if (tone.note != null && transition.slides) {\n            const prevNote = tone.prevNote;\n            const nextNote = tone.nextNote;\n            if (prevNote != null) {\n                const intervalDiff = prevNote.pitches[tone.prevNotePitchIndex] + prevNote.pins[prevNote.pins.length - 1].interval - tone.pitches[0];\n                if (envelopeComputer.prevSlideStart)\n                    intervalStart += intervalDiff * envelopeComputer.prevSlideRatioStart;\n                if (envelopeComputer.prevSlideEnd)\n                    intervalEnd += intervalDiff * envelopeComputer.prevSlideRatioEnd;\n                if (!chord.singleTone) {\n                    const chordSizeDiff = prevNote.pitches.length - tone.chordSize;\n                    if (envelopeComputer.prevSlideStart)\n                        chordExpressionStart = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.prevSlideRatioStart);\n                    if (envelopeComputer.prevSlideEnd)\n                        chordExpressionEnd = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.prevSlideRatioEnd);\n                }\n            }\n            if (nextNote != null) {\n                const intervalDiff = nextNote.pitches[tone.nextNotePitchIndex] - (tone.pitches[0] + tone.note.pins[tone.note.pins.length - 1].interval);\n                if (envelopeComputer.nextSlideStart)\n                    intervalStart += intervalDiff * envelopeComputer.nextSlideRatioStart;\n                if (envelopeComputer.nextSlideEnd)\n                    intervalEnd += intervalDiff * envelopeComputer.nextSlideRatioEnd;\n                if (!chord.singleTone) {\n                    const chordSizeDiff = nextNote.pitches.length - tone.chordSize;\n                    if (envelopeComputer.nextSlideStart)\n                        chordExpressionStart = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.nextSlideRatioStart);\n                    if (envelopeComputer.nextSlideEnd)\n                        chordExpressionEnd = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.nextSlideRatioEnd);\n                }\n            }\n        }\n        if (effectsIncludePitchShift(instrument.mdeffects)) {\n            let pitchShift = Config.justIntonationSemitones[instrument.pitchShift] / intervalScale;\n            let pitchShiftScalarStart = 1.0;\n            let pitchShiftScalarEnd = 1.0;\n            if (this.isModActive(Config.modulators.dictionary[\"pitch shift\"].index, channelIndex, tone.instrumentIndex)) {\n                pitchShift = Config.justIntonationSemitones[Config.justIntonationSemitones.length - 1];\n                pitchShiftScalarStart = (this.getModValue(Config.modulators.dictionary[\"pitch shift\"].index, channelIndex, tone.instrumentIndex, false)) / (Config.pitchShiftCenter);\n                pitchShiftScalarEnd = (this.getModValue(Config.modulators.dictionary[\"pitch shift\"].index, channelIndex, tone.instrumentIndex, true)) / (Config.pitchShiftCenter);\n            }\n            const envelopeStart = envelopeStarts[19];\n            const envelopeEnd = envelopeEnds[19];\n            intervalStart += pitchShift * envelopeStart * pitchShiftScalarStart;\n            intervalEnd += pitchShift * envelopeEnd * pitchShiftScalarEnd;\n        }\n        if (effectsIncludeDetune(instrument.mdeffects) || this.isModActive(Config.modulators.dictionary[\"song detune\"].index, channelIndex, tone.instrumentIndex)) {\n            const envelopeStart = envelopeStarts[20];\n            const envelopeEnd = envelopeEnds[20];\n            let modDetuneStart = instrument.detune;\n            let modDetuneEnd = instrument.detune;\n            if (this.isModActive(Config.modulators.dictionary[\"detune\"].index, channelIndex, tone.instrumentIndex)) {\n                modDetuneStart = this.getModValue(Config.modulators.dictionary[\"detune\"].index, channelIndex, tone.instrumentIndex, false) + Config.detuneCenter;\n                modDetuneEnd = this.getModValue(Config.modulators.dictionary[\"detune\"].index, channelIndex, tone.instrumentIndex, true) + Config.detuneCenter;\n            }\n            if (this.isModActive(Config.modulators.dictionary[\"song detune\"].index, channelIndex, tone.instrumentIndex)) {\n                modDetuneStart += 4 * this.getModValue(Config.modulators.dictionary[\"song detune\"].index, channelIndex, tone.instrumentIndex, false);\n                modDetuneEnd += 4 * this.getModValue(Config.modulators.dictionary[\"song detune\"].index, channelIndex, tone.instrumentIndex, true);\n            }\n            intervalStart += detuneToCents(modDetuneStart) * envelopeStart * Config.pitchesPerOctave / (12.0 * 100.0);\n            intervalEnd += detuneToCents(modDetuneEnd) * envelopeEnd * Config.pitchesPerOctave / (12.0 * 100.0);\n        }\n        if (effectsIncludeVibrato(instrument.mdeffects)) {\n            let delayTicks;\n            let vibratoAmplitudeStart;\n            let vibratoAmplitudeEnd;\n            if (instrument.vibrato == Config.vibratos.length) {\n                delayTicks = instrument.vibratoDelay * 2;\n                if (instrument.vibratoDelay == Config.modulators.dictionary[\"vibrato delay\"].maxRawVol)\n                    delayTicks = Number.POSITIVE_INFINITY;\n                vibratoAmplitudeStart = instrument.vibratoDepth;\n                vibratoAmplitudeEnd = vibratoAmplitudeStart;\n            }\n            else {\n                delayTicks = Config.vibratos[instrument.vibrato].delayTicks;\n                vibratoAmplitudeStart = Config.vibratos[instrument.vibrato].amplitude;\n                vibratoAmplitudeEnd = vibratoAmplitudeStart;\n            }\n            if (this.isModActive(Config.modulators.dictionary[\"vibrato delay\"].index, channelIndex, tone.instrumentIndex)) {\n                delayTicks = this.getModValue(Config.modulators.dictionary[\"vibrato delay\"].index, channelIndex, tone.instrumentIndex, false) * 2;\n                if (delayTicks == Config.modulators.dictionary[\"vibrato delay\"].maxRawVol * 2)\n                    delayTicks = Number.POSITIVE_INFINITY;\n            }\n            if (this.isModActive(Config.modulators.dictionary[\"vibrato depth\"].index, channelIndex, tone.instrumentIndex)) {\n                vibratoAmplitudeStart = this.getModValue(Config.modulators.dictionary[\"vibrato depth\"].index, channelIndex, tone.instrumentIndex, false) / 25;\n                vibratoAmplitudeEnd = this.getModValue(Config.modulators.dictionary[\"vibrato depth\"].index, channelIndex, tone.instrumentIndex, true) / 25;\n            }\n            let vibratoStart;\n            if (tone.prevVibrato != null) {\n                vibratoStart = tone.prevVibrato;\n            }\n            else {\n                let vibratoLfoStart = Synth.getLFOAmplitude(instrument, secondsPerPart * instrumentState.vibratoTime);\n                const vibratoDepthEnvelopeStart = envelopeStarts[21];\n                vibratoStart = vibratoAmplitudeStart * vibratoLfoStart * vibratoDepthEnvelopeStart;\n                if (delayTicks > 0.0) {\n                    const ticksUntilVibratoStart = delayTicks - envelopeComputer.noteTicksStart;\n                    vibratoStart *= Math.max(0.0, Math.min(1.0, 1.0 - ticksUntilVibratoStart / 2.0));\n                }\n            }\n            let vibratoLfoEnd = Synth.getLFOAmplitude(instrument, secondsPerPart * instrumentState.nextVibratoTime);\n            const vibratoDepthEnvelopeEnd = envelopeEnds[21];\n            if (instrument.type != 10) {\n                let vibratoEnd = vibratoAmplitudeEnd * vibratoLfoEnd * vibratoDepthEnvelopeEnd;\n                if (delayTicks > 0.0) {\n                    const ticksUntilVibratoEnd = delayTicks - envelopeComputer.noteTicksEnd;\n                    vibratoEnd *= Math.max(0.0, Math.min(1.0, 1.0 - ticksUntilVibratoEnd / 2.0));\n                }\n                tone.prevVibrato = vibratoEnd;\n                intervalStart += vibratoStart;\n                intervalEnd += vibratoEnd;\n            }\n        }\n        if ((!transition.isSeamless && !tone.forceContinueAtStart) || tone.prevNote == null) {\n            const fadeInSeconds = instrument.getFadeInSeconds();\n            if (fadeInSeconds > 0.0) {\n                fadeExpressionStart *= Math.min(1.0, envelopeComputer.noteSecondsStartUnscaled / fadeInSeconds);\n                fadeExpressionEnd *= Math.min(1.0, envelopeComputer.noteSecondsEndUnscaled / fadeInSeconds);\n            }\n        }\n        if (instrument.type == 4 && tone.drumsetPitch == null) {\n            tone.drumsetPitch = tone.pitches[0];\n            if (tone.note != null)\n                tone.drumsetPitch += tone.note.pickMainInterval();\n            tone.drumsetPitch = Math.max(0, Math.min(Config.drumCount - 1, tone.drumsetPitch));\n        }\n        let noteFilterExpression = envelopeComputer.lowpassCutoffDecayVolumeCompensation;\n        const noteAllFreqsEnvelopeStart = envelopeStarts[2];\n        const noteAllFreqsEnvelopeEnd = envelopeEnds[2];\n        if (instrument.noteFilterType) {\n            const noteFreqEnvelopeStart = envelopeStarts[22];\n            const noteFreqEnvelopeEnd = envelopeEnds[22];\n            const notePeakEnvelopeStart = envelopeStarts[30];\n            const notePeakEnvelopeEnd = envelopeEnds[30];\n            startPoint.toCoefficients(Synth.tempFilterStartCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeStart * noteFreqEnvelopeStart, notePeakEnvelopeStart);\n            endPoint.toCoefficients(Synth.tempFilterEndCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeEnd * noteFreqEnvelopeEnd, notePeakEnvelopeEnd);\n            if (tone.noteFiltersL.length < 1)\n                tone.noteFiltersL[0] = new DynamicBiquadFilter();\n            if (tone.noteFiltersR.length < 1)\n                tone.noteFiltersR[0] = new DynamicBiquadFilter();\n            tone.noteFiltersL[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == 0);\n            tone.noteFiltersR[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == 0);\n            noteFilterExpression *= startPoint.getVolumeCompensationMult();\n            tone.noteFilterCount = 1;\n        }\n        else {\n            const noteFilterSettings = (instrument.tmpNoteFilterStart != null) ? instrument.tmpNoteFilterStart : instrument.noteFilter;\n            for (let i = 0; i < noteFilterSettings.controlPointCount; i++) {\n                const noteFreqEnvelopeStart = envelopeStarts[22 + i];\n                const noteFreqEnvelopeEnd = envelopeEnds[22 + i];\n                const notePeakEnvelopeStart = envelopeStarts[30 + i];\n                const notePeakEnvelopeEnd = envelopeEnds[30 + i];\n                let startPoint = noteFilterSettings.controlPoints[i];\n                const endPoint = (instrument.tmpNoteFilterEnd != null && instrument.tmpNoteFilterEnd.controlPoints[i] != null) ? instrument.tmpNoteFilterEnd.controlPoints[i] : noteFilterSettings.controlPoints[i];\n                if (startPoint.type != endPoint.type) {\n                    startPoint = endPoint;\n                }\n                startPoint.toCoefficients(Synth.tempFilterStartCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeStart * noteFreqEnvelopeStart, notePeakEnvelopeStart);\n                endPoint.toCoefficients(Synth.tempFilterEndCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeEnd * noteFreqEnvelopeEnd, notePeakEnvelopeEnd);\n                if (tone.noteFiltersL.length <= i)\n                    tone.noteFiltersL[i] = new DynamicBiquadFilter();\n                if (tone.noteFiltersR.length <= i)\n                    tone.noteFiltersR[i] = new DynamicBiquadFilter();\n                tone.noteFiltersL[i].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == 0);\n                tone.noteFiltersR[i].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == 0);\n                noteFilterExpression *= startPoint.getVolumeCompensationMult();\n            }\n            tone.noteFilterCount = noteFilterSettings.controlPointCount;\n        }\n        if (instrument.type == 4) {\n            const drumsetEnvelopeComputer = tone.envelopeComputer;\n            const drumsetFilterEnvelope = instrument.getDrumsetEnvelope(tone.drumsetPitch);\n            noteFilterExpression *= EnvelopeComputer.getLowpassCutoffDecayVolumeCompensation(drumsetFilterEnvelope);\n            drumsetEnvelopeComputer.computeDrumsetEnvelopes(instrument, drumsetFilterEnvelope, beatsPerPart, partTimeStart, partTimeEnd);\n            const drumsetFilterEnvelopeStart = drumsetEnvelopeComputer.drumsetFilterEnvelopeStart;\n            const drumsetFilterEnvelopeEnd = drumsetEnvelopeComputer.drumsetFilterEnvelopeEnd;\n            const point = this.tempDrumSetControlPoint;\n            point.type = 0;\n            point.gain = FilterControlPoint.getRoundedSettingValueFromLinearGain(0.50);\n            point.freq = FilterControlPoint.getRoundedSettingValueFromHz(8000.0);\n            point.toCoefficients(Synth.tempFilterStartCoefficients, this.samplesPerSecond, drumsetFilterEnvelopeStart * (1.0 + drumsetFilterEnvelopeStart), 1.0);\n            point.toCoefficients(Synth.tempFilterEndCoefficients, this.samplesPerSecond, drumsetFilterEnvelopeEnd * (1.0 + drumsetFilterEnvelopeEnd), 1.0);\n            if (tone.noteFiltersL.length == tone.noteFilterCount)\n                tone.noteFiltersL[tone.noteFilterCount] = new DynamicBiquadFilter();\n            if (tone.noteFiltersR.length == tone.noteFilterCount)\n                tone.noteFiltersR[tone.noteFilterCount] = new DynamicBiquadFilter();\n            tone.noteFiltersL[tone.noteFilterCount].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, true);\n            tone.noteFiltersR[tone.noteFilterCount].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, true);\n            tone.noteFilterCount++;\n        }\n        noteFilterExpression = Math.min(3.0, noteFilterExpression);\n        if (instrument.type == 1 || instrument.type == 11) {\n            let sineExpressionBoost = 1.0;\n            let totalCarrierExpression = 0.0;\n            let arpeggioInterval = 0;\n            const arpeggiates = chord.arpeggiates;\n            const isMono = chord.name == \"monophonic\";\n            if (tone.pitchCount > 1 && arpeggiates) {\n                const arpeggio = Math.floor(instrumentState.arpTime / Config.ticksPerArpeggio);\n                arpeggioInterval = tone.pitches[getArpeggioPitchIndex(tone.pitchCount, instrument.fastTwoNoteArp, arpeggio)] - tone.pitches[0];\n            }\n            const carrierCount = (instrument.type == 11 ? instrument.customAlgorithm.carrierCount : Config.algorithms[instrument.algorithm].carrierCount);\n            for (let i = 0; i < (instrument.type == 11 ? 6 : Config.operatorCount); i++) {\n                const associatedCarrierIndex = (instrument.type == 11 ? instrument.customAlgorithm.associatedCarrier[i] - 1 : Config.algorithms[instrument.algorithm].associatedCarrier[i] - 1);\n                const pitch = tone.pitches[arpeggiates ? 0 : isMono ? instrument.monoChordTone : ((i < tone.pitchCount) ? i : ((associatedCarrierIndex < tone.pitchCount) ? associatedCarrierIndex : 0))];\n                const freqMult = Config.operatorFrequencies[instrument.operators[i].frequency].mult;\n                const interval = Config.operatorCarrierInterval[associatedCarrierIndex] + arpeggioInterval;\n                const pitchStart = basePitch + (pitch + intervalStart) * intervalScale + interval;\n                const pitchEnd = basePitch + (pitch + intervalEnd) * intervalScale + interval;\n                const baseFreqStart = Instrument.frequencyFromPitch(pitchStart);\n                const baseFreqEnd = Instrument.frequencyFromPitch(pitchEnd);\n                const hzOffset = Config.operatorFrequencies[instrument.operators[i].frequency].hzOffset;\n                const targetFreqStart = freqMult * baseFreqStart + hzOffset;\n                const targetFreqEnd = freqMult * baseFreqEnd + hzOffset;\n                const freqEnvelopeStart = envelopeStarts[6 + i];\n                const freqEnvelopeEnd = envelopeEnds[6 + i];\n                let freqStart;\n                let freqEnd;\n                if (freqEnvelopeStart != 1.0 || freqEnvelopeEnd != 1.0) {\n                    freqStart = Math.pow(2.0, Math.log2(targetFreqStart / baseFreqStart) * freqEnvelopeStart) * baseFreqStart;\n                    freqEnd = Math.pow(2.0, Math.log2(targetFreqEnd / baseFreqEnd) * freqEnvelopeEnd) * baseFreqEnd;\n                }\n                else {\n                    freqStart = targetFreqStart;\n                    freqEnd = targetFreqEnd;\n                }\n                tone.phaseDeltas[i] = freqStart * sampleTime;\n                tone.phaseDeltaScales[i] = Math.pow(freqEnd / freqStart, 1.0 / roundedSamplesPerTick);\n                let amplitudeStart = instrument.operators[i].amplitude;\n                let amplitudeEnd = instrument.operators[i].amplitude;\n                if (i < 4) {\n                    if (this.isModActive(Config.modulators.dictionary[\"fm slider 1\"].index + i, channelIndex, tone.instrumentIndex)) {\n                        amplitudeStart *= this.getModValue(Config.modulators.dictionary[\"fm slider 1\"].index + i, channelIndex, tone.instrumentIndex, false) / 15.0;\n                        amplitudeEnd *= this.getModValue(Config.modulators.dictionary[\"fm slider 1\"].index + i, channelIndex, tone.instrumentIndex, true) / 15.0;\n                    }\n                }\n                else {\n                    if (this.isModActive(Config.modulators.dictionary[\"fm slider 5\"].index + i - 4, channelIndex, tone.instrumentIndex)) {\n                        amplitudeStart *= this.getModValue(Config.modulators.dictionary[\"fm slider 5\"].index + i - 4, channelIndex, tone.instrumentIndex, false) / 15.0;\n                        amplitudeEnd *= this.getModValue(Config.modulators.dictionary[\"fm slider 5\"].index + i - 4, channelIndex, tone.instrumentIndex, true) / 15.0;\n                    }\n                }\n                const amplitudeCurveStart = Synth.operatorAmplitudeCurve(amplitudeStart);\n                const amplitudeCurveEnd = Synth.operatorAmplitudeCurve(amplitudeEnd);\n                const amplitudeMultStart = amplitudeCurveStart * Config.operatorFrequencies[instrument.operators[i].frequency].amplitudeSign;\n                const amplitudeMultEnd = amplitudeCurveEnd * Config.operatorFrequencies[instrument.operators[i].frequency].amplitudeSign;\n                let expressionStart = amplitudeMultStart;\n                let expressionEnd = amplitudeMultEnd;\n                if (i < carrierCount) {\n                    let pitchExpressionStart;\n                    if (tone.prevPitchExpressions[i] != null) {\n                        pitchExpressionStart = tone.prevPitchExpressions[i];\n                    }\n                    else {\n                        pitchExpressionStart = Math.pow(2.0, -(pitchStart - expressionReferencePitch) / pitchDamping);\n                    }\n                    const pitchExpressionEnd = Math.pow(2.0, -(pitchEnd - expressionReferencePitch) / pitchDamping);\n                    tone.prevPitchExpressions[i] = pitchExpressionEnd;\n                    expressionStart *= pitchExpressionStart;\n                    expressionEnd *= pitchExpressionEnd;\n                    totalCarrierExpression += amplitudeCurveEnd;\n                }\n                else {\n                    expressionStart *= Config.sineWaveLength * 1.5;\n                    expressionEnd *= Config.sineWaveLength * 1.5;\n                    sineExpressionBoost *= 1.0 - Math.min(1.0, instrument.operators[i].amplitude / 15);\n                }\n                expressionStart *= envelopeStarts[12 + i];\n                expressionEnd *= envelopeEnds[12 + i];\n                if (this.isModActive(Config.modulators.dictionary[\"pre volume\"].index, channelIndex, tone.instrumentIndex)) {\n                    const startVal = this.getModValue(Config.modulators.dictionary[\"pre volume\"].index, channelIndex, tone.instrumentIndex, false);\n                    const endVal = this.getModValue(Config.modulators.dictionary[\"pre volume\"].index, channelIndex, tone.instrumentIndex, true);\n                    expressionStart *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(startVal));\n                    expressionEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(endVal));\n                }\n                tone.operatorExpressions[i] = expressionStart;\n                tone.operatorExpressionDeltas[i] = (expressionEnd - expressionStart) / roundedSamplesPerTick;\n            }\n            sineExpressionBoost *= (Math.pow(2.0, (2.0 - 1.4 * instrument.feedbackAmplitude / 15.0)) - 1.0) / 3.0;\n            sineExpressionBoost *= 1.0 - Math.min(1.0, Math.max(0.0, totalCarrierExpression - 1) / 2.0);\n            sineExpressionBoost = 1.0 + sineExpressionBoost * 3.0;\n            let expressionStart = baseExpression * sineExpressionBoost * noteFilterExpression * fadeExpressionStart * chordExpressionStart * envelopeStarts[0];\n            let expressionEnd = baseExpression * sineExpressionBoost * noteFilterExpression * fadeExpressionEnd * chordExpressionEnd * envelopeEnds[0];\n            if (isMono && tone.pitchCount <= instrument.monoChordTone) {\n                expressionStart = 0;\n                expressionEnd = 0;\n            }\n            tone.expression = expressionStart;\n            tone.expressionDelta = (expressionEnd - expressionStart) / roundedSamplesPerTick;\n            let useFeedbackAmplitudeStart = instrument.feedbackAmplitude;\n            let useFeedbackAmplitudeEnd = instrument.feedbackAmplitude;\n            if (this.isModActive(Config.modulators.dictionary[\"fm feedback\"].index, channelIndex, tone.instrumentIndex)) {\n                useFeedbackAmplitudeStart *= this.getModValue(Config.modulators.dictionary[\"fm feedback\"].index, channelIndex, tone.instrumentIndex, false) / 15.0;\n                useFeedbackAmplitudeEnd *= this.getModValue(Config.modulators.dictionary[\"fm feedback\"].index, channelIndex, tone.instrumentIndex, true) / 15.0;\n            }\n            let feedbackAmplitudeStart = Config.sineWaveLength * 0.3 * useFeedbackAmplitudeStart / 15.0;\n            const feedbackAmplitudeEnd = Config.sineWaveLength * 0.3 * useFeedbackAmplitudeEnd / 15.0;\n            let feedbackStart = feedbackAmplitudeStart * envelopeStarts[18];\n            let feedbackEnd = feedbackAmplitudeEnd * envelopeEnds[18];\n            tone.feedbackMult = feedbackStart;\n            tone.feedbackDelta = (feedbackEnd - feedbackStart) / roundedSamplesPerTick;\n        }\n        else {\n            const freqEndRatio = Math.pow(2.0, (intervalEnd - intervalStart) * intervalScale / 12.0);\n            const basePhaseDeltaScale = Math.pow(freqEndRatio, 1.0 / roundedSamplesPerTick);\n            const isMono = chord.name == \"monophonic\";\n            let pitch = tone.pitches[0];\n            if (tone.pitchCount > 1 && (chord.arpeggiates || chord.customInterval || isMono)) {\n                const arpeggio = Math.floor(instrumentState.arpTime / Config.ticksPerArpeggio);\n                if (chord.customInterval) {\n                    const intervalOffset = tone.pitches[1 + getArpeggioPitchIndex(tone.pitchCount - 1, instrument.fastTwoNoteArp, arpeggio)] - tone.pitches[0];\n                    specialIntervalMult = Math.pow(2.0, intervalOffset / 12.0);\n                    tone.specialIntervalExpressionMult = Math.pow(2.0, -intervalOffset / pitchDamping);\n                }\n                else if (chord.arpeggiates) {\n                    pitch = tone.pitches[getArpeggioPitchIndex(tone.pitchCount, instrument.fastTwoNoteArp, arpeggio)];\n                }\n                else {\n                    pitch = tone.pitches[instrument.monoChordTone];\n                }\n            }\n            const startPitch = basePitch + (pitch + intervalStart) * intervalScale;\n            const endPitch = basePitch + (pitch + intervalEnd) * intervalScale;\n            let pitchExpressionStart;\n            if (tone.prevPitchExpressions[0] != null) {\n                pitchExpressionStart = tone.prevPitchExpressions[0];\n            }\n            else {\n                pitchExpressionStart = Math.pow(2.0, -(startPitch - expressionReferencePitch) / pitchDamping);\n            }\n            const pitchExpressionEnd = Math.pow(2.0, -(endPitch - expressionReferencePitch) / pitchDamping);\n            tone.prevPitchExpressions[0] = pitchExpressionEnd;\n            let settingsExpressionMult = baseExpression * noteFilterExpression;\n            if (instrument.type == 2) {\n                settingsExpressionMult *= Config.chipNoises[instrument.chipNoise].expression;\n            }\n            if (instrument.type == 0) {\n                settingsExpressionMult *= Config.chipWaves[instrument.chipWave].expression;\n            }\n            if (instrument.type == 6) {\n                const basePulseWidth = getPulseWidthRatio(instrument.pulseWidth);\n                let pulseWidthModStart = basePulseWidth;\n                let pulseWidthModEnd = basePulseWidth;\n                if (this.isModActive(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex)) {\n                    pulseWidthModStart = (this.getModValue(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex, false)) / (Config.pulseWidthRange * 2);\n                    pulseWidthModEnd = (this.getModValue(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex, true)) / (Config.pulseWidthRange * 2);\n                }\n                const pulseWidthStart = pulseWidthModStart * envelopeStarts[3];\n                const pulseWidthEnd = pulseWidthModEnd * envelopeEnds[3];\n                tone.pulseWidth = pulseWidthStart;\n                tone.pulseWidthDelta = (pulseWidthEnd - pulseWidthStart) / roundedSamplesPerTick;\n                let decimalOffsetModStart = instrument.decimalOffset;\n                if (this.isModActive(Config.modulators.dictionary[\"decimal offset\"].index, channelIndex, tone.instrumentIndex)) {\n                    decimalOffsetModStart = this.getModValue(Config.modulators.dictionary[\"decimal offset\"].index, channelIndex, tone.instrumentIndex, false);\n                }\n                const decimalOffsetStart = decimalOffsetModStart * envelopeStarts[38];\n                tone.decimalOffset = decimalOffsetStart;\n                tone.pulseWidth -= (tone.decimalOffset) / 10000;\n            }\n            if (instrument.type == 7) {\n                let useSustainStart = instrument.stringSustain;\n                let useSustainEnd = instrument.stringSustain;\n                if (this.isModActive(Config.modulators.dictionary[\"sustain\"].index, channelIndex, tone.instrumentIndex)) {\n                    useSustainStart = this.getModValue(Config.modulators.dictionary[\"sustain\"].index, channelIndex, tone.instrumentIndex, false);\n                    useSustainEnd = this.getModValue(Config.modulators.dictionary[\"sustain\"].index, channelIndex, tone.instrumentIndex, true);\n                }\n                tone.stringSustainStart = useSustainStart;\n                tone.stringSustainEnd = useSustainEnd;\n                settingsExpressionMult *= Math.pow(2.0, 0.7 * (1.0 - useSustainStart / (Config.stringSustainRange - 1)));\n            }\n            const startFreq = Instrument.frequencyFromPitch(startPitch);\n            if (instrument.type == 0 || instrument.type == 9 || instrument.type == 5 || instrument.type == 7 || instrument.type == 3 || instrument.type == 6 || instrument.type == 2 || instrument.type == 4) {\n                const unisonVoices = instrument.unisonVoices;\n                const unisonSpread = instrument.unisonSpread;\n                const unisonOffset = instrument.unisonOffset;\n                const unisonExpression = instrument.unisonExpression;\n                const voiceCountExpression = (instrument.type == 7) ? 1 : unisonVoices / 2.0;\n                settingsExpressionMult *= unisonExpression * voiceCountExpression;\n                const unisonEnvelopeStart = envelopeStarts[5];\n                const unisonEnvelopeEnd = envelopeEnds[5];\n                const unisonStartA = Math.pow(2.0, (unisonOffset + unisonSpread) * unisonEnvelopeStart / 12.0);\n                const unisonEndA = Math.pow(2.0, (unisonOffset + unisonSpread) * unisonEnvelopeEnd / 12.0);\n                tone.phaseDeltas[0] = startFreq * sampleTime * unisonStartA;\n                tone.phaseDeltaScales[0] = basePhaseDeltaScale * Math.pow(unisonEndA / unisonStartA, 1.0 / roundedSamplesPerTick);\n                const divisor = (unisonVoices == 1) ? 1 : (unisonVoices - 1);\n                for (let i = 1; i < unisonVoices; i++) {\n                    const unisonStart = Math.pow(2.0, (unisonOffset + unisonSpread - (2 * i * unisonSpread / divisor)) * unisonEnvelopeStart / 12.0) * (specialIntervalMult);\n                    const unisonEnd = Math.pow(2.0, (unisonOffset + unisonSpread - (2 * i * unisonSpread / divisor)) * unisonEnvelopeEnd / 12.0) * (specialIntervalMult);\n                    tone.phaseDeltas[i] = startFreq * sampleTime * unisonStart;\n                    tone.phaseDeltaScales[i] = basePhaseDeltaScale * Math.pow(unisonEnd / unisonStart, 1.0 / roundedSamplesPerTick);\n                }\n                for (let i = unisonVoices; i < Config.unisonVoicesMax; i++) {\n                    tone.phaseDeltas[i] = tone.phaseDeltas[0];\n                    tone.phaseDeltaScales[i] = tone.phaseDeltaScales[0];\n                }\n            }\n            else {\n                tone.phaseDeltas[0] = startFreq * sampleTime;\n                tone.phaseDeltaScales[0] = basePhaseDeltaScale;\n            }\n            let supersawExpressionStart = 1.0;\n            let supersawExpressionEnd = 1.0;\n            if (instrument.type == 8) {\n                const minFirstVoiceAmplitude = 1.0 / Math.sqrt(Config.supersawVoiceCount);\n                let useDynamismStart = instrument.supersawDynamism / Config.supersawDynamismMax;\n                let useDynamismEnd = instrument.supersawDynamism / Config.supersawDynamismMax;\n                if (this.isModActive(Config.modulators.dictionary[\"dynamism\"].index, channelIndex, tone.instrumentIndex)) {\n                    useDynamismStart = (this.getModValue(Config.modulators.dictionary[\"dynamism\"].index, channelIndex, tone.instrumentIndex, false)) / Config.supersawDynamismMax;\n                    useDynamismEnd = (this.getModValue(Config.modulators.dictionary[\"dynamism\"].index, channelIndex, tone.instrumentIndex, true)) / Config.supersawDynamismMax;\n                }\n                const curvedDynamismStart = 1.0 - Math.pow(Math.max(0.0, 1.0 - useDynamismStart * envelopeStarts[39]), 0.2);\n                const curvedDynamismEnd = 1.0 - Math.pow(Math.max(0.0, 1.0 - useDynamismEnd * envelopeEnds[39]), 0.2);\n                const firstVoiceAmplitudeStart = Math.pow(2.0, Math.log2(minFirstVoiceAmplitude) * curvedDynamismStart);\n                const firstVoiceAmplitudeEnd = Math.pow(2.0, Math.log2(minFirstVoiceAmplitude) * curvedDynamismEnd);\n                const dynamismStart = Math.sqrt((1.0 / Math.pow(firstVoiceAmplitudeStart, 2.0) - 1.0) / (Config.supersawVoiceCount - 1.0));\n                const dynamismEnd = Math.sqrt((1.0 / Math.pow(firstVoiceAmplitudeEnd, 2.0) - 1.0) / (Config.supersawVoiceCount - 1.0));\n                tone.supersawDynamism = dynamismStart;\n                tone.supersawDynamismDelta = (dynamismEnd - dynamismStart) / roundedSamplesPerTick;\n                const initializeSupersaw = (tone.supersawDelayIndex == -1);\n                if (initializeSupersaw) {\n                    let accumulator = 0.0;\n                    for (let i = 0; i < Config.supersawVoiceCount; i++) {\n                        tone.phases[i] = accumulator;\n                        accumulator += -Math.log(Math.random());\n                    }\n                    const amplitudeSum = 1.0 + (Config.supersawVoiceCount - 1.0) * dynamismStart;\n                    const slope = amplitudeSum;\n                    let sample = 0.0;\n                    for (let i = 0; i < Config.supersawVoiceCount; i++) {\n                        const amplitude = (i == 0) ? 1.0 : dynamismStart;\n                        const normalizedPhase = tone.phases[i] / accumulator;\n                        tone.phases[i] = normalizedPhase;\n                        sample += (normalizedPhase - 0.5) * amplitude;\n                    }\n                    let zeroCrossingPhase = 1.0;\n                    let prevDrop = 0.0;\n                    for (let i = Config.supersawVoiceCount - 1; i >= 0; i--) {\n                        const nextDrop = 1.0 - tone.phases[i];\n                        const phaseDelta = nextDrop - prevDrop;\n                        if (sample < 0.0) {\n                            const distanceToZeroCrossing = -sample / slope;\n                            if (distanceToZeroCrossing < phaseDelta) {\n                                zeroCrossingPhase = prevDrop + distanceToZeroCrossing;\n                                break;\n                            }\n                        }\n                        const amplitude = (i == 0) ? 1.0 : dynamismStart;\n                        sample += phaseDelta * slope - amplitude;\n                        prevDrop = nextDrop;\n                    }\n                    for (let i = 0; i < Config.supersawVoiceCount; i++) {\n                        tone.phases[i] += zeroCrossingPhase;\n                    }\n                    for (let i = 1; i < Config.supersawVoiceCount - 1; i++) {\n                        const swappedIndex = i + Math.floor(Math.random() * (Config.supersawVoiceCount - i));\n                        const temp = tone.phases[i];\n                        tone.phases[i] = tone.phases[swappedIndex];\n                        tone.phases[swappedIndex] = temp;\n                    }\n                }\n                const baseSpreadSlider = instrument.supersawSpread / Config.supersawSpreadMax;\n                let useSpreadStart = baseSpreadSlider;\n                let useSpreadEnd = baseSpreadSlider;\n                if (this.isModActive(Config.modulators.dictionary[\"spread\"].index, channelIndex, tone.instrumentIndex)) {\n                    useSpreadStart = (this.getModValue(Config.modulators.dictionary[\"spread\"].index, channelIndex, tone.instrumentIndex, false)) / Config.supersawSpreadMax;\n                    useSpreadEnd = (this.getModValue(Config.modulators.dictionary[\"spread\"].index, channelIndex, tone.instrumentIndex, true)) / Config.supersawSpreadMax;\n                }\n                const spreadSliderStart = useSpreadStart * envelopeStarts[40];\n                const spreadSliderEnd = useSpreadEnd * envelopeEnds[40];\n                const averageSpreadSlider = (spreadSliderStart + spreadSliderEnd) * 0.5;\n                const curvedSpread = Math.pow(1.0 - Math.sqrt(Math.max(0.0, 1.0 - averageSpreadSlider)), 1.75);\n                for (let i = 0; i < Config.supersawVoiceCount; i++) {\n                    const offset = (i == 0) ? 0.0 : Math.pow((((i + 1) >> 1) - 0.5 + 0.025 * ((i & 2) - 1)) / (Config.supersawVoiceCount >> 1), 1.1) * ((i & 1) * 2 - 1);\n                    tone.supersawUnisonDetunes[i] = Math.pow(2.0, curvedSpread * offset / 12.0);\n                }\n                const baseShape = instrument.supersawShape / Config.supersawShapeMax;\n                let useShapeStart = baseShape * envelopeStarts[41];\n                let useShapeEnd = baseShape * envelopeEnds[41];\n                if (this.isModActive(Config.modulators.dictionary[\"saw shape\"].index, channelIndex, tone.instrumentIndex)) {\n                    useShapeStart = (this.getModValue(Config.modulators.dictionary[\"saw shape\"].index, channelIndex, tone.instrumentIndex, false)) / Config.supersawShapeMax;\n                    useShapeEnd = (this.getModValue(Config.modulators.dictionary[\"saw shape\"].index, channelIndex, tone.instrumentIndex, true)) / Config.supersawShapeMax;\n                }\n                const shapeStart = useShapeStart * envelopeStarts[41];\n                const shapeEnd = useShapeEnd * envelopeEnds[41];\n                tone.supersawShape = shapeStart;\n                tone.supersawShapeDelta = (shapeEnd - shapeStart) / roundedSamplesPerTick;\n                let decimalOffsetModStart = instrument.decimalOffset;\n                if (this.isModActive(Config.modulators.dictionary[\"decimal offset\"].index, channelIndex, tone.instrumentIndex)) {\n                    decimalOffsetModStart = this.getModValue(Config.modulators.dictionary[\"decimal offset\"].index, channelIndex, tone.instrumentIndex, false);\n                }\n                const decimalOffsetStart = decimalOffsetModStart * envelopeStarts[38];\n                tone.decimalOffset = decimalOffsetStart;\n                const basePulseWidth = getPulseWidthRatio(instrument.pulseWidth);\n                let pulseWidthModStart = basePulseWidth;\n                let pulseWidthModEnd = basePulseWidth;\n                if (this.isModActive(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex)) {\n                    pulseWidthModStart = (this.getModValue(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex, false)) / (Config.pulseWidthRange * 2);\n                    pulseWidthModEnd = (this.getModValue(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex, true)) / (Config.pulseWidthRange * 2);\n                }\n                let pulseWidthStart = pulseWidthModStart * envelopeStarts[3];\n                let pulseWidthEnd = pulseWidthModEnd * envelopeEnds[3];\n                pulseWidthStart -= decimalOffsetStart / 10000;\n                pulseWidthEnd -= decimalOffsetStart / 10000;\n                const phaseDeltaStart = (tone.supersawPrevPhaseDelta != null) ? tone.supersawPrevPhaseDelta : startFreq * sampleTime;\n                const phaseDeltaEnd = startFreq * sampleTime * freqEndRatio;\n                tone.supersawPrevPhaseDelta = phaseDeltaEnd;\n                const delayLengthStart = pulseWidthStart / phaseDeltaStart;\n                const delayLengthEnd = pulseWidthEnd / phaseDeltaEnd;\n                tone.supersawDelayLength = delayLengthStart;\n                tone.supersawDelayLengthDelta = (delayLengthEnd - delayLengthStart) / roundedSamplesPerTick;\n                const minBufferLength = Math.ceil(Math.max(delayLengthStart, delayLengthEnd)) + 2;\n                if (tone.supersawDelayLine == null || tone.supersawDelayLine.length <= minBufferLength) {\n                    const likelyMaximumLength = Math.ceil(0.5 * this.samplesPerSecond / Instrument.frequencyFromPitch(24));\n                    const newDelayLine = new Float32Array(fittingPowerOfTwo(Math.max(likelyMaximumLength, minBufferLength)));\n                    if (!initializeSupersaw && tone.supersawDelayLine != null) {\n                        const oldDelayBufferMask = (tone.supersawDelayLine.length - 1) >> 0;\n                        const startCopyingFromIndex = tone.supersawDelayIndex;\n                        for (let i = 0; i < tone.supersawDelayLine.length; i++) {\n                            newDelayLine[i] = tone.supersawDelayLine[(startCopyingFromIndex + i) & oldDelayBufferMask];\n                        }\n                    }\n                    tone.supersawDelayLine = newDelayLine;\n                    tone.supersawDelayIndex = tone.supersawDelayLine.length;\n                }\n                else if (initializeSupersaw) {\n                    tone.supersawDelayLine.fill(0.0);\n                    tone.supersawDelayIndex = tone.supersawDelayLine.length;\n                }\n                const pulseExpressionRatio = Config.pwmBaseExpression / Config.supersawBaseExpression;\n                supersawExpressionStart *= (1.0 + (pulseExpressionRatio - 1.0) * shapeStart) / Math.sqrt(1.0 + (Config.supersawVoiceCount - 1.0) * dynamismStart * dynamismStart);\n                supersawExpressionEnd *= (1.0 + (pulseExpressionRatio - 1.0) * shapeEnd) / Math.sqrt(1.0 + (Config.supersawVoiceCount - 1.0) * dynamismEnd * dynamismEnd);\n            }\n            let expressionStart = settingsExpressionMult * fadeExpressionStart * chordExpressionStart * pitchExpressionStart * envelopeStarts[0] * supersawExpressionStart;\n            let expressionEnd = settingsExpressionMult * fadeExpressionEnd * chordExpressionEnd * pitchExpressionEnd * envelopeEnds[0] * supersawExpressionEnd;\n            if (this.isModActive(Config.modulators.dictionary[\"pre volume\"].index, channelIndex, tone.instrumentIndex)) {\n                const startVal = this.getModValue(Config.modulators.dictionary[\"pre volume\"].index, channelIndex, tone.instrumentIndex, false);\n                const endVal = this.getModValue(Config.modulators.dictionary[\"pre volume\"].index, channelIndex, tone.instrumentIndex, true);\n                expressionStart *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(startVal));\n                expressionEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(endVal));\n            }\n            if (isMono && tone.pitchCount <= instrument.monoChordTone) {\n                expressionStart = 0;\n                expressionEnd = 0;\n                instrumentState.awake = false;\n            }\n            tone.expression = expressionStart;\n            tone.expressionDelta = (expressionEnd - expressionStart) / roundedSamplesPerTick;\n            if (instrument.type == 7) {\n                let stringDecayStart;\n                if (tone.prevStringDecay != null) {\n                    stringDecayStart = tone.prevStringDecay;\n                }\n                else {\n                    const sustainEnvelopeStart = tone.envelopeComputer.envelopeStarts[4];\n                    stringDecayStart = 1.0 - Math.min(1.0, sustainEnvelopeStart * tone.stringSustainStart / (Config.stringSustainRange - 1));\n                }\n                const sustainEnvelopeEnd = tone.envelopeComputer.envelopeEnds[4];\n                let stringDecayEnd = 1.0 - Math.min(1.0, sustainEnvelopeEnd * tone.stringSustainEnd / (Config.stringSustainRange - 1));\n                tone.prevStringDecay = stringDecayEnd;\n                const unisonVoices = instrument.unisonVoices;\n                for (let i = tone.pickedStrings.length; i < unisonVoices; i++) {\n                    tone.pickedStrings[i] = new PickedString();\n                }\n                if (tone.atNoteStart && !transition.continues && !tone.forceContinueAtStart) {\n                    for (const pickedString of tone.pickedStrings) {\n                        pickedString.delayIndex = -1;\n                    }\n                }\n                for (let i = 0; i < unisonVoices; i++) {\n                    tone.pickedStrings[i].update(this, instrumentState, tone, i, roundedSamplesPerTick, stringDecayStart, stringDecayEnd, instrument.stringSustainType);\n                }\n            }\n        }\n    }\n    static getLFOAmplitude(instrument, secondsIntoBar) {\n        let effect = 0.0;\n        for (const vibratoPeriodSeconds of Config.vibratoTypes[instrument.vibratoType].periodsSeconds) {\n            effect += Math.sin(Math.PI * 2.0 * secondsIntoBar / vibratoPeriodSeconds);\n        }\n        return effect;\n    }\n    static getInstrumentSynthFunction(instrument) {\n        if (instrument.type == 1) {\n            const fingerprint = instrument.algorithm + \"_\" + instrument.feedbackType;\n            if (Synth.fmSynthFunctionCache[fingerprint] == undefined) {\n                const synthSource = [];\n                for (const line of Synth.fmSourceTemplate) {\n                    if (line.indexOf(\"// CARRIER OUTPUTS\") != -1) {\n                        const outputs = [];\n                        for (let j = 0; j < Config.algorithms[instrument.algorithm].carrierCount; j++) {\n                            outputs.push(\"operator\" + j + \"Scaled\");\n                        }\n                        synthSource.push(line.replace(\"/*operator#Scaled*/\", outputs.join(\" + \")));\n                    }\n                    else if (line.indexOf(\"// INSERT OPERATOR COMPUTATION HERE\") != -1) {\n                        for (let j = Config.operatorCount - 1; j >= 0; j--) {\n                            for (const operatorLine of Synth.operatorSourceTemplate) {\n                                if (operatorLine.indexOf(\"/* + operator@Scaled*/\") != -1) {\n                                    let modulators = \"\";\n                                    for (const modulatorNumber of Config.algorithms[instrument.algorithm].modulatedBy[j]) {\n                                        modulators += \" + operator\" + (modulatorNumber - 1) + \"Scaled\";\n                                    }\n                                    const feedbackIndices = Config.feedbacks[instrument.feedbackType].indices[j];\n                                    if (feedbackIndices.length > 0) {\n                                        modulators += \" + feedbackMult * (\";\n                                        const feedbacks = [];\n                                        for (const modulatorNumber of feedbackIndices) {\n                                            feedbacks.push(\"operator\" + (modulatorNumber - 1) + \"Output\");\n                                        }\n                                        modulators += feedbacks.join(\" + \") + \")\";\n                                    }\n                                    synthSource.push(operatorLine.replace(/\\#/g, j + \"\").replace(\"/* + operator@Scaled*/\", modulators));\n                                }\n                                else {\n                                    synthSource.push(operatorLine.replace(/\\#/g, j + \"\"));\n                                }\n                            }\n                        }\n                    }\n                    else if (line.indexOf(\"#\") != -1) {\n                        for (let j = 0; j < Config.operatorCount; j++) {\n                            synthSource.push(line.replace(/\\#/g, j + \"\"));\n                        }\n                    }\n                    else {\n                        synthSource.push(line);\n                    }\n                }\n                const wrappedFmSynth = \"return (synth, bufferIndex, roundedSamplesPerTick, tone, instrument) => {\" + synthSource.join(\"\\n\") + \"}\";\n                Synth.fmSynthFunctionCache[fingerprint] = new Function(\"Config\", \"Synth\", wrappedFmSynth)(Config, Synth);\n            }\n            return Synth.fmSynthFunctionCache[fingerprint];\n        }\n        else if (instrument.type == 0) {\n            if (instrument.isUsingAdvancedLoopControls) {\n                return Synth.loopableChipSynth;\n            }\n            return Synth.chipSynth;\n        }\n        else if (instrument.type == 9) {\n            return Synth.chipSynth;\n        }\n        else if (instrument.type == 5) {\n            return Synth.harmonicsSynth;\n        }\n        else if (instrument.type == 6) {\n            return Synth.pulseWidthSynth;\n        }\n        else if (instrument.type == 8) {\n            return Synth.supersawSynth;\n        }\n        else if (instrument.type == 7) {\n            return Synth.pickedStringSynth;\n        }\n        else if (instrument.type == 2) {\n            return Synth.noiseSynth;\n        }\n        else if (instrument.type == 3) {\n            return Synth.spectrumSynth;\n        }\n        else if (instrument.type == 4) {\n            return Synth.drumsetSynth;\n        }\n        else if (instrument.type == 10) {\n            return Synth.modSynth;\n        }\n        else if (instrument.type == 11) {\n            const fingerprint = instrument.customAlgorithm.name + \"_\" + instrument.customFeedbackType.name;\n            if (Synth.fm6SynthFunctionCache[fingerprint] == undefined) {\n                const synthSource = [];\n                for (const line of Synth.fmSourceTemplate) {\n                    if (line.indexOf(\"// CARRIER OUTPUTS\") != -1) {\n                        const outputs = [];\n                        for (let j = 0; j < instrument.customAlgorithm.carrierCount; j++) {\n                            outputs.push(\"operator\" + j + \"Scaled\");\n                        }\n                        synthSource.push(line.replace(\"/*operator#Scaled*/\", outputs.join(\" + \")));\n                    }\n                    else if (line.indexOf(\"// INSERT OPERATOR COMPUTATION HERE\") != -1) {\n                        for (let j = Config.operatorCount + 2 - 1; j >= 0; j--) {\n                            for (const operatorLine of Synth.operatorSourceTemplate) {\n                                if (operatorLine.indexOf(\"/* + operator@Scaled*/\") != -1) {\n                                    let modulators = \"\";\n                                    for (const modulatorNumber of instrument.customAlgorithm.modulatedBy[j]) {\n                                        modulators += \" + operator\" + (modulatorNumber - 1) + \"Scaled\";\n                                    }\n                                    const feedbackIndices = instrument.customFeedbackType.indices[j];\n                                    if (feedbackIndices.length > 0) {\n                                        modulators += \" + feedbackMult * (\";\n                                        const feedbacks = [];\n                                        for (const modulatorNumber of feedbackIndices) {\n                                            feedbacks.push(\"operator\" + (modulatorNumber - 1) + \"Output\");\n                                        }\n                                        modulators += feedbacks.join(\" + \") + \")\";\n                                    }\n                                    synthSource.push(operatorLine.replace(/\\#/g, j + \"\").replace(\"/* + operator@Scaled*/\", modulators));\n                                }\n                                else {\n                                    synthSource.push(operatorLine.replace(/\\#/g, j + \"\"));\n                                }\n                            }\n                        }\n                    }\n                    else if (line.indexOf(\"#\") != -1) {\n                        for (let j = 0; j < Config.operatorCount + 2; j++) {\n                            synthSource.push(line.replace(/\\#/g, j + \"\"));\n                        }\n                    }\n                    else {\n                        synthSource.push(line);\n                    }\n                }\n                const wrappedFm6Synth = \"return (synth, bufferIndex, roundedSamplesPerTick, tone, instrument) => {\" + synthSource.join(\"\\n\") + \"}\";\n                Synth.fm6SynthFunctionCache[fingerprint] = new Function(\"Config\", \"Synth\", wrappedFm6Synth)(Config, Synth);\n            }\n            return Synth.fm6SynthFunctionCache[fingerprint];\n        }\n        else {\n            throw new Error(\"Unrecognized instrument type: \" + instrument.type);\n        }\n    }\n    static wrap(x, b) {\n        return (x % b + b) % b;\n    }\n    static loopableChipSynth(synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState) {\n        const aliases = (instrumentState.effectsIncludeType(3) && instrumentState.aliases);\n        const dataL = synth.tempInstrumentSampleBufferL;\n        const dataR = synth.tempInstrumentSampleBufferR;\n        const waveL = instrumentState.waveL;\n        const waveR = instrumentState.waveR;\n        const volumeScale = instrumentState.volumeScale;\n        const waveLength = (aliases && instrumentState.type == 8) ? waveL.length : waveL.length - 1;\n        let chipWaveLoopEnd = Math.max(0, Math.min(waveLength, instrumentState.chipWaveLoopEnd));\n        let chipWaveLoopStart = Math.max(0, Math.min(chipWaveLoopEnd - 1, instrumentState.chipWaveLoopStart));\n        let chipWaveLoopLength = chipWaveLoopEnd - chipWaveLoopStart;\n        if (chipWaveLoopLength < 2) {\n            chipWaveLoopStart = 0;\n            chipWaveLoopEnd = waveLength;\n            chipWaveLoopLength = waveLength;\n        }\n        const chipWaveLoopMode = instrumentState.chipWaveLoopMode;\n        const chipWavePlayBackwards = instrumentState.chipWavePlayBackwards;\n        const unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\n        if (instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval)\n            tone.phases[1] = tone.phases[0];\n        let phaseDeltaA = tone.phaseDeltas[0] * waveLength;\n        let phaseDeltaB = tone.phaseDeltas[1] * waveLength;\n        let directionA = tone.directions[0];\n        let directionB = tone.directions[1];\n        let chipWaveCompletionA = tone.chipWaveCompletions[0];\n        let chipWaveCompletionB = tone.chipWaveCompletions[1];\n        if (chipWaveLoopMode === 3 || chipWaveLoopMode === 2 || chipWaveLoopMode === 0) {\n            if (!chipWavePlayBackwards) {\n                directionA = 1;\n                directionB = 1;\n            }\n            else {\n                directionA = -1;\n                directionB = -1;\n            }\n        }\n        if (chipWaveLoopMode === 0 || chipWaveLoopMode === 1) {\n            chipWaveCompletionA = 0;\n            chipWaveCompletionB = 0;\n        }\n        let lastWaveLA = tone.chipWaveCompletionsLastWaveL[0];\n        let lastWaveLB = tone.chipWaveCompletionsLastWaveL[1];\n        let lastWaveRA = tone.chipWaveCompletionsLastWaveR[0];\n        let lastWaveRB = tone.chipWaveCompletionsLastWaveR[1];\n        const chipWaveCompletionFadeLength = 1000;\n        const phaseDeltaScaleA = +tone.phaseDeltaScales[0];\n        const phaseDeltaScaleB = +tone.phaseDeltaScales[1];\n        let expression = +tone.expression;\n        const expressionDelta = +tone.expressionDelta;\n        let phaseA = Synth.wrap(tone.phases[0], 1) * waveLength;\n        let phaseB = Synth.wrap(tone.phases[1], 1) * waveLength;\n        let prevWaveIntegralLA = 0;\n        let prevWaveIntegralLB = 0;\n        let prevWaveIntegralRA = 0;\n        let prevWaveIntegralRB = 0;\n        if (!aliases) {\n            const phaseAInt = Math.floor(phaseA);\n            const phaseBInt = Math.floor(phaseB);\n            const indexA = Synth.wrap(phaseAInt, waveLength);\n            const indexB = Synth.wrap(phaseBInt, waveLength);\n            const phaseRatioA = phaseA - phaseAInt;\n            const phaseRatioB = phaseB - phaseBInt;\n            prevWaveIntegralLA = +waveL[indexA];\n            prevWaveIntegralLB = +waveL[indexB];\n            prevWaveIntegralRA = +waveR[indexA];\n            prevWaveIntegralRB = +waveR[indexB];\n            prevWaveIntegralLA += (waveL[Synth.wrap(indexA + 1, waveLength)] - prevWaveIntegralLA) * phaseRatioA;\n            prevWaveIntegralLB += (waveL[Synth.wrap(indexB + 1, waveLength)] - prevWaveIntegralLB) * phaseRatioB;\n            prevWaveIntegralRA += (waveR[Synth.wrap(indexA + 1, waveLength)] - prevWaveIntegralRA) * phaseRatioA;\n            prevWaveIntegralRB += (waveR[Synth.wrap(indexB + 1, waveLength)] - prevWaveIntegralRB) * phaseRatioB;\n        }\n        const filtersL = tone.noteFiltersL;\n        const filtersR = tone.noteFiltersR;\n        const filterCount = tone.noteFilterCount | 0;\n        let initialFilterInputL1 = +tone.initialNoteFilterInputL1;\n        let initialFilterInputR1 = +tone.initialNoteFilterInputR1;\n        let initialFilterInputL2 = +tone.initialNoteFilterInputL2;\n        let initialFilterInputR2 = +tone.initialNoteFilterInputR2;\n        const applyFilters = Synth.applyFilters;\n        const stopIndex = bufferIndex + roundedSamplesPerTick;\n        let prevWaveLA = tone.chipWavePrevWavesL[0];\n        let prevWaveLB = tone.chipWavePrevWavesL[1];\n        let prevWaveRA = tone.chipWavePrevWavesR[0];\n        let prevWaveRB = tone.chipWavePrevWavesR[1];\n        for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n            if (chipWaveCompletionA > 0 && chipWaveCompletionA < chipWaveCompletionFadeLength) {\n                chipWaveCompletionA++;\n            }\n            if (chipWaveCompletionB > 0 && chipWaveCompletionB < chipWaveCompletionFadeLength) {\n                chipWaveCompletionB++;\n            }\n            let wrapped = 0;\n            phaseA += phaseDeltaA * directionA;\n            phaseB += phaseDeltaB * directionB;\n            if (chipWaveLoopMode === 2) {\n                if (directionA === 1) {\n                    if (phaseA > waveLength) {\n                        if (chipWaveCompletionA <= 0) {\n                            lastWaveLA = prevWaveLA;\n                            lastWaveRA = prevWaveRA;\n                            chipWaveCompletionA++;\n                        }\n                        wrapped = 1;\n                    }\n                }\n                else if (directionA === -1) {\n                    if (phaseA < 0) {\n                        if (chipWaveCompletionA <= 0) {\n                            lastWaveLA = prevWaveLA;\n                            lastWaveRA = prevWaveRA;\n                            chipWaveCompletionA++;\n                        }\n                        wrapped = 1;\n                    }\n                }\n                if (directionB === 1) {\n                    if (phaseB > waveLength) {\n                        if (chipWaveCompletionB <= 0) {\n                            lastWaveLB = prevWaveLB;\n                            lastWaveRB = prevWaveRB;\n                            chipWaveCompletionB++;\n                        }\n                        wrapped = 1;\n                    }\n                }\n                else if (directionA === -1) {\n                    if (phaseB < 0) {\n                        if (chipWaveCompletionB <= 0) {\n                            lastWaveLB = prevWaveLB;\n                            lastWaveRB = prevWaveRB;\n                            chipWaveCompletionB++;\n                        }\n                        wrapped = 1;\n                    }\n                }\n            }\n            else if (chipWaveLoopMode === 3) {\n                if (directionA === 1) {\n                    if (phaseA > chipWaveLoopEnd) {\n                        if (chipWaveCompletionA <= 0) {\n                            lastWaveLA = prevWaveLA;\n                            lastWaveRA = prevWaveRA;\n                            chipWaveCompletionA++;\n                        }\n                        wrapped = 1;\n                    }\n                }\n                else if (directionA === -1) {\n                    if (phaseA < chipWaveLoopStart) {\n                        if (chipWaveCompletionA <= 0) {\n                            lastWaveLA = prevWaveLA;\n                            lastWaveRA = prevWaveRA;\n                            chipWaveCompletionA++;\n                        }\n                        wrapped = 1;\n                    }\n                }\n                if (directionB === 1) {\n                    if (phaseB > chipWaveLoopEnd) {\n                        if (chipWaveCompletionB <= 0) {\n                            lastWaveLB = prevWaveLB;\n                            lastWaveRB = prevWaveRB;\n                            chipWaveCompletionB++;\n                        }\n                        wrapped = 1;\n                    }\n                }\n                else if (directionA === -1) {\n                    if (phaseB < chipWaveLoopStart) {\n                        if (chipWaveCompletionB <= 0) {\n                            lastWaveLB = prevWaveLB;\n                            lastWaveRB = prevWaveRB;\n                            chipWaveCompletionB++;\n                        }\n                        wrapped = 1;\n                    }\n                }\n            }\n            else if (chipWaveLoopMode === 0) {\n                if (directionA === 1) {\n                    if (phaseA > chipWaveLoopEnd) {\n                        phaseA = chipWaveLoopStart + Synth.wrap(phaseA - chipWaveLoopEnd, chipWaveLoopLength);\n                        wrapped = 1;\n                    }\n                }\n                else if (directionA === -1) {\n                    if (phaseA < chipWaveLoopStart) {\n                        phaseA = chipWaveLoopEnd - Synth.wrap(chipWaveLoopStart - phaseA, chipWaveLoopLength);\n                        wrapped = 1;\n                    }\n                }\n                if (directionB === 1) {\n                    if (phaseB > chipWaveLoopEnd) {\n                        phaseB = chipWaveLoopStart + Synth.wrap(phaseB - chipWaveLoopEnd, chipWaveLoopLength);\n                        wrapped = 1;\n                    }\n                }\n                else if (directionB === -1) {\n                    if (phaseB < chipWaveLoopStart) {\n                        phaseB = chipWaveLoopEnd - Synth.wrap(chipWaveLoopStart - phaseB, chipWaveLoopLength);\n                        wrapped = 1;\n                    }\n                }\n            }\n            else if (chipWaveLoopMode === 1) {\n                if (directionA === 1) {\n                    if (phaseA > chipWaveLoopEnd) {\n                        phaseA = chipWaveLoopEnd - Synth.wrap(phaseA - chipWaveLoopEnd, chipWaveLoopLength);\n                        directionA = -1;\n                        wrapped = 1;\n                    }\n                }\n                else if (directionA === -1) {\n                    if (phaseA < chipWaveLoopStart) {\n                        phaseA = chipWaveLoopStart + Synth.wrap(chipWaveLoopStart - phaseA, chipWaveLoopLength);\n                        directionA = 1;\n                        wrapped = 1;\n                    }\n                }\n                if (directionB === 1) {\n                    if (phaseB > chipWaveLoopEnd) {\n                        phaseB = chipWaveLoopEnd - Synth.wrap(phaseB - chipWaveLoopEnd, chipWaveLoopLength);\n                        directionB = -1;\n                        wrapped = 1;\n                    }\n                }\n                else if (directionB === -1) {\n                    if (phaseB < chipWaveLoopStart) {\n                        phaseB = chipWaveLoopStart + Synth.wrap(chipWaveLoopStart - phaseB, chipWaveLoopLength);\n                        directionB = 1;\n                        wrapped = 1;\n                    }\n                }\n            }\n            let waveLA = 0;\n            let waveLB = 0;\n            let waveRA = 0;\n            let waveRB = 0;\n            let inputSampleL = 0;\n            let inputSampleR = 0;\n            if (aliases) {\n                waveLA = waveL[Synth.wrap(Math.floor(phaseA), waveLength)];\n                waveLB = waveL[Synth.wrap(Math.floor(phaseB), waveLength)];\n                waveRA = waveR[Synth.wrap(Math.floor(phaseA), waveLength)];\n                waveRB = waveR[Synth.wrap(Math.floor(phaseB), waveLength)];\n                prevWaveLA = waveLA;\n                prevWaveLB = waveLB;\n                prevWaveRA = waveRA;\n                prevWaveRB = waveRB;\n                const completionFadeA = chipWaveCompletionA > 0 ? ((chipWaveCompletionFadeLength - Math.min(chipWaveCompletionA, chipWaveCompletionFadeLength)) / chipWaveCompletionFadeLength) : 1;\n                const completionFadeB = chipWaveCompletionB > 0 ? ((chipWaveCompletionFadeLength - Math.min(chipWaveCompletionB, chipWaveCompletionFadeLength)) / chipWaveCompletionFadeLength) : 1;\n                inputSampleL = 0;\n                if (chipWaveCompletionA > 0) {\n                    inputSampleL += lastWaveLA * completionFadeA;\n                    inputSampleR += lastWaveLA * completionFadeA;\n                }\n                else {\n                    inputSampleL += waveLA;\n                    inputSampleR += waveRA;\n                }\n                if (chipWaveCompletionB > 0) {\n                    inputSampleL += lastWaveLB * completionFadeB;\n                    inputSampleR += lastWaveRB * completionFadeB;\n                }\n                else {\n                    inputSampleL += waveLB;\n                    inputSampleR += waveRB;\n                }\n            }\n            else {\n                const phaseAInt = Math.floor(phaseA);\n                const phaseBInt = Math.floor(phaseB);\n                const indexA = Synth.wrap(phaseAInt, waveLength);\n                const indexB = Synth.wrap(phaseBInt, waveLength);\n                let nextWaveIntegralLA = waveL[indexA];\n                let nextWaveIntegralLB = waveL[indexB];\n                let nextWaveIntegralRA = waveR[indexA];\n                let nextWaveIntegralRB = waveR[indexB];\n                const phaseRatioA = phaseA - phaseAInt;\n                const phaseRatioB = phaseB - phaseBInt;\n                nextWaveIntegralLA += (waveL[Synth.wrap(indexA + 1, waveLength)] - nextWaveIntegralLA) * phaseRatioA;\n                nextWaveIntegralLB += (waveL[Synth.wrap(indexB + 1, waveLength)] - nextWaveIntegralLB) * phaseRatioB;\n                nextWaveIntegralRA += (waveR[Synth.wrap(indexA + 1, waveLength)] - nextWaveIntegralRA) * phaseRatioA;\n                nextWaveIntegralRB += (waveR[Synth.wrap(indexB + 1, waveLength)] - nextWaveIntegralRB) * phaseRatioB;\n                if (!(chipWaveLoopMode === 0 && chipWaveLoopStart === 0 && chipWaveLoopEnd === waveLength) && wrapped !== 0) {\n                    let pwila = 0;\n                    let pwilb = 0;\n                    let pwira = 0;\n                    let pwirb = 0;\n                    const phaseA_ = Math.max(0, phaseA - phaseDeltaA * directionA);\n                    const phaseB_ = Math.max(0, phaseB - phaseDeltaB * directionB);\n                    const phaseAInt = Math.floor(phaseA_);\n                    const phaseBInt = Math.floor(phaseB_);\n                    const indexA = Synth.wrap(phaseAInt, waveLength);\n                    const indexB = Synth.wrap(phaseBInt, waveLength);\n                    pwila = waveL[indexA];\n                    pwilb = waveL[indexB];\n                    pwira = waveR[indexA];\n                    pwirb = waveR[indexB];\n                    pwila += (waveL[Synth.wrap(indexA + 1, waveLength)] - pwila) * (phaseA_ - phaseAInt) * directionA;\n                    pwilb += (waveL[Synth.wrap(indexB + 1, waveLength)] - pwilb) * (phaseB_ - phaseBInt) * directionB;\n                    pwira += (waveR[Synth.wrap(indexA + 1, waveLength)] - pwira) * (phaseA_ - phaseAInt) * directionA;\n                    pwirb += (waveR[Synth.wrap(indexB + 1, waveLength)] - pwirb) * (phaseB_ - phaseBInt) * directionB;\n                    prevWaveIntegralLA = pwila;\n                    prevWaveIntegralLB = pwilb;\n                    prevWaveIntegralRA = pwira;\n                    prevWaveIntegralRB = pwirb;\n                }\n                if (chipWaveLoopMode === 1 && wrapped !== 0) {\n                    waveLA = prevWaveLA;\n                    waveLB = prevWaveLB;\n                    waveRA = prevWaveRA;\n                    waveRB = prevWaveRB;\n                }\n                else {\n                    waveLA = (nextWaveIntegralLA - prevWaveIntegralLA) / (phaseDeltaA * directionA);\n                    waveLB = (nextWaveIntegralLB - prevWaveIntegralLB) / (phaseDeltaB * directionB);\n                    waveRA = (nextWaveIntegralRA - prevWaveIntegralRA) / (phaseDeltaA * directionA);\n                    waveRB = (nextWaveIntegralRB - prevWaveIntegralRB) / (phaseDeltaB * directionB);\n                }\n                prevWaveLA = waveLA;\n                prevWaveLB = waveLB;\n                prevWaveRA = waveRA;\n                prevWaveRB = waveRB;\n                prevWaveIntegralLA = nextWaveIntegralLA;\n                prevWaveIntegralLB = nextWaveIntegralLB;\n                prevWaveIntegralRA = nextWaveIntegralRA;\n                prevWaveIntegralRB = nextWaveIntegralRB;\n                const completionFadeA = chipWaveCompletionA > 0 ? ((chipWaveCompletionFadeLength - Math.min(chipWaveCompletionA, chipWaveCompletionFadeLength)) / chipWaveCompletionFadeLength) : 1;\n                const completionFadeB = chipWaveCompletionB > 0 ? ((chipWaveCompletionFadeLength - Math.min(chipWaveCompletionB, chipWaveCompletionFadeLength)) / chipWaveCompletionFadeLength) : 1;\n                if (chipWaveCompletionA > 0) {\n                    inputSampleL += lastWaveLA * completionFadeA;\n                    inputSampleR += lastWaveRA * completionFadeA;\n                }\n                else {\n                    inputSampleL += waveLA;\n                    inputSampleR += waveRA;\n                }\n                if (chipWaveCompletionB > 0) {\n                    inputSampleL += lastWaveLB * completionFadeB;\n                    inputSampleR += lastWaveRB * completionFadeB;\n                }\n                else {\n                    inputSampleL += waveLB * unisonSign;\n                    inputSampleR += waveRB * unisonSign;\n                }\n            }\n            const sampleL = applyFilters(inputSampleL * volumeScale, initialFilterInputL1, initialFilterInputL2, filterCount, filtersL);\n            const sampleR = applyFilters(inputSampleR * volumeScale, initialFilterInputR1, initialFilterInputR2, filterCount, filtersR);\n            initialFilterInputL2 = initialFilterInputL1;\n            initialFilterInputR2 = initialFilterInputR1;\n            initialFilterInputL1 = inputSampleL * volumeScale;\n            initialFilterInputR1 = inputSampleR * volumeScale;\n            phaseDeltaA *= phaseDeltaScaleA;\n            phaseDeltaB *= phaseDeltaScaleB;\n            const outputL = sampleL * expression;\n            const outputR = sampleR * expression;\n            expression += expressionDelta;\n            dataL[sampleIndex] += outputL;\n            dataR[sampleIndex] += outputR;\n        }\n        tone.phases[0] = phaseA / waveLength;\n        tone.phases[1] = phaseB / waveLength;\n        tone.phaseDeltas[0] = phaseDeltaA / waveLength;\n        tone.phaseDeltas[1] = phaseDeltaB / waveLength;\n        tone.directions[0] = directionA;\n        tone.directions[1] = directionB;\n        tone.chipWaveCompletions[0] = chipWaveCompletionA;\n        tone.chipWaveCompletions[1] = chipWaveCompletionB;\n        tone.chipWavePrevWavesL[0] = prevWaveLA;\n        tone.chipWavePrevWavesL[1] = prevWaveLB;\n        tone.chipWavePrevWavesR[0] = prevWaveRA;\n        tone.chipWavePrevWavesR[1] = prevWaveRB;\n        tone.chipWaveCompletionsLastWaveL[0] = lastWaveLA;\n        tone.chipWaveCompletionsLastWaveL[1] = lastWaveLB;\n        tone.chipWaveCompletionsLastWaveR[0] = lastWaveRA;\n        tone.chipWaveCompletionsLastWaveR[1] = lastWaveRB;\n        tone.expression = expression;\n        synth.sanitizeFilters(filtersL);\n        synth.sanitizeFilters(filtersR);\n        tone.initialNoteFilterInputL1 = initialFilterInputL1;\n        tone.initialNoteFilterInputR1 = initialFilterInputR1;\n        tone.initialNoteFilterInputL2 = initialFilterInputL2;\n        tone.initialNoteFilterInputR2 = initialFilterInputR2;\n    }\n    static chipSynth(synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState) {\n        const aliases = (instrumentState.effectsIncludeType(5) && instrumentState.aliases);\n        const dataL = synth.tempInstrumentSampleBufferL;\n        const dataR = synth.tempInstrumentSampleBufferR;\n        const waveL = instrumentState.waveL;\n        const waveR = instrumentState.waveR;\n        const volumeScale = instrumentState.volumeScale;\n        const waveLength = (aliases && instrumentState.type == 8) ? waveL.length : waveL.length - 1;\n        const unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\n        if (instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval)\n            tone.phases[1] = tone.phases[0];\n        let phaseDeltaA = tone.phaseDeltas[0] * waveLength;\n        let phaseDeltaB = tone.phaseDeltas[1] * waveLength;\n        const phaseDeltaScaleA = +tone.phaseDeltaScales[0];\n        const phaseDeltaScaleB = +tone.phaseDeltaScales[1];\n        let expression = +tone.expression;\n        const expressionDelta = +tone.expressionDelta;\n        let phaseA = (tone.phases[0] % 1) * waveLength;\n        let phaseB = (tone.phases[1] % 1) * waveLength;\n        const filtersL = tone.noteFiltersL;\n        const filtersR = tone.noteFiltersR;\n        const filterCount = tone.noteFilterCount | 0;\n        let initialFilterInputL1 = +tone.initialNoteFilterInputL1;\n        let initialFilterInputR1 = +tone.initialNoteFilterInputR1;\n        let initialFilterInputL2 = +tone.initialNoteFilterInputL2;\n        let initialFilterInputR2 = +tone.initialNoteFilterInputR2;\n        const applyFilters = Synth.applyFilters;\n        let prevWaveIntegralLA = 0;\n        let prevWaveIntegralLB = 0;\n        let prevWaveIntegralRA = 0;\n        let prevWaveIntegralRB = 0;\n        if (!aliases) {\n            const phaseAInt = phaseA | 0;\n            const phaseBInt = phaseB | 0;\n            const indexA = phaseAInt % waveLength;\n            const indexB = phaseBInt % waveLength;\n            const phaseRatioA = phaseA - phaseAInt;\n            const phaseRatioB = phaseB - phaseBInt;\n            prevWaveIntegralLA = +waveL[indexA];\n            prevWaveIntegralLB = +waveL[indexB];\n            prevWaveIntegralRA = +waveR[indexA];\n            prevWaveIntegralRB = +waveR[indexB];\n            prevWaveIntegralLA += (waveL[indexA + 1] - prevWaveIntegralLA) * phaseRatioA;\n            prevWaveIntegralLB += (waveL[indexB + 1] - prevWaveIntegralLB) * phaseRatioB;\n            prevWaveIntegralRA += (waveR[indexA + 1] - prevWaveIntegralRA) * phaseRatioA;\n            prevWaveIntegralRB += (waveR[indexB + 1] - prevWaveIntegralRB) * phaseRatioB;\n        }\n        const stopIndex = bufferIndex + roundedSamplesPerTick;\n        for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n            phaseA += phaseDeltaA;\n            phaseB += phaseDeltaB;\n            let waveLA;\n            let waveLB;\n            let waveRA;\n            let waveRB;\n            let inputSampleL;\n            let inputSampleR;\n            if (aliases) {\n                waveLA = waveL[(0 | phaseA) % waveLength];\n                waveLB = waveL[(0 | phaseB) % waveLength];\n                waveRA = waveR[(0 | phaseA) % waveLength];\n                waveRB = waveR[(0 | phaseB) % waveLength];\n                inputSampleL = waveLA + waveLB;\n                inputSampleR = waveRA + waveRB;\n            }\n            else {\n                const phaseAInt = phaseA | 0;\n                const phaseBInt = phaseB | 0;\n                const indexA = phaseAInt % waveLength;\n                const indexB = phaseBInt % waveLength;\n                let nextWaveIntegralLA = waveL[indexA];\n                let nextWaveIntegralLB = waveL[indexB];\n                let nextWaveIntegralRA = waveR[indexA];\n                let nextWaveIntegralRB = waveR[indexB];\n                const phaseRatioA = phaseA - phaseAInt;\n                const phaseRatioB = phaseB - phaseBInt;\n                nextWaveIntegralLA += (waveL[indexA + 1] - nextWaveIntegralLA) * phaseRatioA;\n                nextWaveIntegralLB += (waveL[indexB + 1] - nextWaveIntegralLB) * phaseRatioB;\n                nextWaveIntegralRA += (waveR[indexA + 1] - nextWaveIntegralRA) * phaseRatioA;\n                nextWaveIntegralRB += (waveR[indexB + 1] - nextWaveIntegralRB) * phaseRatioB;\n                waveLA = (nextWaveIntegralLA - prevWaveIntegralLA) / phaseDeltaA;\n                waveLB = (nextWaveIntegralLB - prevWaveIntegralLB) / phaseDeltaB;\n                waveRA = (nextWaveIntegralRA - prevWaveIntegralRA) / phaseDeltaA;\n                waveRB = (nextWaveIntegralRB - prevWaveIntegralRB) / phaseDeltaB;\n                prevWaveIntegralLA = nextWaveIntegralLA;\n                prevWaveIntegralLB = nextWaveIntegralLB;\n                prevWaveIntegralRA = nextWaveIntegralRA;\n                prevWaveIntegralRB = nextWaveIntegralRB;\n                inputSampleL = waveLA + waveLB * unisonSign;\n                inputSampleR = waveRA + waveRB * unisonSign;\n            }\n            const sampleL = applyFilters(inputSampleL * volumeScale, initialFilterInputL1, initialFilterInputL2, filterCount, filtersL);\n            const sampleR = applyFilters(inputSampleR * volumeScale, initialFilterInputR1, initialFilterInputR2, filterCount, filtersR);\n            initialFilterInputL2 = initialFilterInputL1;\n            initialFilterInputR2 = initialFilterInputR1;\n            initialFilterInputL1 = inputSampleL * volumeScale;\n            initialFilterInputR1 = inputSampleR * volumeScale;\n            phaseDeltaA *= phaseDeltaScaleA;\n            phaseDeltaB *= phaseDeltaScaleB;\n            const outputL = sampleL * expression;\n            const outputR = sampleR * expression;\n            expression += expressionDelta;\n            dataL[sampleIndex] += outputL;\n            dataR[sampleIndex] += outputR;\n        }\n        tone.phases[0] = phaseA / waveLength;\n        tone.phases[1] = phaseB / waveLength;\n        tone.phaseDeltas[0] = phaseDeltaA / waveLength;\n        tone.phaseDeltas[1] = phaseDeltaB / waveLength;\n        tone.expression = expression;\n        synth.sanitizeFilters(filtersL);\n        synth.sanitizeFilters(filtersR);\n        tone.initialNoteFilterInputL1 = initialFilterInputL1;\n        tone.initialNoteFilterInputR1 = initialFilterInputR1;\n        tone.initialNoteFilterInputL2 = initialFilterInputL2;\n        tone.initialNoteFilterInputR2 = initialFilterInputR2;\n    }\n    static harmonicsSynth(synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState) {\n        const data = synth.tempInstrumentSampleBufferL;\n        const wave = instrumentState.waveL;\n        const waveLength = wave.length - 1;\n        const unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\n        if (instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval)\n            tone.phases[1] = tone.phases[0];\n        let phaseDeltaA = tone.phaseDeltas[0] * waveLength;\n        let phaseDeltaB = tone.phaseDeltas[1] * waveLength;\n        const phaseDeltaScaleA = +tone.phaseDeltaScales[0];\n        const phaseDeltaScaleB = +tone.phaseDeltaScales[1];\n        let expression = +tone.expression;\n        const expressionDelta = +tone.expressionDelta;\n        let phaseA = (tone.phases[0] % 1) * waveLength;\n        let phaseB = (tone.phases[1] % 1) * waveLength;\n        const filters = tone.noteFiltersL;\n        const filterCount = tone.noteFilterCount | 0;\n        let initialFilterInput1 = +tone.initialNoteFilterInputL1;\n        let initialFilterInput2 = +tone.initialNoteFilterInputL2;\n        const applyFilters = Synth.applyFilters;\n        const phaseAInt = phaseA | 0;\n        const phaseBInt = phaseB | 0;\n        const indexA = phaseAInt % waveLength;\n        const indexB = phaseBInt % waveLength;\n        const phaseRatioA = phaseA - phaseAInt;\n        const phaseRatioB = phaseB - phaseBInt;\n        let prevWaveIntegralA = +wave[indexA];\n        let prevWaveIntegralB = +wave[indexB];\n        prevWaveIntegralA += (wave[indexA + 1] - prevWaveIntegralA) * phaseRatioA;\n        prevWaveIntegralB += (wave[indexB + 1] - prevWaveIntegralB) * phaseRatioB;\n        const stopIndex = bufferIndex + roundedSamplesPerTick;\n        for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n            phaseA += phaseDeltaA;\n            phaseB += phaseDeltaB;\n            const phaseAInt = phaseA | 0;\n            const phaseBInt = phaseB | 0;\n            const indexA = phaseAInt % waveLength;\n            const indexB = phaseBInt % waveLength;\n            let nextWaveIntegralA = wave[indexA];\n            let nextWaveIntegralB = wave[indexB];\n            const phaseRatioA = phaseA - phaseAInt;\n            const phaseRatioB = phaseB - phaseBInt;\n            nextWaveIntegralA += (wave[indexA + 1] - nextWaveIntegralA) * phaseRatioA;\n            nextWaveIntegralB += (wave[indexB + 1] - nextWaveIntegralB) * phaseRatioB;\n            const waveA = (nextWaveIntegralA - prevWaveIntegralA) / phaseDeltaA;\n            const waveB = (nextWaveIntegralB - prevWaveIntegralB) / phaseDeltaB;\n            prevWaveIntegralA = nextWaveIntegralA;\n            prevWaveIntegralB = nextWaveIntegralB;\n            const inputSample = waveA + waveB * unisonSign;\n            const sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n            initialFilterInput2 = initialFilterInput1;\n            initialFilterInput1 = inputSample;\n            phaseDeltaA *= phaseDeltaScaleA;\n            phaseDeltaB *= phaseDeltaScaleB;\n            const output = sample * expression;\n            expression += expressionDelta;\n            data[sampleIndex] += output;\n        }\n        tone.phases[0] = phaseA / waveLength;\n        tone.phases[1] = phaseB / waveLength;\n        tone.phaseDeltas[0] = phaseDeltaA / waveLength;\n        tone.phaseDeltas[1] = phaseDeltaB / waveLength;\n        tone.expression = expression;\n        synth.sanitizeFilters(filters);\n        tone.initialNoteFilterInputL1 = initialFilterInput1;\n        tone.initialNoteFilterInputL2 = initialFilterInput2;\n    }\n    static pickedStringSynth(synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState) {\n        const voiceCount = instrumentState.unisonVoices;\n        let pickedStringFunction = Synth.pickedStringFunctionCache[voiceCount];\n        if (pickedStringFunction == undefined) {\n            let pickedStringSource = \"return (synth, bufferIndex, runLength, tone, instrumentState) => {\";\n            pickedStringSource += `\n\t\t\t\tconst Config = beepbox.Config;\n\t\t\t\tconst Synth = beepbox.Synth;\n                const data = synth.tempInstrumentSampleBufferL;\n\t\t\t\t\n\t\t\t\tlet pickedString# = tone.pickedStrings[#];\n\t\t\t\tlet allPassSample# = +pickedString#.allPassSample;\n\t\t\t\tlet allPassPrevInput# = +pickedString#.allPassPrevInput;\n\t\t\t\tlet sustainFilterSample# = +pickedString#.sustainFilterSample;\n\t\t\t\tlet sustainFilterPrevOutput2# = +pickedString#.sustainFilterPrevOutput2;\n\t\t\t\tlet sustainFilterPrevInput1# = +pickedString#.sustainFilterPrevInput1;\n\t\t\t\tlet sustainFilterPrevInput2# = +pickedString#.sustainFilterPrevInput2;\n\t\t\t\tlet fractionalDelaySample# = +pickedString#.fractionalDelaySample;\n\t\t\t\tconst delayLine# = pickedString#.delayLine;\n\t\t\t\tconst delayBufferMask# = (delayLine#.length - 1) >> 0;\n\t\t\t\tlet delayIndex# = pickedString#.delayIndex|0;\n\t\t\t\tdelayIndex# = (delayIndex# & delayBufferMask#) + delayLine#.length;\n\t\t\t\tlet delayLength# = +pickedString#.prevDelayLength;\n\t\t\t\tconst delayLengthDelta# = +pickedString#.delayLengthDelta;\n\t\t\t\tlet allPassG# = +pickedString#.allPassG;\n\t\t\t\tlet sustainFilterA1# = +pickedString#.sustainFilterA1;\n\t\t\t\tlet sustainFilterA2# = +pickedString#.sustainFilterA2;\n\t\t\t\tlet sustainFilterB0# = +pickedString#.sustainFilterB0;\n\t\t\t\tlet sustainFilterB1# = +pickedString#.sustainFilterB1;\n\t\t\t\tlet sustainFilterB2# = +pickedString#.sustainFilterB2;\n\t\t\t\tconst allPassGDelta# = +pickedString#.allPassGDelta;\n\t\t\t\tconst sustainFilterA1Delta# = +pickedString#.sustainFilterA1Delta;\n\t\t\t\tconst sustainFilterA2Delta# = +pickedString#.sustainFilterA2Delta;\n\t\t\t\tconst sustainFilterB0Delta# = +pickedString#.sustainFilterB0Delta;\n\t\t\t\tconst sustainFilterB1Delta# = +pickedString#.sustainFilterB1Delta;\n\t\t\t\tconst sustainFilterB2Delta# = +pickedString#.sustainFilterB2Delta;\n\t\t\t\t\n\t\t\t\tlet expression = +tone.expression;\n\t\t\t\tconst expressionDelta = +tone.expressionDelta;\n\t\t\t\t\n\t\t\t\tconst unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\n\t\t\t\tconst delayResetOffset# = pickedString#.delayResetOffset|0;\n\t\t\t\t\n\t\t\t\tconst filters = tone.noteFiltersL;\n\t\t\t\tconst filterCount = tone.noteFilterCount|0;\n\t\t\t\tlet initialFilterInput1 = +tone.initialNoteFilterInputL1;\n\t\t\t\tlet initialFilterInput2 = +tone.initialNoteFilterInputL2;\n\t\t\t\tconst applyFilters = Synth.applyFilters;\n\t\t\t\t\n\t\t\t\tconst stopIndex = bufferIndex + runLength;\n\t\t\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\t\t\tconst targetSampleTime# = delayIndex# - delayLength#;\n\t\t\t\t\tconst lowerIndex# = (targetSampleTime# + 0.125) | 0; // Offset to improve stability of all-pass filter.\n\t\t\t\t\tconst upperIndex# = lowerIndex# + 1;\n\t\t\t\t\tconst fractionalDelay# = upperIndex# - targetSampleTime#;\n\t\t\t\t\tconst fractionalDelayG# = (1.0 - fractionalDelay#) / (1.0 + fractionalDelay#); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\t\tconst prevInput# = delayLine#[lowerIndex# & delayBufferMask#];\n\t\t\t\t\tconst input# = delayLine#[upperIndex# & delayBufferMask#];\n\t\t\t\t\tfractionalDelaySample# = fractionalDelayG# * input# + prevInput# - fractionalDelayG# * fractionalDelaySample#;\n\t\t\t\t\t\n\t\t\t\t\tallPassSample# = fractionalDelaySample# * allPassG# + allPassPrevInput# - allPassG# * allPassSample#;\n\t\t\t\t\tallPassPrevInput# = fractionalDelaySample#;\n\t\t\t\t\t\n\t\t\t\t\tconst sustainFilterPrevOutput1# = sustainFilterSample#;\n\t\t\t\t\tsustainFilterSample# = sustainFilterB0# * allPassSample# + sustainFilterB1# * sustainFilterPrevInput1# + sustainFilterB2# * sustainFilterPrevInput2# - sustainFilterA1# * sustainFilterSample# - sustainFilterA2# * sustainFilterPrevOutput2#;\n\t\t\t\t\tsustainFilterPrevOutput2# = sustainFilterPrevOutput1#;\n\t\t\t\t\tsustainFilterPrevInput2# = sustainFilterPrevInput1#;\n\t\t\t\t\tsustainFilterPrevInput1# = allPassSample#;\n\t\t\t\t\t\n\t\t\t\t\tdelayLine#[delayIndex# & delayBufferMask#] += sustainFilterSample#;\n\t\t\t\t\tdelayLine#[(delayIndex# + delayResetOffset#) & delayBufferMask#] = 0.0;\n\t\t\t\t\tdelayIndex#++;\n\t\t\t\t\t\n\t\t\t\t\tconst inputSample = (`;\n            const sampleList = [];\n            for (let voice = 0; voice < voiceCount; voice++) {\n                sampleList.push(\"fractionalDelaySample\" + voice + (voice != 0 ? \" * unisonSign\" : \"\"));\n            }\n            pickedStringSource += sampleList.join(\" + \");\n            pickedStringSource += `) * expression;\n\t\t\t\t\tconst sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\t\t\tinitialFilterInput1 = inputSample;\n                    data[sampleIndex] += sample;\n\t\t\t\t\t\n\t\t\t\t\texpression += expressionDelta;\n\t\t\t\t\tdelayLength# += delayLengthDelta#;\n\t\t\t\t\tallPassG# += allPassGDelta#;\n\t\t\t\t\tsustainFilterA1# += sustainFilterA1Delta#;\n\t\t\t\t\tsustainFilterA2# += sustainFilterA2Delta#;\n\t\t\t\t\tsustainFilterB0# += sustainFilterB0Delta#;\n\t\t\t\t\tsustainFilterB1# += sustainFilterB1Delta#;\n\t\t\t\t\tsustainFilterB2# += sustainFilterB2Delta#;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Avoid persistent denormal or NaN values in the delay buffers and filter history.\n\t\t\t\tconst epsilon = (1.0e-24);\n\t\t\t\tif (!Number.isFinite(allPassSample#) || Math.abs(allPassSample#) < epsilon) allPassSample# = 0.0;\n\t\t\t\tif (!Number.isFinite(allPassPrevInput#) || Math.abs(allPassPrevInput#) < epsilon) allPassPrevInput# = 0.0;\n\t\t\t\tif (!Number.isFinite(sustainFilterSample#) || Math.abs(sustainFilterSample#) < epsilon) sustainFilterSample# = 0.0;\n\t\t\t\tif (!Number.isFinite(sustainFilterPrevOutput2#) || Math.abs(sustainFilterPrevOutput2#) < epsilon) sustainFilterPrevOutput2# = 0.0;\n\t\t\t\tif (!Number.isFinite(sustainFilterPrevInput1#) || Math.abs(sustainFilterPrevInput1#) < epsilon) sustainFilterPrevInput1# = 0.0;\n\t\t\t\tif (!Number.isFinite(sustainFilterPrevInput2#) || Math.abs(sustainFilterPrevInput2#) < epsilon) sustainFilterPrevInput2# = 0.0;\n\t\t\t\tif (!Number.isFinite(fractionalDelaySample#) || Math.abs(fractionalDelaySample#) < epsilon) fractionalDelaySample# = 0.0;\n\t\t\t\tpickedString#.allPassSample = allPassSample#;\n\t\t\t\tpickedString#.allPassPrevInput = allPassPrevInput#;\n\t\t\t\tpickedString#.sustainFilterSample = sustainFilterSample#;\n\t\t\t\tpickedString#.sustainFilterPrevOutput2 = sustainFilterPrevOutput2#;\n\t\t\t\tpickedString#.sustainFilterPrevInput1 = sustainFilterPrevInput1#;\n\t\t\t\tpickedString#.sustainFilterPrevInput2 = sustainFilterPrevInput2#;\n\t\t\t\tpickedString#.fractionalDelaySample = fractionalDelaySample#;\n\t\t\t\tpickedString#.delayIndex = delayIndex#;\n\t\t\t\tpickedString#.prevDelayLength = delayLength#;\n\t\t\t\tpickedString#.allPassG = allPassG#;\n\t\t\t\tpickedString#.sustainFilterA1 = sustainFilterA1#;\n\t\t\t\tpickedString#.sustainFilterA2 = sustainFilterA2#;\n\t\t\t\tpickedString#.sustainFilterB0 = sustainFilterB0#;\n\t\t\t\tpickedString#.sustainFilterB1 = sustainFilterB1#;\n\t\t\t\tpickedString#.sustainFilterB2 = sustainFilterB2#;\n\t\t\t\t\n\t\t\t\ttone.expression = expression;\n\t\t\t\t\n\t\t\t\tsynth.sanitizeFilters(filters);\n\t\t\t\ttone.initialNoteFilterInputL1 = initialFilterInput1;\n\t\t\t\ttone.initialNoteFilterInputL2 = initialFilterInput2;\n\t\t\t}`;\n            pickedStringSource = pickedStringSource.replace(/^.*\\#.*$/mg, line => {\n                const lines = [];\n                for (let voice = 0; voice < voiceCount; voice++) {\n                    lines.push(line.replace(/\\#/g, String(voice)));\n                }\n                return lines.join(\"\\n\");\n            });\n            pickedStringFunction = new Function(\"Config\", \"Synth\", pickedStringSource)(Config, Synth);\n            Synth.pickedStringFunctionCache[voiceCount] = pickedStringFunction;\n        }\n        pickedStringFunction(synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState);\n    }\n    static effectsSynth(synth, outputDataL, outputDataR, bufferIndex, runLength, instrumentState) {\n        const usesDistortion = instrumentState.effectsIncludeType(3);\n        const usesBitcrusher = instrumentState.effectsIncludeType(4);\n        const usesEqFilter = instrumentState.effectsIncludeType(5);\n        const usesGain = instrumentState.effectsIncludeType(9);\n        const usesPanning = instrumentState.effectsIncludeType(2);\n        const usesFlanger = instrumentState.effectsIncludeType(10);\n        const usesChorus = instrumentState.effectsIncludeType(1);\n        const usesEcho = instrumentState.effectsIncludeType(6);\n        const usesReverb = instrumentState.effectsIncludeType(0);\n        const usesGranular = instrumentState.effectsIncludeType(8);\n        const usesRingModulation = instrumentState.effectsIncludeType(7);\n        const isStereo = instrumentState.chipWaveInStereo && (instrumentState.synthesizer == Synth.loopableChipSynth || instrumentState.synthesizer == Synth.chipSynth);\n        let signature = \"\";\n        for (let i of instrumentState.effects) {\n            if (i != null) {\n                signature = signature + i.type.toString();\n                if (i.type == 2)\n                    signature = signature + i.panningMode.toString();\n            }\n        }\n        let effectsFunction = Synth.effectsFunctionCache[signature];\n        if (effectsFunction == undefined) {\n            let effectsSource = \"return (synth, outputDataL, outputDataR, bufferIndex, runLength, instrumentState) => {\";\n            const usesDelays = usesChorus || usesReverb || usesEcho || usesGranular || usesFlanger;\n            effectsSource += `\n            let effectState = instrumentState.effects[0]\n\n            const tempInstrumentSampleBufferL = synth.tempInstrumentSampleBufferL;\n            const tempInstrumentSampleBufferR = synth.tempInstrumentSampleBufferR;\n\n            let mixVolume = +instrumentState.mixVolume;\n            const mixVolumeDelta = +instrumentState.mixVolumeDelta;\n            `;\n            if (usesDelays) {\n                effectsSource += `\n\n                let delayInputMult = +instrumentState.delayInputMult;\n                const delayInputMultDelta = +instrumentState.delayInputMultDelta;`;\n            }\n            if (usesEqFilter) {\n                effectsSource += `\n\n                let filtersL = [];\n                let filtersR = [];\n\n                let filterCount = [];\n                let initialFilterInputL1 = [];\n                let initialFilterInputR1 = [];\n                let initialFilterInputL2 = [];\n                let initialFilterInputR2 = [];\n                let inputSampleL = [];\n                let inputSampleR = [];\n                const applyFilters = Synth.applyFilters;`;\n                effectsSource += `\n\n                let eqFilterVolume = [];\n                let eqFilterVolumeDelta = [];\n                `;\n            }\n            if (usesDistortion) {\n                effectsSource += `\n\n                const distortionBaseVolume = +Config.distortionBaseVolume;\n                let distortion = [];\n                let distortionDelta = [];\n                let distortionDrive = [];\n                let distortionDriveDelta = [];\n                const distortionFractionalResolution = 4.0;\n                const distortionOversampleCompensation = distortionBaseVolume / distortionFractionalResolution;\n                const distortionFractionalDelay1 = 1.0 / distortionFractionalResolution;\n                const distortionFractionalDelay2 = 2.0 / distortionFractionalResolution;\n                const distortionFractionalDelay3 = 3.0 / distortionFractionalResolution;\n                const distortionFractionalDelayG1 = (1.0 - distortionFractionalDelay1) / (1.0 + distortionFractionalDelay1); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n                const distortionFractionalDelayG2 = (1.0 - distortionFractionalDelay2) / (1.0 + distortionFractionalDelay2); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n                const distortionFractionalDelayG3 = (1.0 - distortionFractionalDelay3) / (1.0 + distortionFractionalDelay3); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n                const distortionNextOutputWeight1 = Math.cos(Math.PI * distortionFractionalDelay1) * 0.5 + 0.5;\n                const distortionNextOutputWeight2 = Math.cos(Math.PI * distortionFractionalDelay2) * 0.5 + 0.5;\n                const distortionNextOutputWeight3 = Math.cos(Math.PI * distortionFractionalDelay3) * 0.5 + 0.5;\n                const distortionPrevOutputWeight1 = 1.0 - distortionNextOutputWeight1;\n                const distortionPrevOutputWeight2 = 1.0 - distortionNextOutputWeight2;\n                const distortionPrevOutputWeight3 = 1.0 - distortionNextOutputWeight3;\n\n                let distortionFractionalInputL1 = [];\n                let distortionFractionalInputL2 = [];\n                let distortionFractionalInputL3 = [];\n                let distortionFractionalInputR1 = [];\n                let distortionFractionalInputR2 = [];\n                let distortionFractionalInputR3 = [];\n                let distortionPrevInputL = [];\n                let distortionPrevInputR = [];\n                let distortionNextOutputL = [];\n                let distortionNextOutputR = [];\n\n                let distortionReverse = [];\n                let distortionNextInputL = [];\n                let distortionNextInputR = [];\n                let distortionOutputL1 = [];\n                let distortionOutputL2 = [];\n                let distortionOutputL3 = [];\n                let distortionOutputR1 = [];\n                let distortionOutputR2 = [];\n                let distortionOutputR3 = [];`;\n            }\n            if (usesBitcrusher) {\n                effectsSource += `\n\n                let bitcrusherPrevInputL = [];\n                let bitcrusherPrevInputR = [];\n                let bitcrusherCurrentOutputL = [];\n                let bitcrusherCurrentOutputR = [];\n                let bitcrusherPhase = [];\n                let bitcrusherPhaseDelta = [];\n                let bitcrusherPhaseDeltaScale = [];\n                let bitcrusherScale = [];\n                let bitcrusherScaleScale = [];\n                let bitcrusherFoldLevel = [];\n                let bitcrusherFoldLevelScale = [];\n\n                let lerpedInputL = [];\n                let lerpedInputR = [];\n\n                let bitcrusherWrapLevel = [];\n                let wrappedSampleL = [];\n                let wrappedSampleR = [];\n                let foldedSampleL = [];\n                let foldedSampleR = [];\n                let scaledSampleL = [];\n                let scaledSampleR = [];\n                let oldValueL = [];\n                let oldValueR = [];\n                let newValueL = [];\n                let newValueR = [];`;\n            }\n            if (usesFlanger) {\n                effectsSource += `\n\n                const flangerMask = synth.flangerDelayBufferMask >>> 0;\n                let flangerDelayLineL = [];\n                let flangerDelayLineR = [];\n                let flangerDelayPos = [];\n\n                let flanger = [];\n                let flangerDelta = [];\n                let flangerSpeed = [];\n                let flangerSpeedDelta = [];\n                let flangerDepth = [];\n                let flangerDepthDelta = [];\n                let flangerFeedback = [];\n                let flangerFeedbackDelta = [];\n\n                let flangerPhase = [];\n                let flangerRange = [];\n\n                let flangerTapIndexL = [];\n                let flangerTapIndexR = [];\n                let flangerTapEndL = [];\n                let flangerTapEndR = [];\n                let flangerTapDeltaL = [];\n                let flangerTapDeltaR = [];\n\n                let flangerTapRatioL = []; // you don't know how happy i am that this variable exists\n                let flangerTapRatioR = [];\n                let flangerTapLA = [];\n                let flangerTapLB = [];\n                let flangerTapRA = [];\n                let flangerTapRB = [];\n                let flangerTapL = [];\n                let flangerTapR = [];`;\n            }\n            if (usesChorus) {\n                effectsSource += `\n\n                const chorusMask = synth.chorusDelayBufferMask >>> 0;\n                let chorusDelayLineL = [];\n                let chorusDelayLineR = [];\n                let chorusDelayPos = [];\n\n                let chorusVoiceMult = [];\n                let chorusVoiceMultDelta = [];\n                let chorusCombinedMult = [];\n                let chorusCombinedMultDelta = [];\n\n                const chorusDuration = +Config.chorusPeriodSeconds;\n                const chorusAngle = Math.PI * 2.0 / (chorusDuration * synth.samplesPerSecond);\n                const chorusRange = synth.samplesPerSecond * Config.chorusDelayRange;\n                const chorusOffset0 = synth.chorusDelayBufferSize - Config.chorusDelayOffsets[0][0] * chorusRange;\n                const chorusOffset1 = synth.chorusDelayBufferSize - Config.chorusDelayOffsets[0][1] * chorusRange;\n                const chorusOffset2 = synth.chorusDelayBufferSize - Config.chorusDelayOffsets[0][2] * chorusRange;\n                const chorusOffset3 = synth.chorusDelayBufferSize - Config.chorusDelayOffsets[1][0] * chorusRange;\n                const chorusOffset4 = synth.chorusDelayBufferSize - Config.chorusDelayOffsets[1][1] * chorusRange;\n                const chorusOffset5 = synth.chorusDelayBufferSize - Config.chorusDelayOffsets[1][2] * chorusRange;\n\n                let chorusPhase = [];\n                let chorusTap0Index = [];\n                let chorusTap1Index = [];\n                let chorusTap2Index = [];\n                let chorusTap3Index = [];\n                let chorusTap4Index = [];\n                let chorusTap5Index = [];\n                let chorusTap0End = [];\n                let chorusTap1End = [];\n                let chorusTap2End = [];\n                let chorusTap3End = [];\n                let chorusTap4End = [];\n                let chorusTap5End = [];\n                let chorusTap0Delta = [];\n                let chorusTap1Delta = [];\n                let chorusTap2Delta = [];\n                let chorusTap3Delta = [];\n                let chorusTap4Delta = [];\n                let chorusTap5Delta = [];\n\n                let chorusTap0Ratio = [];\n                let chorusTap1Ratio = [];\n                let chorusTap2Ratio = [];\n                let chorusTap3Ratio = [];\n                let chorusTap4Ratio = [];\n                let chorusTap5Ratio = [];\n                let chorusTap0A = [];\n                let chorusTap0B = [];\n                let chorusTap1A = [];\n                let chorusTap1B = [];\n                let chorusTap2A = [];\n                let chorusTap2B = [];\n                let chorusTap3A = [];\n                let chorusTap3B = [];\n                let chorusTap4A = [];\n                let chorusTap4B = [];\n                let chorusTap5A = [];\n                let chorusTap5B = [];\n                let chorusTap0 = [];\n                let chorusTap1 = [];\n                let chorusTap2 = [];\n                let chorusTap3 = [];\n                let chorusTap4 = [];\n                let chorusTap5 = [];`;\n            }\n            if (usesEcho) {\n                effectsSource += `\n                let echoMult = [];\n                let echoMultDelta = [];\n\n                let echoDelayLineL = [];\n                let echoDelayLineR = [];\n                let echoMask = [];\n\n                let echoDelayPosL = [];\n                let echoDelayPosR = [];\n                let echoDelayOffsetStart = [];\n                let echoDelayOffsetEnd   = [];\n                let echoDelayOffsetRatio = [];\n                let echoDelayOffsetRatioDelta = [];\n                let echoPingPong = [];\n\n                let echoShelfA1 = [];\n                let echoShelfB0 = [];\n                let echoShelfB1 = [];\n                let echoShelfSampleL = [];\n                let echoShelfSampleR = [];\n                let echoShelfPrevInputL = [];\n                let echoShelfPrevInputR = [];\n\n                let echoNextInputL = [];\n                let echoNextInputR = [];\n                let echoTapStartIndexL = [];\n                let echoTapStartIndexR = [];\n                let echoTapEndIndexL   = [];\n                let echoTapEndIndexR   = [];\n                let echoTapStartL = [];\n                let echoTapEndL   = [];\n                let echoTapStartR = [];\n                let echoTapEndR   = [];\n                let echoTapL = [];\n                let echoTapR = [];`;\n            }\n            if (usesReverb) {\n                effectsSource += `\n\n                const reverbMask = Config.reverbDelayBufferMask >>> 0; //TODO: Dynamic reverb buffer size.\n                let reverbDelayLine = [];\n                let reverbDelayPos = [];\n\n                let reverb = [];\n                let reverbDelta = [];\n\n                let reverbShelfA1 = [];\n                let reverbShelfB0 = [];\n                let reverbShelfB1 = [];\n                let reverbShelfSample0 = [];\n                let reverbShelfSample1 = [];\n                let reverbShelfSample2 = [];\n                let reverbShelfSample3 = [];\n                let reverbShelfPrevInput0 = [];\n                let reverbShelfPrevInput1 = [];\n                let reverbShelfPrevInput2 = [];\n                let reverbShelfPrevInput3 = [];\n\n                let reverbDelayPos1 = [];\n                let reverbDelayPos2 = [];\n                let reverbDelayPos3 = [];\n                let reverbSample0 = [];\n                let reverbSample1 = [];\n                let reverbSample2 = [];\n                let reverbSample3 = [];\n                let reverbTemp0 = [];\n                let reverbTemp1 = [];\n                let reverbTemp2 = [];\n                let reverbTemp3 = [];\n                let reverbShelfInput0 = [];\n                let reverbShelfInput1 = [];\n                let reverbShelfInput2 = [];\n                let reverbShelfInput3 = [];`;\n            }\n            if (usesRingModulation) {\n                effectsSource += `\n\n                let ringModMix = [];\n                let ringModMixDelta = [];\n                let ringModPhase = [];\n                let ringModPhaseDelta = [];\n                let ringModPhaseDeltaScale = [];\n                let ringModWaveformIndex = [];\n                let ringModMixFade = [];\n                let ringModMixFadeDelta = [];\n\n                let ringModPulseWidth = [];\n\n                let waveform = [];\n                let waveformLength = [];\n                let ringModOutputL = [];\n                let ringModOutputR = [];\n                let ringModMixF = [];\n                `;\n            }\n            if (usesPanning) {\n                effectsSource += `\n\n                const panningMask = synth.panningDelayBufferMask >>> 0;\n                let panningDelayLineL = [];\n                let panningDelayLineR = [];\n                let panningDelayPos = [];\n                let panningVolumeL      = [];\n                let panningVolumeR      = [];\n                let panningVolumeDeltaL = [];\n                let panningVolumeDeltaR = [];\n                let panningOffsetL      = [];\n                let panningOffsetR      = [];\n                let panningOffsetDeltaL = [];\n                let panningOffsetDeltaR = [];\n                let panningRatioL  = [];\n                let panningRatioR  = [];\n                let panningTapLA   = [];\n                let panningTapLB   = [];\n                let panningTapRA   = [];\n                let panningTapRB   = [];\n                let panningTapL    = [];\n                let panningTapR    = [];`;\n            }\n            if (usesGain) {\n                effectsSource += `\n\n                let gain = [];\n                let gainDelta = [];`;\n            }\n            if (usesGranular) {\n                effectsSource += `\n\n                let granularWet = [];\n                let granularMixDelta = [];\n                let granularDry = [];\n                let granularDelayLineL = [];\n                let granularDelayLineR = [];\n                let granularGrains = [];\n                let granularGrainCount = [];\n                let granularDelayLineLength = [];\n                let granularDelayLineMask = [];\n                let granularDelayLineIndex = [];\n                let usesRandomGrainLocation = [];\n                let computeGrains = [];\n                let granularOutputL = [];\n                let granularOutputR = [];\n                `;\n            }\n            for (let i = 0; i < instrumentState.effects.length; i++) {\n                let effectState = instrumentState.effects[i];\n                effectsSource += `\n\n                effectState = instrumentState.effects[` + i + `];\n                effectIndex = ` + i + `;\n                `;\n                if (usesGranular && effectState.type == 8) {\n                    effectsSource += `\n\n                    granularWet[effectIndex] = effectState.granularMix;\n                    granularMixDelta[effectIndex] = effectState.granularMixDelta;\n                    granularDry[effectIndex] = 1.0 - granularWet[effectIndex];\n                    granularDelayLineL[effectIndex] = effectState.granularDelayLineL;\n                    granularDelayLineR[effectIndex] = effectState.granularDelayLineR;\n                    granularGrains[effectIndex] = effectState.granularGrains;\n                    granularGrainCount[effectIndex] = effectState.granularGrainsLength;\n                    granularDelayLineLength[effectIndex] = granularDelayLineL.length;\n                    granularDelayLineMask[effectIndex] = granularDelayLineLength[effectIndex] - 1;\n                    granularDelayLineIndex[effectIndex] = effectState.granularDelayLineIndex;\n                    usesRandomGrainLocation[effectIndex] = effectState.usesRandomGrainLocation;\n                    computeGrains[effectIndex] = effectState.computeGrains;\n                    effectState.granularDelayLineDirty = true;\n                    `;\n                }\n                else if (usesDistortion && effectState.type == 3) {\n                    effectsSource += `\n\n                    distortion[effectIndex] = effectState.distortion;\n                    distortionDelta[effectIndex] = effectState.distortionDelta;\n                    distortionDrive[effectIndex] = effectState.distortionDrive;\n                    distortionDriveDelta[effectIndex] = effectState.distortionDriveDelta;\n                    distortionReverse[effectIndex] = 1.0 - distortion[effectIndex];\n\n                    distortionFractionalInputL1[effectIndex] = +effectState.distortionFractionalInputL1;\n                    distortionFractionalInputL2[effectIndex] = +effectState.distortionFractionalInputL2;\n                    distortionFractionalInputL3[effectIndex] = +effectState.distortionFractionalInputL3;\n                    distortionFractionalInputR1[effectIndex] = +effectState.distortionFractionalInputR1;\n                    distortionFractionalInputR2[effectIndex] = +effectState.distortionFractionalInputR2;\n                    distortionFractionalInputR3[effectIndex] = +effectState.distortionFractionalInputR3;\n                    distortionPrevInputL[effectIndex] = +effectState.distortionPrevInputL;\n                    distortionPrevInputR[effectIndex] = +effectState.distortionPrevInputR;\n                    distortionNextOutputL[effectIndex] = +effectState.distortionNextOutputL;\n                    distortionNextOutputR[effectIndex] = +effectState.distortionNextOutputR;`;\n                }\n                else if (usesBitcrusher && effectState.type == 4) {\n                    effectsSource += `\n\n                    bitcrusherPrevInputL[effectIndex] = +effectState.bitcrusherPrevInputL;\n                    bitcrusherPrevInputR[effectIndex] = +effectState.bitcrusherPrevInputR;\n                    bitcrusherCurrentOutputL[effectIndex] = +effectState.bitcrusherCurrentOutputL;\n                    bitcrusherCurrentOutputR[effectIndex] = +effectState.bitcrusherCurrentOutputR;\n                    bitcrusherPhase[effectIndex] = +effectState.bitcrusherPhase;\n                    bitcrusherPhaseDelta[effectIndex] = +effectState.bitcrusherPhaseDelta;\n                    bitcrusherPhaseDeltaScale[effectIndex] = +effectState.bitcrusherPhaseDeltaScale;\n                    bitcrusherScale[effectIndex] = +effectState.bitcrusherScale;\n                    bitcrusherScaleScale[effectIndex] = +effectState.bitcrusherScaleScale;\n                    bitcrusherFoldLevel[effectIndex] = +effectState.bitcrusherFoldLevel;\n                    bitcrusherFoldLevelScale[effectIndex] = +effectState.bitcrusherFoldLevelScale;`;\n                }\n                else if (usesRingModulation && effectState.type == 7) {\n                    effectsSource += `\n\n                    ringModMix[effectIndex] = +effectState.ringModMix;\n                    ringModMixDelta[effectIndex] = +effectState.ringModMixDelta;\n                    ringModPhase[effectIndex] = +effectState.ringModPhase;\n                    ringModPhaseDelta[effectIndex] = +effectState.ringModPhaseDelta;\n                    ringModPhaseDeltaScale[effectIndex] = +effectState.ringModPhaseDeltaScale;\n                    ringModWaveformIndex[effectIndex] = +effectState.ringModWaveformIndex;\n                    ringModMixFade[effectIndex] = +effectState.ringModMixFade;\n                    ringModMixFadeDelta[effectIndex] = +effectState.ringModMixFadeDelta;\n\n                    ringModPulseWidth[effectIndex] = +effectState.ringModPulseWidth;\n\n                    waveform[effectIndex] = Config.operatorWaves[ringModWaveformIndex[effectIndex]].samples;\n                    if (ringModWaveformIndex[effectIndex] == 2) {\n                        waveform[effectIndex] = Synth.getOperatorWave(ringModWaveformIndex[effectIndex], ringModPulseWidth[effectIndex]).samples;\n                    }\n                    waveformLength[effectIndex] = waveform[effectIndex].length - 1;\n                    `;\n                }\n                else if (usesEqFilter && effectState.type == 5) {\n                    effectsSource += `\n\n                    filtersL[effectIndex] = effectState.eqFiltersL;\n                    filtersR[effectIndex] = effectState.eqFiltersR;\n                    filterCount[effectIndex] = effectState.eqFilterCount|0;\n                    initialFilterInputL1[effectIndex] = +effectState.initialEqFilterInputL1;\n                    initialFilterInputR1[effectIndex] = +effectState.initialEqFilterInputR1;\n                    initialFilterInputL2[effectIndex] = +effectState.initialEqFilterInputL2;\n                    initialFilterInputR2[effectIndex] = +effectState.initialEqFilterInputR2;`;\n                    effectsSource += `\n\n                    eqFilterVolume[effectIndex] = +effectState.eqFilterVolume;\n                    eqFilterVolumeDelta[effectIndex] = +effectState.eqFilterVolumeDelta;`;\n                }\n                else if (usesPanning && effectState.type == 2) {\n                    effectsSource += `\n\n                    panningDelayLineL[effectIndex] = effectState.panningDelayLineL;\n                    panningDelayLineR[effectIndex] = effectState.panningDelayLineR;\n                    panningDelayPos[effectIndex] = effectState.panningDelayPos & panningMask;\n                    panningVolumeL[effectIndex]      = +effectState.panningVolumeL;\n                    panningVolumeR[effectIndex]      = +effectState.panningVolumeR;\n                    panningVolumeDeltaL[effectIndex] = +effectState.panningVolumeDeltaL;\n                    panningVolumeDeltaR[effectIndex] = +effectState.panningVolumeDeltaR;\n                    panningOffsetL[effectIndex]      = +effectState.panningOffsetL;\n                    panningOffsetR[effectIndex]      = +effectState.panningOffsetR;\n                    panningOffsetDeltaL[effectIndex] = 1.0 - effectState.panningOffsetDeltaL;\n                    panningOffsetDeltaR[effectIndex] = 1.0 - effectState.panningOffsetDeltaR;`;\n                }\n                else if (usesFlanger && effectState.type == 10) {\n                    effectsSource += `\n\n                    flangerDelayLineL[effectIndex] = effectState.flangerDelayLineL;\n                    flangerDelayLineR[effectIndex] = effectState.flangerDelayLineR;\n                    flangerDelayPos[effectIndex] = effectState.flangerDelayPos & flangerMask;\n\n                    flanger[effectIndex] = effectState.flanger;\n                    flangerDelta[effectIndex] = effectState.flangerDelta;\n                    flangerSpeed[effectIndex] = effectState.flangerSpeed;\n                    flangerSpeedDelta[effectIndex] = effectState.flangerSpeedDelta;\n                    flangerDepth[effectIndex] = effectState.flangerDepth;\n                    flangerDepthDelta[effectIndex] = effectState.flangerDepthDelta;\n                    flangerFeedback[effectIndex] = effectState.flangerFeedback;\n                    flangerFeedbackDelta[effectIndex] = effectState.flangerFeedbackDelta;\n\n                    flangerPhase[effectIndex] = effectState.flangerPhase % (Math.PI * 2.0);\n                    flangerRange[effectIndex] = flangerDepth[effectIndex];\n\n                    flangerTapIndexL[effectIndex] = flangerDelayPos[effectIndex] - flangerRange[effectIndex] - flangerRange[effectIndex] * Math.cos(flangerPhase[effectIndex]);\n                    flangerTapIndexR[effectIndex] = flangerDelayPos[effectIndex] - flangerRange[effectIndex] - flangerRange[effectIndex] * Math.sin(flangerPhase[effectIndex]);\n                    flangerPhase[effectIndex] += flangerSpeed[effectIndex] * Config.flangerPeriodMult * runLength;\n                    flangerTapEndL[effectIndex] = flangerDelayPos[effectIndex] - flangerRange[effectIndex] - flangerRange[effectIndex] * Math.cos(flangerPhase[effectIndex]) + runLength;\n                    flangerTapEndR[effectIndex] = flangerDelayPos[effectIndex] - flangerRange[effectIndex] - flangerRange[effectIndex] * Math.sin(flangerPhase[effectIndex]) + runLength;\n                    flangerTapDeltaL[effectIndex] = (flangerTapEndL[effectIndex] - flangerTapIndexL[effectIndex]) / runLength;\n                    flangerTapDeltaR[effectIndex] = (flangerTapEndR[effectIndex] - flangerTapIndexR[effectIndex]) / runLength;`;\n                }\n                else if (usesChorus && effectState.type == 1) {\n                    effectsSource += `\n\n                    chorusDelayLineL[effectIndex] = effectState.chorusDelayLineL;\n                    chorusDelayLineR[effectIndex] = effectState.chorusDelayLineR;\n                    effectState.chorusDelayLineDirty = true;\n                    chorusDelayPos[effectIndex] = effectState.chorusDelayPos & chorusMask;\n\n                    chorusVoiceMult[effectIndex] = +effectState.chorusVoiceMult;\n                    chorusVoiceMultDelta[effectIndex] = +effectState.chorusVoiceMultDelta;\n                    chorusCombinedMult[effectIndex] = +effectState.chorusCombinedMult;\n                    chorusCombinedMultDelta[effectIndex] = +effectState.chorusCombinedMultDelta;\n\n                    chorusPhase[effectIndex] = effectState.chorusPhase % (Math.PI * 2.0);\n                    chorusTap0Index[effectIndex] = chorusDelayPos[effectIndex] + chorusOffset0 - chorusRange * Math.sin(chorusPhase[effectIndex] + Config.chorusPhaseOffsets[0][0]);\n                    chorusTap1Index[effectIndex] = chorusDelayPos[effectIndex] + chorusOffset1 - chorusRange * Math.sin(chorusPhase[effectIndex] + Config.chorusPhaseOffsets[0][1]);\n                    chorusTap2Index[effectIndex] = chorusDelayPos[effectIndex] + chorusOffset2 - chorusRange * Math.sin(chorusPhase[effectIndex] + Config.chorusPhaseOffsets[0][2]);\n                    chorusTap3Index[effectIndex] = chorusDelayPos[effectIndex] + chorusOffset3 - chorusRange * Math.sin(chorusPhase[effectIndex] + Config.chorusPhaseOffsets[1][0]);\n                    chorusTap4Index[effectIndex] = chorusDelayPos[effectIndex] + chorusOffset4 - chorusRange * Math.sin(chorusPhase[effectIndex] + Config.chorusPhaseOffsets[1][1]);\n                    chorusTap5Index[effectIndex] = chorusDelayPos[effectIndex] + chorusOffset5 - chorusRange * Math.sin(chorusPhase[effectIndex] + Config.chorusPhaseOffsets[1][2]);\n                    chorusPhase[effectIndex] += chorusAngle * runLength;\n                    chorusTap0End[effectIndex] = chorusDelayPos[effectIndex] + chorusOffset0 - chorusRange * Math.sin(chorusPhase[effectIndex] + Config.chorusPhaseOffsets[0][0]) + runLength;\n                    chorusTap1End[effectIndex] = chorusDelayPos[effectIndex] + chorusOffset1 - chorusRange * Math.sin(chorusPhase[effectIndex] + Config.chorusPhaseOffsets[0][1]) + runLength;\n                    chorusTap2End[effectIndex] = chorusDelayPos[effectIndex] + chorusOffset2 - chorusRange * Math.sin(chorusPhase[effectIndex] + Config.chorusPhaseOffsets[0][2]) + runLength;\n                    chorusTap3End[effectIndex] = chorusDelayPos[effectIndex] + chorusOffset3 - chorusRange * Math.sin(chorusPhase[effectIndex] + Config.chorusPhaseOffsets[1][0]) + runLength;\n                    chorusTap4End[effectIndex] = chorusDelayPos[effectIndex] + chorusOffset4 - chorusRange * Math.sin(chorusPhase[effectIndex] + Config.chorusPhaseOffsets[1][1]) + runLength;\n                    chorusTap5End[effectIndex] = chorusDelayPos[effectIndex] + chorusOffset5 - chorusRange * Math.sin(chorusPhase[effectIndex] + Config.chorusPhaseOffsets[1][2]) + runLength;\n                    chorusTap0Delta[effectIndex] = (chorusTap0End[effectIndex] - chorusTap0Index[effectIndex]) / runLength;\n                    chorusTap1Delta[effectIndex] = (chorusTap1End[effectIndex] - chorusTap1Index[effectIndex]) / runLength;\n                    chorusTap2Delta[effectIndex] = (chorusTap2End[effectIndex] - chorusTap2Index[effectIndex]) / runLength;\n                    chorusTap3Delta[effectIndex] = (chorusTap3End[effectIndex] - chorusTap3Index[effectIndex]) / runLength;\n                    chorusTap4Delta[effectIndex] = (chorusTap4End[effectIndex] - chorusTap4Index[effectIndex]) / runLength;\n                    chorusTap5Delta[effectIndex] = (chorusTap5End[effectIndex] - chorusTap5Index[effectIndex]) / runLength;`;\n                }\n                else if (usesEcho && effectState.type == 6) {\n                    effectsSource += `\n                    echoMult[effectIndex] = +effectState.echoMult;\n                    echoMultDelta[effectIndex] = +effectState.echoMultDelta;\n\n                    echoDelayLineL[effectIndex] = effectState.echoDelayLineL;\n                    echoDelayLineR[effectIndex] = effectState.echoDelayLineR;\n                    echoMask[effectIndex] = (echoDelayLineL[effectIndex].length - 1) >>> 0;\n                    effectState.echoDelayLineDirty = true;\n\n                    echoDelayPosL[effectIndex] = effectState.echoDelayPosL & echoMask[effectIndex];\n                    echoDelayPosR[effectIndex] = effectState.echoDelayPosR & echoMask[effectIndex];\n                    echoDelayOffsetStart[effectIndex] = (echoDelayLineL[effectIndex].length - effectState.echoDelayOffsetStart) & echoMask[effectIndex];\n                    echoDelayOffsetEnd[effectIndex]   = (echoDelayLineL[effectIndex].length - effectState.echoDelayOffsetEnd) & echoMask[effectIndex];\n                    echoDelayOffsetRatio[effectIndex] = +effectState.echoDelayOffsetRatio;\n                    echoDelayOffsetRatioDelta[effectIndex] = +effectState.echoDelayOffsetRatioDelta;\n                    echoPingPong[effectIndex] = effectState.echoPingPong;\n\n                    echoShelfA1[effectIndex] = +effectState.echoShelfA1;\n                    echoShelfB0[effectIndex] = +effectState.echoShelfB0;\n                    echoShelfB1[effectIndex] = +effectState.echoShelfB1;\n                    echoShelfSampleL[effectIndex] = +effectState.echoShelfSampleL;\n                    echoShelfSampleR[effectIndex] = +effectState.echoShelfSampleR;\n                    echoShelfPrevInputL[effectIndex] = +effectState.echoShelfPrevInputL;\n                    echoShelfPrevInputR[effectIndex] = +effectState.echoShelfPrevInputR;`;\n                }\n                else if (usesReverb && effectState.type == 0) {\n                    effectsSource += `\n\n                    reverbDelayLine[effectIndex] = effectState.reverbDelayLine;\n                    effectState.reverbDelayLineDirty = true;\n                    reverbDelayPos[effectIndex] = effectState.reverbDelayPos & reverbMask;\n\n                    reverb[effectIndex] = +effectState.reverbMult;\n                    reverbDelta[effectIndex] = +effectState.reverbMultDelta;\n\n                    reverbShelfA1[effectIndex] = +effectState.reverbShelfA1;\n                    reverbShelfB0[effectIndex] = +effectState.reverbShelfB0;\n                    reverbShelfB1[effectIndex] = +effectState.reverbShelfB1;\n                    reverbShelfSample0[effectIndex] = +effectState.reverbShelfSample0;\n                    reverbShelfSample1[effectIndex] = +effectState.reverbShelfSample1;\n                    reverbShelfSample2[effectIndex] = +effectState.reverbShelfSample2;\n                    reverbShelfSample3[effectIndex] = +effectState.reverbShelfSample3;\n                    reverbShelfPrevInput0[effectIndex] = +effectState.reverbShelfPrevInput0;\n                    reverbShelfPrevInput1[effectIndex] = +effectState.reverbShelfPrevInput1;\n                    reverbShelfPrevInput2[effectIndex] = +effectState.reverbShelfPrevInput2;\n                    reverbShelfPrevInput3[effectIndex] = +effectState.reverbShelfPrevInput3;`;\n                }\n                else if (usesGain && effectState.type == 9) {\n                    effectsSource += `\n\n                    gain[effectIndex] = +effectState.gain;\n                    gainDelta[effectIndex] = +effectState.gainDelta;`;\n                }\n            }\n            if (isStereo) {\n                effectsSource += `\n\n                const stopIndex = bufferIndex + runLength;\n                for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n                    let sample = 0.0;\n                    let sampleL = tempInstrumentSampleBufferL[sampleIndex];\n                    let sampleR = tempInstrumentSampleBufferR[sampleIndex];\n                    tempInstrumentSampleBufferL[sampleIndex] = 0.0;\n                    tempInstrumentSampleBufferR[sampleIndex] = 0.0;`;\n            }\n            else {\n                effectsSource += `\n\n                const stopIndex = bufferIndex + runLength;\n                for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n                    let sampleL = tempInstrumentSampleBufferL[sampleIndex];\n                    let sampleR = tempInstrumentSampleBufferL[sampleIndex];\n                    tempInstrumentSampleBufferL[sampleIndex] = 0.0;\n                    tempInstrumentSampleBufferR[sampleIndex] = 0.0;`;\n            }\n            for (let i = 0; i < instrumentState.effects.length; i++) {\n                let effectState = instrumentState.effects[i];\n                effectsSource += `\n\n                effectIndex = ` + i + `;\n                `;\n                if (usesBitcrusher && effectState.type == 4) {\n                    effectsSource += `\n\n                    bitcrusherPhase[effectIndex] += bitcrusherPhaseDelta[effectIndex];\n                    if (bitcrusherPhase[effectIndex] < 1.0) {\n                        bitcrusherPrevInputL[effectIndex] = sampleL;\n                        bitcrusherPrevInputR[effectIndex] = sampleR;\n                        sampleL = bitcrusherCurrentOutputL[effectIndex];\n                        sampleR = bitcrusherCurrentOutputR[effectIndex];\n                    } else {\n                        bitcrusherPhase[effectIndex] = bitcrusherPhase[effectIndex] % 1.0;\n\n                        lerpedInputL[effectIndex] = sampleL + (bitcrusherPrevInputL[effectIndex] - sampleL) * (bitcrusherPhase[effectIndex] / bitcrusherPhaseDelta[effectIndex]);\n                        lerpedInputR[effectIndex] = sampleR + (bitcrusherPrevInputR[effectIndex] - sampleR) * (bitcrusherPhase[effectIndex] / bitcrusherPhaseDelta[effectIndex]);\n                        bitcrusherPrevInputL[effectIndex] = sampleL;\n                        bitcrusherPrevInputR[effectIndex] = sampleR;\n\n                        bitcrusherWrapLevel[effectIndex] = bitcrusherFoldLevel[effectIndex] * 4.0;\n                        wrappedSampleL[effectIndex] = (((lerpedInputL[effectIndex] + bitcrusherFoldLevel[effectIndex]) % bitcrusherWrapLevel[effectIndex]) + bitcrusherWrapLevel[effectIndex]) % bitcrusherWrapLevel[effectIndex];\n                        wrappedSampleR[effectIndex] = (((lerpedInputR[effectIndex] + bitcrusherFoldLevel[effectIndex]) % bitcrusherWrapLevel[effectIndex]) + bitcrusherWrapLevel[effectIndex]) % bitcrusherWrapLevel[effectIndex];\n                        foldedSampleL[effectIndex] = bitcrusherFoldLevel[effectIndex] - Math.abs(bitcrusherFoldLevel[effectIndex] * 2.0 - wrappedSampleL[effectIndex]);\n                        foldedSampleR[effectIndex] = bitcrusherFoldLevel[effectIndex] - Math.abs(bitcrusherFoldLevel[effectIndex] * 2.0 - wrappedSampleR[effectIndex]);\n                        scaledSampleL[effectIndex] = foldedSampleL[effectIndex] / bitcrusherScale[effectIndex];\n                        scaledSampleR[effectIndex] = foldedSampleR[effectIndex] / bitcrusherScale[effectIndex];\n                        oldValueL[effectIndex] = bitcrusherCurrentOutputL[effectIndex];\n                        oldValueR[effectIndex] = bitcrusherCurrentOutputR[effectIndex];\n                        newValueL[effectIndex] = (((scaledSampleL[effectIndex] > 0 ? scaledSampleL[effectIndex] + 1 : scaledSampleL[effectIndex])|0)-.5) * bitcrusherScale[effectIndex];\n                        newValueR[effectIndex] = (((scaledSampleR[effectIndex] > 0 ? scaledSampleR[effectIndex] + 1 : scaledSampleR[effectIndex])|0)-.5) * bitcrusherScale[effectIndex];\n\n                        sampleL = oldValueL[effectIndex] + (newValueL[effectIndex] - oldValueL[effectIndex]) * (bitcrusherPhase[effectIndex] / bitcrusherPhaseDelta[effectIndex]);\n                        sampleR = oldValueR[effectIndex] + (newValueR[effectIndex] - oldValueR[effectIndex]) * (bitcrusherPhase[effectIndex] / bitcrusherPhaseDelta[effectIndex]);\n                        bitcrusherCurrentOutputL[effectIndex] = newValueL[effectIndex];\n                        bitcrusherCurrentOutputR[effectIndex] = newValueR[effectIndex];\n                    }\n                    bitcrusherPhaseDelta[effectIndex] *= bitcrusherPhaseDeltaScale[effectIndex];\n                    bitcrusherScale[effectIndex] *= bitcrusherScaleScale[effectIndex];\n                    bitcrusherFoldLevel[effectIndex] *= bitcrusherFoldLevelScale[effectIndex];`;\n                }\n                else if (usesDistortion && effectState.type == 3) {\n                    effectsSource += `\n\n                    distortionNextInputL[effectIndex] = sampleL * distortionDrive[effectIndex];\n                    distortionNextInputR[effectIndex] = sampleR * distortionDrive[effectIndex];\n                    sampleL = distortionNextOutputL[effectIndex];\n                    sampleR = distortionNextOutputR[effectIndex];\n                    distortionNextOutputL[effectIndex] = distortionNextInputL[effectIndex] / (distortionReverse[effectIndex] * Math.abs(distortionNextInputL[effectIndex]) + distortion[effectIndex]);\n                    distortionNextOutputR[effectIndex] = distortionNextInputR[effectIndex] / (distortionReverse[effectIndex] * Math.abs(distortionNextInputR[effectIndex]) + distortion[effectIndex]);\n                    distortionFractionalInputL1[effectIndex] = distortionFractionalDelayG1 * distortionNextInputL[effectIndex] + distortionPrevInputL[effectIndex] - distortionFractionalDelayG1 * distortionFractionalInputL1[effectIndex];\n                    distortionFractionalInputL2[effectIndex] = distortionFractionalDelayG2 * distortionNextInputL[effectIndex] + distortionPrevInputL[effectIndex] - distortionFractionalDelayG2 * distortionFractionalInputL2[effectIndex];\n                    distortionFractionalInputL3[effectIndex] = distortionFractionalDelayG3 * distortionNextInputL[effectIndex] + distortionPrevInputL[effectIndex] - distortionFractionalDelayG3 * distortionFractionalInputL3[effectIndex];\n                    distortionFractionalInputR1[effectIndex] = distortionFractionalDelayG1 * distortionNextInputR[effectIndex] + distortionPrevInputR[effectIndex] - distortionFractionalDelayG1 * distortionFractionalInputR1[effectIndex];\n                    distortionFractionalInputR2[effectIndex] = distortionFractionalDelayG2 * distortionNextInputR[effectIndex] + distortionPrevInputR[effectIndex] - distortionFractionalDelayG2 * distortionFractionalInputR2[effectIndex];\n                    distortionFractionalInputR3[effectIndex] = distortionFractionalDelayG3 * distortionNextInputR[effectIndex] + distortionPrevInputR[effectIndex] - distortionFractionalDelayG3 * distortionFractionalInputR3[effectIndex];\n                    distortionOutputL1[effectIndex] = distortionFractionalInputL1[effectIndex] / (distortionReverse[effectIndex] * Math.abs(distortionFractionalInputL1[effectIndex]) + distortion[effectIndex]);\n                    distortionOutputL2[effectIndex] = distortionFractionalInputL2[effectIndex] / (distortionReverse[effectIndex] * Math.abs(distortionFractionalInputL2[effectIndex]) + distortion[effectIndex]);\n                    distortionOutputL3[effectIndex] = distortionFractionalInputL3[effectIndex] / (distortionReverse[effectIndex] * Math.abs(distortionFractionalInputL3[effectIndex]) + distortion[effectIndex]);\n                    distortionOutputR1[effectIndex] = distortionFractionalInputR1[effectIndex] / (distortionReverse[effectIndex] * Math.abs(distortionFractionalInputR1[effectIndex]) + distortion[effectIndex]);\n                    distortionOutputR2[effectIndex] = distortionFractionalInputR2[effectIndex] / (distortionReverse[effectIndex] * Math.abs(distortionFractionalInputR2[effectIndex]) + distortion[effectIndex]);\n                    distortionOutputR3[effectIndex] = distortionFractionalInputR3[effectIndex] / (distortionReverse[effectIndex] * Math.abs(distortionFractionalInputR3[effectIndex]) + distortion[effectIndex]);\n                    distortionNextOutputL[effectIndex] += distortionOutputL1[effectIndex] * distortionNextOutputWeight1 + distortionOutputL2[effectIndex] * distortionNextOutputWeight2 + distortionOutputL3[effectIndex] * distortionNextOutputWeight3;\n                    distortionNextOutputR[effectIndex] += distortionOutputR1[effectIndex] * distortionNextOutputWeight1 + distortionOutputR2[effectIndex] * distortionNextOutputWeight2 + distortionOutputR3[effectIndex] * distortionNextOutputWeight3;\n                    sampleL += distortionOutputL1[effectIndex] * distortionPrevOutputWeight1 + distortionOutputL2[effectIndex] * distortionPrevOutputWeight2 + distortionOutputL3[effectIndex] * distortionPrevOutputWeight3;\n                    sampleR += distortionOutputR1[effectIndex] * distortionPrevOutputWeight1 + distortionOutputR2[effectIndex] * distortionPrevOutputWeight2 + distortionOutputR3[effectIndex] * distortionPrevOutputWeight3;\n                    sampleL *= distortionOversampleCompensation;\n                    sampleR *= distortionOversampleCompensation;\n                    distortionPrevInputL[effectIndex] = distortionNextInputL[effectIndex];\n                    distortionPrevInputR[effectIndex] = distortionNextInputR[effectIndex];\n                    distortion[effectIndex] += distortionDelta[effectIndex];\n                    distortionDrive[effectIndex] += distortionDriveDelta[effectIndex];`;\n                }\n                else if (usesGain && effectState.type == 9) {\n                    effectsSource += `\n\n                    sampleL *= gain[effectIndex];\n                    sampleR *= gain[effectIndex];\n                    `;\n                }\n                else if (usesPanning && effectState.type == 2) {\n                    effectsSource += `\n\n                    panningDelayLineL[effectIndex][panningDelayPos[effectIndex]] = sampleL;\n                    panningDelayLineR[effectIndex][panningDelayPos[effectIndex]] = sampleR;\n                    panningRatioL[effectIndex]  = panningOffsetL[effectIndex] % 1;\n                    panningRatioR[effectIndex]  = panningOffsetR[effectIndex] % 1;\n                    panningTapLA[effectIndex]   = panningDelayLineL[effectIndex][(panningOffsetL[effectIndex]) & panningMask];\n                    panningTapLB[effectIndex]   = panningDelayLineL[effectIndex][(panningOffsetL[effectIndex] + 1) & panningMask];\n                    panningTapRA[effectIndex]   = panningDelayLineR[effectIndex][(panningOffsetR[effectIndex]) & panningMask];\n                    panningTapRB[effectIndex]   = panningDelayLineR[effectIndex][(panningOffsetR[effectIndex] + 1) & panningMask];\n                    panningTapL[effectIndex]    = panningTapLA[effectIndex] + (panningTapLB[effectIndex] - panningTapLA[effectIndex]) * panningRatioL[effectIndex];\n                    panningTapR[effectIndex]    = panningTapRA[effectIndex] + (panningTapRB[effectIndex] - panningTapRA[effectIndex]) * panningRatioR[effectIndex];\n                    `;\n                    if (effectState.panningMode == 0) {\n                        effectsSource += `\n\n                    sampleL = panningTapL[effectIndex] * panningVolumeL[effectIndex];\n                    sampleR = panningTapR[effectIndex] * panningVolumeR[effectIndex];\n                    panningDelayPos[effectIndex] = (panningDelayPos[effectIndex] + 1) & panningMask;\n                    panningVolumeL[effectIndex] += panningVolumeDeltaL[effectIndex];\n                    panningVolumeR[effectIndex] += panningVolumeDeltaR[effectIndex];\n                    panningOffsetL[effectIndex] += panningOffsetDeltaL[effectIndex];\n                    panningOffsetR[effectIndex] += panningOffsetDeltaR[effectIndex];`;\n                    }\n                    else if (effectState.panningMode == 1) {\n                        effectsSource += `\n\n                    sampleL = panningTapL[effectIndex] * panningVolumeL[effectIndex] + Math.max(0, panningVolumeL[effectIndex] - panningVolumeR[effectIndex]) * panningTapR[effectIndex];\n                    sampleR = panningTapR[effectIndex] * panningVolumeR[effectIndex] + Math.max(0, panningVolumeR[effectIndex] - panningVolumeL[effectIndex]) * panningTapL[effectIndex];\n                    panningDelayPos[effectIndex] = (panningDelayPos[effectIndex] + 1) & panningMask;\n                    panningVolumeL[effectIndex] += panningVolumeDeltaL[effectIndex];\n                    panningVolumeR[effectIndex] += panningVolumeDeltaR[effectIndex];\n                    panningOffsetL[effectIndex] += panningOffsetDeltaL[effectIndex];\n                    panningOffsetR[effectIndex] += panningOffsetDeltaR[effectIndex];`;\n                    }\n                    else if (effectState.panningMode == 2) {\n                        effectsSource += `\n\n                    sampleL = (panningTapL[effectIndex] + panningTapR[effectIndex]) / 2.0\n                    sampleR = sampleL\n                    sampleL *= panningVolumeL[effectIndex];\n                    sampleR *= panningVolumeR[effectIndex];\n                    panningDelayPos[effectIndex] = (panningDelayPos[effectIndex] + 1) & panningMask;\n                    panningVolumeL[effectIndex] += panningVolumeDeltaL[effectIndex];\n                    panningVolumeR[effectIndex] += panningVolumeDeltaR[effectIndex];\n                    panningOffsetL[effectIndex] += panningOffsetDeltaL[effectIndex];\n                    panningOffsetR[effectIndex] += panningOffsetDeltaR[effectIndex];`;\n                    }\n                }\n                else if (usesFlanger && effectState.type == 10) {\n                    effectsSource += `\n\n                    flangerTapRatioL[effectIndex] = flangerTapIndexL[effectIndex] % 1;\n                    flangerTapRatioR[effectIndex] = flangerTapIndexR[effectIndex] % 1;\n                    flangerTapLA[effectIndex] = flangerDelayLineL[effectIndex][(flangerTapIndexL[effectIndex]) & flangerMask];\n                    flangerTapLB[effectIndex] = flangerDelayLineL[effectIndex][(flangerTapIndexL[effectIndex] + 1) & flangerMask];\n                    flangerTapRA[effectIndex] = flangerDelayLineR[effectIndex][(flangerTapIndexR[effectIndex]) & flangerMask];\n                    flangerTapRB[effectIndex] = flangerDelayLineR[effectIndex][(flangerTapIndexR[effectIndex] + 1) & flangerMask];\n                    flangerTapL[effectIndex] = flangerTapLA[effectIndex] + (flangerTapLB[effectIndex] - flangerTapLA[effectIndex]) * flangerTapRatioL[effectIndex];\n                    flangerTapR[effectIndex] = flangerTapRA[effectIndex] + (flangerTapRB[effectIndex] - flangerTapRA[effectIndex]) * flangerTapRatioR[effectIndex];\n\n                    flangerDelayLineL[effectIndex][flangerDelayPos[effectIndex]] = sampleL * delayInputMult;\n                    flangerDelayLineR[effectIndex][flangerDelayPos[effectIndex]] = sampleR * delayInputMult;\n                    sampleL = (sampleL + flanger[effectIndex] * flangerTapL[effectIndex]) * (1 - flanger[effectIndex] * Config.flangerVolumeMult);\n                    sampleR = (sampleR + flanger[effectIndex] * flangerTapR[effectIndex]) * (1 - flanger[effectIndex] * Config.flangerVolumeMult);\n                    flangerDelayLineL[effectIndex][flangerDelayPos[effectIndex]] = flangerDelayLineL[effectIndex][flangerDelayPos[effectIndex]] * (1 - flangerFeedback[effectIndex]) - sampleL * flangerFeedback[effectIndex];\n                    flangerDelayLineR[effectIndex][flangerDelayPos[effectIndex]] = flangerDelayLineR[effectIndex][flangerDelayPos[effectIndex]] * (1 - flangerFeedback[effectIndex]) - sampleR * flangerFeedback[effectIndex];\n                    flangerDelayPos[effectIndex] = (flangerDelayPos[effectIndex] + 1) & flangerMask;\n                    flangerTapIndexL[effectIndex] += flangerTapDeltaL[effectIndex];\n                    flangerTapIndexR[effectIndex] += flangerTapDeltaR[effectIndex];\n\n                    flanger[effectIndex] += flangerDelta[effectIndex];\n                    flangerSpeed[effectIndex] += flangerSpeedDelta[effectIndex];\n                    flangerDepth[effectIndex] += flangerDepthDelta[effectIndex];\n                    flangerFeedback[effectIndex] += flangerFeedbackDelta[effectIndex];`;\n                }\n                else if (usesChorus && effectState.type == 1) {\n                    effectsSource += `\n\n                    chorusTap0Ratio[effectIndex] = chorusTap0Index[effectIndex] % 1;\n                    chorusTap1Ratio[effectIndex] = chorusTap1Index[effectIndex] % 1;\n                    chorusTap2Ratio[effectIndex] = chorusTap2Index[effectIndex] % 1;\n                    chorusTap3Ratio[effectIndex] = chorusTap3Index[effectIndex] % 1;\n                    chorusTap4Ratio[effectIndex] = chorusTap4Index[effectIndex] % 1;\n                    chorusTap5Ratio[effectIndex] = chorusTap5Index[effectIndex] % 1;\n                    chorusTap0A[effectIndex] = chorusDelayLineL[effectIndex][(chorusTap0Index[effectIndex]) & chorusMask];\n                    chorusTap0B[effectIndex] = chorusDelayLineL[effectIndex][(chorusTap0Index[effectIndex] + 1) & chorusMask];\n                    chorusTap1A[effectIndex] = chorusDelayLineL[effectIndex][(chorusTap1Index[effectIndex]) & chorusMask];\n                    chorusTap1B[effectIndex] = chorusDelayLineL[effectIndex][(chorusTap1Index[effectIndex] + 1) & chorusMask];\n                    chorusTap2A[effectIndex] = chorusDelayLineL[effectIndex][(chorusTap2Index[effectIndex]) & chorusMask];\n                    chorusTap2B[effectIndex] = chorusDelayLineL[effectIndex][(chorusTap2Index[effectIndex] + 1) & chorusMask];\n                    chorusTap3A[effectIndex] = chorusDelayLineR[effectIndex][(chorusTap3Index[effectIndex]) & chorusMask];\n                    chorusTap3B[effectIndex] = chorusDelayLineR[effectIndex][(chorusTap3Index[effectIndex] + 1) & chorusMask];\n                    chorusTap4A[effectIndex] = chorusDelayLineR[effectIndex][(chorusTap4Index[effectIndex]) & chorusMask];\n                    chorusTap4B[effectIndex] = chorusDelayLineR[effectIndex][(chorusTap4Index[effectIndex] + 1) & chorusMask];\n                    chorusTap5A[effectIndex] = chorusDelayLineR[effectIndex][(chorusTap5Index[effectIndex]) & chorusMask];\n                    chorusTap5B[effectIndex] = chorusDelayLineR[effectIndex][(chorusTap5Index[effectIndex] + 1) & chorusMask];\n                    chorusTap0[effectIndex] = chorusTap0A[effectIndex] + (chorusTap0B[effectIndex] - chorusTap0A[effectIndex]) * chorusTap0Ratio[effectIndex];\n                    chorusTap1[effectIndex] = chorusTap1A[effectIndex] + (chorusTap1B[effectIndex] - chorusTap1A[effectIndex]) * chorusTap1Ratio[effectIndex];\n                    chorusTap2[effectIndex] = chorusTap2A[effectIndex] + (chorusTap2B[effectIndex] - chorusTap2A[effectIndex]) * chorusTap2Ratio[effectIndex];\n                    chorusTap3[effectIndex] = chorusTap3A[effectIndex] + (chorusTap3B[effectIndex] - chorusTap3A[effectIndex]) * chorusTap3Ratio[effectIndex];\n                    chorusTap4[effectIndex] = chorusTap4A[effectIndex] + (chorusTap4B[effectIndex] - chorusTap4A[effectIndex]) * chorusTap4Ratio[effectIndex];\n                    chorusTap5[effectIndex] = chorusTap5A[effectIndex] + (chorusTap5B[effectIndex] - chorusTap5A[effectIndex]) * chorusTap5Ratio[effectIndex];\n                    chorusDelayLineL[effectIndex][chorusDelayPos[effectIndex]] = sampleL * delayInputMult;\n                    chorusDelayLineR[effectIndex][chorusDelayPos[effectIndex]] = sampleR * delayInputMult;\n                    sampleL = chorusCombinedMult[effectIndex] * (sampleL + chorusVoiceMult[effectIndex] * (chorusTap1[effectIndex] - chorusTap0[effectIndex] - chorusTap2[effectIndex]));\n                    sampleR = chorusCombinedMult[effectIndex] * (sampleR + chorusVoiceMult[effectIndex] * (chorusTap4[effectIndex] - chorusTap3[effectIndex] - chorusTap5[effectIndex]));\n                    chorusDelayPos[effectIndex] = (chorusDelayPos[effectIndex] + 1) & chorusMask;\n                    chorusTap0Index[effectIndex] += chorusTap0Delta[effectIndex];\n                    chorusTap1Index[effectIndex] += chorusTap1Delta[effectIndex];\n                    chorusTap2Index[effectIndex] += chorusTap2Delta[effectIndex];\n                    chorusTap3Index[effectIndex] += chorusTap3Delta[effectIndex];\n                    chorusTap4Index[effectIndex] += chorusTap4Delta[effectIndex];\n                    chorusTap5Index[effectIndex] += chorusTap5Delta[effectIndex];\n                    chorusVoiceMult[effectIndex] += chorusVoiceMultDelta[effectIndex];\n                    chorusCombinedMult[effectIndex] += chorusCombinedMultDelta[effectIndex];`;\n                }\n                else if (usesEcho && effectState.type == 6) {\n                    effectsSource += `\n\n                    echoNextInputL[effectIndex] = (sampleL + sampleR) / 2;\n                    echoNextInputR[effectIndex] = (sampleL + sampleR) / 2;\n                    echoTapStartIndexL[effectIndex] = (echoDelayPosL[effectIndex] + echoDelayOffsetStart[effectIndex]) & echoMask[effectIndex];\n                    echoTapStartIndexR[effectIndex] = (echoDelayPosR[effectIndex] + echoDelayOffsetStart[effectIndex]) & echoMask[effectIndex];\n                    echoTapEndIndexL[effectIndex]   = (echoDelayPosL[effectIndex] + echoDelayOffsetEnd[effectIndex]) & echoMask[effectIndex];\n                    echoTapEndIndexR[effectIndex]   = (echoDelayPosR[effectIndex] + echoDelayOffsetEnd[effectIndex]) & echoMask[effectIndex];\n                    echoTapStartL[effectIndex] = echoDelayLineL[effectIndex][echoTapStartIndexL[effectIndex]];\n                    echoTapEndL[effectIndex]   = echoDelayLineL[effectIndex][echoTapEndIndexL[effectIndex]];\n                    echoTapStartR[effectIndex] = echoDelayLineR[effectIndex][echoTapStartIndexR[effectIndex]];\n                    echoTapEndR[effectIndex]   = echoDelayLineR[effectIndex][echoTapEndIndexR[effectIndex]];\n                    echoTapL[effectIndex] = (echoTapStartL[effectIndex] + (echoTapEndL[effectIndex] - echoTapStartL[effectIndex]) * echoDelayOffsetRatio[effectIndex]) * echoMult[effectIndex];\n                    echoTapR[effectIndex] = (echoTapStartR[effectIndex] + (echoTapEndR[effectIndex] - echoTapStartR[effectIndex]) * echoDelayOffsetRatio[effectIndex]) * echoMult[effectIndex];\n\n                    echoShelfSampleL[effectIndex] = echoShelfB0[effectIndex] * echoTapL[effectIndex] + echoShelfB1[effectIndex] * echoShelfPrevInputL[effectIndex] - echoShelfA1[effectIndex] * echoShelfSampleL[effectIndex];\n                    echoShelfSampleR[effectIndex] = echoShelfB0[effectIndex] * echoTapR[effectIndex] + echoShelfB1[effectIndex] * echoShelfPrevInputR[effectIndex] - echoShelfA1[effectIndex] * echoShelfSampleR[effectIndex];\n                    echoShelfPrevInputL[effectIndex] = echoTapL[effectIndex];\n                    echoShelfPrevInputR[effectIndex] = echoTapR[effectIndex];\n                    sampleL += echoShelfSampleL[effectIndex];\n                    sampleR += echoShelfSampleR[effectIndex];\n\n                    echoDelayLineL[effectIndex][echoDelayPosL[effectIndex]] = (sampleL * (1 - Math.abs(echoPingPong[effectIndex])) + (echoNextInputL[effectIndex] * Math.max(0, echoPingPong[effectIndex]) + echoShelfSampleR[effectIndex]) * Math.abs(echoPingPong[effectIndex])) * delayInputMult;\n                    echoDelayLineR[effectIndex][echoDelayPosR[effectIndex]] = (sampleR * (1 - Math.abs(echoPingPong[effectIndex])) + (echoNextInputR[effectIndex] * Math.max(0, -echoPingPong[effectIndex]) + echoShelfSampleL[effectIndex]) * Math.abs(echoPingPong[effectIndex])) * delayInputMult;\n                    echoDelayPosL[effectIndex] = (echoDelayPosL[effectIndex] + 1) & echoMask[effectIndex];\n                    echoDelayPosR[effectIndex] = (echoDelayPosR[effectIndex] + 1) & echoMask[effectIndex];\n                    echoDelayOffsetRatio[effectIndex] += echoDelayOffsetRatioDelta[effectIndex];\n                    echoMult[effectIndex] += echoMultDelta[effectIndex];\n                    `;\n                }\n                else if (usesReverb && effectState.type == 0) {\n                    effectsSource += `\n\n                    // Reverb, implemented using a feedback delay network with a Hadamard matrix and lowpass filters.\n                    // good ratios:    0.555235 + 0.618033 + 0.818 +   1.0 = 2.991268\n                    // Delay lengths:  3041     + 3385     + 4481  +  5477 = 16384 = 2^14\n                    // Buffer offsets: 3041    -> 6426   -> 10907 -> 16384\n                    reverbDelayPos1[effectIndex] = (reverbDelayPos[effectIndex] +  3041) & reverbMask;\n                    reverbDelayPos2[effectIndex] = (reverbDelayPos[effectIndex] +  6426) & reverbMask;\n                    reverbDelayPos3[effectIndex] = (reverbDelayPos[effectIndex] + 10907) & reverbMask;\n                    reverbSample0[effectIndex] = (reverbDelayLine[effectIndex][reverbDelayPos[effectIndex]]);\n                    reverbSample1[effectIndex] = reverbDelayLine[effectIndex][reverbDelayPos1[effectIndex]];\n                    reverbSample2[effectIndex] = reverbDelayLine[effectIndex][reverbDelayPos2[effectIndex]];\n                    reverbSample3[effectIndex] = reverbDelayLine[effectIndex][reverbDelayPos3[effectIndex]];\n                    reverbTemp0[effectIndex] = -(reverbSample0[effectIndex] + sampleL) + reverbSample1[effectIndex];\n                    reverbTemp1[effectIndex] = -(reverbSample0[effectIndex] + sampleR) - reverbSample1[effectIndex];\n                    reverbTemp2[effectIndex] = -reverbSample2[effectIndex] + reverbSample3[effectIndex];\n                    reverbTemp3[effectIndex] = -reverbSample2[effectIndex] - reverbSample3[effectIndex];\n                    reverbShelfInput0[effectIndex] = (reverbTemp0[effectIndex] + reverbTemp2[effectIndex]) * reverb[effectIndex];\n                    reverbShelfInput1[effectIndex] = (reverbTemp1[effectIndex] + reverbTemp3[effectIndex]) * reverb[effectIndex];\n                    reverbShelfInput2[effectIndex] = (reverbTemp0[effectIndex] - reverbTemp2[effectIndex]) * reverb[effectIndex];\n                    reverbShelfInput3[effectIndex] = (reverbTemp1[effectIndex] - reverbTemp3[effectIndex]) * reverb[effectIndex];\n                    reverbShelfSample0[effectIndex] = reverbShelfB0[effectIndex] * reverbShelfInput0[effectIndex] + reverbShelfB1[effectIndex] * reverbShelfPrevInput0[effectIndex] - reverbShelfA1[effectIndex] * reverbShelfSample0[effectIndex];\n                    reverbShelfSample1[effectIndex] = reverbShelfB0[effectIndex] * reverbShelfInput1[effectIndex] + reverbShelfB1[effectIndex] * reverbShelfPrevInput1[effectIndex] - reverbShelfA1[effectIndex] * reverbShelfSample1[effectIndex];\n                    reverbShelfSample2[effectIndex] = reverbShelfB0[effectIndex] * reverbShelfInput2[effectIndex] + reverbShelfB1[effectIndex] * reverbShelfPrevInput2[effectIndex] - reverbShelfA1[effectIndex] * reverbShelfSample2[effectIndex];\n                    reverbShelfSample3[effectIndex] = reverbShelfB0[effectIndex] * reverbShelfInput3[effectIndex] + reverbShelfB1[effectIndex] * reverbShelfPrevInput3[effectIndex] - reverbShelfA1[effectIndex] * reverbShelfSample3[effectIndex];\n                    reverbShelfPrevInput0[effectIndex] = reverbShelfInput0[effectIndex];\n                    reverbShelfPrevInput1[effectIndex] = reverbShelfInput1[effectIndex];\n                    reverbShelfPrevInput2[effectIndex] = reverbShelfInput2[effectIndex];\n                    reverbShelfPrevInput3[effectIndex] = reverbShelfInput3[effectIndex];\n                    reverbDelayLine[effectIndex][reverbDelayPos1[effectIndex]] = reverbShelfSample0[effectIndex] * delayInputMult;\n                    reverbDelayLine[effectIndex][reverbDelayPos2[effectIndex]] = reverbShelfSample1[effectIndex] * delayInputMult;\n                    reverbDelayLine[effectIndex][reverbDelayPos3[effectIndex]] = reverbShelfSample2[effectIndex] * delayInputMult;\n                    reverbDelayLine[effectIndex][reverbDelayPos[effectIndex] ] = reverbShelfSample3[effectIndex] * delayInputMult;\n                    reverbDelayPos[effectIndex] = (reverbDelayPos[effectIndex] + 1) & reverbMask;\n                    sampleL += reverbSample1[effectIndex] + reverbSample2[effectIndex] + reverbSample3[effectIndex];\n                    sampleR += reverbSample0[effectIndex] + reverbSample2[effectIndex] - reverbSample3[effectIndex];\n                    reverb[effectIndex] += reverbDelta[effectIndex];`;\n                }\n                else if (usesEqFilter && effectState.type == 5) {\n                    effectsSource += `\n\n                    inputSampleL[effectIndex] = sampleL;\n                    inputSampleR[effectIndex] = sampleR;\n                    sampleL = applyFilters(inputSampleL[effectIndex], initialFilterInputL1[effectIndex], initialFilterInputL2[effectIndex], filterCount[effectIndex], filtersL[effectIndex]);\n                    sampleR = applyFilters(inputSampleR[effectIndex], initialFilterInputR1[effectIndex], initialFilterInputR2[effectIndex], filterCount[effectIndex], filtersR[effectIndex]);\n                    initialFilterInputL2[effectIndex] = initialFilterInputL1[effectIndex];\n                    initialFilterInputR2[effectIndex] = initialFilterInputR1[effectIndex];\n                    initialFilterInputL1[effectIndex] = inputSampleL[effectIndex];\n                    initialFilterInputR1[effectIndex] = inputSampleR[effectIndex];`;\n                    effectsSource += `\n\n                    sampleL *= eqFilterVolume[effectIndex];\n                    sampleR *= eqFilterVolume[effectIndex];\n                    eqFilterVolume[effectIndex] += eqFilterVolumeDelta[effectIndex];`;\n                }\n                else if (usesRingModulation && effectState.type == 7) {\n                    effectsSource += `\n\n\t\t\t\t\tringModOutputL[effectIndex] = sampleL * waveform[effectIndex][(ringModPhase[effectIndex]*waveformLength[effectIndex])|0];\n\t\t\t\t\tringModOutputR[effectIndex] = sampleR * waveform[effectIndex][(ringModPhase[effectIndex]*waveformLength[effectIndex])|0];\n\t\t\t\t\tringModMixF[effectIndex] = Math.max(0, ringModMix[effectIndex] * ringModMixFade[effectIndex]);\n\t\t\t\t\tsampleL = sampleL * (1 - ringModMixF[effectIndex]) + ringModOutputL[effectIndex] * ringModMixF[effectIndex];\n\t\t\t\t\tsampleR = sampleR * (1 - ringModMixF[effectIndex]) + ringModOutputR[effectIndex] * ringModMixF[effectIndex];\n\n\t\t\t\t\tringModMix[effectIndex] += ringModMixDelta[effectIndex];\n\t\t\t\t\tringModPhase[effectIndex] += ringModPhaseDelta[effectIndex];\n\t\t\t\t\tringModPhase[effectIndex] = ringModPhase[effectIndex] % 1.0;\n\t\t\t\t\tringModPhaseDelta[effectIndex] *= ringModPhaseDeltaScale[effectIndex];\n\t\t\t\t\tringModMixFade[effectIndex] += ringModMixFadeDelta[effectIndex];\n\t\t\t\t\t`;\n                }\n                else if (usesGranular && effectState.type == 8) {\n                    effectsSource += `\n                    granularOutputL[effectIndex] = 0;\n                    granularOutputR[effectIndex] = 0;\n                    for (let grainIndex = 0; grainIndex < granularGrainCount[effectIndex]; grainIndex++) {\n                        const grain = granularGrains[effectIndex][grainIndex];\n                        if(computeGrains[effectIndex]) {\n                            if(grain.delay > 0) {\n                                grain.delay--;\n                            } else {\n                                const grainDelayLinePosition = grain.delayLinePosition;\n                                const grainDelayLinePositionInt = grainDelayLinePosition | 0;\n                                let grainAgeInSamples = grain.ageInSamples;\n                                const grainMaxAgeInSamples = grain.maxAgeInSamples;\n                                let grainSampleL = granularDelayLineL[effectIndex][((granularDelayLineIndex[effectIndex] + (granularDelayLineLength[effectIndex] - grainDelayLinePositionInt))    ) & granularDelayLineMask];\n                                let grainSampleR = granularDelayLineR[effectIndex][((granularDelayLineIndex[effectIndex] + (granularDelayLineLength[effectIndex] - grainDelayLinePositionInt))    ) & granularDelayLineMask];\n                                `;\n                    if (Config.granularEnvelopeType == 0) {\n                        effectsSource += `\n                                    const grainEnvelope = grain.parabolicEnvelopeAmplitude;\n                                    `;\n                    }\n                    else if (Config.granularEnvelopeType == 1) {\n                        effectsSource += `\n                                    const grainEnvelope = grain.rcbEnvelopeAmplitude;\n                                    `;\n                    }\n                    effectsSource += `\n                                grainSampleL *= grainEnvelope;\n                                grainSampleR *= grainEnvelope;\n                                granularOutputL[effectIndex] += grainSampleL;\n                                granularOutputR[effectIndex] += grainSampleR;\n                                if (grainAgeInSamples > grainMaxAgeInSamples) {\n                                    if (granularGrainCount[effectIndex] > 0) {\n                                        // Faster equivalent of .pop, ignoring the order in the array.\n                                        const lastGrainIndex = granularGrainCount[effectIndex] - 1;\n                                        const lastGrain = granularGrains[effectIndex][lastGrainIndex];\n                                        granularGrains[effectIndex][grainIndex] = lastGrain;\n                                        granularGrains[effectIndex][lastGrainIndex] = grain;\n                                        granularGrainCount[effectIndex]--;\n                                        grainIndex--;\n                                        // ^ Dangerous, since this could end up causing an infinite loop,\n                                        // but should be okay in this case.\n                                    }\n                                } else {\n                                    grainAgeInSamples++;\n                                    `;\n                    if (Config.granularEnvelopeType == 0) {\n                        effectsSource += `\n                                        grain.parabolicEnvelopeAmplitude += grain.parabolicEnvelopeSlope;\n                                        grain.parabolicEnvelopeSlope += grain.parabolicEnvelopeCurve;\n                                        `;\n                    }\n                    else if (Config.granularEnvelopeType == 1) {\n                        effectsSource += `\n                                        grain.updateRCBEnvelope();\n                                        `;\n                    }\n                    effectsSource += `\n                                    grain.ageInSamples = grainAgeInSamples;\n                                }\n                            }\n                        }\n                    }\n                    granularWet[effectIndex] += granularMixDelta[effectIndex];\n                    granularDry[effectIndex] -= granularMixDelta[effectIndex];\n                    granularOutputL[effectIndex] *= Config.granularOutputLoudnessCompensation;\n                    granularOutputR[effectIndex] *= Config.granularOutputLoudnessCompensation;\n                    granularDelayLineL[effectIndex][granularDelayLineIndex[effectIndex]] = sampleL;\n                    granularDelayLineR[effectIndex][granularDelayLineIndex[effectIndex]] = sampleR;\n                    granularDelayLineIndex[effectIndex] = (granularDelayLineIndex[effectIndex] + 1) & granularDelayLineMask[effectIndex];\n                    sampleL = sampleL * granularDry[effectIndex] + granularOutputL[effectIndex] * granularWet[effectIndex];\n                    sampleR = sampleR * granularDry[effectIndex] + granularOutputR[effectIndex] * granularWet[effectIndex];\n                    `;\n                }\n            }\n            effectsSource += `\n\n                    outputDataL[sampleIndex] += sampleL * mixVolume;\n                    outputDataR[sampleIndex] += sampleR * mixVolume;\n                    mixVolume += mixVolumeDelta;`;\n            if (usesDelays) {\n                effectsSource += `\n\n                    delayInputMult += delayInputMultDelta;`;\n            }\n            effectsSource += `\n                }\n\n                instrumentState.mixVolume = mixVolume;\n\n                // Avoid persistent denormal or NaN values in the delay buffers and filter history.\n                const epsilon = (1.0e-24);`;\n            if (usesDelays) {\n                effectsSource += `\n\n                instrumentState.delayInputMult = delayInputMult;`;\n            }\n            for (let i = 0; i < instrumentState.effects.length; i++) {\n                let effectState = instrumentState.effects[i];\n                effectsSource += `\n\n                effectState = instrumentState.effects[` + i + `];\n                effectIndex = ` + i + `;\n                `;\n                if (usesGranular && effectState.type == 8) {\n                    effectsSource += `\n                        effectState.granularMix = granularWet[effectIndex];\n                        effectState.granularGrainsLength = granularGrainCount[effectIndex];\n                        effectState.granularDelayLineIndex = granularDelayLineIndex[effectIndex];\n                    `;\n                }\n                else if (usesDistortion && effectState.type == 3) {\n                    effectsSource += `\n\n                    effectState.distortion = distortion[effectIndex];\n                    effectState.distortionDrive = distortionDrive[effectIndex];\n\n                    if (!Number.isFinite(distortionFractionalInputL1[effectIndex]) || Math.abs(distortionFractionalInputL1[effectIndex]) < epsilon) distortionFractionalInputL1[effectIndex] = 0.0;\n                    if (!Number.isFinite(distortionFractionalInputL2[effectIndex]) || Math.abs(distortionFractionalInputL2[effectIndex]) < epsilon) distortionFractionalInputL2[effectIndex] = 0.0;\n                    if (!Number.isFinite(distortionFractionalInputL3[effectIndex]) || Math.abs(distortionFractionalInputL3[effectIndex]) < epsilon) distortionFractionalInputL3[effectIndex] = 0.0;\n                    if (!Number.isFinite(distortionFractionalInputR1[effectIndex]) || Math.abs(distortionFractionalInputR1[effectIndex]) < epsilon) distortionFractionalInputR1[effectIndex] = 0.0;\n                    if (!Number.isFinite(distortionFractionalInputR2[effectIndex]) || Math.abs(distortionFractionalInputR2[effectIndex]) < epsilon) distortionFractionalInputR2[effectIndex] = 0.0;\n                    if (!Number.isFinite(distortionFractionalInputR3[effectIndex]) || Math.abs(distortionFractionalInputR3[effectIndex]) < epsilon) distortionFractionalInputR3[effectIndex] = 0.0;\n                    if (!Number.isFinite(distortionPrevInputL[effectIndex]) || Math.abs(distortionPrevInputL[effectIndex]) < epsilon) distortionPrevInputL[effectIndex] = 0.0;\n                    if (!Number.isFinite(distortionPrevInputR[effectIndex]) || Math.abs(distortionPrevInputR[effectIndex]) < epsilon) distortionPrevInputR[effectIndex] = 0.0;\n                    if (!Number.isFinite(distortionNextOutputL[effectIndex]) || Math.abs(distortionNextOutputL[effectIndex]) < epsilon) distortionNextOutputL[effectIndex] = 0.0;\n                    if (!Number.isFinite(distortionNextOutputR[effectIndex]) || Math.abs(distortionNextOutputR[effectIndex]) < epsilon) distortionNextOutputR[effectIndex] = 0.0;\n\n                    effectState.distortionFractionalInputL1 = distortionFractionalInputL1[effectIndex];\n                    effectState.distortionFractionalInputL2 = distortionFractionalInputL2[effectIndex];\n                    effectState.distortionFractionalInputL3 = distortionFractionalInputL3[effectIndex];\n                    effectState.distortionFractionalInputR1 = distortionFractionalInputR1[effectIndex];\n                    effectState.distortionFractionalInputR2 = distortionFractionalInputR2[effectIndex];\n                    effectState.distortionFractionalInputR3 = distortionFractionalInputR3[effectIndex];\n                    effectState.distortionPrevInputL = distortionPrevInputL[effectIndex];\n                    effectState.distortionPrevInputR = distortionPrevInputR[effectIndex];\n                    effectState.distortionNextOutputL = distortionNextOutputL[effectIndex];\n                    effectState.distortionNextOutputR = distortionNextOutputR[effectIndex];`;\n                }\n                else if (usesBitcrusher && effectState.type == 4) {\n                    effectsSource += `\n\n                    if (Math.abs(bitcrusherPrevInputL[effectIndex]) < epsilon) bitcrusherPrevInputL[effectIndex] = 0.0;\n                    if (Math.abs(bitcrusherPrevInputR[effectIndex]) < epsilon) bitcrusherPrevInputR[effectIndex] = 0.0;\n                    if (Math.abs(bitcrusherCurrentOutputL[effectIndex]) < epsilon) bitcrusherCurrentOutputL[effectIndex] = 0.0;\n                    if (Math.abs(bitcrusherCurrentOutputR[effectIndex]) < epsilon) bitcrusherCurrentOutputR[effectIndex] = 0.0;\n                    effectState.bitcrusherPrevInputL = bitcrusherPrevInputL[effectIndex];\n                    effectState.bitcrusherPrevInputR = bitcrusherPrevInputR[effectIndex];\n                    effectState.bitcrusherCurrentOutputL = bitcrusherCurrentOutputL[effectIndex];\n                    effectState.bitcrusherCurrentOutputR = bitcrusherCurrentOutputR[effectIndex];\n                    effectState.bitcrusherPhase = bitcrusherPhase[effectIndex];\n                    effectState.bitcrusherPhaseDelta = bitcrusherPhaseDelta[effectIndex];\n                    effectState.bitcrusherScale = bitcrusherScale[effectIndex];\n                    effectState.bitcrusherFoldLevel = bitcrusherFoldLevel[effectIndex];`;\n                }\n                else if (usesRingModulation && effectState.type == 7) {\n                    effectsSource += `\n                    effectState.ringModMix = ringModMix[effectIndex];\n                    effectState.ringModMixDelta = ringModMixDelta[effectIndex];\n                    effectState.ringModPhase = ringModPhase[effectIndex];\n                    effectState.ringModPhaseDelta = ringModPhaseDelta[effectIndex];\n                    effectState.ringModPhaseDeltaScale = ringModPhaseDeltaScale[effectIndex];\n                    effectState.ringModWaveformIndex = ringModWaveformIndex[effectIndex];\n                    effectState.ringModPulseWidth = ringModPulseWidth[effectIndex];\n                    effectState.ringModMixFade = ringModMixFade[effectIndex];\n                    `;\n                }\n                else if (usesEqFilter && effectState.type == 5) {\n                    effectsSource += `\n\n                        synth.sanitizeFilters(filtersL[effectIndex]);\n                        synth.sanitizeFilters(filtersR[effectIndex]);\n                    // The filter input here is downstream from another filter so we\n                    // better make sure it's safe too.\n                    if (!(initialFilterInputL1[effectIndex] < 100) || !(initialFilterInputL2[effectIndex] < 100) || !(initialFilterInputR1[effectIndex] < 100) || !(initialFilterInputR2[effectIndex] < 100)) {\n                        initialFilterInputL1[effectIndex] = 0.0;\n                        initialFilterInputR2[effectIndex] = 0.0;\n                        initialFilterInputL1[effectIndex] = 0.0;\n                        initialFilterInputR2[effectIndex] = 0.0;\n                    }\n                    if (Math.abs(initialFilterInputL1[effectIndex]) < epsilon) initialFilterInputL1[effectIndex] = 0.0;\n                    if (Math.abs(initialFilterInputL2[effectIndex]) < epsilon) initialFilterInputL2[effectIndex] = 0.0;\n                    if (Math.abs(initialFilterInputR1[effectIndex]) < epsilon) initialFilterInputR1[effectIndex] = 0.0;\n                    if (Math.abs(initialFilterInputR2[effectIndex]) < epsilon) initialFilterInputR2[effectIndex] = 0.0;\n                    effectState.initialEqFilterInputL1 = initialFilterInputL1[effectIndex];\n                    effectState.initialEqFilterInputL2 = initialFilterInputL2[effectIndex];\n                    effectState.initialEqFilterInputR1 = initialFilterInputR1[effectIndex];\n                    effectState.initialEqFilterInputR2 = initialFilterInputR2[effectIndex];\n\n                    instrumentState.eqFilterVolume = eqFilterVolume[effectIndex];`;\n                }\n                else if (usesGain && effectState.type == 9) {\n                    effectsSource += `\n                    effectState.gain = gain[effectIndex];\n                    `;\n                }\n                else if (usesPanning && effectState.type == 2) {\n                    effectsSource += `\n\n                    Synth.sanitizeDelayLine(panningDelayLineL[effectIndex], panningDelayPos[effectIndex], panningMask);\n                    Synth.sanitizeDelayLine(panningDelayLineR[effectIndex], panningDelayPos[effectIndex], panningMask);\n                    effectState.panningDelayPos = panningDelayPos[effectIndex];\n                    effectState.panningVolumeL = panningVolumeL[effectIndex];\n                    effectState.panningVolumeR = panningVolumeR[effectIndex];\n                    effectState.panningOffsetL = panningOffsetL[effectIndex];\n                    effectState.panningOffsetR = panningOffsetR[effectIndex];`;\n                }\n                else if (usesFlanger && effectState.type == 10) {\n                    effectsSource += `\n\n                    Synth.sanitizeDelayLine(flangerDelayLineL[effectIndex], flangerDelayPos[effectIndex], flangerMask);\n                    Synth.sanitizeDelayLine(flangerDelayLineR[effectIndex], flangerDelayPos[effectIndex], flangerMask);\n                    effectState.flangerPhase = flangerPhase[effectIndex];\n                    effectState.flangerDelayPos = flangerDelayPos[effectIndex];\n                    effectState.flanger = flanger[effectIndex];\n                    effectState.flangerSpeed = flangerSpeed[effectIndex];\n                    effectState.flangerDepth = flangerDepth[effectIndex];\n                    effectState.flangerFeedback = flangerFeedback[effectIndex];`;\n                }\n                else if (usesChorus && effectState.type == 1) {\n                    effectsSource += `\n\n                    Synth.sanitizeDelayLine(chorusDelayLineL[effectIndex], chorusDelayPos[effectIndex], chorusMask);\n                    Synth.sanitizeDelayLine(chorusDelayLineR[effectIndex], chorusDelayPos[effectIndex], chorusMask);\n                    effectState.chorusPhase = chorusPhase[effectIndex];\n                    effectState.chorusDelayPos = chorusDelayPos[effectIndex];\n                    effectState.chorusVoiceMult = chorusVoiceMult[effectIndex];\n                    effectState.chorusCombinedMult = chorusCombinedMult[effectIndex];`;\n                }\n                else if (usesEcho && effectState.type == 6) {\n                    effectsSource += `\n\n                    Synth.sanitizeDelayLine(echoDelayLineL[effectIndex], echoDelayPosL[effectIndex], echoMask[effectIndex]);\n                    Synth.sanitizeDelayLine(echoDelayLineR[effectIndex], echoDelayPosR[effectIndex], echoMask[effectIndex]);\n                    effectState.echoDelayPosL = echoDelayPosL[effectIndex];\n                    effectState.echoDelayPosR = echoDelayPosR[effectIndex];\n                    effectState.echoMult = echoMult[effectIndex];\n                    effectState.echoDelayOffsetRatio = echoDelayOffsetRatio[effectIndex];\n\n                    if (!Number.isFinite(echoShelfSampleL[effectIndex]) || Math.abs(echoShelfSampleL[effectIndex]) < epsilon) echoShelfSampleL[effectIndex] = 0.0;\n                    if (!Number.isFinite(echoShelfSampleR[effectIndex]) || Math.abs(echoShelfSampleR[effectIndex]) < epsilon) echoShelfSampleR[effectIndex] = 0.0;\n                    if (!Number.isFinite(echoShelfPrevInputL[effectIndex]) || Math.abs(echoShelfPrevInputL[effectIndex]) < epsilon) echoShelfPrevInputL[effectIndex] = 0.0;\n                    if (!Number.isFinite(echoShelfPrevInputR[effectIndex]) || Math.abs(echoShelfPrevInputR[effectIndex]) < epsilon) echoShelfPrevInputR[effectIndex] = 0.0;\n                    effectState.echoShelfSampleL = echoShelfSampleL[effectIndex];\n                    effectState.echoShelfSampleR = echoShelfSampleR[effectIndex];\n                    effectState.echoShelfPrevInputL = echoShelfPrevInputL[effectIndex];\n                    effectState.echoShelfPrevInputR = echoShelfPrevInputR[effectIndex];`;\n                }\n                else if (usesReverb && effectState.type == 0) {\n                    effectsSource += `\n\n                    Synth.sanitizeDelayLine(reverbDelayLine[effectIndex], reverbDelayPos[effectIndex]        , reverbMask);\n                    Synth.sanitizeDelayLine(reverbDelayLine[effectIndex], reverbDelayPos[effectIndex] +  3041, reverbMask);\n                    Synth.sanitizeDelayLine(reverbDelayLine[effectIndex], reverbDelayPos[effectIndex] +  6426, reverbMask);\n                    Synth.sanitizeDelayLine(reverbDelayLine[effectIndex], reverbDelayPos[effectIndex] + 10907, reverbMask);\n                    effectState.reverbDelayPos = reverbDelayPos[effectIndex];\n                    effectState.reverbMult = reverb[effectIndex];\n\n                    if (!Number.isFinite(reverbShelfSample0[effectIndex]) || Math.abs(reverbShelfSample0[effectIndex]) < epsilon) reverbShelfSample0[effectIndex] = 0.0;\n                    if (!Number.isFinite(reverbShelfSample1[effectIndex]) || Math.abs(reverbShelfSample1[effectIndex]) < epsilon) reverbShelfSample1[effectIndex] = 0.0;\n                    if (!Number.isFinite(reverbShelfSample2[effectIndex]) || Math.abs(reverbShelfSample2[effectIndex]) < epsilon) reverbShelfSample2[effectIndex] = 0.0;\n                    if (!Number.isFinite(reverbShelfSample3[effectIndex]) || Math.abs(reverbShelfSample3[effectIndex]) < epsilon) reverbShelfSample3[effectIndex] = 0.0;\n                    if (!Number.isFinite(reverbShelfPrevInput0[effectIndex]) || Math.abs(reverbShelfPrevInput0[effectIndex]) < epsilon) reverbShelfPrevInput0[effectIndex] = 0.0;\n                    if (!Number.isFinite(reverbShelfPrevInput1[effectIndex]) || Math.abs(reverbShelfPrevInput1[effectIndex]) < epsilon) reverbShelfPrevInput1[effectIndex] = 0.0;\n                    if (!Number.isFinite(reverbShelfPrevInput2[effectIndex]) || Math.abs(reverbShelfPrevInput2[effectIndex]) < epsilon) reverbShelfPrevInput2[effectIndex] = 0.0;\n                    if (!Number.isFinite(reverbShelfPrevInput3[effectIndex]) || Math.abs(reverbShelfPrevInput3[effectIndex]) < epsilon) reverbShelfPrevInput3[effectIndex] = 0.0;\n                    effectState.reverbShelfSample0 = reverbShelfSample0[effectIndex];\n                    effectState.reverbShelfSample1 = reverbShelfSample1[effectIndex];\n                    effectState.reverbShelfSample2 = reverbShelfSample2[effectIndex];\n                    effectState.reverbShelfSample3 = reverbShelfSample3[effectIndex];\n                    effectState.reverbShelfPrevInput0 = reverbShelfPrevInput0[effectIndex];\n                    effectState.reverbShelfPrevInput1 = reverbShelfPrevInput1[effectIndex];\n                    effectState.reverbShelfPrevInput2 = reverbShelfPrevInput2[effectIndex];\n                    effectState.reverbShelfPrevInput3 = reverbShelfPrevInput3[effectIndex];`;\n                }\n            }\n            effectsSource += \"}\";\n            console.log(effectsSource);\n            effectsFunction = new Function(\"Config\", \"Synth\", effectsSource)(Config, Synth);\n            Synth.effectsFunctionCache[signature] = effectsFunction;\n        }\n        effectsFunction(synth, outputDataL, outputDataR, bufferIndex, runLength, instrumentState);\n    }\n    static pulseWidthSynth(synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState) {\n        const data = synth.tempInstrumentSampleBufferL;\n        const unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\n        if (instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval)\n            tone.phases[1] = tone.phases[0];\n        let phaseDeltaA = tone.phaseDeltas[0];\n        let phaseDeltaB = tone.phaseDeltas[1];\n        const phaseDeltaScaleA = +tone.phaseDeltaScales[0];\n        const phaseDeltaScaleB = +tone.phaseDeltaScales[1];\n        let expression = +tone.expression;\n        const expressionDelta = +tone.expressionDelta;\n        let phaseA = (tone.phases[0] % 1);\n        let phaseB = (tone.phases[1] % 1);\n        let pulseWidth = tone.pulseWidth;\n        const pulseWidthDelta = tone.pulseWidthDelta;\n        const filters = tone.noteFiltersL;\n        const filterCount = tone.noteFilterCount | 0;\n        let initialFilterInput1 = +tone.initialNoteFilterInputL1;\n        let initialFilterInput2 = +tone.initialNoteFilterInputL2;\n        const applyFilters = Synth.applyFilters;\n        const stopIndex = bufferIndex + roundedSamplesPerTick;\n        for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n            const sawPhaseA = phaseA % 1;\n            const sawPhaseB = (phaseA + pulseWidth) % 1;\n            const sawPhaseC = phaseB % 1;\n            const sawPhaseD = (phaseB + pulseWidth) % 1;\n            let pulseWaveA = sawPhaseB - sawPhaseA;\n            let pulseWaveB = sawPhaseD - sawPhaseC;\n            if (!instrumentState.aliases) {\n                if (sawPhaseA < phaseDeltaA) {\n                    var t = sawPhaseA / phaseDeltaA;\n                    pulseWaveA += (t + t - t * t - 1) * 0.5;\n                }\n                else if (sawPhaseA > 1.0 - phaseDeltaA) {\n                    var t = (sawPhaseA - 1.0) / phaseDeltaA;\n                    pulseWaveA += (t + t + t * t + 1) * 0.5;\n                }\n                if (sawPhaseB < phaseDeltaA) {\n                    var t = sawPhaseB / phaseDeltaA;\n                    pulseWaveA -= (t + t - t * t - 1) * 0.5;\n                }\n                else if (sawPhaseB > 1.0 - phaseDeltaA) {\n                    var t = (sawPhaseB - 1.0) / phaseDeltaA;\n                    pulseWaveA -= (t + t + t * t + 1) * 0.5;\n                }\n                if (sawPhaseC < phaseDeltaB) {\n                    var t = sawPhaseC / phaseDeltaB;\n                    pulseWaveB += (t + t - t * t - 1) * 0.5;\n                }\n                else if (sawPhaseC > 1.0 - phaseDeltaB) {\n                    var t = (sawPhaseC - 1.0) / phaseDeltaB;\n                    pulseWaveB += (t + t + t * t + 1) * 0.5;\n                }\n                if (sawPhaseD < phaseDeltaB) {\n                    var t = sawPhaseD / phaseDeltaB;\n                    pulseWaveB -= (t + t - t * t - 1) * 0.5;\n                }\n                else if (sawPhaseD > 1.0 - phaseDeltaB) {\n                    var t = (sawPhaseD - 1.0) / phaseDeltaB;\n                    pulseWaveB -= (t + t + t * t + 1) * 0.5;\n                }\n            }\n            const inputSample = pulseWaveA + pulseWaveB * unisonSign;\n            const sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n            initialFilterInput2 = initialFilterInput1;\n            initialFilterInput1 = inputSample;\n            phaseA += phaseDeltaA;\n            phaseB += phaseDeltaB;\n            phaseDeltaA *= phaseDeltaScaleA;\n            phaseDeltaB *= phaseDeltaScaleB;\n            pulseWidth += pulseWidthDelta;\n            const output = sample * expression;\n            expression += expressionDelta;\n            data[sampleIndex] += output;\n        }\n        tone.phases[0] = phaseA;\n        tone.phases[1] = phaseB;\n        tone.phaseDeltas[0] = phaseDeltaA;\n        tone.phaseDeltas[1] = phaseDeltaB;\n        tone.expression = expression;\n        tone.pulseWidth = pulseWidth;\n        synth.sanitizeFilters(filters);\n        tone.initialNoteFilterInputL1 = initialFilterInput1;\n        tone.initialNoteFilterInputL2 = initialFilterInput2;\n    }\n    static supersawSynth(synth, bufferIndex, runLength, tone, instrumentState) {\n        const data = synth.tempInstrumentSampleBufferL;\n        const voiceCount = Config.supersawVoiceCount | 0;\n        let phaseDelta = tone.phaseDeltas[0];\n        const phaseDeltaScale = +tone.phaseDeltaScales[0];\n        let expression = +tone.expression;\n        const expressionDelta = +tone.expressionDelta;\n        let phases = tone.phases;\n        let dynamism = +tone.supersawDynamism;\n        const dynamismDelta = +tone.supersawDynamismDelta;\n        const unisonDetunes = tone.supersawUnisonDetunes;\n        let shape = +tone.supersawShape;\n        const shapeDelta = +tone.supersawShapeDelta;\n        let delayLength = +tone.supersawDelayLength;\n        const delayLengthDelta = +tone.supersawDelayLengthDelta;\n        const delayLine = tone.supersawDelayLine;\n        const delayBufferMask = (delayLine.length - 1) >> 0;\n        let delayIndex = tone.supersawDelayIndex | 0;\n        delayIndex = (delayIndex & delayBufferMask) + delayLine.length;\n        const filters = tone.noteFiltersL;\n        const filterCount = tone.noteFilterCount | 0;\n        let initialFilterInput1 = +tone.initialNoteFilterInputL1;\n        let initialFilterInput2 = +tone.initialNoteFilterInputL2;\n        const applyFilters = Synth.applyFilters;\n        const stopIndex = bufferIndex + runLength;\n        for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n            let phase = (phases[0] + phaseDelta) % 1.0;\n            let supersawSample = phase - 0.5 * (1.0 + (voiceCount - 1.0) * dynamism);\n            if (!instrumentState.aliases) {\n                if (phase < phaseDelta) {\n                    var t = phase / phaseDelta;\n                    supersawSample -= (t + t - t * t - 1) * 0.5;\n                }\n                else if (phase > 1.0 - phaseDelta) {\n                    var t = (phase - 1.0) / phaseDelta;\n                    supersawSample -= (t + t + t * t + 1) * 0.5;\n                }\n            }\n            phases[0] = phase;\n            for (let i = 1; i < voiceCount; i++) {\n                const detunedPhaseDelta = phaseDelta * unisonDetunes[i];\n                let phase = (phases[i] + detunedPhaseDelta) % 1.0;\n                supersawSample += phase * dynamism;\n                if (!instrumentState.aliases) {\n                    if (phase < detunedPhaseDelta) {\n                        const t = phase / detunedPhaseDelta;\n                        supersawSample -= (t + t - t * t - 1) * 0.5 * dynamism;\n                    }\n                    else if (phase > 1.0 - detunedPhaseDelta) {\n                        const t = (phase - 1.0) / detunedPhaseDelta;\n                        supersawSample -= (t + t + t * t + 1) * 0.5 * dynamism;\n                    }\n                }\n                phases[i] = phase;\n            }\n            delayLine[delayIndex & delayBufferMask] = supersawSample;\n            const delaySampleTime = delayIndex - delayLength;\n            const lowerIndex = delaySampleTime | 0;\n            const upperIndex = lowerIndex + 1;\n            const delayRatio = delaySampleTime - lowerIndex;\n            const prevDelaySample = delayLine[lowerIndex & delayBufferMask];\n            const nextDelaySample = delayLine[upperIndex & delayBufferMask];\n            const delaySample = prevDelaySample + (nextDelaySample - prevDelaySample) * delayRatio;\n            delayIndex++;\n            const inputSample = supersawSample - delaySample * shape;\n            const sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n            initialFilterInput2 = initialFilterInput1;\n            initialFilterInput1 = inputSample;\n            phaseDelta *= phaseDeltaScale;\n            dynamism += dynamismDelta;\n            shape += shapeDelta;\n            delayLength += delayLengthDelta;\n            const output = sample * expression;\n            expression += expressionDelta;\n            data[sampleIndex] += output;\n        }\n        tone.phaseDeltas[0] = phaseDelta;\n        tone.expression = expression;\n        tone.supersawDynamism = dynamism;\n        tone.supersawShape = shape;\n        tone.supersawDelayLength = delayLength;\n        tone.supersawDelayIndex = delayIndex;\n        synth.sanitizeFilters(filters);\n        tone.initialNoteFilterInputL1 = initialFilterInput1;\n        tone.initialNoteFilterInputL2 = initialFilterInput2;\n    }\n    static noiseSynth(synth, bufferIndex, runLength, tone, instrumentState) {\n        const data = synth.tempInstrumentSampleBufferL;\n        const wave = instrumentState.waveL;\n        const unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\n        if (instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval)\n            tone.phases[1] = tone.phases[0];\n        let phaseDeltaA = tone.phaseDeltas[0];\n        let phaseDeltaB = tone.phaseDeltas[1];\n        const phaseDeltaScaleA = +tone.phaseDeltaScales[0];\n        const phaseDeltaScaleB = +tone.phaseDeltaScales[1];\n        let expression = +tone.expression;\n        const expressionDelta = +tone.expressionDelta;\n        let phaseA = (tone.phases[0] % 1) * Config.chipNoiseLength;\n        let phaseB = (tone.phases[1] % 1) * Config.chipNoiseLength;\n        if (tone.phases[0] == 0.0) {\n            phaseA = Math.random() * Config.chipNoiseLength;\n            if (instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval)\n                phaseB = phaseA;\n        }\n        if (tone.phases[1] == 0.0 && !(instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval)) {\n            phaseB = Math.random() * Config.chipNoiseLength;\n        }\n        const phaseMask = Config.chipNoiseLength - 1;\n        let noiseSampleA = +tone.noiseSampleA;\n        let noiseSampleB = +tone.noiseSampleB;\n        const filters = tone.noteFiltersL;\n        const filterCount = tone.noteFilterCount | 0;\n        let initialFilterInput1 = +tone.initialNoteFilterInputL1;\n        let initialFilterInput2 = +tone.initialNoteFilterInputL2;\n        const applyFilters = Synth.applyFilters;\n        const pitchRelativefilterA = Math.min(1.0, phaseDeltaA * instrumentState.noisePitchFilterMult);\n        const pitchRelativefilterB = Math.min(1.0, phaseDeltaB * instrumentState.noisePitchFilterMult);\n        const stopIndex = bufferIndex + runLength;\n        for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n            const waveSampleA = wave[phaseA & phaseMask];\n            const waveSampleB = wave[phaseB & phaseMask];\n            noiseSampleA += (waveSampleA - noiseSampleA) * pitchRelativefilterA;\n            noiseSampleB += (waveSampleB - noiseSampleB) * pitchRelativefilterB;\n            const inputSample = noiseSampleA + noiseSampleB * unisonSign;\n            const sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n            initialFilterInput2 = initialFilterInput1;\n            initialFilterInput1 = inputSample;\n            phaseA += phaseDeltaA;\n            phaseB += phaseDeltaB;\n            phaseDeltaA *= phaseDeltaScaleA;\n            phaseDeltaB *= phaseDeltaScaleB;\n            const output = sample * expression;\n            expression += expressionDelta;\n            data[sampleIndex] += output;\n        }\n        tone.phases[0] = phaseA / Config.chipNoiseLength;\n        tone.phases[1] = phaseB / Config.chipNoiseLength;\n        tone.phaseDeltas[0] = phaseDeltaA;\n        tone.phaseDeltas[1] = phaseDeltaB;\n        tone.expression = expression;\n        tone.noiseSampleA = noiseSampleA;\n        tone.noiseSampleB = noiseSampleB;\n        synth.sanitizeFilters(filters);\n        tone.initialNoteFilterInputL1 = initialFilterInput1;\n        tone.initialNoteFilterInputL2 = initialFilterInput2;\n    }\n    static spectrumSynth(synth, bufferIndex, runLength, tone, instrumentState) {\n        const data = synth.tempInstrumentSampleBufferL;\n        const wave = instrumentState.waveL;\n        const samplesInPeriod = (1 << 7);\n        const unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\n        if (instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval)\n            tone.phases[1] = tone.phases[0];\n        let phaseDeltaA = tone.phaseDeltas[0] * samplesInPeriod;\n        let phaseDeltaB = tone.phaseDeltas[1] * samplesInPeriod;\n        const phaseDeltaScaleA = +tone.phaseDeltaScales[0];\n        const phaseDeltaScaleB = +tone.phaseDeltaScales[1];\n        let expression = +tone.expression;\n        const expressionDelta = +tone.expressionDelta;\n        let noiseSampleA = +tone.noiseSampleA;\n        let noiseSampleB = +tone.noiseSampleB;\n        const filters = tone.noteFiltersL;\n        const filterCount = tone.noteFilterCount | 0;\n        let initialFilterInput1 = +tone.initialNoteFilterInputL1;\n        let initialFilterInput2 = +tone.initialNoteFilterInputL2;\n        const applyFilters = Synth.applyFilters;\n        let phaseA = (tone.phases[0] % 1) * Config.spectrumNoiseLength;\n        let phaseB = (tone.phases[1] % 1) * Config.spectrumNoiseLength;\n        if (tone.phases[0] == 0.0) {\n            phaseA = Synth.findRandomZeroCrossing(wave, Config.spectrumNoiseLength) + phaseDeltaA;\n            if (instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval)\n                phaseB = phaseA;\n        }\n        if (tone.phases[1] == 0.0 && !(instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord.customInterval)) {\n            phaseB = Synth.findRandomZeroCrossing(wave, Config.spectrumNoiseLength) + phaseDeltaB;\n        }\n        const phaseMask = Config.spectrumNoiseLength - 1;\n        const pitchRelativefilterA = Math.min(1.0, phaseDeltaA);\n        const pitchRelativefilterB = Math.min(1.0, phaseDeltaB);\n        const stopIndex = bufferIndex + runLength;\n        for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n            const phaseAInt = phaseA | 0;\n            const phaseBInt = phaseB | 0;\n            const indexA = phaseAInt & phaseMask;\n            const indexB = phaseBInt & phaseMask;\n            let waveSampleA = wave[indexA];\n            let waveSampleB = wave[indexB];\n            const phaseRatioA = phaseA - phaseAInt;\n            const phaseRatioB = phaseB - phaseBInt;\n            waveSampleA += (wave[indexA + 1] - waveSampleA) * phaseRatioA;\n            waveSampleB += (wave[indexB + 1] - waveSampleB) * phaseRatioB;\n            noiseSampleA += (waveSampleA - noiseSampleA) * pitchRelativefilterA;\n            noiseSampleB += (waveSampleB - noiseSampleB) * pitchRelativefilterB;\n            const inputSample = noiseSampleA + noiseSampleB * unisonSign;\n            const sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n            initialFilterInput2 = initialFilterInput1;\n            initialFilterInput1 = inputSample;\n            phaseA += phaseDeltaA;\n            phaseB += phaseDeltaB;\n            phaseDeltaA *= phaseDeltaScaleA;\n            phaseDeltaB *= phaseDeltaScaleB;\n            const output = sample * expression;\n            expression += expressionDelta;\n            data[sampleIndex] += output;\n        }\n        tone.phases[0] = phaseA / Config.spectrumNoiseLength;\n        tone.phases[1] = phaseB / Config.spectrumNoiseLength;\n        tone.phaseDeltas[0] = phaseDeltaA / samplesInPeriod;\n        tone.phaseDeltas[1] = phaseDeltaB / samplesInPeriod;\n        tone.expression = expression;\n        tone.noiseSampleA = noiseSampleA;\n        tone.noiseSampleB = noiseSampleB;\n        synth.sanitizeFilters(filters);\n        tone.initialNoteFilterInputL1 = initialFilterInput1;\n        tone.initialNoteFilterInputL2 = initialFilterInput2;\n    }\n    static drumsetSynth(synth, bufferIndex, runLength, tone, instrumentState) {\n        const data = synth.tempInstrumentSampleBufferL;\n        let wave = instrumentState.getDrumsetWave(tone.drumsetPitch);\n        const referenceDelta = InstrumentState.drumsetIndexReferenceDelta(tone.drumsetPitch);\n        let phaseDelta = tone.phaseDeltas[0] / referenceDelta;\n        const phaseDeltaScale = +tone.phaseDeltaScales[0];\n        let expression = +tone.expression;\n        const expressionDelta = +tone.expressionDelta;\n        const filters = tone.noteFiltersL;\n        const filterCount = tone.noteFilterCount | 0;\n        let initialFilterInput1 = +tone.initialNoteFilterInputL1;\n        let initialFilterInput2 = +tone.initialNoteFilterInputL2;\n        const applyFilters = Synth.applyFilters;\n        let phase = (tone.phases[0] % 1) * Config.spectrumNoiseLength;\n        if (tone.phases[0] == 0.0)\n            phase = Synth.findRandomZeroCrossing(wave, Config.spectrumNoiseLength) + phaseDelta;\n        const phaseMask = Config.spectrumNoiseLength - 1;\n        const stopIndex = bufferIndex + runLength;\n        for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n            const phaseInt = phase | 0;\n            const index = phaseInt & phaseMask;\n            let noiseSample = wave[index];\n            const phaseRatio = phase - phaseInt;\n            noiseSample += (wave[index + 1] - noiseSample) * phaseRatio;\n            const inputSample = noiseSample;\n            const sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n            initialFilterInput2 = initialFilterInput1;\n            initialFilterInput1 = inputSample;\n            phase += phaseDelta;\n            phaseDelta *= phaseDeltaScale;\n            const output = sample * expression;\n            expression += expressionDelta;\n            data[sampleIndex] += output;\n        }\n        tone.phases[0] = phase / Config.spectrumNoiseLength;\n        tone.phaseDeltas[0] = phaseDelta * referenceDelta;\n        tone.expression = expression;\n        synth.sanitizeFilters(filters);\n        tone.initialNoteFilterInputL1 = initialFilterInput1;\n        tone.initialNoteFilterInputL2 = initialFilterInput2;\n    }\n    static modSynth(synth, stereoBufferIndex, roundedSamplesPerTick, tone, instrument) {\n        if (!synth.song)\n            return;\n        let mod = Config.modCount - 1 - tone.pitches[0];\n        if (instrument.invalidModulators[mod])\n            return;\n        let setting = instrument.modulators[mod];\n        let usedChannels = [];\n        let usedInstruments = [];\n        if (Config.modulators[instrument.modulators[mod]].forSong) {\n            usedInstruments.push(0);\n        }\n        else {\n            if (instrument.modInstruments[mod][0] == synth.song.channels[instrument.modChannels[mod][0]].instruments.length) {\n                for (let i = 0; i < synth.song.channels[instrument.modChannels[mod][0]].instruments.length; i++) {\n                    usedInstruments.push(i);\n                    usedChannels.push(0);\n                }\n            }\n            else if (instrument.modInstruments[mod][0] > synth.song.channels[instrument.modChannels[mod][0]].instruments.length) {\n                if (synth.song.getPattern(instrument.modChannels[mod][0], synth.bar) != null) {\n                    usedInstruments = synth.song.getPattern(instrument.modChannels[mod][0], synth.bar).instruments;\n                    usedChannels.push(0);\n                }\n            }\n            else {\n                for (let i = 0; i < instrument.modChannels[mod].length; i++) {\n                    usedChannels.push(instrument.modChannels[mod][i]);\n                    usedInstruments.push(instrument.modInstruments[mod][i]);\n                }\n            }\n        }\n        for (let instrumentIndex = 0; instrumentIndex < usedInstruments.length; instrumentIndex++) {\n            synth.setModValue(tone.expression, tone.expression + tone.expressionDelta, instrument.modChannels[mod][instrumentIndex], usedInstruments[instrumentIndex], setting);\n            for (let i = 0; i < synth.heldMods.length; i++) {\n                if (Config.modulators[instrument.modulators[mod]].forSong) {\n                    if (synth.heldMods[i].setting == setting)\n                        synth.setModValue(synth.heldMods[i].volume, synth.heldMods[i].volume, instrument.modChannels[mod][instrumentIndex], usedInstruments[instrumentIndex], setting);\n                }\n                else if (synth.heldMods[i].channelIndex == instrument.modChannels[mod][instrumentIndex] && synth.heldMods[i].instrumentIndex == usedInstruments[instrumentIndex] && synth.heldMods[i].setting == setting) {\n                    synth.setModValue(synth.heldMods[i].volume, synth.heldMods[i].volume, instrument.modChannels[mod][instrumentIndex], usedInstruments[instrumentIndex], setting);\n                }\n            }\n            if (setting == Config.modulators.dictionary[\"reset arp\"].index && synth.tick == 0 && tone.noteStartPart == synth.beat * Config.partsPerBeat + synth.part) {\n                synth.channels[instrument.modChannels[mod][instrumentIndex]].instruments[usedInstruments[instrumentIndex]].arpTime = 0;\n            }\n            else if (setting == Config.modulators.dictionary[\"reset envelope\"].index && synth.tick == 0 && tone.noteStartPart == synth.beat * Config.partsPerBeat + synth.part) {\n                let envelopeTarget = instrument.modEnvelopeNumbers[mod];\n                const tgtInstrumentState = synth.channels[instrument.modChannels[mod][instrumentIndex]].instruments[usedInstruments[instrumentIndex]];\n                const tgtInstrument = synth.song.channels[instrument.modChannels[mod][instrumentIndex]].instruments[usedInstruments[instrumentIndex]];\n                if (tgtInstrument.envelopeCount > envelopeTarget) {\n                    tgtInstrumentState.envelopeTime[envelopeTarget] = 0;\n                }\n            }\n            else if (setting == Config.modulators.dictionary[\"next bar\"].index) {\n                synth.wantToSkip = true;\n            }\n            else if (setting == Config.modulators.dictionary[\"song eq\"].index) {\n                const tgtSong = synth.song;\n                let dotTarget = instrument.modFilterTypes[mod] | 0;\n                if (dotTarget == 0) {\n                    let pinIdx = 0;\n                    const currentPart = synth.getTicksIntoBar() / Config.ticksPerPart;\n                    while (tone.note.start + tone.note.pins[pinIdx].time <= currentPart)\n                        pinIdx++;\n                    let lerpEndRatio = ((currentPart - tone.note.start + (roundedSamplesPerTick / (synth.getSamplesPerTick() * Config.ticksPerPart)) * Config.ticksPerPart) - tone.note.pins[pinIdx - 1].time) / (tone.note.pins[pinIdx].time - tone.note.pins[pinIdx - 1].time);\n                    if (tgtSong.eqSubFilters[tone.note.pins[pinIdx - 1].size] != null || tgtSong.eqSubFilters[tone.note.pins[pinIdx].size] != null) {\n                        tgtSong.tmpEqFilterEnd = FilterSettings.lerpFilters(tgtSong.eqSubFilters[tone.note.pins[pinIdx - 1].size], tgtSong.eqSubFilters[tone.note.pins[pinIdx].size], lerpEndRatio);\n                    }\n                    else {\n                        tgtSong.tmpEqFilterEnd = tgtSong.eqFilter;\n                    }\n                }\n                else {\n                    for (let i = 0; i < Config.filterMorphCount; i++) {\n                        if (tgtSong.tmpEqFilterEnd == tgtSong.eqSubFilters[i] && tgtSong.tmpEqFilterEnd != null) {\n                            tgtSong.tmpEqFilterEnd = new FilterSettings();\n                            tgtSong.tmpEqFilterEnd.fromJsonObject(tgtSong.eqSubFilters[i].toJsonObject());\n                        }\n                    }\n                    if (tgtSong.tmpEqFilterEnd == null) {\n                        tgtSong.tmpEqFilterEnd = new FilterSettings();\n                        tgtSong.tmpEqFilterEnd.fromJsonObject(tgtSong.eqFilter.toJsonObject());\n                    }\n                    if (tgtSong.tmpEqFilterEnd.controlPointCount > Math.floor((dotTarget - 1) / 2)) {\n                        if (dotTarget % 2) {\n                            tgtSong.tmpEqFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].freq = tone.expression + tone.expressionDelta;\n                        }\n                        else {\n                            tgtSong.tmpEqFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].gain = tone.expression + tone.expressionDelta;\n                        }\n                    }\n                }\n            }\n            else if (setting == Config.modulators.dictionary[\"post eq\"].index) {\n                const tgtInstrument = synth.song.channels[instrument.modChannels[mod][instrumentIndex]].instruments[usedInstruments[instrumentIndex]];\n                for (let effectIndex = 0; effectIndex < tgtInstrument.effects.length; effectIndex++) {\n                    const tgtEffect = tgtInstrument.effects[effectIndex];\n                    if (!tgtEffect.eqFilterType) {\n                        let dotTarget = instrument.modFilterTypes[mod] | 0;\n                        if (dotTarget == 0) {\n                            let pinIdx = 0;\n                            const currentPart = synth.getTicksIntoBar() / Config.ticksPerPart;\n                            while (tone.note.start + tone.note.pins[pinIdx].time <= currentPart)\n                                pinIdx++;\n                            let lerpEndRatio = ((currentPart - tone.note.start + (roundedSamplesPerTick / (synth.getSamplesPerTick() * Config.ticksPerPart)) * Config.ticksPerPart) - tone.note.pins[pinIdx - 1].time) / (tone.note.pins[pinIdx].time - tone.note.pins[pinIdx - 1].time);\n                            if (tgtEffect.eqSubFilters[tone.note.pins[pinIdx - 1].size] != null || tgtEffect.eqSubFilters[tone.note.pins[pinIdx].size] != null) {\n                                tgtEffect.tmpEqFilterEnd = FilterSettings.lerpFilters(tgtEffect.eqSubFilters[tone.note.pins[pinIdx - 1].size], tgtEffect.eqSubFilters[tone.note.pins[pinIdx].size], lerpEndRatio);\n                            }\n                            else {\n                                tgtEffect.tmpEqFilterEnd = tgtEffect.eqFilter;\n                            }\n                        }\n                        else {\n                            for (let i = 0; i < Config.filterMorphCount; i++) {\n                                if (tgtEffect.tmpEqFilterEnd == tgtEffect.eqSubFilters[i] && tgtEffect.tmpEqFilterEnd != null) {\n                                    tgtEffect.tmpEqFilterEnd = new FilterSettings();\n                                    tgtEffect.tmpEqFilterEnd.fromJsonObject(tgtEffect.eqSubFilters[i].toJsonObject());\n                                }\n                            }\n                            if (tgtEffect.tmpEqFilterEnd == null) {\n                                tgtEffect.tmpEqFilterEnd = new FilterSettings();\n                                tgtEffect.tmpEqFilterEnd.fromJsonObject(tgtEffect.eqFilter.toJsonObject());\n                            }\n                            if (tgtEffect.tmpEqFilterEnd.controlPointCount > Math.floor((dotTarget - 1) / 2)) {\n                                if (dotTarget % 2) {\n                                    tgtEffect.tmpEqFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].freq = tone.expression + tone.expressionDelta;\n                                }\n                                else {\n                                    tgtEffect.tmpEqFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].gain = tone.expression + tone.expressionDelta;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            else if (setting == Config.modulators.dictionary[\"pre eq\"].index) {\n                const tgtInstrument = synth.song.channels[instrument.modChannels[mod][instrumentIndex]].instruments[usedInstruments[instrumentIndex]];\n                if (!tgtInstrument.noteFilterType) {\n                    let dotTarget = instrument.modFilterTypes[mod] | 0;\n                    if (dotTarget == 0) {\n                        let pinIdx = 0;\n                        const currentPart = synth.getTicksIntoBar() / Config.ticksPerPart;\n                        while (tone.note.start + tone.note.pins[pinIdx].time <= currentPart)\n                            pinIdx++;\n                        let lerpEndRatio = ((currentPart - tone.note.start + (roundedSamplesPerTick / (synth.getSamplesPerTick() * Config.ticksPerPart)) * Config.ticksPerPart) - tone.note.pins[pinIdx - 1].time) / (tone.note.pins[pinIdx].time - tone.note.pins[pinIdx - 1].time);\n                        if (tgtInstrument.noteSubFilters[tone.note.pins[pinIdx - 1].size] != null || tgtInstrument.noteSubFilters[tone.note.pins[pinIdx].size] != null) {\n                            tgtInstrument.tmpNoteFilterEnd = FilterSettings.lerpFilters(tgtInstrument.noteSubFilters[tone.note.pins[pinIdx - 1].size], tgtInstrument.noteSubFilters[tone.note.pins[pinIdx].size], lerpEndRatio);\n                        }\n                        else {\n                            tgtInstrument.tmpNoteFilterEnd = tgtInstrument.noteFilter;\n                        }\n                    }\n                    else {\n                        for (let i = 0; i < Config.filterMorphCount; i++) {\n                            if (tgtInstrument.tmpNoteFilterEnd == tgtInstrument.noteSubFilters[i] && tgtInstrument.tmpNoteFilterEnd != null) {\n                                tgtInstrument.tmpNoteFilterEnd = new FilterSettings();\n                                tgtInstrument.tmpNoteFilterEnd.fromJsonObject(tgtInstrument.noteSubFilters[i].toJsonObject());\n                            }\n                        }\n                        if (tgtInstrument.tmpNoteFilterEnd == null) {\n                            tgtInstrument.tmpNoteFilterEnd = new FilterSettings();\n                            tgtInstrument.tmpNoteFilterEnd.fromJsonObject(tgtInstrument.noteFilter.toJsonObject());\n                        }\n                        if (tgtInstrument.tmpNoteFilterEnd.controlPointCount > Math.floor((dotTarget - 1) / 2)) {\n                            if (dotTarget % 2) {\n                                tgtInstrument.tmpNoteFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].freq = tone.expression + tone.expressionDelta;\n                            }\n                            else {\n                                tgtInstrument.tmpNoteFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].gain = tone.expression + tone.expressionDelta;\n                            }\n                        }\n                    }\n                }\n            }\n            else if (setting == Config.modulators.dictionary[\"individual envelope speed\"].index) {\n                const tgtInstrument = synth.song.channels[instrument.modChannels[mod][instrumentIndex]].instruments[usedInstruments[instrumentIndex]];\n                let envelopeTarget = instrument.modEnvelopeNumbers[mod];\n                let speed = tone.expression + tone.expressionDelta;\n                if (tgtInstrument.envelopeCount > envelopeTarget) {\n                    if (Number.isInteger(speed)) {\n                        tgtInstrument.envelopes[envelopeTarget].tempEnvelopeSpeed = Config.perEnvelopeSpeedIndices[speed];\n                    }\n                    else {\n                        speed = (1 - (speed % 1)) * Config.perEnvelopeSpeedIndices[Math.floor(speed)] + (speed % 1) * Config.perEnvelopeSpeedIndices[Math.ceil(speed)];\n                        tgtInstrument.envelopes[envelopeTarget].tempEnvelopeSpeed = speed;\n                    }\n                }\n            }\n            else if (setting == Config.modulators.dictionary[\"individual envelope lower bound\"].index) {\n                const tgtInstrument = synth.song.channels[instrument.modChannels[mod][instrumentIndex]].instruments[usedInstruments[instrumentIndex]];\n                let envelopeTarget = instrument.modEnvelopeNumbers[mod];\n                let bound = tone.expression + tone.expressionDelta;\n                if (tgtInstrument.envelopeCount > envelopeTarget) {\n                    tgtInstrument.envelopes[envelopeTarget].tempEnvelopeLowerBound = bound / 10;\n                }\n            }\n            else if (setting == Config.modulators.dictionary[\"individual envelope upper bound\"].index) {\n                const tgtInstrument = synth.song.channels[instrument.modChannels[mod][instrumentIndex]].instruments[usedInstruments[instrumentIndex]];\n                let envelopeTarget = instrument.modEnvelopeNumbers[mod];\n                let bound = tone.expression + tone.expressionDelta;\n                if (tgtInstrument.envelopeCount > envelopeTarget) {\n                    tgtInstrument.envelopes[envelopeTarget].tempEnvelopeUpperBound = bound / 10;\n                }\n                console.log(tgtInstrument.envelopes[envelopeTarget]);\n            }\n        }\n    }\n    static findRandomZeroCrossing(wave, waveLength) {\n        let phase = Math.random() * waveLength;\n        const phaseMask = waveLength - 1;\n        let indexPrev = phase & phaseMask;\n        let wavePrev = wave[indexPrev];\n        const stride = 16;\n        for (let attemptsRemaining = 128; attemptsRemaining > 0; attemptsRemaining--) {\n            const indexNext = (indexPrev + stride) & phaseMask;\n            const waveNext = wave[indexNext];\n            if (wavePrev * waveNext <= 0.0) {\n                for (let i = 0; i < stride; i++) {\n                    const innerIndexNext = (indexPrev + 1) & phaseMask;\n                    const innerWaveNext = wave[innerIndexNext];\n                    if (wavePrev * innerWaveNext <= 0.0) {\n                        const slope = innerWaveNext - wavePrev;\n                        phase = indexPrev;\n                        if (Math.abs(slope) > 0.00000001) {\n                            phase += -wavePrev / slope;\n                        }\n                        phase = Math.max(0, phase) % waveLength;\n                        break;\n                    }\n                    else {\n                        indexPrev = innerIndexNext;\n                        wavePrev = innerWaveNext;\n                    }\n                }\n                break;\n            }\n            else {\n                indexPrev = indexNext;\n                wavePrev = waveNext;\n            }\n        }\n        return phase;\n    }\n    static instrumentVolumeToVolumeMult(instrumentVolume) {\n        return (instrumentVolume == -Config.volumeRange / 2.0) ? 0.0 : Math.pow(2, Config.volumeLogScale * instrumentVolume);\n    }\n    static volumeMultToInstrumentVolume(volumeMult) {\n        return (volumeMult <= 0.0) ? -Config.volumeRange / 2 : Math.min(Config.volumeRange, (Math.log(volumeMult) / Math.LN2) / Config.volumeLogScale);\n    }\n    static noteSizeToVolumeMult(size) {\n        return Math.pow(Math.max(0.0, size) / Config.noteSizeMax, 1.5);\n    }\n    static volumeMultToNoteSize(volumeMult) {\n        return Math.pow(Math.max(0.0, volumeMult), 1 / 1.5) * Config.noteSizeMax;\n    }\n    static getOperatorWave(waveform, pulseWidth) {\n        if (waveform != 2) {\n            return Config.operatorWaves[waveform];\n        }\n        else {\n            return Config.pwmOperatorWaves[pulseWidth];\n        }\n    }\n    getSamplesPerTick() {\n        if (this.song == null)\n            return 0;\n        let beatsPerMinute = this.song.getBeatsPerMinute();\n        if (this.isModActive(Config.modulators.dictionary[\"tempo\"].index)) {\n            beatsPerMinute = this.getModValue(Config.modulators.dictionary[\"tempo\"].index);\n        }\n        return this.getSamplesPerTickSpecificBPM(beatsPerMinute);\n    }\n    getSamplesPerTickSpecificBPM(beatsPerMinute) {\n        const beatsPerSecond = beatsPerMinute / 60.0;\n        const partsPerSecond = Config.partsPerBeat * beatsPerSecond;\n        const tickPerSecond = Config.ticksPerPart * partsPerSecond;\n        return this.samplesPerSecond / tickPerSecond;\n    }\n    sanitizeFilters(filters) {\n        let reset = false;\n        for (const filter of filters) {\n            const output1 = Math.abs(filter.output1);\n            const output2 = Math.abs(filter.output2);\n            if (!(output1 < 100) || !(output2 < 100)) {\n                reset = true;\n                break;\n            }\n            if (output1 < epsilon)\n                filter.output1 = 0.0;\n            if (output2 < epsilon)\n                filter.output2 = 0.0;\n        }\n        if (reset) {\n            for (const filter of filters) {\n                filter.output1 = 0.0;\n                filter.output2 = 0.0;\n            }\n        }\n    }\n    static sanitizeDelayLine(delayLine, lastIndex, mask) {\n        while (true) {\n            lastIndex--;\n            const index = lastIndex & mask;\n            const sample = Math.abs(delayLine[index]);\n            if (Number.isFinite(sample) && (sample == 0.0 || sample >= epsilon))\n                break;\n            delayLine[index] = 0.0;\n        }\n    }\n    static applyFilters(sample, input1, input2, filterCount, filters) {\n        for (let i = 0; i < filterCount; i++) {\n            const filter = filters[i];\n            const output1 = filter.output1;\n            const output2 = filter.output2;\n            const a1 = filter.a1;\n            const a2 = filter.a2;\n            const b0 = filter.b0;\n            const b1 = filter.b1;\n            const b2 = filter.b2;\n            sample = b0 * sample + b1 * input1 + b2 * input2 - a1 * output1 - a2 * output2;\n            filter.a1 = a1 + filter.a1Delta;\n            filter.a2 = a2 + filter.a2Delta;\n            if (filter.useMultiplicativeInputCoefficients) {\n                filter.b0 = b0 * filter.b0Delta;\n                filter.b1 = b1 * filter.b1Delta;\n                filter.b2 = b2 * filter.b2Delta;\n            }\n            else {\n                filter.b0 = b0 + filter.b0Delta;\n                filter.b1 = b1 + filter.b1Delta;\n                filter.b2 = b2 + filter.b2Delta;\n            }\n            filter.output2 = output1;\n            filter.output1 = sample;\n            input2 = output2;\n            input1 = output1;\n        }\n        return sample;\n    }\n    computeTicksSinceStart(ofBar = false) {\n        var _a, _b;\n        const beatsPerBar = ((_a = this.song) === null || _a === void 0 ? void 0 : _a.beatsPerBar) ? (_b = this.song) === null || _b === void 0 ? void 0 : _b.beatsPerBar : 8;\n        if (ofBar) {\n            return Config.ticksPerPart * Config.partsPerBeat * beatsPerBar * this.bar;\n        }\n        else {\n            return this.tick + Config.ticksPerPart * (this.part + Config.partsPerBeat * (this.beat + beatsPerBar * this.bar));\n        }\n    }\n}\nSynth.tempFilterStartCoefficients = new FilterCoefficients();\nSynth.tempFilterEndCoefficients = new FilterCoefficients();\nSynth.fmSynthFunctionCache = {};\nSynth.fm6SynthFunctionCache = {};\nSynth.effectsFunctionCache = {};\nSynth.pickedStringFunctionCache = Array(3).fill(undefined);\nSynth.fmSourceTemplate = (`\n\t\tconst data = synth.tempInstrumentSampleBufferL;\n\t\tconst sineWave = Config.sineWave;\n\t\t\t\n\t\t// I'm adding 1000 to the phase to ensure that it's never negative even when modulated by other waves because negative numbers don't work with the modulus operator very well.\n\t\tlet operator#Phase       = +((tone.phases[#] % 1) + 1000) * ` + Config.sineWaveLength + `;\n\t\tlet operator#PhaseDelta  = +tone.phaseDeltas[#] * ` + Config.sineWaveLength + `;\n\t\tlet operator#PhaseDeltaScale = +tone.phaseDeltaScales[#];\n\t\tlet operator#OutputMult  = +tone.operatorExpressions[#];\n\t\tconst operator#OutputDelta = +tone.operatorExpressionDeltas[#];\n\t\tlet operator#Output      = +tone.feedbackOutputs[#];\n        const operator#Wave      = tone.operatorWaves[#].samples;\n\t\tlet feedbackMult         = +tone.feedbackMult;\n\t\tconst feedbackDelta        = +tone.feedbackDelta;\n        let expression = +tone.expression;\n\t\tconst expressionDelta = +tone.expressionDelta;\n\t\t\n\t\tconst filters = tone.noteFiltersL;\n\t\tconst filterCount = tone.noteFilterCount|0;\n\t\tlet initialFilterInput1 = +tone.initialNoteFilterInputL1;\n\t\tlet initialFilterInput2 = +tone.initialNoteFilterInputL2;\n\t\tconst applyFilters = Synth.applyFilters;\n\t\t\n\t\tconst stopIndex = bufferIndex + roundedSamplesPerTick;\n\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\t\t// INSERT OPERATOR COMPUTATION HERE\n\t\t\t\tconst fmOutput = (/*operator#Scaled*/); // CARRIER OUTPUTS\n\t\t\t\t\n\t\t\tconst inputSample = fmOutput;\n\t\t\tconst sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\tinitialFilterInput1 = inputSample;\n\t\t\t\t\n\t\t\t\tfeedbackMult += feedbackDelta;\n\t\t\t\toperator#OutputMult += operator#OutputDelta;\n\t\t\t\toperator#Phase += operator#PhaseDelta;\n\t\t\toperator#PhaseDelta *= operator#PhaseDeltaScale;\n\t\t\t\n\t\t\tconst output = sample * expression;\n\t\t\texpression += expressionDelta;\n\n\t\t\tdata[sampleIndex] += output;\n\t\t\t}\n\t\t\t\n\t\t\ttone.phases[#] = operator#Phase / ` + Config.sineWaveLength + `;\n\t\t\ttone.phaseDeltas[#] = operator#PhaseDelta / ` + Config.sineWaveLength + `;\n\t\t\ttone.operatorExpressions[#] = operator#OutputMult;\n\t\t    tone.feedbackOutputs[#] = operator#Output;\n\t\t    tone.feedbackMult = feedbackMult;\n\t\t    tone.expression = expression;\n\t\t\t\n\t\tsynth.sanitizeFilters(filters);\n\t\ttone.initialNoteFilterInputL1 = initialFilterInput1;\n\t\ttone.initialNoteFilterInputL2 = initialFilterInput2;\n\t\t`).split(\"\\n\");\nSynth.operatorSourceTemplate = (`\n\t\tconst operator#PhaseMix = operator#Phase/* + operator@Scaled*/;\n\t\tconst operator#PhaseInt = operator#PhaseMix|0;\n\t\tconst operator#Index    = operator#PhaseInt & ` + Config.sineWaveMask + `;\n\t\tconst operator#Sample   = operator#Wave[operator#Index];\n\t\toperator#Output         = operator#Sample + (operator#Wave[operator#Index + 1] - operator#Sample) * (operator#PhaseMix - operator#PhaseInt);\n\t\tconst operator#Scaled   = operator#OutputMult * operator#Output;\n\t\t`).split(\"\\n\");\nexport { Config };\n//# sourceMappingURL=synth.js.map"],"mappings":"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,EACThvC,MAAOmd,EAAaK,iBAAiBlf,OAE7D,CACA,CACA,KACa,CACD,IAAI+5C,GAA0B,EAC9B,GAA8Bt8B,MAA1Bq8B,EAAqB,SACrB,IAAK,IAAI9P,EAAe,EAAGA,EAAe8P,EAAqB,SAAE95C,OAAQgqC,IAAgB,CACrF,MAAMoP,EAAgBU,EAAqB,SAAE9P,GAC7C,GAA8B,UAA1BoP,EAAoB,MAGpB55C,MAAMk5B,QAAQ0gB,EAA2B,aAAI,CAC7C,MAAMY,EAAoBZ,EAA2B,YACrD,IAAK,IAAIzxC,EAAI,EAAGA,EAAIqyC,EAAkBh6C,OAAQ2H,IAAK,CAC/C,MAAMqwB,EAAmBgiB,EAAkBryC,GAC3C,GAAiC,SAA7BqwB,EAAuB,KACvB,SAEJ,GAAgC,MAA5BA,EAAuB,KACvB,SAEJ,MAAMiiB,EAAWjiB,EAAuB,KAClCkiB,EAAQ,CACV,oBACA,qBACA,sBACA,mBACA,yBACA,uBACA,yBACA,4BACA,gCACA,qBACA,2BACA,uBACA,qBACA,+BACA,qBACA,6BACA,8BACA,0BACA,gCACA,+BACA,oBACA,6BACA,4BACA,6BACA,2BACA,yBACA,yBACA,2BACA,uBACA,yBACA,uBACA,yBACA,2BACA,6BACA,6BACA,2BACA,0BACA,uCACA,6BACA,gCACA,+BACA,0BACA,qBACA,0BACA,yBACA,wBACA,0BACA,mCACA,wCACA,kCACA,wCACA,kCACA,2BACA,4BACA,4BACA,4BACA,2BACA,4BACA,wCACA,yCACA,+BACA,8BACA,qCACA,0CACA,mCACA,uCACA,oCACA,4BACA,kCACA,4BAEEC,EAAW,CACb,oBACA,qBACA,sBACA,mBACA,yBACA,uBACA,yBACA,4BACA,gCACA,qBACA,2BACA,uBACA,qBACA,+BACA,qBACA,6BACA,8BACA,0BACA,gCACA,+BACA,oBACA,6BACA,4BACA,6BACA,2BACA,yBACA,yBACA,2BACA,uBACA,yBACA,uBACA,yBACA,2BACA,6BACA,6BACA,2BACA,0BACA,uCACA,6BACA,gCACA,+BACA,0BACA,qBACA,0BACA,yBACA,wBACA,0BACA,mC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","ignoreList":[]}