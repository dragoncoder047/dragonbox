{
  "version": 3,
  "sources": ["../../player/main.ts", "../../node_modules/imperative-html/src/elements-base.ts", "../../node_modules/imperative-html/src/elements-strict.ts", "../../editor/namespaced_localStorage.ts", "../../synth/SynthConfig.ts", "../../data/themes/abyssbox_classic.css", "../../data/themes/abyssbox_light.css", "../../data/themes/amoled_dark.css", "../../data/themes/autumn.css", "../../data/themes/azur_lane.css", "../../data/themes/beachcombing.css", "../../data/themes/blubox_classic.css", "../../data/themes/blutonium.css", "../../data/themes/brucebox.css", "../../data/themes/canyon.css", "../../data/themes/cardboardbox_classic.css", "../../data/themes/dark_competition.css", "../../data/themes/dogebox2.css", "../../data/themes/dogebox_classic.css", "../../data/themes/dogebox_dark.css", "../../data/themes/energized.css", "../../data/themes/fogbox.css", "../../data/themes/forest.css", "../../data/themes/foxbox.css", "../../data/themes/fruit.css", "../../data/themes/fusion.css", "../../data/themes/greyscale.css", "../../data/themes/harrybox.css", "../../data/themes/inverse.css", "../../data/themes/jummbox_classic.css", "../../data/themes/jummbox_light.css", "../../data/themes/light_classic.css", "../../data/themes/mainbox1.css", "../../data/themes/microbox.css", "../../data/themes/midbox.css", "../../data/themes/midnight.css", "../../data/themes/modbox_classic.css", "../../data/themes/moonlight.css", "../../data/themes/neapolitan.css", "../../data/themes/nebula.css", "../../data/themes/nepbox.css", "../../data/themes/nerdbox.css", "../../data/themes/paandorasbox.css", "../../data/themes/poly.css", "../../data/themes/portal.css", "../../data/themes/roe.css", "../../data/themes/roe_light.css", "../../data/themes/sandbox_classic.css", "../../data/themes/shitbox2.css", "../../data/themes/shitbox3.css", "../../data/themes/slarmoosbox.css", "../../data/themes/slushie.css", "../../data/themes/sunset.css", "../../data/themes/todbox_dark.css", "../../data/themes/toxic.css", "../../data/themes/ultrabox_dark.css", "../../data/themes/violent_verdant.css", "../../data/themes/wackybox.css", "../../data/themes/zefbox.css", "../../editor/ColorConfig.ts", "../../global/Events.ts", "../../global/Oscilloscope.ts", "../../synth/Channel.ts", "../../synth/filtering.ts", "../../synth/Filter.ts", "../../synth/Effect.ts", "../../synth/utils.ts", "../../synth/Envelope.ts", "../../synth/Instrument.ts", "../../synth/Pattern.ts", "../../synth/ChannelState.ts", "../../synth/Deque.ts", "../../node_modules/js-xxhash/dist/esm/xxHash32.js", "../../synth/EnvelopeComputer.ts", "../../synth/EffectState.ts", "../../synth/FFT.ts", "../../synth/InstrumentState.ts", "../../editor/EditorConfig.ts", "../../synth/Song.ts", "../../synth/Tone.ts", "../../synth/synth.ts"],
  "sourcesContent": ["// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { HTML, SVG } from \"imperative-html/dist/esm/elements-strict\";\nimport { ColorConfig } from \"../editor/ColorConfig\";\nimport { nsLocalStorage_get, nsLocalStorage_save } from \"../editor/namespaced_localStorage\";\nimport { oscilloscopeCanvas } from \"../global/Oscilloscope\";\nimport { Channel } from \"../synth/Channel\";\nimport { Instrument } from \"../synth/Instrument\";\nimport { Note, NotePin, Pattern } from \"../synth/Pattern\";\nimport { Synth } from \"../synth/synth\";\nimport { Chord, Config, Dictionary, DictionaryArray, Envelope, EnvelopeType, InstrumentType, Transition } from \"../synth/SynthConfig\";\n\n\tconst {a, button, div, h1, input, canvas} = HTML;\n\tconst {svg, circle, rect, path} = SVG;\n\n\tconst isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|android|ipad|playbook|silk/i.test(navigator.userAgent);\n\n\tdocument.head.appendChild(HTML.style({type: \"text/css\"}, `\n\tbody {\n\t\tcolor: ${ColorConfig.primaryText};\n\t\tbackground: ${ColorConfig.editorBackground};\n\t}\n\th1 {\n\t\tfont-weight: bold;\n\t\tfont-size: 14px;\n\t\tline-height: 22px;\n\t\ttext-align: initial;\n\t\tmargin: 0;\n\t}\n\ta {\n\t\tfont-weight: bold;\n\t\tfont-size: 12px;\n\t\tline-height: 22px;\n\t\twhite-space: nowrap;\n\t\tcolor: ${ColorConfig.linkAccent};\n\t}\n\tbutton {\n\t\tmargin: 0;\n\t\tpadding: 0;\n\t\tposition: relative;\n\t\tborder: none;\n\t\tborder-radius: 5px;\n\t\tbackground: ${ColorConfig.uiWidgetBackground};\n\t\tcolor: ${ColorConfig.primaryText};\n\t\tcursor: pointer;\n\t\tfont-size: 14px;\n\t\tfont-family: inherit;\n\t}\n\tbutton:hover, button:focus {\n\t\tbackground: ${ColorConfig.uiWidgetFocus};\n\t}\n\t.playButton, .pauseButton {\n\t\tpadding-left: 24px;\n\t\tpadding-right: 6px;\n\t}\n\t.playButton::before {\n\t\tcontent: \"\";\n\t\tposition: absolute;\n\t\tleft: 6px;\n\t\ttop: 50%;\n\t\tmargin-top: -6px;\n\t\twidth: 12px;\n\t\theight: 12px;\n\t\tpointer-events: none;\n\t\tbackground: ${ColorConfig.primaryText};\n\t\t-webkit-mask-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"-6 -6 12 12\"><path d=\"M 6 0 L -5 6 L -5 -6 z\" fill=\"gray\"/></svg>');\n\t\t-webkit-mask-repeat: no-repeat;\n\t\t-webkit-mask-position: center;\n\t\tmask-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"-6 -6 12 12\"><path d=\"M 6 0 L -5 6 L -5 -6 z\" fill=\"gray\"/></svg>');\n\t\tmask-repeat: no-repeat;\n\t\tmask-position: center;\n\t}\n\t.pauseButton::before {\n\t\tcontent: \"\";\n\t\tposition: absolute;\n\t\tleft: 6px;\n\t\ttop: 50%;\n\t\tmargin-top: -6px;\n\t\twidth: 12px;\n\t\theight: 12px;\n\t\tpointer-events: none;\n\t\tbackground: ${ColorConfig.primaryText};\n\t\t-webkit-mask-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"-6 -6 12 12\"><rect x=\"-5\" y=\"-6\" width=\"3\" height=\"12\" fill=\"gray\"/><rect x=\"2\"  y=\"-6\" width=\"3\" height=\"12\" fill=\"gray\"/></svg>');\n\t\t-webkit-mask-repeat: no-repeat;\n\t\t-webkit-mask-position: center;\n\t\tmask-image: url('data:image/svg+xml,<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"12\" height=\"12\" viewBox=\"-6 -6 12 12\"><rect x=\"-5\" y=\"-6\" width=\"3\" height=\"12\" fill=\"gray\"/><rect x=\"2\"  y=\"-6\" width=\"3\" height=\"12\" fill=\"gray\"/></svg>');\n\t\tmask-repeat: no-repeat;\n\t\tmask-position: center;\n\t}\n\t\n\tinput[type=range] {\n\t\t-webkit-appearance: none;\n\t\tappearance: none;\n\t\theight: 16px;\n\t\tmargin: 0;\n\t\tcursor: pointer;\n\t\tbackground-color: ${ColorConfig.editorBackground};\n\t\ttouch-action: pan-y;\n\t}\n\tinput[type=range]:focus {\n\t\toutline: none;\n\t}\n\tinput[type=range]::-webkit-slider-runnable-track {\n\t\twidth: 100%;\n\t\theight: 4px;\n\t\tcursor: pointer;\n\t\tbackground: ${ColorConfig.uiWidgetBackground};\n\t}\n\tinput[type=range]::-webkit-slider-thumb {\n\t\theight: 16px;\n\t\twidth: 4px;\n\t\tborder-radius: 2px;\n\t\tbackground: ${ColorConfig.primaryText};\n\t\tcursor: pointer;\n\t\t-webkit-appearance: none;\n\t\tmargin-top: -6px;\n\t}\n\tinput[type=range]:focus::-webkit-slider-runnable-track, input[type=range]:hover::-webkit-slider-runnable-track {\n\t\tbackground: ${ColorConfig.uiWidgetFocus};\n\t}\n\tinput[type=range]::-moz-range-track {\n\t\twidth: 100%;\n\t\theight: 4px;\n\t\tcursor: pointer;\n\t\tbackground: ${ColorConfig.uiWidgetBackground};\n\t}\n\tinput[type=range]:focus::-moz-range-track, input[type=range]:hover::-moz-range-track  {\n\t\tbackground: ${ColorConfig.uiWidgetFocus};\n\t}\n\tinput[type=range]::-moz-range-thumb {\n\t\theight: 16px;\n\t\twidth: 4px;\n\t\tborder-radius: 2px;\n\t\tborder: none;\n\t\tbackground: ${ColorConfig.primaryText};\n\t\tcursor: pointer;\n\t}\n\tinput[type=range]::-ms-track {\n\t\twidth: 100%;\n\t\theight: 4px;\n\t\tcursor: pointer;\n\t\tbackground: ${ColorConfig.uiWidgetBackground};\n\t\tborder-color: transparent;\n\t}\n\tinput[type=range]:focus::-ms-track, input[type=range]:hover::-ms-track {\n\t\tbackground: ${ColorConfig.uiWidgetFocus};\n\t}\n\tinput[type=range]::-ms-thumb {\n\t\theight: 16px;\n\t\twidth: 4px;\n\t\tborder-radius: 2px;\n\t\tbackground: ${ColorConfig.primaryText};\n\t\tcursor: pointer;\n\t}\n`));\nconst colorTheme: string | null = getLocalStorage(\"colorTheme\");\nColorConfig.setTheme(colorTheme === null ? ColorConfig.defaultTheme : colorTheme);\n\nlet prevHash: string | null = null;\nlet id = ((Math.random() * 0xffffffff) >>> 0).toString(16);\nlet pauseButtonDisplayed = false;\nlet animationRequest: number | null;\nlet zoomEnabled = false;\nlet timelineWidth = 1;\nlet outVolumeHistoricTimer = 0;\nlet outVolumeHistoricCap = 0;\n\nconst synth = new Synth();\nconst oscilloscope = new oscilloscopeCanvas(canvas({ width: isMobile? 144:288, height: isMobile?32:64, style: `border:2px solid ${ColorConfig.uiWidgetBackground}; overflow: hidden;` , id: \"oscilloscopeAll\" }), isMobile?1:2);\nconst showOscilloscope = getLocalStorage(\"showOscilloscope\") != \"false\";\nif (!showOscilloscope) {\n\toscilloscope.canvas.style.display = \"none\";\n\tsynth.oscEnabled = false;\n}\nlet titleText = h1({ style: \"flex-grow: 1; margin: 0 1px; margin-left: 10px; overflow: hidden;\" }, \"\");\n\tlet editLink = a({target: \"_top\", style: \"margin: 0 4px;\"}, \"\u270E Edit\");\n\tlet copyLink = a({href: \"javascript:void(0)\", style: \"margin: 0 4px;\"}, \"\u2398 Copy URL\");\n\tlet shareLink = a({href: \"javascript:void(0)\", style: \"margin: 0 4px;\"}, \"\u2933 Share\");\n\tlet fullscreenLink = a({target: \"_top\", style: \"margin: 0 4px;\"}, \"\u21F1 Fullscreen\");\n\nlet draggingPlayhead = false;\n\tconst playButton = button({style: \"width: 100%; height: 100%; max-height: 50px;\"});\n\tconst playButtonContainer = div({style: \"flex-shrink: 0; display: flex; padding: 2px; width: 80px; height: 100%; box-sizing: border-box; align-items: center;\"},\n\tplayButton,\n);\n\tconst loopIcon = path({d: \"M 4 2 L 4 0 L 7 3 L 4 6 L 4 4 Q 2 4 2 6 Q 2 8 4 8 L 4 10 Q 0 10 0 6 Q 0 2 4 2 M 8 10 L 8 12 L 5 9 L 8 6 L 8 8 Q 10 8 10 6 Q 10 4 8 4 L 8 2 Q 12 2 12 6 Q 12 10 8 10 z\"});\n\tconst loopButton = button({title: \"loop\", style: \"background: none; flex: 0 0 12px; margin: 0 3px; width: 12px; height: 12px; display: flex;\"}, svg({width: 12, height: 12, viewBox: \"0 0 12 12\"},\n\tloopIcon,\n));\n\n\tconst volumeIcon = svg({style: \"flex: 0 0 12px; margin: 0 1px; width: 12px; height: 12px;\", viewBox: \"0 0 12 12\"},\n\t\tpath({fill: ColorConfig.uiWidgetBackground, d: \"M 1 9 L 1 3 L 4 3 L 7 0 L 7 12 L 4 9 L 1 9 M 9 3 Q 12 6 9 9 L 8 8 Q 10.5 6 8 4 L 9 3 z\"}),\n);\nconst volumeSlider = input({ title: \"volume\", type: \"range\", value: 75, min: 0, max: 75, step: 1, style: \"width: 12vw; max-width: 100px; margin: 0 1px;\" });\n\n\tconst zoomIcon = svg({width: 12, height: 12, viewBox: \"0 0 12 12\"},\n\t\tcircle({cx: \"5\", cy: \"5\", r: \"4.5\", \"stroke-width\": \"1\", stroke: \"currentColor\", fill: \"none\"}),\n\t\tpath({stroke: \"currentColor\", \"stroke-width\": \"2\", d: \"M 8 8 L 11 11 M 5 2 L 5 8 M 2 5 L 8 5\", fill: \"none\"}),\n);\n\tconst zoomButton = button({title: \"zoom\", style: \"background: none; flex: 0 0 12px; margin: 0 3px; width: 12px; height: 12px; display: flex;\"},\n\tzoomIcon,\n);\n\n\tconst timeline = svg({style: \"min-width: 0; min-height: 0; touch-action: pan-y pinch-zoom;\"});\n\tconst playhead = div({style: `position: absolute; left: 0; top: 0; width: 2px; height: 100%; background: ${ColorConfig.playhead}; pointer-events: none;`});\n\tconst timelineContainer = div({style: \"display: flex; flex-grow: 1; flex-shrink: 1; position: relative;\"}, timeline, playhead);\n\tconst visualizationContainer = div({style: \"display: flex; flex-grow: 1; flex-shrink: 1; height: 0; position: relative; align-items: center; overflow: hidden;\"}, timelineContainer);\n\tlet noteFlashElementsPerBar: (SVGPathElement[])[];\n\tlet currentNoteFlashElements: SVGPathElement[] = [];\n\tlet currentNoteFlashBar = -1;\n\tconst notesFlashWhenPlayed = getLocalStorage(\"notesFlashWhenPlayed\") == \"true\";\n\tconst fixChannelColorOrder = getLocalStorage(\"fixChannelColorOrder\") != \"false\";\n\nconst outVolumeBarBg = SVG.rect({ \"pointer-events\": \"none\", width: \"90%\", height: \"50%\", x: \"5%\", y: \"25%\", fill: ColorConfig.uiWidgetBackground });\nconst outVolumeBar = SVG.rect({ \"pointer-events\": \"none\", height: \"50%\", width: \"0%\", x: \"5%\", y: \"25%\", fill: \"url('#volumeGrad2')\" });\nconst outVolumeCap = SVG.rect({ \"pointer-events\": \"none\", width: \"2px\", height: \"50%\", x: \"5%\", y: \"25%\", fill: ColorConfig.uiWidgetFocus });\nconst stop1 = SVG.stop({ \"stop-color\": \"lime\", offset: \"60%\" });\nconst stop2 = SVG.stop({ \"stop-color\": \"orange\", offset: \"90%\" });\nconst stop3 = SVG.stop({ \"stop-color\": \"red\", offset: \"100%\" });\nconst gradient = SVG.linearGradient({ id: \"volumeGrad2\", gradientUnits: \"userSpaceOnUse\" }, stop1, stop2, stop3);\nconst defs = SVG.defs({}, gradient);\nconst volumeBarContainer = SVG.svg({ style: `touch-action: none; overflow: hidden; margin: auto;`, width: \"160px\", height: \"10px\", preserveAspectRatio: \"none\" },\n\tdefs,\n\toutVolumeBarBg,\n\toutVolumeBar,\n\toutVolumeCap,\n);\ndocument.body.appendChild(visualizationContainer);\ndocument.body.appendChild(\n\t\tdiv({style: `flex-shrink: 0; height: 20vh; min-height: 22px; max-height: 70px; display: flex; align-items: center;`},\n\t\tplayButtonContainer,\n\t\tloopButton,\n\t\tvolumeIcon,\n\t\tvolumeSlider,\n\t\tzoomButton,\n\t\tvolumeBarContainer,\n\t\toscilloscope.canvas, //make it auto remove itself later\n\t\ttitleText,\n\t\teditLink,\n\t\tcopyLink,\n\t\tshareLink,\n\t\tfullscreenLink,\n\t),\n);\n\n// Some browsers have an option to \"block third-party cookies\" (it's enabled by\n// default in icognito Chrome windows) that throws an error on trying to access\n// localStorage from cross-domain iframe such as this song player, so wrap the\n// access in a try-catch block to ignore the error instead of interrupting\n// execution.\nfunction setLocalStorage(key: string, value: string): void {\n\ttry {\n\t\tnsLocalStorage_save(key, value);\n\t} catch (error) {\n\t\t// Ignore the error since we can't fix it.\n\t}\n}\nfunction getLocalStorage(key: string): string | null {\n\ttry {\n\t\treturn nsLocalStorage_get(key);\n\t} catch (error) {\n\t\t// Ignore the error since we can't fix it.\n\t\treturn null;\n\t}\n}\n\nfunction removeFromUnorderedArray<T>(array: T[], index: number): void {\n\tif (array.length < 1) {\n\t\t// Don't need to do anything when `array` is empty.\n\t\treturn;\n\t}\n\tif (index === array.length - 1) {\n\t\t// Trivial case.\n\t\tarray.pop();\n\t} else if (index >= 0 && index < array.length - 1) {\n\t\t// The idea here is that we want to remove an element from the array\n\t\t// quickly, and the fastest way to do that is to use `array.pop()`. As\n\t\t// the name of this function says, we assume `array` to be unordered,\n\t\t// so this trick is okay to do.\n\t\tconst lastElement = array.pop()!;\n\t\tarray[index] = lastElement;\n\t}\n}\n\nfunction loadSong(songString: string, reuseParams: boolean): void {\n\tsynth.setSong(songString);\n\tsynth.snapToStart();\n\tconst updatedSongString = synth.song!.toBase64String();\n\teditLink.href = \"../\" + (OFFLINE ? \"index.html\" : \"\") + \"#\" + updatedSongString;\n\t//@jummbus - these lines convert old url vers loaded into the player to the new url ver. The problem is, if special chars are included,\n\t// they appear to get double-encoded (e.g. the '%' in %20 is encoded again), which breaks the link. Disabled for now until I have a chance\n\t// to look into it more.\n\t//const hashQueryParams = new URLSearchParams(reuseParams ? location.hash.slice(1) : \"\");\n\t//hashQueryParams.set(\"song\", updatedSongString);\n\t//location.hash = hashQueryParams.toString();\n}\n\nfunction hashUpdatedExternally(): void {\n\tlet myHash = location.hash;\n\tif (prevHash == myHash || myHash == \"\") return;\n\t\t\n\tprevHash = myHash;\n\t\t\n\tif (myHash.charAt(0) == \"#\") {\n\t\tmyHash = myHash.substring(1);\n\t}\n\t\t\n\t\n\tfullscreenLink.href = location.href;\n\n\t// @TODO: This can be moved back into splitting merely on & once samples\n\t// are reworked so that the URLs don't clash with the overall URL syntax\n\t// that's assumed to be respected here (and probably elsewhere...)\n\tfor (const parameter of myHash.split(/&(?=[a-z]+=)/g)) {\n\t\tlet equalsIndex = parameter.indexOf(\"=\");\n\t\tif (equalsIndex != -1) {\n\t\t\tlet paramName = parameter.substring(0, equalsIndex);\n\t\t\tlet value = parameter.substring(equalsIndex + 1);\n\t\t\tswitch (paramName) {\n\t\t\t\tcase \"song\":\n\t\t\t\t\tloadSong(value, true);\n\t\t\t\t\tif (synth.song) {\n\t\t\t\t\t\ttitleText.textContent = synth.song.title;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\t//case \"title\":\n\t\t\t\t//\ttitleText.textContent = decodeURIComponent(value);\n\t\t\t\t//\tbreak;\n\t\t\t\tcase \"loop\":\n\t\t\t\t\tsynth.loopRepeatCount = (value != \"1\") ? 0 : -1;\n\t\t\t\t\trenderLoopIcon();\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t} else {\n\t\t\tloadSong(myHash, false);\n\t\t}\n\t}\n\t\t\n\trenderTimeline();\n}\n\nfunction onWindowResize(): void {\n\trenderTimeline();\n}\n\nlet pauseIfAnotherPlayerStartsHandle: ReturnType<typeof setInterval> | null = null;\nfunction pauseIfAnotherPlayerStarts(): void {\n\tif (!synth.playing) {\n\t\tclearInterval(pauseIfAnotherPlayerStartsHandle!);\n\t\treturn;\n\t}\n\n\tconst storedPlayerId: string | null = getLocalStorage(\"playerId\");\n\tif (storedPlayerId != null && storedPlayerId != id) {\n\t\tonTogglePlay();\n\t\trenderPlayhead();\n\t\tclearInterval(pauseIfAnotherPlayerStartsHandle!);\n\t}\n}\n\nfunction animate(): void {\n\tif (synth.playing) {\n\t\tanimationRequest = requestAnimationFrame(animate);\n\t\trenderPlayhead();\n\n\t\tvolumeUpdate();\n\t}\n\tif (pauseButtonDisplayed != synth.playing) {\n\t\trenderPlayButton();\n\t}\n\n}\n\nfunction volumeUpdate(): void {\n\tif (synth.song == null) {\n\t\toutVolumeCap.setAttribute(\"x\", \"5%\");\n\t\toutVolumeBar.setAttribute(\"width\", \"0%\");\n\t\treturn;\n}\n\toutVolumeHistoricTimer--;\n\tif (outVolumeHistoricTimer <= 0) {\n\t\toutVolumeHistoricCap -= 0.03;\n\t}\n\tif (synth.song.outVolumeCap > outVolumeHistoricCap) {\n\t\toutVolumeHistoricCap = synth.song.outVolumeCap;\n\t\toutVolumeHistoricTimer = 50;\n\t}\n\n\tanimateVolume(synth.song.outVolumeCap, outVolumeHistoricCap);\n\n\tif (!synth.playing) {\n\t\toutVolumeCap.setAttribute(\"x\", \"5%\");\n\t\toutVolumeBar.setAttribute(\"width\", \"0%\");\n\t}\n}\n\nfunction animateVolume(useOutVolumeCap: number, historicOutCap: number): void {\n\toutVolumeBar.setAttribute(\"width\", \"\" + Math.min(144, useOutVolumeCap * 144));\n\toutVolumeCap.setAttribute(\"x\", \"\" + (8 + Math.min(144, historicOutCap * 144)));\n}\n\nfunction onTogglePlay(): void {\n\tif (synth.song != null) {\n\t\tif (animationRequest != null) cancelAnimationFrame(animationRequest);\n\t\tanimationRequest = null;\n\t\tif (synth.playing) {\n\t\t\tsynth.pause();\n\t\t\tvolumeUpdate();\n\t\t} else {\n\t\t\tsynth.play();\n\t\t\tsetLocalStorage(\"playerId\", id);\n\t\t\tanimate();\n\t\t\tclearInterval(pauseIfAnotherPlayerStartsHandle!);\n\t\t\tpauseIfAnotherPlayerStartsHandle = setInterval(pauseIfAnotherPlayerStarts, 100);\n\t\t}\n\t}\n\trenderPlayButton();\n}\n\nfunction onToggleLoop(): void {\n\tif (synth.loopRepeatCount == -1) {\n\t\tsynth.loopRepeatCount = 0;\n\t} else {\n\t\tsynth.loopRepeatCount = -1;\n\t}\n\trenderLoopIcon();\n}\n\nfunction onVolumeChange(): void {\n\tsetLocalStorage(\"volume\", volumeSlider.value);\n\tsetSynthVolume();\n}\n\nfunction onToggleZoom(): void {\n\tzoomEnabled = !zoomEnabled;\n\trenderZoomIcon();\n\trenderTimeline();\n}\n\nfunction onTimelineMouseDown(event: MouseEvent): void {\n\tdraggingPlayhead = true;\n\tonTimelineMouseMove(event);\n}\n\nfunction onTimelineMouseMove(event: MouseEvent): void {\n\tif (!draggingPlayhead) return;\n\tevent.preventDefault();\n\tonTimelineCursorMove(event.clientX || event.pageX);\n}\n\nfunction onTimelineTouchDown(event: TouchEvent): void {\n\tdraggingPlayhead = true;\n\tonTimelineTouchMove(event);\n}\n\nfunction onTimelineTouchMove(event: TouchEvent): void {\n\tonTimelineCursorMove(event.touches[0].clientX);\n}\n\nfunction onTimelineCursorMove(mouseX: number): void {\n\tif (draggingPlayhead && synth.song != null) {\n\t\tconst boundingRect = visualizationContainer.getBoundingClientRect();\n\t\tsynth.playhead = synth.song.barCount * (mouseX - boundingRect.left) / (boundingRect.right - boundingRect.left);\n\t\tsynth.computeLatestModValues();\n\t\trenderPlayhead();\n\t}\n}\n\nfunction onTimelineCursorUp(): void {\n\tdraggingPlayhead = false;\n}\n\nfunction setSynthVolume(): void {\n\tconst volume = +volumeSlider.value;\n\tsynth.volume = Math.min(1.0, Math.pow(volume / 50.0, 0.5)) * Math.pow(2.0, (volume - 75.0) / 25.0);\n}\n\nfunction renderPlayhead(): void {\n\tif (synth.song != null) {\n\t\tlet pos = synth.playhead / synth.song.barCount;\n\t\tplayhead.style.left = (timelineWidth * pos) + \"px\";\n\t\t\t\n\t\tconst boundingRect = visualizationContainer.getBoundingClientRect();\n\t\tvisualizationContainer.scrollLeft = pos * (timelineWidth - boundingRect.width);\n\n\t\tif (notesFlashWhenPlayed) {\n\t\t\tconst playheadBar = Math.floor(synth.playhead);\n\t\t\tconst modPlayhead = synth.playhead - playheadBar;\n\t\t\tconst partsPerBar = synth.song.beatsPerBar * Config.partsPerBeat;\n\t\t\tconst noteFlashElementsForThisBar: SVGPathElement[] = noteFlashElementsPerBar[playheadBar];\n\n\t\t\tif (noteFlashElementsForThisBar != null && playheadBar !== currentNoteFlashBar) {\n\t\t\t\tfor (var i = currentNoteFlashElements.length - 1; i >= 0; i--) {\n\t\t\t\t\tvar element = currentNoteFlashElements[i];\n\t\t\t\t\tconst outsideOfCurrentBar = Number(element.getAttribute(\"note-bar\")) !== playheadBar;\n\t\t\t\t\tconst isInvisible = element.style.opacity === \"0\";\n\t\t\t\t\tif (outsideOfCurrentBar && isInvisible) {\n\t\t\t\t\t\tremoveFromUnorderedArray(currentNoteFlashElements, i);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfor (var i = 0; i < noteFlashElementsForThisBar.length; i++) {\n\t\t\t\t\tvar element = noteFlashElementsForThisBar[i];\n\t\t\t\t\tcurrentNoteFlashElements.push(element);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (currentNoteFlashElements != null) {\n\t\t\t\tfor (var i = 0; i < currentNoteFlashElements.length; i++) {\n\t\t\t\t\tvar element = currentNoteFlashElements[i];\n\t\t\t\t\tconst noteStart = Number(element.getAttribute(\"note-start\")) / partsPerBar;\n\t\t\t\t\tconst noteEnd = Number(element.getAttribute(\"note-end\")) / partsPerBar;\n\t\t\t\t\tconst noteBar = Number(element.getAttribute(\"note-bar\"));\n\t\t\t\t\tif ((modPlayhead >= noteStart) && (noteBar == playheadBar)) {\n\t\t\t\t\t\tconst dist = noteEnd - noteStart;\n\t\t\t\t\t\telement.style.opacity = String((1 - (((modPlayhead - noteStart) - (dist / 2)) / (dist / 2))));\n\t\t\t\t\t} else {\n\t\t\t\t\t\telement.style.opacity = \"0\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tcurrentNoteFlashBar = playheadBar;\n\t\t}\n\t}\n}\n\nfunction renderTimeline(): void {\n\ttimeline.innerHTML = \"\";\n\tif (synth.song == null) return;\n\t\t\n\tconst boundingRect = visualizationContainer.getBoundingClientRect();\n\t\t\n\tlet timelineHeight: number;\n\tlet windowOctaves: number;\n\tlet windowPitchCount: number;\n\t\t\n\tif (zoomEnabled) {\n\t\ttimelineHeight = boundingRect.height;\n\t\twindowOctaves = Math.max(1, Math.min(Config.pitchOctaves, Math.round(timelineHeight / (12 * 2))));\n\t\twindowPitchCount = windowOctaves * 12 + 1;\n\t\tconst semitoneHeight = (timelineHeight - 1) / windowPitchCount;\n\t\tconst targetBeatWidth = Math.max(8, semitoneHeight * 4);\n\t\ttimelineWidth = Math.max(boundingRect.width, targetBeatWidth * synth.song.barCount * synth.song.beatsPerBar);\n\t} else {\n\t\ttimelineWidth = boundingRect.width;\n\t\tconst targetSemitoneHeight = Math.max(1, timelineWidth / (synth.song.barCount * synth.song.beatsPerBar) / 6.0);\n\t\ttimelineHeight = Math.min(boundingRect.height, targetSemitoneHeight * (Config.maxPitch + 1) + 1);\n\t\twindowOctaves = Math.max(3, Math.min(Config.pitchOctaves, Math.round(timelineHeight / (12 * targetSemitoneHeight))));\n\t\twindowPitchCount = windowOctaves * 12 + 1;\n\t}\n\t\t\n\ttimelineContainer.style.width = timelineWidth + \"px\";\n\ttimelineContainer.style.height = timelineHeight + \"px\";\n\ttimeline.style.width = timelineWidth + \"px\";\n\ttimeline.style.height = timelineHeight + \"px\";\n\t\t\n\tconst barWidth = timelineWidth / synth.song.barCount;\n\tconst partWidth = barWidth / (synth.song.beatsPerBar * Config.partsPerBeat);\n\n\t\tconst wavePitchHeight = (timelineHeight-1) / windowPitchCount;\n\t\tconst drumPitchHeight =  (timelineHeight-1) / Config.drumCount;\n\t\t\n\tfor (let bar = 0; bar < synth.song.barCount + 1; bar++) {\n\t\tconst color = (bar == synth.song.loopStart || bar == synth.song.loopStart + synth.song.loopLength) ? ColorConfig.loopAccent : ColorConfig.uiWidgetBackground;\n\t\t\ttimeline.appendChild(rect({x: bar * barWidth - 1, y: 0, width: 2, height: timelineHeight, fill: color}));\n\t}\n\t\t\n\tfor (let octave = 0; octave <= windowOctaves; octave++) {\n\t\t\ttimeline.appendChild(rect({x: 0, y: octave * 12 * wavePitchHeight, width: timelineWidth, height: wavePitchHeight + 1, fill: ColorConfig.tonic, opacity: 0.75}));\n\t}\n\n\t// note flash colors\n\tlet noteFlashColor = \"#ffffff\";\n\tlet noteFlashColorSecondary = \"#ffffff77\";\n\tif (notesFlashWhenPlayed) {\n\t\tnoteFlashColor = \"var(--note-flash)\";\n\t\tnoteFlashColorSecondary = \"var(--note-flash-secondary)\";\n\t}\n\n\tif (notesFlashWhenPlayed) {\n\t\tnoteFlashElementsPerBar = [];\n\t\tfor (let bar = 0; bar < synth.song.barCount; bar++) {\n\t\t\tnoteFlashElementsPerBar.push([]);\n\t\t}\n\t\tcurrentNoteFlashBar = -1;\n\t}\n\n\tfor (let channel = synth.song.channels.length - 1 - synth.song.modChannelCount; channel >= 0; channel--) {\n\n\t\tconst isNoise = synth.song.getChannelIsNoise(channel);\n\t\tconst pitchHeight = isNoise ? drumPitchHeight : wavePitchHeight;\n\t\t\t\n\t\tconst configuredOctaveScroll = synth.song.channels[channel].octave;\n\t\tconst newOctaveScroll = Math.max(0, Math.min(Config.pitchOctaves - windowOctaves, Math.ceil(configuredOctaveScroll - windowOctaves * 0.5)));\n\t\t\t\n\t\tconst offsetY = newOctaveScroll * pitchHeight * 12 + timelineHeight - pitchHeight * 0.5 - 0.5;\n\t\t\t\n\t\tfor (let bar = 0; bar < synth.song.barCount; bar++) {\n\t\t\tconst pattern: Pattern | null = synth.song.getPattern(channel, bar);\n\t\t\tif (pattern == null) continue;\n\t\t\tconst offsetX = bar * barWidth;\n\t\t\t\t\n\t\t\tfor (let i = 0; i < pattern.notes.length; i++) {\n\t\t\t\tconst note = pattern.notes[i];\n\t\t\t\t\t\n\t\t\t\tfor (const pitch of note.pitches) {\n\t\t\t\t\tconst d = drawNote(pitch, note.start, note.pins, (pitchHeight + 1) / 2, offsetX, offsetY, partWidth, pitchHeight);\n\t\t\t\t\t\tconst noteElement = path({d: d, fill: ColorConfig.getChannelColor(synth.song, synth.song.channels[channel].color, channel, fixChannelColorOrder).primaryChannel});\n\t\t\t\t\tif (isNoise) noteElement.style.opacity = String(0.6);\n\t\t\t\t\ttimeline.appendChild(noteElement);\n\n\t\t\t\t\tif (notesFlashWhenPlayed) {\n\t\t\t\t\t\tconst dflash = drawNote(pitch, note.start, note.pins, (pitchHeight + 1) / 2, offsetX, offsetY, partWidth, pitchHeight);\n\t\t\t\t\t\t// const noteFlashColorSecondary = ColorConfig.getComputed(\"--note-flash-secondary\") !== \"\" ? \"var(--note-flash-secondary)\" : \"#ffffff77\";\n\t\t\t\t\t\t// const noteFlashColor = ColorConfig.getComputed(\"--note-flash\") !== \"\" ? \"var(--note-flash)\" : \"#ffffff77\";\n\t\t\t\t\t\tconst noteFlashElement = path({d: dflash, fill: (isNoise ? noteFlashColorSecondary : noteFlashColor)});\n\t\t\t\t\t\tnoteFlashElement.style.opacity = \"0\";\n\t\t\t\t\t\tnoteFlashElement.setAttribute('note-start', String(note.start));\n\t\t\t\t\t\tnoteFlashElement.setAttribute('note-end', String(\n\t\t\t\t\t\t\tnote.end\n\t\t\t\t\t\t\t));\n\t\t\t\t\t\tnoteFlashElement.setAttribute('note-bar', String(bar));\n\t\t\t\t\t\ttimeline.appendChild(noteFlashElement);\n\t\t\t\t\t\tconst noteFlashElementsForThisBar: SVGPathElement[] = noteFlashElementsPerBar[bar];\n\t\t\t\t\t\tnoteFlashElementsForThisBar.push(noteFlashElement);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t\t\n\trenderPlayhead();\n}\n\nfunction drawNote(pitch: number, start: number, pins: NotePin[], radius: number, offsetX: number, offsetY: number, partWidth: number, pitchHeight: number): string {\n\tlet d = `M ${offsetX + partWidth * (start + pins[0].time)} ${offsetY - pitch * pitchHeight + radius * (pins[0].size / Config.noteSizeMax)} `; \n\tfor (let i = 0; i < pins.length; i++) {\n\t\tconst pin = pins[i];\n\t\t\tconst x = offsetX + partWidth * (start + pin.time);\n\t\tconst y = offsetY - pitchHeight * (pitch + pin.interval);\n\t\tconst expression = pin.size / Config.noteSizeMax;\n\t\td += `L ${x} ${y - radius * expression} `;\n\t}\n\tfor (let i = pins.length - 1; i >= 0; i--) {\n\t\tconst pin = pins[i];\n\t\t\tconst x = offsetX + partWidth * (start + pin.time);\n\t\tconst y = offsetY - pitchHeight * (pitch + pin.interval);\n\t\tconst expression = pin.size / Config.noteSizeMax;\n\t\td += `L ${x} ${y + radius * expression} `;\n\t}\n\treturn d;\n}\n\nfunction renderPlayButton(): void {\n\tif (synth.playing) {\n\t\tplayButton.classList.remove(\"playButton\");\n\t\tplayButton.classList.add(\"pauseButton\");\n\t\tplayButton.title = \"Pause (Space)\";\n\t\tplayButton.textContent = \"Pause\";\n\t} else {\n\t\tplayButton.classList.remove(\"pauseButton\");\n\t\tplayButton.classList.add(\"playButton\");\n\t\tplayButton.title = \"Play (Space)\";\n\t\tplayButton.textContent = \"Play\";\n\t}\n\tpauseButtonDisplayed = synth.playing;\n}\n\nfunction renderLoopIcon(): void {\n\tloopIcon.setAttribute(\"fill\", (synth.loopRepeatCount == -1) ? ColorConfig.linkAccent : ColorConfig.uiWidgetBackground);\n}\n\nfunction renderZoomIcon(): void {\n\tzoomIcon.style.color = zoomEnabled ? ColorConfig.linkAccent : ColorConfig.uiWidgetBackground;\n}\n\nfunction onKeyPressed(event: KeyboardEvent): void {\n\tswitch (event.keyCode) {\n\t\tcase 70: // first bar\n\t\t\tsynth.playhead = 0;\n\t\t\tsynth.computeLatestModValues();\n\t\t\trenderPlayhead();\n\t\t\tevent.preventDefault();\n\t\t\tbreak;\n\t\tcase 32: // space\n\t\t\tonTogglePlay();\n\t\t\tsynth.computeLatestModValues();\n\t\t\tevent.preventDefault();\n\t\t\tbreak;\n\t\tcase 219: // left brace\n\t\t\tsynth.goToPrevBar();\n\t\t\tsynth.computeLatestModValues();\n\t\t\trenderPlayhead();\n\t\t\tevent.preventDefault();\n\t\t\tbreak;\n\t\tcase 221: // right brace\n\t\t\tsynth.goToNextBar();\n\t\t\tsynth.computeLatestModValues();\n\t\t\trenderPlayhead();\n\t\t\tevent.preventDefault();\n\t\t\tbreak;\n\t\tcase 69: // e\n\t\tcase 80: // p\n\t\t\tif (event.shiftKey) {\n\t\t\t\thashUpdatedExternally();\n\t\t\t\tlocation.href =\"../\" + (OFFLINE ? \"index.html\" : \"\") + \"#\" + synth.song!.toBase64String();\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 90: // z\n\t\tcase 187: // +\n\t\tcase 61: // Firefox +\n\t\tcase 171: // Some users have this as +? Hmm.\n\t\tcase 189: // -\n\t\tcase 173: // Firefox -\n\t\t\tonToggleZoom();\n\t\t\tbreak;\n\t\tcase 76: // l\n\t\t\tonToggleLoop();\n\t\t\tbreak;\n\t\tcase 83: // s\n\t\t\tif (event.ctrlKey) {\n\t\t\t\tshortenUrl();\n\t\t\t\tevent.preventDefault();\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 67: // c\n\t\t\tonCopyClicked();\n\t\t\tbreak;\n\t}\n}\n\nfunction shortenUrl() {\n\thashUpdatedExternally();\n\tlet shortenerStrategy = \"https://tinyurl.com/api-create.php?url=\";\n\tconst localShortenerStrategy: string | null = nsLocalStorage_get(\"shortenerStrategySelect\");\n\n\t// if (localShortenerStrategy == \"beepboxnet\") shortenerStrategy = \"https://www.beepbox.net/api-create.php?url=\";\n\tif (localShortenerStrategy == \"isgd\") shortenerStrategy = \"https://is.gd/create.php?format=simple&url=\";\n\n\twindow.open(shortenerStrategy + encodeURIComponent(new URL(\"#\" + synth.song!.toBase64String(), location.href).href));\n}\n\nfunction onCopyClicked(): void {\n\t// Set as any to allow compilation without clipboard types (since, uh, I didn't write this bit and don't know the proper types library) -jummbus\n\t// let nav: any;\n\t// nav = navigator;\n    // the typescript libraries have navigator.clipboard now lets goooooooooo -dragoncoder047\n\n\tif (navigator.clipboard && navigator.clipboard.writeText) {\n\t\tnavigator.clipboard.writeText(location.href).catch(() => {\n\t\t\twindow.prompt(\"Copy to clipboard:\", location.href);\n\t\t});\n\t\treturn;\n\t}\n\tconst textField = document.createElement(\"textarea\");\n\ttextField.textContent = location.href;\n\tdocument.body.appendChild(textField);\n\ttextField.select();\n\tconst succeeded = document.execCommand(\"copy\");\n\ttextField.remove();\n\tif (!succeeded) window.prompt(\"Copy this:\", location.href);\n}\n\nfunction onShareClicked(): void {\n\t(<any>navigator).share({ url: location.href });\n}\n\n\tif ( top !== self ) {\n\t// In an iframe.\n\tcopyLink.style.display = \"none\";\n\tshareLink.style.display = \"none\";\n} else {\n\t// Fullscreen.\n\tfullscreenLink.style.display = \"none\";\n\tif (!(\"share\" in navigator)) shareLink.style.display = \"none\";\n}\n\nif (getLocalStorage(\"volume\") != null) {\n\tvolumeSlider.value = getLocalStorage(\"volume\")!;\n}\nsetSynthVolume();\n\nwindow.addEventListener(\"resize\", onWindowResize);\nwindow.addEventListener(\"keydown\", onKeyPressed);\n\ntimeline.addEventListener(\"mousedown\", onTimelineMouseDown);\nwindow.addEventListener(\"mousemove\", onTimelineMouseMove);\nwindow.addEventListener(\"mouseup\", onTimelineCursorUp);\ntimeline.addEventListener(\"touchstart\", onTimelineTouchDown);\ntimeline.addEventListener(\"touchmove\", onTimelineTouchMove);\ntimeline.addEventListener(\"touchend\", onTimelineCursorUp);\ntimeline.addEventListener(\"touchcancel\", onTimelineCursorUp);\n\nplayButton.addEventListener(\"click\", onTogglePlay);\nloopButton.addEventListener(\"click\", onToggleLoop);\nvolumeSlider.addEventListener(\"input\", onVolumeChange);\nzoomButton.addEventListener(\"click\", onToggleZoom);\ncopyLink.addEventListener(\"click\", onCopyClicked);\nshareLink.addEventListener(\"click\", onShareClicked);\nwindow.addEventListener(\"hashchange\", hashUpdatedExternally);\n\nhashUpdatedExternally();\nrenderLoopIcon();\nrenderZoomIcon();\nrenderPlayButton();\n\n// When compiling synth.ts as a standalone module named \"beepbox\", expose these classes as members to JavaScript:\n\texport { Channel, Chord, Config, Dictionary, DictionaryArray, Envelope, EnvelopeType, Instrument, InstrumentType, Note, NotePin, Pattern, Synth, Transition };\n\n", "// Copyright (C) John Nesky, distributed under the MIT license.\n\nexport function applyElementArgs<T extends HTMLElement | SVGElement | DocumentFragment>(element: T, args: Array<any>): T {\n\tfor (const arg of args) {\n\t\tif (arg instanceof Node) {\n\t\t\telement.appendChild(arg);\n\t\t} else if (typeof arg === \"string\") {\n\t\t\telement.appendChild(document.createTextNode(arg));\n\t\t} else if (typeof arg === \"function\") {\n\t\t\tapplyElementArgs(element, [arg()]);\n\t\t} else if (Array.isArray(arg)) {\n\t\t\tapplyElementArgs(element, arg);\n\t\t} else if (arg && typeof Symbol !== \"undefined\" && typeof arg[Symbol.iterator] === \"function\") {\n\t\t\tapplyElementArgs(element, [...arg]);\n\t\t} else if (arg && arg.constructor === Object && element instanceof Element) {\n\t\t\t// If the argument is a literal {} Object\n\t\t\tfor (const key of Object.keys(arg)) {\n\t\t\t\tconst value = arg[key];\n\t\t\t\t/*if (key === \"classList\") {\n\t\t\t\t\tif (typeof value === \"string\") {\n\t\t\t\t\t\telement.classList.add(...value.split(\" \"));\n\t\t\t\t\t} else if (Array.isArray(arg) || (value && typeof Symbol !== \"undefined\" && typeof value[Symbol.iterator] === \"function\")) {\n\t\t\t\t\t\telement.classList.add(...value);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn(\"Invalid classList value \\\"\" + value + \"\\\" on \" + element.tagName + \" element.\");\n\t\t\t\t\t}\n\t\t\t\t} else*/ if (key === \"class\" /* || key === \"className\" */) {\n\t\t\t\t\tif (typeof value === \"string\") {\n\t\t\t\t\t\telement.setAttribute(\"class\", value);\n\t\t\t\t\t} else if (Array.isArray(arg) || (value && typeof Symbol !== \"undefined\" && typeof value[Symbol.iterator] === \"function\")) {\n\t\t\t\t\t\telement.setAttribute(\"class\", [...value].join(\" \"));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconsole.warn(\"Invalid \" + key + \" value \\\"\" + value + \"\\\" on \" + element.tagName + \" element.\");\n\t\t\t\t\t}\n\t\t\t\t} else if (key === \"style\") {\n\t\t\t\t\tif (value && value.constructor === Object) {\n\t\t\t\t\t\tfor (const styleKey of Object.keys(value)) {\n\t\t\t\t\t\t\tif (styleKey in (<HTMLElement | SVGElement>element).style) {\n\t\t\t\t\t\t\t\t// In practice, camelCase and kebab-case properties both work as properties on CSSStyleDeclaration objects.\n\t\t\t\t\t\t\t\t(<any> element).style[styleKey] = value[styleKey];\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// CSS variables start with -- and must be set with setProperty.\n\t\t\t\t\t\t\t\t(<HTMLElement | SVGElement>element).style.setProperty(styleKey, value[styleKey]);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\telement.setAttribute(key, value);\n\t\t\t\t\t}\n\t\t\t\t} else if (typeof(value) === \"function\") {\n\t\t\t\t\t// If value is a callback, set as a property instead trying to coerce to string.\n\t\t\t\t\t(<any>element)[key] = value;\n\t\t\t\t} else if (typeof(value) === \"boolean\") {\n\t\t\t\t\t// If value is boolean, set attribute if true, remove if false.\n\t\t\t\t\tif (value) element.setAttribute(key, \"\");\n\t\t\t\t\telse element.removeAttribute(key);\n\t\t\t\t} else {\n\t\t\t\t\t// Default to setting attribute, as if writing html directly.\n\t\t\t\t\telement.setAttribute(key, value);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\t// Just convert unrecognized objects to text and append them.\n\t\t\telement.appendChild(document.createTextNode(arg));\n\t\t}\n\t}\n\treturn element;\n}\n\nexport const svgNS: string = \"http://www.w3.org/2000/svg\";\n\nexport function parseHTML(...args: Array<any>): DocumentFragment {\n\treturn document.createRange().createContextualFragment(args.join());\n}\n\n//let svgParser: SVGSVGElement | null = null;\nexport function parseSVG(...args: Array<any>): DocumentFragment {\n\tconst fragment: DocumentFragment = document.createDocumentFragment();\n\t\n\t// Internet Explorer doesn't support the first method here, so I commented it out and used a slightly more complex one involving DOMParser below.\n\t/*\n\tif (svgParser === null) svgParser = <SVGSVGElement>document.createElementNS(svgNS, \"svg\");\n\tsvgParser.innerHTML = args.join();\n\twhile (svgParser.firstChild !== null) fragment.appendChild(svgParser.firstChild);\n\t*/\n\tconst svgParser: Element = new DOMParser().parseFromString(\"<svg xmlns=\\\"http://www.w3.org/2000/svg\\\">\" + args.join() + \"</svg>\", \"image/svg+xml\").documentElement;\n\twhile (svgParser.firstChild !== null) {\n\t\tdocument.importNode(svgParser.firstChild, true);\n\t\tfragment.appendChild(svgParser.firstChild);\n\t}\n\t\n\treturn fragment;\n}\n\nexport function replaceScriptWith(...args: Array<any>): void {\n\tlet currentScript: HTMLScriptElement | SVGScriptElement | null = document.currentScript;\n\tif (currentScript == null) { // double-equals to intentionally include undefined in Internet Explorer.\n\t\t\n\t\t// Internet Explorer doens't support currentScript, try this method instead:\n\t\tif (document.readyState === \"loading\") {\n\t\t\tconst scripts: HTMLCollectionOf<HTMLScriptElement> = document.getElementsByTagName(\"script\");\n\t\t\tcurrentScript = scripts[scripts.length - 1];\n\t\t}\n\t\t\n\t\tif (currentScript == null) {\n\t\t\tconsole.warn(\"Couldn't replace script because no script is currently being parsed and executed, maybe this is happening in a callback function or event handler instead?\");\n\t\t\treturn;\n\t\t}\n\t}\n\tif (currentScript.parentNode === null) {\n\t\tconsole.warn(\"Couldn't replace script element because it is not attached to a parent anymore, did you try to replace the same script more than once?\");\n\t\treturn;\n\t}\n\tcurrentScript.parentNode.replaceChild(applyElementArgs(document.createDocumentFragment(), args), currentScript);\n}\n\nexport function applyToElement<T extends HTMLElement | SVGElement | DocumentFragment>(element: T, ...args: Array<any>): T {\n\tif (!(element instanceof Element || element instanceof DocumentFragment)) {\n\t\tconsole.warn(\"Couldn't apply to provided argument because it's not an element or DocumentFragment.\");\n\t\treturn element;\n\t}\n\treturn applyElementArgs(element, args);\n}\n", "// Copyright (C) John Nesky, distributed under the MIT license.\n\nimport {applyElementArgs, svgNS, parseHTML, parseSVG, replaceScriptWith, applyToElement} from \"./elements-base.js\";\nexport {replaceScriptWith, applyToElement};\n\ninterface HTMLElementFactory {\n\t(...args: Array<string>): DocumentFragment;\n\t//readonly [key: string]: (...args: Array<any>) => HTMLElement;\n\ta(...args: Array<any>): HTMLAnchorElement;\n\tabbr(...args: Array<any>): HTMLElement;\n\taddress(...args: Array<any>): HTMLElement;\n\tarea(...args: Array<any>): HTMLAreaElement;\n\tarticle(...args: Array<any>): HTMLElement;\n\taside(...args: Array<any>): HTMLElement;\n\taudio(...args: Array<any>): HTMLAudioElement;\n\tb(...args: Array<any>): HTMLElement;\n\tbase(...args: Array<any>): HTMLBaseElement;\n\tbdi(...args: Array<any>): HTMLElement;\n\tbdo(...args: Array<any>): HTMLElement;\n\tblockquote(...args: Array<any>): HTMLQuoteElement;\n\tbr(...args: Array<any>): HTMLBRElement;\n\tbutton(...args: Array<any>): HTMLButtonElement;\n\tcanvas(...args: Array<any>): HTMLCanvasElement;\n\tcaption(...args: Array<any>): HTMLTableCaptionElement;\n\tcite(...args: Array<any>): HTMLElement;\n\tcode(...args: Array<any>): HTMLElement;\n\tcol(...args: Array<any>): HTMLTableColElement;\n\tcolgroup(...args: Array<any>): HTMLTableColElement;\n\tdatalist(...args: Array<any>): HTMLDataListElement;\n\tdd(...args: Array<any>): HTMLElement;\n\tdel(...args: Array<any>): HTMLModElement;\n\tdetails(...args: Array<any>): HTMLDetailsElement;\n\tdfn(...args: Array<any>): HTMLElement;\n\tdialog(...args: Array<any>): HTMLDialogElement;\n\tdiv(...args: Array<any>): HTMLDivElement;\n\tdl(...args: Array<any>): HTMLDListElement;\n\tdt(...args: Array<any>): HTMLElement;\n\tem(...args: Array<any>): HTMLElement;\n\tembed(...args: Array<any>): HTMLEmbedElement;\n\tfieldset(...args: Array<any>): HTMLFieldSetElement;\n\tfigcaption(...args: Array<any>): HTMLElement;\n\tfigure(...args: Array<any>): HTMLElement;\n\tfooter(...args: Array<any>): HTMLElement;\n\tform(...args: Array<any>): HTMLFormElement;\n\th1(...args: Array<any>): HTMLHeadingElement;\n\th2(...args: Array<any>): HTMLHeadingElement;\n\th3(...args: Array<any>): HTMLHeadingElement;\n\th4(...args: Array<any>): HTMLHeadingElement;\n\th5(...args: Array<any>): HTMLHeadingElement;\n\th6(...args: Array<any>): HTMLHeadingElement;\n\theader(...args: Array<any>): HTMLElement;\n\thr(...args: Array<any>): HTMLHRElement;\n\ti(...args: Array<any>): HTMLElement;\n\tiframe(...args: Array<any>): HTMLIFrameElement;\n\timg(...args: Array<any>): HTMLImageElement;\n\tinput(...args: Array<any>): HTMLInputElement;\n\tins(...args: Array<any>): HTMLModElement;\n\tkbd(...args: Array<any>): HTMLElement;\n\tlabel(...args: Array<any>): HTMLLabelElement;\n\tlegend(...args: Array<any>): HTMLLegendElement;\n\tli(...args: Array<any>): HTMLLIElement;\n\tlink(...args: Array<any>): HTMLLinkElement;\n\tmain(...args: Array<any>): HTMLElement;\n\tmap(...args: Array<any>): HTMLMapElement;\n\tmark(...args: Array<any>): HTMLElement;\n\tmenu(...args: Array<any>): HTMLMenuElement;\n\tmenuitem(...args: Array<any>): HTMLUnknownElement;\n\tmeta(...args: Array<any>): HTMLMetaElement;\n\tmeter(...args: Array<any>): HTMLMeterElement;\n\tnav(...args: Array<any>): HTMLElement;\n\tnoscript(...args: Array<any>): HTMLElement;\n\tobject(...args: Array<any>): HTMLObjectElement;\n\tol(...args: Array<any>): HTMLOListElement;\n\toptgroup(...args: Array<any>): HTMLOptGroupElement;\n\toption(...args: Array<any>): HTMLOptionElement;\n\toutput(...args: Array<any>): HTMLOutputElement;\n\tp(...args: Array<any>): HTMLParagraphElement;\n\tparam(...args: Array<any>): HTMLParamElement;\n\tpicture(...args: Array<any>): HTMLPictureElement;\n\tpre(...args: Array<any>): HTMLPreElement;\n\tprogress(...args: Array<any>): HTMLProgressElement;\n\tq(...args: Array<any>): HTMLQuoteElement;\n\trp(...args: Array<any>): HTMLElement;\n\trt(...args: Array<any>): HTMLElement;\n\truby(...args: Array<any>): HTMLElement;\n\ts(...args: Array<any>): HTMLElement;\n\tsamp(...args: Array<any>): HTMLElement;\n\tscript(...args: Array<any>): HTMLScriptElement;\n\tsection(...args: Array<any>): HTMLElement;\n\tselect(...args: Array<any>): HTMLSelectElement;\n\tsmall(...args: Array<any>): HTMLElement;\n\tsource(...args: Array<any>): HTMLSourceElement;\n\tspan(...args: Array<any>): HTMLSpanElement;\n\tstrong(...args: Array<any>): HTMLElement;\n\tstyle(...args: Array<any>): HTMLStyleElement;\n\tsub(...args: Array<any>): HTMLElement;\n\tsummary(...args: Array<any>): HTMLElement;\n\tsup(...args: Array<any>): HTMLElement;\n\ttable(...args: Array<any>): HTMLTableElement;\n\ttbody(...args: Array<any>): HTMLTableSectionElement;\n\ttd(...args: Array<any>): HTMLTableCellElement;\n\ttemplate(...args: Array<any>): HTMLTemplateElement;\n\ttextarea(...args: Array<any>): HTMLTextAreaElement;\n\ttfoot(...args: Array<any>): HTMLTableSectionElement;\n\tth(...args: Array<any>): HTMLTableCellElement;\n\tthead(...args: Array<any>): HTMLTableSectionElement;\n\ttime(...args: Array<any>): HTMLTimeElement;\n\ttitle(...args: Array<any>): HTMLTitleElement;\n\ttr(...args: Array<any>): HTMLTableRowElement;\n\ttrack(...args: Array<any>): HTMLTrackElement;\n\tu(...args: Array<any>): HTMLElement;\n\tul(...args: Array<any>): HTMLUListElement;\n\tvar(...args: Array<any>): HTMLElement;\n\tvideo(...args: Array<any>): HTMLVideoElement;\n\twbr(...args: Array<any>): HTMLElement;\n}\n\ninterface SVGElementFactory {\n\t(...args: Array<string>): DocumentFragment;\n\t//readonly [key: string]: (...args: Array<any>) => SVGElement;\n\ta(...args: Array<any>): SVGAElement;\n\taltGlyph(...args: Array<any>): SVGElement;\n\taltGlyphDef(...args: Array<any>): SVGElement;\n\taltGlyphItem(...args: Array<any>): SVGElement;\n\tanimate(...args: Array<any>): SVGAnimateElement;\n\tanimateMotion(...args: Array<any>): SVGAnimateMotionElement;\n\tanimateTransform(...args: Array<any>): SVGAnimateTransformElement;\n\tcircle(...args: Array<any>): SVGCircleElement;\n\tclipPath(...args: Array<any>): SVGClipPathElement;\n\t\"color-profile\"(...args: Array<any>): SVGElement;\n\tcolor_profile(...args: Array<any>): SVGElement;\n\tcursor(...args: Array<any>): SVGElement;\n\tdefs(...args: Array<any>): SVGDefsElement;\n\tdesc(...args: Array<any>): SVGDescElement;\n\tdiscard(...args: Array<any>): SVGElement;\n\tellipse(...args: Array<any>): SVGEllipseElement;\n\tfeBlend(...args: Array<any>): SVGFEBlendElement;\n\tfeColorMatrix(...args: Array<any>): SVGFEColorMatrixElement;\n\tfeComponentTransfer(...args: Array<any>): SVGFEComponentTransferElement;\n\tfeComposite(...args: Array<any>): SVGFECompositeElement;\n\tfeConvolveMatrix(...args: Array<any>): SVGFEConvolveMatrixElement;\n\tfeDiffuseLighting(...args: Array<any>): SVGFEDiffuseLightingElement;\n\tfeDisplacementMap(...args: Array<any>): SVGFEDisplacementMapElement;\n\tfeDistantLight(...args: Array<any>): SVGFEDistantLightElement;\n\tfeDropShadow(...args: Array<any>): SVGElement;\n\tfeFlood(...args: Array<any>): SVGFEFloodElement;\n\tfeFuncA(...args: Array<any>): SVGFEFuncAElement;\n\tfeFuncB(...args: Array<any>): SVGFEFuncBElement;\n\tfeFuncG(...args: Array<any>): SVGFEFuncGElement;\n\tfeFuncR(...args: Array<any>): SVGFEFuncRElement;\n\tfeGaussianBlur(...args: Array<any>): SVGFEGaussianBlurElement;\n\tfeImage(...args: Array<any>): SVGFEImageElement;\n\tfeMerge(...args: Array<any>): SVGFEMergeElement;\n\tfeMergeNode(...args: Array<any>): SVGFEMergeNodeElement;\n\tfeMorphology(...args: Array<any>): SVGFEMorphologyElement;\n\tfeOffset(...args: Array<any>): SVGFEOffsetElement;\n\tfePointLight(...args: Array<any>): SVGFEPointLightElement;\n\tfeSpecularLighting(...args: Array<any>): SVGFESpecularLightingElement;\n\tfeSpotLight(...args: Array<any>): SVGFESpotLightElement;\n\tfeTile(...args: Array<any>): SVGFETileElement;\n\tfeTurbulence(...args: Array<any>): SVGFETurbulenceElement;\n\tfilter(...args: Array<any>): SVGFilterElement;\n\tfont(...args: Array<any>): SVGElement;\n\t\"font-face\"(...args: Array<any>): SVGElement;\n\tfont_face(...args: Array<any>): SVGElement;\n\t\"font-face-format\"(...args: Array<any>): SVGElement;\n\tfont_face_format(...args: Array<any>): SVGElement;\n\t\"font-face-name\"(...args: Array<any>): SVGElement;\n\tfont_face_name(...args: Array<any>): SVGElement;\n\t\"font-face-src\"(...args: Array<any>): SVGElement;\n\tfont_face_src(...args: Array<any>): SVGElement;\n\t\"font-face-uri\"(...args: Array<any>): SVGElement;\n\tfont_face_uri(...args: Array<any>): SVGElement;\n\tforeignObject(...args: Array<any>): SVGForeignObjectElement;\n\tg(...args: Array<any>): SVGGElement;\n\tglyph(...args: Array<any>): SVGElement;\n\tglyphRef(...args: Array<any>): SVGElement;\n\thkern(...args: Array<any>): SVGElement;\n\timage(...args: Array<any>): SVGImageElement;\n\tline(...args: Array<any>): SVGLineElement;\n\tlinearGradient(...args: Array<any>): SVGLinearGradientElement;\n\tmarker(...args: Array<any>): SVGMarkerElement;\n\tmask(...args: Array<any>): SVGMaskElement;\n\tmetadata(...args: Array<any>): SVGMetadataElement;\n\t\"missing-glyph\"(...args: Array<any>): SVGElement;\n\tmissing_glyph(...args: Array<any>): SVGElement;\n\tmpath(...args: Array<any>): SVGElement;\n\tpath(...args: Array<any>): SVGPathElement;\n\tpattern(...args: Array<any>): SVGPatternElement;\n\tpolygon(...args: Array<any>): SVGPolygonElement;\n\tpolyline(...args: Array<any>): SVGPolylineElement;\n\tradialGradient(...args: Array<any>): SVGRadialGradientElement;\n\trect(...args: Array<any>): SVGRectElement;\n\tscript(...args: Array<any>): SVGScriptElement;\n\tset(...args: Array<any>): SVGElement;\n\tstop(...args: Array<any>): SVGStopElement;\n\tstyle(...args: Array<any>): SVGStyleElement;\n\tsvg(...args: Array<any>): SVGSVGElement;\n\tswitch(...args: Array<any>): SVGSwitchElement;\n\tsymbol(...args: Array<any>): SVGSymbolElement;\n\ttext(...args: Array<any>): SVGTextElement;\n\ttextPath(...args: Array<any>): SVGTextPathElement;\n\ttitle(...args: Array<any>): SVGTitleElement;\n\ttref(...args: Array<any>): SVGElement;\n\ttspan(...args: Array<any>): SVGTSpanElement;\n\tuse(...args: Array<any>): SVGUseElement;\n\tview(...args: Array<any>): SVGViewElement;\n\tvkern(...args: Array<any>): SVGElement;\n}\n\nexport const HTML: HTMLElementFactory = <HTMLElementFactory> <unknown> parseHTML;\nexport const SVG: SVGElementFactory = <SVGElementFactory> <unknown> parseSVG;\n\nfor (const name of \"a abbr address area article aside audio b base bdi bdo blockquote br button canvas caption cite code col colgroup datalist dd del details dfn dialog div dl dt em embed fieldset figcaption figure footer form h1 h2 h3 h4 h5 h6 header hr i iframe img input ins kbd label legend li link main map mark menu menuitem meta meter nav noscript object ol optgroup option output p param picture pre progress q rp rt ruby s samp script section select small source span strong style sub summary sup table tbody td template textarea tfoot th thead time title tr track u ul var video wbr\".split(\" \")) {\n\t(<any>HTML)[name] = (...args: Array<any>) => applyElementArgs(document.createElement(name), args);\n}\nfor (const name of \"a altGlyph altGlyphDef altGlyphItem animate animateMotion animateTransform circle clipPath color-profile cursor defs desc discard ellipse feBlend feColorMatrix feComponentTransfer feComposite feConvolveMatrix feDiffuseLighting feDisplacementMap feDistantLight feDropShadow feFlood feFuncA feFuncB feFuncG feFuncR feGaussianBlur feImage feMerge feMergeNode feMorphology feOffset fePointLight feSpecularLighting feSpotLight feTile feTurbulence filter font font-face font-face-format font-face-name font-face-src font-face-uri foreignObject g glyph glyphRef hkern image line linearGradient marker mask metadata missing-glyph mpath path pattern polygon polyline radialGradient rect script set stop style svg switch symbol text textPath title tref tspan use view vkern\".split(\" \")) {\n\t(<any>SVG)[name] = (...args: Array<any>) => applyElementArgs(<SVGElement> document.createElementNS(svgNS, name), args);\n\tif (/-/.test(name)) {\n\t\tconst snakeCaseName = name.replace(/-/g, \"_\");\n\t\t(<any>SVG)[snakeCaseName] = (...args: Array<any>) => applyElementArgs(<SVGElement> document.createElementNS(svgNS, name), args);\n\t}\n}\n", "// importing Config causes a circular dependency error lol\nconst localStorage_namespace = /*Config.jsonFormat*/\"DragonBox\";\n\nexport function nsLocalStorage_save(name: string, data: string) {\n    window.localStorage.setItem(`${localStorage_namespace}_${name}`, data);\n}\n\nexport function nsLocalStorage_get(name: string) {\n    return window.localStorage.getItem(`${localStorage_namespace}_${name}`);\n}\n\nexport function nsLocalStorage_clear(name: string) {\n    window.localStorage.removeItem(name);\n}\n\nexport function nsLocalStorage_numKeys() {\n    return window.localStorage.length;\n}\n\nexport function nsLocalStorage_nthKey(n: number) {\n    return window.localStorage.key(n);\n}\n", "/*!\nCopyright (c) 2012-2022 John Nesky and contributing authors\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of \nthis software and associated documentation files (the \"Software\"), to deal in \nthe Software without restriction, including without limitation the rights to \nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies \nof the Software, and to permit persons to whom the Software is furnished to do \nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all \ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR \nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, \nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE \nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER \nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, \nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE \nSOFTWARE.\n*/\n\nimport { nsLocalStorage_get } from \"../editor/namespaced_localStorage\";\n\nexport interface Dictionary<T> {\n    [K: string]: T;\n}\n\n// @TODO: Not ideal to make this writable like this.\n// export interface DictionaryArray<T> extends ReadonlyArray<T> {\nexport interface DictionaryArray<T> extends Array<T> {\n    dictionary: Dictionary<T>;\n}\n\nexport const enum FilterType {\n    lowPass,\n    highPass,\n    peak,\n    length,\n}\n\nexport const enum SustainType {\n    bright,\n    acoustic,\n    length,\n}\n\nexport const enum GranularEnvelopeType {\n    parabolic,\n    raisedCosineBell,\n    // trapezoid,\n    length\n}\n\nexport const enum EnvelopeType {\n    none,\n    noteSize,\n    pitch, //slarmoo's box 0.9\n    pseudorandom, //slarmoo's box 1.3\n    punch,\n    flare,\n    twang,\n    swell,\n    lfo, //renamed from tremolo in slarmoo's box 1.3\n    tremolo2, //deprecated as of slarmoo's box 1.3; Kept for updating integrity and drumsets\n    decay,\n    wibble,\n    linear,\n    rise,\n    blip,\n    fall, //slarmoo's box 1.2\n    //add new envelope types here\n}\n\nexport const enum InstrumentType {\n    chip,\n    fm,\n    noise,\n    spectrum,\n    drumset,\n    harmonics,\n    pwm,\n    pickedString,\n    supersaw,\n    customChipWave,\n    mod,\n    fm6op,\n    length,\n}\n\nexport const TypePresets: ReadonlyArray<string> = [\"chip\", \"FM\", \"noise\", \"spectrum\", \"drumset\", \"harmonics\", \"pulse width\", \"picked string\", \"supersaw\", \"chip (custom)\", \"mod\", \"FM (6-op)\"];\n\nexport const enum DropdownID {\n    Vibrato = 0,\n    Pan = 1,\n    Chord = 2,\n    Transition = 3,\n    FM = 4,\n    PulseWidth = 5,\n    Unison = 6,\n    Envelope = 7,\n    EnvelopeSettings = 8,\n}\n\nexport const enum MDEffectType { // not sure what to call these! i call them \"musical data effects\" based off of this wiki page: https://beepbox.miraheze.org/wiki/Modding_Guide/Adding_a_new_effect - theepie\n    pitchShift,\n    detune,\n    vibrato,\n    transition,\n    chord,\n    noteRange, //placeholder for ultrabox 2.3 update\n    length,\n}\n\nexport const enum EffectType {\n    reverb,\n    chorus,\n    panning,\n    distortion,\n    bitcrusher,\n    eqFilter,\n    echo,\n    ringModulation,\n    granular,\n    gain,\n    flanger,\n    length,\n}\n\nexport const enum EnvelopeComputeIndex {\n    noteVolume,\n    mixVolume,\n    noteFilterAllFreqs,\n    pulseWidth,\n    stringSustain,\n    unison,\n    operatorFrequency0, operatorFrequency1, operatorFrequency2, operatorFrequency3, operatorFrequency4, operatorFrequency5,\n    operatorAmplitude0, operatorAmplitude1, operatorAmplitude2, operatorAmplitude3, operatorAmplitude4, operatorAmplitude5,\n    feedbackAmplitude,\n    pitchShift,\n    detune,\n    vibratoDepth,\n    //vibratoSpeed, doesn't follow normal envelope pattern; will figure out. //if you fix this you need to update the url\n    noteFilterFreq0, noteFilterFreq1, noteFilterFreq2, noteFilterFreq3, noteFilterFreq4, noteFilterFreq5, noteFilterFreq6, noteFilterFreq7,\n    noteFilterGain0, noteFilterGain1, noteFilterGain2, noteFilterGain3, noteFilterGain4, noteFilterGain5, noteFilterGain6, noteFilterGain7,\n    decimalOffset,\n    supersawDynamism,\n    supersawSpread,\n    supersawShape,\n    panning,\n    distortion,\n    bitcrusherQuantization,\n    bitcrusherFrequency,\n    chorus,\n    echoSustain,\n    reverb,\n    arpeggioSpeed,\n    ringModulation,\n    ringModulationHz,\n    granular,\n    grainAmount,\n    grainSize,\n    grainRange,\n    echoDelay,\n    gain,\n    flanger,\n    flangerSpeed,\n    flangerDepth,\n    flangerFeedback,\n    //Add more here\n\n    length,\n}\n\nexport const enum LFOEnvelopeTypes {\n    sine,\n    square,\n    triangle,\n    sawtooth,\n    trapezoid,\n    steppedSaw,\n    steppedTri,\n    // ramp,\n    length,\n}\n\nexport const enum RandomEnvelopeTypes {\n    time,\n    pitch,\n    note,\n    timeSmooth,\n    length,\n}\n\nexport interface BeepBoxOption {\n    readonly index: number;\n    readonly name: string;\n}\n\nexport interface Scale extends BeepBoxOption {\n    readonly flags: ReadonlyArray<boolean>;\n    readonly realName: string;\n}\n\nexport interface Key extends BeepBoxOption {\n    readonly isWhiteKey: boolean;\n    readonly basePitch: number;\n}\n\nexport interface Rhythm extends BeepBoxOption {\n    readonly stepsPerBeat: number;\n    readonly roundUpThresholds: number[] | null;\n}\n\nexport interface ChipWave extends BeepBoxOption {\n    readonly expression: number;\n    samples: Float32Array;\n    samplesR?: Float32Array;\n    isPercussion?: boolean;\n    isCustomSampled?: boolean;\n    isSampled?: boolean;\n    extraSampleDetune?: number;\n    rootKey?: number;\n    sampleRate?: number;\n}\n\nexport interface OperatorWave extends BeepBoxOption {\n    samples: Float32Array;\n}\n\nexport interface ChipNoise extends BeepBoxOption {\n    readonly expression: number;\n    readonly basePitch: number;\n    readonly pitchFilterMult: number;\n    readonly isSoft: boolean;\n    samples: Float32Array | null;\n}\n\nexport interface Transition extends BeepBoxOption {\n    readonly isSeamless: boolean;\n    readonly continues: boolean;\n    readonly slides: boolean;\n    readonly slideTicks: number;\n    readonly includeAdjacentPatterns: boolean;\n}\n\nexport interface Vibrato extends BeepBoxOption {\n    readonly amplitude: number;\n    readonly type: number;\n    readonly delayTicks: number;\n}\n\nexport interface VibratoType extends BeepBoxOption {\n    readonly periodsSeconds: number[];\n    readonly period: number;\n}\n\nexport interface Unison extends BeepBoxOption {\n    readonly voices: number;\n    readonly spread: number;\n    readonly offset: number;\n    readonly expression: number;\n    readonly sign: number;\n}\n\nexport interface Modulator extends BeepBoxOption {\n    readonly name: string; // name that shows up in song editor UI\n    readonly pianoName: string; // short name that shows up in mod piano UI\n    readonly maxRawVol: number; // raw\n    readonly newNoteVol: number; // raw\n    readonly forSong: boolean; // true - setting is song scope\n    convertRealFactor: number; // offset that needs to be applied to get a \"real\" number display of value, for UI purposes\n    readonly associatedEffect: EffectType; // effect that should be enabled for this modulator to work properly. If unused, set to EffectType.length.\n    readonly associatedMDEffect: MDEffectType; // like above but for MD effects. If unused, set to MDEffectType.length.\n    readonly promptName: string; // long-as-needed name that shows up in tip prompt\n    readonly promptDesc: string[]; // paragraph(s) describing how to use this mod\n    invertSliderIndicator?: boolean; // for whether or not you want to invert the slider indicator\n    readonly maxIndex: number;\n}\n\nexport interface Chord extends BeepBoxOption {\n    readonly customInterval: boolean;\n    readonly arpeggiates: boolean;\n    readonly strumParts: number;\n    readonly singleTone: boolean;\n}\n\nexport interface Algorithm extends BeepBoxOption {\n    readonly carrierCount: number;\n    readonly associatedCarrier: ReadonlyArray<number>;\n    readonly modulatedBy: ReadonlyArray<ReadonlyArray<number>>;\n}\n\nexport interface OperatorFrequency extends BeepBoxOption {\n    readonly mult: number;\n    readonly hzOffset: number;\n    readonly amplitudeSign: number;\n}\n\nexport interface Feedback extends BeepBoxOption {\n    readonly indices: ReadonlyArray<ReadonlyArray<number>>;\n}\n\nexport interface Envelope extends BeepBoxOption {\n    readonly type: EnvelopeType;\n    readonly speed: number;\n}\n\nexport interface AutomationTarget extends BeepBoxOption {\n    readonly computeIndex: EnvelopeComputeIndex /*| InstrumentAutomationIndex*/ | null;\n    readonly displayName: string;\n    //readonly perNote: boolean; // Whether to compute envelopes on a per-note basis.\n    readonly interleave: boolean; // Whether to interleave this target with the next one in the menu (e.g. filter frequency and gain).\n    readonly isFilter: boolean; // Filters are special because the maxCount depends on other instrument settings.\n    //readonly range: number | null; // set if automation is allowed.\n    readonly maxCount: number;\n    readonly effect: EffectType | null;\n    readonly mdeffect: MDEffectType | null;\n    readonly compatibleInstruments: InstrumentType[] | null;\n}\n\nexport const enum SampleLoadingStatus {\n    loading,\n    loaded,\n    error,\n}\n\nexport function getSampleLoadingStatusName(status: SampleLoadingStatus): string {\n    switch (status) {\n        case SampleLoadingStatus.loading: return \"loading\";\n        case SampleLoadingStatus.loaded: return \"loaded\";\n        case SampleLoadingStatus.error: return \"error\";\n    }\n}\n\nexport class SampleLoadingState {\n    statusTable: Dictionary<SampleLoadingStatus>;\n    urlTable: Dictionary<string>;\n    totalSamples: number;\n    samplesLoaded: number;\n\n    constructor() {\n        this.statusTable = {};\n        this.urlTable = {};\n        this.totalSamples = 0;\n        this.samplesLoaded = 0;\n    }\n}\n\nexport const sampleLoadingState = new SampleLoadingState();\n\nexport class SampleLoadedEvent extends Event {\n    readonly totalSamples: number;\n    readonly samplesLoaded: number;\n\n    constructor(totalSamples: number, samplesLoaded: number) {\n        super(\"sampleloaded\");\n        this.totalSamples = totalSamples;\n        this.samplesLoaded = samplesLoaded;\n    }\n}\n\nexport interface SampleLoadEventMap {\n    \"sampleloaded\": SampleLoadedEvent;\n}\n\nexport class SampleLoadEvents extends EventTarget {\n    constructor() {\n        super();\n    }\n}\n\nexport const sampleLoadEvents = new SampleLoadEvents();\n\nexport async function startLoadingSample(url: string, chipWaveIndex: number, presetSettings: Dictionary<any>, rawLoopOptions: any, customSampleRate: number): Promise<void> {\n    // @TODO: Make parts of the code that expect everything to already be\n    // in memory work correctly.\n    // It would be easy to only instantiate `SongEditor` and company after\n    // everything is loaded, but if dynamic sample loading without a reload\n    // is deemed necessary, anything that involves chip waves has to be\n    // revisited so as to be able to work with a changing list of chip\n    // waves that may or may not be ready to be used.\n    const sampleLoaderAudioContext = new AudioContext({ sampleRate: customSampleRate });\n    let closedSampleLoaderAudioContext = false;\n    const chipWave = Config.chipWaves[chipWaveIndex];\n    const rawChipWave = Config.rawChipWaves[chipWaveIndex];\n    const rawRawChipWave = Config.rawRawChipWaves[chipWaveIndex];\n    if (OFFLINE) {\n        if (url.slice(0, 5) === \"file:\") {\n            const dirname = await getDirname();\n            const joined = await pathJoin(dirname, url.slice(5));\n            url = joined;\n        }\n    }\n    fetch(url).then((response) => {\n        if (!response.ok) {\n            // @TODO: Be specific with the error handling.\n            sampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.error;\n            return Promise.reject(new Error(\"Couldn't load sample\"));\n        }\n        return response.arrayBuffer();\n    }).then((arrayBuffer) => {\n        return sampleLoaderAudioContext.decodeAudioData(arrayBuffer);\n    }).then((audioBuffer) => {\n        // @TODO: Downmix.\n        const samples = centerWave(Array.from(audioBuffer.getChannelData(0)));\n        var samplesR = samples;\n        if (audioBuffer.numberOfChannels > 1) samplesR = centerWave(Array.from(audioBuffer.getChannelData(1)));\n        else samplesR = samples;\n        const integratedSamples = performIntegral(samples);\n        const integratedSamplesR = performIntegral(samplesR);\n        chipWave.samples = integratedSamples;\n        chipWave.samplesR = integratedSamplesR;\n        rawChipWave.samples = samples;\n        rawChipWave.samplesR = samplesR;\n        rawRawChipWave.samples = samples;\n        rawRawChipWave.samplesR = samplesR;\n        if (rawLoopOptions[\"isUsingAdvancedLoopControls\"]) {\n            presetSettings[\"chipWaveLoopStart\"] = rawLoopOptions[\"chipWaveLoopStart\"] != null ? rawLoopOptions[\"chipWaveLoopStart\"] : 0;\n            presetSettings[\"chipWaveLoopEnd\"] = rawLoopOptions[\"chipWaveLoopEnd\"] != null ? rawLoopOptions[\"chipWaveLoopEnd\"] : samples.length - 1;\n            presetSettings[\"chipWaveLoopMode\"] = rawLoopOptions[\"chipWaveLoopMode\"] != null ? rawLoopOptions[\"chipWaveLoopMode\"] : 0;\n            presetSettings[\"chipWavePlayBackwards\"] = rawLoopOptions[\"chipWavePlayBackwards\"];\n            presetSettings[\"chipWaveStartOffset\"] = rawLoopOptions[\"chipWaveStartOffset\"] != null ? rawLoopOptions[\"chipWaveStartOffset\"] : 0;\n        }\n        sampleLoadingState.samplesLoaded++;\n        sampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.loaded;\n        sampleLoadEvents.dispatchEvent(new SampleLoadedEvent(\n            sampleLoadingState.totalSamples,\n            sampleLoadingState.samplesLoaded\n        ));\n        if (!closedSampleLoaderAudioContext) {\n            closedSampleLoaderAudioContext = true;\n            sampleLoaderAudioContext.close();\n        }\n    }).catch((error) => {\n        //console.error(error);\n        sampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.error;\n        alert(\"Failed to load \" + url + \":\\n\" + error);\n        if (!closedSampleLoaderAudioContext) {\n            closedSampleLoaderAudioContext = true;\n            sampleLoaderAudioContext.close();\n        }\n    });\n}\n\nexport function getLocalStorageItem<T>(key: string, defaultValue: T): T | string {\n    let value: T | string | null = nsLocalStorage_get(key);\n    if (value == null || value === \"null\" || value === \"undefined\") {\n        value = defaultValue;\n    }\n    return value;\n}\n\n// @HACK: This just assumes these exist, regardless of whether they actually do\n// or not.\ndeclare global {\n    const OFFLINE: boolean; // for UB offline\n    const getDirname: () => Promise<string>; // for UB offline\n    const pathJoin: (...parts: string[]) => Promise<string>; // for UB offline\n    const kicksample: number[];\n    const snaresample: number[];\n    const pianosample: number[];\n    const WOWsample: number[];\n    const overdrivesample: number[];\n    const trumpetsample: number[];\n    const saxophonesample: number[];\n    const orchhitsample: number[];\n    const detatchedviolinsample: number[];\n    const synthsample: number[];\n    const sonic3snaresample: number[];\n    const comeonsample: number[];\n    const choirsample: number[];\n    const overdrivensample: number[];\n    const flutesample: number[];\n    const legatoviolinsample: number[];\n    const tremoloviolinsample: number[];\n    const amenbreaksample: number[];\n    const pizzicatoviolinsample: number[];\n    const timallengruntsample: number[];\n    const tubasample: number[];\n    const loopingcymbalsample: number[];\n    const kickdrumsample: number[];\n    const snaredrumsample: number[];\n    const closedhihatsample: number[];\n    const foothihatsample: number[];\n    const openhihatsample: number[];\n    const crashsample: number[];\n    const pianoC4sample: number[];\n    const liverpadsample: number[];\n    const marimbasample: number[];\n    const susdotwavsample: number[];\n    const wackyboxttssample: number[];\n    const peppersteak1: number[];\n    const peppersteak2: number[];\n    const vinyl: number[];\n    const slapbass: number[];\n    const hdeboverdrive: number[];\n    const sunsoftbass: number[];\n    const masculinechoir: number[];\n    const femininechoir: number[];\n    const southtololoche: number[];\n    const harp: number[];\n    const panflute: number[];\n    const krumhorn: number[];\n    const timpani: number[];\n    const crowdhey: number[];\n    const warioland4brass: number[];\n    const warioland4organ: number[];\n    const warioland4daow: number[];\n    const warioland4hourchime: number[];\n    const warioland4tick: number[];\n    const kirbykick: number[];\n    const kirbysnare: number[];\n    const kirbybongo: number[];\n    const kirbyclick: number[];\n    const funkkick: number[];\n    const funksnare: number[];\n    const funksnareleft: number[];\n    const funksnareright: number[];\n    const funktomhigh: number[];\n    const funktomlow: number[];\n    const funkhihatclosed: number[];\n    const funkhihathalfopen: number[];\n    const funkhihatopen: number[];\n    const funkhihatopentip: number[];\n    const funkhihatfoot: number[];\n    const funkcrash: number[];\n    const funkcrashtip: number[];\n    const funkride: number[];\n    const chronoperc1finalsample: number[];\n    const synthkickfmsample: number[];\n    const woodclicksample: number[];\n    const acousticsnaresample: number[];\n    const catpaintboxsample: number[];\n    const gameboypaintboxsample: number[];\n    const mariopaintboxsample: number[];\n    const drumpaintboxsample: number[];\n    const yoshipaintboxsample: number[];\n    const starpaintboxsample: number[];\n    const fireflowerpaintboxsample: number[];\n    const dogpaintbox: number[];\n    const oinkpaintbox: number[];\n    const swanpaintboxsample: number[];\n    const facepaintboxsample: number[];\n}\n\nfunction loadScript(url: string): Promise<void> {\n    const result: Promise<void> = new Promise((resolve, reject) => {\n        if (!Config.willReloadForCustomSamples) {\n            const script = document.createElement(\"script\");\n            script.src = url;\n            document.head.appendChild(script);\n            script.addEventListener(\"load\", (event) => {\n                resolve();\n            });\n        } else {\n            // There's not really any errors that show up if the loading for\n            // this script is stopped early, but it won't really do anything\n            // particularly useful either in that case.\n        }\n    });\n    return result;\n}\n\nexport function loadBuiltInSamples(set: number): void {\n    const defaultIndex = 0;\n    const defaultIntegratedSamples: Float32Array = Config.chipWaves[defaultIndex].samples;\n    const defaultSamples: Float32Array = Config.rawRawChipWaves[defaultIndex].samples;\n\n    if (set == 0) {\n        // Create chip waves with the wrong sound.\n        const chipWaves = [\n            { name: \"paandorasbox kick\", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\n            { name: \"paandorasbox snare\", expression: 3.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\n            { name: \"paandorasbox piano1\", expression: 3.0, isSampled: true, isPercussion: false, extraSampleDetune: 2 },\n            { name: \"paandorasbox WOW\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: 0 },\n            { name: \"paandorasbox overdrive\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -2 },\n            { name: \"paandorasbox trumpet\", expression: 3.0, isSampled: true, isPercussion: false, extraSampleDetune: 1.2 },\n            { name: \"paandorasbox saxophone\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -5 },\n            { name: \"paandorasbox orchestrahit\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: 4.2 },\n            { name: \"paandorasbox detatched violin\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: 4.2 },\n            { name: \"paandorasbox synth\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -0.8 },\n            { name: \"paandorasbox sonic3snare\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\n            { name: \"paandorasbox come on\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: 0 },\n            { name: \"paandorasbox choir\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -3 },\n            { name: \"paandorasbox overdriveguitar\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -6.2 },\n            { name: \"paandorasbox flute\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -6 },\n            { name: \"paandorasbox legato violin\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -28 },\n            { name: \"paandorasbox tremolo violin\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -33 },\n            { name: \"paandorasbox amen break\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -55 },\n            { name: \"paandorasbox pizzicato violin\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -11 },\n            { name: \"paandorasbox tim allen grunt\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -20 },\n            { name: \"paandorasbox tuba\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: 44 },\n            { name: \"paandorasbox loopingcymbal\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -17 },\n            { name: \"paandorasbox standardkick\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: -7 },\n            { name: \"paandorasbox standardsnare\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\n            { name: \"paandorasbox closedhihat\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: 5 },\n            { name: \"paandorasbox foothihat\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: 4 },\n            { name: \"paandorasbox openhihat\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: -31 },\n            { name: \"paandorasbox crashcymbal\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: -43 },\n            { name: \"paandorasbox pianoC4\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -42.5 },\n            { name: \"paandorasbox liver pad\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -22.5 },\n            { name: \"paandorasbox marimba\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -15.5 },\n            { name: \"paandorasbox susdotwav\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -24.5 },\n            { name: \"paandorasbox wackyboxtts\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -17.5 },\n            { name: \"paandorasbox peppersteak_1\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -42.2 },\n            { name: \"paandorasbox peppersteak_2\", expression: 2.0, isSampled: true, isPercussion: false, extraSampleDetune: -47 },\n            { name: \"paandorasbox vinyl_noise\", expression: 2.0, isSampled: true, isPercussion: true, extraSampleDetune: -50 },\n            { name: \"paandorasbeta slap bass\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -56 },\n            { name: \"paandorasbeta HD EB overdrive guitar\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -60 },\n            { name: \"paandorasbeta sunsoft bass\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -18.5 },\n            { name: \"paandorasbeta masculine choir\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -50 },\n            { name: \"paandorasbeta feminine choir\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -60.5 },\n            { name: \"paandorasbeta tololoche\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -29.5 },\n            { name: \"paandorasbeta harp\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -54 },\n            { name: \"paandorasbeta pan flute\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -58 },\n            { name: \"paandorasbeta krumhorn\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -46 },\n            { name: \"paandorasbeta timpani\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -50 },\n            { name: \"paandorasbeta crowd hey\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -29 },\n            { name: \"paandorasbeta wario land 4 brass\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -68 },\n            { name: \"paandorasbeta wario land 4 rock organ\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -63 },\n            { name: \"paandorasbeta wario land 4 DAOW\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -35 },\n            { name: \"paandorasbeta wario land 4 hour chime\", expression: 1.0, isSampled: true, isPercussion: false, extraSampleDetune: -47.5 },\n            { name: \"paandorasbeta wario land 4 tick\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -12.5 },\n            { name: \"paandorasbeta kirby kick\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46.5 },\n            { name: \"paandorasbeta kirby snare\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46.5 },\n            { name: \"paandorasbeta kirby bongo\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46.5 },\n            { name: \"paandorasbeta kirby click\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46.5 },\n            { name: \"paandorasbeta sonor kick\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -28.5 },\n            { name: \"paandorasbeta sonor snare\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -28.5 },\n            { name: \"paandorasbeta sonor snare (left hand)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -22.5 },\n            { name: \"paandorasbeta sonor snare (right hand)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -22.5 },\n            { name: \"paandorasbeta sonor high tom\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -41.5 },\n            { name: \"paandorasbeta sonor low tom\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -41.5 },\n            { name: \"paandorasbeta sonor hihat (closed)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -17 },\n            { name: \"paandorasbeta sonor hihat (half opened)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -21 },\n            { name: \"paandorasbeta sonor hihat (open)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -54.5 },\n            { name: \"paandorasbeta sonor hihat (open tip)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -43.5 },\n            { name: \"paandorasbeta sonor hihat (pedal)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -28 },\n            { name: \"paandorasbeta sonor crash\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -51 },\n            { name: \"paandorasbeta sonor crash (tip)\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -50.5 },\n            { name: \"paandorasbeta sonor ride\", expression: 1.0, isSampled: true, isPercussion: true, extraSampleDetune: -46 }\n        ];\n\n        sampleLoadingState.totalSamples += chipWaves.length;\n\n        // This assumes that Config.rawRawChipWaves and Config.chipWaves have\n        // the same number of elements.\n        const startIndex = Config.rawRawChipWaves.length;\n        for (const chipWave of chipWaves) {\n            const chipWaveIndex = Config.rawRawChipWaves.length;\n            const rawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\n            const rawRawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\n            const integratedChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultIntegratedSamples };\n            Config.rawRawChipWaves[chipWaveIndex] = rawRawChipWave;\n            Config.rawRawChipWaves.dictionary[chipWave.name] = rawRawChipWave;\n            Config.rawChipWaves[chipWaveIndex] = rawChipWave;\n            Config.rawChipWaves.dictionary[chipWave.name] = rawChipWave;\n            Config.chipWaves[chipWaveIndex] = integratedChipWave;\n            Config.chipWaves.dictionary[chipWave.name] = rawChipWave;\n            sampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.loading;\n            sampleLoadingState.urlTable[chipWaveIndex] = \"legacySamples\";\n        }\n\n        loadScript(\"samples.js\")\n            .then(() => loadScript(\"samples2.js\"))\n            .then(() => loadScript(\"samples3.js\"))\n            .then(() => loadScript(\"drumsamples.js\"))\n            .then(() => loadScript(\"wario_samples.js\"))\n            .then(() => loadScript(\"kirby_samples.js\"))\n            .then(() => {\n                // Now put the right sounds in there after everything\n                // got loaded.\n                const chipWaveSamples: Float32Array[] = [\n                    centerWave(kicksample),\n                    centerWave(snaresample),\n                    centerWave(pianosample),\n                    centerWave(WOWsample),\n                    centerWave(overdrivesample),\n                    centerWave(trumpetsample),\n                    centerWave(saxophonesample),\n                    centerWave(orchhitsample),\n                    centerWave(detatchedviolinsample),\n                    centerWave(synthsample),\n                    centerWave(sonic3snaresample),\n                    centerWave(comeonsample),\n                    centerWave(choirsample),\n                    centerWave(overdrivensample),\n                    centerWave(flutesample),\n                    centerWave(legatoviolinsample),\n                    centerWave(tremoloviolinsample),\n                    centerWave(amenbreaksample),\n                    centerWave(pizzicatoviolinsample),\n                    centerWave(timallengruntsample),\n                    centerWave(tubasample),\n                    centerWave(loopingcymbalsample),\n                    centerWave(kickdrumsample),\n                    centerWave(snaredrumsample),\n                    centerWave(closedhihatsample),\n                    centerWave(foothihatsample),\n                    centerWave(openhihatsample),\n                    centerWave(crashsample),\n                    centerWave(pianoC4sample),\n                    centerWave(liverpadsample),\n                    centerWave(marimbasample),\n                    centerWave(susdotwavsample),\n                    centerWave(wackyboxttssample),\n                    centerWave(peppersteak1),\n                    centerWave(peppersteak2),\n                    centerWave(vinyl),\n                    centerWave(slapbass),\n                    centerWave(hdeboverdrive),\n                    centerWave(sunsoftbass),\n                    centerWave(masculinechoir),\n                    centerWave(femininechoir),\n                    centerWave(southtololoche),\n                    centerWave(harp),\n                    centerWave(panflute),\n                    centerWave(krumhorn),\n                    centerWave(timpani),\n                    centerWave(crowdhey),\n                    centerWave(warioland4brass),\n                    centerWave(warioland4organ),\n                    centerWave(warioland4daow),\n                    centerWave(warioland4hourchime),\n                    centerWave(warioland4tick),\n                    centerWave(kirbykick),\n                    centerWave(kirbysnare),\n                    centerWave(kirbybongo),\n                    centerWave(kirbyclick),\n                    centerWave(funkkick),\n                    centerWave(funksnare),\n                    centerWave(funksnareleft),\n                    centerWave(funksnareright),\n                    centerWave(funktomhigh),\n                    centerWave(funktomlow),\n                    centerWave(funkhihatclosed),\n                    centerWave(funkhihathalfopen),\n                    centerWave(funkhihatopen),\n                    centerWave(funkhihatopentip),\n                    centerWave(funkhihatfoot),\n                    centerWave(funkcrash),\n                    centerWave(funkcrashtip),\n                    centerWave(funkride)\n                ];\n                let chipWaveIndexOffset = 0;\n                for (const chipWaveSample of chipWaveSamples) {\n                    const chipWaveIndex = startIndex + chipWaveIndexOffset;\n                    Config.rawChipWaves[chipWaveIndex].samples = chipWaveSample;\n                    Config.rawRawChipWaves[chipWaveIndex].samples = chipWaveSample;\n                    Config.chipWaves[chipWaveIndex].samples = performIntegral(chipWaveSample);\n                    sampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.loaded;\n                    sampleLoadingState.samplesLoaded++;\n                    sampleLoadEvents.dispatchEvent(new SampleLoadedEvent(\n                        sampleLoadingState.totalSamples,\n                        sampleLoadingState.samplesLoaded\n                    ));\n                    chipWaveIndexOffset++;\n                }\n            });\n        //EditorConfig.presetCategories[EditorConfig.presetCategories.length] = {name: \"Legacy Sample Presets\", presets:  { name: \"Earthbound O. Guitar\", midiProgram: 80, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"chord\": \"arpeggio\", \"wave\": \"paandorasbox overdrive\", \"unison\": \"none\", \"envelopes\": [] } }, index: EditorConfig.presetCategories.length,};\n    }\n    else if (set == 1) {\n        // Create chip waves with the wrong sound.\n        const chipWaves = [\n            { name: \"chronoperc1final\", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\n            { name: \"synthkickfm\", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\n            { name: \"mcwoodclick1\", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 },\n            { name: \"acoustic snare\", expression: 4.0, isSampled: true, isPercussion: true, extraSampleDetune: 0 }\n        ];\n\n        sampleLoadingState.totalSamples += chipWaves.length;\n\n        // This assumes that Config.rawRawChipWaves and Config.chipWaves have\n        // the same number of elements.\n        const startIndex = Config.rawRawChipWaves.length;\n        for (const chipWave of chipWaves) {\n            const chipWaveIndex = Config.rawRawChipWaves.length;\n            const rawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\n            const rawRawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\n            const integratedChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultIntegratedSamples };\n            Config.rawRawChipWaves[chipWaveIndex] = rawRawChipWave;\n            Config.rawRawChipWaves.dictionary[chipWave.name] = rawRawChipWave;\n            Config.rawChipWaves[chipWaveIndex] = rawChipWave;\n            Config.rawChipWaves.dictionary[chipWave.name] = rawChipWave;\n            Config.chipWaves[chipWaveIndex] = integratedChipWave;\n            Config.chipWaves.dictionary[chipWave.name] = rawChipWave;\n            sampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.loading;\n            sampleLoadingState.urlTable[chipWaveIndex] = \"nintariboxSamples\";\n        }\n\n        loadScript(\"nintaribox_samples.js\")\n            .then(() => {\n                // Now put the right sounds in there after everything\n                // got loaded.\n                const chipWaveSamples: Float32Array[] = [\n                    centerWave(chronoperc1finalsample),\n                    centerWave(synthkickfmsample),\n                    centerWave(woodclicksample),\n                    centerWave(acousticsnaresample)\n                ];\n                let chipWaveIndexOffset = 0;\n                for (const chipWaveSample of chipWaveSamples) {\n                    const chipWaveIndex = startIndex + chipWaveIndexOffset;\n                    Config.rawChipWaves[chipWaveIndex].samples = chipWaveSample;\n                    Config.rawRawChipWaves[chipWaveIndex].samples = chipWaveSample;\n                    Config.chipWaves[chipWaveIndex].samples = performIntegral(chipWaveSample);\n                    sampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.loaded;\n                    sampleLoadingState.samplesLoaded++;\n                    sampleLoadEvents.dispatchEvent(new SampleLoadedEvent(\n                        sampleLoadingState.totalSamples,\n                        sampleLoadingState.samplesLoaded\n                    ));\n                    chipWaveIndexOffset++;\n                }\n            });\n    }\n    else if (set == 2) {\n        // Create chip waves with the wrong sound.\n        const chipWaves = [\n            { name: \"cat\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -3 },\n            { name: \"gameboy\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 7 },\n            { name: \"mario\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 0 },\n            { name: \"drum\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 4 },\n            { name: \"yoshi\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -16 },\n            { name: \"star\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -16 },\n            { name: \"fire flower\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -1 },\n            { name: \"dog\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -1 },\n            { name: \"oink\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 3 },\n            { name: \"swan\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: 1 },\n            { name: \"face\", expression: 1, isSampled: true, isPercussion: false, extraSampleDetune: -12 }\n        ];\n\n        sampleLoadingState.totalSamples += chipWaves.length;\n\n        // This assumes that Config.rawRawChipWaves and Config.chipWaves have\n        // the same number of elements.\n        const startIndex = Config.rawRawChipWaves.length;\n        for (const chipWave of chipWaves) {\n            const chipWaveIndex = Config.rawRawChipWaves.length;\n            const rawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\n            const rawRawChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultSamples };\n            const integratedChipWave = { index: chipWaveIndex, name: chipWave.name, expression: chipWave.expression, isSampled: chipWave.isSampled, isPercussion: chipWave.isPercussion, extraSampleDetune: chipWave.extraSampleDetune, samples: defaultIntegratedSamples };\n            Config.rawRawChipWaves[chipWaveIndex] = rawRawChipWave;\n            Config.rawRawChipWaves.dictionary[chipWave.name] = rawRawChipWave;\n            Config.rawChipWaves[chipWaveIndex] = rawChipWave;\n            Config.rawChipWaves.dictionary[chipWave.name] = rawChipWave;\n            Config.chipWaves[chipWaveIndex] = integratedChipWave;\n            Config.chipWaves.dictionary[chipWave.name] = rawChipWave;\n            sampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.loading;\n            sampleLoadingState.urlTable[chipWaveIndex] = \"marioPaintboxSamples\";\n        }\n\n        loadScript(\"mario_paintbox_samples.js\")\n            .then(() => {\n                // Now put the right sounds in there after everything\n                // got loaded.\n                const chipWaveSamples: Float32Array[] = [\n                    centerWave(catpaintboxsample),\n                    centerWave(gameboypaintboxsample),\n                    centerWave(mariopaintboxsample),\n                    centerWave(drumpaintboxsample),\n                    centerWave(yoshipaintboxsample),\n                    centerWave(starpaintboxsample),\n                    centerWave(fireflowerpaintboxsample),\n                    centerWave(dogpaintbox),\n                    centerWave(oinkpaintbox),\n                    centerWave(swanpaintboxsample),\n                    centerWave(facepaintboxsample)\n                ];\n                let chipWaveIndexOffset = 0;\n                for (const chipWaveSample of chipWaveSamples) {\n                    const chipWaveIndex = startIndex + chipWaveIndexOffset;\n                    Config.rawChipWaves[chipWaveIndex].samples = chipWaveSample;\n                    Config.rawRawChipWaves[chipWaveIndex].samples = chipWaveSample;\n                    Config.chipWaves[chipWaveIndex].samples = performIntegral(chipWaveSample);\n                    sampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.loaded;\n                    sampleLoadingState.samplesLoaded++;\n                    sampleLoadEvents.dispatchEvent(new SampleLoadedEvent(\n                        sampleLoadingState.totalSamples,\n                        sampleLoadingState.samplesLoaded\n                    ));\n                    chipWaveIndexOffset++;\n                }\n            });\n    }\n    else {\n        console.log(\"invalid set of built-in samples\");\n    }\n}\n\nexport class Config {\n    // Params for post-processing compressor\n    static thresholdVal = -10;\n    static kneeVal = 40;\n    static ratioVal = 12;\n    static attackVal = 0;\n    static releaseVal = 0.25;\n\n    static willReloadForCustomSamples = false;\n\n    static jsonFormat = \"DragonBox\";\n    // public static thurmboxImportUrl = \"https://file.garden/ZMQ0Om5nmTe-x2hq/PandoraArchive%20Samples/\";\n\n    static readonly scales: DictionaryArray<Scale> = toNameMap([\n\n        //   C     Db      D     Eb      E      F     F#      G     Ab      A     Bb      B      C\n        { name: \"Free\", realName: \"chromatic\", flags: [true, true, true, true, true, true, true, true, true, true, true, true] }, // Free\n        { name: \"Major\", realName: \"ionian\", flags: [true, false, true, false, true, true, false, true, false, true, false, true] }, // Major\n        { name: \"Minor\", realName: \"aeolian\", flags: [true, false, true, true, false, true, false, true, true, false, true, false] }, // Minor\n        { name: \"Mixolydian\", realName: \"mixolydian\", flags: [true, false, true, false, true, true, false, true, false, true, true, false] }, // Mixolydian\n        { name: \"Lydian\", realName: \"lydian\", flags: [true, false, true, false, true, false, true, true, false, true, false, true] }, // Lydian\n        { name: \"Dorian\", realName: \"dorian\", flags: [true, false, true, true, false, true, false, true, false, true, true, false] }, // Dorian\n        { name: \"Phrygian\", realName: \"phrygian\", flags: [true, true, false, true, false, true, false, true, true, false, true, false] }, // Phrygian\n        { name: \"Locrian\", realName: \"locrian\", flags: [true, true, false, true, false, true, true, false, true, false, true, false] }, // Locrian\n        { name: \"Lydian Dominant\", realName: \"lydian dominant\", flags: [true, false, true, false, true, false, true, true, false, true, true, false] }, // Lydian Dominant\n        { name: \"Phrygian Dominant\", realName: \"phrygian dominant\", flags: [true, true, false, false, true, true, false, true, true, false, true, false] }, // Phrygian Dominant\n        { name: \"Harmonic Major\", realName: \"harmonic major\", flags: [true, false, true, false, true, true, false, true, true, false, false, true] }, // Harmonic Major\n        { name: \"Harmonic Minor\", realName: \"harmonic minor\", flags: [true, false, true, true, false, true, false, true, true, false, false, true] }, // Harmonic Minor\n        { name: \"Melodic Minor\", realName: \"melodic minor\", flags: [true, false, true, true, false, true, false, true, false, true, false, true] }, // Melodic Minor\n        { name: \"Blues Major\", realName: \"blues major\", flags: [true, false, true, true, true, false, false, true, false, true, false, false] }, // Blues Major\n        { name: \"Blues\", realName: \"blues\", flags: [true, false, false, true, false, true, true, true, false, false, true, false] }, // Blues\n        { name: \"Altered\", realName: \"altered\", flags: [true, true, false, true, true, false, true, false, true, false, true, false] }, // Altered\n        { name: \"Major Pentatonic\", realName: \"major pentatonic\", flags: [true, false, true, false, true, false, false, true, false, true, false, false] }, // Major Pentatonic\n        { name: \"Minor Pentatonic\", realName: \"minor pentatonic\", flags: [true, false, false, true, false, true, false, true, false, false, true, false] }, // Minor Pentatonic\n        { name: \"Whole Tone\", realName: \"whole tone\", flags: [true, false, true, false, true, false, true, false, true, false, true, false] }, // Whole Tone\n        { name: \"Octatonic\", realName: \"octatonic\", flags: [true, false, true, true, false, true, true, false, true, true, false, true] }, // Octatonic\n        { name: \"Hexatonic\", realName: \"hexatonic\", flags: [true, false, false, true, true, false, false, true, true, false, false, true] }, // Hexatonic\n        // TODO: remove these with 2.3\n        // modbox\n        { name: \"No Dabbing (MB)\", realName: \"no dabbing\", flags: [true, true, false, true, true, true, true, true, true, false, true, false] },\n        // todbox\n        { name: \"Jacked Toad (TB)\", realName: \"jacked toad\", flags: [true, false, true, true, false, true, true, true, true, false, true, true] },\n        { name: \"Test Scale (TB)\", realName: \"**t\", flags: [true, true, false, false, false, true, true, false, false, true, true, false] },\n        { name: \"Custom\", realName: \"custom\", flags: [true, false, true, true, false, false, false, true, true, false, true, true] }, // Custom? considering allowing this one to be be completely configurable\n    ]);\n    static readonly keys: DictionaryArray<Key> = toNameMap([\n        { name: \"C\", isWhiteKey: true, basePitch: 12 }, // C0 has index 12 on the MIDI scale. C7 is 96, and C9 is 120. C10 is barely in the audible range.\n        { name: \"C\u266F\", isWhiteKey: false, basePitch: 13 },\n        { name: \"D\", isWhiteKey: true, basePitch: 14 },\n        { name: \"D\u266F\", isWhiteKey: false, basePitch: 15 },\n        { name: \"E\", isWhiteKey: true, basePitch: 16 },\n        { name: \"F\", isWhiteKey: true, basePitch: 17 },\n        { name: \"F\u266F\", isWhiteKey: false, basePitch: 18 },\n        { name: \"G\", isWhiteKey: true, basePitch: 19 },\n        { name: \"G\u266F\", isWhiteKey: false, basePitch: 20 },\n        { name: \"A\", isWhiteKey: true, basePitch: 21 },\n        { name: \"A\u266F\", isWhiteKey: false, basePitch: 22 },\n        { name: \"B\", isWhiteKey: true, basePitch: 23 },\n        // { name: \"C+\", isWhiteKey: false, basePitch: 24 },\n        //taken from todbox, called \"B#\" for some reason lol\n        // { name: \"G- (actually F#-)\", isWhiteKey: false, basePitch: 6 },\n        // { name: \"C-\", isWhiteKey: true, basePitch: 0 },\n        //brucebox\n        //g- isn't actually g-???\n        // { name: \"oh no (F-)\", isWhiteKey: true, basePitch: 5 },\n        //shitbox\n    ]);\n    static readonly blackKeyNameParents: ReadonlyArray<number> = [-1, 1, -1, 1, -1, 1, -1, -1, 1, -1, 1, -1];\n    static readonly tempoMin = 1;\n    static readonly tempoMax = 2000;\n    static readonly octaveMin = -2;\n    static readonly octaveMax = 2;\n    static readonly echoDelayRange = 24;\n    static readonly echoDelayStepTicks = 4;\n    static readonly echoSustainRange = 24;\n    static readonly echoShelfHz = 4000.0; // The cutoff freq of the shelf filter that is used to decay echoes.\n    static readonly echoShelfGain = Math.pow(2.0, -0.5);\n    static readonly reverbShelfHz = 8000.0; // The cutoff freq of the shelf filter that is used to decay reverb.\n    static readonly reverbShelfGain = Math.pow(2.0, -1.5);\n    static readonly reverbRange = 32;\n    static readonly reverbDelayBufferSize = 16384; // TODO: Compute a buffer size based on sample rate.\n    static readonly reverbDelayBufferMask = Config.reverbDelayBufferSize - 1; // TODO: Compute a buffer size based on sample rate.\n    static readonly beatsPerBarMin = 1;\n    static readonly beatsPerBarMax = 64;\n    static readonly barCountMin = 1;\n    static readonly barCountMax = 1024;\n    static readonly instrumentCountMin = 1;\n    static readonly layeredInstrumentCountMax = 10;\n    static readonly patternInstrumentCountMax = 10;\n    static readonly partsPerBeat = 24;\n    static readonly ticksPerPart = 2;\n    static readonly ticksPerArpeggio = 3;\n    static readonly arpeggioPatterns: ReadonlyArray<ReadonlyArray<number>> = [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3], [0, 1, 2, 3, 4], [0, 1, 2, 3, 4, 5], [0, 1, 2, 3, 4, 5, 6], [0, 1, 2, 3, 4, 5, 6, 7]];\n    static readonly rhythms: DictionaryArray<Rhythm> = toNameMap([\n        { name: \"\u00F73 (triplets)\", stepsPerBeat: 3, /*ticksPerArpeggio: 4, arpeggioPatterns: [[0], [0, 0, 1, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: [/*0*/ 5, /*8*/ 12, /*16*/ 18 /*24*/] },\n        { name: \"\u00F74 (standard)\", stepsPerBeat: 4, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 0, 1, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: [/*0*/ 3, /*6*/ 9, /*12*/ 17, /*18*/ 21 /*24*/] },\n        { name: \"\u00F76\", stepsPerBeat: 6, /*ticksPerArpeggio: 4, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\n        { name: \"\u00F78\", stepsPerBeat: 8, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\n        { name: \"\u00F712\", stepsPerBeat: 12, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1]]*/ roundUpThresholds: null },\n        { name: \"freehand\", stepsPerBeat: 24, /*ticksPerArpeggio: 3, arpeggioPatterns: [[0], [0, 1], [0, 1, 2, 1], [0, 1, 2, 3]]*/ roundUpThresholds: null },\n    ]);\n\n    static readonly instrumentTypeNames: ReadonlyArray<string> = [\"chip\", \"FM\", \"noise\", \"spectrum\", \"drumset\", \"harmonics\", \"PWM\", \"Picked String\", \"supersaw\", \"custom chip\", \"mod\", \"FM6op\"];\n    static readonly instrumentTypeHasSpecialInterval: ReadonlyArray<boolean> = [true, true, false, false, false, true, false, false, false, false, false];\n    static readonly chipBaseExpression = 0.03375; // Doubled by unison feature, but affected by expression adjustments per unison setting and wave shape. Custom chip is multiplied by 0.05 in instrumentState.updateWaves\n    static readonly fmBaseExpression = 0.03;\n    static readonly noiseBaseExpression = 0.19;\n    static readonly spectrumBaseExpression = 0.3; // Spectrum can be in pitch or noise channels, the expression is doubled for noise.\n    static readonly drumsetBaseExpression = 0.45; // Drums tend to be loud but brief!\n    static readonly harmonicsBaseExpression = 0.025;\n    static readonly pwmBaseExpression = 0.04725; // It's actually closer to half of this, the synthesized pulse amplitude range is only .5 to -.5, but also note that the fundamental sine partial amplitude of a square wave is 4/\u03C0 times the measured square wave amplitude.\n    static readonly supersawBaseExpression = 0.061425; // It's actually closer to half of this, the synthesized sawtooth amplitude range is only .5 to -.5.\n    static readonly pickedStringBaseExpression = 0.025; // Same as harmonics.\n    static readonly distortionBaseVolume = 0.011; // Distortion is not affected by pitchDamping, which otherwise approximately halves expression for notes around the middle of the range.\n    static readonly bitcrusherBaseVolume = 0.010; // Also not affected by pitchDamping, used when bit crushing is maxed out (aka \"1-bit\" output).\n    static readonly granularOutputLoudnessCompensation = 0.5; //compensate for multiple grains playing at once\n    static rawChipWaves: DictionaryArray<ChipWave> = toNameMap([\n        { name: \"rounded\", expression: 0.94, samples: centerWave([0.0, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.85, 0.9, 0.95, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.95, 0.9, 0.85, 0.8, 0.7, 0.6, 0.5, 0.4, 0.2, 0.0, -0.2, -0.4, -0.5, -0.6, -0.7, -0.8, -0.85, -0.9, -0.95, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -0.95, -0.9, -0.85, -0.8, -0.7, -0.6, -0.5, -0.4, -0.2]) },\n        { name: \"triangle\", expression: 1.0, samples: centerWave([1.0 / 15.0, 3.0 / 15.0, 5.0 / 15.0, 7.0 / 15.0, 9.0 / 15.0, 11.0 / 15.0, 13.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 13.0 / 15.0, 11.0 / 15.0, 9.0 / 15.0, 7.0 / 15.0, 5.0 / 15.0, 3.0 / 15.0, 1.0 / 15.0, -1.0 / 15.0, -3.0 / 15.0, -5.0 / 15.0, -7.0 / 15.0, -9.0 / 15.0, -11.0 / 15.0, -13.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -13.0 / 15.0, -11.0 / 15.0, -9.0 / 15.0, -7.0 / 15.0, -5.0 / 15.0, -3.0 / 15.0, -1.0 / 15.0]) },\n        { name: \"square\", expression: 0.5, samples: centerWave([1.0, -1.0]) },\n        { name: \"1/4 pulse\", expression: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0]) },\n        { name: \"1/8 pulse\", expression: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },\n        { name: \"sawtooth\", expression: 0.65, samples: centerWave([1.0 / 31.0, 3.0 / 31.0, 5.0 / 31.0, 7.0 / 31.0, 9.0 / 31.0, 11.0 / 31.0, 13.0 / 31.0, 15.0 / 31.0, 17.0 / 31.0, 19.0 / 31.0, 21.0 / 31.0, 23.0 / 31.0, 25.0 / 31.0, 27.0 / 31.0, 29.0 / 31.0, 31.0 / 31.0, -31.0 / 31.0, -29.0 / 31.0, -27.0 / 31.0, -25.0 / 31.0, -23.0 / 31.0, -21.0 / 31.0, -19.0 / 31.0, -17.0 / 31.0, -15.0 / 31.0, -13.0 / 31.0, -11.0 / 31.0, -9.0 / 31.0, -7.0 / 31.0, -5.0 / 31.0, -3.0 / 31.0, -1.0 / 31.0]) },\n        { name: \"double saw\", expression: 0.5, samples: centerWave([0.0, -0.2, -0.4, -0.6, -0.8, -1.0, 1.0, -0.8, -0.6, -0.4, -0.2, 1.0, 0.8, 0.6, 0.4, 0.2]) },\n        { name: \"double pulse\", expression: 0.4, samples: centerWave([1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0]) },\n        { name: \"spiky\", expression: 0.4, samples: centerWave([1.0, -1.0, 1.0, -1.0, 1.0, 0.0]) },\n        { name: \"sine\", expression: 0.88, samples: centerAndNormalizeWave([8.0, 9.0, 11.0, 12.0, 13.0, 14.0, 15.0, 15.0, 15.0, 15.0, 14.0, 14.0, 13.0, 11.0, 10.0, 9.0, 7.0, 6.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 4.0, 5.0, 6.0]) },\n        { name: \"flute\", expression: 0.8, samples: centerAndNormalizeWave([3.0, 4.0, 6.0, 8.0, 10.0, 11.0, 13.0, 14.0, 15.0, 15.0, 14.0, 13.0, 11.0, 8.0, 5.0, 3.0]) },\n        { name: \"harp\", expression: 0.8, samples: centerAndNormalizeWave([0.0, 3.0, 3.0, 3.0, 4.0, 5.0, 5.0, 6.0, 7.0, 8.0, 9.0, 11.0, 11.0, 13.0, 13.0, 15.0, 15.0, 14.0, 12.0, 11.0, 10.0, 9.0, 8.0, 7.0, 7.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.0, 0.0]) },\n        { name: \"sharp clarinet\", expression: 0.38, samples: centerAndNormalizeWave([0.0, 0.0, 0.0, 1.0, 1.0, 8.0, 8.0, 9.0, 9.0, 9.0, 8.0, 8.0, 8.0, 8.0, 8.0, 9.0, 9.0, 7.0, 9.0, 9.0, 10.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]) },\n        { name: \"soft clarinet\", expression: 0.45, samples: centerAndNormalizeWave([0.0, 1.0, 5.0, 8.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 9.0, 11.0, 11.0, 12.0, 13.0, 12.0, 10.0, 9.0, 7.0, 6.0, 4.0, 3.0, 3.0, 3.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]) },\n        { name: \"alto sax\", expression: 0.3, samples: centerAndNormalizeWave([5.0, 5.0, 6.0, 4.0, 3.0, 6.0, 8.0, 7.0, 2.0, 1.0, 5.0, 6.0, 5.0, 4.0, 5.0, 7.0, 9.0, 11.0, 13.0, 14.0, 14.0, 14.0, 14.0, 13.0, 10.0, 8.0, 7.0, 7.0, 4.0, 3.0, 4.0, 2.0]) },\n        { name: \"bassoon\", expression: 0.35, samples: centerAndNormalizeWave([9.0, 9.0, 7.0, 6.0, 5.0, 4.0, 4.0, 4.0, 4.0, 5.0, 7.0, 8.0, 9.0, 10.0, 11.0, 13.0, 13.0, 11.0, 10.0, 9.0, 7.0, 6.0, 4.0, 2.0, 1.0, 1.0, 1.0, 2.0, 2.0, 5.0, 11.0, 14.0]) },\n        { name: \"trumpet\", expression: 0.22, samples: centerAndNormalizeWave([10.0, 11.0, 8.0, 6.0, 5.0, 5.0, 5.0, 6.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 7.0, 7.0, 7.0, 7.0, 7.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 6.0, 7.0, 8.0, 9.0, 11.0, 14.0]) },\n        { name: \"electric guitar\", expression: 0.2, samples: centerAndNormalizeWave([11.0, 12.0, 12.0, 10.0, 6.0, 6.0, 8.0, 0.0, 2.0, 4.0, 8.0, 10.0, 9.0, 10.0, 1.0, 7.0, 11.0, 3.0, 6.0, 6.0, 8.0, 13.0, 14.0, 2.0, 0.0, 12.0, 8.0, 4.0, 13.0, 11.0, 10.0, 13.0]) },\n        { name: \"organ\", expression: 0.2, samples: centerAndNormalizeWave([11.0, 10.0, 12.0, 11.0, 14.0, 7.0, 5.0, 5.0, 12.0, 10.0, 10.0, 9.0, 12.0, 6.0, 4.0, 5.0, 13.0, 12.0, 12.0, 10.0, 12.0, 5.0, 2.0, 2.0, 8.0, 6.0, 6.0, 5.0, 8.0, 3.0, 2.0, 1.0]) },\n        { name: \"pan flute\", expression: 0.35, samples: centerAndNormalizeWave([1.0, 4.0, 7.0, 6.0, 7.0, 9.0, 7.0, 7.0, 11.0, 12.0, 13.0, 15.0, 13.0, 11.0, 11.0, 12.0, 13.0, 10.0, 7.0, 5.0, 3.0, 6.0, 10.0, 7.0, 3.0, 3.0, 1.0, 0.0, 1.0, 0.0, 1.0, 0.0]) },\n        { name: \"glitch\", expression: 0.5, samples: centerWave([1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0]) },\n        { name: \"trapezoid\", expression: 1.0, samples: centerWave([1.0 / 15.0, 6.0 / 15.0, 10.0 / 15.0, 14.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 15.0 / 15.0, 14.0 / 15.0, 10.0 / 15.0, 6.0 / 15.0, 1.0 / 15.0, -1.0 / 15.0, -6.0 / 15.0, -10.0 / 15.0, -14.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -15.0 / 15.0, -14.0 / 15.0, -10.0 / 15.0, -6.0 / 15.0, -1.0 / 15.0,]) },\n        // modbox\n        { name: \"modbox 10% pulse\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },\n        { name: \"modbox sunsoft bass\", expression: 1.0, samples: centerAndNormalizeWave([0.0, 0.1875, 0.3125, 0.5625, 0.5, 0.75, 0.875, 1.0, 1.0, 0.6875, 0.5, 0.625, 0.625, 0.5, 0.375, 0.5625, 0.4375, 0.5625, 0.4375, 0.4375, 0.3125, 0.1875, 0.1875, 0.375, 0.5625, 0.5625, 0.5625, 0.5625, 0.5625, 0.4375, 0.25, 0.0]) },\n        { name: \"modbox loud pulse\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 0.7, 0.1, 0.1, 0, 0, 0, 0, 0, 0.1, 0.2, 0.15, 0.25, 0.125, 0.215, 0.345, 4.0]) },\n        { name: \"modbox sax\", expression: 0.5, samples: centerAndNormalizeWave([1.0 / 15.0, 3.0 / 15.0, 5.0 / 15.0, 9.0, 0.06]) },\n        { name: \"modbox guitar\", expression: 0.5, samples: centerAndNormalizeWave([-0.5, 3.5, 3.0, -0.5, -0.25, -1.0]) },\n        { name: \"modbox sine\", expression: 0.5, samples: centerAndNormalizeWave([0.0, 0.05, 0.125, 0.2, 0.25, 0.3, 0.425, 0.475, 0.525, 0.625, 0.675, 0.725, 0.775, 0.8, 0.825, 0.875, 0.9, 0.925, 0.95, 0.975, 0.98, 0.99, 0.995, 1, 0.995, 0.99, 0.98, 0.975, 0.95, 0.925, 0.9, 0.875, 0.825, 0.8, 0.775, 0.725, 0.675, 0.625, 0.525, 0.475, 0.425, 0.3, 0.25, 0.2, 0.125, 0.05, 0.0, -0.05, -0.125, -0.2, -0.25, -0.3, -0.425, -0.475, -0.525, -0.625, -0.675, -0.725, -0.775, -0.8, -0.825, -0.875, -0.9, -0.925, -0.95, -0.975, -0.98, -0.99, -0.995, -1, -0.995, -0.99, -0.98, -0.975, -0.95, -0.925, -0.9, -0.875, -0.825, -0.8, -0.775, -0.725, -0.675, -0.625, -0.525, -0.475, -0.425, -0.3, -0.25, -0.2, -0.125, -0.05]) },\n        { name: \"modbox atari bass\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0]) },\n        { name: \"modbox atari pulse\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]) },\n        { name: \"modbox 1% pulse\", expression: 0.5, samples: centerAndNormalizeWave},\n        { name: \"modbox curved sawtooth\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 1.0 / 2.0, 1.0 / 3.0, 1.0 / 4.0]) },\n        { name: \"modbox viola\", expression: 0.45, samples: centerAndNormalizeWave([-0.9, -1.0, -0.85, -0.775, -0.7, -0.6, -0.5, -0.4, -0.325, -0.225, -0.2, -0.125, -0.1, -0.11, -0.125, -0.15, -0.175, -0.18, -0.2, -0.21, -0.22, -0.21, -0.2, -0.175, -0.15, -0.1, -0.5, 0.75, 0.11, 0.175, 0.2, 0.25, 0.26, 0.275, 0.26, 0.25, 0.225, 0.2, 0.19, 0.18, 0.19, 0.2, 0.21, 0.22, 0.23, 0.24, 0.25, 0.26, 0.275, 0.28, 0.29, 0.3, 0.29, 0.28, 0.27, 0.26, 0.25, 0.225, 0.2, 0.175, 0.15, 0.1, 0.075, 0.0, -0.01, -0.025, 0.025, 0.075, 0.2, 0.3, 0.475, 0.6, 0.75, 0.85, 0.85, 1.0, 0.99, 0.95, 0.8, 0.675, 0.475, 0.275, 0.01, -0.15, -0.3, -0.475, -0.5, -0.6, -0.71, -0.81, -0.9, -1.0, -0.9]) },\n        { name: \"modbox brass\", expression: 0.45, samples: centerAndNormalizeWave([-1.0, -0.95, -0.975, -0.9, -0.85, -0.8, -0.775, -0.65, -0.6, -0.5, -0.475, -0.35, -0.275, -0.2, -0.125, -0.05, 0.0, 0.075, 0.125, 0.15, 0.20, 0.21, 0.225, 0.25, 0.225, 0.21, 0.20, 0.19, 0.175, 0.125, 0.10, 0.075, 0.06, 0.05, 0.04, 0.025, 0.04, 0.05, 0.10, 0.15, 0.225, 0.325, 0.425, 0.575, 0.70, 0.85, 0.95, 1.0, 0.9, 0.675, 0.375, 0.2, 0.275, 0.4, 0.5, 0.55, 0.6, 0.625, 0.65, 0.65, 0.65, 0.65, 0.64, 0.6, 0.55, 0.5, 0.4, 0.325, 0.25, 0.15, 0.05, -0.05, -0.15, -0.275, -0.35, -0.45, -0.55, -0.65, -0.7, -0.78, -0.825, -0.9, -0.925, -0.95, -0.975]) },\n        { name: \"modbox acoustic bass\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 0.0, 0.1, -0.1, -0.2, -0.4, -0.3, -1.0]) },\n        { name: \"modbox lyre\", expression: 0.45, samples: centerAndNormalizeWave([1.0, -1.0, 4.0, 2.15, 4.13, 5.15, 0.0, -0.05, 1.0]) },\n        { name: \"modbox ramp pulse\", expression: 0.5, samples: centerAndNormalizeWave([6.1, -2.9, 1.4, -2.9]) },\n        { name: \"modbox piccolo\", expression: 0.5, samples: centerAndNormalizeWave([1, 4, 2, 1, -0.1, -1, -0.12]) },\n        { name: \"modbox squaretooth\", expression: 0.5, samples: centerAndNormalizeWave([0.2, 1.0, 2.6, 1.0, 0.0, -2.4]) },\n        { name: \"modbox flatline\", expression: 1.0, samples: centerAndNormalizeWave([1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9]) },\n        { name: \"modbox pnryshk a (u5)\", expression: 0.4, samples: centerAndNormalizeWave([1.0, 0.9, 0.8, 0.7, 0.6, 0.5, 0.4, 0.3, 0.2, 0.1, 0.0]) },\n        { name: \"modbox pnryshk b (riff)\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -0.9, 0.8, -0.7, 0.6, -0.5, 0.4, -0.3, 0.2, -0.1, 0.0, -0.1, 0.2, -0.3, 0.4, -0.5, 0.6, -0.7, 0.8, -0.9, 1.0]) },\n        // sandbox\n        { name: \"sandbox shrill lute\", expression: 0.94, samples: centerAndNormalizeWave([1.0, 1.5, 1.25, 1.2, 1.3, 1.5]) },\n        { name: \"sandbox bassoon\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0]) },\n        { name: \"sandbox shrill bass\", expression: 0.5, samples: centerAndNormalizeWave([0, 1, 0, 0, 1, 0, 1, 0, 0, 0]) },\n        { name: \"sandbox nes pulse\", expression: 0.4, samples: centerAndNormalizeWave([2.1, -2.2, 1.2, 3]) },\n        { name: \"sandbox saw bass\", expression: 0.25, samples: centerAndNormalizeWave([1, 1, 1, 1, 0, 2, 1, 2, 3, 1, -2, 1, 4, 1, 4, 2, 1, 6, -3, 4, 2, 1, 5, 1, 4, 1, 5, 6, 7, 1, 6, 1, 4, 1, 9]) },\n        { name: \"sandbox euphonium\", expression: 0.3, samples: centerAndNormalizeWave([0, 1, 2, 1, 2, 1, 4, 2, 5, 0, -2, 1, 5, 1, 2, 1, 2, 4, 5, 1, 5, -2, 5, 10, 1]) },\n        { name: \"sandbox shrill pulse\", expression: 0.3, samples: centerAndNormalizeWave([4 - 2, 0, 4, 1, 4, 6, 7, 3]) },\n        { name: \"sandbox r-sawtooth\", expression: 0.2, samples: centerAndNormalizeWave([6.1, -2.9, 1.4, -2.9]) },\n        { name: \"sandbox recorder\", expression: 0.2, samples: centerAndNormalizeWave([5.0, -5.1, 4.0, -4.1, 3.0, -3.1, 2.0, -2.1, 1.0, -1.1, 6.0]) },\n        { name: \"sandbox narrow saw\", expression: 1.2, samples: centerAndNormalizeWave([0.1, 0.13 / -0.1, 0.13 / -0.3, 0.13 / -0.5, 0.13 / -0.7, 0.13 / -0.9, 0.13 / -0.11, 0.13 / -0.31, 0.13 / -0.51, 0.13 / -0.71, 0.13 / -0.91, 0.13 / -0.12, 0.13 / -0.32, 0.13 / -0.52, 0.13 / -0.72, 0.13 / -0.92, 0.13 / -0.13, 0.13 / 0.13, 0.13 / 0.92, 0.13 / 0.72, 0.13 / 0.52, 0.13 / 0.32, 0.13 / 0.12, 0.13 / 0.91, 0.13 / 0.71, 0.13 / 0.51, 0.13 / 0.31, 0.13 / 0.11, 0.13 / 0.9, 0.13 / 0.7, 0.13 / 0.5, 0.13 / 0.3, 0.13]) },\n        { name: \"sandbox deep square\", expression: 1.0, samples: centerAndNormalizeWave([1.0, 2.25, 1.0, -1.0, -2.25, -1.0]) },\n        { name: \"sandbox ring pulse\", expression: 1.0, samples: centerAndNormalizeWave([1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, 1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },\n        { name: \"sandbox double sine\", expression: 1.0, samples: centerAndNormalizeWave([1.0, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 1.8, 1.7, 1.6, 1.5, 1.4, 1.3, 1.2, 1.1, 1.0, 0.0, -1.0, -1.1, -1.2, -1.3, -1.4, -1.5, -1.6, -1.7, -1.8, -1.9, -1.8, -1.7, -1.6, -1.5, -1.4, -1.3, -1.2, -1.1, -1.0]) },\n        { name: \"sandbox contrabass\", expression: 0.5, samples: centerAndNormalizeWave([4.20, 6.9, 1.337, 6.66]) },\n        { name: \"sandbox double bass\", expression: 0.4, samples: centerAndNormalizeWave([0.0, 0.1875, 0.3125, 0.5625, 0.5, 0.75, 0.875, 1.0, -1.0, -0.6875, -0.5, -0.625, -0.625, -0.5, -0.375, -0.5625, -0.4375, -0.5625, -0.4375, -0.4375, -0.3125, -0.1875, 0.1875, 0.375, 0.5625, -0.5625, 0.5625, 0.5625, 0.5625, 0.4375, 0.25, 0.0]) },\n        // haileybox\n        { name: \"haileybox test1\", expression: 0.5, samples: centerAndNormalizeWave([1.0, 0.5, -1.0]) },\n        //brucebox\n        { name: \"brucebox pokey 4bit lfsr\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, -1.0, -1.0, 1.0, 1.0, 1.0, 1.0, -1.0, 1.0, -1.0, 1.0, 1.0, -1.0, -1.0]) },\n        { name: \"brucebox pokey 5step bass\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, 1.0, -1.0, 1.0]) },\n        { name: \"brucebox isolated spiky\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -1.0, 1.0, -1.0, 1.0, -1.0]) },\n        // nerdbox\n        { name: \"nerdbox unnamed 1\", expression: 0.5, samples: centerAndNormalizeWave([0.2, 0.8 / 0.2, 0.7, -0.4, -1.0, 0.5, -0.5 / 0.6]) },\n        { name: \"nerdbox unnamed 2\", expression: 0.5, samples: centerAndNormalizeWave([2.0, 5.0 / 55.0, -9.0, 6.5 / 6.5, -55.0, 18.5 / -26.0]) },\n        // zefbox\n        { name: \"zefbox semi-square\", expression: 1.0, samples: centerAndNormalizeWave([1.0, 1.5, 2.0, 2.5, 2.5, 2.5, 2.0, 1.5, 1.0]) },\n        { name: \"zefbox deep square\", expression: 1.0, samples: centerAndNormalizeWave([1.0, 2.25, 1.0, -1.0, -2.25, -1.0]) },\n        { name: \"zefbox squaretal\", expression: 0.7, samples: centerAndNormalizeWave([1.5, 1.0, 1.5, -1.5, -1.0, -1.5]) },\n        { name: \"zefbox saw wide\", expression: 0.65, samples: centerAndNormalizeWave([0.0, -0.4, -0.8, -1.2, -1.6, -2.0, 0.0, -0.4, -0.8, -1.2, -1.6]) },\n        { name: \"zefbox saw narrow\", expression: 0.65, samples: centerAndNormalizeWave([1, 0.5, 1, 0.5, 1, 0.5, 1, 2, 1, 2, 1]) },\n        { name: \"zefbox deep sawtooth\", expression: 0.5, samples: centerAndNormalizeWave([0, 2, 3, 4, 4.5, 5, 5.5, 6, 6.25, 6.5, 6.75, 7, 6.75, 6.5, 6.25, 6, 5.5, 5, 4.5, 4, 3, 2, 1]) },\n        { name: \"zefbox sawtal\", expression: 0.3, samples: centerAndNormalizeWave([1.5, 1.0, 1.25, -0.5, 1.5, -0.5, 0.0, -1.5, 1.5, 0.0, 0.5, -1.5, 0.5, 1.25, -1.0, -1.5]) },\n        { name: \"zefbox deep sawtal\", expression: 0.7, samples: centerAndNormalizeWave([0.75, 0.25, 0.5, -0.5, 0.5, -0.5, -0.25, -0.75]) },\n        { name: \"zefbox pulse\", expression: 0.5, samples: centerAndNormalizeWave([1.0, -2.0, -2.0, -1.5, -1.5, -1.25, -1.25, -1.0, -1.0]) },\n        { name: \"zefbox triple pulse\", expression: 0.4, samples: centerAndNormalizeWave([1.0, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, 1.5, 1.0, 1.0, 1.0, 1.0, -1.0, -1.0, -1.0, 1.5]) },\n        { name: \"zefbox high pulse\", expression: 0.2, samples: centerAndNormalizeWave([1, -2, 2, -3, 3, -4, 5, -4, 3, -3, 2, -2, 1]) },\n        { name: \"zefbox deep pulse\", expression: 0.2, samples: centerAndNormalizeWave([1, 2, 2, -2, -2, -3, -4, -4, -5, -5, -5, -5, 0, -1, -2]) },\n        // wackybox\n        { name: \"wackybox guitar string\", expression: 0.6, samples: centerAndNormalizeWave([0, 63, 63, 63, 63, 19, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 11, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 27, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 63, 34, 63, 63, 63, 63]) },\n        { name: \"wackybox intense\", expression: 0.6, samples: centerAndNormalizeWave([36, 25, 33, 35, 18, 51, 22, 40, 27, 37, 31, 33, 25, 29, 41, 23, 31, 31, 45, 20, 37, 23, 29, 26, 42, 29, 33, 26, 31, 27, 40, 25, 40, 26, 37, 24, 41, 32, 0, 32, 33, 29, 32, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31]) },\n        { name: \"wackybox buzz wave\", expression: 0.6, samples: centerAndNormalizeWave([0, 1, 1, 2, 4, 4, 4, 4, 5, 5, 6, 6, 6, 7, 8, 8, 8, 9, 9, 9, 9, 9, 9, 8, 8, 8, 11, 15, 23, 62, 61, 60, 58, 56, 56, 54, 53, 52, 50, 49, 48, 47, 47, 45, 45, 45, 44, 44, 43, 43, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 42, 43, 43, 53]) },\n        // todbox\n        { name: \"todbox 1/3 pulse\", expression: 0.5, samples: centerWave([1.0, -1.0, -1.0]) },\n        { name: \"todbox 1/5 pulse\", expression: 0.5, samples: centerWave([1.0, -1.0, -1.0, -1.0, -1.0]) },\n        { name: \"todbox slap bass\", expression: 0.5, samples: centerAndNormalizeWave([1, 0.5, 0, 0.5, 1.25, 0.5, -0.25, 0.1, -0.1, 0.1, 1.1, 2.1, 3, 3.5, 2.9, 3.3, 2.7, 2.9, 2.3, 2, 1.9, 1.8, 1, 0.7, 0.9, 0.8, 0.4, 0.1, 0.0, 0.2, 0.4, 0.6, 0.5, 0.8]) },\n        { name: \"todbox harsh wave\", expression: 0.45, samples: centerAndNormalizeWave([1.0, -1.0, -1.0, -1.0, 0.5, 0.5, 0.5, 0.7, 0.39, 1.3, 0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0]) },\n        { name: \"todbox accordian\", expression: 0.5, samples: centerAndNormalizeWave([0, 1, 1, 2, 2, 1.5, 1.5, 0.8, 0, -2, -3.25, -4, -4.5, -5.5, -6, -5.75, -5.5, -5, -5, -5, -6, -6, -6, -5, -4, -3, -2, -1, 0.75, 1, 2, 3, 4, 5, 6, 6.5, 7.5, 8, 7.75, 6, 5.25, 5, 5, 5, 5, 5, 4.25, 3.75, 3.25, 2.75, 1.25, -0.75, -2, -0.75, 1.25, 1.25, 2, 2, 2, 2, 1.5, -1, -2, -1, 1.5, 2, 2.75, 2.75, 2.75, 3, 2.75, -1, -2, -2.5, -2, -1, -2.25, -2.75, -2, -3, -1.75, 1, 2, 3.5, 4, 5.25, 6, 8, 9.75, 10, 9.5, 9, 8.5, 7.5, 6.5, 5.25, 5, 4.5, 4, 4, 4, 3.25, 2.5, 2, 1, -0.5, -2, -3.5, -4, -4, -4, -3.75, -3, -2, -1]) },\n        // todbox beta\n        { name: \"todbox beta banana wave\", expression: 0.8, samples: centerAndNormalizeWave([0.0, 0.2, 0.4, 0.5, 0.6, 0.7, 0.8, 0.85, 0.9, 0.95, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.95, 0.9, 0.85, 0.8, 0.7, 0.6, 0.5, 0.4, 0.2, 0.0]) },\n        { name: \"todbox beta test wave\", expression: 0.5, samples: centerAndNormalizeWave([56, 0, -52, 16, 3, 3, 2, -35, 20, 147, -53, 0, 0, 5, -6]) },\n        { name: \"todbox beta real snare\", expression: 1.0, samples: centerAndNormalizeWave([0.00000, -0.01208, -0.02997, -0.04382, -0.06042, -0.07529, -0.09116, -0.10654, -0.12189, -0.13751, -0.15289, -0.16849, -0.18387, -0.19974, -0.21484, -0.23071, -0.24557, -0.26144, -0.27731, -0.29141, -0.30350, -0.32416, -0.34406, -0.32947, -0.31158, -0.33725, -0.37579, -0.39746, -0.40201, -0.40906, -0.44180, -0.47229, -0.47379, -0.47733, -0.45239, -0.33954, -0.22894, -0.22443, -0.32138, -0.46371, -0.57178, -0.61081, -0.59998, -0.61459, -0.62189, -0.43979, -0.19217, -0.12643, -0.17252, -0.20956, -0.20981, -0.19217, -0.22845, -0.34332, -0.50629, -0.64307, -0.72922, -0.81384, -0.87857, -0.90149, -0.88687, -0.86169, -0.87781, -0.80478, -0.52493, -0.31308, -0.33249, -0.39395, -0.39017, -0.30301, -0.19949, -0.13071, -0.02493, 0.14307, 0.34961, 0.52542, 0.63223, 0.68613, 0.74710, 0.87305, 0.98184, 0.98889, 0.97052, 0.99066, 0.99747, 0.99344, 0.99469, 0.99393, 0.99570, 0.99393, 0.99521, 0.99469, 0.99420, 0.99521, 0.99420, 0.99521, 0.99469, 0.99469, 0.99521, 0.99420, 0.99545, 0.99445, 0.99469, 0.99493, 0.99420, 0.99521, 0.99393, 0.99493, 0.99469, 0.99445, 0.99570, 0.99445, 0.99521, 0.99469, 0.99469, 0.99521, 0.99420, 0.99545, 0.99445, 0.99445, 0.99493, 0.99420, 0.99545, 0.99420, 0.99493, 0.99493, 0.99420, 0.99545, 0.99445, 0.99521, 0.99469, 0.99445, 0.99545, 0.99368, 0.99393, 0.99445, 0.99268, 0.97983, 0.97229, 0.95944, 0.88486, 0.76773, 0.64481, 0.53098, 0.39847, 0.19318, -0.03827, -0.20325, -0.39319, -0.68765, -0.88461, -0.93448, -0.96069, -0.97681, -0.98715, -0.99042, -0.99142, -0.99091, -0.99142, -0.99219, -0.99091, -0.99219, -0.99066, -0.99142, -0.99142, -0.99118, -0.99191, -0.99066, -0.99191, -0.99142, -0.99142, -0.99191, -0.99091, -0.99219, -0.99118, -0.99142, -0.99167, -0.99091, -0.99219, -0.99091, -0.99167, -0.99142, -0.99091, -0.99191, -0.99091, -0.99191, -0.99142, -0.99118, -0.99191, -0.99066, -0.99191, -0.99118, -0.99142, -0.99191, -0.99066, -0.99191, -0.99091, -0.99167, -0.99191, -0.99118, -0.99219, -0.99091, -0.99191, -0.99142, -0.99142, -0.99243, -0.98865, -0.98764, -0.99219, -0.98083, -0.92517, -0.92770, -0.91486, -0.59042, -0.15189, 0.02945, 0.05667, 0.06195, 0.00629, -0.18008, -0.56497, -0.88010, -0.92770, -0.92871, -0.97705, -0.99167, -0.98663, -0.99118, -0.99042, -0.99219, -0.99142, -0.99118, -0.98941, -0.99219, -1.00000, -0.97580, -0.95993, -0.99948, -0.98236, -0.84659, -0.74860, -0.70679, -0.59747, -0.48035, -0.41687, -0.36826, -0.29745, -0.18185, -0.06219, 0.02164, 0.07907, 0.13123, 0.18033, 0.19620, 0.15692, 0.14053, 0.20251, 0.27530, 0.30905, 0.29092, 0.27252, 0.30402, 0.32416, 0.32214, 0.35239, 0.39670, 0.43198, 0.49420, 0.58487, 0.64154, 0.65967, 0.67050, 0.67026, 0.66522, 0.65540, 0.66119, 0.70627, 0.75842, 0.78738, 0.78940, 0.78763, 0.80402, 0.85944, 0.94559, 0.98990, 0.98160, 0.98007, 0.99368, 0.99393, 0.98538, 0.97580, 0.97101, 0.93802, 0.81812, 0.64633, 0.46649, 0.28613, 0.14685, 0.08966, 0.12543, 0.20325, 0.24557, 0.18866, 0.02795, -0.20175, -0.44205, -0.58713, -0.57629, -0.41385, -0.14255, 0.18033, 0.47882, 0.68311, 0.72314, 0.62064, 0.48309, 0.43073, 0.53577, 0.72794, 0.90250, 0.97354, 0.97000, 0.98083, 0.99191, 0.99319, 0.99493, 0.99393, 0.99521, 0.99393, 0.99545, 0.99420, 0.99493, 0.99493, 0.99445, 0.99545, 0.99420, 0.99545, 0.99243, 0.98917, 0.98386, 0.97781, 0.95844, 0.89066, 0.81561, 0.78134, 0.77277, 0.75995, 0.73022, 0.67126, 0.57178, 0.47000, 0.38361, 0.29419, 0.20703, 0.14734, 0.15866, 0.25162, 0.35818, 0.45062, 0.56750, 0.69748, 0.81232, 0.89697, 0.95062, 0.97656, 0.98615, 0.99191, 0.99219, 0.99243, 0.99368, 0.99368, 0.97028, 0.95566, 0.94559, 0.82617, 0.59973, 0.38361, 0.23901, 0.15338, 0.12921, 0.11206, 0.04382, -0.12946, -0.43552, -0.72644, -0.89847, -0.95465, -0.95541, -0.97229, -0.99268, -0.99319, -0.98840, -0.99142, -0.99167, -0.99091, -0.98840, -0.98965, -0.99368, -0.97455, -0.95010, -0.94684, -0.96219, -0.98514, -0.99243, -0.98889, -0.98917, -0.99142, -0.99219, -0.99091, -0.99191, -0.99142, -0.99142, -0.99191, -0.99066, -0.99167, -0.99091, -0.99142, -0.99191, -0.99091, -0.99191, -0.99091, -0.99167, -0.99167, -0.99091, -0.99219, -0.99091, -0.99191, -0.99142, -0.99118, -0.99191, -0.99066, -0.99191, -0.99091, -0.99118, -0.99243, -0.98941, -0.98462, -0.96976, -0.96320, -0.96194, -0.87305, -0.66196, -0.44809, -0.29495, -0.18085, -0.11813, -0.11334, -0.18564, -0.34885, -0.58237, -0.80450, -0.93726, -0.97806, -0.97354, -0.97531, -0.98990, -0.99368, -0.98941, -0.99219, -0.99091, -0.99142, -0.99167, -0.99091, -0.99191, -0.99118, -0.99219, -0.98236, -0.97781, -0.97656, -0.95135, -0.87204, -0.71335, -0.52139, -0.34232, -0.17783, -0.00906, 0.14886, 0.30450, 0.48889, 0.67404, 0.84030, 0.94128, 0.97681, 0.98462, 0.98337, 0.99142, 0.99521, 0.99493, 0.99420, 0.99445, 0.99521, 0.99393, 0.99545, 0.99445, 0.99521, 0.99521, 0.99445, 0.99570, 0.99445, 0.99521, 0.99469, 0.99445, 0.99521, 0.99420, 0.99521, 0.99445, 0.99445, 0.99521, 0.99445, 0.99545, 0.99445, 0.99469, 0.99493, 0.99393, 0.99493, 0.99445, 0.99393, 0.98285, 0.97781, 0.97479, 0.92844, 0.82114, 0.66095, 0.52417, 0.46826, 0.46722, 0.47934, 0.47379, 0.47076, 0.48209, 0.42014, 0.25439, 0.10074, -0.00302, -0.08966, -0.16068, -0.21436, -0.22040, -0.15137, -0.00476, 0.18536, 0.37631, 0.52292, 0.62164, 0.70425, 0.74835, 0.72366, 0.63928, 0.52567, 0.40805, 0.35666, 0.42896, 0.60175, 0.80200, 0.92743, 0.96548, 0.97632, 0.98337, 0.99066, 0.99521, 0.99420, 0.99368, 0.99292, 0.98840, 0.98083, 0.96774, 0.93323, 0.85440, 0.69470, 0.47202, 0.20425, -0.08890, -0.36423, -0.60025, -0.77481, -0.90173, -0.96017, -0.97028, -0.98108, -0.98840, -0.99219, -0.98990, -0.99219, -0.99142, -0.99142, -0.99219, -0.99091, -0.99243, -0.99066, -0.99142, -0.99142, -0.99118, -0.99191, -0.99066, -0.99167, -0.99142, -0.99142, -0.99219, -0.99091, -0.99191, -0.99118, -0.99142, -0.99191, -0.99091, -0.99191, -0.99091, -0.99167, -0.99191, -0.99118, -0.99219, -0.99091, -0.99167, -0.99142, -0.99142, -0.99219, -0.99091, -0.99191, -0.99142, -0.99118, -0.98917, -0.99042, -0.99445, -0.97330, -0.95590, -0.96219, -0.89670, -0.72241, -0.55112, -0.44809, -0.39319, -0.37833, -0.35641, -0.26270, -0.14230, -0.11282, -0.13525, -0.11536, -0.09671, -0.11511, -0.18060, -0.26874, -0.33374, -0.42215, -0.51358, -0.44785, -0.30450, -0.28613, -0.30527, -0.25037, -0.15390, -0.08286, -0.11157, -0.12592, -0.00327, 0.13803, 0.19141, 0.12820, 0.01788, -0.03952, -0.12592, -0.26773, -0.34634, -0.31384, -0.18060, -0.01080, 0.13574, 0.26120, 0.36975, 0.46573, 0.55087, 0.63626, 0.73022, 0.83072, 0.92014, 0.97177, 0.98587, 0.98413, 0.99167, 0.99445, 0.99292, 0.99219, 0.98740, 0.98007, 0.96472, 0.92239, 0.82166, 0.69067, 0.57959, 0.54962, 0.59695, 0.64255, 0.64633, 0.60629, 0.55942, 0.54910, 0.58966, 0.61887, 0.56952, 0.54181, 0.59518, 0.63248, 0.63876, 0.65463, 0.73398, 0.88312, 0.96927, 0.97101, 0.97958, 0.99344, 0.99420, 0.99268, 0.99493, 0.99469, 0.99445, 0.99521, 0.99445, 0.99545, 0.99420, 0.99493, 0.99493, 0.99420, 0.99545, 0.99420, 0.99493, 0.99420, 0.99393, 0.99420, 0.98840, 0.98309, 0.98309, 0.96069, 0.88461, 0.79370, 0.72064, 0.65765, 0.59998, 0.53247, 0.49268, 0.48615, 0.44205, 0.38034, 0.36447, 0.38715, 0.39294, 0.32645, 0.19595, 0.07782, -0.05893, -0.27832, -0.48309, -0.62619, -0.72995, -0.79999, -0.84583, -0.82166, -0.73575, -0.67227, -0.65491, -0.64960, -0.66397, -0.70175, -0.72894, -0.74658, -0.76724, -0.79520, -0.82846, -0.86523, -0.90527, -0.94382, -0.89948, -0.69849, -0.47479, -0.31662, -0.15414, -0.00729, 0.07077, 0.08237, 0.04431, -0.02292, -0.11761, -0.24307, -0.36926, -0.45087, -0.46170, -0.40250, -0.30679, -0.17529, 0.00000, 0.14331, 0.24179, 0.36774, 0.49545, 0.56522, 0.57907, 0.56775, 0.53851, 0.51132, 0.48688, 0.41913, 0.26044, 0.00955, -0.26297, -0.46396, -0.62341, -0.82214, -0.94684, -0.96774, -0.97531, -0.98413, -0.99017, -0.98990, -0.99219, -0.99066, -0.99142, -0.99167, -0.99118, -0.99219, -0.98990, -0.99118, -0.99368, -0.99142, -0.97757, -0.97403, -0.98007, -0.96170, -0.86826, -0.67783, -0.52719, -0.48788, -0.45490, -0.43146, -0.47681, -0.54105, -0.57983, -0.60904, -0.62317, -0.59949, -0.55566, -0.52063, -0.52115, -0.55112, -0.56244, -0.58337, -0.65540, -0.73373, -0.77228, -0.74759, -0.68890, -0.64609, -0.61887, -0.58060, -0.50351, -0.40729, -0.33929, -0.35110, -0.42944, -0.47028, -0.42267, -0.32718, -0.20224, -0.05640, 0.04556, 0.10529, 0.17630, 0.26169, 0.33197, 0.32138, 0.23776, 0.20956, 0.23148, 0.20352, 0.23325, 0.39267, 0.52719, 0.58438, 0.62289, 0.66345, 0.70023, 0.66296, 0.54330, 0.42618, 0.33475, 0.24533, 0.14105, 0.03851, 0.01358, 0.09143, 0.22845, 0.34961, 0.41711, 0.48740, 0.58914, 0.69519, 0.78186, 0.84357, 0.89822, 0.95389, 0.98135, 0.98615, 0.99167, 0.99243, 0.99445, 0.99420, 0.99469, 0.99493, 0.99393, 0.99545, 0.99445, 0.99521, 0.99469, 0.99445, 0.99521, 0.99420, 0.99469, 0.98965, 0.98715, 0.98563, 0.96295, 0.91736, 0.86624, 0.82367, 0.77554, 0.68411, 0.53549, 0.38916, 0.26120, 0.11435, -0.04053, -0.18161, -0.23172, -0.19394, -0.15237, -0.10730, -0.02997, 0.08588, 0.22620, 0.34305, 0.44104, 0.55740, 0.65765, 0.71259, 0.69217, 0.65363, 0.69748, 0.79572, 0.89368, 0.95514, 0.97733, 0.98413, 0.98816, 0.99243, 0.99445, 0.99243, 0.97302, 0.96674, 0.97983, 0.90378, 0.71005, 0.51056, 0.40451, 0.40982, 0.41559, 0.32996, 0.24356, 0.18866, 0.11411, 0.05365, 0.01157, -0.03247, -0.09216, -0.16095, -0.23248, -0.31662, -0.39771, -0.48663, -0.59647, -0.71536, -0.82013, -0.85287, -0.82947, -0.84937, -0.92215, -0.97177, -0.98663, -0.98816, -0.98438, -0.99091, -0.99219, -0.99091, -0.99191, -0.99042, -0.99191, -0.99091, -0.99142, -0.99191, -0.99091, -0.99191, -0.99091, -0.99167, -0.99142]) },\n        // based off an old mp3 in #modded-beepbox where someone tried to shorten the overdrive guitar into the size of other chip waves \n        // search \"normie alert\" in beepcord\n        { name: \"ultrabox shortened od guitar\", expression: 0.5, samples: centerAndNormalizeWave([-0.82785, -0.67621, -0.40268, -0.43817, -0.45468, -0.22531, -0.18329, 0.24750, 0.71246, 0.52155, 0.56082, 0.48395, 0.33990, 0.46957, 0.27744, 0.42313, 0.47104, 0.18796, 0.12930, -0.13901, -0.07431, -0.16348, -0.74857, -0.73206, -0.35181, -0.26227, -0.41882, -0.27786, -0.19806, -0.19867, 0.18643, 0.24808, 0.08847, -0.06964, 0.06912, 0.20474, -0.05304, 0.29416, 0.31967, 0.14243, 0.27521, -0.23932, -0.14752, 0.12360, -0.26123, -0.26111, 0.06616, 0.26520, 0.08090, 0.15240, 0.16254, -0.12061, 0.04562, 0.00131, 0.04050, 0.08182, -0.21729, -0.17041, -0.16312, -0.08563, 0.06390, 0.05099, 0.05627, 0.02728, 0.00726, -0.13028, -0.05673, -0.14969, -0.17645, 0.35492, 0.16766, -0.00897, 0.24326, -0.00461, -0.04456, 0.01776, -0.04950, -0.01221, 0.02039, 0.07684, 0.13397, 0.39850, 0.35962, 0.13754, 0.42310, 0.27161, -0.17609, 0.03659, 0.10635, -0.21909, -0.22046, -0.20258, -0.40973, -0.40280, -0.40521, -0.66284]) },\n    ]);\n    static chipWaves: DictionaryArray<ChipWave> = rawChipToIntegrated(Config.rawChipWaves);\n    static rawRawChipWaves: DictionaryArray<ChipWave> = Config.rawChipWaves;\n\n    static firstIndexForSamplesInChipWaveList = Config.chipWaves.length;\n\n    // Noise waves have too many samples to write by hand, they're generated on-demand by getDrumWave instead.\n    static readonly chipNoises: DictionaryArray<ChipNoise> = toNameMap([\n        { name: \"retro\", expression: 0.25, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n        { name: \"white\", expression: 1.0, basePitch: 69, pitchFilterMult: 8.0, isSoft: true, samples: null },\n        // The \"clang\" and \"buzz\" noises are based on similar noises in the modded beepbox! :D\n        { name: \"clang\", expression: 0.4, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n        { name: \"buzz\", expression: 0.3, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n        { name: \"hollow\", expression: 1.5, basePitch: 96, pitchFilterMult: 1.0, isSoft: true, samples: null },\n        { name: \"shine\", expression: 1.0, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null }, // Identical to buzz but louder. For now we're keeping it...\n        { name: \"deep\", expression: 1.5, basePitch: 120, pitchFilterMult: 1024.0, isSoft: true, samples: null },\n        { name: \"cutter\", expression: 0.005, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n        { name: \"metallic\", expression: 1.0, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n        { name: \"static\", expression: 1.0, basePitch: 96, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n        // technically these are from the pandorasbox beta but whatever\n        { name: \"1-bit white\", expression: 0.5, basePitch: 74.41, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n        { name: \"1-bit metallic\", expression: 0.5, basePitch: 86.41, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n        // ultrabox noises\n        { name: \"crackling\", expression: 0.9, basePitch: 69, pitchFilterMult: 1024.0, isSoft: false, samples: null },\n        { name: \"pink\", expression: 1.0, basePitch: 69, pitchFilterMult: 8.0, isSoft: true, samples: null },\n        { name: \"brownian\", expression: 1.0, basePitch: 69, pitchFilterMult: 8.0, isSoft: true, samples: null },\n    ]);\n\n    static readonly filterFreqStep = 1.0 / 4.0;\n    static readonly filterFreqRange = 34;\n    static readonly filterFreqReferenceSetting = 28;\n    static readonly filterFreqReferenceHz = 8000.0;\n    static readonly filterFreqMaxHz = Config.filterFreqReferenceHz * Math.pow(2.0, Config.filterFreqStep * (Config.filterFreqRange - 1 - Config.filterFreqReferenceSetting)); // ~19khz\n    static readonly filterFreqMinHz = 8.0;\n    static readonly filterGainRange = 15;\n    static readonly filterGainCenter = 7;\n    static readonly filterGainStep = 1.0 / 2.0;\n    static readonly filterMaxPoints = 8;\n    static readonly filterTypeNames: ReadonlyArray<string> = [\"low-pass\", \"high-pass\", \"peak\"]; // See FilterType enum above.\n    static readonly filterMorphCount = 10; // Number of filter shapes allowed for modulating between. Counts the 0/default position.\n\n    static readonly filterSimpleCutRange = 11;\n    static readonly filterSimplePeakRange = 8;\n\n    static readonly fadeInRange = 10;\n    static readonly fadeOutTicks: ReadonlyArray<number> = [-24, -12, -6, -3, -1, 6, 12, 24, 48, 72, 96];\n    static readonly fadeOutNeutral = 4;\n    static readonly drumsetFadeOutTicks = 48;\n    static readonly transitions: DictionaryArray<Transition> = toNameMap([\n        { name: \"normal\", isSeamless: false, continues: false, slides: false, slideTicks: 3, includeAdjacentPatterns: false },\n        { name: \"interrupt\", isSeamless: true, continues: false, slides: false, slideTicks: 3, includeAdjacentPatterns: true },\n        { name: \"continue\", isSeamless: true, continues: true, slides: false, slideTicks: 3, includeAdjacentPatterns: true },\n        { name: \"slide\", isSeamless: true, continues: false, slides: true, slideTicks: 3, includeAdjacentPatterns: true },\n        { name: \"slide in pattern\", isSeamless: true, continues: false, slides: true, slideTicks: 3, includeAdjacentPatterns: false }\n    ]);\n    static readonly vibratos: DictionaryArray<Vibrato> = toNameMap([\n        { name: \"none\", amplitude: 0.0, type: 0, delayTicks: 0 },\n        { name: \"light\", amplitude: 0.15, type: 0, delayTicks: 0 },\n        { name: \"delayed\", amplitude: 0.3, type: 0, delayTicks: 37 }, // It will fade in over the previous two ticks.\n        { name: \"heavy\", amplitude: 0.45, type: 0, delayTicks: 0 },\n        { name: \"shaky\", amplitude: 0.1, type: 1, delayTicks: 0 },\n        //    { name: \"very shaky\", amplitude: 1, type: 0, delayTicks: 0 },\n        //{ name: \"insane\", amplitude: 10, type: 1, delayTicks: 0 },\n        //todbox vibratos\n        //\t{ name: \"super insane\", amplitude: 30, type: 1, delayTicks: 1 },\n        //wackybox\n        //\t { name: \"quiver\", amplitude: 0.001, type: 0, delayTicks: 0 },\n        //  { name: \"wub-wub\", amplitude: 10.0, type: 0, delayTicks: 0 },\n        //     { name: \"quiver delayed\", amplitude: 0.001, type: 0, delayTicks: 18 },\n        //  { name: \"vibrate\", amplitude: 0.08, type: 0, delayTicks: 0 },\n        //    { name: \"too much wub\", amplitude: 30.0, type: 0, delayTicks: 18 },\n        //too much wub breaks things just a little bit at it's original amplitude\n        //sandbox\n    ]);\n    static readonly vibratoTypes: DictionaryArray<VibratoType> = toNameMap([\n        { name: \"normal\", periodsSeconds: [0.14], period: 0.14 },\n        { name: \"shaky\", periodsSeconds: [0.11, 1.618 * 0.11, 3 * 0.11], period: 266.97 }, // LCM of all periods\n    ]);\n    // This array is more or less a linear step by 0.1 but there's a bit of range added at the start to hit specific ratios, and the end starts to grow faster.\n    //                                                      0       1      2    3     4      5    6    7      8     9   10   11 12   13   14   15   16   17   18   19   20   21 22   23   24   25   26   27   28   29   30   31 32   33   34   35   36   37   38    39  40   41 42    43   44   45   46 47   48 49 50\n    static readonly arpSpeedScale: ReadonlyArray<number> = [0, 0.0625, 0.125, 0.2, 0.25, 1 / 3, 0.4, 0.5, 2 / 3, 0.75, 0.8, 0.9, 1, 1.1, 1.2, 1.3, 1.4, 1.5, 1.6, 1.7, 1.8, 1.9, 2, 2.1, 2.2, 2.3, 2.4, 2.5, 2.6, 2.7, 2.8, 2.9, 3, 3.1, 3.2, 3.3, 3.4, 3.5, 3.6, 3.7, 3.8, 3.9, 4, 4.15, 4.3, 4.5, 4.8, 5, 5.5, 6, 8];\n    static readonly unisons: DictionaryArray<Unison> = toNameMap([\n        { name: \"none\", voices: 1, spread: 0.0, offset: 0.0, expression: 1.4, sign: 1.0 },\n        { name: \"shimmer\", voices: 2, spread: 0.018, offset: 0.0, expression: 0.8, sign: 1.0 },\n        { name: \"hum\", voices: 2, spread: 0.045, offset: 0.0, expression: 1.0, sign: 1.0 },\n        { name: \"honky tonk\", voices: 2, spread: 0.09, offset: 0.0, expression: 1.0, sign: 1.0 },\n        { name: \"dissonant\", voices: 2, spread: 0.25, offset: 0.0, expression: 0.9, sign: 1.0 },\n        { name: \"fifth\", voices: 2, spread: 3.5, offset: 3.5, expression: 0.9, sign: 1.0 },\n        { name: \"octave\", voices: 2, spread: 6.0, offset: 6.0, expression: 0.8, sign: 1.0 },\n        { name: \"bowed\", voices: 2, spread: 0.02, offset: 0.0, expression: 1.0, sign: -1.0 },\n        { name: \"piano\", voices: 2, spread: 0.01, offset: 0.0, expression: 1.0, sign: 0.7 },\n        { name: \"warbled\", voices: 2, spread: 0.25, offset: 0.05, expression: 0.9, sign: -0.8 },\n        { name: \"hecking gosh\", voices: 2, spread: 6.25, offset: -6.0, expression: 0.8, sign: -0.7 },\n        { name: \"spinner\", voices: 2, spread: 0.02, offset: 0.0, expression: 1.0, sign: 1.0 },\n        { name: \"detune\", voices: 1, spread: 0.0, offset: 0.25, expression: 1.0, sign: 1.0 },\n        { name: \"rising\", voices: 2, spread: 1.0, offset: 0.7, expression: 0.95, sign: 1.0 },\n        { name: \"vibrate\", voices: 2, spread: 3.5, offset: 7, expression: 0.975, sign: 1.0 },\n        { name: \"fourths\", voices: 2, spread: 4, offset: 4, expression: 0.95, sign: 1.0 },\n        { name: \"bass\", voices: 1, spread: 0, offset: -7, expression: 1.0, sign: 1.0 },\n        { name: \"dirty\", voices: 2, spread: 0, offset: 0.1, expression: 0.975, sign: 1.0 },\n        { name: \"stationary\", voices: 2, spread: 3.5, offset: 0.0, expression: 0.9, sign: 1.0 },\n        { name: \"recurve\", voices: 2, spread: 0.005, offset: 0.0, expression: 1.0, sign: 1.0 },\n        { name: \"voiced\", voices: 2, spread: 9.5, offset: 0.0, expression: 1.0, sign: 1.0 },\n        { name: \"fluctuate\", voices: 2, spread: 12, offset: 0.0, expression: 1.0, sign: 1.0 },\n        { name: \"thin\", voices: 1, spread: 0.0, offset: 50.0, expression: 1.0, sign: 1.0 },\n        { name: \"inject\", voices: 2, spread: 6.0, offset: 0.4, expression: 1.0, sign: 1.0 },\n        { name: \"askewed\", voices: 2, spread: 0.0, offset: 0.42, expression: 0.7, sign: 1.0 },\n        { name: \"resonance\", voices: 2, spread: 0.0025, offset: 0.1, expression: 0.8, sign: -1.5 },\n        { name: \"FART\", voices: 2, spread: 13, offset: -5, expression: 1.0, sign: -3 },\n        { name: \"augmented\", voices: 4, spread: 6, offset: 6, expression: 0.5, sign: 1.0 },\n        { name: \"diminished\", voices: 5, spread: 6, offset: 6, expression: 0.4, sign: 1.0 },\n        { name: \"chorus\", voices: 9, spread: 0.22, offset: 0, expression: 0.15, sign: 1.0 },\n        { name: \"block\", voices: 9, spread: 6, offset: 6, expression: 0.15, sign: 0.8 },\n        { name: \"extraterrestrial\", voices: 6, spread: 15.2, offset: -6, expression: 0.35, sign: 0.7 },\n        { name: \"bow\", voices: 9, spread: 0.006, offset: 0, expression: 0.15, sign: 0.5 }\n\n        //for modbox; voices = riffapp, spread = intervals, offset = offsets, expression = volume, and sign = signs\n    ]);\n    static readonly effectNames: ReadonlyArray<string> = [\"reverb\", \"chorus\", \"panning\", \"distortion\", \"bitcrusher\", \"post eq\", \"echo\", \"ring mod\", \"granular\", \"gain\", \"flanger\"];\n    static readonly effectDisplayNames: ReadonlyArray<string> = [\"Reverb\", \"Chorus\", \"Panning\", \"Distortion\", \"Bitcrusher\", \"Post EQ\", \"Echo\", \"Ring Mod\", \"Granular\", \"Gain\", \"Flanger\"];\n    static readonly effectOrder: ReadonlyArray<EffectType> = [EffectType.reverb, EffectType.chorus, EffectType.panning, EffectType.distortion, EffectType.bitcrusher, EffectType.eqFilter, EffectType.echo, EffectType.ringModulation, EffectType.granular, EffectType.gain, EffectType.flanger];\n    static readonly effectCount: 11\n    static readonly mdeffectNames: ReadonlyArray<string> = [\"pitch shift\", \"detune\", \"vibrato\", \"transition type\", \"chord type\", \"note range\"];\n    static readonly mdeffectOrder: ReadonlyArray<MDEffectType> = [MDEffectType.transition, MDEffectType.chord, MDEffectType.pitchShift, MDEffectType.detune, MDEffectType.vibrato, MDEffectType.noteRange];\n    static readonly mdeffectCount: 6\n    static readonly noteSizeMax = 6;\n    static readonly volumeRange = 100;\n    // Beepbox's old volume scale used factor -0.5 and was [0~7] had roughly value 6 = 0.125 power. This new value is chosen to have -21 be the same,\n    // given that the new scale is [-25~25]. This is such that conversion between the scales is roughly equivalent by satisfying (0.5*6 = 0.1428*21)\n    static readonly volumeLogScale = 0.0714;\n    static readonly gainRangeMult = 2;\n    static readonly panCenter = 50;\n    static readonly panMax = Config.panCenter * 2;\n    static readonly panDelaySecondsMax = 0.001;\n    static readonly ringModRange = 8;\n    static readonly ringModHzRange = 64;\n    static readonly ringModMinHz = 20;\n    static readonly ringModMaxHz = 4400;\n    static readonly rmHzOffsetCenter = 200;\n    static readonly rmHzOffsetMax = 400;\n    static readonly rmHzOffsetMin = 0;\n    static readonly granularRange = 10;\n    static readonly grainSizeMin = 40;\n    static readonly grainSizeMax = 2000;\n    static readonly grainSizeStep = 40;\n    static readonly grainRangeMax = 1600;\n    static readonly grainAmountsMax = 10; //2^grainAmountsMax is what is actually used\n    static readonly granularEnvelopeType = GranularEnvelopeType.parabolic; //here you can change which envelope implementation is used for grains (RaisedCosineBell still needs work)\n    static readonly flangerRange = 24;\n    static readonly flangerSpeedRange = 16;\n    static readonly flangerDepthRange = 16;\n    static readonly flangerFeedbackRange = 16;\n    static readonly flangerMaxDelay = 0.0034 * 4.35;\n    static readonly flangerPeriodMult = 0.000004;\n    static readonly flangerVolumeMult = 0.45;\n    static readonly chorusRange = 24;\n    static readonly chorusPeriodSeconds = 2.0;\n    static readonly chorusDelayRange = 0.0034;\n    static readonly chorusDelayOffsets: ReadonlyArray<ReadonlyArray<number>> = [[1.51, 2.10, 3.35], [1.47, 2.15, 3.25]];\n    static readonly chorusPhaseOffsets: ReadonlyArray<ReadonlyArray<number>> = [[0.0, 2.1, 4.2], [3.2, 5.3, 1.0]];\n    static readonly chorusMaxDelay = Config.chorusDelayRange * (1.0 + Config.chorusDelayOffsets[0].concat(Config.chorusDelayOffsets[1]).reduce((x, y) => Math.max(x, y)));\n    static readonly chords: DictionaryArray<Chord> = toNameMap([\n        { name: \"simultaneous\", customInterval: false, arpeggiates: false, strumParts: 0, singleTone: false },\n        { name: \"strum\", customInterval: false, arpeggiates: false, strumParts: 1, singleTone: false },\n        { name: \"arpeggio\", customInterval: false, arpeggiates: true, strumParts: 0, singleTone: true },\n        { name: \"custom interval\", customInterval: true, arpeggiates: false, strumParts: 0, singleTone: true },\n        { name: \"monophonic\", customInterval: false, arpeggiates: false, strumParts: 0, singleTone: true }\n    ]);\n    static readonly maxChordSize = 9;\n    static readonly operatorCount = 4;\n    static readonly maxPitchOrOperatorCount = Math.max(Config.maxChordSize, Config.operatorCount + 2);\n    static readonly algorithms: DictionaryArray<Algorithm> = toNameMap([\n        { name: \"1\u2190(2\u20023\u20024)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3, 4], [], [], []] },\n        { name: \"1\u2190(2\u20023\u21904)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3], [], [4], []] },\n        { name: \"1\u21902\u2190(3\u20024)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2], [3, 4], [], []] },\n        { name: \"1\u2190(2\u20023)\u21904\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2, 3], [4], [4], []] },\n        { name: \"1\u21902\u21903\u21904\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1], modulatedBy: [[2], [3], [4], []] },\n        { name: \"1\u21903\u20032\u21904\", carrierCount: 2, associatedCarrier: [1, 2, 1, 2], modulatedBy: [[3], [4], [], []] },\n        { name: \"1\u20032\u2190(3\u20024)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[], [3, 4], [], []] },\n        { name: \"1\u20032\u21903\u21904\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[], [3], [4], []] },\n        { name: \"(1\u20022)\u21903\u21904\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[3], [3], [4], []] },\n        { name: \"(1\u20022)\u2190(3\u20024)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2], modulatedBy: [[3, 4], [3, 4], [], []] },\n        { name: \"1\u20032\u20033\u21904\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[], [], [4], []] },\n        { name: \"(1\u20022\u20023)\u21904\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[4], [4], [4], []] },\n        { name: \"1\u20032\u20033\u20034\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4], modulatedBy: [[], [], [], []] },\n        { name: \"1\u2190(2 3)\u20032\u21904\", carrierCount: 2, associatedCarrier: [1, 2, 1, 2], modulatedBy: [[2, 3], [4], [], []] },\n        { name: \"1\u2190(2 (3 (4\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3], modulatedBy: [[2, 3, 4], [3, 4], [4], []] },\n    ]);\n    static readonly algorithms6Op: DictionaryArray<Algorithm> = toNameMap([\n        //placeholder makes life easier for later\n        { name: \"Custom\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4, 5, 6], [], [], [], [], []] },\n        //yoinked from SynthBox\n        //algortihm Section 1\n        { name: \"1\u21902\u21903\u21904\u21905\u21906\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2], [3], [4], [5], [6], []] },\n        { name: \"1\u21903\u20032\u21904\u21905\u21906\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4], [], [5], [6], []] },\n        { name: \"1\u21903\u21904\u20032\u21905\u21906\", carrierCount: 2, associatedCarrier: [1, 1, 1, 2, 2, 2], modulatedBy: [[3], [5], [4], [], [6], []] },\n        { name: \"1\u21904\u20032\u21905\u20033\u21906\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[4], [5], [6], [], [], []] },\n        //Algorithm Section 2\n        { name: \"1\u21903\u20022\u2190(4\u20025\u21906)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4, 5], [], [], [6], []] },\n        { name: \"1\u2190(3\u20024)\u20022\u21905\u21906\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3, 4], [5], [], [], [6], []] },\n        { name: \"1\u21903\u20022\u2190(4\u20025\u20026)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4, 5, 6], [], [], [], []] },\n        { name: \"1\u21903\u20022\u2190(4\u20025)\u21906\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4, 5], [], [6], [6], []] },\n        { name: \"1\u21903\u20022\u21904\u2190(5\u20026)\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3], [4], [], [5, 6], [], []] },\n        { name: \"1\u2190(2\u20023\u20024\u20025\u20026)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4, 5, 6], [], [], [], [], []] },\n        { name: \"1\u2190(2\u20023\u21905\u20024\u21906)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4], [], [5], [6], [], []] },\n        { name: \"1\u2190(2\u20023\u20024\u21905\u21906)\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4], [], [], [5], [6], []] },\n        //Algorithm Section 3\n        { name: \"1\u21904\u21905\u2003(2\u20033)\u21906\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[4], [6], [6], [5], [], []] },\n        { name: \"1\u2190(3\u20034)\u21905 2\u21906\", carrierCount: 2, associatedCarrier: [1, 2, 2, 2, 2, 2], modulatedBy: [[3, 4], [6], [5], [5], [], []] },\n        { name: \"(1\u20032)\u21904\u20033\u2190(5\u20036)\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[4], [4], [5, 6], [], [], []] },\n        { name: \"(1\u20032)\u21905\u2003(3\u20034)\u21906\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[5], [5], [6], [6], [], []] },\n        { name: \"(1\u20032\u20033)\u2190(4\u20035\u20036)\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[4, 5, 6], [4, 5, 6], [4, 5, 6], [], [], []] },\n        { name: \"1\u21905\u2003(2\u20033\u20034)\u21906\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[5], [6], [6], [6], [], []] },\n        { name: \"1\u20032\u21905\u2003(3\u20034)\u21906\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[], [5], [6], [6], [], []] },\n        { name: \"1\u20032\u2003(3\u20034\u20035)\u21906\", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[], [], [6], [6], [6], []] },\n        { name: \"1\u20032\u20033\u2003(4\u20035)\u21906\", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[], [], [], [6], [6], []] },\n        //Algorithm Section 3\n        { name: \"1\u20032\u21904\u20033\u2190(5\u20036)\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3, 3, 3], modulatedBy: [[], [4], [5, 6], [], [], []] },\n        { name: \"1\u21904\u20032\u2190(5\u20036)\u20033\", carrierCount: 3, associatedCarrier: [1, 2, 3, 3, 3, 3,], modulatedBy: [[4], [5, 6], [], [], [], []] },\n        { name: \"1\u20032\u20033\u21905\u20034\u21906\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[], [], [5], [6], [], []] },\n        { name: \"1\u2003(2\u20033)\u21905\u21906\u20034\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4,], modulatedBy: [[], [5], [5], [], [6], []] },\n        { name: \"1\u20032\u20033\u21905\u21906\u20034\", carrierCount: 4, associatedCarrier: [1, 2, 3, 4, 4, 4], modulatedBy: [[], [], [5, 6], [], [], []] },\n        { name: \"(1\u20032\u20033\u20034\u20035)\u21906\", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[6], [6], [6], [6], [6], []] },\n        { name: \"1\u20032\u20033\u20034\u20035\u21906\", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[], [], [], [], [6], []] },\n        { name: \"1\u20032\u20033\u20034\u20035\u20036\", carrierCount: 6, associatedCarrier: [1, 2, 3, 4, 5, 6], modulatedBy: [[], [], [], [], [], []] },\n        //Section 4 where we take our own previous ones for 4op and it gets weird\n        { name: \"1\u2190(2 (3 (4 (5 (6\", carrierCount: 5, associatedCarrier: [1, 2, 3, 4, 5, 5], modulatedBy: [[2, 3, 4, 5, 6], [3, 4, 5, 6], [4, 5, 6], [5, 6], [6], []] },\n        { name: \"1\u2190(2(3(4(5(6\", carrierCount: 1, associatedCarrier: [1, 1, 1, 1, 1, 1], modulatedBy: [[2, 3, 4, 5, 6], [3, 4, 5, 6], [4, 5, 6], [5, 6], [6], []] },\n        { name: \"1\u21904(2\u21905(3\u21906\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[2, 3, 4], [3, 5], [6], [], [], []] },\n        { name: \"1\u21904(2\u21905 3\u21906\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[2, 3, 4], [5], [6], [], [], []] },\n    ]);\n    static readonly operatorCarrierInterval: ReadonlyArray<number> = [0.0, 0.04, -0.073, 0.091, 0.061, 0.024];\n    static readonly operatorAmplitudeMax = 15;\n    static readonly operatorFrequencies: DictionaryArray<OperatorFrequency> = toNameMap([\n        { name: \"0.12\u00D7\", mult: 0.125, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"0.25\u00D7\", mult: 0.25, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"0.5\u00D7\", mult: 0.5, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"0.75\u00D7\", mult: 0.75, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"1\u00D7\", mult: 1.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"~1\u00D7\", mult: 1.0, hzOffset: 1.5, amplitudeSign: -1.0 },\n        { name: \"2\u00D7\", mult: 2.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"~2\u00D7\", mult: 2.0, hzOffset: -1.3, amplitudeSign: -1.0 },\n        { name: \"3\u00D7\", mult: 3.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"3.5\u00D7\", mult: 3.5, hzOffset: -0.05, amplitudeSign: 1.0 },\n        { name: \"4\u00D7\", mult: 4.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"~4\u00D7\", mult: 4.0, hzOffset: -2.4, amplitudeSign: -1.0 },\n        { name: \"5\u00D7\", mult: 5.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"6\u00D7\", mult: 6.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"7\u00D7\", mult: 7.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"8\u00D7\", mult: 8.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"9\u00D7\", mult: 9.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"10\u00D7\", mult: 10.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"11\u00D7\", mult: 11.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"12\u00D7\", mult: 12.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"13\u00D7\", mult: 13.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"14\u00D7\", mult: 14.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"15\u00D7\", mult: 15.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        //ultrabox\n        { name: \"16\u00D7\", mult: 16.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"17\u00D7\", mult: 17.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        //ultrabox\n        { name: \"18\u00D7\", mult: 18.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"19\u00D7\", mult: 19.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        //ultrabox\n        { name: \"20\u00D7\", mult: 20.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"~20\u00D7\", mult: 20.0, hzOffset: -5.0, amplitudeSign: -1.0 },\n        // dogebox (maybe another mod also adds this? I got it from dogebox)\n        { name: \"25\u00D7\", mult: 25.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"50\u00D7\", mult: 50.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"75\u00D7\", mult: 75.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"100\u00D7\", mult: 100.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        //50 and 100 are from dogebox\n        //128 and 256 from slarmoo's box\n        { name: \"128\u00D7\", mult: 128.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n        { name: \"256\u00D7\", mult: 250.0, hzOffset: 0.0, amplitudeSign: 1.0 },\n    ]);\n\n    //still used for drumsets\n    static readonly envelopes: DictionaryArray<Envelope> = toNameMap([\n        { name: \"none\", type: EnvelopeType.none, speed: 0.0 },\n        { name: \"note size\", type: EnvelopeType.noteSize, speed: 0.0 },\n        { name: \"pitch\", type: EnvelopeType.pitch, speed: 0.0 }, // Slarmoo's box (fairly useless on drumsets)\n        { name: \"punch\", type: EnvelopeType.punch, speed: 0.0 },\n        { name: \"flare -1\", type: EnvelopeType.flare, speed: 128.0 },\n        { name: \"flare 1\", type: EnvelopeType.flare, speed: 32.0 },\n        { name: \"flare 2\", type: EnvelopeType.flare, speed: 8.0 },\n        { name: \"flare 3\", type: EnvelopeType.flare, speed: 2.0 },\n        { name: \"twang -1\", type: EnvelopeType.twang, speed: 128.0 },\n        { name: \"twang 1\", type: EnvelopeType.twang, speed: 32.0 },\n        { name: \"twang 2\", type: EnvelopeType.twang, speed: 8.0 },\n        { name: \"twang 3\", type: EnvelopeType.twang, speed: 2.0 },\n        { name: \"swell -1\", type: EnvelopeType.swell, speed: 128.0 },\n        { name: \"swell 1\", type: EnvelopeType.swell, speed: 32.0 },\n        { name: \"swell 2\", type: EnvelopeType.swell, speed: 8.0 },\n        { name: \"swell 3\", type: EnvelopeType.swell, speed: 2.0 },\n        { name: \"tremolo0\", type: EnvelopeType.lfo, speed: 8.0 },\n        { name: \"tremolo1\", type: EnvelopeType.lfo, speed: 4.0 },\n        { name: \"tremolo2\", type: EnvelopeType.lfo, speed: 2.0 },\n        { name: \"tremolo3\", type: EnvelopeType.lfo, speed: 1.0 },\n        { name: \"tremolo4\", type: EnvelopeType.tremolo2, speed: 4.0 },\n        { name: \"tremolo5\", type: EnvelopeType.tremolo2, speed: 2.0 },\n        { name: \"tremolo6\", type: EnvelopeType.tremolo2, speed: 1.0 },\n        { name: \"decay -1\", type: EnvelopeType.decay, speed: 40.0 },\n        { name: \"decay 1\", type: EnvelopeType.decay, speed: 10.0 },\n        { name: \"decay 2\", type: EnvelopeType.decay, speed: 7.0 },\n        { name: \"decay 3\", type: EnvelopeType.decay, speed: 4.0 },\n        { name: \"wibble-1\", type: EnvelopeType.wibble, speed: 128.0 }, //Changed speed from 96 to 128. I forgot to include a 96 earlier, and now it's too late to add one, so we have this now. Hopefully no one notices\n        { name: \"wibble 1\", type: EnvelopeType.wibble, speed: 24.0 },\n        { name: \"wibble 2\", type: EnvelopeType.wibble, speed: 12.0 },\n        { name: \"wibble 3\", type: EnvelopeType.wibble, speed: 4.0 },\n        { name: \"linear-2\", type: EnvelopeType.linear, speed: 256.0 },\n        { name: \"linear-1\", type: EnvelopeType.linear, speed: 128.0 },\n        { name: \"linear 1\", type: EnvelopeType.linear, speed: 32.0 },\n        { name: \"linear 2\", type: EnvelopeType.linear, speed: 8.0 },\n        { name: \"linear 3\", type: EnvelopeType.linear, speed: 2.0 },\n        { name: \"rise -2\", type: EnvelopeType.rise, speed: 256.0 },\n        { name: \"rise -1\", type: EnvelopeType.rise, speed: 128.0 },\n        { name: \"rise 1\", type: EnvelopeType.rise, speed: 32.0 },\n        { name: \"rise 2\", type: EnvelopeType.rise, speed: 8.0 },\n        { name: \"rise 3\", type: EnvelopeType.rise, speed: 2.0 },\n        // modbox\n        { name: \"flute 1\", type: EnvelopeType.wibble, speed: 16.0 },\n        { name: \"flute 2\", type: EnvelopeType.wibble, speed: 8.0 },\n        { name: \"flute 3\", type: EnvelopeType.wibble, speed: 4.0 },\n        // sandbox\n        { name: \"tripolo1\", type: EnvelopeType.lfo, speed: 9.0 },\n        { name: \"tripolo2\", type: EnvelopeType.lfo, speed: 6.0 },\n        { name: \"tripolo3\", type: EnvelopeType.lfo, speed: 3.0 },\n        { name: \"tripolo4\", type: EnvelopeType.tremolo2, speed: 9.0 },\n        { name: \"tripolo5\", type: EnvelopeType.tremolo2, speed: 6.0 },\n        { name: \"tripolo6\", type: EnvelopeType.tremolo2, speed: 3.0 },\n        { name: \"pentolo1\", type: EnvelopeType.lfo, speed: 10.0 },\n        { name: \"pentolo2\", type: EnvelopeType.lfo, speed: 5.0 },\n        { name: \"pentolo3\", type: EnvelopeType.lfo, speed: 2.5 },\n        { name: \"pentolo4\", type: EnvelopeType.tremolo2, speed: 10.0 },\n        { name: \"pentolo5\", type: EnvelopeType.tremolo2, speed: 5.0 },\n        { name: \"pentolo6\", type: EnvelopeType.tremolo2, speed: 2.5 },\n        // todbox\n        { name: \"flutter 1\", type: EnvelopeType.lfo, speed: 14.0 },\n        { name: \"flutter 2\", type: EnvelopeType.tremolo2, speed: 11.0 },\n        { name: \"water-y flutter\", type: EnvelopeType.lfo, speed: 9.0 },\n        // new jummbox\n        { name: \"blip 1\", type: EnvelopeType.blip, speed: 6.0 },\n        { name: \"blip 2\", type: EnvelopeType.blip, speed: 16.0 },\n        { name: \"blip 3\", type: EnvelopeType.blip, speed: 32.0 },\n        // Slarmoo's Box\n        { name: \"fall 1\", type: EnvelopeType.fall, speed: 8.0 },\n        { name: \"fall 2\", type: EnvelopeType.fall, speed: 4.0 },\n        { name: \"fall 3\", type: EnvelopeType.fall, speed: 2.0 },\n    ]);\n\n    static readonly newEnvelopes: DictionaryArray<Envelope> = toNameMap([\n        { name: \"none\", type: EnvelopeType.none, speed: 0.0 },\n        { name: \"note size\", type: EnvelopeType.noteSize, speed: 0.0 },\n        { name: \"pitch\", type: EnvelopeType.pitch, speed: 0.0 },\n        { name: \"random\", type: EnvelopeType.pseudorandom, speed: 4.0 }, //Slarmoo's box 1.3\n        { name: \"punch\", type: EnvelopeType.punch, speed: 0.0 },\n        { name: \"flare\", type: EnvelopeType.flare, speed: 32.0 },\n        { name: \"twang\", type: EnvelopeType.twang, speed: 32.0 },\n        { name: \"swell\", type: EnvelopeType.swell, speed: 32.0 },\n        { name: \"lfo\", type: EnvelopeType.lfo, speed: 4.0 }, //replaced tremolo and tremolo2\n        // { name: \"tremolo2\", type: EnvelopeType.tremolo2, speed: 4.0 }, //removed Slarmoo's Box 1.3\n        { name: \"decay\", type: EnvelopeType.decay, speed: 10.0 },\n        { name: \"wibble\", type: EnvelopeType.wibble, speed: 24.0 },\n        { name: \"linear\", type: EnvelopeType.linear, speed: 32.0 },\n        { name: \"rise\", type: EnvelopeType.rise, speed: 32.0 },\n        { name: \"blip\", type: EnvelopeType.blip, speed: 6.0 },\n        { name: \"fall\", type: EnvelopeType.fall, speed: 2.0 },\n    ]);\n\n\n\n    static readonly feedbacks: DictionaryArray<Feedback> = toNameMap([\n        { name: \"1\u27F2\", indices: [[1], [], [], []] },\n        { name: \"2\u27F2\", indices: [[], [2], [], []] },\n        { name: \"3\u27F2\", indices: [[], [], [3], []] },\n        { name: \"4\u27F2\", indices: [[], [], [], [4]] },\n        { name: \"1\u27F2\u20032\u27F2\", indices: [[1], [2], [], []] },\n        { name: \"3\u27F2\u20034\u27F2\", indices: [[], [], [3], [4]] },\n        { name: \"1\u27F2\u20032\u27F2\u20033\u27F2\", indices: [[1], [2], [3], []] },\n        { name: \"2\u27F2\u20033\u27F2\u20034\u27F2\", indices: [[], [2], [3], [4]] },\n        { name: \"1\u27F2 2\u27F2 3\u27F2 4\u27F2\", indices: [[1], [2], [3], [4]] },\n        { name: \"1\u21922\", indices: [[], [1], [], []] },\n        { name: \"1\u21923\", indices: [[], [], [1], []] },\n        { name: \"1\u21924\", indices: [[], [], [], [1]] },\n        { name: \"2\u21923\", indices: [[], [], [2], []] },\n        { name: \"2\u21924\", indices: [[], [], [], [2]] },\n        { name: \"3\u21924\", indices: [[], [], [], [3]] },\n        { name: \"1\u21923\u20032\u21924\", indices: [[], [], [1], [2]] },\n        { name: \"1\u21924\u20032\u21923\", indices: [[], [], [2], [1]] },\n        { name: \"1\u21922\u21923\u21924\", indices: [[], [1], [2], [3]] },\n        { name: \"1\u21942 3\u21944\", indices: [[2], [1], [4], [3]] },\n        { name: \"1\u21944 2\u21943\", indices: [[4], [3], [2], [1]] },\n        { name: \"2\u21921\u21924\u21923\u21922\", indices: [[2], [3], [4], [1]] },\n        { name: \"1\u21922\u21923\u21924\u21921\", indices: [[4], [1], [2], [3]] },\n        { name: \"(1 2 3)\u21924\", indices: [[], [], [], [1, 2, 3]] },\n        { name: \"ALL\", indices: [[1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4], [1, 2, 3, 4]] },\n    ]);\n    static readonly feedbacks6Op: DictionaryArray<Feedback> = toNameMap([\n        //placeholder makes life easier for later\n        { name: \"Custom\", indices: [[2, 3, 4, 5, 6], [], [], [], [], []] },\n\n        { name: \"1\u27F2\", indices: [[1], [], [], [], [], []] },\n        { name: \"2\u27F2\", indices: [[], [2], [], [], [], []] },\n        { name: \"3\u27F2\", indices: [[], [], [3], [], [], []] },\n        { name: \"4\u27F2\", indices: [[], [], [], [4], [], []] },\n        { name: \"5\u27F2\", indices: [[], [], [], [], [5], []] },\n        { name: \"6\u27F2\", indices: [[], [], [], [], [], [6]] },\n        { name: \"1\u27F2\u20022\u27F2\", indices: [[1], [2], [], [], [], []] },\n        { name: \"3\u27F2\u20024\u27F2\", indices: [[], [], [3], [4], [], []] },\n        { name: \"1\u27F2\u20022\u27F2\u20023\u27F2\", indices: [[1], [2], [3], [], [], []] },\n        { name: \"2\u27F2\u20023\u27F2\u20024\u27F2\", indices: [[], [2], [3], [4], [], []] },\n        { name: \"1\u27F2 2\u27F2 3\u27F2 4\u27F2\", indices: [[1], [2], [3], [4], [], []] },\n        { name: \"1\u27F2 2\u27F2 3\u27F2 4\u27F2 5\u27F2\", indices: [[1], [2], [3], [4], [5], []] },\n        { name: \"1\u27F2 2\u27F2 3\u27F2 4\u27F2 5\u27F2 6\u27F2\", indices: [[1], [2], [3], [4], [5], [6]] },\n        { name: \"1\u21922\", indices: [[], [1], [], [], [], []] },\n        { name: \"1\u21923\", indices: [[], [], [1], [], [], []] },\n        { name: \"1\u21924\", indices: [[], [], [], [1], [], []] },\n        { name: \"1\u21925\", indices: [[], [], [], [], [1], []] },\n        { name: \"1\u21926\", indices: [[], [], [], [], [], [1]] },\n        { name: \"2\u21923\", indices: [[], [], [2], [], [], []] },\n        { name: \"2\u21924\", indices: [[], [], [], [2], [], []] },\n        { name: \"3\u21924\", indices: [[], [], [], [3], [], []] },\n        { name: \"4\u21925\", indices: [[], [], [], [], [4], []] },\n        { name: \"1\u21924\u20022\u21925 3\u21926\", indices: [[], [], [], [1], [2], [3]] },\n        { name: \"1\u21925\u20022\u21926 3\u21924\", indices: [[], [], [], [3], [1], [2]] },\n        { name: \"1\u21922\u21923\u21924\u21925\u21926\", indices: [[], [1], [2], [3], [4], [5]] },\n        { name: \"2\u21921\u21926\u21925\u21924\u21923\u21922\", indices: [[2], [3], [4], [5], [6], [1]] },\n        { name: \"1\u21922\u21923\u21924\u21925\u21926\u21921\", indices: [[6], [1], [2], [3], [4], [5]] },\n        { name: \"1\u21942 3\u21944 5\u21946\", indices: [[2], [1], [4], [3], [6], [5]] },\n        { name: \"1\u21944 2\u21945 3\u21946\", indices: [[4], [5], [6], [1], [2], [3]] },\n        { name: \"(1,2,3,4,5)\u21926\", indices: [[], [], [], [], [], [1, 2, 3, 4, 5]] },\n        { name: \"ALL\", indices: [[1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6], [1, 2, 3, 4, 5, 6]] },\n    ]);\n    static readonly chipNoiseLength = 1 << 15; // 32768\n    static readonly spectrumNoiseLength = 1 << 15; // 32768\n    static readonly spectrumBasePitch = 24;\n    static readonly spectrumControlPoints = 30;\n    static readonly spectrumControlPointsPerOctave = 7;\n    static readonly spectrumControlPointBits = 3;\n    static readonly spectrumMax = (1 << Config.spectrumControlPointBits) - 1;\n    static readonly harmonicsControlPoints = 28;\n    static readonly harmonicsRendered = 64;\n    static readonly harmonicsRenderedForPickedString = 1 << 8; // 256\n    static readonly harmonicsControlPointBits = 3;\n    static readonly harmonicsMax = (1 << Config.harmonicsControlPointBits) - 1;\n    static readonly harmonicsWavelength = 1 << 11; // 2048\n    static readonly pulseWidthRange = 50;\n    static readonly pulseWidthStepPower = 0.5;\n    static readonly supersawVoiceCount = 7;\n    static readonly supersawDynamismMax = 6;\n    static readonly supersawSpreadMax = 12;\n    static readonly supersawShapeMax = 6;\n    static readonly pitchChannelCountMin = 1;\n    static readonly pitchChannelCountMax = 60;\n    static readonly noiseChannelCountMin = 0;\n    static readonly noiseChannelCountMax = 60;\n    static readonly modChannelCountMin = 0;\n    static readonly modChannelCountMax = 60;\n    static readonly noiseInterval = 6;\n    static readonly pitchesPerOctave = 12; // TODO: Use this for converting pitch to frequency.\n    static readonly drumCount = 12;\n    static readonly pitchOctaves = 8;\n    static readonly modCount = 6;\n    static readonly maxPitch = Config.pitchOctaves * Config.pitchesPerOctave;\n    static readonly maximumTonesPerChannel = Config.maxChordSize * 2;\n    static readonly justIntonationSemitones: number[] = [1.0 / 2.0, 8.0 / 15.0, 9.0 / 16.0, 3.0 / 5.0, 5.0 / 8.0, 2.0 / 3.0, 32.0 / 45.0, 3.0 / 4.0, 4.0 / 5.0, 5.0 / 6.0, 8.0 / 9.0, 15.0 / 16.0, 1.0, 16.0 / 15.0, 9.0 / 8.0, 6.0 / 5.0, 5.0 / 4.0, 4.0 / 3.0, 45.0 / 32.0, 3.0 / 2.0, 8.0 / 5.0, 5.0 / 3.0, 16.0 / 9.0, 15.0 / 8.0, 2.0].map(x => Math.log2(x) * Config.pitchesPerOctave);\n    static readonly pitchShiftRange = Config.justIntonationSemitones.length;\n    static readonly pitchShiftCenter = Config.pitchShiftRange >> 1;\n    static readonly detuneCenter = 200;\n    static readonly detuneMax = 400;\n    static readonly detuneMin = 0;\n    static readonly songDetuneMin = 0;\n    static readonly songDetuneMax = 500;\n    static readonly unisonVoicesMin = 1;\n    static readonly unisonVoicesMax = 9;\n    static readonly unisonSpreadMin = -96;\n    static readonly unisonSpreadMax = 96;\n    static readonly unisonOffsetMin = -96;\n    static readonly unisonOffsetMax = 96;\n    static readonly unisonExpressionMin = -2;\n    static readonly unisonExpressionMax = 2;\n    static readonly unisonSignMin = -2;\n    static readonly unisonSignMax = 2;\n    static readonly sineWaveLength = 1 << 8; // 256\n    static readonly sineWaveMask = Config.sineWaveLength - 1;\n\n    static generateSineWave(): Float32Array {\n        const wave: Float32Array = new Float32Array(Config.sineWaveLength + 1);\n        for (let i = 0; i < Config.sineWaveLength + 1; i++) {\n            wave[i] = Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength);\n        }\n        return wave;\n    }\n    static generateTriWave(): Float32Array {\n        const wave: Float32Array = new Float32Array(Config.sineWaveLength + 1);\n        for (let i = 0; i < Config.sineWaveLength + 1; i++) {\n            wave[i] = Math.asin(Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength)) / (Math.PI / 2);\n        }\n        return wave;\n    }\n    static generateTrapezoidWave(drive = 2): Float32Array {\n        const wave: Float32Array = new Float32Array(Config.sineWaveLength + 1);\n        for (let i = 0; i < Config.sineWaveLength + 1; i++) {\n            wave[i] = Math.max(-1.0, Math.min(1.0, Math.asin(Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength)) * drive));\n        }\n        return wave;\n    }\n    static generateSquareWave(phaseWidth = 0): Float32Array {\n        const wave: Float32Array = new Float32Array(Config.sineWaveLength + 1);\n        const centerPoint = Config.sineWaveLength / 4;\n        for (let i = 0; i < Config.sineWaveLength + 1; i++) {\n            wave[i] = +((Math.abs(i - centerPoint) < phaseWidth * Config.sineWaveLength / 2)\n                || ((Math.abs(i - Config.sineWaveLength - centerPoint) < phaseWidth * Config.sineWaveLength / 2))) * 2 - 1;\n        }\n        return wave;\n    }\n    static generateSawWave(inverse = false): Float32Array {\n        const wave: Float32Array = new Float32Array(Config.sineWaveLength + 1);\n        for (let i = 0; i < Config.sineWaveLength + 1; i++) {\n            wave[i] = ((i + (Config.sineWaveLength / 4.0)) * 2.0 / Config.sineWaveLength) % 2 - 1;\n            wave[i] = inverse ? -wave[i] : wave[i];\n        }\n        return wave;\n    }\n    // public static generateWhiteNoiseFmWave() {\n    // const wave = new Float32Array(Config.sineWaveLength + 1);\n    // for (let i = 0; i < Config.sineWaveLength + 1; i++) {\n    // wave[i] = Math.random() * 2.0 - 1.0;\n    // }\n    // return wave;\n    // }\n    // public static generateOneBitWhiteNoiseFmWave() {\n    // const wave = new Float32Array(Config.sineWaveLength + 1);\n    // for (let i = 0; i < Config.sineWaveLength + 1; i++) {\n    // wave[i] = Math.round(Math.random());\n    // }\n    // return wave;\n    // }\n    static generateQuasiSineWave() {\n        const wave = new Float32Array(Config.sineWaveLength + 1);\n        for (let i = 0; i < Config.sineWaveLength + 1; i++) {\n            wave[i] = Math.round(Math.sin(i * Math.PI * 2.0 / Config.sineWaveLength));\n        }\n        return wave;\n    }\n    static readonly sineWave: Float32Array = Config.generateSineWave();\n\n    static readonly perEnvelopeSpeedIndices: number[] = [0, 0.01, 0.02, 0.03, 0.04, 0.05, 0.06, 0.07, 0.08, 0.09, 0.1, 0.2, 0.25, 0.3, 0.3333, 0.4, 0.5, 0.6, 0.6667, 0.7, 0.75, 0.8, 0.9, 1, 1.25, 1.3333, 1.5, 1.6667, 1.75, 2, 2.25, 2.5, 2.75, 3, 3.5, 4, 4.5, 5, 5.5, 6, 6.5, 7, 7.5, 8, 8.5, 9, 9.5, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 24, 32, 40, 64, 128, 256];\n    static readonly perEnvelopeSpeedToIndices: Dictionary<number> = { //used to convert speeds back into indices\n        0: 0,\n        0.01: 1,\n        0.02: 2,\n        0.03: 3,\n        0.04: 4,\n        0.05: 5,\n        0.06: 6,\n        0.07: 7,\n        0.08: 8,\n        0.09: 9,\n        0.1: 10,\n        0.2: 11,\n        0.25: 12,\n        0.3: 13,\n        0.3333: 14,\n        0.4: 15,\n        0.5: 16,\n        0.6: 17,\n        0.6667: 18,\n        0.7: 19,\n        0.75: 20,\n        0.8: 21,\n        0.9: 22,\n        1: 23,\n        1.25: 24,\n        1.3333: 25,\n        1.5: 26,\n        1.6667: 27,\n        1.75: 28,\n        2: 29,\n        2.25: 30,\n        2.5: 31,\n        2.75: 32,\n        3: 33,\n        3.5: 34,\n        4: 35,\n        4.5: 36,\n        5: 37,\n        5.5: 38,\n        6: 39,\n        6.5: 40,\n        7: 41,\n        7.5: 42,\n        8: 43,\n        8.5: 44,\n        9: 45,\n        9.5: 46,\n        10: 47,\n        11: 48,\n        12: 49,\n        13: 50,\n        14: 51,\n        15: 52,\n        16: 53,\n        17: 54,\n        18: 55,\n        19: 56,\n        20: 57,\n        24: 58,\n        32: 59,\n        40: 60,\n        64: 61,\n        128: 62,\n        256: 63,\n    }\n\n    static readonly perEnvelopeBoundMin = 0; //probably should leave at 0. Negative envelopes are problematic right now\n    static readonly perEnvelopeBoundMax = 2; //max of 6.3 unless you update url\n    static readonly randomEnvelopeSeedMax = 63; //if you increase this you'll need to update the url to support it\n    static readonly randomEnvelopeStepsMax = 24;\n\n    // Picked strings have an all-pass filter with a corner frequency based on the tone fundamental frequency, in order to add a slight inharmonicity. (Which is important for distortion.)\n    static readonly pickedStringDispersionCenterFreq = 6000.0; // The tone fundamental freq is pulled toward this freq for computing the all-pass corner freq.\n    static readonly pickedStringDispersionFreqScale = 0.3; // The tone fundamental freq freq moves this much toward the center freq for computing the all-pass corner freq.\n    static readonly pickedStringDispersionFreqMult = 4.0; // The all-pass corner freq is based on this times the adjusted tone fundamental freq.\n    static readonly pickedStringShelfHz = 4000.0; // The cutoff freq of the shelf filter that is used to decay the high frequency energy in the picked string.\n\n    static readonly distortionRange = 16;\n    static readonly stringSustainRange = 15;\n    static readonly stringDecayRate = 0.12;\n    static readonly enableAcousticSustain = false;\n    static readonly sustainTypeNames: ReadonlyArray<string> = [\"bright\", \"acoustic\"]; // See SustainType enum above.\n\n    static readonly bitcrusherFreqRange = 14;\n    static readonly bitcrusherOctaveStep = 0.5;\n    static readonly bitcrusherQuantizationRange = 8;\n\n    static readonly maxEnvelopeCount = 16;\n    static readonly defaultAutomationRange = 13;\n    static readonly instrumentAutomationTargets: DictionaryArray<AutomationTarget> = toNameMap([\n        { name: \"none\", computeIndex: null, displayName: \"none\",             /*perNote: false,*/ interleave: false, isFilter: false, /*range: 0,                              */    maxCount: 1, effect: null, mdeffect: null, compatibleInstruments: null },\n        { name: \"noteVolume\", computeIndex: EnvelopeComputeIndex.noteVolume, displayName: \"pre volume\",      /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.volumeRange,             */    maxCount: 1, effect: null, mdeffect: null, compatibleInstruments: null },\n        { name: \"mixVolume\", computeIndex: EnvelopeComputeIndex.mixVolume, displayName: \"post volume\",      /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.volumeRange,             */    maxCount: 1, effect: null, mdeffect: null, compatibleInstruments: null },\n        { name: \"pulseWidth\", computeIndex: EnvelopeComputeIndex.pulseWidth, displayName: \"pulse width\",      /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.pulseWidthRange,         */    maxCount: 1, effect: null, mdeffect: null, compatibleInstruments: [InstrumentType.pwm, InstrumentType.supersaw] },\n        { name: \"stringSustain\", computeIndex: EnvelopeComputeIndex.stringSustain, displayName: \"sustain\",          /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.stringSustainRange,      */    maxCount: 1, effect: null, mdeffect: null, compatibleInstruments: [InstrumentType.pickedString] },\n        { name: \"unison\", computeIndex: EnvelopeComputeIndex.unison, displayName: \"unison\",           /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.defaultAutomationRange,  */    maxCount: 1, effect: null, mdeffect: null, compatibleInstruments: [InstrumentType.chip, InstrumentType.harmonics, InstrumentType.pickedString, InstrumentType.customChipWave, InstrumentType.pwm, InstrumentType.noise, InstrumentType.spectrum, InstrumentType.drumset] },\n        { name: \"operatorFrequency\", computeIndex: EnvelopeComputeIndex.operatorFrequency0, displayName: \"fm# freq\",         /*perNote:  true,*/ interleave: true, isFilter: false, /*range: Config.defaultAutomationRange,  */    maxCount: Config.operatorCount + 2, effect: null, mdeffect: null, compatibleInstruments: [InstrumentType.fm, InstrumentType.fm6op] },\n        { name: \"operatorAmplitude\", computeIndex: EnvelopeComputeIndex.operatorAmplitude0, displayName: \"fm# volume\",       /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.operatorAmplitudeMax + 1,*/    maxCount: Config.operatorCount + 2, effect: null, mdeffect: null, compatibleInstruments: [InstrumentType.fm, InstrumentType.fm6op] },\n        { name: \"feedbackAmplitude\", computeIndex: EnvelopeComputeIndex.feedbackAmplitude, displayName: \"fm feedback\",      /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.operatorAmplitudeMax + 1,*/    maxCount: 1, effect: null, mdeffect: null, compatibleInstruments: [InstrumentType.fm, InstrumentType.fm6op] },\n        { name: \"pitchShift\", computeIndex: EnvelopeComputeIndex.pitchShift, displayName: \"pitch shift\",      /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.pitchShiftRange,         */    maxCount: 1, effect: null, mdeffect: MDEffectType.pitchShift, compatibleInstruments: null },\n        { name: \"detune\", computeIndex: EnvelopeComputeIndex.detune, displayName: \"detune\",           /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.detuneMax + 1,           */    maxCount: 1, effect: null, mdeffect: MDEffectType.detune, compatibleInstruments: null },\n        { name: \"vibratoDepth\", computeIndex: EnvelopeComputeIndex.vibratoDepth, displayName: \"vibrato depth\",    /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.defaultAutomationRange,  */    maxCount: 1, effect: null, mdeffect: MDEffectType.vibrato, compatibleInstruments: null },\n        //{ name: \"vibratoSpeed\", computeIndex: EnvelopeComputeIndex.vibratoSpeed, displayName: \"vibrato speed\", /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.defaultAutomationRange,  */    maxCount: 1, effect: EffectType.vibrato, compatibleInstruments: null },\n        { name: \"noteFilterAllFreqs\", computeIndex: EnvelopeComputeIndex.noteFilterAllFreqs, displayName: \"pre eq freqs\",  /*perNote:  true,*/ interleave: false, isFilter: true, /*range: null,                           */    maxCount: 1, effect: null, mdeffect: null, compatibleInstruments: null },\n        { name: \"noteFilterFreq\", computeIndex: EnvelopeComputeIndex.noteFilterFreq0, displayName: \"pre eq # freq\", /*perNote:  true,*/ interleave: false/*true*/, isFilter: true, /*range: Config.filterFreqRange,     */        maxCount: Config.filterMaxPoints, effect: null, mdeffect: null, compatibleInstruments: null },\n        { name: \"decimalOffset\", computeIndex: EnvelopeComputeIndex.decimalOffset, displayName: \"decimal offset\",      /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.pulseWidthRange,         */    maxCount: 1, effect: null, mdeffect: null, compatibleInstruments: [InstrumentType.pwm, InstrumentType.supersaw] },\n        { name: \"supersawDynamism\", computeIndex: EnvelopeComputeIndex.supersawDynamism, displayName: \"dynamism\",         /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.supersawDynamismMax + 1, */    maxCount: 1, effect: null, mdeffect: null, compatibleInstruments: [InstrumentType.supersaw] },\n        { name: \"supersawSpread\", computeIndex: EnvelopeComputeIndex.supersawSpread, displayName: \"spread\",           /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.supersawSpreadMax + 1,   */    maxCount: 1, effect: null, mdeffect: null, compatibleInstruments: [InstrumentType.supersaw] },\n        { name: \"supersawShape\", computeIndex: EnvelopeComputeIndex.supersawShape, displayName: \"saw\u2194pulse\",        /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.supersawShapeMax + 1,    */    maxCount: 1, effect: null, mdeffect: null, compatibleInstruments: [InstrumentType.supersaw] },\n        { name: \"gain\", computeIndex: EnvelopeComputeIndex.gain, displayName: \"gain\",  /*perNote:  false,*/                  interleave: false, isFilter: false, /*range: Config.chorusRange,    */  maxCount: 1, effect: EffectType.gain, mdeffect: null, compatibleInstruments: null },\n        { name: \"panning\", computeIndex: EnvelopeComputeIndex.panning, displayName: \"panning\",  /*perNote:  false,*/                  interleave: false, isFilter: false, /*range: Config.chorusRange,    */  maxCount: 1, effect: EffectType.panning, mdeffect: null, compatibleInstruments: null },\n        { name: \"distortion\", computeIndex: EnvelopeComputeIndex.distortion, displayName: \"distortion\", /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.defaultAutomationRange,  */    maxCount: 1, effect: EffectType.distortion, mdeffect: null, compatibleInstruments: null },\n        { name: \"bitcrusherQuantization\", computeIndex: EnvelopeComputeIndex.bitcrusherQuantization, displayName: \"bitcrush\", /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.defaultAutomationRange,  */    maxCount: 1, effect: EffectType.bitcrusher, mdeffect: null, compatibleInstruments: null },\n        { name: \"bitcrusherFrequency\", computeIndex: EnvelopeComputeIndex.bitcrusherFrequency, displayName: \"freq crush\", /*perNote:  true,*/ interleave: false, isFilter: false, /*range: Config.defaultAutomationRange,  */    maxCount: 1, effect: EffectType.bitcrusher, mdeffect: null, compatibleInstruments: null },\n        { name: \"flanger\", computeIndex: EnvelopeComputeIndex.flanger, displayName: \"flanger\", /*perNote:  false,*/                      interleave: false, isFilter: false, /*range: Config.chorusRange,    */  maxCount: 1, effect: EffectType.flanger, mdeffect: null, compatibleInstruments: null },\n        { name: \"flangerSpeed\", computeIndex: EnvelopeComputeIndex.flanger, displayName: \"flanger speed\", /*perNote:  false,*/                      interleave: false, isFilter: false, /*range: Config.chorusRange,    */  maxCount: 1, effect: EffectType.flanger, mdeffect: null, compatibleInstruments: null },\n        { name: \"flangerDepth\", computeIndex: EnvelopeComputeIndex.flanger, displayName: \"flanger depth\", /*perNote:  false,*/                      interleave: false, isFilter: false, /*range: Config.chorusRange,    */  maxCount: 1, effect: EffectType.flanger, mdeffect: null, compatibleInstruments: null },\n        { name: \"flangerFeedback\", computeIndex: EnvelopeComputeIndex.flanger, displayName: \"flanger feedback\", /*perNote:  false,*/                      interleave: false, isFilter: false, /*range: Config.chorusRange,    */  maxCount: 1, effect: EffectType.flanger, mdeffect: null, compatibleInstruments: null },\n        { name: \"chorus\", computeIndex: EnvelopeComputeIndex.chorus, displayName: \"chorus\", /*perNote:  false,*/                      interleave: false, isFilter: false, /*range: Config.chorusRange,    */  maxCount: 1, effect: EffectType.chorus, mdeffect: null, compatibleInstruments: null },\n        { name: \"echoSustain\", computeIndex: EnvelopeComputeIndex.echoSustain, displayName: \"echo\", /*perNote:  false,*/              interleave: false, isFilter: false,  /*range: Config.chorusRange,    */  maxCount: 1, effect: EffectType.echo, mdeffect: null, compatibleInstruments: null },\n        { name: \"reverb\", computeIndex: EnvelopeComputeIndex.reverb, displayName: \"reverb\", /*perNote:  false,*/              interleave: false, isFilter: false,  /*range: Config.chorusRange,    */  maxCount: 1, effect: EffectType.reverb, mdeffect: null, compatibleInstruments: null },\n        { name: \"arpeggioSpeed\", computeIndex: EnvelopeComputeIndex.arpeggioSpeed, displayName: \"arpeggio speed\", /*perNote:  false,*/              interleave: false, isFilter: false,  /*range: Config.chorusRange,    */  maxCount: 1, effect: null, mdeffect: MDEffectType.chord, compatibleInstruments: null },\n        { name: \"ringModulation\", computeIndex: EnvelopeComputeIndex.ringModulation, displayName: \"ring mod\", interleave: false, isFilter: false, maxCount: 1, effect: EffectType.ringModulation, mdeffect: null, compatibleInstruments: null },\n        { name: \"ringModulationHz\", computeIndex: EnvelopeComputeIndex.ringModulationHz, displayName: \"ring mod hz\", interleave: false, isFilter: false, maxCount: 1, effect: EffectType.ringModulation, mdeffect: null, compatibleInstruments: null },\n        { name: \"granular\", computeIndex: EnvelopeComputeIndex.granular, displayName: \"granular\", interleave: false, isFilter: false, maxCount: 1, effect: EffectType.granular, mdeffect: null, compatibleInstruments: null },\n        { name: \"grainFreq\", computeIndex: EnvelopeComputeIndex.grainAmount, displayName: \"grain freq\", interleave: false, isFilter: false, maxCount: 1, effect: EffectType.granular, mdeffect: null, compatibleInstruments: null },\n        { name: \"grainSize\", computeIndex: EnvelopeComputeIndex.grainSize, displayName: \"grain size\", interleave: false, isFilter: false, maxCount: 1, effect: EffectType.granular, mdeffect: null, compatibleInstruments: null },\n        { name: \"grainRange\", computeIndex: EnvelopeComputeIndex.grainRange, displayName: \"grain range\", interleave: false, isFilter: false, maxCount: 1, effect: EffectType.granular, mdeffect: null, compatibleInstruments: null },\n        { name: \"echoDelay\", computeIndex: EnvelopeComputeIndex.echoDelay, displayName: \"echo delay\", interleave: false, isFilter: false, maxCount: 1, effect: EffectType.echo, mdeffect: null, compatibleInstruments: null },\n        // Controlling filter gain is less obvious and intuitive than controlling filter freq, so to avoid confusion I've disabled it for now...\n        //{name: \"noteFilterGain\",         computeIndex:       EnvelopeComputeIndex.noteFilterGain0,        displayName: \"n. filter # vol\",  /*perNote:  true,*/ interleave: false, isFilter:  true, range: Config.filterGainRange,             maxCount: Config.filterMaxPoints, effect: EffectType.eqFilter, compatibleInstruments: null},\n        /*\n        {name: \"eqFilterAllFreqs\",       computeIndex: InstrumentAutomationIndex.eqFilterAllFreqs,       displayName: \"eq filter freqs\",  perNote: false, interleave: false, isFilter:  true, range: null,                               maxCount: 1,    effect: null,                    compatibleInstruments: null},\n        {name: \"eqFilterFreq\",           computeIndex: InstrumentAutomationIndex.eqFilterFreq0,          displayName: \"eq filter # freq\", perNote: false, interleave:  true, isFilter:  true, range: Config.filterFreqRange,             maxCount: Config.filterMaxPoints, effect: null,  compatibleInstruments: null},\n        {name: \"eqFilterGain\",           computeIndex: InstrumentAutomationIndex.eqFilterGain0,          displayName: \"eq filter # vol\",  perNote: false, interleave: false, isFilter:  true, range: Config.filterGainRange,             maxCount: Config.filterMaxPoints, effect: null,  compatibleInstruments: null},\n        {name: \"envelope#\",              computeIndex: null,                                             displayName: \"envelope\",         perNote: false, interleave: false, isFilter: false, range: Config.defaultAutomationRange,      maxCount: Config.maxEnvelopeCount, effect: null, compatibleInstruments: null}, // maxCount special case for envelopes to be allowed to target earlier ones.\n        */\n    ]);\n    static readonly operatorWaves: DictionaryArray<OperatorWave> = toNameMap([\n        { name: \"sine\", samples: Config.sineWave },\n        { name: \"triangle\", samples: Config.generateTriWave() },\n        { name: \"pulse width\", samples: Config.generateSquareWave(0.5) },\n        { name: \"sawtooth\", samples: Config.generateSawWave() },\n        { name: \"ramp\", samples: Config.generateSawWave(true) },\n        { name: \"trapezoid\", samples: Config.generateTrapezoidWave(2) },\n        { name: \"quasi-sine\", samples: Config.generateQuasiSineWave() },\n        //{ name: \"white noise\", samples: generateWhiteNoiseFmWave() },\n        //{ name: \"1-bit white noise\", samples: generateOneBitWhiteNoiseFmWave() },\n    ]);\n    static readonly pwmOperatorWaves: DictionaryArray<OperatorWave> = toNameMap([\n        { name: \"1%\", samples: Config.generateSquareWave(0.01) },\n        { name: \"5%\", samples: Config.generateSquareWave(0.05) },\n        { name: \"12.5%\", samples: Config.generateSquareWave(0.125) },\n        { name: \"25%\", samples: Config.generateSquareWave(0.25) },\n        { name: \"33%\", samples: Config.generateSquareWave(1 / 3) },\n        { name: \"50%\", samples: Config.generateSquareWave(0.5) },\n        { name: \"66%\", samples: Config.generateSquareWave(2 / 3) },\n        { name: \"75%\", samples: Config.generateSquareWave(0.75) },\n        { name: \"87.5%\", samples: Config.generateSquareWave(0.875) },\n        { name: \"95%\", samples: Config.generateSquareWave(0.95) },\n        { name: \"99%\", samples: Config.generateSquareWave(0.99) },\n    ]);\n\n\n    // Height of the small editor column for inserting/deleting rows, in pixels.\n    static readonly barEditorHeight = 10;\n\n    // Careful about changing index ordering for this. Index is stored in URL/JSON etc.\n    static readonly modulators: DictionaryArray<Modulator> = toNameMap([\n        {\n            name: \"none\", pianoName: \"None\", maxRawVol: 6, newNoteVol: 6, forSong: true, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"No Mod Setting\", promptDesc: [\"No setting has been chosen yet, so this modulator will have no effect. Try choosing a setting with the dropdown, then click this '?' again for more info.\", \"[$LO - $HI]\"]\n        },\n        {\n            name: \"song volume\", pianoName: \"Volume\", maxRawVol: 100, newNoteVol: 100, forSong: true, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Song Volume\", promptDesc: [\"This setting affects the overall volume of the song, just like the main volume slider.\", \"At $HI, the volume will be unchanged from default, and it will get gradually quieter down to $LO.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"]\n        },\n        {\n            name: \"tempo\", pianoName: \"Tempo\", maxRawVol: Config.tempoMax - Config.tempoMin, newNoteVol: Math.ceil((Config.tempoMax - Config.tempoMin) / 2), forSong: true, convertRealFactor: Config.tempoMin, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Song Tempo\", promptDesc: [\"This setting controls the speed your song plays at, just like the tempo slider.\", \"When you first make a note for this setting, it will default to your current tempo. Raising it speeds up the song, up to $HI BPM, and lowering it slows it down, to a minimum of $LO BPM.\", \"Note that you can make a 'swing' effect by rapidly changing between two tempo values.\", \"[OVERWRITING] [$LO - $HI] [BPM]\"]\n        },\n        {\n            name: \"song reverb\", pianoName: \"Reverb\", maxRawVol: Config.reverbRange * 2, newNoteVol: Config.reverbRange, forSong: true, convertRealFactor: -Config.reverbRange, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Song Reverb\", promptDesc: [\"This setting affects the overall reverb of your song. It works by multiplying existing reverb for instruments, so those with no reverb set will be unaffected.\", \"At $MID, all instruments' reverb will be unchanged from default. This increases up to double the reverb value at $HI, or down to no reverb at $LO.\", \"[MULTIPLICATIVE] [$LO - $HI]\"]\n        },\n        {\n            name: \"next bar\", pianoName: \"Next Bar\", maxRawVol: 1, newNoteVol: 1, forSong: true, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Go To Next Bar\", promptDesc: [\"This setting functions a little different from most. Wherever a note is placed, the song will jump immediately to the next bar when it is encountered.\", \"This jump happens at the very start of the note, so the length of a next-bar note is irrelevant. Also, the note can be value 0 or 1, but the value is also irrelevant - wherever you place a note, the song will jump.\", \"You can make mixed-meter songs or intro sections by cutting off unneeded beats with a next-bar modulator.\", \"[$LO - $HI]\"]\n        },\n        {\n            name: \"pre volume\", pianoName: \"Note Vol.\", maxRawVol: Config.volumeRange, newNoteVol: Math.ceil(Config.volumeRange / 2), forSong: false, convertRealFactor: Math.ceil(-Config.volumeRange / 2.0), associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Instrument Pre Volume\", promptDesc: [\"This setting affects the volume of your instrument as if its note size had been scaled.\", \"At $MID, an instrument's volume will be unchanged from default. This means you can still use the volume sliders to mix the base volume of instruments. The volume gradually increases up to $HI, or decreases down to mute at $LO.\", \"This setting was the default for volume modulation in JummBox for a long time. Due to some new effects like distortion and bitcrush, pre volume doesn't always allow fine volume control. Also, this modulator affects the value of FM modulator waves instead of just carriers. This can distort the sound which may be useful, but also may be undesirable. In those cases, use the 'post volume' modulator instead, which will always just scale the volume with no added effects.\", \"For display purposes, this mod will show up on the instrument volume slider, as long as there is not also an active 'post volume' modulator anyhow. However, as mentioned, it works more like changing pre volume.\", \"[MULTIPLICATIVE] [$LO - $HI]\"]\n        },\n        {\n            name: \"gain\", pianoName: \"Gain\", maxRawVol: Config.volumeRange / 2 * Config.gainRangeMult, newNoteVol: Math.ceil(Config.volumeRange / 2 * Config.gainRangeMult / 2), forSong: false, convertRealFactor: 0, associatedEffect: EffectType.gain, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Instrument Gain\", promptDesc: [\"This setting controls the gain of your instrument.\", \"At $LO, the instrument is muted, at $MID it will be unchanged, and at $HI, it will have maximum gain.\", \"[OVERWRITING] [$LO - $HI] [L-R]\"]\n        },\n        {\n            name: \"pan\", pianoName: \"Pan\", maxRawVol: Config.panMax, newNoteVol: Math.ceil(Config.panMax / 2), forSong: false, convertRealFactor: 0, associatedEffect: EffectType.panning, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Instrument Panning\", promptDesc: [\"This setting controls the panning of your instrument, just like the panning slider.\", \"At $LO, your instrument will sound like it is coming fully from the left-ear side. At $MID it will be right in the middle, and at $HI, it will sound like it's on the right.\", \"[OVERWRITING] [$LO - $HI] [L-R]\"]\n        },\n        {\n            name: \"reverb\", pianoName: \"Reverb\", maxRawVol: Config.reverbRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.reverb, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Instrument Reverb\", promptDesc: [\"This setting controls the reverb of your insturment, just like the reverb slider.\", \"At $LO, your instrument will have no reverb. At $HI, it will be at maximum.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"distortion\", pianoName: \"Distortion\", maxRawVol: Config.distortionRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.distortion, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Instrument Distortion\", promptDesc: [\"This setting controls the amount of distortion for your instrument, just like the distortion slider.\", \"At $LO, your instrument will have no distortion. At $HI, it will be at maximum.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"fm slider 1\", pianoName: \"FM 1\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"FM Slider 1\", promptDesc: [\"This setting affects the strength of the first FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"]\n        },\n        {\n            name: \"fm slider 2\", pianoName: \"FM 2\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"FM Slider 2\", promptDesc: [\"This setting affects the strength of the second FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"]\n        },\n        {\n            name: \"fm slider 3\", pianoName: \"FM 3\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"FM Slider 3\", promptDesc: [\"This setting affects the strength of the third FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"]\n        },\n        {\n            name: \"fm slider 4\", pianoName: \"FM 4\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"FM Slider 4\", promptDesc: [\"This setting affects the strength of the fourth FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"]\n        },\n        {\n            name: \"fm feedback\", pianoName: \"FM Feedbck\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"FM Feedback\", promptDesc: [\"This setting affects the strength of the FM feedback slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"]\n        },\n        {\n            name: \"pulse width\", pianoName: \"Pulse Width\", maxRawVol: Config.pulseWidthRange, newNoteVol: Config.pulseWidthRange, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Pulse Width\", promptDesc: [\"This setting controls the width of this instrument's pulse wave, just like the pulse width slider.\", \"At $HI, your instrument will sound like a pure square wave (on 50% of the time). It will gradually sound narrower down to $LO, where it will be inaudible (as it is on 0% of the time).\", \"Changing pulse width randomly between a few values is a common strategy in chiptune music to lend some personality to a lead instrument.\", \"[OVERWRITING] [$LO - $HI] [%Duty]\"]\n        },\n        {\n            name: \"detune\", pianoName: \"Detune\", maxRawVol: Config.detuneMax - Config.detuneMin, newNoteVol: Config.detuneCenter, forSong: false, convertRealFactor: -Config.detuneCenter, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.detune, maxIndex: 0,\n            promptName: \"Instrument Detune\", promptDesc: [\"This setting controls the detune for this instrument, just like the detune slider.\", \"At $MID, your instrument will have no detune applied. Each tick corresponds to one cent, or one-hundredth of a pitch. Thus, each change of 100 ticks corresponds to one half-step of detune, up to two half-steps up at $HI, or two half-steps down at $LO.\", \"[OVERWRITING] [$LO - $HI] [cents]\"]\n        },\n        {\n            name: \"vibrato depth\", pianoName: \"Vibrato Depth\", maxRawVol: 50, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.vibrato, maxIndex: 0,\n            promptName: \"Vibrato Depth\", promptDesc: [\"This setting controls the amount that your pitch moves up and down by during vibrato, just like the vibrato depth slider.\", \"At $LO, your instrument will have no vibrato depth so its vibrato would be inaudible. This increases up to $HI, where an extreme pitch change will be noticeable.\", \"[OVERWRITING] [$LO - $HI] [pitch \u00F725]\"]\n        },\n        {\n            name: \"song detune\", pianoName: \"Detune\", maxRawVol: Config.songDetuneMax - Config.songDetuneMin, newNoteVol: Math.ceil((Config.songDetuneMax - Config.songDetuneMin) / 2), forSong: true, convertRealFactor: -250, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Song Detune\", promptDesc: [\"This setting controls the overall detune of the entire song. There is no associated slider.\", \"At $MID, your song will have no extra detune applied and sound unchanged from default. Each tick corresponds to four cents, or four hundredths of a pitch. Thus, each change of 25 ticks corresponds to one half-step of detune, up to 10 half-steps up at $HI, or 10 half-steps down at $LO.\", \"[MULTIPLICATIVE] [$LO - $HI] [cents x4]\"]\n        },\n        {\n            name: \"vibrato speed\", pianoName: \"Vibrato Speed\", maxRawVol: 30, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.vibrato, maxIndex: 0,\n            promptName: \"Vibrato Speed\", promptDesc: [\"This setting controls the speed your instrument will vibrato at, just like the slider.\", \"A setting of $LO means there will be no oscillation, and vibrato will be disabled. Higher settings will increase the speed, up to a dramatic trill at the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"vibrato delay\", pianoName: \"Vibrato Delay\", maxRawVol: 50, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.vibrato, maxIndex: 0,\n            promptName: \"Vibrato Delay\", promptDesc: [\"This setting controls the amount of time vibrato will be held off for before triggering for every new note, just like the slider.\", \"A setting of $LO means there will be no delay. A setting of 24 corresponds to one full beat of delay. As a sole exception to this scale, setting delay to $HI will completely disable vibrato (as if it had infinite delay).\", \"[OVERWRITING] [$LO - $HI] [beats \u00F724]\"]\n        },\n        {\n            name: \"arp speed\", pianoName: \"Arp Speed\", maxRawVol: 50, newNoteVol: 12, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.chord, maxIndex: 0,\n            promptName: \"Arpeggio Speed\", promptDesc: [\"This setting controls the speed at which your instrument's chords arpeggiate, just like the arpeggio speed slider.\", \"Each setting corresponds to a different speed, from the slowest to the fastest. The speeds are listed below.\",\n                \"[0-4]: x0, x1/16, x\u215B, x\u2155, x\u00BC,\", \"[5-9]: x\u2153, x\u2156, x\u00BD, x\u2154, x\u00BE,\", \"[10-14]: x\u2158, x0.9, x1, x1.1, x1.2,\", \"[15-19]: x1.3, x1.4, x1.5, x1.6, x1.7,\", \"[20-24]: x1.8, x1.9, x2, x2.1, x2.2,\", \"[25-29]: x2.3, x2.4, x2.5, x2.6, x2.7,\", \"[30-34]: x2.8, x2.9, x3, x3.1, x3.2,\", \"[35-39]: x3.3, x3.4, x3.5, x3.6, x3.7,\", \"[40-44]: x3.8, x3.9, x4, x4.15, x4.3,\", \"[45-50]: x4.5, x4.8, x5, x5.5, x6, x8\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"pan delay\", pianoName: \"Pan Delay\", maxRawVol: 20, newNoteVol: 10, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.panning, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Panning Delay\", promptDesc: [\"This setting controls the delay applied to panning for your instrument, just like the pan delay slider.\", \"With more delay, the panning effect will generally be more pronounced. $MID is the default value, whereas $LO will remove any delay at all. No delay can be desirable for chiptune songs.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"reset arp\", pianoName: \"Reset Arp\", maxRawVol: 1, newNoteVol: 1, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.chord, maxIndex: 0,\n            promptName: \"Reset Arpeggio\", promptDesc: [\"This setting functions a little different from most. Wherever a note is placed, the arpeggio of this instrument will reset at the very start of that note. This is most noticeable with lower arpeggio speeds. The lengths and values of notes for this setting don't matter, just the note start times.\", \"This mod can be used to sync up your apreggios so that they always sound the same, even if you are using an odd-ratio arpeggio speed or modulating arpeggio speed.\", \"[$LO - $HI]\"]\n        },\n        {\n            name: \"post eq\", pianoName: \"PostEQ\", maxRawVol: 10, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"EQ Filter\", promptDesc: [\"This setting controls a few separate things for your instrument's EQ filter.\", \"When the option 'morph' is selected, your modulator values will indicate a sub-filter index of your EQ filter to 'morph' to over time. For example, a change from 0 to 1 means your main filter (default) will morph to sub-filter 1 over the specified duration. You can shape the main filter and sub-filters in the large filter editor ('+' button). If your two filters' number, type, and order of filter dots all match up, the morph will happen smoothly and you'll be able to hear them changing. If they do not match up, the filters will simply jump between each other.\", \"Note that filters will morph based on endpoints in the pattern editor. So, if you specify a morph from sub-filter 1 to 4 but do not specifically drag in new endpoints for 2 and 3, it will morph directly between 1 and 4 without going through the others.\", \"If you target Dot X or Dot Y, you can finely tune the coordinates of a single dot for your filter. The number of available dots to choose is dependent on your main filter's dot count.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"pre eq\", pianoName: \"PreEQ\", maxRawVol: 10, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.eqFilter, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Note Filter\", promptDesc: [\"This setting controls a few separate things for your instrument's note filter.\", \"When the option 'morph' is selected, your modulator values will indicate a sub-filter index of your note filter to 'morph' to over time. For example, a change from 0 to 1 means your main filter (default) will morph to sub-filter 1 over the specified duration. You can shape the main filter and sub-filters in the large filter editor ('+' button). If your two filters' number, type, and order of filter dots all match up, the morph will happen smoothly and you'll be able to hear them changing. If they do not match up, the filters will simply jump between each other.\", \"Note that filters will morph based on endpoints in the pattern editor. So, if you specify a morph from sub-filter 1 to 4 but do not specifically drag in new endpoints for 2 and 3, it will morph directly between 1 and 4 without going through the others.\", \"If you target Dot X or Dot Y, you can finely tune the coordinates of a single dot for your filter. The number of available dots to choose is dependent on your main filter's dot count.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"bit crush\", pianoName: \"Bitcrush\", maxRawVol: Config.bitcrusherQuantizationRange - 1, newNoteVol: Math.round(Config.bitcrusherQuantizationRange / 2), forSong: false, convertRealFactor: 0, associatedEffect: EffectType.bitcrusher, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Instrument Bit Crush\", promptDesc: [\"This setting controls the bit crush of your instrument, just like the bit crush slider.\", \"At a value of $LO, no bit crush will be applied. This increases and the bit crush effect gets more noticeable up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"freq crush\", pianoName: \"Freq Crush\", maxRawVol: Config.bitcrusherFreqRange - 1, newNoteVol: Math.round(Config.bitcrusherFreqRange / 2), forSong: false, convertRealFactor: 0, associatedEffect: EffectType.bitcrusher, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Instrument Frequency Crush\", promptDesc: [\"This setting controls the frequency crush of your instrument, just like the freq crush slider.\", \"At a value of $LO, no frequency crush will be applied. This increases and the frequency crush effect gets more noticeable up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"echo\", pianoName: \"Echo\", maxRawVol: Config.echoSustainRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.echo, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Instrument Echo Sustain\", promptDesc: [\"This setting controls the echo sustain (echo loudness) of your instrument, just like the echo slider.\", \"At $LO, your instrument will have no echo sustain and echo will not be audible. Echo sustain increases and the echo effect gets more noticeable up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"echo delay\", pianoName: \"Echo Delay\", maxRawVol: Config.echoDelayRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.echo, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Instrument Echo Delay\", promptDesc: [\"This setting controls the echo delay of your instrument, just like the echo delay slider.\", \"At $LO, your instrument will have very little echo delay, and this increases up to 2 beats of delay at $HI.\", \"[OVERWRITING] [$LO - $HI] [~beats \u00F712]\"]\n        },\n        {\n            name: \"echo ping pong\", pianoName: \"Ping-Pong\", maxRawVol: Config.panMax, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.echo, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Instrument Ping Pong\", promptDesc: [\"This setting controls the echo ping-pong of your instrument, just like the echo delay slider.\", \"At $LO, the echo will start fully from the left-ear side. At $MID there will be no echo ping pong, and at $HI, it will start coming fully from the right.\", \"[OVERWRITING] [$LO - $HI] [L-R]\"]\n        },\n        {\n            name: \"flanger\", pianoName: \"Flanger\", maxRawVol: Config.flangerRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.flanger, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Instrument Flanger\", promptDesc: [\"This setting controls the flanger strength of your instrument, just like the flanger slider.\", \"At $LO, the flanger effect will be disabled. The strength of the flanger effect increases up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"flanger speed\", pianoName: \"Flanger Spd\", maxRawVol: Config.flangerSpeedRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.flanger, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Instrument Flanger Speed\", promptDesc: [\"This setting controls the flanger speed of your instrument, just like the flanger speed slider.\"]\n        },\n        {\n            name: \"flanger depth\", pianoName: \"Flanger Dpth\", maxRawVol: Config.flangerDepthRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.flanger, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Instrument Flanger Depth\", promptDesc: [\"This setting controls the flanger depth of your instrument, just like the flanger depth slider.\"]\n        },\n        {\n            name: \"flanger feedback\", pianoName: \"Flanger Fbck\", maxRawVol: Config.flangerFeedbackRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.flanger, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Instrument Flanger Feedback\", promptDesc: [\"This setting controls the flanger feedback of your instrument, just like the flanger feedback slider.\"]\n        },\n        {\n            name: \"chorus\", pianoName: \"Chorus\", maxRawVol: Config.chorusRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.chorus, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Instrument Chorus\", promptDesc: [\"This setting controls the chorus strength of your instrument, just like the chorus slider.\", \"At $LO, the chorus effect will be disabled. The strength of the chorus effect increases up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"post eq cut\", pianoName: \"PostEQ Cut\", maxRawVol: Config.filterSimpleCutRange - 1, newNoteVol: Config.filterSimpleCutRange - 1, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"EQ Filter Cutoff Frequency\", promptDesc: [\"This setting controls the filter cut position of your instrument, just like the filter cut slider.\", \"This setting is roughly analagous to the horizontal position of a single low-pass dot on the advanced filter editor. At lower values, a wider range of frequencies is cut off.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"post eq peak\", pianoName: \"PostEQ Peak\", maxRawVol: Config.filterSimplePeakRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"EQ Filter Peak Gain\", promptDesc: [\"This setting controls the filter peak position of your instrument, just like the filter peak slider.\", \"This setting is roughly analagous to the vertical position of a single low-pass dot on the advanced filter editor. At lower values, the cutoff frequency will not be emphasized, and at higher values you will hear emphasis on the cutoff frequency.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"pre eq cut\", pianoName: \"PreEQ Cut\", maxRawVol: Config.filterSimpleCutRange - 1, newNoteVol: Config.filterSimpleCutRange - 1, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.eqFilter, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Note Filter Cutoff Frequency\", promptDesc: [\"This setting controls the filter cut position of your instrument, just like the filter cut slider.\", \"This setting is roughly analagous to the horizontal position of a single low-pass dot on the advanced filter editor. At lower values, a wider range of frequencies is cut off.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"pre eq peak\", pianoName: \"PreEQ Peak\", maxRawVol: Config.filterSimplePeakRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.eqFilter, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Note Filter Peak Gain\", promptDesc: [\"This setting controls the filter peak position of your instrument, just like the filter peak slider.\", \"This setting is roughly analagous to the vertical position of a single low-pass dot on the advanced filter editor. At lower values, the cutoff frequency will not be emphasized, and at higher values you will hear emphasis on the cutoff frequency.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"pitch shift\", pianoName: \"Pitch Shift\", maxRawVol: Config.pitchShiftRange - 1, newNoteVol: Config.pitchShiftCenter, forSong: false, convertRealFactor: -Config.pitchShiftCenter, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.pitchShift, maxIndex: 0,\n            promptName: \"Pitch Shift\", promptDesc: [\"This setting controls the pitch offset of your instrument, just like the pitch shift slider.\", \"At $MID your instrument will have no pitch shift. This increases as you decrease toward $LO pitches (half-steps) at the low end, or increases towards +$HI pitches at the high end.\", \"[OVERWRITING] [$LO - $HI] [pitch]\"]\n        },\n        {\n            name: \"sustain\", pianoName: \"Sustain\", maxRawVol: Config.stringSustainRange - 1, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Picked String Sustain\", promptDesc: [\"This setting controls the sustain of your picked string instrument, just like the sustain slider.\", \"At $LO, your instrument will have minimum sustain and sound 'plucky'. This increases to a more held sound as your modulator approaches the maximum, $HI.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"post volume\", pianoName: \"Mix Vol.\", maxRawVol: Config.volumeRange, newNoteVol: Math.ceil(Config.volumeRange / 2), forSong: false, convertRealFactor: Math.ceil(-Config.volumeRange / 2.0), associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Instrument Post Volume\", promptDesc: [\"This setting affects the volume of your instrument as if its volume slider had been moved.\", \"At $MID, an instrument's volume will be unchanged from default. This means you can still use the volume sliders to mix the base volume of instruments, since this setting and the default value work multiplicatively. The volume gradually increases up to $HI, or decreases down to mute at $LO.\", \"Unlike the 'note volume' setting, mix volume is very straightforward and simply affects the resultant instrument volume after all effects are applied.\", \"[MULTIPLICATIVE] [$LO - $HI]\"]\n        },\n        {\n            name: \"fm slider 5\", pianoName: \"FM 5\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"FM Slider 5\", promptDesc: [\"This setting affects the strength of the fifth FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"]\n        },\n        {\n            name: \"fm slider 6\", pianoName: \"FM 6\", maxRawVol: 15, newNoteVol: 15, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"FM Slider 6\", promptDesc: [\"This setting affects the strength of the sixth FM slider, just like the corresponding slider on your instrument.\", \"It works in a multiplicative way, so at $HI your slider will sound the same is its default value, and at $LO it will sound like it has been moved all the way to the left.\", \"For the full range of control with this mod, move your underlying slider all the way to the right.\", \"[MULTIPLICATIVE] [$LO - $HI] [%]\"]\n        },\n        {\n            name: \"decimal offset\", pianoName: \"Decimal Offset\", maxRawVol: 99, newNoteVol: 0, forSong: false, convertRealFactor: 0, invertSliderIndicator: true, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Decimal Offset\", promptDesc: [\"This setting controls the decimal offset that is subtracted from the pulse width; use this for creating values like 12.5 or 6.25.\", \"[$LO - $HI]\"]\n        },\n        {\n            name: \"envelope speed\", pianoName: \"EnvelopeSpd\", maxRawVol: 50, newNoteVol: 12, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Envelope Speed\", promptDesc: [\"This setting controls how fast all of the envelopes for the instrument play.\", \"At $LO, your instrument's envelopes will be frozen, and at values near there they will change very slowly. At 12, the envelopes will work as usual, performing at normal speed. This increases up to $HI, where the envelopes will change very quickly. The speeds are given below:\",\n                \"[0-4]: x0, x1/16, x\u215B, x\u2155, x\u00BC,\", \"[5-9]: x\u2153, x\u2156, x\u00BD, x\u2154, x\u00BE,\", \"[10-14]: x\u2158, x0.9, x1, x1.1, x1.2,\", \"[15-19]: x1.3, x1.4, x1.5, x1.6, x1.7,\", \"[20-24]: x1.8, x1.9, x2, x2.1, x2.2,\", \"[25-29]: x2.3, x2.4, x2.5, x2.6, x2.7,\", \"[30-34]: x2.8, x2.9, x3, x3.1, x3.2,\", \"[35-39]: x3.3, x3.4, x3.5, x3.6, x3.7,\", \"[40-44]: x3.8, x3.9, x4, x4.15, x4.3,\", \"[45-50]: x4.5, x4.8, x5, x5.5, x6, x8\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"dynamism\", pianoName: \"Dynamism\", maxRawVol: Config.supersawDynamismMax, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Supersaw Dynamism\", promptDesc: [\"This setting controls the supersaw dynamism of your instrument, just like the dynamism slider.\", \"At $LO, your instrument will have only a single pulse contributing. Increasing this will raise the contribution of other waves which is similar to a chorus effect. The effect gets more noticeable up to the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"spread\", pianoName: \"Spread\", maxRawVol: Config.supersawSpreadMax, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Supersaw Spread\", promptDesc: [\"This setting controls the supersaw spread of your instrument, just like the spread slider.\", \"At $LO, all the pulses in your supersaw will be at the same frequency. Increasing this value raises the frequency spread of the contributing waves, up to a dissonant spread at the max value, $HI.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"saw shape\", pianoName: \"Saw Shape\", maxRawVol: Config.supersawShapeMax, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Supersaw Shape\", promptDesc: [\"This setting controls the supersaw shape of your instrument, just like the Saw\u2194Pulse slider.\", \"As the slider's name implies, this effect will give you a sawtooth wave at $LO, and a full pulse width wave at $HI. Values in between will be a blend of the two.\", \"[OVERWRITING] [$LO - $HI] [%]\"]\n        },\n        {\n            name: \"individual envelope speed\", pianoName: \"IndvEnvSpd\", maxRawVol: 63, newNoteVol: 23, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: this.maxEnvelopeCount - 1,\n            promptName: \"Individual Envelope Speed\", promptDesc: [\"This setting controls how fast the specified envelope of the instrument will play.\", \"At $LO, your the envelope will be frozen, and at values near there they will change very slowly. At 23, the envelope will work as usual, performing at normal speed. This increases up to $HI, where the envelope will change very quickly. The speeds are given below:\",\n                \"[0-4]: x0, x0.01, x0.02, x0.03, x0.04,\", \"[5-9]: x0.05, x0.06, x0.07, x0.08, x0.09,\", \"[10-14]: x0.1, x0.2, x0.25, x0.3, x0.33,\", \"[15-19]: x0.4, x0.5, x0.6, x0.6667, x0.7,\", \"[20-24]: x0.75, x0.8, x0.9, x1, x1.25,\", \"[25-29]: x1.3333, x1.5, x1.6667, x1.75, x2,\", \"[30-34]: x2.25, x2.5, x2.75, x3, x3.5,\", \"[35-39]: x4, x4.5, x5, x5.5, x6,\", \"[40-44]: x6.5, x7, x7.5, x8, x8.5,\", \"[45-49]: x9, x9.5, x10, x11, x12\", \"[50-54]: x13, x14, x15, x16, x17\", \"[55-59]: x18, x19, x20, x24, x32\", \"[60-63]: x40, x64, x128, x256\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"song eq\", pianoName: \"Song EQ\", maxRawVol: 10, newNoteVol: 0, forSong: true, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Song EQ Filter\", promptDesc: [\"This setting overwrites every instrument's eq filter. You can do this in a few separate ways, similar to the per instrument eq filter modulator.\", \"When the option 'morph' is selected, your modulator values will indicate a sub-filter index of your EQ filter to 'morph' to over time. For example, a change from 0 to 1 means your main filter (default) will morph to sub-filter 1 over the specified duration. You can shape the main filter and sub-filters in the large filter editor ('+' button). If your two filters' number, type, and order of filter dots all match up, the morph will happen smoothly and you'll be able to hear them changing. If they do not match up, the filters will simply jump between each other.\", \"Note that filters will morph based on endpoints in the pattern editor. So, if you specify a morph from sub-filter 1 to 4 but do not specifically drag in new endpoints for 2 and 3, it will morph directly between 1 and 4 without going through the others.\", \"If you target Dot X or Dot Y, you can finely tune the coordinates of a single dot for your filter. The number of available dots to choose is dependent on your main filter's dot count.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"reset envelope\", pianoName: \"ResetEnv\", maxRawVol: 1, newNoteVol: 1, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: this.maxEnvelopeCount - 1,\n            promptName: \"Reset Envelope\", promptDesc: [\"This setting functions a lot like the reset arp modulator. Wherever a note is placed, the envelope of this instrument at the specified index will reset at the very start of that note. \", \"[$LO - $HI]\",]\n        },\n        {\n            name: \"ring modulation\", pianoName: \"Ring Mod\", maxRawVol: Config.ringModRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.ringModulation, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Ring Modulation\", promptDesc: [\"This setting controls the Ring Modulation effect in your instrument.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"ring mod hertz\", pianoName: \"Ring Mod(Hz)\", maxRawVol: Config.ringModHzRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.ringModulation, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Ring Modulation (Hertz)\", promptDesc: [\"This setting controls the Hertz (Hz) used in the Ring Modulation effect in your instrument.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"granular\", pianoName: \"Granular\", maxRawVol: Config.granularRange, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.granular, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Granular\", promptDesc: [\"This setting controls the granular effect in your instrument.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"grain freq\", pianoName: \"Grain #\", maxRawVol: Config.grainAmountsMax, newNoteVol: 8, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.granular, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Grain Count\", promptDesc: [\"This setting controls the density of grains for the granular effect on your instrument.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"grain size\", pianoName: \"Grain Size\", maxRawVol: Config.grainSizeMax / Config.grainSizeStep, newNoteVol: Config.grainSizeMin / Config.grainSizeStep, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.granular, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Grain Size\", promptDesc: [\"This setting controls the grain size of the granular effect in your instrument.\", \"The number shown in the mod channel is multiplied by \" + Config.grainSizeStep + \" to get the actual grain size.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"grain range\", pianoName: \"Grain Range\", maxRawVol: Config.grainRangeMax / Config.grainSizeStep, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.granular, associatedMDEffect: MDEffectType.length, maxIndex: 0,\n            promptName: \"Grain Range\", promptDesc: [\"This setting controls the range of values for your grain size of the granular effect in your instrument, from no variation to a lot\", \"The number shown in the mod channel is multiplied by \" + Config.grainSizeStep + \" to get the actual grain size.\", \"[OVERWRITING] [$LO - $HI]\"]\n        },\n        {\n            name: \"individual envelope lower bound\", pianoName: \"IndvEnvLow\", maxRawVol: Config.perEnvelopeBoundMax * 10, newNoteVol: 0, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: this.maxEnvelopeCount - 1,\n            promptName: \"Individual Envelope Lower Bound\", promptDesc: [\"This setting controls the envelope lower bound\", \"At $LO, your the envelope will output an upper envelope bound to 0, and at $HI your envelope will output an upper envelope bound to 2.\", \"This settings will not work if your lower envelope bound is higher than your upper envelope bound\",]\n        },\n        {\n            name: \"individual envelope upper bound\", pianoName: \"IndvEnvUp\", maxRawVol: Config.perEnvelopeBoundMax * 10, newNoteVol: 10, forSong: false, convertRealFactor: 0, associatedEffect: EffectType.length, associatedMDEffect: MDEffectType.length, maxIndex: this.maxEnvelopeCount - 1,\n            promptName: \"Individual Envelope Upper Bound\", promptDesc: [\"This setting controls the envelope upper bound\", \"At $LO, your the envelope will output a 0 to lower envelope bound, and at $HI your envelope will output a 2 to lower envelope bound.\", \"This settings will not work if your lower envelope bound is higher than your upper envelope bound\",]\n        },\n    ]);\n}\n\nfunction centerWave(wave: Array<number>): Float32Array {\n    let sum = 0.0;\n    for (let i = 0; i < wave.length; i++) sum += wave[i];\n    const average = sum / wave.length;\n    for (let i = 0; i < wave.length; i++) wave[i] -= average;\n    performIntegral(wave);\n    // The first sample should be zero, and we'll duplicate it at the end for easier interpolation.\n    wave.push(0);\n    return new Float32Array(wave);\n}\nfunction centerAndNormalizeWave(wave: Array<number>): Float32Array {\n    let magn = 0.0;\n\n    centerWave(wave);\n\n    // Going to length-1 because an extra 0 sample is added on the end as part of centerWave, which shouldn't impact magnitude calculation.\n    for (let i = 0; i < wave.length - 1; i++) {\n        magn += Math.abs(wave[i]);\n    }\n    const magnAvg = magn / (wave.length - 1);\n\n    for (let i = 0; i < wave.length - 1; i++) {\n        wave[i] = wave[i] / magnAvg;\n    }\n\n    return new Float32Array(wave);\n\n}\nexport function performIntegral(wave: { length: number, [index: number]: number }): Float32Array {\n    // Perform the integral on the wave. The synth function will perform the derivative to get the original wave back but with antialiasing.\n    let cumulative = 0.0;\n    let newWave: Float32Array = new Float32Array(wave.length);\n    for (let i = 0; i < wave.length; i++) {\n        newWave[i] = cumulative;\n        cumulative += wave[i];\n    }\n\n    return newWave;\n}\nexport function performIntegralOld(wave: { length: number, [index: number]: number }): void {\n    // Old ver used in harmonics/picked string instruments, manipulates wave in place.\n    let cumulative = 0.0;\n    for (let i = 0; i < wave.length; i++) {\n        const temp = wave[i];\n        wave[i] = cumulative;\n        cumulative += temp;\n    }\n}\n\nexport function getPulseWidthRatio(pulseWidth: number): number {\n    // BeepBox formula for reference\n    //return Math.pow(0.5, (Config.pulseWidthRange - 1 - pulseWidth) * Config.pulseWidthStepPower) * 0.5;\n\n    return pulseWidth / (Config.pulseWidthRange * 2);\n}\n\n\n// The function arguments will be defined in FFT.ts, but I want\n// SynthConfig.ts to be at the top of the compiled JS so I won't directly\n// depend on FFT here. synth.ts will take care of importing FFT.ts.\n//function inverseRealFourierTransform(array: {length: number, [index: number]: number}, fullArrayLength: number): void;\n//function scaleElementsByFactor(array: {length: number, [index: number]: number}, factor: number): void;\nexport function getDrumWave(index: number, inverseRealFourierTransform: Function | null, scaleElementsByFactor: Function | null): Float32Array {\n    let wave: Float32Array | null = Config.chipNoises[index].samples;\n    if (wave == null) {\n        wave = new Float32Array(Config.chipNoiseLength + 1);\n        Config.chipNoises[index].samples = wave;\n\n        if (index == 0) {\n            // The \"retro\" drum uses a \"Linear Feedback Shift Register\" similar to the NES noise channel.\n            let drumBuffer = 1;\n            for (let i = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = (drumBuffer & 1) * 2.0 - 1.0;\n                let newBuffer = drumBuffer >> 1;\n                if (((drumBuffer + newBuffer) & 1) == 1) {\n                    newBuffer += 1 << 14;\n                }\n                drumBuffer = newBuffer;\n            }\n        } else if (index == 1) {\n            // White noise is just random values for each sample.\n            for (let i = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = Math.random() * 2.0 - 1.0;\n            }\n        } else if (index == 2) {\n            // The \"clang\" noise wave is based on a similar noise wave in the modded beepbox made by DAzombieRE.\n            let drumBuffer = 1;\n            for (let i = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = (drumBuffer & 1) * 2.0 - 1.0;\n                let newBuffer = drumBuffer >> 1;\n                if (((drumBuffer + newBuffer) & 1) == 1) {\n                    newBuffer += 2 << 14;\n                }\n                drumBuffer = newBuffer;\n            }\n        } else if (index == 3) {\n            // The \"buzz\" noise wave is based on a similar noise wave in the modded beepbox made by DAzombieRE.\n            let drumBuffer = 1;\n            for (let i = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = (drumBuffer & 1) * 2.0 - 1.0;\n                let newBuffer = drumBuffer >> 1;\n                if (((drumBuffer + newBuffer) & 1) == 1) {\n                    newBuffer += 10 << 2;\n                }\n                drumBuffer = newBuffer;\n            }\n        } else if (index == 4) {\n            // \"hollow\" drums, designed in frequency space and then converted via FFT:\n            drawNoiseSpectrum(wave, Config.chipNoiseLength, 10, 11, 1, 1, 0);\n            drawNoiseSpectrum(wave, Config.chipNoiseLength, 11, 14, .6578, .6578, 0);\n            inverseRealFourierTransform!(wave, Config.chipNoiseLength);\n            scaleElementsByFactor!(wave, 1.0 / Math.sqrt(Config.chipNoiseLength));\n        } else if (index == 5) {\n            // \"Shine\" drums from modbox!\n            var drumBuffer = 1;\n            for (var i = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = (drumBuffer & 1) * 2.0 - 1.0;\n                var newBuffer = drumBuffer >> 1;\n                if (((drumBuffer + newBuffer) & 1) == 1) {\n                    newBuffer += 10 << 2;\n                }\n                drumBuffer = newBuffer;\n            }\n        } else if (index == 6) {\n            // \"Deep\" drums from modbox!\n            drawNoiseSpectrum(wave, Config.chipNoiseLength, 1, 10, 1, 1, 0);\n            drawNoiseSpectrum(wave, Config.chipNoiseLength, 20, 14, -2, -2, 0);\n            inverseRealFourierTransform!(wave, Config.chipNoiseLength);\n            scaleElementsByFactor!(wave, 1.0 / Math.sqrt(Config.chipNoiseLength));\n        } else if (index == 7) {\n            // \"Cutter\" drums from modbox!\n            var drumBuffer = 1;\n            for (var i = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = (drumBuffer & 1) * 4.0 * (Math.random() * 14 + 1) - 8.0;\n                var newBuffer = drumBuffer >> 1;\n                if (((drumBuffer + newBuffer) & 1) == 1) {\n                    newBuffer += 15 << 2;\n                }\n                drumBuffer = newBuffer;\n            }\n        } else if (index == 8) {\n            // \"Metallic\" drums from modbox!\n            var drumBuffer = 1;\n            for (var i = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = (drumBuffer & 1) / 2.0 - 0.5;\n                var newBuffer = drumBuffer >> 1;\n                if (((drumBuffer + newBuffer) & 1) == 1) {\n                    newBuffer -= 10 << 2;\n                }\n                drumBuffer = newBuffer;\n            }\n        } else if (index == 9) {\n            // a noise more like old static than white noise\n            let drumBuffer = 1;\n            for (let i = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = (drumBuffer & 1) * 2.0 - 1.1;\n                let newBuffer = drumBuffer >> 1;\n                if (((drumBuffer + newBuffer) & 1) == 1) {\n                    newBuffer += 8 ^ 2 << 16;\n                }\n                drumBuffer = newBuffer;\n            }\n        }\n        else if (index == 10) {\n            for (let i = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = Math.round(Math.random());\n            }\n        }\n        else if (index == 11) {\n            var drumBuffer = 1;\n            for (var i = 0; i < Config.chipNoiseLength; i++) {\n                wave[i] = Math.round((drumBuffer & 1));\n                var newBuffer = drumBuffer >> 1;\n                if (((drumBuffer + newBuffer) & 1) == 1) {\n                    newBuffer -= 10 << 2;\n                }\n                drumBuffer = newBuffer;\n            }\n        }\n        else if (index == 12) {\n            for (let i = 0; i < Config.chipNoiseLength; i++) {\n                var ultraboxnewchipnoiserand = Math.random();\n                wave[i] = Math.pow(ultraboxnewchipnoiserand, Math.clz32(ultraboxnewchipnoiserand));\n            }\n        }\n        else if (index == 13) {\n            // https://noisehack.com/generate-noise-web-audio-api/\n            var b0 = 0, b1 = 0, b2 = 0, b3, b4, b5, b6;\n            b0 = b1 = b2 = b3 = b4 = b5 = b6 = 0.0;\n\n            for (let i = 0; i < Config.chipNoiseLength; i++) {\n                var white = Math.random() * 2 - 1;\n                b0 = 0.99886 * b0 + white * 0.0555179;\n                b1 = 0.99332 * b1 + white * 0.0750759;\n                b2 = 0.96900 * b2 + white * 0.1538520;\n                b3 = 0.86650 * b3 + white * 0.3104856;\n                b4 = 0.55000 * b4 + white * 0.5329522;\n                b5 = -0.7616 * b5 - white * 0.0168980;\n                wave[i] = b0 + b1 + b2 + b3 + b4 + b5 + b6 + white * 0.5362;\n                wave[i] *= 0.44;\n                b6 = white * 0.115926;\n            }\n        }\n        else if (index == 14) {\n            var lastOut = 0.0;\n\n            for (let i = 0; i < Config.chipNoiseLength; i++) {\n                var white = Math.random() * 2 - 1;\n                wave[i] = (lastOut + (0.02 * white)) / 1.02;\n                lastOut = wave[i];\n                wave[i] *= 14;\n            }\n        }\n\n        else {\n            throw new Error(\"Unrecognized drum index: \" + index);\n        }\n\n        wave[Config.chipNoiseLength] = wave[0];\n    }\n\n    return wave;\n}\n\nexport function drawNoiseSpectrum(wave: Float32Array, waveLength: number, lowOctave: number, highOctave: number, lowPower: number, highPower: number, overallSlope: number): number {\n    const referenceOctave = 11;\n    const referenceIndex = 1 << referenceOctave;\n    const lowIndex = Math.pow(2, lowOctave) | 0;\n    const highIndex = Math.min(waveLength >> 1, Math.pow(2, highOctave) | 0);\n    const retroWave: Float32Array = getDrumWave(0, null, null);\n    let combinedAmplitude = 0.0;\n    for (let i = lowIndex; i < highIndex; i++) {\n\n        let lerped = lowPower + (highPower - lowPower) * (Math.log2(i) - lowOctave) / (highOctave - lowOctave);\n        let amplitude = Math.pow(2, (lerped - 1) * 7 + 1) * lerped;\n\n        amplitude *= Math.pow(i / referenceIndex, overallSlope);\n\n        combinedAmplitude += amplitude;\n\n        // Add two different sources of psuedo-randomness to the noise\n        // (individually they aren't random enough) but in a deterministic\n        // way so that live spectrum editing doesn't result in audible pops.\n        // Multiply all the sine wave amplitudes by 1 or -1 based on the\n        // LFSR retro wave (effectively random), and also rotate the phase\n        // of each sine wave based on the golden angle to disrupt the symmetry.\n        amplitude *= retroWave[i];\n        const radians = 0.61803398875 * i * i * Math.PI * 2.0;\n\n        wave[i] = Math.cos(radians) * amplitude;\n        wave[waveLength - i] = Math.sin(radians) * amplitude;\n    }\n\n    return combinedAmplitude;\n}\n\nexport function getArpeggioPitchIndex(pitchCount: number, useFastTwoNoteArp: boolean, arpeggio: number): number {\n    let arpeggioPattern: ReadonlyArray<number> = Config.arpeggioPatterns[pitchCount - 1];\n    if (arpeggioPattern != null) {\n        if (pitchCount == 2 && useFastTwoNoteArp == false) {\n            arpeggioPattern = [0, 0, 1, 1];\n        }\n        return arpeggioPattern[arpeggio % arpeggioPattern.length];\n    } else {\n        return arpeggio % pitchCount;\n    }\n}\n\n// Pardon the messy type casting. This allows accessing array members by numerical index or string name.\nexport function toNameMap<T extends BeepBoxOption>(array: Array<Pick<T, Exclude<keyof T, \"index\">>>): DictionaryArray<T> {\n    const dictionary: Dictionary<T> = {};\n    for (let i = 0; i < array.length; i++) {\n        const value: any = array[i];\n        value.index = i;\n        dictionary[value.name] = <T>value;\n    }\n    const result: DictionaryArray<T> = <DictionaryArray<T>><any>array;\n    result.dictionary = dictionary;\n    return result;\n}\n\nexport function effectsIncludeTransition(effects: number): boolean {\n    return (effects & (1 << MDEffectType.transition)) != 0;\n}\nexport function effectsIncludeChord(effects: number): boolean {\n    return (effects & (1 << MDEffectType.chord)) != 0;\n}\nexport function effectsIncludePitchShift(effects: number): boolean {\n    return (effects & (1 << MDEffectType.pitchShift)) != 0;\n}\nexport function effectsIncludeDetune(effects: number): boolean {\n    return (effects & (1 << MDEffectType.detune)) != 0;\n}\nexport function effectsIncludeVibrato(effects: number): boolean {\n    return (effects & (1 << MDEffectType.vibrato)) != 0;\n}\nexport function effectsIncludeNoteRange(effects: number): boolean {\n    return (effects & (1 << MDEffectType.noteRange)) != 0;\n}\n\nexport function calculateRingModHertz(sliderHz: number, sliderHzOffset = 0): number {\n    //replaces the value 21 with 0\n    if (sliderHz == 0) return 0;\n    if (sliderHz > 0) sliderHz -= 1 / Config.ringModHzRange;\n    if (sliderHz > 1 / Config.ringModHzRange) sliderHz += 1 / Config.ringModHzRange;\n    //calculate ring mod\n    return Math.floor(Config.ringModMinHz * Math.pow(Config.ringModMaxHz / Config.ringModMinHz, sliderHz))\n}\nexport function rawChipToIntegrated(raw: DictionaryArray<ChipWave>): DictionaryArray<ChipWave> {\n    const newArray: Array<ChipWave> = new Array<ChipWave>(raw.length);\n    const dictionary: Dictionary<ChipWave> = {};\n    for (let i = 0; i < newArray.length; i++) {\n        newArray[i] = Object.assign([], raw[i]);\n        const value: any = newArray[i];\n        value.index = i;\n        dictionary[value.name] = <ChipWave>value;\n    }\n    for (let key in dictionary) {\n        dictionary[key].samples = performIntegral(dictionary[key].samples);\n    }\n    const result: DictionaryArray<ChipWave> = <DictionaryArray<ChipWave>><any>newArray;\n    result.dictionary = dictionary;\n    return result;\n}\n", ":root {\n    --page-margin: #1e0915;\n    --editor-background: #1e0915;\n    --playhead: rgba(255, 255, 255, 0.9);\n    --secondary-text: #ffcedd;\n    --box-selection-fill: #1e0915;\n    --loop-accent: #873a51;\n    --link-accent: #df88ff;\n    --ui-widget-background: #581b3e;\n    --ui-widget-focus: #762b4c;\n    --pitch-background: #381d24;\n    --tonic: #873a51;\n    --fifth-note: #75001e;\n    --white-piano-key: #cca5c7;\n    --black-piano-key: #402f2f;\n    --use-color-formula: true;\n    --track-editor-bg-pitch: #571c40;\n    --track-editor-bg-pitch-dim: #290d0d;\n    --track-editor-bg-noise: #571131;\n    --track-editor-bg-noise-dim: #330a28;\n    --track-editor-bg-mod: #54083c;\n    --track-editor-bg-mod-dim: #360426;\n    --multiplicative-mod-slider: #9f6082;\n    --overwriting-mod-slider: #9e3470;\n    --indicator-primary: #b3498f;\n    --indicator-secondary: #541d40;\n    --select2-opt-group: #4f191e;\n    --input-box-outline: #18041a;\n    --mute-button-normal: #dd5d94;\n    --mute-button-mod: #ba364c;\n    --mod-label-primary: #541625;\n    --mod-label-secondary-text: rgb(120, 87, 86);\n    --mod-label-primary-text: gray;\n\n    --pitch-secondary-channel-hue: -80;\n    --pitch-secondary-channel-hue-scale 0;\n    --pitch-secondary-channel-sat: 43;\n    --pitch-secondary-channel-sat-scale: 0.1;\n    --pitch-secondary-channel-lum: 40;\n    --pitch-secondary-channel-lum-scale: 0.05;\n\n    --pitch-primary-channel-hue: -53;\n    --pitch-primary-channel-hue-scale: 6.1;\n    --pitch-primary-channel-sat: 75;\n    --pitch-primary-channel-sat-scale: 0.1;\n    --pitch-primary-channel-lum: 67.5;\n    --pitch-primary-channel-lum-scale: 0.05;\n\n    --pitch-secondary-note-hue: -34;\n    --pitch-secondary-note-hue-scale: 6.1;\n    --pitch-secondary-note-sat: 93.9;\n    --pitch-secondary-note-sat-scale: 0.1;\n    --pitch-secondary-note-lum: 25;\n    --pitch-secondary-note-lum-scale: 0.05;\n\n    --pitch-primary-note-hue: -53;\n    --pitch-primary-note-hue-scale: 6.1;\n    --pitch-primary-note-sat: 100;\n    --pitch-primary-note-sat-scale: 0.05;\n    --pitch-primary-note-lum: 85.6;\n    --pitch-primary-note-lum-scale: 0.025;\n\n    --noise-secondary-channel-hue: 0;\n    --noise-secondary-channel-hue-scale: 2;\n    --noise-secondary-channel-sat: 65;\n    --noise-secondary-channel-sat-scale: 0;\n    --noise-secondary-channel-lum: 42;\n    --noise-secondary-channel-lum-scale: 0;\n\n    --noise-primary-channel-hue: 0;\n    --noise-primary-channel-hue-scale: 1;\n    --noise-primary-channel-sat: 100;\n    --noise-primary-channel-sat-scale: 1;\n    --noise-primary-channel-lum: 63.5;\n    --noise-primary-channel-lum-scale: 0;\n\n    --noise-secondary-note-hue: 24;\n    --noise-secondary-note-hue-scale: 2;\n    --noise-secondary-note-sat: 100;\n    --noise-secondary-note-sat-scale: 0;\n    --noise-secondary-note-lum: 35;\n    --noise-secondary-note-lum-scale: 0;\n\n    --noise-primary-note-hue: 24;\n    --noise-primary-note-hue-scale: 2;\n    --noise-primary-note-sat: 100;\n    --noise-primary-note-sat-scale: 1;\n    --noise-primary-note-lum: 60;\n    --noise-primary-note-lum-scale: 1;\n\n    --mod-secondary-channel-hue: 55;\n    --mod-secondary-channel-hue-scale: 1.5;\n    --mod-secondary-channel-sat: 100;\n    --mod-secondary-channel-sat-scale: 0;\n    --mod-secondary-channel-lum: 20;\n    --mod-secondary-channel-lum-scale: 0;\n\n    --mod-primary-channel-hue: 55;\n    --mod-primary-channel-hue-scale: 1.5;\n    --mod-primary-channel-sat: 96;\n    --mod-primary-channel-sat-scale: 0;\n    --mod-primary-channel-lum: 50;\n    --mod-primary-channel-lum-scale: 0;\n\n    --mod-secondary-note-hue: 55;\n    --mod-secondary-note-hue-scale: 1.5;\n    --mod-secondary-note-sat: 92;\n    --mod-secondary-note-sat-scale: 0;\n    --mod-secondary-note-lum: 45;\n    --mod-secondary-note-lum-scale: 0;\n\n    --mod-primary-note-hue: 55;\n    --mod-primary-note-hue-scale: 1.5;\n    --mod-primary-note-sat: 96;\n    --mod-primary-note-sat-scale: 0;\n    --mod-primary-note-lum: 85;\n    --mod-primary-note-lum-scale: 0;\n\n    --note-flash: #ffffff;\n    --note-flash-secondary: #ffffff77;\n\n    --oscilloscope-line-R: var(--ui-widget-background);\n    --oscilloscope-line-L: var(--secondary-text);\n    --text-spacing-icon: >;\n    --scrollbar-color: #bf2c5d;\n\n    --file-page-symbol: url(\"theme_resources/icon-file.png\");\n    --edit-pencil-symbol: url(\"theme_resources/icon-edit.png\");\n    --preferences-gear-symbol: url(\"theme_resources/icon-preferences.png\");\n    --instrument-copy-symbol: url(\"theme_resources/icon-copy.png\");\n    --instrument-paste-symbol: url(\"theme_resources/icon-paste.png\");\n    --play-symbol: url(\"theme_resources/icon-play.png\");\n    --pause-symbol: url(\"theme_resources/icon-pause.png\");\n    --record-symbol: url(\"theme_resources/icon-record.png\");\n    --stop-symbol: url(\"theme_resources/icon-stop.png\");\n    --prev-bar-symbol: url(\"theme_resources/icon-prev.png\");\n    --next-bar-symbol: url(\"theme_resources/icon-next.png\");\n    --muted-symbol: url(\"theme_resources/icon-speakerMuted.png\");\n    --unmuted-symbol: url(\"theme_resources/icon-speaker.png\");\n    --volume-symbol: url(\"theme_resources/icon-speaker.png\");\n    --zoom-in-symbol: url(\"theme_resources/icon-zoomIn.png\");\n    --zoom-out-symbol: url(\"theme_resources/icon-zoomOut.png\");\n    --export-symbol: url(\"theme_resources/icon-export.png\");\n}\n\n* {\n    cursor: url(\"theme_resources/abyssbox_cursor.png\"), auto;\n}\n\n@font-face {\n    font-family: \"AbyssType\";\n    src:\n        url(\"theme_resources/abysstype.otf\") format(\"opentype\") tech(color-COLRv1),\n}\n\n/* sets background image */\nbody {\n    background-image: url(\"theme_resources/stripesbg.gif\") !important;\n    background-position: center;\n    background-repeat: repeat;\n\n    image-rendering: -moz-crisp-edges !important;\n    /* Firefox */\n    image-rendering: -webkit-optimize-contrast !important;\n    /* Webkit (Chrome/Safari) */\n    image-rendering: -o-crisp-edges !important;\n    /* Opera */\n    image-rendering: pixelated !important;\n    /* Future browsers */\n    image-rendering: optimizeSpeed !important;\n    /* IE */\n}\n\n#text-content {\n    border-image-source: url(\"theme_resources/abyssbox_border.png\");\n    border-image-slice: 4 fill;\n    border-image-width: 8px;\n    border-image-repeat: stretch;\n    padding: 12px;\n\n    image-rendering: -moz-crisp-edges !important;\n    /* Firefox */\n    image-rendering: -webkit-optimize-contrast !important;\n    /* Webkit (Chrome/Safari) */\n    image-rendering: -o-crisp-edges !important;\n    /* Opera */\n    image-rendering: pixelated !important;\n    /* Future browsers */\n    image-rendering: optimizeSpeed !important;\n    /* IE */\n}\n\n#beepboxEditorContainer {\n    border-image-source: url(\"theme_resources/abyssbox_border.png\");\n    border-image-slice: 4 fill;\n    border-image-width: 8px;\n    border-image-repeat: stretch;\n    padding: 12px;\n\n    image-rendering: -moz-crisp-edges !important;\n    /* Firefox */\n    image-rendering: -webkit-optimize-contrast !important;\n    /* Webkit (Chrome/Safari) */\n    image-rendering: -o-crisp-edges !important;\n    /* Opera */\n    image-rendering: pixelated !important;\n    /* Future browsers */\n    image-rendering: optimizeSpeed !important;\n    /* IE */\n}\n\n.beepboxEditor button,\nbutton.playButton,\nbutton.pauseButton,\nbutton.recordButton,\nbutton.stopButton,\nbutton.nextBarButton,\nbutton.prevBarButton,\nbutton.copyButton,\nbutton.pasteButton,\nbutton.exportInstrumentButton,\nbutton.importInstrumentButton,\n.beepboxEditor select,\n.beepboxEditor .select2-selection__rendered {\n    border-image-source: url(\"theme_resources/abyssbox_border.png\") !important;\n    border-image-slice: 4 fill !important;\n    border-image-width: 4px !important;\n    border-image-repeat: stretch !important;\n    padding: 4px !important;\n\n    image-rendering: -moz-crisp-edges !important;\n    /* Firefox */\n    image-rendering: -webkit-optimize-contrast !important;\n    /* Webkit (Chrome/Safari) */\n    image-rendering: -o-crisp-edges !important;\n    /* Opera */\n    image-rendering: pixelated !important;\n    /* Future browsers */\n    image-rendering: optimizeSpeed !important;\n    /* IE */\n\n    cursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\n}\n\ndiv.selectRow button:not(.copyButton, .pasteButton, .exportInstrumentButton, .importInstrumentButton) {\n    --ui-widget-background: #1e0915 !important;\n    border-image-source: none !important;\n}\n\nselect.trackSelectBox {\n    border-image: none !important;\n}\n\n@font-face {\n    font-family: \"AbyssType_small\";\n    src:\n        url(\"theme_resources/abysstype_small.otf\") format(\"opentype\") tech(color-COLRv1),\n}\n\nhtml {\n    font-family: 'AbyssType';\n}\n\ndiv.channelBoxLabel {\n    font-family: 'AbyssType_small' !important;\n}\n\n.beepboxEditor input[type=\"range\"]::-webkit-slider-thumb {\n    cursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\n}\n\n.beepboxEditor input[type=\"range\"]::-webkit-slider-runnable-track {\n    cursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\n}\n\n.beepboxEditor input[type=\"range\"]:focus::-webkit-slider-runnable-track {\n    cursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\n}\n\n.beepboxEditor input[type=\"range\"]::-ms-thumb {\n    cursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\n}\n\n.beepboxEditor input[type=\"range\"]::-ms-track {\n    cursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\n}\n\n.beepboxEditor input[type=\"range\"]:focus::-ms-track {\n    cursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\n}\n\n.beepboxEditor input[type=\"range\"]::-moz-range-thumb {\n    cursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\n}\n\n.beepboxEditor input[type=\"range\"]::-moz-range-track {\n    cursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\n}\n\n.beepboxEditor input[type=\"range\"]:focus::-moz-range-track {\n    cursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\n}\n\n.beepboxEditor input[type=\"text\"],\n.beepboxEditor input[type=\"number\"] {\n    cursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\n}\n\n.beepboxEditor input[type=\"checkbox\"] {\n    cursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\n}\n\n.beepboxEditor input[type=\"checkbox\"]:checked {\n    cursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\n}\n\n.beepboxEditor input[type=\"checkbox\"]:checked:after {\n    cursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\n}\n\ndiv.selectRow span {\n    cursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\n}", ":root {\n    --page-margin: #e0adbc;\n    --editor-background: #e0adbc;\n    --playhead: rgba(255, 255, 255, 0.9);\n    --primary-text: #6110d9;\n    --secondary-text: #cc1338;\n    --inverted-text: #e8bcc9;\n    --box-selection-fill: #bf2c5d;\n    --loop-accent: #8c346a;\n    --link-accent: #8c346a;\n    --ui-widget-background: #f5e9f0;\n    --ui-widget-focus: #f5e9f0;\n    --pitch-background: #eddadf;\n    --tonic: #f5f0f1;\n    --fifth-note: #ffb5c9;\n    --white-piano-key: #cca5c7;\n    --black-piano-key: #402f2f;\n    --use-color-formula: true;\n    --track-editor-bg-pitch: #edbecc;\n    --track-editor-bg-pitch-dim: #e0adbc;\n    --track-editor-bg-noise: #edbecc;\n    --track-editor-bg-noise-dim: #e0adbc;\n    --track-editor-bg-mod: #edbecc;\n    --track-editor-bg-mod-dim: #e0adbc;\n    --multiplicative-mod-slider: #9f6082;\n    --overwriting-mod-slider: #9e3470;\n    --indicator-primary: #b3498f;\n    --indicator-secondary: #541d40;\n    --select2-opt-group: #4f191e;\n    --input-box-outline: #18041a;\n    --mute-button-normal: #dd5d94;\n    --mute-button-mod: #ba364c;\n    --mod-label-primary: #541625;\n    --mod-label-secondary-text: rgb(120, 87, 86);\n    --mod-label-primary-text: gray;\n    --mod-title: #cc1338;\n\n    --pitch-secondary-channel-hue: -80;\n    --pitch-secondary-channel-hue-scale: 0;\n    --pitch-secondary-channel-sat: 255;\n    --pitch-secondary-channel-sat-scale: 0.1;\n    --pitch-secondary-channel-lum: 30;\n    --pitch-secondary-channel-lum-scale: 0.05;\n\n    --pitch-primary-channel-hue: -53;\n    --pitch-primary-channel-hue-scale: 6.1;\n    --pitch-primary-channel-sat: 255;\n    --pitch-primary-channel-sat-scale: 0.1;\n    --pitch-primary-channel-lum: 60;\n    --pitch-primary-channel-lum-scale: 0.05;\n\n    --pitch-secondary-note-hue: -34;\n    --pitch-secondary-note-hue-scale: 6.1;\n    --pitch-secondary-note-sat: 255;\n    --pitch-secondary-note-sat-scale: 0.1;\n    --pitch-secondary-note-lum: 30;\n    --pitch-secondary-note-lum-scale: 0.05;\n\n    --pitch-primary-note-hue: -53;\n    --pitch-primary-note-hue-scale: 6.1;\n    --pitch-primary-note-sat: 255;\n    --pitch-primary-note-sat-scale: 0.05;\n    --pitch-primary-note-lum: 60;\n    --pitch-primary-note-lum-scale: 0.025;\n\n    --noise-secondary-channel-hue: 0;\n    --noise-secondary-channel-hue-scale: 2;\n    --noise-secondary-channel-sat: 255;\n    --noise-secondary-channel-sat-scale: 0;\n    --noise-secondary-channel-lum: 30;\n    --noise-secondary-channel-lum-scale: 0;\n\n    --noise-primary-channel-hue: 0;\n    --noise-primary-channel-hue-scale: 1;\n    --noise-primary-channel-sat: 255;\n    --noise-primary-channel-sat-scale: 1;\n    --noise-primary-channel-lum: 60;\n    --noise-primary-channel-lum-scale: 0;\n\n    --noise-secondary-note-hue: 24;\n    --noise-secondary-note-hue-scale: 2;\n    --noise-secondary-note-sat: 255;\n    --noise-secondary-note-sat-scale: 0;\n    --noise-secondary-note-lum: 30;\n    --noise-secondary-note-lum-scale: 0;\n\n    --noise-primary-note-hue: 24;\n    --noise-primary-note-hue-scale: 2;\n    --noise-primary-note-sat: 255;\n    --noise-primary-note-sat-scale: 1;\n    --noise-primary-note-lum: 60;\n    --noise-primary-note-lum-scale: 1;\n\n    --mod-secondary-channel-hue: 55;\n    --mod-secondary-channel-hue-scale: 1.5;\n    --mod-secondary-channel-sat: 255;\n    --mod-secondary-channel-sat-scale: 0;\n    --mod-secondary-channel-lum: 30;\n    --mod-secondary-channel-lum-scale: 0;\n\n    --mod-primary-channel-hue: 55;\n    --mod-primary-channel-hue-scale: 1.5;\n    --mod-primary-channel-sat: 255;\n    --mod-primary-channel-sat-scale: 0;\n    --mod-primary-channel-lum: 60;\n    --mod-primary-channel-lum-scale: 0;\n\n    --mod-secondary-note-hue: 55;\n    --mod-secondary-note-hue-scale: 1.5;\n    --mod-secondary-note-sat: 255;\n    --mod-secondary-note-sat-scale: 0;\n    --mod-secondary-note-lum: 30;\n    --mod-secondary-note-lum-scale: 0;\n\n    --mod-primary-note-hue: 55;\n    --mod-primary-note-hue-scale: 1.5;\n    --mod-primary-note-sat: 255;\n    --mod-primary-note-sat-scale: 0;\n    --mod-primary-note-lum: 60;\n    --mod-primary-note-lum-scale: 0;\n\n    --note-flash: #ffffff;\n    --note-flash-secondary: #ffffff77;\n\n    --oscilloscope-line-R: var(--ui-widget-background);\n    --oscilloscope-line-L: var(--secondary-text);\n    --text-spacing-icon: >;\n    --scrollbar-color: #bf2c5d;\n\n    --file-page-symbol: url(\"theme_resources/icon-file.png\");\n    --edit-pencil-symbol: url(\"theme_resources/icon-edit.png\");\n    --preferences-gear-symbol: url(\"theme_resources/icon-preferences.png\");\n    --instrument-copy-symbol: url(\"theme_resources/icon-copy.png\");\n    --instrument-paste-symbol: url(\"theme_resources/icon-paste.png\");\n    --play-symbol: url(\"theme_resources/icon-play.png\");\n    --pause-symbol: url(\"theme_resources/icon-pause.png\");\n    --record-symbol: url(\"theme_resources/icon-record.png\");\n    --stop-symbol: url(\"theme_resources/icon-stop.png\");\n    --prev-bar-symbol: url(\"theme_resources/icon-prev.png\");\n    --next-bar-symbol: url(\"theme_resources/icon-next.png\");\n    --muted-symbol: url(\"theme_resources/icon-speakerMuted.png\");\n    --unmuted-symbol: url(\"theme_resources/icon-speaker.png\");\n    --volume-symbol: url(\"theme_resources/icon-speaker.png\");\n    --zoom-in-symbol: url(\"theme_resources/icon-zoomIn.png\");\n    --zoom-out-symbol: url(\"theme_resources/icon-zoomOut.png\");\n    --export-symbol: url(\"theme_resources/icon-export.png\");\n}\n\n/* sets background image */\nbody {\n    background-image: url(\"theme_resources/stripesbg_light.gif\") !important;\n    background-position: center;\n    background-repeat: repeat;\n\n    image-rendering: -moz-crisp-edges !important;\n    /* Firefox */\n    image-rendering: -webkit-optimize-contrast !important;\n    /* Webkit (Chrome/Safari) */\n    image-rendering: -o-crisp-edges !important;\n    /* Opera */\n    image-rendering: pixelated !important;\n    /* Future browsers */\n    image-rendering: optimizeSpeed !important;\n    /* IE */\n}\n\n#text-content {\n    border-image-source: url(\"theme_resources/abyssbox_border_light.png\");\n    border-image-slice: 4 fill;\n    border-image-width: 8px;\n    border-image-repeat: stretch;\n    padding: 12px;\n\n    image-rendering: -moz-crisp-edges !important;\n    /* Firefox */\n    image-rendering: -webkit-optimize-contrast !important;\n    /* Webkit (Chrome/Safari) */\n    image-rendering: -o-crisp-edges !important;\n    /* Opera */\n    image-rendering: pixelated !important;\n    /* Future browsers */\n    image-rendering: optimizeSpeed !important;\n    /* IE */\n}\n\n#beepboxEditorContainer {\n    border-image-source: url(\"theme_resources/abyssbox_border_light.png\");\n    border-image-slice: 4 fill;\n    border-image-width: 8px;\n    border-image-repeat: stretch;\n    padding: 12px;\n\n    image-rendering: -moz-crisp-edges !important;\n    /* Firefox */\n    image-rendering: -webkit-optimize-contrast !important;\n    /* Webkit (Chrome/Safari) */\n    image-rendering: -o-crisp-edges !important;\n    /* Opera */\n    image-rendering: pixelated !important;\n    /* Future browsers */\n    image-rendering: optimizeSpeed !important;\n    /* IE */\n}\n\n.beepboxEditor button,\nbutton.playButton,\nbutton.pauseButton,\nbutton.recordButton,\nbutton.stopButton,\nbutton.nextBarButton,\nbutton.prevBarButton,\nbutton.copyButton,\nbutton.pasteButton,\nbutton.exportInstrumentButton,\nbutton.importInstrumentButton,\n.beepboxEditor select,\n.beepboxEditor .select2-selection__rendered {\n    border-image-source: url(\"theme_resources/abyssbox_border_light.png\") !important;\n    border-image-slice: 4 fill !important;\n    border-image-width: 4px !important;\n    border-image-repeat: stretch !important;\n    padding: 4px !important;\n\n    image-rendering: -moz-crisp-edges !important;\n    /* Firefox */\n    image-rendering: -webkit-optimize-contrast !important;\n    /* Webkit (Chrome/Safari) */\n    image-rendering: -o-crisp-edges !important;\n    /* Opera */\n    image-rendering: pixelated !important;\n    /* Future browsers */\n    image-rendering: optimizeSpeed !important;\n    /* IE */\n\n    cursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\n}\n\ndiv.selectRow button:not(.copyButton, .pasteButton, .exportInstrumentButton, .importInstrumentButton) {\n    --ui-widget-background: var(--editor-background) !important;\n    border-image-source: none !important;\n}\n\nselect.trackSelectBox {\n    border-image: none !important;\n}\n\n/* sets cursor */\n* {\n    cursor: url(\"theme_resources/abyssbox_cursor.png\"), auto !important;\n}\n\n@font-face {\n    font-family: \"AbyssType\";\n    src:\n        url(\"theme_resources/abysstype.otf\") format(\"opentype\") tech(color-COLRv1),\n}\n\n@font-face {\n    font-family: \"AbyssType_small\";\n    src:\n        url(\"theme_resources/abysstype_small.otf\") format(\"opentype\") tech(color-COLRv1),\n}\n\nhtml {\n    font-family: 'AbyssType';\n}\n\ndiv.channelBoxLabel {\n    font-family: 'AbyssType_small' !important;\n}\n\n.beepboxEditor input[type=\"range\"]::-webkit-slider-thumb {\n    cursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\n}\n\n.beepboxEditor input[type=\"range\"]::-webkit-slider-runnable-track {\n    cursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\n}\n\n.beepboxEditor input[type=\"range\"]:focus::-webkit-slider-runnable-track {\n    cursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\n}\n\n.beepboxEditor input[type=\"range\"]::-ms-thumb {\n    cursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\n}\n\n.beepboxEditor input[type=\"range\"]::-ms-track {\n    cursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\n}\n\n.beepboxEditor input[type=\"range\"]:focus::-ms-track {\n    cursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\n}\n\n.beepboxEditor input[type=\"range\"]::-moz-range-thumb {\n    cursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\n}\n\n.beepboxEditor input[type=\"range\"]::-moz-range-track {\n    cursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\n}\n\n.beepboxEditor input[type=\"range\"]:focus::-moz-range-track {\n    cursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\n}\n\n.beepboxEditor input[type=\"text\"],\n.beepboxEditor input[type=\"number\"] {\n    cursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\n}\n\n.beepboxEditor input[type=\"checkbox\"] {\n    cursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\n}\n\n.beepboxEditor input[type=\"checkbox\"]:checked {\n    cursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\n}\n\n.beepboxEditor input[type=\"checkbox\"]:checked:after {\n    cursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\n}\n\ndiv.selectRow span {\n    cursor: url(\"theme_resources/abyssbox_cursor_hand.png\"), pointer !important;\n}", ":root {\n    --page-margin: #000;\n    --editor-background: #020406;\n    --playhead: rgba(255, 255, 255, 0.9);\n    --secondary-text: #8e88ce;\n    --box-selection-fill: #044b94;\n    --loop-accent: #ad38f9;\n    --link-accent: #bd25ff;\n    --ui-widget-background: #080d1f;\n    --ui-widget-focus: #060f2d;\n    --pitch-background: #02060b;\n    --tonic: #00113a;\n    --fifth-note: #1b0019;\n    --white-piano-key: #02040c;\n    --black-piano-key: #02040c;\n    --white-piano-key-text: #fff;\n    --use-color-formula: true;\n    --track-editor-bg-pitch: #050829;\n    --track-editor-bg-pitch-dim: #010213;\n    --track-editor-bg-noise: #051529;\n    --track-editor-bg-noise-dim: #010b13;\n    --track-editor-bg-mod: #150529;\n    --track-editor-bg-mod-dim: #0a0113;\n    --multiplicative-mod-slider: #2b409c;\n    --overwriting-mod-slider: #6850b5;\n    --indicator-primary: #7f3bec;\n    --indicator-secondary: #213888;\n    --select2-opt-group: #1d123c;\n    --input-box-outline: #1b1e48;\n    --mute-button-normal: #d234b0;\n    --mute-button-mod: #263d98;\n    --mod-label-primary: #090910;\n    --mod-label-secondary-text: rgb(73, 69, 214);\n    --mod-label-primary-text: white;\n    --pitch-secondary-channel-hue: 183;\n    --pitch-secondary-channel-hue-scale: 158.7;\n    --pitch-secondary-channel-sat: 83.3;\n    --pitch-secondary-channel-sat-scale: 0.1;\n    --pitch-secondary-channel-lum: 40;\n    --pitch-secondary-channel-lum-scale: 0.05;\n    --pitch-primary-channel-hue: 183;\n    --pitch-primary-channel-hue-scale: 158.7;\n    --pitch-primary-channel-sat: 100;\n    --pitch-primary-channel-sat-scale: 0.1;\n    --pitch-primary-channel-lum: 67.5;\n    --pitch-primary-channel-lum-scale: 0.05;\n    --pitch-secondary-note-hue: 183;\n    --pitch-secondary-note-hue-scale: 158.7;\n    --pitch-secondary-note-sat: 93.9;\n    --pitch-secondary-note-sat-scale: 0.1;\n    --pitch-secondary-note-lum: 25;\n    --pitch-secondary-note-lum-scale: 0.05;\n    --pitch-primary-note-hue: 183;\n    --pitch-primary-note-hue-scale: 158.7;\n    --pitch-primary-note-sat: 100;\n    --pitch-primary-note-sat-scale: 0.05;\n    --pitch-primary-note-lum: 85.6;\n    --pitch-primary-note-lum-scale: 0.025;\n    --noise-secondary-channel-hue: 30;\n    --noise-secondary-channel-hue-scale: 2;\n    --noise-secondary-channel-sat: 25;\n    --noise-secondary-channel-sat-scale: 0;\n    --noise-secondary-channel-lum: 42;\n    --noise-secondary-channel-lum-scale: 0;\n    --noise-primary-channel-hue: 30;\n    --noise-primary-channel-hue-scale: 2;\n    --noise-primary-channel-sat: 33;\n    --noise-primary-channel-sat-scale: 0;\n    --noise-primary-channel-lum: 63.5;\n    --noise-primary-channel-lum-scale: 0;\n    --noise-secondary-note-hue: 30;\n    --noise-secondary-note-hue-scale: 2;\n    --noise-secondary-note-sat: 33.5;\n    --noise-secondary-note-sat-scale: 0;\n    --noise-secondary-note-lum: 55;\n    --noise-secondary-note-lum-scale: 0;\n    --noise-primary-note-hue: 30;\n    --noise-primary-note-hue-scale: 2;\n    --noise-primary-note-sat: 46.5;\n    --noise-primary-note-sat-scale: 0;\n    --noise-primary-note-lum: 74;\n    --noise-primary-note-lum-scale: 0;\n    --mod-secondary-channel-hue: 0;\n    --mod-secondary-channel-hue-scale: 1.5;\n    --mod-secondary-channel-sat: 88;\n    --mod-secondary-channel-sat-scale: 0;\n    --mod-secondary-channel-lum: 50;\n    --mod-secondary-channel-lum-scale: 0;\n    --mod-primary-channel-hue: 0;\n    --mod-primary-channel-hue-scale: 1.5;\n    --mod-primary-channel-sat: 96;\n    --mod-primary-channel-sat-scale: 0;\n    --mod-primary-channel-lum: 80;\n    --mod-primary-channel-lum-scale: 0;\n    --mod-secondary-note-hue: 0;\n    --mod-secondary-note-hue-scale: 1.5;\n    --mod-secondary-note-sat: 92;\n    --mod-secondary-note-sat-scale: 0;\n    --mod-secondary-note-lum: 45;\n    --mod-secondary-note-lum-scale: 0;\n    --mod-primary-note-hue: 0;\n    --mod-primary-note-hue-scale: 1.5;\n    --mod-primary-note-sat: 96;\n    --mod-primary-note-sat-scale: 0;\n    --mod-primary-note-lum: 85;\n    --mod-primary-note-lum-scale: 0;\n    --disabled-note-primary: #91879f;\n    --disabled-note-secondary: #6a677a;\n}", ":root {\n    --page-margin: #060304;\n    --editor-background: #060304;\n    --text-selection: rgb(115 80 76);\n    --box-selection-fill: rgb(174 73 81 / 45%);\n    --loop-accent: #834A69;\n    --ui-widget-background: #2a2523;\n    --ui-widget-focus: #4e4c44;\n    --pitch-background: #121212;\n    --tonic: #4f4f4f;\n    --fifth-note: #222;\n    --white-piano-key: #b59b9b;\n    --black-piano-key: #231e1e;\n    --track-editor-bg-pitch: #352f38;\n    --track-editor-bg-pitch-dim: #232025;\n    --track-editor-bg-noise: #3c3029;\n    --track-editor-bg-noise-dim: #251d19;\n    --track-editor-bg-mod: #202623;\n    --track-editor-bg-mod-dim: #131715;\n    --multiplicative-mod-slider: #D9D16E;\n    --overwriting-mod-slider: #2D826F;\n    --indicator-primary: #D9D16E;\n    --indicator-secondary: #444226;\n    --select2-opt-group: #20191c;\n    --input-box-outline: #20191c;\n    --mute-button-normal: var(--pitch2-primary-channel);\n    --mute-button-mod: var(--pitch4-primary-channel);\n    --pitch1-secondary-channel: #704a34;\n    --pitch1-primary-channel: #D9895A;\n    --pitch1-secondary-note: #704a34;\n    --pitch1-primary-note: #D9895A;\n    --pitch2-secondary-channel: #5f3538;\n    --pitch2-primary-channel: #AE4951;\n    --pitch2-secondary-note: #5f3538;\n    --pitch2-primary-note: #AE4951;\n    --pitch3-secondary-channel: #5c4336;\n    --pitch3-primary-channel: #CA9A81;\n    --pitch3-secondary-note: #5c4336;\n    --pitch3-primary-note: #CA9A81;\n    --pitch4-secondary-channel: #1d3143;\n    --pitch4-primary-channel: #386995;\n    --pitch4-secondary-note: #1d3143;\n    --pitch4-primary-note: #386995;\n    --pitch5-secondary-channel: #9c8a58;\n    --pitch5-primary-channel: #D9D16E;\n    --pitch5-secondary-note: #7c783f;\n    --pitch5-primary-note: #D9D16E;\n    --pitch6-secondary-channel: #886562;\n    --pitch6-primary-channel: #D3A9A5;\n    --pitch6-secondary-note: #886562;\n    --pitch6-primary-note: #D3A9A5;\n    --pitch7-secondary-channel: #1c3f37;\n    --pitch7-primary-channel: #2D826F;\n    --pitch7-secondary-note: #1c3f37;\n    --pitch7-primary-note: #2D826F;\n    --pitch8-secondary-channel: #442e2d;\n    --pitch8-primary-channel: #815150;\n    --pitch8-secondary-note: #442e2d;\n    --pitch8-primary-note: #815150;\n    --pitch9-secondary-channel: #8e6f60;\n    --pitch9-primary-channel: #E5B8A1;\n    --pitch9-secondary-note: #8e6f60;\n    --pitch9-primary-note: #E5B8A1;\n    --pitch10-secondary-channel: #4f3142;\n    --pitch10-primary-channel: #834A69;\n    --pitch10-secondary-note: #4f3142;\n    --pitch10-primary-note: #834A69;\n    --noise1-secondary-channel: #6b5346;\n    --noise1-primary-channel: #b99c89;\n    --noise1-secondary-note: #6b5346;\n    --noise1-primary-note: #F0D0BB;\n    --noise2-secondary-channel: #4a3839;\n    --noise2-primary-channel: #9c6b6e;\n    --noise2-secondary-note: #4a3839;\n    --noise2-primary-note: #c18b8f;\n    --noise3-secondary-channel: #2d3c4a;\n    --noise3-primary-channel: #536e86;\n    --noise3-secondary-note: #2d3c4a;\n    --noise3-primary-note: #8fa8c0;\n    --noise4-secondary-channel: #273f3a;\n    --noise4-primary-channel: #4e8377;\n    --noise4-secondary-note: #273f3a;\n    --noise4-primary-note: #87baae;\n    --noise5-secondary-channel: #372730;\n    --noise5-primary-channel: #7f5e70;\n    --noise5-secondary-note: #372730;\n    --noise5-primary-note: #cc96b3;\n    --mod1-secondary-channel: #783f1f;\n    --mod1-primary-channel: #dc6d2c;\n    --mod1-secondary-note: #783f1f;\n    --mod1-primary-note: #dc6d2c;\n    --mod2-secondary-channel: #0b3153;\n    --mod2-primary-channel: #1464ac;\n    --mod2-secondary-note: #0b3153;\n    --mod2-primary-note: #1464ac;\n    --mod3-secondary-channel: #075040;\n    --mod3-primary-channel: #08a17f;\n    --mod3-secondary-note: #075040;\n    --mod3-primary-note: #08a17f;\n    --mod4-secondary-channel: #631640;\n    --mod4-primary-channel: #b4186d;\n    --mod4-secondary-note: #631640;\n    --mod4-primary-note: #b4186d;\n    --mod-label-primary: #000;\n    --mod-label-secondary-text: #707070;\n    --mod-label-primary-text: white;\n    --disabled-note-primary: #5d5d5d;\n    --disabled-note-secondary: #292929;\n}", ":root {\n    --page-margin: #19337e;\n    --editor-background: #000333cf;\n    --playhead: rgba(255, 255, 255, 0.9);\n    --primary-text: #9af9ff;\n    --secondary-text: #4072dd;\n    --box-selection-fill: #044b94;\n    --loop-accent: #950d0d;\n    --link-accent: #0072ff;\n    --ui-widget-background: #255bb3;\n    --ui-widget-focus: #757575;\n    --pitch-background: #20468b73;\n    --tonic: #c9c9c9;\n    --fifth-note: #731d1d;\n    --white-piano-key: #eee;\n    --black-piano-key: #000;\n    --track-editor-bg-pitch: #535a73;\n    --track-editor-bg-pitch-dim: #353643;\n    --track-editor-bg-noise: #770000;\n    --track-editor-bg-noise-dim: #430000;\n    --track-editor-bg-mod: #5d1d06;\n    --track-editor-bg-mod-dim: #270000;\n    --multiplicative-mod-slider: #bb0000;\n    --overwriting-mod-slider: #ad0000;\n    --indicator-primary: #9c64f7;\n    --indicator-secondary: #393e4f;\n    --select2-opt-group: #5d576f;\n    --input-box-outline: #002957;\n    --mute-button-normal: #ffffff;\n    --mute-button-mod: #4f4f4f;\n    --mod-label-primary: #531313;\n    --pitch1-secondary-channel: #80858d;\n    --pitch1-primary-channel: #f2f7ff;\n    --pitch1-secondary-note: #80858d;\n    --pitch1-primary-note: #f2f7ff;\n    --pitch2-secondary-channel: #7392ad;\n    --pitch2-primary-channel: #a8d6ff;\n    --pitch2-secondary-note: #7392ad;\n    --pitch2-primary-note: #a8d6ff;\n    --pitch3-secondary-channel: #4b7eaa;\n    --pitch3-primary-channel: #71bdff;\n    --pitch3-secondary-note: #4b7eaa;\n    --pitch3-primary-note: #71bdff;\n    --pitch4-secondary-channel: #3594b1;\n    --pitch4-primary-channel: #48d4ff;\n    --pitch4-secondary-note: #3594b1;\n    --pitch4-primary-note: #48d4ff;\n    --pitch5-secondary-channel: #1b98b1;\n    --pitch5-primary-channel: #30f1ff;\n    --pitch5-secondary-note: #1b98b1;\n    --pitch5-primary-note: #30f1ff;\n    --pitch6-secondary-channel: #9e0000;\n    --pitch6-primary-channel: #db0000;\n    --pitch6-secondary-note: #9e0000;\n    --pitch6-primary-note: #db0000;\n    --pitch7-secondary-channel: #7c1717;\n    --pitch7-primary-channel: #9e0000;\n    --pitch7-secondary-note: #7c1717;\n    --pitch7-primary-note: #9e0000;\n    --pitch8-secondary-channel: #5c1f1f;\n    --pitch8-primary-channel: #7c1717;\n    --pitch8-secondary-note: #5c1f1f;\n    --pitch8-primary-note: #7c1717;\n    --pitch9-secondary-channel: #3e2020;\n    --pitch9-primary-channel: #5c1f1f;\n    --pitch9-secondary-note: #3e2020;\n    --pitch9-primary-note: #5c1f1f;\n    --pitch10-secondary-channel: #2f1c1c;\n    --pitch10-primary-channel: #5c1f1f;\n    --pitch10-secondary-note: #2f1c1c;\n    --pitch10-primary-note: #5c1f1f;\n    --noise1-secondary-channel: #828282;\n    --noise1-primary-channel: #cacaca;\n    --noise1-secondary-note: #828282;\n    --noise1-primary-note: #cacaca;\n    --noise2-secondary-channel: #2f8baf;\n    --noise2-primary-channel: #3de2ff;\n    --noise2-secondary-note: #2f8baf;\n    --noise2-primary-note: #3de2ff;\n    --noise3-secondary-channel: #6f50b1;\n    --noise3-primary-channel: #8567ff;\n    --noise3-secondary-note: #6f50b1;\n    --noise3-primary-note: #8567ff;\n    --noise4-secondary-channel: #d38900;\n    --noise4-primary-channel: #ffb500;\n    --noise4-secondary-note: #d38900;\n    --noise4-primary-note: #ffb500;\n    --noise5-secondary-channel: #af0008;\n    --noise5-primary-channel: #00d70e;\n    --noise5-secondary-note: #29b700;\n    --noise5-primary-note: #00f7ff;\n    --mod1-secondary-channel: #9d5bb9;\n    --mod1-primary-channel: #e16bff;\n    --mod1-secondary-note: #3a3ea4;\n    --mod1-primary-note: #fff;\n    --mod2-secondary-channel: #3a8d58;\n    --mod2-primary-channel: #42ffff;\n    --mod2-secondary-note: #3a8d58;\n    --mod2-primary-note: #42ffff;\n    --mod3-secondary-channel: #af6c00;\n    --mod3-primary-channel: #fa0;\n    --mod3-secondary-note: #0001a2;\n    --mod3-primary-note: #970000;\n    --mod4-secondary-channel: #d3d3d3;\n    --mod4-primary-channel: #759bff;\n    --mod4-secondary-note: #a00000;\n    --mod4-primary-note: #fff;\n    --disabled-note-primary: #3a3a3a;\n    --disabled-note-secondary: #000;\n}\n\n/* replaces hotdog with an image of the girls using the same scratch sprites from the 404 page*/\n#Hotdog {\n    display: inline !important;\n    content: url(\"theme_resources/AzurLaneThemeStarterSquad.png\") !important;\n    width: 75%;\n    height: 75%;\n    text-align: center;\n    margin-top: 25px;\n}\n\n/* sets cursor */\n* {\n    cursor: url(\"theme_resources/AzurLaneThemeMouse.png\"), auto !important;\n}\n\n/* sets background image */\nbody {\n    background-image: url(\"theme_resources/AzurLaneThemeMemoryTaskBackground.png\") !important;\n    background-size: cover;\n    background-position: center;\n    background-repeat: no-repeat;\n}\n\n/* make editor background transparent */\n#beepboxEditorContainer,\n.beepboxEditor,\n#text-content {\n    background: #0400257d !important;\n}\n\n#text-content>section>h1>font {\n    display: none;\n}\n\n#text-content>section>h1 {\n    margin: auto;\n    content: url(\"theme_resources/AzurLaneThemeLogo.png\");\n}\n\n.promptContainerBG::before {\n    box-shadow: inset 0 0 2000px rgba(255, 255, 255, .5);\n}", ":root {\n    --page-margin: #010121;\n    --editor-background: #020222;\n    --hover-preview: #f3ffff;\n    --playhead: #fff;\n    --primary-text: #c1f1ff;\n    --secondary-text: #546775;\n    --box-selection-fill: #3e0028;\n    --loop-accent: #5e68fffc;\n    --link-accent: #ff3ad5fc;\n    --ui-widget-background: #1f2b52;\n    --ui-widget-focus: #384e91;\n    --pitch-background: #2c3155;\n    --tonic: #935175;\n    --fifth-note: #1f569f;\n    --white-piano-key: #f3f2ff;\n    --black-piano-key: #4b4471;\n    --white-piano-key-text: #4b4471;\n    --track-editor-bg-pitch: #34406c;\n    --track-editor-bg-pitch-dim: #121931;\n    --track-editor-bg-noise: #562e3b;\n    --track-editor-bg-noise-dim: #161313;\n    --track-editor-bg-mod: #372e66;\n    --track-editor-bg-mod-dim: #2a1640;\n    --multiplicative-mod-slider: #606c9f;\n    --overwriting-mod-slider: #6850b5;\n    --indicator-primary: #ff8bd1;\n    --indicator-secondary: #393e4f;\n    --select2-opt-group: #5d576f;\n    --input-box-outline: #222;\n    --mute-button-normal: #7ce1ff;\n    --mute-button-mod: #db519d;\n    --pitch1-secondary-channel: #329b70;\n    --pitch1-primary-channel: #53ffb8;\n    --pitch1-secondary-note: #4cb98c;\n    --pitch1-primary-note: #98ffd4;\n    --pitch2-secondary-channel: #b08e4d;\n    --pitch2-primary-channel: #ffe185;\n    --pitch2-secondary-note: #91782e;\n    --pitch2-primary-note: #ffd968;\n    --pitch3-secondary-channel: #018e8e;\n    --pitch3-primary-channel: #3de4ff;\n    --pitch3-secondary-note: #24b7b7;\n    --pitch3-primary-note: #a7ffff;\n    --pitch4-secondary-channel: #792354;\n    --pitch4-primary-channel: #ff68bd;\n    --pitch4-secondary-note: #a73c78;\n    --pitch4-primary-note: #ff98d2;\n    --pitch5-secondary-channel: #185aab;\n    --pitch5-primary-channel: #6493ff;\n    --pitch5-secondary-note: #3e99d9;\n    --pitch5-primary-note: #b3e3ff;\n    --pitch6-secondary-channel: #953C47;\n    --pitch6-primary-channel: #FF7888;\n    --pitch6-secondary-note: #DF4F60;\n    --pitch6-primary-note: #FFB2BB;\n    --pitch7-secondary-channel: #4f007d;\n    --pitch7-primary-channel: #a54cd9;\n    --pitch7-secondary-note: #732b9d;\n    --pitch7-primary-note: #d386ff;\n    --pitch8-secondary-channel: #323c99;\n    --pitch8-primary-channel: #1b61ff;\n    --pitch8-secondary-note: #1848b3;\n    --pitch8-primary-note: #6f9bff;\n    --pitch9-secondary-channel: #1F605A;\n    --pitch9-primary-channel: #69FFEA;\n    --pitch9-secondary-note: #178076;\n    --pitch10-secondary-channel: #6D438C;\n    --pitch10-secondary-note: #8040B0;\n    --noise1-secondary-channel: #635070;\n    --noise1-primary-channel: #9071db;\n    --noise1-secondary-note: #915dc1;\n    --noise1-primary-note: #c5a5ff;\n    --noise2-secondary-channel: #993367;\n    --noise2-primary-channel: #dd777c;\n    --noise2-secondary-note: #cc6695;\n    --noise2-primary-note: #f0bbd1;\n    --noise3-secondary-channel: #4a8c8f;\n    --noise3-primary-channel: #77c5dd;\n    --noise3-secondary-note: #6fb4cf;\n    --noise3-primary-note: #bbf2ff;\n    --noise4-secondary-channel: #8e3e7d;\n    --noise4-primary-channel: #c682d2;\n    --noise4-secondary-note: #b871c1;\n    --noise4-primary-note: #ffb8f0;\n    --noise5-secondary-channel: #785e37;\n    --noise5-primary-channel: #bb9d77;\n    --noise5-secondary-note: #aa8c66;\n    --noise5-primary-note: #e2d1b2;\n    --mod1-secondary-channel: #4e8397;\n    --mod1-primary-channel: #92e6f3;\n    --mod1-secondary-note: #76b9d9;\n    --mod1-primary-note: #cde3ff;\n    --mod2-secondary-channel: #ad5774;\n    --mod2-primary-channel: #eba4ae;\n    --mod2-secondary-note: #c9719b;\n    --mod2-primary-note: #fdcee7;\n    --mod3-secondary-channel: #6f579f;\n    --mod3-primary-channel: #b192f7;\n    --mod3-secondary-note: #7c3fc8;\n    --mod4-secondary-channel: #a88a36;\n    --mod4-primary-channel: #bec825;\n    --mod4-secondary-note: #aecb57;\n    --mod4-primary-note: #dee9bd;\n    --mod-label-primary: #2c2c56;\n    --mod-label-secondary-text: rgb(71, 69, 147);\n    --mod-label-primary-text: white;\n    --disabled-note-primary: #91879f;\n    --disabled-note-secondary: #6a677a;\n\n\n}", ":root {\n    --page-margin: #040410;\n    --editor-background: #040410;\n    --secondary-text: #84859a;\n    --box-selection-fill: #044b94;\n    --link-accent: #024ACA;\n    --ui-widget-background: #393e4f;\n    --ui-widget-focus: #6d6886;\n    --pitch-background: #393e4f;\n    --tonic: #725491;\n    --fifth-note: #54547a;\n    --track-editor-bg-pitch: #393e4f;\n    --track-editor-bg-pitch-dim: #1c1d28;\n    --track-editor-bg-noise: #3d3535;\n    --track-editor-bg-noise-dim: #161313;\n    --track-editor-bg-mod: #283560;\n    --track-editor-bg-mod-dim: #0a101f;\n    --multiplicative-mod-slider: #606c9f;\n    --overwriting-mod-slider: #6850b5;\n    --indicator-primary: #9c64f7;\n    --indicator-secondary: #393e4f;\n    --select2-opt-group: #5d576f;\n    --input-box-outline: #222;\n    --mute-button-normal: #886eae;\n    --pitch1-secondary-channel: #0A89FF;\n    --pitch1-primary-channel: #024ACA;\n    --pitch1-secondary-note: #0A89FF;\n    --pitch1-primary-note: #024ACA;\n    --pitch2-secondary-channel: #0A89FF;\n    --pitch2-primary-channel: #024ACA;\n    --pitch2-secondary-note: #0A89FF;\n    --pitch2-primary-note: #024ACA;\n    --pitch3-secondary-channel: #0A89FF;\n    --pitch3-primary-channel: #024ACA;\n    --pitch3-secondary-note: #0A89FF;\n    --pitch3-primary-note: #024ACA;\n    --pitch4-secondary-channel: #0A89FF;\n    --pitch4-primary-channel: #024ACA;\n    --pitch4-secondary-note: #0A89FF;\n    --pitch4-primary-note: #024ACA;\n    --pitch5-secondary-channel: #0A89FF;\n    --pitch5-primary-channel: #024ACA;\n    --pitch5-secondary-note: #0A89FF;\n    --pitch5-primary-note: #024ACA;\n    --pitch6-secondary-channel: #0A89FF;\n    --pitch6-primary-channel: #024ACA;\n    --pitch6-secondary-note: #0A89FF;\n    --pitch6-primary-note: #024ACA;\n    --pitch7-secondary-channel: #0A89FF;\n    --pitch7-primary-channel: #024ACA;\n    --pitch7-secondary-note: #0A89FF;\n    --pitch7-primary-note: #024ACA;\n    --pitch8-secondary-channel: #0A89FF;\n    --pitch8-primary-channel: #024ACA;\n    --pitch8-secondary-note: #0A89FF;\n    --pitch8-primary-note: #024ACA;\n    --pitch9-secondary-channel: #0A89FF;\n    --pitch9-primary-channel: #024ACA;\n    --pitch9-secondary-note: #0A89FF;\n    --pitch9-primary-note: #024ACA;\n    --pitch10-secondary-channel: #0A89FF;\n    --pitch10-primary-channel: #024ACA;\n    --pitch10-secondary-note: #0A89FF;\n    --pitch10-primary-note: #024ACA;\n    --noise1-secondary-channel: #0A89FF;\n    --noise1-primary-channel: #024ACA;\n    --noise1-secondary-note: #0A89FF;\n    --noise1-primary-note: #024ACA;\n    --noise2-secondary-channel: #0A89FF;\n    --noise2-primary-channel: #024ACA;\n    --noise2-secondary-note: #0A89FF;\n    --noise2-primary-note: #024ACA;\n    --noise3-secondary-channel: #0A89FF;\n    --noise3-primary-channel: #024ACA;\n    --noise3-secondary-note: #0A89FF;\n    --noise3-primary-note: #024ACA;\n    --noise4-secondary-channel: #0A89FF;\n    --noise4-primary-channel: #024ACA;\n    --noise4-secondary-note: #0A89FF;\n    --noise4-primary-note: #024ACA;\n    --mod1-secondary-channel: #0A89FF;\n    --mod1-primary-channel: #024ACA;\n    --mod1-secondary-note: #0A89FF;\n    --mod1-primary-note: #024ACA;\n    --mod2-secondary-channel: #0A89FF;\n    --mod2-primary-channel: #024ACA;\n    --mod2-secondary-note: #0A89FF;\n    --mod2-primary-note: #024ACA;\n    --mod3-secondary-channel: #0A89FF;\n    --mod3-primary-channel: #024ACA;\n    --mod3-secondary-note: #0A89FF;\n    --mod3-primary-note: #024ACA;\n    --mod4-secondary-channel: #0A89FF;\n    --mod4-primary-channel: #024ACA;\n    --mod4-secondary-note: #0A89FF;\n    --mod4-primary-note: #024ACA;\n    --mod-label-primary: #282840;\n    --mod-label-secondary-text: rgb(87, 86, 120);\n    --mod-label-primary-text: white;\n}", ":root {\n    --page-margin: #02070D;\n    --editor-background: #02070D;\n    --primary-text: #9bd1ee;\n    --secondary-text: #5a6da8;\n    --text-selection: rgb(68 68 255 / 99%);\n    --box-selection-fill: rgb(0 0 255 / 30%);\n    --loop-accent: #024aca;\n    --link-accent: #024aca;\n    --ui-widget-background: #161c2e;\n    --ui-widget-focus: #262c3e;\n    --pitch-background: #22272D;\n    --tonic: #1b3056;\n    --fifth-note: #344051;\n    --white-piano-key: #a6c6ed;\n    --black-piano-key: #2f4687;\n    --track-editor-bg-pitch: #25284c;\n    --track-editor-bg-pitch-dim: #211c26;\n    --track-editor-bg-noise: #261f42;\n    --track-editor-bg-noise-dim: #1a152d;\n    --track-editor-bg-mod: #183049;\n    --track-editor-bg-mod-dim: #102132;\n    --multiplicative-mod-slider: #344a7f;\n    --overwriting-mod-slider: #344a7f;\n    --indicator-primary: #024aca;\n    --indicator-secondary: #00177d;\n    --select2-opt-group: #141e34;\n    --input-box-outline: #141e34;\n    --mute-button-normal: #273b9d;\n    --mute-button-mod: #27989d;\n    --pitch1-secondary-channel: hsl(200, 100%, 40%);\n    --pitch1-primary-channel: #99ddff;\n    --pitch1-secondary-note: hsl(200, 100%, 40%);\n    --pitch1-primary-note: #99ddff;\n    --pitch2-secondary-channel: hsl(212, 100%, 34%);\n    --pitch2-primary-channel: #5BA8FF;\n    --pitch2-secondary-note: hsl(212, 100%, 34%);\n    --pitch2-primary-note: #5BA8FF;\n    --pitch3-secondary-channel: #024ACA;\n    --pitch3-primary-channel: #0A89FF;\n    --pitch3-secondary-note: #024ACA;\n    --pitch3-primary-note: #0A89FF;\n    --pitch4-secondary-channel: #00177D;\n    --pitch4-primary-channel: #024ACA;\n    --pitch4-secondary-note: #00177D;\n    --pitch4-primary-note: #024ACA;\n    --pitch5-secondary-channel: #000e4e;\n    --pitch5-primary-channel: #0023bf;\n    --pitch5-secondary-note: #000e4e;\n    --pitch5-primary-note: #0023bf;\n    --pitch6-secondary-channel: #8990FE;\n    --pitch6-primary-channel: #C2C6FF;\n    --pitch6-secondary-note: #8990FE;\n    --pitch6-primary-note: #C2C6FF;\n    --pitch7-secondary-channel: #5E65D3;\n    --pitch7-primary-channel: #8990FE;\n    --pitch7-secondary-note: #5E65D3;\n    --pitch7-primary-note: #8990FE;\n    --pitch8-secondary-channel: #3138A6;\n    --pitch8-primary-channel: #5E65D3;\n    --pitch8-secondary-note: #3138A6;\n    --pitch8-primary-note: #5E65D3;\n    --pitch9-secondary-channel: #1B0B7F;\n    --pitch9-primary-channel: #3138A6;\n    --pitch9-secondary-note: #1B0B7F;\n    --pitch9-primary-note: #3138A6;\n    --pitch10-secondary-channel: #13015D;\n    --pitch10-primary-channel: #1c02bd;\n    --pitch10-secondary-note: #13015D;\n    --pitch10-primary-note: #1c02bd;\n    --noise1-secondary-channel: #A675FE;\n    --noise1-primary-channel: #E2C9FF;\n    --noise1-secondary-note: #A675FE;\n    --noise1-primary-note: #E2C9FF;\n    --noise2-secondary-channel: #6A31CA;\n    --noise2-primary-channel: #A675FE;\n    --noise2-secondary-note: #6A31CA;\n    --noise2-primary-note: #A675FE;\n    --noise3-secondary-channel: #5A1991;\n    --noise3-primary-channel: #6A31CA;\n    --noise3-secondary-note: #5A1991;\n    --noise3-primary-note: #6A31CA;\n    --noise4-secondary-channel: #2f1a68;\n    --noise4-primary-channel: #5A1991;\n    --noise4-secondary-note: #2f1a68;\n    --noise4-primary-note: #5A1991;\n    --noise5-secondary-channel: #211640;\n    --noise5-primary-channel: #391b8d;\n    --noise5-secondary-note: #211640;\n    --noise5-primary-note: #391b8d;\n    --mod1-secondary-channel: #25E2CD;\n    --mod1-primary-channel: #BDFFCA;\n    --mod1-secondary-note: #25E2CD;\n    --mod1-primary-note: #BDFFCA;\n    --mod2-secondary-channel: #0A98AC;\n    --mod2-primary-channel: #25E2CD;\n    --mod2-secondary-note: #0A98AC;\n    --mod2-primary-note: #25E2CC;\n    --mod3-secondary-channel: #005280;\n    --mod3-primary-channel: #0A98AC;\n    --mod3-secondary-note: #005280;\n    --mod3-primary-note: #0A98AC;\n    --mod4-secondary-channel: #0f3670;\n    --mod4-primary-channel: #1369c1;\n    --mod4-secondary-note: #0f3670;\n    --mod4-primary-note: #1369c1;\n    --mod-label-primary: #191d26;\n    --mod-label-secondary-text: #024aca;\n    --mod-label-primary-text: #ffffffa6;\n    --disabled-note-primary: #c9c9c9;\n    --disabled-note-secondary: #616161;\n}", ":root {\n    font: 16px/2 cursive;\n    --page-margin: #4667CE;\n    --editor-background: #4667CE;\n    --track-editor-bg-pitch-dim: #444;\n    --track-editor-bg-noise-dim: #444;\n    --pitch-channel-limit: 3;\n    --noise-channel-limit: 1;\n    --pitch1-secondary-channel: #bda822;\n    --pitch1-primary-channel: #fcdb00;\n    --pitch1-secondary-note: #bda822;\n    --pitch1-primary-note: #fcdb00;\n    --pitch2-secondary-channel: #612278;\n    --pitch2-primary-channel: #bb00ff;\n    --pitch2-secondary-note: #612278;\n    --pitch2-primary-note: #bb00ff;\n    --pitch3-secondary-channel: #8b4343;\n    --pitch3-primary-channel: #ff8844;\n    --pitch3-secondary-note: #8b4343;\n    --pitch3-primary-note: #ff8844;\n    --pitch4-secondary-channel: #bda822;\n    --pitch4-primary-channel: #fcdb00;\n    --pitch4-secondary-note: #bda822;\n    --pitch4-primary-note: #fcdb00;\n    --pitch5-secondary-channel: #612278;\n    --pitch5-primary-channel: #bb00ff;\n    --pitch5-secondary-note: #612278;\n    --pitch5-primary-note: #bb00ff;\n    --pitch6-secondary-channel: #8b4343;\n    --pitch6-primary-channel: #ff8844;\n    --pitch6-secondary-note: #8b4343;\n    --pitch6-primary-note: #ff8844;\n    --pitch7-secondary-channel: #bda822;\n    --pitch7-primary-channel: #fcdb00;\n    --pitch7-secondary-note: #bda822;\n    --pitch7-primary-note: #fcdb00;\n    --pitch8-secondary-channel: #612278;\n    --pitch8-primary-channel: #bb00ff;\n    --pitch8-secondary-note: #612278;\n    --pitch8-primary-note: #bb00ff;\n    --pitch9-secondary-channel: #8b4343;\n    --pitch9-primary-channel: #ff8844;\n    --pitch9-secondary-note: #8b4343;\n    --pitch9-primary-note: #ff8844;\n    --pitch10-secondary-channel: #bda822;\n    --pitch10-primary-channel: #fcdb00;\n    --pitch10-secondary-note: #bda822;\n    --pitch10-primary-note: #fcdb00;\n    --noise1-secondary-channel: #991010;\n}\n\n.trackContainer .noSelection {\n    background: black !important;\n}\n\nspan input,\ndiv.harmonics svg,\ndiv.spectrum svg,\ndiv.filterEditor svg,\ndiv.fadeInOut svg,\ndiv.loopEditor svg,\nsvg#firstImage,\ndiv.trackContainer div.noSelection {\n    background: black !important;\n}\n\ninput,\ntextarea {\n    background-color: black !important;\n}\n\n#text-content>section>h1 {\n    color: white;\n}", ":root {\n    --page-margin: #0a0000;\n    --editor-background: #0a0000;\n    --playhead: rgba(247, 172, 196, 0.9);\n    --primary-text: #f5d6bf;\n    --secondary-text: #934050;\n    --inverted-text: #290505;\n    --text-selection: rgba(255, 208, 68, 0.99);\n    --box-selection-fill: #94044870;\n    --loop-accent: #ff1e1e;\n    --link-accent: #da7b76;\n    --ui-widget-background: #533137;\n    --ui-widget-focus: #743e4b;\n    --pitch-background: #4f3939;\n    --tonic: #9e4145;\n    --fifth-note: #5b3e6b;\n    --white-piano-key: #d89898;\n    --black-piano-key: #572b29;\n    --black-piano-key-text: #ffffff;\n    --use-color-formula: true;\n    --track-editor-bg-pitch: #5e3a41;\n    --track-editor-bg-pitch-dim: #281d1c;\n    --track-editor-bg-noise: #3a3551;\n    --track-editor-bg-noise-dim: #272732;\n    --track-editor-bg-mod: #552045;\n    --track-editor-bg-mod-dim: #3e1442;\n    --multiplicative-mod-slider: #9f6095;\n    --overwriting-mod-slider: #b55050;\n    --indicator-primary: #f2f764;\n    --indicator-secondary: #4f3939;\n    --select2-opt-group: #673030;\n    --input-box-outline: #443131;\n    --mute-button-normal: #d81833;\n    --mute-button-mod: #9e2691;\n    --mod-label-primary: #5f2b39;\n    --mod-label-secondary-text: rgb(158, 66, 122);\n    --mod-label-primary-text: #e6caed;\n    --pitch-secondary-channel-hue: 0;\n    --pitch-secondary-channel-hue-scale: 11.8;\n    --pitch-secondary-channel-sat: 73.3;\n    --pitch-secondary-channel-sat-scale: 0.1;\n    --pitch-secondary-channel-lum: 40;\n    --pitch-secondary-channel-lum-scale: 0.05;\n    --pitch-primary-channel-hue: 0;\n    --pitch-primary-channel-hue-scale: 11.8;\n    --pitch-primary-channel-sat: 90;\n    --pitch-primary-channel-sat-scale: 0.1;\n    --pitch-primary-channel-lum: 67.5;\n    --pitch-primary-channel-lum-scale: 0.05;\n    --pitch-secondary-note-hue: 0;\n    --pitch-secondary-note-hue-scale: 11.8;\n    --pitch-secondary-note-sat: 83.9;\n    --pitch-secondary-note-sat-scale: 0.1;\n    --pitch-secondary-note-lum: 35;\n    --pitch-secondary-note-lum-scale: 0.05;\n    --pitch-primary-note-hue: 0;\n    --pitch-primary-note-hue-scale: 11.8;\n    --pitch-primary-note-sat: 100;\n    --pitch-primary-note-sat-scale: 0.05;\n    --pitch-primary-note-lum: 85.6;\n    --pitch-primary-note-lum-scale: 0.025;\n    --noise-secondary-channel-hue: 60;\n    --noise-secondary-channel-hue-scale: 2;\n    --noise-secondary-channel-sat: 25;\n    --noise-secondary-channel-sat-scale: 0;\n    --noise-secondary-channel-lum: 42;\n    --noise-secondary-channel-lum-scale: 0;\n    --noise-primary-channel-hue: 60;\n    --noise-primary-channel-hue-scale: 2;\n    --noise-primary-channel-sat: 33;\n    --noise-primary-channel-sat-scale: 0;\n    --noise-primary-channel-lum: 63.5;\n    --noise-primary-channel-lum-scale: 0;\n    --noise-secondary-note-hue: 60;\n    --noise-secondary-note-hue-scale: 2;\n    --noise-secondary-note-sat: 33.5;\n    --noise-secondary-note-sat-scale: 0;\n    --noise-secondary-note-lum: 55;\n    --noise-secondary-note-lum-scale: 0;\n    --noise-primary-note-hue: 60;\n    --noise-primary-note-hue-scale: 2;\n    --noise-primary-note-sat: 46.5;\n    --noise-primary-note-sat-scale: 0;\n    --noise-primary-note-lum: 74;\n    --noise-primary-note-lum-scale: 0;\n    --mod-secondary-channel-hue: 222;\n    --mod-secondary-channel-hue-scale: 1.5;\n    --mod-secondary-channel-sat: 88;\n    --mod-secondary-channel-sat-scale: 0;\n    --mod-secondary-channel-lum: 50;\n    --mod-secondary-channel-lum-scale: 0;\n    --mod-primary-channel-hue: 222;\n    --mod-primary-channel-hue-scale: 1.5;\n    --mod-primary-channel-sat: 96;\n    --mod-primary-channel-sat-scale: 0;\n    --mod-primary-channel-lum: 80;\n    --mod-primary-channel-lum-scale: 0;\n    --mod-secondary-note-hue: 222;\n    --mod-secondary-note-hue-scale: 1.5;\n    --mod-secondary-note-sat: 92;\n    --mod-secondary-note-sat-scale: 0;\n    --mod-secondary-note-lum: 54;\n    --mod-secondary-note-lum-scale: 0;\n    --mod-primary-note-hue: 222;\n    --mod-primary-note-hue-scale: 1.5;\n    --mod-primary-note-sat: 96;\n    --mod-primary-note-sat-scale: 0;\n    --mod-primary-note-lum: 75;\n    --mod-primary-note-lum-scale: 0;\n    --disabled-note-primary: #515164;\n    --disabled-note-secondary: #2a2a3a;\n}", ":root {\n    --page-margin: #0f0700;\n    --editor-background: #0f0700;\n    --hover-preview: #75461d;\n    --playhead: #75461d;\n    --primary-text: #ddd;\n    --secondary-text: #8e695b;\n    --text-selection: #75461d;\n    --box-selection-fill: rgba(117, 70, 29, 0.5);\n    --loop-accent: #75461d;\n    --link-accent: #75461d;\n    --ui-widget-background: #574a3e;\n    --ui-widget-focus: #756453;\n    --pitch-background: #361900;\n    --tonic: #fdba9a;\n    --fifth-note: #7f78d2;\n    --pitch1-secondary-channel: #798566;\n    --pitch1-primary-channel: #9dab86;\n    --pitch1-secondary-note: #798566;\n    --pitch1-primary-note: #9dab86;\n    --pitch2-secondary-channel: #a6733d;\n    --pitch2-primary-channel: #e6a157;\n    --pitch2-secondary-note: #a6733d;\n    --pitch2-primary-note: #e6a157;\n    --pitch3-secondary-channel: #874c27;\n    --pitch3-primary-channel: #eb8242;\n    --pitch3-secondary-note: #874c27;\n    --pitch3-primary-note: #eb8242;\n    --pitch4-secondary-channel: #395866;\n    --pitch4-primary-channel: #537d91;\n    --pitch4-secondary-note: #395866;\n    --pitch4-primary-note: #537d91;\n    --pitch5-secondary-channel: #779992;\n    --pitch5-primary-channel: #a4d1c8;\n    --pitch5-secondary-note: #779992;\n    --pitch5-primary-note: #a4d1c8;\n    --pitch7-secondary-channel: #300707;\n    --pitch7-primary-channel: #560d0d;\n    --pitch7-secondary-note: #300707;\n    --pitch7-primary-note: #560d0d;\n    --pitch8-secondary-channel: #486312;\n    --pitch8-primary-channel: #76a21e;\n    --pitch8-secondary-note: #486312;\n    --pitch8-primary-note: #76a21e;\n    --pitch9-secondary-channel: #4a1242;\n    --pitch9-primary-channel: #721b65;\n    --pitch9-secondary-note: #4a1242;\n    --pitch9-primary-note: #721b65;\n    --pitch10-secondary-channel: #7a312d;\n    --pitch10-primary-channel: #f8615a;\n    --pitch10-secondary-note: #7a312d;\n    --pitch10-primary-note: #f8615a;\n    --noise1-secondary-channel: #5f6582;\n    --noise1-primary-channel: #a6b1e1;\n    --noise1-secondary-note: #5f6582;\n    --noise1-primary-note: #a6b1e1;\n    --noise4-secondary-channel: #6B3E8E;\n    --noise5-secondary-channel: #996633;\n    --noise5-primary-channel: #ddaa77;\n    --noise5-secondary-note: #cc9966;\n    --noise5-primary-note: #f0d0bb;\n    --mod1-secondary-channel: #339955;\n}", ":root {\n    --hover-preview: #ddd;\n    --playhead: #ddd;\n    --primary-text: #ddd;\n    --secondary-text: #8e695b;\n    --text-selection: rgba(169, 0, 255, 0.99);\n    --box-selection-fill: rgba(221, 221, 221, 0.2);\n    --loop-accent: #bf15ba;\n    --link-accent: #f888ff;\n    --ui-widget-background: #443a3a;\n    --pitch-background: #353333;\n    --tonic: #884a44;\n    --fifth-note: #415498;\n    --noise4-secondary-channel: #6B3E8E;\n}", ":root {\n    --page-margin: #000015;\n    --editor-background: #000015;\n    --hover-preview: #00ffff;\n    --playhead: #00ffff;\n    --text-selection: rgba(255, 127, 80, 0.99);\n    --box-selection-fill: rgba(255, 255, 255, 0.2);\n    --loop-accent: #ff00ff;\n    --link-accent: #00ffff;\n    --ui-widget-background: #222222;\n    --ui-widget-focus: #444444;\n    --pitch-background: #222222;\n    --tonic: #ab382c;\n    --fifth-note: #2a76a8;\n    --white-piano-key: #ffffff;\n    --black-piano-key: #222222;\n    --white-piano-key-text: #000000;\n    --track-editor-bg-pitch: #222222;\n    --track-editor-bg-pitch-dim: #111111;\n    --track-editor-bg-noise: #222222;\n    --track-editor-bg-noise-dim: #111111;\n    --track-editor-bg-mod: #333333;\n    --track-editor-bg-mod-dim: #111111;\n    --multiplicative-mod-slider: #666666;\n    --overwriting-mod-slider: #666666;\n    --indicator-primary: #ff00ff;\n    --indicator-secondary: #00ffff;\n    --select2-opt-group: #333333;\n    --input-box-outline: #444444;\n    --mute-button-normal: #ff00ff;\n    --mute-button-mod: #00ffff;\n    --mod-label-primary: #282840;\n    --mod-label-secondary-text: rgb(87, 86, 120);\n    --mod-label-primary-text: white;\n    --pitch1-secondary-channel: #bd9909;\n    --pitch1-primary-channel: #fbff8e;\n    --pitch1-secondary-note: #c79d3a;\n    --pitch1-primary-note: #fdffb2;\n    --pitch2-secondary-channel: #b86e0d;\n    --pitch2-primary-channel: #ffb28e;\n    --pitch2-secondary-note: #ba643a;\n    --pitch2-primary-note: #fbac92;\n    --pitch3-secondary-channel: #a81b08;\n    --pitch3-primary-channel: #f56c67;\n    --pitch3-secondary-note: #94352b;\n    --pitch3-primary-note: #f56147;\n    --pitch4-secondary-channel: #2a7722;\n    --pitch4-primary-channel: #6ebf5e;\n    --pitch4-secondary-note: #1c5c18;\n    --pitch4-primary-note: #88cf82;\n    --pitch5-secondary-channel: #8c8b3c;\n    --pitch5-primary-channel: #c3c168;\n    --pitch5-secondary-note: #747330;\n    --pitch5-primary-note: #d4d394;\n    --pitch6-secondary-channel: #3f9577;\n    --pitch6-primary-channel: #6fc4b4;\n    --pitch6-secondary-note: #2c6a5c;\n    --pitch6-primary-note: #8fdad0;\n    --pitch7-secondary-channel: #204a80;\n    --pitch7-primary-channel: #6d9fc2;\n    --pitch7-secondary-note: #132f5a;\n    --pitch7-primary-note: #9dbed8;\n    --pitch8-secondary-channel: #a531ad;\n    --pitch8-primary-channel: #db68e3;\n    --pitch8-secondary-note: #8d2f94;\n    --pitch8-primary-note: #e66cbf;\n    --pitch9-secondary-channel: #03a1a1;\n    --pitch9-primary-channel: #52fffb;\n    --pitch9-secondary-note: #34baba;\n    --pitch9-primary-note: #60fbfb;\n    --pitch10-secondary-channel: #4208a1;\n    --pitch10-primary-channel: #9282ff;\n    --pitch10-secondary-note: #5735b5;\n    --pitch10-primary-note: #ab52fb;\n    --noise1-secondary-channel: #2a5555;\n    --noise1-primary-channel: #4c7878;\n    --noise1-secondary-note: #6e9a9a;\n    --noise1-primary-note: #90bcbc;\n    --noise2-secondary-channel: #553355;\n    --noise2-primary-channel: #775577;\n    --noise2-secondary-note: #997799;\n    --noise2-primary-note: #bbaa99;\n    --noise3-secondary-channel: #2a6622;\n    --noise3-primary-channel: #4c8844;\n    --noise3-secondary-note: #6eaa66;\n    --noise3-primary-note: #90cc88;\n    --noise4-secondary-channel: #664400;\n    --noise4-primary-channel: #886600;\n    --noise4-secondary-note: #aa8800;\n    --noise4-primary-note: #cccc00;\n    --noise5-secondary-channel: #006633;\n    --noise5-primary-channel: #008855;\n    --noise5-secondary-note: #00aa77;\n    --noise5-primary-note: #00cc99;\n    --mod1-secondary-channel: #fe00ff;\n    --mod1-primary-channel: #ff72ff;\n    --mod1-secondary-note: #ff92ff;\n    --mod1-primary-note: #ffb2fb;\n    --mod2-secondary-channel: #00fe00;\n    --mod2-primary-channel: #8eff8e;\n    --mod2-secondary-note: #92ff92;\n    --mod2-primary-note: #b2ffb2;\n    --mod3-secondary-channel: #feff00;\n    --mod3-primary-channel: #fffb8e;\n    --mod3-secondary-note: #fffd92;\n    --mod3-primary-note: #fffe92;\n    --mod4-secondary-channel: #00fffe;\n    --mod4-primary-channel: #82fffb;\n    --mod4-secondary-note: #92ffff;\n    --mod4-primary-note: #b2fffb;\n    --disabled-note-primary: #c6c6c6;\n    --disabled-note-secondary: #8c8c8c;\n    --note-flash: #ffffff;\n    --note-flash-secondary: #ffffff77;\n}", ":root {\n    --page-margin: #0d0063;\n    --editor-background: #0D0063;\n    --pitch-background: #322c59;\n    --tonic: #1c1933;\n    --fifth-note: #7b74ad;\n    --pitch-channel-limit: 6;\n    --noise-channel-limit: 3;\n    --pitch1-secondary-channel: #c7ac00;\n    --pitch1-primary-channel: #fcf403;\n    --pitch1-secondary-note: #c7c700;\n    --pitch1-primary-note: #fcf403;\n    --pitch2-secondary-channel: #9400b5;\n    --pitch2-primary-channel: #ff00ee;\n    --pitch2-secondary-note: #9400b5;\n    --pitch2-primary-note: #ff00ee;\n    --pitch3-secondary-channel: #b37466;\n    --pitch3-primary-channel: #ffc6a1;\n    --pitch3-secondary-note: #b37466;\n    --pitch3-primary-note: #ffc6a1;\n    --pitch7-secondary-channel: #c7ac00;\n    --pitch7-primary-channel: #fcf403;\n    --pitch7-secondary-note: #c7c700;\n    --pitch7-primary-note: #fcf403;\n    --pitch8-secondary-channel: #9400b5;\n    --pitch8-primary-channel: #ff00ee;\n    --pitch8-secondary-note: #9400b5;\n    --pitch8-primary-note: #ff00ee;\n    --pitch9-secondary-channel: #b37466;\n    --pitch9-primary-channel: #ffc6a1;\n    --pitch9-secondary-note: #b37466;\n    --pitch9-primary-note: #ffc6a1;\n    --pitch10-secondary-channel: #00a100;\n    --pitch10-primary-channel: #50ff50;\n    --pitch10-secondary-note: #00c700;\n    --pitch10-primary-note: #a0ffa0;\n    --noise1-secondary-channel: #95acad;\n    --noise1-primary-channel: #cee9eb;\n    --noise1-secondary-note: #95acad;\n    --noise1-primary-note: #cee9eb;\n    --noise4-secondary-channel: #7c9b42;\n    --noise4-primary-channel: #a5ff00;\n    --noise4-secondary-note: #7c9b42;\n    --noise4-primary-note: #a5ff00;\n    --noise5-secondary-channel: #7c9b42;\n    --mod1-secondary-channel: #c7ac00;\n    --mod1-primary-channel: #fcf403;\n    --mod1-secondary-note: #c7c700;\n    --mod1-primary-note: #fcf403;\n    --mod2-secondary-channel: #9400b5;\n    --mod2-primary-channel: #ff00ee;\n    --mod2-secondary-note: #9400b5;\n    --mod2-primary-note: #ff00ee;\n    --mod3-secondary-channel: #b37466;\n    --mod3-primary-channel: #ffc6a1;\n    --mod3-secondary-note: #b37466;\n    --mod3-primary-note: #ffc6a1;\n    --mod4-secondary-channel: #00a100;\n    --mod4-primary-channel: #50ff50;\n    --mod4-secondary-note: #00c700;\n    --mod4-primary-note: #a0ffa0;\n}", ":root {\n    --page-margin: #0d0063;\n    --editor-background: #0D0063;\n    --pitch-background: #322c59;\n    --tonic: #1c1933;\n    --fifth-note: #7b74ad;\n    --pitch1-secondary-channel: #c7ac00;\n    --pitch1-primary-channel: #fcf403;\n    --pitch1-secondary-note: #c7c700;\n    --pitch1-primary-note: #fcf403;\n    --pitch2-secondary-channel: #9400b5;\n    --pitch2-primary-channel: #ff00ee;\n    --pitch2-secondary-note: #9400b5;\n    --pitch2-primary-note: #ff00ee;\n    --pitch3-secondary-channel: #b37466;\n    --pitch3-primary-channel: #ffc6a1;\n    --pitch3-secondary-note: #b37466;\n    --pitch3-primary-note: #ffc6a1;\n    --noise1-secondary-channel: #95acad;\n    --noise1-primary-channel: #cee9eb;\n    --noise1-secondary-note: #95acad;\n    --noise1-primary-note: #cee9eb;\n}", ":root {\n    --page-margin: #000a08;\n    --editor-background: #000a08;\n    --hover-preview: #ffffcc;\n    --playhead: #ccfff5;\n    --secondary-text: #d9d98c;\n    --text-selection: #ffff6659;\n    --box-selection-fill: #ffffff33;\n    --loop-accent: #ffff00;\n    --link-accent: #00ffcc;\n    --ui-widget-background: #141f1d;\n    --ui-widget-focus: #24423d;\n    --pitch-background: #001410;\n    --tonic: #00241d;\n    --fifth-note: #ffff6633;\n    --white-piano-key: #66998f;\n    --black-piano-key: #141f1d;\n    --track-editor-bg-pitch: #66998f40;\n    --track-editor-bg-pitch-dim: #293d3940;\n    --track-editor-bg-noise: #66998f40;\n    --track-editor-bg-noise-dim: #293d3940;\n    --track-editor-bg-mod: #99996640;\n    --track-editor-bg-mod-dim: #3d3d2940;\n    --multiplicative-mod-slider: #ffff00;\n    --overwriting-mod-slider: #00ffcc;\n    --indicator-primary: #ffff00;\n    --indicator-secondary: #141f1d;\n    --select2-opt-group: #1b312e;\n    --input-box-outline: #141f1d;\n    --mute-button-normal: #00ffcc;\n    --mute-button-mod: #00997a;\n    --pitch1-secondary-channel: #bfbf40;\n    --pitch1-primary-channel: #ffff64;\n    --pitch1-secondary-note: #bfbf40;\n    --pitch1-primary-note: #ffff64;\n    --pitch2-secondary-channel: #a2bf40;\n    --pitch2-primary-channel: #e0ff7d;\n    --pitch2-secondary-note: #a2bf40;\n    --pitch2-primary-note: #e0ff7d;\n    --pitch3-secondary-channel: #75bf40;\n    --pitch3-primary-channel: #c1ff96;\n    --pitch3-secondary-note: #75bf40;\n    --pitch3-primary-note: #c1ff96;\n    --pitch4-secondary-channel: #40bf51;\n    --pitch4-primary-channel: #a2ffaf;\n    --pitch4-secondary-note: #40bf51;\n    --pitch4-primary-note: #a2ffaf;\n    --pitch5-secondary-channel: #40bf86;\n    --pitch5-primary-channel: #83ffc8;\n    --pitch5-secondary-note: #40bf86;\n    --pitch5-primary-note: #83ffc8;\n    --pitch6-secondary-channel: #40bfa6;\n    --pitch6-primary-channel: #64ffe1;\n    --pitch6-secondary-note: #40bfa6;\n    --pitch6-primary-note: #64ffe1;\n    --pitch7-secondary-channel: #40bf86;\n    --pitch7-primary-channel: #83ffc8;\n    --pitch7-secondary-note: #40bf86;\n    --pitch7-primary-note: #83ffc8;\n    --pitch8-secondary-channel: #40bf51;\n    --pitch8-primary-channel: #a2ffaf;\n    --pitch8-secondary-note: #40bf51;\n    --pitch8-primary-note: #a2ffaf;\n    --pitch9-secondary-channel: #75bf40;\n    --pitch9-primary-channel: #c1ff96;\n    --pitch9-secondary-note: #75bf40;\n    --pitch9-primary-note: #c1ff96;\n    --pitch10-secondary-channel: #a2bf40;\n    --pitch10-primary-channel: #e0ff7d;\n    --pitch10-secondary-note: #a2bf40;\n    --pitch10-primary-note: #e0ff7d;\n    --noise1-secondary-channel: #a6a659;\n    --noise1-primary-channel: #ffffcc;\n    --noise1-secondary-note: #a6a659;\n    --noise1-primary-note: #ffffcc;\n    --noise2-secondary-channel: #94a659;\n    --noise2-primary-channel: #f3ffcc;\n    --noise2-secondary-note: #94a659;\n    --noise2-primary-note: #f3ffcc;\n    --noise3-secondary-channel: #79a659;\n    --noise3-primary-channel: #e1ffcc;\n    --noise3-secondary-note: #79a659;\n    --noise3-primary-note: #e1ffcc;\n    --noise4-secondary-channel: #94a659;\n    --noise4-primary-channel: #f3ffcc;\n    --noise4-secondary-note: #94a659;\n    --noise4-primary-note: #f3ffcc;\n    --noise5-secondary-channel: #a6a659;\n    --noise5-primary-channel: #ffffcc;\n    --noise5-secondary-note: #a6a659;\n    --noise5-primary-note: #ffffcc;\n    --mod1-secondary-channel: #a3a329;\n    --mod1-primary-channel: #ffff00;\n    --mod1-secondary-note: #a3a329;\n    --mod1-primary-note: #ffff00;\n    --mod2-secondary-channel: #a38529;\n    --mod2-primary-channel: #ffbf00;\n    --mod2-secondary-note: #a38529;\n    --mod2-primary-note: #ffbf00;\n    --mod3-secondary-channel: #a36629;\n    --mod3-primary-channel: #ff7f00;\n    --mod3-secondary-note: #a36629;\n    --mod3-primary-note: #ff7f00;\n    --mod4-secondary-channel: #a38529;\n    --mod4-primary-channel: #ffbf00;\n    --mod4-secondary-note: #a38529;\n    --mod4-primary-note: #ffbf00;\n    --mod-label-primary: #141f1d;\n    --mod-label-secondary-text: #d9d98c;\n    --mod-label-primary-text: white;\n    --disabled-note-primary: #808080;\n    --disabled-note-secondary: #666666;\n}", ":root {\n    --page-margin: #252525;\n    --editor-background: #252525;\n    --hover-preview: white;\n    --playhead: white;\n    --primary-text: white;\n    --secondary-text: #999;\n    --inverted-text: black;\n    --text-selection: rgba(119, 68, 255, 0.99);\n    --box-selection-fill: rgba(255, 255, 255, 0.2);\n    --loop-accent: #74f;\n    --link-accent: #98f;\n    --ui-widget-background: #444;\n    --ui-widget-focus: #777;\n    --pitch-background: #444;\n    --tonic: #864;\n    --fifth-note: #468;\n    --white-piano-key: #bbb;\n    --black-piano-key: #444;\n    --white-piano-key-text: #131200;\n    --black-piano-key-text: #fff;\n    --use-color-formula: false;\n    --track-editor-bg-pitch: #444;\n    --track-editor-bg-pitch-dim: #333;\n    --track-editor-bg-noise: #444;\n    --track-editor-bg-noise-dim: #333;\n    --track-editor-bg-mod: #234;\n    --track-editor-bg-mod-dim: #123;\n    --multiplicative-mod-slider: #456;\n    --overwriting-mod-slider: #654;\n    --indicator-primary: #74f;\n    --indicator-secondary: #444;\n    --select2-opt-group: #585858;\n    --input-box-outline: #333;\n    --mute-button-normal: #ffa033;\n    --mute-button-mod: #9a6bff;\n    --pitch1-secondary-channel: #0099A1;\n    --pitch1-primary-channel: #25F3FF;\n    --pitch1-secondary-note: #00BDC7;\n    --pitch1-primary-note: #92F9FF;\n    --pitch2-secondary-channel: #A1A100;\n    --pitch2-primary-channel: #FFFF25;\n    --pitch2-secondary-note: #C7C700;\n    --pitch2-primary-note: #FFFF92;\n    --pitch3-secondary-channel: #C75000;\n    --pitch3-primary-channel: #FF9752;\n    --pitch3-secondary-note: #FF771C;\n    --pitch3-primary-note: #FFCDAB;\n    --pitch4-secondary-channel: #00A100;\n    --pitch4-primary-channel: #50FF50;\n    --pitch4-secondary-note: #00C700;\n    --pitch4-primary-note: #A0FFA0;\n    --pitch5-secondary-channel: #D020D0;\n    --pitch5-primary-channel: #FF90FF;\n    --pitch5-secondary-note: #E040E0;\n    --pitch5-primary-note: #FFC0FF;\n    --pitch6-secondary-channel: #7777B0;\n    --pitch6-primary-channel: #A0A0FF;\n    --pitch6-secondary-note: #8888D0;\n    --pitch6-primary-note: #D0D0FF;\n    --pitch7-secondary-channel: #8AA100;\n    --pitch7-primary-channel: #DEFF25;\n    --pitch7-secondary-note: #AAC700;\n    --pitch7-primary-note: #E6FF92;\n    --pitch8-secondary-channel: #DF0019;\n    --pitch8-primary-channel: #FF98A4;\n    --pitch8-secondary-note: #FF4E63;\n    --pitch8-primary-note: #FFB2BB;\n    --pitch9-secondary-channel: #00A170;\n    --pitch9-primary-channel: #50FFC9;\n    --pitch9-secondary-note: #00C78A;\n    --pitch9-primary-note: #83FFD9;\n    --pitch10-secondary-channel: #A11FFF;\n    --pitch10-primary-channel: #CE8BFF;\n    --pitch10-secondary-note: #B757FF;\n    --pitch10-primary-note: #DFACFF;\n    --noise1-secondary-channel: #6F6F6F;\n    --noise1-primary-channel: #AAAAAA;\n    --noise1-secondary-note: #A7A7A7;\n    --noise1-primary-note: #E0E0E0;\n    --noise2-secondary-channel: #996633;\n    --noise2-primary-channel: #DDAA77;\n    --noise2-secondary-note: #CC9966;\n    --noise2-primary-note: #F0D0BB;\n    --noise3-secondary-channel: #4A6D8F;\n    --noise3-primary-channel: #77AADD;\n    --noise3-secondary-note: #6F9FCF;\n    --noise3-primary-note: #BBD7FF;\n    --noise4-secondary-channel: #7A4F9A;\n    --noise4-primary-channel: #AF82D2;\n    --noise4-secondary-note: #9E71C1;\n    --noise4-primary-note: #D4C1EA;\n    --noise5-secondary-channel: #607837;\n    --noise5-primary-channel: #A2BB77;\n    --noise5-secondary-note: #91AA66;\n    --noise5-primary-note: #C5E2B2;\n    --mod1-secondary-channel: #339955;\n    --mod1-primary-channel: #77fc55;\n    --mod1-secondary-note: #77ff8a;\n    --mod1-primary-note: #cdffee;\n    --mod2-secondary-channel: #993355;\n    --mod2-primary-channel: #f04960;\n    --mod2-secondary-note: #f057a0;\n    --mod2-primary-note: #ffb8de;\n    --mod3-secondary-channel: #553399;\n    --mod3-primary-channel: #8855fc;\n    --mod3-secondary-note: #aa64ff;\n    --mod3-primary-note: #f8ddff;\n    --mod4-secondary-channel: #a86436;\n    --mod4-primary-channel: #c8a825;\n    --mod4-secondary-note: #e8ba46;\n    --mod4-primary-note: #fff6d3;\n    --mod-label-primary: #999;\n    --mod-label-secondary-text: #333;\n    --mod-label-primary-text: black;\n    --disabled-note-primary: #999;\n    --disabled-note-secondary: #666;\n}", ":root {\n    --page-margin: #010c03;\n    --editor-background: #010c03;\n    --hover-preview: #efe;\n    --playhead: rgba(232, 255, 232, 0.9);\n    --primary-text: #efe;\n    --secondary-text: #70A070;\n    --inverted-text: #280228;\n    --text-selection: rgba(255, 68, 199, 0.99);\n    --box-selection-fill: #267aa3;\n    --loop-accent: #ffe845;\n    --link-accent: #9f8;\n    --ui-widget-background: #203829;\n    --ui-widget-focus: #487860;\n    --pitch-background: #203829;\n    --tonic: #2b8d20;\n    --fifth-note: #385840;\n    --white-piano-key: #bda;\n    --black-piano-key: #573;\n    --black-piano-key-text: #ffffff;\n    --use-color-formula: true;\n    --track-editor-bg-pitch: #254820;\n    --track-editor-bg-pitch-dim: #102819;\n    --track-editor-bg-noise: #304050;\n    --track-editor-bg-noise-dim: #102030;\n    --track-editor-bg-mod: #506030;\n    --track-editor-bg-mod-dim: #2a300a;\n    --multiplicative-mod-slider: #205c8f;\n    --overwriting-mod-slider: #20ac6f;\n    --indicator-primary: #dcd866;\n    --indicator-secondary: #203829;\n    --select2-opt-group: #1a6f5a;\n    --input-box-outline: #242;\n    --mute-button-normal: #49e980;\n    --mute-button-mod: #c2e502;\n    --mod-label-primary: #133613;\n    --mod-label-secondary-text: rgb(27, 126, 40);\n    --mod-label-primary-text: #efe;\n    --pitch-secondary-channel-hue: 120;\n    --pitch-secondary-channel-hue-scale: 8.1;\n    --pitch-secondary-channel-sat: 59;\n    --pitch-secondary-channel-sat-scale: 0.1;\n    --pitch-secondary-channel-lum: 50;\n    --pitch-secondary-channel-lum-scale: 0.04;\n    --pitch-primary-channel-hue: 120;\n    --pitch-primary-channel-hue-scale: 8.1;\n    --pitch-primary-channel-sat: 86;\n    --pitch-primary-channel-sat-scale: 0.1;\n    --pitch-primary-channel-lum: 70;\n    --pitch-primary-channel-lum-scale: 0.04;\n    --pitch-secondary-note-hue: 120;\n    --pitch-secondary-note-hue-scale: 8.1;\n    --pitch-secondary-note-sat: 85;\n    --pitch-secondary-note-sat-scale: 0.1;\n    --pitch-secondary-note-lum: 30;\n    --pitch-secondary-note-lum-scale: 0.04;\n    --pitch-primary-note-hue: 120;\n    --pitch-primary-note-hue-scale: 8.1;\n    --pitch-primary-note-sat: 90;\n    --pitch-primary-note-sat-scale: 0.05;\n    --pitch-primary-note-lum: 80;\n    --pitch-primary-note-lum-scale: 0.025;\n    --noise-secondary-channel-hue: 200;\n    --noise-secondary-channel-hue-scale: 1.1;\n    --noise-secondary-channel-sat: 25;\n    --noise-secondary-channel-sat-scale: 0;\n    --noise-secondary-channel-lum: 22;\n    --noise-secondary-channel-lum-scale: 0;\n    --noise-primary-channel-hue: 200;\n    --noise-primary-channel-hue-scale: 1.1;\n    --noise-primary-channel-sat: 48;\n    --noise-primary-channel-sat-scale: 0;\n    --noise-primary-channel-lum: 65;\n    --noise-primary-channel-lum-scale: 0;\n    --noise-secondary-note-hue: 200;\n    --noise-secondary-note-hue-scale: 1.1;\n    --noise-secondary-note-sat: 33.5;\n    --noise-secondary-note-sat-scale: 0;\n    --noise-secondary-note-lum: 33;\n    --noise-secondary-note-lum-scale: 0;\n    --noise-primary-note-hue: 200;\n    --noise-primary-note-hue-scale: 1.1;\n    --noise-primary-note-sat: 46.5;\n    --noise-primary-note-sat-scale: 0;\n    --noise-primary-note-lum: 64;\n    --noise-primary-note-lum-scale: 0;\n    --mod-secondary-channel-hue: 40;\n    --mod-secondary-channel-hue-scale: 1.8;\n    --mod-secondary-channel-sat: 44;\n    --mod-secondary-channel-sat-scale: 0;\n    --mod-secondary-channel-lum: 50;\n    --mod-secondary-channel-lum-scale: 0;\n    --mod-primary-channel-hue: 40;\n    --mod-primary-channel-hue-scale: 1.8;\n    --mod-primary-channel-sat: 60;\n    --mod-primary-channel-sat-scale: 0;\n    --mod-primary-channel-lum: 80;\n    --mod-primary-channel-lum-scale: 0;\n    --mod-secondary-note-hue: 40;\n    --mod-secondary-note-hue-scale: 1.8;\n    --mod-secondary-note-sat: 62;\n    --mod-secondary-note-sat-scale: 0;\n    --mod-secondary-note-lum: 55;\n    --mod-secondary-note-lum-scale: 0;\n    --mod-primary-note-hue: 40;\n    --mod-primary-note-hue-scale: 1.8;\n    --mod-primary-note-sat: 66;\n    --mod-primary-note-sat-scale: 0;\n    --mod-primary-note-lum: 85;\n    --mod-primary-note-lum-scale: 0;\n    --disabled-note-primary: #536e5c;\n    --disabled-note-secondary: #395440;\n}", ":root {\n    --page-margin: #ADD8E6;\n}", ":root {\n    --page-margin: #040507;\n    --editor-background: #040507;\n    --text-selection: rgb(115 103 76);\n    --box-selection-fill: rgb(174 109 73 / 45%);\n    --loop-accent: #EC897D;\n    --link-accent: #FDE484;\n    --ui-widget-background: #22222c;\n    --ui-widget-focus: #39394c;\n    --pitch-background: #101010;\n    --tonic: #2c2d34;\n    --fifth-note: #191a20;\n    --white-piano-key: #bbbaba;\n    --black-piano-key: #2d2d2d;\n    --track-editor-bg-pitch: #2b2d40;\n    --track-editor-bg-pitch-dim: #191a25;\n    --track-editor-bg-noise: #3c3644;\n    --track-editor-bg-noise-dim: #26222b;\n    --track-editor-bg-mod: #322a2a;\n    --track-editor-bg-mod-dim: #191515;\n    --multiplicative-mod-slider: #977da9;\n    --overwriting-mod-slider: #798FA7;\n    --indicator-primary: #EAAC9D;\n    --indicator-secondary: #5e413a;\n    --select2-opt-group: #191920;\n    --input-box-outline: #191920;\n    --mute-button-normal: #798FA7;\n    --mute-button-mod: #354457;\n    --pitch1-secondary-channel: #91655a;\n    --pitch1-primary-channel: #EAAC9D;\n    --pitch1-secondary-note: #91655a;\n    --pitch1-primary-note: #EAAC9D;\n    --pitch2-secondary-channel: #8f6513;\n    --pitch2-primary-channel: #FFAF12;\n    --pitch2-secondary-note: #8f6513;\n    --pitch2-primary-note: #FFAF12;\n    --pitch3-secondary-channel: #212f46;\n    --pitch3-primary-channel: #34558B;\n    --pitch3-secondary-note: #212f46;\n    --pitch3-primary-note: #34558B;\n    --pitch4-secondary-channel: #2e6b5b;\n    --pitch4-primary-channel: #4EC5A7;\n    --pitch4-secondary-note: #2e6b5b;\n    --pitch4-primary-note: #4EC5A7;\n    --pitch5-secondary-channel: #555D46;\n    --pitch5-primary-channel: #aabf84;\n    --pitch5-secondary-note: #555D46;\n    --pitch5-primary-note: #aabf84;\n    --pitch6-secondary-channel: #A2553B;\n    --pitch6-primary-channel: #e59a81;\n    --pitch6-secondary-note: #A2553B;\n    --pitch6-primary-note: #e59a81;\n    --pitch7-secondary-channel: #7b4021;\n    --pitch7-primary-channel: #FE813E;\n    --pitch7-secondary-note: #7b4021;\n    --pitch7-primary-note: #FE813E;\n    --pitch8-secondary-channel: #847753;\n    --pitch8-primary-channel: #EFDAA3;\n    --pitch8-secondary-note: #847753;\n    --pitch8-primary-note: #EFDAA3;\n    --pitch9-secondary-channel: #2c3642;\n    --pitch9-primary-channel: #798FA7;\n    --pitch9-secondary-note: #2c3642;\n    --pitch9-primary-note: #798FA7;\n    --pitch10-secondary-channel: #0d4453;\n    --pitch10-primary-channel: #107895;\n    --pitch10-secondary-note: #0d4453;\n    --pitch10-primary-note: #107895;\n    --noise1-secondary-channel: #71617C;\n    --noise1-primary-channel: #977da9;\n    --noise1-secondary-note: #71617C;\n    --noise1-primary-note: #977da9;\n    --noise2-secondary-channel: #3B3D4A;\n    --noise2-primary-channel: #707591;\n    --noise2-secondary-note: #3B3D4A;\n    --noise2-primary-note: #707591;\n    --noise3-secondary-channel: #625f5e;\n    --noise3-primary-channel: #A19D9C;\n    --noise3-secondary-note: #625f5e;\n    --noise3-primary-note: #A19D9C;\n    --noise4-secondary-channel: #ab847b;\n    --noise4-primary-channel: #EAAC9D;\n    --noise4-secondary-note: #ab847b;\n    --noise4-primary-note: #EAAC9D;\n    --noise5-secondary-channel: #B49D74;\n    --noise5-primary-channel: #dec69b;\n    --noise5-secondary-note: #B49D74;\n    --noise5-primary-note: #dec69b;\n    --mod1-secondary-channel: #722124;\n    --mod1-primary-channel: #D13A41;\n    --mod1-secondary-note: #722124;\n    --mod1-primary-note: #D13A41;\n    --mod2-secondary-channel: #213657;\n    --mod2-primary-channel: #34558B;\n    --mod2-secondary-note: #213657;\n    --mod2-primary-note: #34558B;\n    --mod3-secondary-channel: #555D46;\n    --mod3-primary-channel: #848f6d;\n    --mod3-secondary-note: #555D46;\n    --mod3-primary-note: #848f6d;\n    --mod4-secondary-channel: #71617C;\n    --mod4-primary-channel: #a68ab9;\n    --mod4-secondary-note: #71617C;\n    --mod4-primary-note: #a68ab9;\n    --mod-label-primary: #282828;\n    --mod-label-secondary-text: #707070;\n    --mod-label-primary-text: white;\n    --disabled-note-primary: #5d5d5d;\n    --disabled-note-secondary: #292929;\n}", ":root {\n    --page-margin: #0c0306;\n    --editor-background: #0c0306;\n    --primary-text: #26d9cd;\n    --secondary-text: #ff6666;\n    --inverted-text: white;\n    --text-selection: #ffffff;\n    --box-selection-fill: #ff00004d;\n    --loop-accent: #ff6666;\n    --link-accent: white;\n    --ui-widget-background: #232323;\n    --ui-widget-focus: #303030;\n    --pitch-background: hsl(61deg 100% 70% / 25%);\n    --tonic: #66a3ff40;\n    --fifth-note: #ff666640;\n    --white-piano-key: #cdcdcd;\n    --black-piano-key: #232323;\n    --track-editor-bg-pitch: #404040bf;\n    --track-editor-bg-pitch-dim: #151515;\n    --track-editor-bg-noise: #404040bf;\n    --track-editor-bg-noise-dim: #151515;\n    --track-editor-bg-mod: #404040bf;\n    --track-editor-bg-mod-dim: #151515;\n    --multiplicative-mod-slider: #ef7692;\n    --overwriting-mod-slider: #f43e69;\n    --indicator-primary: #26d9cd;\n    --indicator-secondary: hsl(176deg 70% 25%);\n    --select2-opt-group: #232323;\n    --input-box-outline: #141e34;\n    --mute-button-normal: #26d9cd;\n    --mute-button-mod: hsl(346deg 70% 50%);\n    --pitch1-secondary-channel: #bf4040;\n    --pitch1-primary-channel: #ff6666;\n    --pitch1-secondary-note: #bf4040;\n    --pitch1-primary-note: #ff6666;\n    --pitch2-secondary-channel: #bf5b40;\n    --pitch2-primary-channel: #ff8766;\n    --pitch2-secondary-note: #bf5b40;\n    --pitch2-primary-note: #ff8766;\n    --pitch3-secondary-channel: #bf7940;\n    --pitch3-primary-channel: #ffab66;\n    --pitch3-secondary-note: #bf7940;\n    --pitch3-primary-note: #ffab66;\n    --pitch4-secondary-channel: #bf9b40;\n    --pitch4-primary-channel: #ffd466;\n    --pitch4-secondary-note: #bf9b40;\n    --pitch4-primary-note: #ffd466;\n    --pitch5-secondary-channel: #bdbf40;\n    --pitch5-primary-channel: #fcff66;\n    --pitch5-secondary-note: #bdbf40;\n    --pitch5-primary-note: #fcff66;\n    --pitch6-secondary-channel: #9dbf40;\n    --pitch6-primary-channel: #d6ff66;\n    --pitch6-secondary-note: #9dbf40;\n    --pitch6-primary-note: #d6ff66;\n    --pitch7-secondary-channel: #9dbf40;\n    --pitch7-primary-channel: #fcff66;\n    --pitch7-secondary-note: #9dbf40;\n    --pitch7-primary-note: #fcff66;\n    --pitch8-secondary-channel: #bf9b40;\n    --pitch8-primary-channel: #ffd466;\n    --pitch8-secondary-note: #bf9b40;\n    --pitch8-primary-note: #ffd466;\n    --pitch9-secondary-channel: #bf5b40;\n    --pitch9-primary-channel: #ffab66;\n    --pitch9-secondary-note: #bf5b40;\n    --pitch9-primary-note: #ffab66;\n    --pitch10-secondary-channel: #d15a1f;\n    --pitch10-primary-channel: #ff8766;\n    --pitch10-secondary-note: #d15a1f;\n    --pitch10-primary-note: #ff8766;\n    --noise1-secondary-channel: #4073bf;\n    --noise1-primary-channel: #66a3ff;\n    --noise1-secondary-note: #4073bf;\n    --noise1-primary-note: #66a3ff;\n    --noise2-secondary-channel: #405dbf;\n    --noise2-primary-channel: #668aff;\n    --noise2-secondary-note: #405dbf;\n    --noise2-primary-note: #668aff;\n    --noise3-secondary-channel: #4f40bf;\n    --noise3-primary-channel: #7866ff;\n    --noise3-secondary-note: #4f40bf;\n    --noise3-primary-note: #7866ff;\n    --noise4-secondary-channel: #8840bf;\n    --noise4-primary-channel: #bd66ff;\n    --noise4-secondary-note: #8840bf;\n    --noise4-primary-note: #bd66ff;\n    --noise5-secondary-channel: #bf40b5;\n    --noise5-primary-channel: #ff66f2;\n    --noise5-secondary-note: #bf40b5;\n    --noise5-primary-note: #ff66f2;\n    --mod1-secondary-channel: #cc6666;\n    --mod1-primary-channel: #ff9999;\n    --mod1-secondary-note: #cc6666;\n    --mod1-primary-note: #ff9999;\n    --mod2-secondary-channel: #cc7766;\n    --mod2-primary-channel: #ffaa99;\n    --mod2-secondary-note: #bf5540;\n    --mod2-primary-note: #ffaa99;\n    --mod3-secondary-channel: #cc8866;\n    --mod3-primary-channel: #ffbb99;\n    --mod3-secondary-note: #cc8866;\n    --mod3-primary-note: #ffbb99;\n    --mod4-secondary-channel: #cc9966;\n    --mod4-primary-channel: #ffcc99;\n    --mod4-secondary-note: #cc9966;\n    --mod4-primary-note: #ffcc99;\n    --disabled-note-primary: #696969;\n    --disabled-note-secondary: #232323;\n}", ":root {\n    --page-margin: #000;\n    --editor-background: #000;\n    --hover-preview: #808080;\n    --playhead: #808080;\n    --primary-text: white;\n    --secondary-text: #cccccc;\n    --inverted-text: black;\n    --text-selection: #696969;\n    --box-selection-fill: #cccccc40;\n    --loop-accent: #808080;\n    --link-accent: white;\n    --ui-widget-background: #232323;\n    --ui-widget-focus: #303030;\n    --pitch-background: #1a1a1a;\n    --tonic: #262626;\n    --fifth-note: #0d0d0d;\n    --white-piano-key: #808080;\n    --black-piano-key: #232323;\n    --use-color-formula: true;\n    --track-editor-bg-pitch: #262626;\n    --track-editor-bg-pitch-dim: #1a1a1a;\n    --track-editor-bg-noise: #262626;\n    --track-editor-bg-noise-dim: #1a1a1a;\n    --track-editor-bg-mod: #262626;\n    --track-editor-bg-mod-dim: #1a1a1a;\n    --multiplicative-mod-slider: #808080;\n    --overwriting-mod-slider: #808080;\n    --indicator-primary: #808080;\n    --indicator-secondary: #333333;\n    --select2-opt-group: #232323;\n    --input-box-outline: #222;\n    --mute-button-normal: #808080;\n    --mute-button-mod: #808080;\n    --mod-label-primary: #232323;\n    --mod-label-secondary-text: #696969;\n    --mod-label-primary-text: #cdcdcd;\n    --pitch-secondary-channel-hue: 0;\n    --pitch-secondary-channel-hue-scale: 25;\n    --pitch-secondary-channel-sat: 10;\n    --pitch-secondary-channel-sat-scale: 0.1;\n    --pitch-secondary-channel-lum: 70;\n    --pitch-secondary-channel-lum-scale: 0;\n    --pitch-primary-channel-hue: 0;\n    --pitch-primary-channel-hue-scale: 25;\n    --pitch-primary-channel-sat: 50;\n    --pitch-primary-channel-sat-scale: 0.1;\n    --pitch-primary-channel-lum: 95;\n    --pitch-primary-channel-lum-scale: 0;\n    --pitch-secondary-note-hue: 0;\n    --pitch-secondary-note-hue-scale: 25;\n    --pitch-secondary-note-sat: 10;\n    --pitch-secondary-note-sat-scale: 0.1;\n    --pitch-secondary-note-lum: 70;\n    --pitch-secondary-note-lum-scale: 0;\n    --pitch-primary-note-hue: 0;\n    --pitch-primary-note-hue-scale: 25;\n    --pitch-primary-note-sat: 50;\n    --pitch-primary-note-sat-scale: 0.1;\n    --pitch-primary-note-lum: 95;\n    --pitch-primary-note-lum-scale: 0;\n    --noise-secondary-channel-hue: 125;\n    --noise-secondary-channel-hue-scale: 50;\n    --noise-secondary-channel-sat: 10;\n    --noise-secondary-channel-sat-scale: 0.1;\n    --noise-secondary-channel-lum: 70;\n    --noise-secondary-channel-lum-scale: 0;\n    --noise-primary-channel-hue: 125;\n    --noise-primary-channel-hue-scale: 50;\n    --noise-primary-channel-sat: 50;\n    --noise-primary-channel-sat-scale: 0.1;\n    --noise-primary-channel-lum: 95;\n    --noise-primary-channel-lum-scale: 0;\n    --noise-secondary-note-hue: 125;\n    --noise-secondary-note-hue-scale: 50;\n    --noise-secondary-note-sat: 10;\n    --noise-secondary-note-sat-scale: 0.1;\n    --noise-secondary-note-lum: 70;\n    --noise-secondary-note-lum-scale: 0;\n    --noise-primary-note-hue: 125;\n    --noise-primary-note-hue-scale: 50;\n    --noise-primary-note-sat: 50;\n    --noise-primary-note-sat-scale: 0.1;\n    --noise-primary-note-lum: 95;\n    --noise-primary-note-lum-scale: 0;\n    --mod-secondary-channel-hue: 255;\n    --mod-secondary-channel-hue-scale: 75;\n    --mod-secondary-channel-sat: 10;\n    --mod-secondary-channel-sat-scale: 0;\n    --mod-secondary-channel-lum: 70;\n    --mod-secondary-channel-lum-scale: 0;\n    --mod-primary-channel-hue: 255;\n    --mod-primary-channel-hue-scale: 75;\n    --mod-primary-channel-sat: 50;\n    --mod-primary-channel-sat-scale: 0;\n    --mod-primary-channel-lum: 95;\n    --mod-primary-channel-lum-scale: 0;\n    --mod-secondary-note-hue: 255;\n    --mod-secondary-note-hue-scale: 75;\n    --mod-secondary-note-sat: 10;\n    --mod-secondary-note-sat-scale: 0;\n    --mod-secondary-note-lum: 70;\n    --mod-secondary-note-lum-scale: 0;\n    --mod-primary-note-hue: 255;\n    --mod-primary-note-hue-scale: 75;\n    --mod-primary-note-sat: 50;\n    --mod-primary-note-sat-scale: 0;\n    --mod-primary-note-lum: 95;\n    --mod-primary-note-lum-scale: 0;\n    --disabled-note-primary: #c6c6c6;\n    --disabled-note-secondary: #8c8c8c;\n}", ":root {\n    --loop-accent: #9900cc;\n    --noise-channel-limit: 2;\n    --pitch1-secondary-channel: #00ffff;\n    --pitch1-primary-channel: #00ffff;\n    --pitch1-secondary-note: #00ffff;\n    --pitch1-primary-note: #00ffff;\n    --pitch2-secondary-channel: #00d8d8;\n    --pitch2-primary-channel: #00d8d8;\n    --pitch2-secondary-note: #00d8d8;\n    --pitch2-primary-note: #00d8d8;\n    --pitch3-secondary-channel: #00adad;\n    --pitch3-primary-channel: #00adad;\n    --pitch3-secondary-note: #00adad;\n    --pitch3-primary-note: #00adad;\n    --pitch4-secondary-channel: #008c8c;\n    --pitch4-primary-channel: #008c8c;\n    --pitch4-secondary-note: #008c8c;\n    --pitch4-primary-note: #008c8c;\n    --pitch5-secondary-channel: #005b5b;\n    --pitch5-primary-channel: #005b5b;\n    --pitch5-secondary-note: #005b5b;\n    --pitch5-primary-note: #005b5b;\n    --pitch6-secondary-channel: #003333;\n    --pitch6-primary-channel: #003333;\n    --pitch6-secondary-note: #003333;\n    --pitch6-primary-note: #003333;\n    --pitch7-secondary-channel: #00ffff;\n    --pitch7-primary-channel: #00ffff;\n    --pitch7-secondary-note: #00ffff;\n    --pitch7-primary-note: #00ffff;\n    --pitch8-secondary-channel: #00ffff;\n    --pitch8-primary-channel: #00ffff;\n    --pitch8-secondary-note: #00ffff;\n    --pitch8-primary-note: #00ffff;\n    --pitch9-secondary-channel: #00ffff;\n    --pitch9-primary-channel: #00ffff;\n    --pitch9-secondary-note: #00ffff;\n    --pitch9-primary-note: #00ffff;\n    --pitch10-secondary-channel: #00ffff;\n    --pitch10-primary-channel: #00ffff;\n    --pitch10-secondary-note: #00ffff;\n    --pitch10-primary-note: #00ffff;\n    --noise1-secondary-channel: #991010;\n    --noise1-primary-channel: #ff1616;\n    --noise1-secondary-note: #991010;\n    --noise1-primary-note: #ff1616;\n    --noise2-secondary-channel: #aaaaaa;\n    --noise2-primary-channel: #ffffff;\n    --noise2-secondary-note: #aaaaaa;\n    --noise2-primary-note: #ffffff;\n    --noise3-secondary-channel: #991010;\n    --noise3-primary-channel: #ff1616;\n    --noise3-secondary-note: #991010;\n    --noise3-primary-note: #ff1616;\n    --noise4-secondary-channel: #aaaaaa;\n    --noise4-primary-channel: #ffffff;\n    --noise4-secondary-note: #aaaaaa;\n    --noise4-primary-note: #ffffff;\n    --noise5-secondary-channel: #991010;\n    --noise5-primary-channel: #ff1616;\n    --noise5-secondary-note: #991010;\n    --noise5-primary-note: #ff1616;\n    --mod1-secondary-channel: #00ffff;\n    --mod1-primary-channel: #00ffff;\n    --mod1-secondary-note: #00ffff;\n    --mod1-primary-note: #00ffff;\n    --mod2-secondary-channel: #00d8d8;\n    --mod2-primary-channel: #00d8d8;\n    --mod2-secondary-note: #00d8d8;\n    --mod2-primary-note: #00d8d8;\n    --mod3-secondary-channel: #00adad;\n    --mod3-primary-channel: #00adad;\n    --mod3-secondary-note: #00adad;\n    --mod3-primary-note: #00adad;\n    -mod4-secondary-channel: #008c8c;\n    --mod4-primary-channel: #008c8c;\n    --mod4-secondary-note: #008c8c;\n    --mod4-primary-note: #008c8c;\n}", ":root {\n    --page-margin: #c4c8e3;\n    --editor-background: #c4c8e3;\n    --hover-preview: #000000;\n    --playhead: #243953;\n    --primary-text: black;\n    --secondary-text: #855b95;\n    --text-selection: rgb(132 125 255);\n    --box-selection-fill: rgb(174 109 73 / 65%);\n    --loop-accent: #EC897D;\n    --link-accent: #4e00c8;\n    --ui-widget-background: #e7e7ff;\n    --ui-widget-focus: #d0d3e9;\n    --pitch-background: #ffffff;\n    --tonic: #bbbbbb;\n    --fifth-note: #dcdcdc;\n    --white-piano-key: #ffffff;\n    --black-piano-key: #615f66;\n    --track-editor-bg-pitch: #e9ebff;\n    --track-editor-bg-pitch-dim: #e9ebff;\n    --track-editor-bg-noise: #fdf2fe;\n    --track-editor-bg-noise-dim: #fdf2fe;\n    --track-editor-bg-mod: #dbdefe;\n    --track-editor-bg-mod-dim: #dbdefe;\n    --multiplicative-mod-slider: #6900b3;\n    --overwriting-mod-slider: #004b9d;\n    --indicator-primary: #ff633d;\n    --indicator-secondary: #933822;\n    --select2-opt-group: #e7e7ff;\n    --input-box-outline: #e7e7ff;\n    --mute-button-normal: #0072ef;\n    --mute-button-mod: #002e67;\n    --pitch1-secondary-channel: #b77d6e;\n    --pitch1-primary-channel: #ff9d85;\n    --pitch1-secondary-note: #b77d6e;\n    --pitch1-primary-note: #ff9d85;\n    --pitch2-secondary-channel: #be8821;\n    --pitch2-primary-channel: #FFAF12;\n    --pitch2-secondary-note: #be8821;\n    --pitch2-primary-note: #FFAF12;\n    --pitch3-secondary-channel: #3a62a4;\n    --pitch3-primary-channel: #528ae6;\n    --pitch3-secondary-note: #3a62a4;\n    --pitch3-primary-note: #528ae6;\n    --pitch4-secondary-channel: #3e8d78;\n    --pitch4-primary-channel: #4EC5A7;\n    --pitch4-secondary-note: #3e8d78;\n    --pitch4-primary-note: #4EC5A7;\n    --pitch5-secondary-channel: #84906d;\n    --pitch5-primary-channel: #aabf84;\n    --pitch5-secondary-note: #84906d;\n    --pitch5-primary-note: #aabf84;\n    --pitch6-secondary-channel: #bd6345;\n    --pitch6-primary-channel: #e59a81;\n    --pitch6-secondary-note: #bd6345;\n    --pitch6-primary-note: #e59a81;\n    --pitch7-secondary-channel: #aa592f;\n    --pitch7-primary-channel: #FE813E;\n    --pitch7-secondary-note: #aa592f;\n    --pitch7-primary-note: #FE813E;\n    --pitch8-secondary-channel: #b2a171;\n    --pitch8-primary-channel: #ffd76d;\n    --pitch8-secondary-note: #b2a171;\n    --pitch8-primary-note: #ffd76d;\n    --pitch9-secondary-channel: #4f6177;\n    --pitch9-primary-channel: #798FA7;\n    --pitch9-secondary-note: #4f6177;\n    --pitch9-primary-note: #798FA7;\n    --pitch10-secondary-channel: #165162;\n    --pitch10-primary-channel: #107895;\n    --pitch10-secondary-note: #165162;\n    --pitch10-primary-note: #107895;\n    --noise1-secondary-channel: #71617C;\n    --noise1-primary-channel: #977da9;\n    --noise1-secondary-note: #71617C;\n    --noise1-primary-note: #977da9;\n    --noise2-secondary-channel: #4a4c5b;\n    --noise2-primary-channel: #707591;\n    --noise2-secondary-note: #4a4c5b;\n    --noise2-primary-note: #707591;\n    --noise3-secondary-channel: #817c7b;\n    --noise3-primary-channel: #A19D9C;\n    --noise3-secondary-note: #817c7b;\n    --noise3-primary-note: #A19D9C;\n    --noise4-secondary-channel: #ab847b;\n    --noise4-primary-channel: #EAAC9D;\n    --noise4-secondary-note: #ab847b;\n    --noise4-primary-note: #EAAC9D;\n    --noise5-secondary-channel: #B49D74;\n    --noise5-primary-channel: #dec69b;\n    --noise5-secondary-note: #B49D74;\n    --noise5-primary-note: #dec69b;\n    --mod1-secondary-channel: #722124;\n    --mod1-primary-channel: #D13A41;\n    --mod1-secondary-note: #722124;\n    --mod1-primary-note: #D13A41;\n    --mod2-secondary-channel: #213657;\n    --mod2-primary-channel: #34558B;\n    --mod2-secondary-note: #213657;\n    --mod2-primary-note: #34558B;\n    --mod3-secondary-channel: #555D46;\n    --mod3-primary-channel: #848f6d;\n    --mod3-secondary-note: #555D46;\n    --mod3-primary-note: #848f6d;\n    --mod4-secondary-channel: #71617C;\n    --mod4-primary-channel: #a68ab9;\n    --mod4-secondary-note: #71617C;\n    --mod4-primary-note: #a68ab9;\n    --mod-label-primary: #e9e9e9;\n    --mod-label-secondary-text: #707070;\n    --disabled-note-primary: #959595;\n    --disabled-note-secondary: #6e6e6e;\n}", ":root {\n    --page-margin: #040410;\n    --editor-background: #040410;\n    --playhead: rgba(255, 255, 255, 0.9);\n    --secondary-text: #84859a;\n    --box-selection-fill: #044b94;\n    --ui-widget-background: #393e4f;\n    --ui-widget-focus: #6d6886;\n    --pitch-background: #393e4f;\n    --tonic: #725491;\n    --fifth-note: #54547a;\n    --white-piano-key: #eee;\n    --black-piano-key: #666;\n    --use-color-formula: true;\n    --track-editor-bg-pitch: #393e4f;\n    --track-editor-bg-pitch-dim: #1c1d28;\n    --track-editor-bg-noise: #3d3535;\n    --track-editor-bg-noise-dim: #161313;\n    --track-editor-bg-mod: #283560;\n    --track-editor-bg-mod-dim: #0a101f;\n    --multiplicative-mod-slider: #606c9f;\n    --overwriting-mod-slider: #6850b5;\n    --indicator-primary: #9c64f7;\n    --indicator-secondary: #393e4f;\n    --select2-opt-group: #5d576f;\n    --input-box-outline: #222;\n    --mute-button-normal: #dda85d;\n    --mute-button-mod: #886eae;\n    --mod-label-primary: #282840;\n    --mod-label-secondary-text: rgb(87, 86, 120);\n    --mod-label-primary-text: white;\n    --pitch-secondary-channel-hue: 0;\n    --pitch-secondary-channel-hue-scale: 6.5;\n    --pitch-secondary-channel-sat: 83.3;\n    --pitch-secondary-channel-sat-scale: 0.1;\n    --pitch-secondary-channel-lum: 40;\n    --pitch-secondary-channel-lum-scale: 0.05;\n    --pitch-primary-channel-hue: 0;\n    --pitch-primary-channel-hue-scale: 6.5;\n    --pitch-primary-channel-sat: 100;\n    --pitch-primary-channel-sat-scale: 0.1;\n    --pitch-primary-channel-lum: 67.5;\n    --pitch-primary-channel-lum-scale: 0.05;\n    --pitch-secondary-note-hue: 0;\n    --pitch-secondary-note-hue-scale: 6.5;\n    --pitch-secondary-note-sat: 93.9;\n    --pitch-secondary-note-sat-scale: 0.1;\n    --pitch-secondary-note-lum: 25;\n    --pitch-secondary-note-lum-scale: 0.05;\n    --pitch-primary-note-hue: 0;\n    --pitch-primary-note-hue-scale: 6.5;\n    --pitch-primary-note-sat: 100;\n    --pitch-primary-note-sat-scale: 0.05;\n    --pitch-primary-note-lum: 85.6;\n    --pitch-primary-note-lum-scale: 0.025;\n    --noise-secondary-channel-hue: 0;\n    --noise-secondary-channel-hue-scale: 2;\n    --noise-secondary-channel-sat: 25;\n    --noise-secondary-channel-sat-scale: 0;\n    --noise-secondary-channel-lum: 42;\n    --noise-secondary-channel-lum-scale: 0;\n    --noise-primary-channel-hue: 0;\n    --noise-primary-channel-hue-scale: 2;\n    --noise-primary-channel-sat: 33;\n    --noise-primary-channel-sat-scale: 0;\n    --noise-primary-channel-lum: 63.5;\n    --noise-primary-channel-lum-scale: 0;\n    --noise-secondary-note-hue: 0;\n    --noise-secondary-note-hue-scale: 2;\n    --noise-secondary-note-sat: 33.5;\n    --noise-secondary-note-sat-scale: 0;\n    --noise-secondary-note-lum: 55;\n    --noise-secondary-note-lum-scale: 0;\n    --noise-primary-note-hue: 0;\n    --noise-primary-note-hue-scale: 2;\n    --noise-primary-note-sat: 46.5;\n    --noise-primary-note-sat-scale: 0;\n    --noise-primary-note-lum: 74;\n    --noise-primary-note-lum-scale: 0;\n    --mod-secondary-channel-hue: 192;\n    --mod-secondary-channel-hue-scale: 1.5;\n    --mod-secondary-channel-sat: 88;\n    --mod-secondary-channel-sat-scale: 0;\n    --mod-secondary-channel-lum: 50;\n    --mod-secondary-channel-lum-scale: 0;\n    --mod-primary-channel-hue: 192;\n    --mod-primary-channel-hue-scale: 1.5;\n    --mod-primary-channel-sat: 96;\n    --mod-primary-channel-sat-scale: 0;\n    --mod-primary-channel-lum: 80;\n    --mod-primary-channel-lum-scale: 0;\n    --mod-secondary-note-hue: 192;\n    --mod-secondary-note-hue-scale: 1.5;\n    --mod-secondary-note-sat: 92;\n    --mod-secondary-note-sat-scale: 0;\n    --mod-secondary-note-lum: 45;\n    --mod-secondary-note-lum-scale: 0;\n    --mod-primary-note-hue: 192;\n    --mod-primary-note-hue-scale: 1.5;\n    --mod-primary-note-sat: 96;\n    --mod-primary-note-sat-scale: 0;\n    --mod-primary-note-lum: 85;\n    --mod-primary-note-lum-scale: 0;\n    --disabled-note-primary: #91879f;\n    --disabled-note-secondary: #6a677a;\n}", ":root {\n    -webkit-text-stroke-width: 0.5px;\n    --page-margin: #cab1d3;\n    --editor-background: #f4f4f4;\n    --hover-preview: #2d26a2;\n    --playhead: rgb(20 25 153 / 90%);\n    --primary-text: #b686c3;\n    --secondary-text: #970f38;\n    --inverted-text: #fefdff;\n    --text-selection: rgb(56 21 8 / 99%);\n    --box-selection-fill: rgb(20 203 160 / 61%);\n    --loop-accent: #09dc0e;\n    --link-accent: #3ee669;\n    --ui-widget-background: #0e0a42;\n    --ui-widget-focus: #380c42;\n    --pitch-background: #8daf96;\n    --tonic: #a16fb1;\n    --fifth-note: #d08c8c;\n    --white-piano-key: #fbffee;\n    --black-piano-key: #c9d8e5;\n    --white-piano-key-text: #101160;\n    --black-piano-key-text: #231b03;\n    --use-color-formula: true;\n    --track-editor-bg-pitch: #34456a;\n    --track-editor-bg-pitch-dim: #88afad;\n    --track-editor-bg-noise: #564566;\n    --track-editor-bg-noise-dim: #aaa;\n    --track-editor-bg-mod: #7f779d;\n    --track-editor-bg-mod-dim: #aaa;\n    --multiplicative-mod-slider: #807caf;\n    --overwriting-mod-slider: #909cdf;\n    --indicator-primary: #ae38ff;\n    --indicator-secondary: #5c8dbb;\n    --select2-opt-group: #581b50;\n    --input-box-outline: #6f7074;\n    --mute-button-normal: #db1e00;\n    --mute-button-mod: #883bf9;\n    --mod-label-primary: #525297;\n    --mod-label-secondary-text: rgb(197 147 245);\n    --mod-label-primary-text: #a3aae9;\n    --pitch-secondary-channel-hue: 26;\n    --pitch-secondary-channel-hue-scale: 214.5;\n    --pitch-secondary-channel-sat: 74.3;\n    --pitch-secondary-channel-sat-scale: -0.1;\n    --pitch-secondary-channel-lum: 55;\n    --pitch-secondary-channel-lum-scale: -0.05;\n    --pitch-primary-channel-hue: 26;\n    --pitch-primary-channel-hue-scale: 214.5;\n    --pitch-primary-channel-sat: 74;\n    --pitch-primary-channel-sat-scale: -0.1;\n    --pitch-primary-channel-lum: 65.5;\n    --pitch-primary-channel-lum-scale: -0.05;\n    --pitch-secondary-note-hue: 26;\n    --pitch-secondary-note-hue-scale: 214.5;\n    --pitch-secondary-note-sat: 74.9;\n    --pitch-secondary-note-sat-scale: -0.1;\n    --pitch-secondary-note-lum: 70;\n    --pitch-secondary-note-lum-scale: -0.05;\n    --pitch-primary-note-hue: 26;\n    --pitch-primary-note-hue-scale: 214.5;\n    --pitch-primary-note-sat: 85;\n    --pitch-primary-note-sat-scale: 0.05;\n    --pitch-primary-note-lum: 64.6;\n    --pitch-primary-note-lum-scale: -0.025;\n    --noise-secondary-channel-hue: 220;\n    --noise-secondary-channel-hue-scale: 2;\n    --noise-secondary-channel-sat: 25;\n    --noise-secondary-channel-sat-scale: 0;\n    --noise-secondary-channel-lum: 62;\n    --noise-secondary-channel-lum-scale: -0.1;\n    --noise-primary-channel-hue: 220;\n    --noise-primary-channel-hue-scale: 2;\n    --noise-primary-channel-sat: 53;\n    --noise-primary-channel-sat-scale: 0;\n    --noise-primary-channel-lum: 53.5;\n    --noise-primary-channel-lum-scale: -0.1;\n    --noise-secondary-note-hue: 220;\n    --noise-secondary-note-hue-scale: 2;\n    --noise-secondary-note-sat: 58.5;\n    --noise-secondary-note-sat-scale: 0;\n    --noise-secondary-note-lum: 85;\n    --noise-secondary-note-lum-scale: -1;\n    --noise-primary-note-hue: 220;\n    --noise-primary-note-hue-scale: 2;\n    --noise-primary-note-sat: 56.5;\n    --noise-primary-note-sat-scale: 0;\n    --noise-primary-note-lum: 54;\n    --noise-primary-note-lum-scale: -1;\n    --mod-secondary-channel-hue: 90;\n    --mod-secondary-channel-hue-scale: 1.5;\n    --mod-secondary-channel-sat: 88;\n    --mod-secondary-channel-sat-scale: 0;\n    --mod-secondary-channel-lum: 60;\n    --mod-secondary-channel-lum-scale: 0;\n    --mod-primary-channel-hue: 90;\n    --mod-primary-channel-hue-scale: 1.5;\n    --mod-primary-channel-sat: 89;\n    --mod-primary-channel-sat-scale: 0;\n    --mod-primary-channel-lum: 65;\n    --mod-primary-channel-lum-scale: 0;\n    --mod-secondary-note-hue: 90;\n    --mod-secondary-note-hue-scale: 1.5;\n    --mod-secondary-note-sat: 79;\n    --mod-secondary-note-sat-scale: 0;\n    --mod-secondary-note-lum: 95;\n    --mod-secondary-note-lum-scale: 0;\n    --mod-primary-note-hue: 90;\n    --mod-primary-note-hue-scale: 1.5;\n    --mod-primary-note-sat: 79;\n    --mod-primary-note-sat-scale: 0;\n    --mod-primary-note-lum: 55;\n    --mod-primary-note-lum-scale: 0;\n    --disabled-note-primary: #868;\n    --disabled-note-secondary: #767;\n}\n\n.beepboxEditor button,\n.beepboxEditor select {\n    background-color: var(--secondary-text);\n}\n\n.select2-selection__rendered {\n    background-color: var(--secondary-text);\n}\n\n.beepboxEditor .piano-button::before {\n    display: none;\n}\n\n.promptContainerBG::before {\n    box-shadow: inset 0 0 2000px rgba(255, 255, 255, .5);\n}", ":root {\n    -webkit-text-stroke-width: 0.5px;\n    --page-margin: #685d88;\n    --editor-background: white;\n    --hover-preview: black;\n    --playhead: rgba(0, 0, 0, 0.5);\n    --primary-text: black;\n    --secondary-text: #777;\n    --inverted-text: white;\n    --text-selection: rgba(200, 170, 255, 0.99);\n    --box-selection-fill: rgba(0, 0, 0, 0.1);\n    --loop-accent: #98f;\n    --link-accent: #74f;\n    --ui-widget-background: #ececec;\n    --ui-widget-focus: #eee;\n    --pitch-background: #ececec;\n    --tonic: #f0d6b6;\n    --fifth-note: #bbddf0;\n    --white-piano-key: #eee;\n    --black-piano-key: #666;\n    --track-editor-bg-pitch: #ececec;\n    --track-editor-bg-pitch-dim: #fdfdfd;\n    --track-editor-bg-noise: #ececec;\n    --track-editor-bg-noise-dim: #fdfdfd;\n    --track-editor-bg-mod: #dbecfd;\n    --track-editor-bg-mod-dim: #ecfdff;\n    --multiplicative-mod-slider: #789;\n    --overwriting-mod-slider: #987;\n    --indicator-primary: #98f;\n    --indicator-secondary: #cde;\n    --select2-opt-group: #cecece;\n    --input-box-outline: #ddd;\n    --mute-button-normal: #c0b47f;\n    --mute-button-mod: #bd7fc0;\n    --pitch1-secondary-channel: #6CD9ED;\n    --pitch1-primary-channel: #00A0BD;\n    --pitch1-secondary-note: #34C2DC;\n    --pitch1-primary-note: #00758A;\n    --pitch2-secondary-channel: #E3C941;\n    --pitch2-primary-channel: #B49700;\n    --pitch2-secondary-note: #D1B628;\n    --pitch2-primary-note: #836E00;\n    --pitch3-secondary-channel: #FF9D61;\n    --pitch3-primary-channel: #E14E00;\n    --pitch3-secondary-note: #F67D3C;\n    --pitch3-primary-note: #B64000;\n    --pitch4-secondary-channel: #4BE24B;\n    --pitch4-primary-channel: #00A800;\n    --pitch4-secondary-note: #2DC82D;\n    --pitch4-primary-note: #008000;\n    --pitch5-secondary-channel: #FF90FF;\n    --pitch5-primary-channel: #E12EDF;\n    --pitch5-secondary-note: #EC6EEC;\n    --pitch5-primary-note: #A600A5;\n    --pitch6-secondary-channel: #B5B5FE;\n    --pitch6-primary-channel: #6969FD;\n    --pitch6-secondary-note: #9393FE;\n    --pitch6-primary-note: #4A4AD7;\n    --pitch7-secondary-channel: #C2D848;\n    --pitch7-primary-channel: #8EA800;\n    --pitch7-secondary-note: #B0C82D;\n    --pitch7-primary-note: #6C8000;\n    --pitch8-secondary-channel: #FF90A4;\n    --pitch8-primary-channel: #E12E4D;\n    --pitch8-secondary-note: #EC6E85;\n    --pitch8-primary-note: #A6001D;\n    --pitch9-secondary-channel: #41E3B5;\n    --pitch9-primary-channel: #00B481;\n    --pitch9-secondary-note: #28D1A1;\n    --pitch9-primary-note: #00835E;\n    --pitch10-secondary-channel: #CA77FF;\n    --pitch10-primary-channel: #9609FF;\n    --pitch10-secondary-note: #B54FFF;\n    --pitch10-primary-note: #8400E3;\n    --noise1-secondary-channel: #C1C1C1;\n    --noise1-primary-channel: #898989;\n    --noise1-secondary-note: #ADADAD;\n    --noise1-primary-note: #6C6C6C;\n    --noise2-secondary-channel: #E8BB8C;\n    --noise2-primary-channel: #BD7D3A;\n    --noise2-secondary-note: #D1A374;\n    --noise2-primary-note: #836342;\n    --noise3-secondary-channel: #9BC4EB;\n    --noise3-primary-channel: #4481BE;\n    --noise3-secondary-note: #7CA7D3;\n    --noise3-primary-note: #476685;\n    --noise4-secondary-channel: #C5A5E0;\n    --noise4-primary-channel: #8553AE;\n    --noise4-secondary-note: #B290CC;\n    --noise4-primary-note: #684F7D;\n    --noise5-secondary-channel: #B8CE93;\n    --noise5-primary-channel: #87A74F;\n    --noise5-secondary-note: #ABC183;\n    --noise5-primary-note: #68784C;\n    --mod1-secondary-channel: #339955;\n    --mod1-primary-channel: #77dd55;\n    --mod1-primary-note: #2ad84a;\n    --mod2-primary-note: #ba124a;\n    --mod3-primary-note: #7a1caa;\n    --mod4-primary-note: #a86810;\n    --mod-label-primary: #dddddd;\n    --mod-label-secondary-text: #777;\n    --disabled-note-primary: #666;\n    --disabled-note-secondary: #aaa;\n}\n\n.beepboxEditor button,\n.beepboxEditor select {\n    box-shadow: inset 0 0 0 1px var(--secondary-text);\n}\n\n.select2-selection__rendered {\n    box-shadow: inset 0 0 0 1px var(--secondary-text);\n}\n\n.promptContainerBG::before {\n    box-shadow: inset 0 0 2000px rgba(255, 255, 255, .5);\n}", ":root {\n    --loop-accent: #2F1C40;\n    --link-accent: #543873;\n    --ui-widget-background: #2F1C40;\n    --ui-widget-focus: #543873;\n    --pitch-background: #2F1C40;\n    --tonic: #42286D;\n    --fifth-note: #37416B;\n    --white-piano-key: #156CB6;\n    --black-piano-key: #130D14;\n    --pitch-channel-limit: 6;\n    --noise-channel-limit: 3;\n    --pitch1-secondary-channel: #156C99;\n    --pitch1-primary-channel: #00CFDF;\n    --pitch1-secondary-note: #0080A8;\n    --pitch1-primary-note: #009FC6;\n    --pitch2-secondary-channel: #AD923A;\n    --pitch2-primary-channel: #FFD552;\n    --pitch2-secondary-note: #C49736;\n    --pitch2-primary-note: #EFC742;\n    --pitch3-secondary-channel: #7A401E;\n    --pitch3-primary-channel: #C14E30;\n    --pitch3-secondary-note: #89381B;\n    --pitch3-primary-note: #E15427;\n    --pitch4-secondary-channel: #0B6030;\n    --pitch4-primary-channel: #00915C;\n    --pitch4-secondary-note: #004337;\n    --pitch4-primary-note: #00915E;\n    --pitch5-secondary-channel: #543873;\n    --pitch5-primary-channel: #695B95;\n    --pitch5-secondary-note: #8188BE;\n    --pitch5-primary-note: #848ED8;\n    --pitch6-secondary-channel: #585882;\n    --pitch6-primary-channel: #5A72DD;\n    --pitch7-secondary-channel: #7D7C2E;\n    --pitch7-primary-channel: #B0C952;\n    --pitch7-secondary-note: #7D7C2E;\n    --pitch7-primary-note: #B0C952;\n    --pitch8-secondary-channel: #7F426A;\n    --pitch8-primary-channel: #B75297;\n    --pitch8-secondary-note: #7F426A;\n    --pitch8-primary-note: #B75297;\n    --pitch9-secondary-channel: #2A6B65;\n    --pitch9-primary-channel: #3BA590;\n    --pitch9-secondary-note: #2A6B65;\n    --pitch9-primary-note: #3BA590;\n    --pitch10-secondary-channel: #713EA0;\n    --pitch10-primary-channel: #925EC9;\n    --pitch10-secondary-note: #713EA0;\n    --pitch10-primary-note: #925EC9;\n    --noise1-secondary-channel: #6C6C8E;\n    --noise1-primary-channel: #8A7F96;\n    --noise1-secondary-note: #A1A3B7;\n    --noise1-primary-note: #DDBADD;\n    --noise2-secondary-channel: #865E40;\n    --noise2-secondary-note: #C7B47A;\n    --noise2-primary-note: #CFC587;\n    --noise3-secondary-channel: #7E7068;\n    --noise3-primary-channel: #B19998;\n    --noise3-secondary-note: #BAA6BC;\n    --noise3-primary-note: #EDDCEC;\n    --mod1-secondary-channel: #156C99;\n    --mod1-primary-channel: #00CFDF;\n    --mod1-secondary-note: #0080A8;\n    --mod1-primary-note: #009FC6;\n    --mod2-secondary-channel: #AD923A;\n    --mod2-primary-channel: #FFD552;\n    --mod2-secondary-note: #C49736;\n    --mod2-primary-note: #EFC742;\n    --mod3-secondary-channel: #7A401E;\n    --mod3-primary-channel: #C14E30;\n    --mod3-secondary-note: #89381B;\n    --mod3-primary-note: #E15427;\n    --mod4-secondary-channel: #0B6030;\n    --mod4-primary-channel: #00915C;\n    --mod4-secondary-note: #004337;\n    --mod4-primary-note: #00915E;\n}", ":root {\n    --page-margin: #000000;\n    --editor-background: #000000;\n    --playhead: rgba(255, 255, 255, 0.9);\n    --secondary-text: #93B6AD;\n    --text-selection: rgba(47, 255, 250, 0.99);\n    --box-selection-fill: #03B068;\n    --loop-accent: #FF0061;\n    --link-accent: #FFC800;\n    --ui-widget-background: #38554E;\n    --ui-widget-focus: #2A7E69;\n    --pitch-background: #281F23;\n    --tonic: #004634;\n    --fifth-note: #463400;\n    --white-piano-key: #edc;\n    --black-piano-key: #456;\n    --use-color-formula: true;\n    --track-editor-bg-pitch: #333333;\n    --track-editor-bg-pitch-dim: #000000;\n    --track-editor-bg-noise: #463400;\n    --track-editor-bg-noise-dim: #000000;\n    --track-editor-bg-mod: #004634;\n    --track-editor-bg-mod-dim: #000000;\n    --multiplicative-mod-slider: #FFC800;\n    --overwriting-mod-slider: #00ffc0;\n    --indicator-primary: #00ffc0;\n    --indicator-secondary: #333333;\n    --select2-opt-group: #2B2B2B;\n    --input-box-outline: #69BFC6;\n    --mute-button-normal: #00ffc0;\n    --mute-button-mod: #FFC800;\n    --mod-label-primary: #38554E;\n    --mod-label-secondary-text: rgb(0, 43, 45);\n    --mod-label-primary-text: white;\n    --pitch-secondary-channel-hue: 0;\n    --pitch-secondary-channel-hue-scale: 6.1;\n    --pitch-secondary-channel-sat: 83.3;\n    --pitch-secondary-channel-sat-scale: 0.1;\n    --pitch-secondary-channel-lum: 40;\n    --pitch-secondary-channel-lum-scale: 0.05;\n    --pitch-primary-channel-hue: 0;\n    --pitch-primary-channel-hue-scale: 6.1;\n    --pitch-primary-channel-sat: 100;\n    --pitch-primary-channel-sat-scale: 0.1;\n    --pitch-primary-channel-lum: 67.5;\n    --pitch-primary-channel-lum-scale: 0.05;\n    --pitch-secondary-note-hue: 0;\n    --pitch-secondary-note-hue-scale: 6.1;\n    --pitch-secondary-note-sat: 93.9;\n    --pitch-secondary-note-sat-scale: 0.1;\n    --pitch-secondary-note-lum: 25;\n    --pitch-secondary-note-lum-scale: 0.05;\n    --pitch-primary-note-hue: 0;\n    --pitch-primary-note-hue-scale: 6.1;\n    --pitch-primary-note-sat: 100;\n    --pitch-primary-note-sat-scale: 0.05;\n    --pitch-primary-note-lum: 85.6;\n    --pitch-primary-note-lum-scale: 0.025;\n    --noise-secondary-channel-hue: 0;\n    --noise-secondary-channel-hue-scale: 2;\n    --noise-secondary-channel-sat: 25;\n    --noise-secondary-channel-sat-scale: 0;\n    --noise-secondary-channel-lum: 42;\n    --noise-secondary-channel-lum-scale: 0;\n    --noise-primary-channel-hue: 0;\n    --noise-primary-channel-hue-scale: 2;\n    --noise-primary-channel-sat: 33;\n    --noise-primary-channel-sat-scale: 0;\n    --noise-primary-channel-lum: 63.5;\n    --noise-primary-channel-lum-scale: 0;\n    --noise-secondary-note-hue: 0;\n    --noise-secondary-note-hue-scale: 2;\n    --noise-secondary-note-sat: 33.5;\n    --noise-secondary-note-sat-scale: 0;\n    --noise-secondary-note-lum: 55;\n    --noise-secondary-note-lum-scale: 0;\n    --noise-primary-note-hue: 0;\n    --noise-primary-note-hue-scale: 2;\n    --noise-primary-note-sat: 46.5;\n    --noise-primary-note-sat-scale: 0;\n    --noise-primary-note-lum: 74;\n    --noise-primary-note-lum-scale: 0;\n    --mod-secondary-channel-hue: 192;\n    --mod-secondary-channel-hue-scale: 1.5;\n    --mod-secondary-channel-sat: 88;\n    --mod-secondary-channel-sat-scale: 0;\n    --mod-secondary-channel-lum: 50;\n    --mod-secondary-channel-lum-scale: 0;\n    --mod-primary-channel-hue: 192;\n    --mod-primary-channel-hue-scale: 1.5;\n    --mod-primary-channel-sat: 96;\n    --mod-primary-channel-sat-scale: 0;\n    --mod-primary-channel-lum: 80;\n    --mod-primary-channel-lum-scale: 0;\n    --mod-secondary-note-hue: 192;\n    --mod-secondary-note-hue-scale: 1.5;\n    --mod-secondary-note-sat: 92;\n    --mod-secondary-note-sat-scale: 0;\n    --mod-secondary-note-lum: 45;\n    --mod-secondary-note-lum-scale: 0;\n    --mod-primary-note-hue: 192;\n    --mod-primary-note-hue-scale: 1.5;\n    --mod-primary-note-sat: 96;\n    --mod-primary-note-sat-scale: 0;\n    --mod-primary-note-lum: 85;\n    --mod-primary-note-lum-scale: 0;\n}", ":root {\n    --page-margin: #010a1e;\n    --editor-background: #010a1e;\n    --hover-preview: #dfe9fe;\n    --playhead: #e7f5f6;\n    --primary-text: #f0fdff;\n    --secondary-text: #c4c7d7;\n    --inverted-text: #0f0623;\n    --text-selection: #3f0ab4;\n    --box-selection-fill: #32afb3;\n    --loop-accent: #1719ff;\n    --link-accent: #83a6ed;\n    --ui-widget-background: #222856;\n    --ui-widget-focus: #21417c;\n    --pitch-background: #10264a;\n    --tonic: #0797ce;\n    --fifth-note: #3e2fb5;\n    --white-piano-key: #ebf3f4;\n    --black-piano-key: #253353;\n    --white-piano-key-text: black;\n    --black-piano-key-text: white;\n    --oscilloscope-line-L: #72dcfc;\n    --oscilloscope-line-R: #304eff;\n    --mod-title: #1b2fff;\n    --use-color-formula: true;\n    --track-editor-bg-pitch: #183b65;\n    --track-editor-bg-pitch-dim: #1f2c3d;\n    --track-editor-bg-noise: #2e196d;\n    --track-editor-bg-noise-dim: #212038;\n    --track-editor-bg-mod: #066433;\n    --track-editor-bg-mod-dim: #152b1f;\n    --multiplicative-mod-slider: #1242a4;\n    --overwriting-mod-slider: #2218db;\n    --indicator-primary: #1698d3;\n    --indicator-secondary: #1b478e;\n    --select2-opt-group: #312f6d;\n    --input-box-outline: #788b96;\n    --mute-button-normal: #1d34f2;\n    --mute-button-mod: #06bad6;\n    --mod-label-primary: #14383f;\n    --mod-label-secondary-text: #1d7080;\n    --mod-label-primary-text: #b7e9f2;\n    --pitch-secondary-channel-hue: 190;\n    --pitch-secondary-channel-hue-scale: 2.5;\n    --pitch-secondary-channel-sat: 80;\n    --pitch-secondary-channel-sat-scale: 0.1;\n    --pitch-secondary-channel-lum: 50;\n    --pitch-secondary-channel-lum-scale: 0.05;\n    --pitch-primary-channel-hue: 190;\n    --pitch-primary-channel-hue-scale: 2.5;\n    --pitch-primary-channel-sat: 100;\n    --pitch-primary-channel-sat-scale: 0.1;\n    --pitch-primary-channel-lum: 76.5;\n    --pitch-primary-channel-lum-scale: 0.05;\n    --pitch-secondary-note-hue: 190;\n    --pitch-secondary-note-hue-scale: 2.5;\n    --pitch-secondary-note-sat: 90;\n    --pitch-secondary-note-sat-scale: 0.1;\n    --pitch-secondary-note-lum: 30;\n    --pitch-secondary-note-lum-scale: 0.05;\n    --pitch-primary-note-hue: 190;\n    --pitch-primary-note-hue-scale: 2.5;\n    --pitch-primary-note-sat: 100;\n    --pitch-primary-note-sat-scale: 0.05;\n    --pitch-primary-note-lum: 85;\n    --pitch-primary-note-lum-scale: 0.025;\n    --noise-secondary-channel-hue: 200;\n    --noise-secondary-channel-hue-scale: 2.5;\n    --noise-secondary-channel-sat: 25;\n    --noise-secondary-channel-sat-scale: 0;\n    --noise-secondary-channel-lum: 42;\n    --noise-secondary-channel-lum-scale: 0;\n    --noise-primary-channel-hue: 200;\n    --noise-primary-channel-hue-scale: 2.5;\n    --noise-primary-channel-sat: 33;\n    --noise-primary-channel-sat-scale: 0;\n    --noise-primary-channel-lum: 63.5;\n    --noise-primary-channel-lum-scale: 0;\n    --noise-secondary-note-hue: 200;\n    --noise-secondary-note-hue-scale: 2.5;\n    --noise-secondary-note-sat: 33.5;\n    --noise-secondary-note-sat-scale: 0;\n    --noise-secondary-note-lum: 55;\n    --noise-secondary-note-lum-scale: 0;\n    --noise-primary-note-hue: 200;\n    --noise-primary-note-hue-scale: 2.5;\n    --noise-primary-note-sat: 46.5;\n    --noise-primary-note-sat-scale: 0;\n    --noise-primary-note-lum: 74;\n    --noise-primary-note-lum-scale: 0;\n    --mod-secondary-channel-hue: 140;\n    --mod-secondary-channel-hue-scale: 1.5;\n    --mod-secondary-channel-sat: 90;\n    --mod-secondary-channel-sat-scale: 0;\n    --mod-secondary-channel-lum: 55;\n    --mod-secondary-channel-lum-scale: 0;\n    --mod-primary-channel-hue: 140;\n    --mod-primary-channel-hue-scale: 1.5;\n    --mod-primary-channel-sat: 100;\n    --mod-primary-channel-sat-scale: 0;\n    --mod-primary-channel-lum: 85;\n    --mod-primary-channel-lum-scale: 0;\n    --mod-secondary-note-hue: 140;\n    --mod-secondary-note-hue-scale: 1.5;\n    --mod-secondary-note-sat: 95;\n    --mod-secondary-note-sat-scale: 0;\n    --mod-secondary-note-lum: 50;\n    --mod-secondary-note-lum-scale: 0;\n    --mod-primary-note-hue: 140;\n    --mod-primary-note-hue-scale: 1.5;\n    --mod-primary-note-sat: 100;\n    --mod-primary-note-sat-scale: 0;\n    --mod-primary-note-lum: 90;\n    --mod-primary-note-lum-scale: 0;\n    --disabled-note-primary: #53527b;\n    --disabled-note-secondary: #1c1b30;\n}", ":root {\n    --page-margin: #000;\n    --editor-background: #000;\n    --hover-preview: #757575;\n    --playhead: #fff;\n    --primary-text: #fff;\n    --secondary-text: #acacac;\n    --inverted-text: #290505;\n    --text-selection: rgba(155, 155, 155, 0.99);\n    --box-selection-fill: #79797970;\n    --loop-accent: #646464;\n    --link-accent: #707070;\n    --ui-widget-background: #353535;\n    --ui-widget-focus: #464646;\n    --pitch-background: #222121;\n    --tonic: #555955;\n    --fifth-note: #1a1818;\n    --white-piano-key: #a89e9e;\n    --black-piano-key: #2d2424;\n    --black-piano-key-text: #ffffff;\n    --use-color-formula: true;\n    --track-editor-bg-pitch: #373737;\n    --track-editor-bg-pitch-dim: #131313;\n    --track-editor-bg-noise: #484848;\n    --track-editor-bg-noise-dim: #131313;\n    --track-editor-bg-mod: #373737;\n    --track-editor-bg-mod-dim: #131313;\n    --multiplicative-mod-slider: #555;\n    --overwriting-mod-slider: #464545;\n    --indicator-primary: #e0e0e0;\n    --indicator-secondary: #404040;\n    --select2-opt-group: #3c3b3b;\n    --input-box-outline: #757575;\n    --mute-button-normal: #8e8d8d;\n    --mute-button-mod: #ddd;\n    --mod-label-primary: #262526;\n    --mod-label-secondary-text: rgb(227, 222, 225);\n    --mod-label-primary-text: #b9b9b9;\n    --pitch-secondary-channel-hue: 240;\n    --pitch-secondary-channel-hue-scale: 228;\n    --pitch-secondary-channel-sat: 73.3;\n    --pitch-secondary-channel-sat-scale: 0.1;\n    --pitch-secondary-channel-lum: 25;\n    --pitch-secondary-channel-lum-scale: 0.05;\n    --pitch-primary-channel-hue: 240;\n    --pitch-primary-channel-hue-scale: 228;\n    --pitch-primary-channel-sat: 80;\n    --pitch-primary-channel-sat-scale: 0.1;\n    --pitch-primary-channel-lum: 60.5;\n    --pitch-primary-channel-lum-scale: 0.05;\n    --pitch-secondary-note-hue: 240;\n    --pitch-secondary-note-hue-scale: 228;\n    --pitch-secondary-note-sat: 73.9;\n    --pitch-secondary-note-sat-scale: 0.1;\n    --pitch-secondary-note-lum: 32;\n    --pitch-secondary-note-lum-scale: 0.05;\n    --pitch-primary-note-hue: 240;\n    --pitch-primary-note-hue-scale: 228;\n    --pitch-primary-note-sat: 90;\n    --pitch-primary-note-sat-scale: 0.05;\n    --pitch-primary-note-lum: 80.6;\n    --pitch-primary-note-lum-scale: 0.025;\n    --noise-secondary-channel-hue: 160;\n    --noise-secondary-channel-hue-scale: 2;\n    --noise-secondary-channel-sat: 25;\n    --noise-secondary-channel-sat-scale: 0;\n    --noise-secondary-channel-lum: 42;\n    --noise-secondary-channel-lum-scale: 0;\n    --noise-primary-channel-hue: 160;\n    --noise-primary-channel-hue-scale: 2;\n    --noise-primary-channel-sat: 33;\n    --noise-primary-channel-sat-scale: 0;\n    --noise-primary-channel-lum: 63.5;\n    --noise-primary-channel-lum-scale: 0;\n    --noise-secondary-note-hue: 160;\n    --noise-secondary-note-hue-scale: 2;\n    --noise-secondary-note-sat: 33.5;\n    --noise-secondary-note-sat-scale: 0;\n    --noise-secondary-note-lum: 55;\n    --noise-secondary-note-lum-scale: 0;\n    --noise-primary-note-hue: 160;\n    --noise-primary-note-hue-scale: 2;\n    --noise-primary-note-sat: 46.5;\n    --noise-primary-note-sat-scale: 0;\n    --noise-primary-note-lum: 74;\n    --noise-primary-note-lum-scale: 0;\n    --mod-secondary-channel-hue: 62;\n    --mod-secondary-channel-hue-scale: 1.5;\n    --mod-secondary-channel-sat: 88;\n    --mod-secondary-channel-sat-scale: 0;\n    --mod-secondary-channel-lum: 30;\n    --mod-secondary-channel-lum-scale: 0;\n    --mod-primary-channel-hue: 62;\n    --mod-primary-channel-hue-scale: 1.5;\n    --mod-primary-channel-sat: 96;\n    --mod-primary-channel-sat-scale: 0;\n    --mod-primary-channel-lum: 80;\n    --mod-primary-channel-lum-scale: 0;\n    --mod-secondary-note-hue: 62;\n    --mod-secondary-note-hue-scale: 1.5;\n    --mod-secondary-note-sat: 92;\n    --mod-secondary-note-sat-scale: 0;\n    --mod-secondary-note-lum: 34;\n    --mod-secondary-note-lum-scale: 0;\n    --mod-primary-note-hue: 62;\n    --mod-primary-note-hue-scale: 1.5;\n    --mod-primary-note-sat: 96;\n    --mod-primary-note-sat-scale: 0;\n    --mod-primary-note-lum: 75;\n    --mod-primary-note-lum-scale: 0;\n    --disabled-note-primary: #66a;\n    --disabled-note-secondary: #447;\n}", ":root {\n    --loop-accent: #9900cc;\n    --pitch-channel-limit: 6;\n    --noise-channel-limit: 4;\n    --pitch1-secondary-note: #0099a1;\n    --pitch1-primary-note: #25f3ff;\n    --pitch2-secondary-channel: #439143;\n    --pitch2-primary-channel: #44ff44;\n    --pitch2-secondary-note: #439143;\n    --pitch2-primary-note: #44ff44;\n    --pitch3-secondary-channel: #a1a100;\n    --pitch3-primary-channel: #ffff25;\n    --pitch3-secondary-note: #a1a100;\n    --pitch3-primary-note: #ffff25;\n    --pitch4-secondary-channel: #c75000;\n    --pitch4-primary-channel: #ff9752;\n    --pitch4-secondary-note: #c75000;\n    --pitch4-primary-note: #ff9752;\n    --pitch5-secondary-note: #d020d0;\n    --pitch5-primary-note: #ff90ff;\n    --pitch6-secondary-channel: #552377;\n    --pitch6-primary-channel: #9f31ea;\n    --pitch6-secondary-note: #552377;\n    --pitch6-primary-note: #9f31ea;\n    --pitch7-secondary-channel: #221b89;\n    --pitch7-primary-channel: #2b6aff;\n    --pitch7-secondary-note: #221b89;\n    --pitch7-primary-note: #2b6aff;\n    --pitch8-secondary-channel: #00995f;\n    --pitch8-primary-channel: #00ff9f;\n    --pitch8-secondary-note: #00995f;\n    --pitch8-primary-note: #00ff9f;\n    --pitch9-secondary-channel: #d6b03e;\n    --pitch9-primary-channel: #ffbf00;\n    --pitch9-secondary-note: #d6b03e;\n    --pitch9-primary-note: #ffbf00;\n    --pitch10-secondary-channel: #b25915;\n    --pitch10-primary-channel: #d85d00;\n    --pitch10-secondary-note: #b25915;\n    --pitch10-primary-note: #d85d00;\n    --noise1-secondary-channel: #991010;\n    --noise1-primary-channel: #ff1616;\n    --noise1-secondary-note: #991010;\n    --noise1-primary-note: #ff1616;\n    --noise2-secondary-channel: #aaaaaa;\n    --noise2-primary-channel: #ffffff;\n    --noise2-secondary-note: #aaaaaa;\n    --noise2-primary-note: #ffffff;\n    --noise3-secondary-channel: #5869BD;\n    --noise3-primary-channel: #768dfc;\n    --noise3-secondary-note: #5869BD;\n    --noise3-primary-note: #768dfc;\n    --noise4-secondary-channel: #7c9b42;\n    --noise4-primary-channel: #a5ff00;\n    --noise4-secondary-note: #7c9b42;\n    --noise4-primary-note: #a5ff00;\n    --noise5-secondary-channel: #7c9b42;\n    --mod1-secondary-channel: #0099a1;\n    --mod1-primary-channel: #25f3ff;\n    --mod1-secondary-note: #0099a1;\n    --mod1-primary-note: #25f3ff;\n    --mod2-secondary-channel: #439143;\n    --mod2-primary-channel: #44ff44;\n    --mod2-secondary-note: #439143;\n    --mod2-primary-note: #44ff44;\n    --mod3-secondary-channel: #a1a100;\n    --mod3-primary-channel: #ffff25;\n    --mod3-secondary-note: #a1a100;\n    --mod3-primary-note: #ffff25;\n    --mod4-secondary-channel: #c75000;\n    --mod4-primary-channel: #ff9752;\n    --mod4-secondary-note: #c75000;\n    --mod4-primary-note: #ff9752;\n    --text-disabled-icon: \u2717;\n}", ":root {\n    --page-margin: #020514;\n    --editor-background: #020514;\n    --primary-text: #D4DCE9;\n    --secondary-text: #3E87DA;\n    --text-selection: #03599bd9;\n    --box-selection-fill: hsl(206deg 66% 41% / 85%);\n    --loop-accent: #639BD6;\n    --link-accent: #A8C6E8;\n    --ui-widget-background: #1e2940;\n    --ui-widget-focus: #324b81;\n    --pitch-background: #223849;\n    --tonic: #33536c;\n    --fifth-note: hsl(206deg 36% 16%);\n    --white-piano-key: #c1bfe9;\n    --black-piano-key: #454354;\n    --track-editor-bg-pitch: #25568d80;\n    --track-editor-bg-pitch-dim: #10253c80;\n    --track-editor-bg-noise: #25568d80;\n    --track-editor-bg-noise-dim: #10253c80;\n    --track-editor-bg-mod: #25568d80;\n    --track-editor-bg-mod-dim: #10253c80;\n    --multiplicative-mod-slider: #0476cd;\n    --overwriting-mod-slider: #035899;\n    --indicator-primary: #57a1f4;\n    --indicator-secondary: #2e5684;\n    --select2-opt-group: #24355c;\n    --input-box-outline: #141e34;\n    --mute-button-normal: #6ebffc;\n    --mute-button-mod: #0a92fa;\n    --pitch1-secondary-channel: #47425c;\n    --pitch1-primary-channel: #918bac;\n    --pitch1-secondary-note: #6b6489;\n    --pitch1-primary-note: #a8a3bf;\n    --pitch2-secondary-channel: #626493;\n    --pitch2-primary-channel: #bdbed3;\n    --pitch2-secondary-note: #626493;\n    --pitch2-primary-note: #bdbed3;\n    --pitch3-secondary-channel: #6e89b4;\n    --pitch3-primary-channel: #d4dce9;\n    --pitch3-secondary-note: #6e89b4;\n    --pitch3-primary-note: #d4dce9;\n    --pitch4-secondary-channel: #4c77a9;\n    --pitch4-primary-channel: #a8c6e8;\n    --pitch4-secondary-note: #4c77a9;\n    --pitch4-primary-note: #a8c6e8;\n    --pitch5-secondary-channel: #314e6d;\n    --pitch5-primary-channel: #639bd6;\n    --pitch5-secondary-note: #46698f;\n    --pitch5-primary-note: #639bd6;\n    --pitch6-secondary-channel: #143d6b;\n    --pitch6-primary-channel: #3e87da;\n    --pitch6-secondary-note: #143d6b;\n    --pitch6-primary-note: #3e87da;\n    --pitch7-secondary-channel: #314e6d;\n    --pitch7-primary-channel: #639bd6;\n    --pitch7-secondary-note: #314e6d;\n    --pitch7-primary-note: #639bd6;\n    --pitch8-secondary-channel: #4c77a9;\n    --pitch8-primary-channel: #a8c6e8;\n    --pitch8-secondary-note: #4c77a9;\n    --pitch8-primary-note: #a8c6e8;\n    --pitch9-secondary-channel: #6e89b4;\n    --pitch9-primary-channel: #d4dce9;\n    --pitch9-secondary-note: #6e89b4;\n    --pitch9-primary-note: #d4dce9;\n    --pitch10-secondary-channel: #626493;\n    --pitch10-primary-channel: #bdbed3;\n    --pitch10-secondary-note: #626493;\n    --pitch10-primary-note: #bdbed3;\n    --noise1-secondary-channel: #4b4a55;\n    --noise1-primary-channel: #9795a3;\n    --noise1-secondary-note: #4b4a55;\n    --noise1-primary-note: #9795a3;\n    --noise2-secondary-channel: #858e9d;\n    --noise2-primary-channel: #d7dce5;\n    --noise2-secondary-note: #858e9d;\n    --noise2-primary-note: #d7dce5;\n    --noise3-secondary-channel: #394e65;\n    --noise3-primary-channel: #809bb7;\n    --noise3-secondary-note: #394e65;\n    --noise3-primary-note: #809bb7;\n    --noise4-secondary-channel: #37577b;\n    --noise4-primary-channel: #6189b8;\n    --noise4-secondary-note: #37577b;\n    --noise4-primary-note: #6189b8;\n    --noise5-secondary-channel: #223849;\n    --noise5-primary-channel: #5588af;\n    --noise5-secondary-note: #223849;\n    --noise5-primary-note: #5588af;\n    --mod1-secondary-channel: #3e336c;\n    --mod1-primary-channel: #6d60a4;\n    --mod1-secondary-note: #3e336c;\n    --mod1-primary-note: #6d60a4;\n    --mod2-secondary-channel: #716791;\n    --mod2-primary-channel: #bdbed3;\n    --mod2-secondary-note: #716791;\n    --mod2-primary-note: #bdbed3;\n    --mod3-secondary-channel: #6b91bd;\n    --mod3-primary-channel: #4b8fdd;\n    --mod3-secondary-note: #597ca7;\n    --mod3-primary-note: #7eade3;\n    --mod4-secondary-channel: #14559f;\n    --mod4-primary-channel: #3386e6;\n    --mod4-secondary-note: #14559f;\n    --mod4-primary-note: #3386e6;\n    --mod-label-primary: #1e2940;\n    --mod-label-secondary-text: #748ebe;\n    --mod-label-primary-text: white;\n    --disabled-note-primary: #828282;\n    --disabled-note-secondary: #4f4f4f;\n}", ":root {\n    --page-margin: #120807;\n    --editor-background: #120807;\n    --hover-preview: #e79a82;\n    --playhead: #e79a82;\n    --primary-text: #decdbf;\n    --secondary-text: #fa99bb;\n    --text-selection: #990036;\n    --loop-accent: #f6377a;\n    --link-accent: #f6377a;\n    --ui-widget-background: #24160f;\n    --ui-widget-focus: #362217;\n    --pitch-background: #1e1106;\n    --tonic: #382414;\n    --fifth-note: #41240c;\n    --white-piano-key: #e1c5b7;\n    --black-piano-key: #482c1e;\n    --white-piano-key-text: black;\n    --black-piano-key-text: white;\n    --track-editor-bg-pitch: #4d2a19;\n    --track-editor-bg-pitch-dim: #27150c;\n    --track-editor-bg-noise: #4d2a19;\n    --track-editor-bg-noise-dim: #27150c;\n    --track-editor-bg-mod: #4d2a19;\n    --track-editor-bg-mod-dim: #27150c;\n    --multiplicative-mod-slider: #decdbf;\n    --overwriting-mod-slider: #decdbf;\n    --indicator-primary: #decdbf;\n    --indicator-secondary: #362217;\n    --select2-opt-group: #24160f;\n    --input-box-outline: #24160f;\n    --mute-button-normal: #ff66a1;\n    --mute-button-mod: #e61968;\n    --pitch1-secondary-channel: #680029;\n    --pitch1-primary-channel: #cc0052;\n    --pitch1-secondary-note: #660029;\n    --pitch1-primary-note: #cc0052;\n    --pitch2-secondary-channel: #7e1b43;\n    --pitch2-primary-channel: #d32e71;\n    --pitch2-secondary-note: #7e1b43;\n    --pitch2-primary-note: #d32e71;\n    --pitch3-secondary-channel: #aa275e;\n    --pitch3-primary-channel: #da5d91;\n    --pitch3-secondary-note: #aa275e;\n    --pitch3-primary-note: #da5d91;\n    --pitch4-secondary-channel: #cc3878;\n    --pitch4-primary-channel: #e18bb0;\n    --pitch4-secondary-note: #cc3878;\n    --pitch4-primary-note: #e18bb0;\n    --pitch5-secondary-channel: #d06c9b;\n    --pitch5-primary-channel: #e9bad0;\n    --pitch5-secondary-note: #d06c9b;\n    --pitch5-primary-note: #e9bad0;\n    --pitch6-secondary-channel: #c9acc5;\n    --pitch6-primary-channel: #f0e8ef;\n    --pitch6-secondary-note: #c9acc5;\n    --pitch6-primary-note: #f0e8ef;\n    --pitch7-secondary-channel: #d06c9b;\n    --pitch7-primary-channel: #e9bad0;\n    --pitch7-secondary-note: #d06c9b;\n    --pitch7-primary-note: #e9bad0;\n    --pitch8-secondary-channel: #cc3878;\n    --pitch8-primary-channel: #e18bb0;\n    --pitch8-secondary-note: #cc3878;\n    --pitch8-primary-note: #e18bb0;\n    --pitch9-secondary-channel: #aa275e;\n    --pitch9-primary-channel: #da5d91;\n    --pitch9-secondary-note: #aa275e;\n    --pitch9-primary-note: #da5d91;\n    --pitch10-secondary-channel: #7e1b43;\n    --pitch10-primary-channel: #d32e71;\n    --pitch10-secondary-note: #7e1b43;\n    --pitch10-primary-note: #d32e71;\n    --noise1-secondary-channel: #683a37;\n    --noise1-primary-channel: #A85F5A;\n    --noise1-secondary-note: #683a37;\n    --noise1-primary-note: #A85F5A;\n    --noise2-secondary-channel: #7c4a41;\n    --noise2-primary-channel: #B47A70;\n    --noise2-secondary-note: #7c4a41;\n    --noise2-primary-note: #B47A70;\n    --noise3-secondary-channel: #935f4d;\n    --noise3-primary-channel: #c09587;\n    --noise3-secondary-note: #935f4d;\n    --noise3-primary-note: #C09587;\n    --noise4-secondary-channel: #aa795a;\n    --noise4-primary-channel: #cdb09d;\n    --noise4-secondary-note: #aa795a;\n    --noise4-primary-note: #CDAF9D;\n    --noise5-secondary-channel: #bb987c;\n    --noise5-primary-channel: #decdbf;\n    --noise5-secondary-note: #bb987c;\n    --noise5-primary-note: #decdbf;\n    --mod1-secondary-channel: #6ca784;\n    --mod1-primary-channel: #accdb9;\n    --mod1-secondary-note: #6ca784;\n    --mod1-primary-note: #accdb9;\n    --mod2-secondary-channel: #7daa9f;\n    --mod2-primary-channel: #bbd3cd;\n    --mod2-secondary-note: #7daa9f;\n    --mod2-primary-note: #bbd3cd;\n    --mod3-secondary-channel: #70a3a9;\n    --mod3-primary-channel: #afcccf;\n    --mod3-secondary-note: #70a3a9;\n    --mod3-primary-note: #afcccf;\n    --mod4-secondary-channel: #5698b8;\n    --mod4-primary-channel: #9ec3d6;\n    --mod4-secondary-note: #5698b8;\n    --mod4-primary-note: #9ec3d6;\n    --mod-label-primary: #24160f;\n    --mod-label-secondary-text: #E5AFC2;\n    --mod-label-primary-text: #decdbf;\n    --disabled-note-primary: #bababa;\n    --disabled-note-secondary: #878787;\n}", ":root {\n    --page-margin: #040410;\n    --editor-background: #150e1f;\n    --playhead: rgba(255, 255, 255, 0.9);\n    --secondary-text: #8C849A;\n    --text-selection: rgba(141, 79, 201, 0.99);\n    --box-selection-fill: #311E44;\n    --loop-accent: #CC688C;\n    --link-accent: #817DC9;\n    --ui-widget-background: #44394F;\n    --ui-widget-focus: #7A6386;\n    --pitch-background: #393e4f40;\n    --tonic: #7D5C9EC0;\n    --fifth-note: #ab77bd50;\n    --white-piano-key: #EEEEEE;\n    --black-piano-key: #5F5566;\n    --use-color-formula: true;\n    --track-editor-bg-pitch: #46374C;\n    --track-editor-bg-pitch-dim: #1F1C2850;\n    --track-editor-bg-noise: #3D353B;\n    --track-editor-bg-noise-dim: #16131550;\n    --track-editor-bg-mod: #623F4C;\n    --track-editor-bg-mod-dim: #361A2450;\n    --multiplicative-mod-slider: #9F6E6A;\n    --overwriting-mod-slider: #A664B5;\n    --indicator-primary: #CC6B8E;\n    --indicator-secondary: #44394F;\n    --select2-opt-group: #6A576F;\n    --input-box-outline: #222;\n    --mute-button-normal: #BF91DC;\n    --mute-button-mod: #DC8C9A;\n    --mod-label-primary: #3A2840;\n    --mod-label-secondary-text: #62485E;\n    --mod-label-primary-text: white;\n    --pitch-secondary-channel-hue: -96;\n    --pitch-secondary-channel-hue-scale: 4.2;\n    --pitch-secondary-channel-sat: 50.3;\n    --pitch-secondary-channel-sat-scale: 0.1;\n    --pitch-secondary-channel-lum: 40;\n    --pitch-secondary-channel-lum-scale: 0.05;\n    --pitch-primary-channel-hue: -96;\n    --pitch-primary-channel-hue-scale: 4.2;\n    --pitch-primary-channel-sat: 70;\n    --pitch-primary-channel-sat-scale: 0.1;\n    --pitch-primary-channel-lum: 67.5;\n    --pitch-primary-channel-lum-scale: 0.05;\n    --pitch-secondary-note-hue: -96;\n    --pitch-secondary-note-hue-scale: 4.2;\n    --pitch-secondary-note-sat: 70.9;\n    --pitch-secondary-note-sat-scale: 0.1;\n    --pitch-secondary-note-lum: 25;\n    --pitch-secondary-note-lum-scale: 0.05;\n    --pitch-primary-note-hue: -96;\n    --pitch-primary-note-hue-scale: 4.2;\n    --pitch-primary-note-sat: 90;\n    --pitch-primary-note-sat-scale: 0.05;\n    --pitch-primary-note-lum: 85.6;\n    --pitch-primary-note-lum-scale: 0.025;\n    --noise-secondary-channel-hue: 16;\n    --noise-secondary-channel-hue-scale: -1.33;\n    --noise-secondary-channel-sat: 25;\n    --noise-secondary-channel-sat-scale: 0;\n    --noise-secondary-channel-lum: 42;\n    --noise-secondary-channel-lum-scale: 0;\n    --noise-primary-channel-hue: 16;\n    --noise-primary-channel-hue-scale: -1.33;\n    --noise-primary-channel-sat: 33;\n    --noise-primary-channel-sat-scale: 0;\n    --noise-primary-channel-lum: 63.5;\n    --noise-primary-channel-lum-scale: 0;\n    --noise-secondary-note-hue: 12;\n    --noise-secondary-note-hue-scale: -1.33;\n    --noise-secondary-note-sat: 33.5;\n    --noise-secondary-note-sat-scale: 0;\n    --noise-secondary-note-lum: 55;\n    --noise-secondary-note-lum-scale: 0;\n    --noise-primary-note-hue: 12;\n    --noise-primary-note-hue-scale: -1.33;\n    --noise-primary-note-sat: 46.5;\n    --noise-primary-note-sat-scale: 0;\n    --noise-primary-note-lum: 74;\n    --noise-primary-note-lum-scale: 0;\n    --mod-secondary-channel-hue: 12;\n    --mod-secondary-channel-hue-scale: -.75;\n    --mod-secondary-channel-sat: 50;\n    --mod-secondary-channel-sat-scale: 0;\n    --mod-secondary-channel-lum: 50;\n    --mod-secondary-channel-lum-scale: 0;\n    --mod-primary-channel-hue: 12;\n    --mod-primary-channel-hue-scale: -.75;\n    --mod-primary-channel-sat: 70;\n    --mod-primary-channel-sat-scale: 0;\n    --mod-primary-channel-lum: 80;\n    --mod-primary-channel-lum-scale: 0;\n    --mod-secondary-note-hue: 12;\n    --mod-secondary-note-hue-scale: -.75;\n    --mod-secondary-note-sat: 75;\n    --mod-secondary-note-sat-scale: 0;\n    --mod-secondary-note-lum: 45;\n    --mod-secondary-note-lum-scale: 0;\n    --mod-primary-note-hue: 12;\n    --mod-primary-note-hue-scale: -.75;\n    --mod-primary-note-sat: 85;\n    --mod-primary-note-sat-scale: 0;\n    --mod-primary-note-lum: 85;\n    --mod-primary-note-lum-scale: 0;\n    --disabled-note-primary: #aaa;\n}", ":root {\n    --page-margin: #000;\n    --editor-background: #060606;\n    --hover-preview: #fff;\n    --playhead: rgb(0, 242, 255);\n    --primary-text: #00fff5;\n    --secondary-text: #a82f2f;\n    --inverted-text: #000;\n    --text-selection: rgba(98, 46, 164, .99);\n    --box-selection-fill: #b74a4a;\n    --loop-accent: #7744FF;\n    --link-accent: #ff00e1;\n    --ui-widget-background: #484848;\n    --ui-widget-focus: #3e3e3e;\n    --pitch-background: #0a2d44;\n    --tonic: #9150ff;\n    --fifth-note: #900;\n    --white-piano-key: #353535;\n    --black-piano-key: #fff;\n    --white-piano-key-text: #fff;\n    --black-piano-key-text: #000;\n    --track-editor-bg-pitch: #424242;\n    --track-editor-bg-pitch-dim: #000;\n    --track-editor-bg-noise: #424242;\n    --track-editor-bg-noise-dim: #000;\n    --track-editor-bg-mod: #3c3c3c;\n    --track-editor-bg-mod-dim: #000;\n    --multiplicative-mod-slider: #fff;\n    --overwriting-mod-slider: #9d9d9d;\n    --indicator-primary: #f00;\n    --indicator-secondary: #919191;\n    --select2-opt-group: #5d576f;\n    --input-box-outline: #626262;\n    --mute-button-normal: #9a00ff;\n    --mute-button-mod: #00fff7;\n    --mod-label-primary: #2b2b2b;\n    --pitch-channel-limit: 4;\n    --noise-channel-limit: 2;\n\n    --pitch1-secondary-channel: #c13cbf;\n    --pitch1-primary-channel: #f75dff;\n    --pitch1-secondary-note: #b930a2;\n    --pitch1-primary-note: #fca5ff;\n    --pitch2-secondary-channel: #800000;\n    --pitch2-primary-channel: #f00;\n    --pitch2-secondary-note: #8c2121;\n    --pitch2-primary-note: #ff5252;\n    --pitch3-secondary-channel: #004bb3;\n    --pitch3-primary-channel: #1792ff;\n    --pitch3-secondary-note: #005cb3;\n    --pitch3-primary-note: #00ffe9;\n    --pitch4-secondary-channel: #a48800;\n    --pitch4-primary-channel: #fb0;\n    --pitch4-secondary-note: #9c4100;\n    --pitch4-primary-note: #ffd84e;\n    --noise1-secondary-channel: #868686;\n    --noise1-primary-channel: #fff;\n    --noise1-secondary-note: #868686;\n    --noise1-primary-note: #fff;\n    --noise2-secondary-channel: #805300;\n    --noise2-primary-channel: #ff8c00;\n    --noise2-secondary-note: #6a3500;\n    --noise2-primary-note: #a85400;\n    --mod1-secondary-channel: #6c0000;\n    --mod1-primary-channel: #ff3e3e;\n    --mod1-secondary-note: #6c0000;\n    --mod1-primary-note: #ff3e3e;\n    --mod2-secondary-channel: #d25a00;\n    --mod2-primary-channel: #fdff00;\n    --mod2-secondary-note: #d25a00;\n    --mod2-primary-note: #fdff00;\n    --mod3-secondary-channel: #046000;\n    --mod3-primary-channel: #23ff1b;\n    --mod3-secondary-note: #046000;\n    --mod3-primary-note: #23ff1b;\n    --mod4-secondary-channel: #3b2bae;\n    --mod4-primary-channel: #0c79ff;\n    --mod4-secondary-note: #3b2bae;\n    --mod4-primary-note: #0c79ff;\n    --disabled-note-secondary: #696969;\n}", ":root {\n    --pitch-channel-limit: 9;\n    --noise-channel-limit: 3;\n    --pitch1-secondary-channel: #139620;\n    --pitch1-primary-channel: #25ff3a;\n    --pitch1-secondary-note: #139620;\n    --pitch1-primary-note: #25ff3a;\n    --pitch2-secondary-channel: #109986;\n    --pitch2-primary-channel: #1cffe0;\n    --pitch2-secondary-note: #109986;\n    --pitch2-primary-note: #1cffe0;\n    --pitch3-secondary-channel: #127296;\n    --pitch3-primary-channel: #21c3ff;\n    --pitch3-secondary-note: #127296;\n    --pitch3-primary-note: #21c3ff;\n    --pitch4-secondary-channel: #6038a5;\n    --pitch4-primary-channel: #9456ff;\n    --pitch4-secondary-note: #6038a5;\n    --pitch4-primary-note: #ff35e0;\n    --pitch5-secondary-channel: #a52491;\n    --pitch5-primary-channel: #ff35e0;\n    --pitch5-secondary-note: #a52491;\n    --pitch5-primary-note: #af3221;\n    --pitch6-secondary-channel: #af3221;\n    --pitch6-primary-channel: #ff4a32;\n    --pitch6-secondary-note: #af3221;\n    --pitch6-primary-note: #ff4a32;\n    --pitch7-secondary-channel: #ad6e0f;\n    --pitch7-primary-channel: #ffa216;\n    --pitch7-secondary-note: #ad6e0f;\n    --pitch7-primary-note: #ffa216;\n    --pitch8-secondary-channel: #ad6e0f;\n    --pitch8-primary-channel: #ffa216;\n    --pitch8-secondary-note: #ad6e0f;\n    --pitch8-primary-note: #ffa216;\n    --pitch9-secondary-channel: #a7b512;\n    --pitch9-primary-channel: #ebff19;\n    --pitch9-secondary-note: #a7b512;\n    --pitch9-primary-note: #ebff19;\n    --pitch10-secondary-channel: #70ad1b;\n    --pitch10-primary-channel: #a4ff26;\n    --pitch10-secondary-note: #70ad1b;\n    --pitch10-primary-note: #a4ff26;\n    --noise1-secondary-channel: #68706f;\n    --noise1-primary-channel: #a6b2b1;\n    --noise1-secondary-note: #68706f;\n    --noise1-primary-note: #a6b2b1;\n    --noise2-secondary-channel: #665c64;\n    --noise2-primary-channel: #a396a1;\n    --noise2-secondary-note: #665c64;\n    --noise2-primary-note: #a396a1;\n    --noise3-secondary-channel: #60605a;\n    --noise3-primary-channel: #afaea3;\n    --noise3-secondary-note: #60605a;\n    --noise3-primary-note: #afaea3;\n    --noise4-secondary-channel: #665c64;\n    --noise4-primary-channel: #a396a1;\n    --noise4-secondary-note: #665c64;\n    --noise4-primary-note: #a396a1;\n    --noise5-secondary-channel: #60605a;\n    --noise5-primary-channel: #afaea3;\n    --noise5-secondary-note: #60605a;\n    --noise5-primary-note: #afaea3;\n    --mod1-secondary-channel: #139620;\n    --mod1-primary-channel: #25ff3a;\n    --mod1-secondary-note: #139620;\n    --mod1-primary-note: #25ff3a;\n    --mod2-secondary-channel: #109986;\n    --mod2-primary-channel: #1cffe0;\n    --mod2-secondary-note: #109986;\n    --mod2-primary-note: #1cffe0;\n    --mod3-secondary-channel: #127296;\n    --mod3-primary-channel: #21c3ff;\n    --mod3-secondary-note: #127296;\n    --mod3-primary-note: #21c3ff;\n    --mod4-secondary-channel: #6038a5;\n    --mod4-primary-channel: #9456ff;\n    --mod4-secondary-note: #6038a5;\n    --mod4-primary-note: #ff35e0;\n}", ":root {\n    --page-margin: #200000;\n    --editor-background: #200000;\n    --text-selection: #FF5100;\n    --loop-accent: #FF5100;\n    --link-accent: #0F0;\n    --ui-widget-background: #562334;\n    --ui-widget-focus: #6D1B36;\n    --pitch-background: #6D1B36;\n    --tonic: #FF5100;\n    --fifth-note: #00B6FF;\n    --track-editor-bg-pitch: #380C14;\n    --track-editor-bg-pitch-dim: #200000;\n    --track-editor-bg-noise: #233323;\n    --track-editor-bg-noise-dim: #101A0F;\n    --track-editor-bg-mod: #234C82;\n    --track-editor-bg-mod-dim: #0D1D33;\n    --indicator-primary: #FF5100;\n    --pitch1-secondary-channel: #00B200;\n    --pitch1-primary-channel: #0F0;\n    --pitch1-secondary-note: #00B200;\n    --pitch1-primary-note: #0F0;\n    --pitch2-secondary-channel: #00B282;\n    --pitch2-primary-channel: #00FFBF;\n    --pitch2-secondary-note: #00B282;\n    --pitch2-primary-note: #00FFBF;\n    --pitch3-secondary-channel: #00B2B2;\n    --pitch3-primary-channel: #0FF;\n    --pitch3-secondary-note: #00B2B2;\n    --pitch3-primary-note: #0FF;\n    --pitch4-secondary-channel: #2623B2;\n    --pitch4-primary-channel: #3631FF;\n    --pitch4-secondary-note: #2623B2;\n    --pitch4-primary-note: #3631FF;\n    --pitch5-secondary-channel: #7700B2;\n    --pitch5-primary-channel: #A0F;\n    --pitch5-secondary-note: #7700B2;\n    --pitch5-primary-note: #A0F;\n    --pitch6-secondary-channel: #B200B2;\n    --pitch6-primary-channel: #F0F;\n    --pitch6-secondary-note: #B200B2;\n    --pitch6-primary-note: #F0F;\n    --pitch7-secondary-channel: #B20000;\n    --pitch7-primary-channel: #F00;\n    --pitch7-secondary-note: #B20000;\n    --pitch7-primary-note: #F00;\n    --pitch8-secondary-channel: #00B200;\n    --pitch8-primary-channel: #0F0;\n    --pitch8-secondary-note: #00B200;\n    --pitch8-primary-note: #0F0;\n    --pitch9-secondary-channel: #00B282;\n    --pitch9-primary-channel: #0FF;\n    --pitch9-secondary-note: #00B282;\n    --pitch9-primary-note: #0FF;\n    --pitch10-secondary-channel: #0071B2;\n    --pitch10-primary-channel: #009EFF;\n    --pitch10-secondary-note: #0071B2;\n    --pitch10-primary-note: #009EFF;\n    --noise1-secondary-channel: #32B221;\n    --noise1-primary-channel: #44FF2F;\n    --noise1-secondary-note: #32B221;\n    --noise1-primary-note: #44FF2F;\n    --noise2-secondary-channel: #216FB2;\n    --noise2-primary-channel: #2F9DFF;\n    --noise2-secondary-note: #216FB2;\n    --noise2-primary-note: #2F9DFF;\n    --noise3-secondary-channel: #2623B2;\n    --noise3-primary-channel: #3631FF;\n    --noise3-secondary-note: #2623B2;\n    --noise3-primary-note: #3631FF;\n    --noise4-secondary-channel: #7223B2;\n    --noise4-primary-channel: #A531FF;\n    --noise4-secondary-note: #7223B2;\n    --noise4-primary-note: #A531FF;\n    --noise5-secondary-channel: #B2235A;\n    --noise5-primary-channel: #FF317E;\n    --noise5-secondary-note: #B2235A;\n    --noise5-primary-note: #FF317E;\n    --mod1-secondary-channel: #17B274;\n    --mod1-primary-channel: #21FFA8;\n    --mod1-secondary-note: #17B274;\n    --mod1-primary-note: #21FFA8;\n    --mod2-secondary-channel: #1783B2;\n    --mod2-primary-channel: #1FBAFF;\n    --mod2-secondary-note: #1783B2;\n    --mod2-primary-note: #1FBAFF;\n    --mod4-secondary-channel: #B20E6B;\n    --mod4-primary-channel: #FF1291;\n    --mod4-secondary-note: #B20E6B;\n    --mod4-primary-note: #FF1291;\n    --mod-label-primary: #994038;\n    --mod-label-secondary-text: #331512;\n    --mod-label-primary-text: #331512;\n    --disabled-note-primary: #994038;\n    --disabled-note-secondary: #331512;\n}", ":root {\n    --page-margin: #000;\n    --editor-background: #000;\n    --hover-preview: #808080;\n    --playhead: #808080;\n    --secondary-text: #cccccc;\n    --text-selection: #696969;\n    --box-selection-fill: #cccccc40;\n    --loop-accent: #808080;\n    --link-accent: white;\n    --ui-widget-background: #232323;\n    --ui-widget-focus: #303030;\n    --pitch-background: #1a1a1a;\n    --tonic: #262626;\n    --fifth-note: #0d0d0d;\n    --white-piano-key: #808080;\n    --black-piano-key: #232323;\n    --use-color-formula: true;\n    --track-editor-bg-pitch: #262626;\n    --track-editor-bg-pitch-dim: #1a1a1a;\n    --track-editor-bg-noise: #262626;\n    --track-editor-bg-noise-dim: #1a1a1a;\n    --track-editor-bg-mod: #262626;\n    --track-editor-bg-mod-dim: #1a1a1a;\n    --multiplicative-mod-slider: #808080;\n    --overwriting-mod-slider: #808080;\n    --indicator-primary: #808080;\n    --indicator-secondary: #333333;\n    --select2-opt-group: #232323;\n    --input-box-outline: #222;\n    --mute-button-normal: #808080;\n    --mute-button-mod: #808080;\n    --mod-label-primary: #232323;\n    --mod-label-secondary-text: #696969;\n    --mod-label-primary-text: #cdcdcd;\n    --pitch-secondary-channel-hue: 208;\n    --pitch-secondary-channel-hue-scale: 10;\n    --pitch-secondary-channel-sat: 100;\n    --pitch-secondary-channel-sat-scale: 0;\n    --pitch-secondary-channel-lum: 88;\n    --pitch-secondary-channel-lum-scale: 0;\n    --pitch-primary-channel-hue: 207;\n    --pitch-primary-channel-hue-scale: 10;\n    --pitch-primary-channel-sat: 100;\n    --pitch-primary-channel-sat-scale: 0;\n    --pitch-primary-channel-lum: 910;\n    --pitch-primary-channel-lum-scale: 0;\n    --pitch-secondary-note-hue: 208;\n    --pitch-secondary-note-hue-scale: 10;\n    --pitch-secondary-note-sat: 100;\n    --pitch-secondary-note-sat-scale: 0;\n    --pitch-secondary-note-lum: 88;\n    --pitch-secondary-note-lum-scale: 0;\n    --pitch-primary-note-hue: 208;\n    --pitch-primary-note-hue-scale: 10;\n    --pitch-primary-note-sat: 100;\n    --pitch-primary-note-sat-scale: 0;\n    --pitch-primary-note-lum: 910;\n    --pitch-primary-note-lum-scale: 0;\n    --noise-secondary-channel-hue: 328;\n    --noise-secondary-channel-hue-scale: 10;\n    --noise-secondary-channel-sat: 100;\n    --noise-secondary-channel-sat-scale: 0;\n    --noise-secondary-channel-lum: 88;\n    --noise-secondary-channel-lum-scale: 0;\n    --noise-primary-channel-hue: 327;\n    --noise-primary-channel-hue-scale: 10;\n    --noise-primary-channel-sat: 100;\n    --noise-primary-channel-sat-scale: 0;\n    --noise-primary-channel-lum: 910;\n    --noise-primary-channel-lum-scale: 0;\n    --noise-secondary-note-hue: 328;\n    --noise-secondary-note-hue-scale: 10;\n    --noise-secondary-note-sat: 100;\n    --noise-secondary-note-sat-scale: 0;\n    --noise-secondary-note-lum: 88;\n    --noise-secondary-note-lum-scale: 0;\n    --noise-primary-note-hue: 327;\n    --noise-primary-note-hue-scale: 10;\n    --noise-primary-note-sat: 100;\n    --noise-primary-note-sat-scale: 0;\n    --noise-primary-note-lum: 910;\n    --noise-primary-note-lum-scale: 0;\n    --mod-secondary-channel-hue: 87;\n    --mod-secondary-channel-hue-scale: 10;\n    --mod-secondary-channel-sat: 100;\n    --mod-secondary-channel-sat-scale: 0;\n    --mod-secondary-channel-lum: 88;\n    --mod-secondary-channel-lum-scale: 0;\n    --mod-primary-channel-hue: 88;\n    --mod-primary-channel-hue-scale: 10;\n    --mod-primary-channel-sat: 100;\n    --mod-primary-channel-sat-scale: 0;\n    --mod-primary-channel-lum: 910;\n    --mod-primary-channel-lum-scale: 0;\n    --mod-secondary-note-hue: 87;\n    --mod-secondary-note-hue-scale: 10;\n    --mod-secondary-note-sat: 100;\n    --mod-secondary-note-sat-scale: 0;\n    --mod-secondary-note-lum: 88;\n    --mod-secondary-note-lum-scale: 0;\n    --mod-primary-note-hue: 88;\n    --mod-primary-note-hue-scale: 10;\n    --mod-primary-note-sat: 100;\n    --mod-primary-note-sat-scale: 0;\n    --mod-primary-note-lum: 910;\n    --mod-primary-note-lum-scale: 0;\n    --disabled-note-primary: #c6c6c6;\n    --disabled-note-secondary: #8c8c8c;\n}", ":root {\n    --page-margin: #04081a;\n    --editor-background: #04081a;\n    --box-selection-fill: rgb(0 72 181);\n    --loop-accent: #44d4ff;\n    --link-accent: #ffa500;\n    --ui-widget-background: #212c4a;\n    --ui-widget-focus: #121f42;\n    --pitch-background: #1b263e;\n    --tonic: #995d00;\n    --fifth-note: #0898a1;\n    --white-piano-key: #ffffff;\n    --black-piano-key: #516d7a;\n    --track-editor-bg-pitch: #213352;\n    --track-editor-bg-pitch-dim: #152032;\n    --track-editor-bg-noise: #403524;\n    --track-editor-bg-noise-dim: #2a1f0e;\n    --indicator-primary: #5490ff;\n    --mute-button-normal: #3372ff;\n    --mute-button-mod: #dd872f;\n    --pitch1-primary-channel: #77f7ff;\n    --pitch2-secondary-channel: #0083a1;\n    --pitch2-primary-channel: #35d9ff;\n    --pitch2-secondary-note: #0083a1;\n    --pitch2-primary-note: #a4eeff;\n    --pitch3-secondary-channel: #0074c7;\n    --pitch3-primary-channel: #3caeff;\n    --pitch3-secondary-note: #00477a;\n    --pitch3-primary-note: #aadcff;\n    --pitch4-secondary-channel: #0039a1;\n    --pitch4-primary-channel: #2673ff;\n    --pitch4-secondary-note: #001f56;\n    --pitch4-primary-note: #9bbeff;\n    --pitch5-secondary-channel: #31148b;\n    --pitch5-primary-channel: #7042ff;\n    --pitch5-secondary-note: #190656;\n    --pitch5-primary-note: #b79fff;\n    --pitch6-secondary-channel: #979934;\n    --pitch6-primary-channel: #fbff2f;\n    --pitch6-secondary-note: #5d5e0a;\n    --pitch6-primary-note: #fdff9a;\n    --pitch7-secondary-channel: #b78f00;\n    --pitch7-primary-channel: #ffd747;\n    --pitch7-secondary-note: #5e3d00;\n    --pitch7-primary-note: #ffe381;\n    --pitch8-secondary-channel: #9d6500;\n    --pitch8-primary-channel: #ffa400;\n    --pitch8-secondary-note: #583900;\n    --pitch8-primary-note: #ffd07c;\n    --pitch9-secondary-channel: #744203;\n    --pitch9-primary-channel: #ff8e00;\n    --pitch9-secondary-note: #502d00;\n    --pitch9-primary-note: #ffcb89;\n    --pitch10-secondary-channel: #a32d00;\n    --pitch10-primary-channel: #ff885b;\n    --pitch10-secondary-note: #521700;\n    --pitch10-primary-note: #ffb397;\n    --noise1-secondary-channel: #6e2210;\n    --noise1-primary-channel: #ff4600;\n    --noise1-secondary-note: #4c1a08;\n    --noise1-primary-note: #ffc9b4;\n    --noise2-secondary-channel: #6a3110;\n    --noise2-primary-channel: #ff782a;\n    --noise2-secondary-note: #4c1f05;\n    --noise2-primary-note: #ffb488;\n    --noise3-secondary-channel: #72460e;\n    --noise3-primary-channel: #d9871f;\n    --noise3-secondary-note: #442905;\n    --noise3-primary-note: #ffdcae;\n    --noise4-secondary-channel: #837a0f;\n    --noise4-primary-channel: #f7ea55;\n    --noise4-secondary-note: #605906;\n    --noise4-primary-note: #fff9ab;\n    --noise5-secondary-channel: #8c8f00;\n    --noise5-primary-channel: #fdff90;\n    --noise5-secondary-note: #606200;\n    --noise5-primary-note: #feffbc;\n    --mod1-secondary-channel: #561b97;\n    --mod1-primary-channel: #aa66f5;\n    --mod1-secondary-note: #30075c;\n    --mod1-primary-note: #cd9fff;\n    --mod2-secondary-channel: #5116df;\n    --mod2-primary-channel: #6b2dff;\n    --mod2-secondary-note: #36138b;\n    --mod2-primary-note: #bea3ff;\n    --mod3-secondary-channel: #2535a1;\n    --mod3-primary-channel: #3f57ff;\n    --mod3-secondary-note: #0e185c;\n    --mod3-primary-note: #8494ff;\n    --mod4-secondary-channel: #1b5883;\n    --mod4-primary-channel: #5eb7f5;\n    --mod4-secondary-note: #072f4a;\n    --mod4-primary-note: #63beff;\n    --mod-label-primary: #24293a;\n    --mod-label-secondary-text: #454d4e;\n    --mod-label-primary-text: #7bd4ff;\n    --disabled-note-primary: #072f4a;\n    --disabled-note-secondary: #6585a7;\n}", ":root {\n    --page-margin: #050000;\n    --editor-background: #050000;\n    --primary-text: #b8cee0;\n    --secondary-text: #cb3434;\n    --text-selection: rgb(255 68 68 / 99%);\n    --box-selection-fill: rgb(255 0 0 / 30%);\n    --loop-accent: #7744FF;\n    --link-accent: #FF2A2A;\n    --ui-widget-background: #1a2642;\n    --ui-widget-focus: #2c3f6d;\n    --pitch-background: #15111a;\n    --tonic: #1b3041;\n    --fifth-note: #381818;\n    --white-piano-key: #cdcdcd;\n    --black-piano-key: #232323;\n    --track-editor-bg-pitch: #302938;\n    --track-editor-bg-pitch-dim: #211c26;\n    --track-editor-bg-noise: #261f42;\n    --track-editor-bg-noise-dim: #1a152d;\n    --track-editor-bg-mod: #183049;\n    --track-editor-bg-mod-dim: #102132;\n    --multiplicative-mod-slider: #344a7f;\n    --overwriting-mod-slider: #344a7f;\n    --indicator-primary: #FF2A2A;\n    --indicator-secondary: #800000;\n    --select2-opt-group: #141e34;\n    --input-box-outline: #141e34;\n    --mute-button-normal: #299eff;\n    --mute-button-mod: #165a93;\n    --pitch1-secondary-channel: #273c90;\n    --pitch1-primary-channel: #476BFF;\n    --pitch1-secondary-note: #273c90;\n    --pitch1-primary-note: #476BFF;\n    --pitch2-secondary-channel: #3a3898;\n    --pitch2-primary-channel: #625FFB;\n    --pitch2-secondary-note: #3a3898;\n    --pitch2-primary-note: #625FFB;\n    --pitch3-secondary-channel: #542780;\n    --pitch3-primary-channel: #9C49EC;\n    --pitch3-secondary-note: #542780;\n    --pitch3-primary-note: #9C49EC;\n    --pitch4-secondary-channel: #84225d;\n    --pitch4-primary-channel: #fd3fb1;\n    --pitch4-secondary-note: #84225d;\n    --pitch4-primary-note: #fd3fb1;\n    --pitch5-secondary-channel: #8d2323;\n    --pitch5-primary-channel: #ff3f3f;\n    --pitch5-secondary-note: #8d2323;\n    --pitch5-primary-note: #ff3f3f;\n    --pitch6-secondary-channel: #84225d;\n    --pitch6-primary-channel: #fd3fb1;\n    --pitch6-secondary-note: #84225d;\n    --pitch6-primary-note: #fd3fb1;\n    --pitch7-secondary-channel: #542780;\n    --pitch7-primary-channel: #9C49EC;\n    --pitch7-secondary-note: #542780;\n    --pitch7-primary-note: #9C49EC;\n    --pitch8-secondary-channel: #3a3898;\n    --pitch8-primary-channel: #625FFB;\n    --pitch8-secondary-note: #3a3898;\n    --pitch8-primary-note: #625FFB;\n    --pitch9-secondary-channel: #273c90;\n    --pitch9-primary-channel: #476BFF;\n    --pitch9-secondary-note: #273c90;\n    --pitch9-primary-note: #476BFF;\n    --pitch10-secondary-channel: #165a93;\n    --pitch10-primary-channel: #299EFF;\n    --pitch10-secondary-note: #165a93;\n    --pitch10-primary-note: #299EFF;\n    --noise1-secondary-channel: #4281FF;\n    --noise1-primary-channel: #96b9ff;\n    --noise1-secondary-note: #4281FF;\n    --noise1-primary-note: #96b9ff;\n    --noise2-secondary-channel: #7347FF;\n    --noise2-primary-channel: #c3b0ff;\n    --noise2-secondary-note: #7347FF;\n    --noise2-primary-note: #c3b0ff;\n    --noise3-secondary-channel: #9F3CBF;\n    --noise3-primary-channel: #e29cf9;\n    --noise3-secondary-note: #9F3CBF;\n    --noise3-primary-note: #e29cf9;\n    --noise4-secondary-channel: #D3326F;\n    --noise4-primary-channel: #fb9bbf;\n    --noise4-secondary-note: #D3326F;\n    --noise4-primary-note: #fb9bbf;\n    --noise5-secondary-channel: #FF2A2A;\n    --noise5-primary-channel: #ffa2a2;\n    --noise5-secondary-note: #FF2A2A;\n    --noise5-primary-note: #ffa2a2;\n    --mod1-secondary-channel: #47587a;\n    --mod1-primary-channel: #96b9ff;\n    --mod1-secondary-note: #47587a;\n    --mod1-primary-note: #96b9ff;\n    --mod2-secondary-channel: #716791;\n    --mod2-primary-channel: #c3b0ff;\n    --mod2-secondary-note: #716791;\n    --mod2-primary-note: #c3b0ff;\n    --mod3-secondary-channel: #6f4c7b;\n    --mod3-primary-channel: #e29cf9;\n    --mod3-secondary-note: #6f4c7b;\n    --mod3-primary-note: #e29cf9;\n    --mod4-secondary-channel: #9e6279;\n    --mod4-primary-channel: #fb9bbf;\n    --mod4-secondary-note: #9e6279;\n    --mod4-primary-note: #fb9bbf;\n    --mod-label-primary: #15111a;\n    --mod-label-secondary-text: #cb3434;\n    --mod-label-primary-text: white;\n    --disabled-note-primary: #c9c9c9;\n    --disabled-note-secondary: #616161;\n}", ":root {\n    --page-margin: #fff5f5;\n    --editor-background: #fff5f5;\n    --hover-preview: #0e8bf1;\n    --playhead: 000;\n    --primary-text: #0e8bf1;\n    --secondary-text: #f10e0e;\n    --inverted-text: white;\n    --text-selection: #ff4444fc;\n    --box-selection-fill: #ff00004d;\n    --loop-accent: #9a75ff;\n    --link-accent: #ff7070;\n    --ui-widget-background: #bdc9e5;\n    --ui-widget-focus: #a3b7e5;\n    --pitch-background: #d0c7db;\n    --tonic: #bed3e4;\n    --fifth-note: #e7c6c6;\n    --white-piano-key: #cdcdcd;\n    --black-piano-key: #232323;\n    --track-editor-bg-pitch: #e5e1ea;\n    --track-editor-bg-pitch-dim: #cbc4d4;\n    --track-editor-bg-noise: #e0ddee;\n    --track-editor-bg-noise-dim: #c1bade;\n    --track-editor-bg-mod: #d8e6f3;\n    --track-editor-bg-mod-dim: #b1cce7;\n    --multiplicative-mod-slider: #8097cb;\n    --overwriting-mod-slider: #8097cb;\n    --indicator-primary: #FF2A2A;\n    --indicator-secondary: #92a6d3;\n    --select2-opt-group: #b6c4e2;\n    --input-box-outline: #bdc9e5;\n    --mute-button-normal: #66baff;\n    --mute-button-mod: #1a98ff;\n    --pitch1-secondary-channel: #273c90;\n    --pitch1-primary-channel: #476BFF;\n    --pitch1-secondary-note: #273c90;\n    --pitch1-primary-note: #476BFF;\n    --pitch2-secondary-channel: #3a3898;\n    --pitch2-primary-channel: #625FFB;\n    --pitch2-secondary-note: #3a3898;\n    --pitch2-primary-note: #625FFB;\n    --pitch3-secondary-channel: #542780;\n    --pitch3-primary-channel: #9C49EC;\n    --pitch3-secondary-note: #542780;\n    --pitch3-primary-note: #9C49EC;\n    --pitch4-secondary-channel: #84225d;\n    --pitch4-primary-channel: #fd3fb1;\n    --pitch4-secondary-note: #84225d;\n    --pitch4-primary-note: #fd3fb1;\n    --pitch5-secondary-channel: #8d2323;\n    --pitch5-primary-channel: #ff3f3f;\n    --pitch5-secondary-note: #8d2323;\n    --pitch5-primary-note: #ff3f3f;\n    --pitch6-secondary-channel: #84225d;\n    --pitch6-primary-channel: #fd3fb1;\n    --pitch6-secondary-note: #84225d;\n    --pitch6-primary-note: #fd3fb1;\n    --pitch7-secondary-channel: #542780;\n    --pitch7-primary-channel: #9C49EC;\n    --pitch7-secondary-note: #542780;\n    --pitch7-primary-note: #9C49EC;\n    --pitch8-secondary-channel: #3a3898;\n    --pitch8-primary-channel: #625FFB;\n    --pitch8-secondary-note: #3a3898;\n    --pitch8-primary-note: #625FFB;\n    --pitch9-secondary-channel: #273c90;\n    --pitch9-primary-channel: #476BFF;\n    --pitch9-secondary-note: #273c90;\n    --pitch9-primary-note: #476BFF;\n    --pitch10-secondary-channel: #165a93;\n    --pitch10-primary-channel: #299EFF;\n    --pitch10-secondary-note: #165a93;\n    --pitch10-primary-note: #299EFF;\n    --noise1-secondary-channel: #336bdb;\n    --noise1-primary-channel: #4281FF;\n    --noise1-secondary-note: #336bdb;\n    --noise1-primary-note: #4281FF;\n    --noise2-secondary-channel: #5e38dc;\n    --noise2-primary-channel: #7347FF;\n    --noise2-secondary-note: #5e38dc;\n    --noise2-primary-note: #7347FF;\n    --noise3-secondary-channel: #7d3097;\n    --noise3-primary-channel: #9F3CBF;\n    --noise3-secondary-note: #7d3097;\n    --noise3-primary-note: #9F3CBF;\n    --noise4-secondary-channel: #ad2559;\n    --noise4-primary-channel: #D3326F;\n    --noise4-secondary-note: #ad2559;\n    --noise4-primary-note: #D3326F;\n    --noise5-secondary-channel: #d02525;\n    --noise5-primary-channel: #FF2A2A;\n    --noise5-secondary-note: #d02525;\n    --noise5-primary-note: #FF2A2A;\n    --mod1-secondary-channel: #35415a;\n    --mod1-primary-channel: #47587a;\n    --mod1-secondary-note: #35415a;\n    --mod1-primary-note: #47587a;\n    --mod2-secondary-channel: #5a5374;\n    --mod2-primary-channel: #716791;\n    --mod2-secondary-note: #5a5374;\n    --mod2-primary-note: #716791;\n    --mod3-secondary-channel: #53385c;\n    --mod3-primary-channel: #6f4c7b;\n    --mod3-secondary-note: #53385c;\n    --mod3-primary-note: #6f4c7b;\n    --mod4-secondary-channel: #7e4e60;\n    --mod4-primary-channel: #9e6279;\n    --mod4-secondary-note: #7e4e60;\n    --mod4-primary-note: #9e6279;\n    --mod-label-primary: #d0c7db;\n    --mod-label-secondary-text: #cb3434;\n    --disabled-note-primary: #616161;\n    --disabled-note-secondary: #474747;\n}\n\n.promptContainerBG::before {\n    box-shadow: inset 0 0 2000px rgba(255, 255, 255, .5);\n}", ":root {\n    --loop-accent: #198195;\n    --pitch-channel-limit: 6;\n    --noise-channel-limit: 4;\n    --pitch1-secondary-channel: #539999;\n    --pitch1-primary-channel: #5EB1B1;\n    --pitch1-secondary-note: #539999;\n    --pitch1-primary-note: #5EB1B1;\n    --pitch2-secondary-channel: #95933C;\n    --pitch2-primary-channel: #B0AD44;\n    --pitch2-secondary-note: #95933C;\n    --pitch2-primary-note: #B0AD44;\n    --pitch3-secondary-channel: #E75566;\n    --pitch3-primary-channel: #FF9AA6;\n    --pitch3-secondary-note: #E75566;\n    --pitch3-primary-note: #FF9AA6;\n    --pitch4-secondary-channel: #8B4343;\n    --pitch4-primary-channel: #FF8844;\n    --pitch4-secondary-note: #8B4343;\n    --pitch4-primary-note: #FF8844;\n    --pitch5-secondary-channel: #888888;\n    --pitch5-primary-channel: #BBBBBB;\n    --pitch5-secondary-note: #888888;\n    --pitch5-primary-note: #BBBBBB;\n    --pitch6-secondary-channel: #BB6906;\n    --pitch6-primary-channel: #FE8D00;\n    --pitch6-secondary-note: #BB6906;\n    --pitch6-primary-note: #FE8D00;\n    --pitch7-secondary-channel: #539999;\n    --pitch7-primary-channel: #5EB1B1;\n    --pitch7-secondary-note: #539999;\n    --pitch7-primary-note: #5EB1B1;\n    --pitch8-secondary-channel: #95933C;\n    --pitch8-primary-channel: #B0AD44;\n    --pitch8-secondary-note: #95933C;\n    --pitch8-primary-note: #B0AD44;\n    --pitch9-secondary-channel: #E75566;\n    --pitch9-primary-channel: #FF9AA6;\n    --pitch9-secondary-note: #E75566;\n    --pitch9-primary-note: #FF9AA6;\n    --pitch10-secondary-channel: #8B4343;\n    --pitch10-primary-channel: #FF8844;\n    --pitch10-secondary-note: #8B4343;\n    --pitch10-primary-note: #FF8844;\n    --noise1-secondary-channel: #ABABAB;\n    --noise1-primary-channel: #D6D6D6;\n    --noise1-secondary-note: #ABABAB;\n    --noise1-primary-note: #D6D6D6;\n    --noise2-secondary-channel: #A18F51;\n    --noise2-primary-channel: #F6BB6A;\n    --noise2-secondary-note: #A18F51;\n    --noise2-primary-note: #F6BB6A;\n    --noise3-secondary-channel: #5869BD;\n    --noise3-primary-channel: #768DFC;\n    --noise3-secondary-note: #5869BD;\n    --noise3-primary-note: #768DFC;\n    --noise4-secondary-channel: #8888D0;\n    --noise4-primary-channel: #D0D0FF;\n    --noise4-secondary-note: #8888D0;\n    --noise4-primary-note: #D0D0FF;\n    --noise5-secondary-channel: #A18F51;\n    --noise5-primary-channel: #F6BB6A;\n    --noise5-secondary-note: #A18F51;\n    --noise5-primary-note: #F6BB6A;\n    --mod1-secondary-channel: #539999;\n    --mod1-primary-channel: #5EB1B1;\n    --mod1-secondary-note: #539999;\n    --mod1-primary-note: #5EB1B1;\n    --mod2-secondary-channel: #95933C;\n    --mod2-primary-channel: #B0AD44;\n    --mod2-secondary-note: #95933C;\n    --mod2-primary-note: #B0AD44;\n    --mod3-secondary-channel: #E75566;\n    --mod3-primary-channel: #FF9AA6;\n    --mod3-secondary-note: #E75566;\n    --mod3-primary-note: #FF9AA6;\n    --mod4-secondary-channel: #8B4343;\n    --mod4-primary-channel: #FF8844;\n    --mod4-secondary-note: #8B4343;\n    --mod4-primary-note: #FF8844;\n}", ":root {\n    --page-margin: maroon;\n    --playhead: firebrick;\n    --primary-text: silver;\n    --text-selection: rgba(139, 69, 19, 0.99);\n    --box-selection-fill: rgba(220, 20, 60, 0.2);\n    --loop-accent: #841;\n    --link-accent: #841;\n    --ui-widget-background: #800;\n    --ui-widget-focus: #a00;\n    --pitch-background: #700;\n    --tonic: #522;\n    --fifth-note: #f75;\n    --pitch-channel-limit: 6;\n    --noise-channel-limit: 3;\n    --pitch1-secondary-channel: #7e4a35;\n    --pitch1-primary-channel: #c27251;\n    --pitch1-secondary-note: #7e4a35;\n    --pitch1-primary-note: #f09571;\n    --pitch2-secondary-channel: #998a5c;\n    --pitch2-primary-channel: #d9c27c;\n    --pitch2-secondary-note: #998a5c;\n    --pitch2-primary-note: #fae196;\n    --pitch3-secondary-channel: #9c927c;\n    --pitch3-primary-channel: #dbceb0;\n    --pitch3-secondary-note: #9c927c;\n    --pitch3-primary-note: #eddebb;\n    --pitch4-secondary-channel: #838060;\n    --pitch4-primary-channel: #ccc795;\n    --pitch4-secondary-note: #838060;\n    --pitch4-primary-note: #f2ecb1;\n    --pitch5-secondary-channel: #8b6f47;\n    --pitch5-primary-channel: #d1a76b;\n    --pitch5-secondary-note: #8b6f47;\n    --pitch5-primary-note: #ffcc82;\n    --pitch6-secondary-channel: #a96e5b;\n    --pitch6-primary-channel: #e3967d;\n    --pitch6-secondary-note: #a96e5b;\n    --pitch6-primary-note: #ffa68a;\n    --pitch7-secondary-channel: #7e4a35;\n    --pitch7-primary-channel: #c27251;\n    --pitch7-secondary-note: #7e4a35;\n    --pitch7-primary-note: #f09571;\n    --pitch8-secondary-channel: #998a5c;\n    --pitch8-primary-channel: #d9c27c;\n    --pitch8-secondary-note: #998a5c;\n    --pitch8-primary-note: #fae196;\n    --pitch9-secondary-channel: #9c927c;\n    --pitch9-primary-channel: #dbceb0;\n    --pitch9-secondary-note: #9c927c;\n    --pitch9-primary-note: #eddebb;\n    --pitch10-secondary-channel: #838060;\n    --pitch10-primary-channel: #ccc795;\n    --pitch10-secondary-note: #838060;\n    --pitch10-primary-note: #f2ecb1;\n    --noise4-secondary-channel: #6f6f6f;\n    --noise4-primary-channel: #aaaaaa;\n    --noise4-secondary-note: #a7a7a7;\n    --noise4-primary-note: #e0e0e0;\n    --noise5-secondary-channel: #996633;\n    --noise5-primary-channel: #ddaa77;\n    --noise5-secondary-note: #cc9966;\n    --noise5-primary-note: #f0d0bb;\n    --mod1-secondary-channel: #7e4a35;\n    --mod1-primary-channel: #c27251;\n    --mod1-secondary-note: #7e4a35;\n    --mod1-primary-note: #f09571;\n    --mod2-secondary-channel: #998a5c;\n    --mod2-primary-channel: #d9c27c;\n    --mod2-secondary-note: #998a5c;\n    --mod2-primary-note: #fae196;\n    --mod3-secondary-channel: #9c927c;\n    --mod3-primary-channel: #dbceb0;\n    --mod3-secondary-note: #9c927c;\n    --mod3-primary-note: #eddebb;\n    --mod4-secondary-channel: #838060;\n    --mod4-primary-channel: #ccc795;\n    --mod4-secondary-note: #838060;\n    --mod4-primary-note: #f2ecb1;\n    --note-flash: firebrick;\n    --note-flash-secondary: firebrick;\n}", ":root {\n    font: 20px/2 monospace;\n    --page-margin: #252525;\n    --editor-background: #252525;\n    --primary-text: #C8C8C8;\n    --link-accent: #945800;\n    --track-editor-bg-pitch-dim: #444;\n    --track-editor-bg-noise-dim: #444;\n    --pitch-channel-limit: 6;\n    --noise-channel-limit: 3;\n    --text-disabled-icon: \u2717;\n}\n\n.beepboxEditor input[type=\"range\"]::-moz-range-thumb {\n    width: 8px !important;\n}\n\nbutton.playButton {\n    width: 80px;\n}\n\nbutton.prevBarButton {\n    width: 40px;\n    left: -5px;\n}\n\nbutton.nextBarButton {\n    width: 40px;\n}\n\n.trackContainer .noSelection {\n    background: black !important;\n}\n\nspan input,\ndiv.harmonics svg,\ndiv.spectrum svg,\ndiv.filterEditor svg,\ndiv.fadeInOut svg,\ndiv.loopEditor svg,\nsvg#firstImage {\n    background: black !important;\n}\n\n.beepboxEditor {\n    line-height: 1.25;\n}\n\n#text-content {\n    font-size: 32px;\n    line-height: 40px;\n}\n\n#text-content>section>h1 {\n    color: #C8C8C8;\n}", ":root {\n    --page-margin: #14051a;\n    --editor-background: #14051a;\n    --playhead: rgba(255, 255, 255, 0.9);\n    --primary-text: #71eee5;\n    --secondary-text: #3abbb2;\n    --inverted-text: #13695e;\n    --box-selection-fill: #36c71c;\n    --loop-accent: #36c71c;\n    --link-accent: white;\n    --ui-widget-background: #183d05;\n    --ui-widget-focus: #247d0d;\n    --pitch-background: #2e0e51;\n    --tonic: #247d0d;\n    --fifth-note: #3abbb2;\n    --white-piano-key: #ffffff;\n    --black-piano-key: #061705;\n    --white-piano-key-text: #061705;\n    --use-color-formula: true;\n    --track-editor-bg-pitch: #09382b;\n    --track-editor-bg-pitch-dim: #14051a;\n    --track-editor-bg-noise: #40400b;\n    --track-editor-bg-noise-dim: #14051a;\n    --track-editor-bg-mod: #0a2c08;\n    --track-editor-bg-mod-dim: #14051a;\n    --multiplicative-mod-slider: #3abb22;\n    --overwriting-mod-slider: #71eee5;\n    --indicator-primary: #a773e5;\n    --indicator-secondary: #4c1c89;\n    --select2-opt-group: #183d05;\n    --input-box-outline: #18040a;\n    --mute-button-normal: #36c71c;\n    --mute-button-mod: #a773e5;\n    --mod-label-primary: #a773e5;\n    --mod-label-secondary-text: #6b29bf;\n    --mod-label-primary-text: #14051a;\n    --mod-title: #247d1d;\n    --pitch-secondary-channel-hue: 100;\n    --pitch-secondary-channel-hue-scale: 6.1;\n    --pitch-secondary-channel-sat: 100.0;\n    --pitch-secondary-channel-sat-scale: 0.15;\n    --pitch-secondary-channel-lum: 60.0;\n    --pitch-secondary-channel-lum-scale: 0.05;\n    --pitch-primary-channel-hue: 100;\n    --pitch-primary-channel-hue-scale: 6.1;\n    --pitch-primary-channel-sat: 100;\n    --pitch-primary-channel-sat-scale: 0.15;\n    --pitch-primary-channel-lum: 75.0;\n    --pitch-primary-channel-lum-scale: 0.05;\n    --pitch-secondary-note-hue: 100;\n    --pitch-secondary-note-hue-scale: 6.1;\n    --pitch-secondary-note-sat: 95.0;\n    --pitch-secondary-note-sat-scale: 0.15;\n    --pitch-secondary-note-lum: 40;\n    --pitch-secondary-note-lum-scale: 0.05;\n    --pitch-primary-note-hue: 100;\n    --pitch-primary-note-hue-scale: 6.1;\n    --pitch-primary-note-sat: 100;\n    --pitch-primary-note-sat-scale: 0.15;\n    --pitch-primary-note-lum: 85.6;\n    --pitch-primary-note-lum-scale: 0.025;\n    --noise-secondary-channel-hue: 65;\n    --noise-secondary-channel-hue-scale: 2;\n    --noise-secondary-channel-sat: 55;\n    --noise-secondary-channel-sat-scale: 0;\n    --noise-secondary-channel-lum: 42;\n    --noise-secondary-channel-lum-scale: 0;\n    --noise-primary-channel-hue: 65;\n    --noise-primary-channel-hue-scale: 2;\n    --noise-primary-channel-sat: 66;\n    --noise-primary-channel-sat-scale: 0;\n    --noise-primary-channel-lum: 63.5;\n    --noise-primary-channel-lum-scale: 0;\n    --noise-secondary-note-hue: 65;\n    --noise-secondary-note-hue-scale: 2;\n    --noise-secondary-note-sat: 66;\n    --noise-secondary-note-sat-scale: 0;\n    --noise-secondary-note-lum: 55;\n    --noise-secondary-note-lum-scale: 0;\n    --noise-primary-note-hue: 65;\n    --noise-primary-note-hue-scale: 2;\n    --noise-primary-note-sat: 70;\n    --noise-primary-note-sat-scale: 0;\n    --noise-primary-note-lum: 74;\n    --noise-primary-note-lum-scale: 0;\n    --mod-secondary-channel-hue: 192;\n    --mod-secondary-channel-hue-scale: 1.5;\n    --mod-secondary-channel-sat: 88;\n    --mod-secondary-channel-sat-scale: 0;\n    --mod-secondary-channel-lum: 50;\n    --mod-secondary-channel-lum-scale: 0;\n    --mod-primary-channel-hue: 192;\n    --mod-primary-channel-hue-scale: 1.5;\n    --mod-primary-channel-sat: 96;\n    --mod-primary-channel-sat-scale: 0;\n    --mod-primary-channel-lum: 80;\n    --mod-primary-channel-lum-scale: 0;\n    --mod-secondary-note-hue: 192;\n    --mod-secondary-note-hue-scale: 1.5;\n    --mod-secondary-note-sat: 92;\n    --mod-secondary-note-sat-scale: 0;\n    --mod-secondary-note-lum: 45;\n    --mod-secondary-note-lum-scale: 0;\n    --mod-primary-note-hue: 192;\n    --mod-primary-note-hue-scale: 1.5;\n    --mod-primary-note-sat: 96;\n    --mod-primary-note-sat-scale: 0;\n    --mod-primary-note-lum: 85;\n    --mod-primary-note-lum-scale: 0;\n    --oscilloscope-line-R: white;\n    --oscilloscope-line-L: var(--secondary-text);\n}", ":root {\n    --page-margin: #040814;\n    --editor-background: #040814;\n    --hover-preview: #c6f7ff;\n    --primary-text: #d3f3ff;\n    --secondary-text: #6f72b5;\n    --inverted-text: black;\n    --box-selection-fill: rgb(43 70 171 / 62%);\n    --loop-accent: #573ebb;\n    --ui-widget-background: #2e2f44;\n    --ui-widget-focus: #2b2c46;\n    --pitch-background: #353654;\n    --tonic: #716fe3;\n    --fifth-note: #76469b;\n    --white-piano-key: #abbce3;\n    --black-piano-key: #2f235e;\n    --track-editor-bg-pitch: #3a3b5c;\n    --track-editor-bg-pitch-dim: #1f2036;\n    --track-editor-bg-noise: #3c3554;\n    --track-editor-bg-noise-dim: #1e1834;\n    --track-editor-bg-mod: #30335e;\n    --track-editor-bg-mod-dim: #161938;\n    --multiplicative-mod-slider: #e29cff;\n    --overwriting-mod-slider: #495789;\n    --indicator-primary: #e1a6ff;\n    --indicator-secondary: #415187;\n    --select2-opt-group: #22223a;\n    --input-box-outline: #2d2648;\n    --mute-button-normal: #7aceff;\n    --pitch1-secondary-channel: #5f3ea5;\n    --pitch1-primary-channel: #c1a4ff;\n    --pitch1-secondary-note: #794fd3;\n    --pitch1-primary-note: #d8c6ff;\n    --pitch2-secondary-channel: #4f44bf;\n    --pitch2-primary-channel: #9287ff;\n    --pitch2-secondary-note: #5e51d9;\n    --pitch2-primary-note: #b6afff;\n    --pitch3-secondary-channel: #374eb9;\n    --pitch3-primary-channel: #8097ff;\n    --pitch3-secondary-note: #445cc9;\n    --pitch3-primary-note: #a0b2ff;\n    --pitch4-secondary-channel: #2867cf;\n    --pitch4-primary-channel: #6fa5ff;\n    --pitch4-secondary-note: #2e6ed7;\n    --pitch4-primary-note: #a6c7ff;\n    --pitch5-secondary-channel: #3175a7;\n    --pitch5-primary-channel: #7ec9ff;\n    --pitch5-secondary-note: #367eb3;\n    --pitch5-primary-note: #9fd7ff;\n    --pitch6-secondary-channel: #3993a9;\n    --pitch6-primary-channel: #8ce9ff;\n    --pitch6-secondary-note: #386da3;\n    --pitch6-primary-note: #9eecff;\n    --pitch7-secondary-channel: #369d8a;\n    --pitch7-primary-channel: #8bfce7;\n    --pitch7-secondary-note: #1c93a7;\n    --pitch7-primary-note: #abffef;\n    --pitch8-secondary-channel: #00A170;\n    --pitch8-primary-channel: #50FFC9;\n    --pitch8-secondary-note: #00C78A;\n    --pitch8-primary-note: #83FFD9;\n    --pitch9-secondary-channel: #49b374;\n    --pitch9-primary-channel: #8affa9;\n    --pitch9-secondary-note: #26815f;\n    --pitch9-primary-note: #c8ffde;\n    --pitch10-secondary-channel: #58a747;\n    --pitch10-primary-channel: #bbffaa;\n    --pitch10-secondary-note: #1d7c48;\n    --pitch10-primary-note: #c7ffbc;\n    --noise1-secondary-channel: #42829b;\n    --noise1-primary-channel: #97d3fc;\n    --noise1-secondary-note: #3f53b3;\n    --noise1-primary-note: #97d3fc;\n    --noise2-secondary-channel: #6354bb;\n    --noise2-primary-channel: #9a89ff;\n    --noise2-secondary-note: #5f4dcd;\n    --noise2-primary-note: #c6bcff;\n    --noise3-secondary-channel: #704a95;\n    --noise3-primary-channel: #c285ff;\n    --noise3-secondary-note: #ad5aff;\n    --noise3-primary-note: #d3a6ff;\n    --noise4-secondary-channel: #a53c65;\n    --noise4-primary-channel: #f794bb;\n    --noise4-secondary-note: #cb5080;\n    --noise4-primary-note: #f794bb;\n    --noise5-secondary-channel: #9b2d2d;\n    --noise5-primary-channel: #ff7676;\n    --noise5-secondary-note: #cb4444;\n    --noise5-primary-note: #ff9999;\n    --mod1-secondary-channel: #b7613c;\n    --mod1-primary-channel: #ff9f76;\n    --mod1-secondary-note: #e77e52;\n    --mod1-primary-note: #ffb99b;\n    --mod2-secondary-channel: #916d34;\n    --mod2-primary-channel: #fece80;\n    --mod2-secondary-note: #c58b35;\n    --mod2-primary-note: #ffdda5;\n    --mod3-secondary-channel: #83761a;\n    --mod3-primary-channel: #fdf68c;\n    --mod3-secondary-note: #c18e00;\n    --mod3-primary-note: #fdf68c;\n    --mod4-secondary-channel: #a86436;\n    --mod4-primary-channel: #c8a825;\n    --mod4-secondary-note: #e8ba46;\n    --mod4-primary-note: #c8a825;\n    --mod-label-primary: #37325e;\n    --mod-label-secondary-text: #6e8aa7;\n    --mod-label-primary-text: #c1ffff;\n}", ":root {\n    --page-margin: #040300;\n    --editor-background: #040300;\n    --text-selection: rgb(94 0 157);\n    --box-selection-fill: rgb(174 173 73 / 45%);\n    --loop-accent: #EC897D;\n    --link-accent: #FDE484;\n    --ui-widget-background: #241b24;\n    --ui-widget-focus: #3a2e39;\n    --pitch-background: #141414;\n    --tonic: #2C212B;\n    --fifth-note: #2E2A15;\n    --white-piano-key: #bbbaba;\n    --black-piano-key: #2d2d2d;\n    --track-editor-bg-pitch: #2d2e42;\n    --track-editor-bg-pitch-dim: #191a25;\n    --track-editor-bg-noise: #393340;\n    --track-editor-bg-noise-dim: #26222b;\n    --track-editor-bg-mod: #232a2c;\n    --track-editor-bg-mod-dim: #151819;\n    --multiplicative-mod-slider: #977da9;\n    --overwriting-mod-slider: #798FA7;\n    --indicator-primary: #F28891;\n    --indicator-secondary: #601d23;\n    --select2-opt-group: #151015;\n    --input-box-outline: #151015;\n    --mute-button-normal: #E4739D;\n    --mute-button-mod: #9650A6;\n    --pitch1-secondary-channel: #7F7721;\n    --pitch1-primary-channel: #F3E79A;\n    --pitch1-secondary-note: #7F7721;\n    --pitch1-primary-note: #F3E79A;\n    --pitch2-secondary-channel: #785E20;\n    --pitch2-primary-channel: #F7D086;\n    --pitch2-secondary-note: #785E20;\n    --pitch2-primary-note: #F7D086;\n    --pitch3-secondary-channel: #6E4219;\n    --pitch3-primary-channel: #F9B881;\n    --pitch3-secondary-note: #6E4219;\n    --pitch3-primary-note: #F9B881;\n    --pitch4-secondary-channel: #79351F;\n    --pitch4-primary-channel: #F7A086;\n    --pitch4-secondary-note: #79351F;\n    --pitch4-primary-note: #F7A086;\n    --pitch5-secondary-channel: #81272F;\n    --pitch5-primary-channel: #F28891;\n    --pitch5-secondary-note: #81272F;\n    --pitch5-primary-note: #F28891;\n    --pitch6-secondary-channel: #8F224D;\n    --pitch6-primary-channel: #E4739D;\n    --pitch6-secondary-note: #8F224D;\n    --pitch6-primary-note: #E4739D;\n    --pitch7-secondary-channel: #611548;\n    --pitch7-primary-channel: #CF63A6;\n    --pitch7-secondary-note: #611548;\n    --pitch7-primary-note: #CF63A6;\n    --pitch8-secondary-channel: #561253;\n    --pitch8-primary-channel: #B557A9;\n    --pitch8-secondary-note: #4D104A;\n    --pitch8-primary-note: #B557A9;\n    --pitch9-secondary-channel: #4c1260;\n    --pitch9-primary-channel: #9650A6;\n    --pitch9-secondary-note: #3C0F4C;\n    --pitch9-primary-note: #9650A6;\n    --pitch10-secondary-channel: #3e1d78;\n    --pitch10-primary-channel: #704D9E;\n    --pitch10-secondary-note: #27124C;\n    --pitch10-primary-note: #704D9E;\n    --noise1-secondary-channel: #A7A578;\n    --noise1-primary-channel: #EFE9AC;\n    --noise1-secondary-note: #A7A578;\n    --noise1-primary-note: #EFE9AC;\n    --noise2-secondary-channel: #947A5F;\n    --noise2-primary-channel: #FBCEA8;\n    --noise2-secondary-note: #947A5F;\n    --noise2-primary-note: #FBCEA8;\n    --noise3-secondary-channel: #A3635D;\n    --noise3-primary-channel: #F4A5AB;\n    --noise3-secondary-note: #A3635D;\n    --noise3-primary-note: #F4A5AB;\n    --noise4-secondary-channel: #724D60;\n    --noise4-primary-channel: #CD90B6;\n    --noise4-secondary-note: #724D60;\n    --noise4-primary-note: #CD90B6;\n    --noise5-secondary-channel: #503F5C;\n    --noise5-primary-channel: #7C6A9E;\n    --noise5-secondary-note: #503F5C;\n    --noise5-primary-note: #7C6A9E;\n    --mod1-secondary-channel: #371883;\n    --mod1-primary-channel: #6416C6;\n    --mod1-secondary-note: #1F0A52;\n    --mod1-primary-note: #6416C6;\n    --mod2-secondary-channel: #690645;\n    --mod2-primary-channel: #E52FA2;\n    --mod2-secondary-note: #690645;\n    --mod2-primary-note: #E52FA2;\n    --mod3-secondary-channel: #943618;\n    --mod3-primary-channel: #eb5b2c;\n    --mod3-secondary-note: #943618;\n    --mod3-primary-note: #eb5b2c;\n    --mod4-secondary-channel: #928409;\n    --mod4-primary-channel: #ecd50e;\n    --mod4-secondary-note: #928409;\n    --mod4-primary-note: #ecd50e;\n    --mod-label-primary: #282828;\n    --mod-label-secondary-text: #707070;\n    --mod-label-primary-text: white;\n    --disabled-note-primary: #5d5d5d;\n    --disabled-note-secondary: #292929;\n}", ":root {\n    -webkit-text-stroke-width: 0.5px;\n    --hover-preview: #999999;\n    --playhead: #999999;\n    --primary-text: #999999;\n    --secondary-text: #444444;\n    --text-selection: #999999;\n    --box-selection-fill: #999999;\n    --loop-accent: #999999;\n    --link-accent: #999999;\n    --ui-widget-background: #222222;\n    --ui-widget-focus: #444444;\n    --pitch-background: #101010;\n    --tonic: #404040;\n    --fifth-note: #202020;\n    --white-piano-key: #999999;\n    --black-piano-key: #101010;\n    --pitch-channel-limit: 6;\n    --noise-channel-limit: 3;\n    --pitch1-secondary-channel: #004444;\n    --pitch1-primary-channel: #009999;\n    --pitch1-secondary-note: #004444;\n    --pitch1-primary-note: #009999;\n    --pitch2-secondary-channel: #444400;\n    --pitch2-primary-channel: #999900;\n    --pitch2-secondary-note: #444400;\n    --pitch2-primary-note: #999900;\n    --pitch3-secondary-channel: #443300;\n    --pitch3-primary-channel: #996600;\n    --pitch3-secondary-note: #443300;\n    --pitch3-primary-note: #996600;\n    --pitch4-secondary-channel: #004400;\n    --pitch4-primary-channel: #009900;\n    --pitch4-secondary-note: #004400;\n    --pitch4-primary-note: #009900;\n    --pitch5-secondary-channel: #440044;\n    --pitch5-primary-channel: #990099;\n    --pitch5-secondary-note: #440044;\n    --pitch5-primary-note: #990099;\n    --pitch6-secondary-channel: #333344;\n    --pitch6-primary-channel: #666699;\n    --pitch6-secondary-note: #333344;\n    --pitch6-primary-note: #666699;\n    --pitch7-secondary-channel: #444400;\n    --pitch7-primary-channel: #999900;\n    --pitch7-secondary-note: #444400;\n    --pitch7-primary-note: #999900;\n    --pitch8-secondary-channel: #824E54;\n    --pitch8-primary-channel: #C4757E;\n    --pitch8-secondary-note: #824E54;\n    --pitch8-primary-note: #C4757E;\n    --pitch9-secondary-channel: #006342;\n    --pitch9-primary-channel: #008E5F;\n    --pitch9-secondary-note: #006342;\n    --pitch9-primary-note: #008E5F;\n    --pitch10-secondary-channel: #561291;\n    --pitch10-primary-channel: #7819C1;\n    --pitch10-secondary-note: #561291;\n    --pitch10-primary-note: #7819C1;\n    --noise1-secondary-channel: #444444;\n    --noise1-primary-channel: #999999;\n    --noise1-secondary-note: #444444;\n    --noise1-primary-note: #999999;\n    --noise2-secondary-channel: #443311;\n    --noise2-primary-channel: #996633;\n    --noise2-secondary-note: #443311;\n    --noise2-primary-note: #996633;\n    --noise3-secondary-channel: #113344;\n    --noise3-primary-channel: #336699;\n    --noise3-secondary-note: #113344;\n    --noise3-primary-note: #336699;\n    --noise4-secondary-channel: #444444;\n    --noise4-primary-channel: #999999;\n    --noise4-secondary-note: #444444;\n    --noise4-primary-note: #999999;\n    --noise5-secondary-channel: #443311;\n    --noise5-primary-channel: #996633;\n    --noise5-secondary-note: #443311;\n    --noise5-primary-note: #996633;\n    --mod1-secondary-channel: #004444;\n    --mod1-primary-channel: #009999;\n    --mod1-secondary-note: #004444;\n    --mod1-primary-note: #009999;\n    --mod2-secondary-channel: #444400;\n    --mod2-primary-channel: #999900;\n    --mod2-secondary-note: #444400;\n    --mod2-primary-note: #999900;\n    --mod3-secondary-channel: #443300;\n    --mod3-primary-channel: #996600;\n    --mod3-secondary-note: #443300;\n    --mod3-primary-note: #996600;\n    --mod4-secondary-channel: #004400;\n    --mod4-primary-channel: #009900;\n    --mod4-secondary-note: #004400;\n    --mod4-primary-note: #009900;\n}\n\n.beepboxEditor button,\n.beepboxEditor select {\n    box-shadow: inset 0 0 0 1px var(--secondary-text);\n}", ":root {\n    --page-margin: #010003;\n    --editor-background: #010003;\n    --text-selection: rgb(147 195 0);\n    --box-selection-fill: rgb(145 174 73 / 49%);\n    --loop-accent: #BCDE2C;\n    --link-accent: #edff9f;\n    --ui-widget-background: #261e2e;\n    --ui-widget-focus: #322042;\n    --pitch-background: #141c15;\n    --tonic: #282c21;\n    --fifth-note: #18221a;\n    --white-piano-key: #e3e3e3;\n    --black-piano-key: #2d2d2d;\n    --track-editor-bg-pitch: #38293e;\n    --track-editor-bg-pitch-dim: #251c29;\n    --track-editor-bg-noise: #2c304c;\n    --track-editor-bg-noise-dim: #191b2b;\n    --track-editor-bg-mod: #311b32;\n    --track-editor-bg-mod-dim: #1d101e;\n    --multiplicative-mod-slider: #977da9;\n    --overwriting-mod-slider: #798FA7;\n    --indicator-primary: #aae9ff;\n    --indicator-secondary: #253e46;\n    --select2-opt-group: #110d15;\n    --input-box-outline: #110d15;\n    --mute-button-normal: #8f5ad1;\n    --mute-button-mod: #482574;\n    --pitch1-secondary-channel: #6b7f19;\n    --pitch1-primary-channel: #BCDE2C;\n    --pitch1-secondary-note: #6b7f19;\n    --pitch1-primary-note: #BCDE2C;\n    --pitch2-secondary-channel: #497a31;\n    --pitch2-primary-channel: #7BD152;\n    --pitch2-secondary-note: #497a31;\n    --pitch2-primary-note: #7BD152;\n    --pitch3-secondary-channel: #286b40;\n    --pitch3-primary-channel: #45BE71;\n    --pitch3-secondary-note: #286b40;\n    --pitch3-primary-note: #45BE71;\n    --pitch4-secondary-channel: #125140;\n    --pitch4-primary-channel: #25A884;\n    --pitch4-secondary-note: #125140;\n    --pitch4-primary-note: #25A884;\n    --pitch5-secondary-channel: #114c49;\n    --pitch5-primary-channel: #21908C;\n    --pitch5-secondary-note: #114c49;\n    --pitch5-primary-note: #21908C;\n    --pitch6-secondary-channel: #143843;\n    --pitch6-primary-channel: #2B788E;\n    --pitch6-secondary-note: #143843;\n    --pitch6-primary-note: #2B788E;\n    --pitch7-secondary-channel: #1d354e;\n    --pitch7-primary-channel: #355F8D;\n    --pitch7-secondary-note: #1a2f46;\n    --pitch7-primary-note: #355F8D;\n    --pitch8-secondary-channel: #2c2e5a;\n    --pitch8-primary-channel: #414486;\n    --pitch8-secondary-note: #1e1f3d;\n    --pitch8-primary-note: #414486;\n    --pitch9-secondary-channel: #3c1f5e;\n    --pitch9-primary-channel: #5e3b89;\n    --pitch9-secondary-note: #25133b;\n    --pitch9-primary-note: #5e3b89;\n    --pitch10-secondary-channel: #510264;\n    --pitch10-primary-channel: #720d8a;\n    --pitch10-secondary-note: #440154;\n    --pitch10-primary-note: #720d8a;\n    --noise1-secondary-channel: #BCDE2C;\n    --noise1-primary-channel: #edff9f;\n    --noise1-secondary-note: #BCDE2C;\n    --noise1-primary-note: #edff9f;\n    --noise2-secondary-channel: #45BE71;\n    --noise2-primary-channel: #89ffb4;\n    --noise2-secondary-note: #45BE71;\n    --noise2-primary-note: #89ffb4;\n    --noise3-secondary-channel: #21908C;\n    --noise3-primary-channel: #72fffa;\n    --noise3-secondary-note: #21908C;\n    --noise3-primary-note: #72fffa;\n    --noise4-secondary-channel: #355F8D;\n    --noise4-primary-channel: #7cb6f5;\n    --noise4-secondary-note: #355F8D;\n    --noise4-primary-note: #7cb6f5;\n    --noise5-secondary-channel: #482574;\n    --noise5-primary-channel: #8f5ad1;\n    --noise5-secondary-note: #48257A;\n    --noise5-primary-note: #8f5ad1;\n    --mod1-secondary-channel: #815a16;\n    --mod1-primary-channel: #F5AB29;\n    --mod1-secondary-note: #815a16;\n    --mod1-primary-note: #F5AB29;\n    --mod2-secondary-channel: #4d341a;\n    --mod2-primary-channel: #C98540;\n    --mod2-secondary-note: #4d341a;\n    --mod2-primary-note: #C98540;\n    --mod3-secondary-channel: #643734;\n    --mod3-primary-channel: #A75D58;\n    --mod3-secondary-note: #643734;\n    --mod3-primary-note: #A75D58;\n    --mod4-secondary-channel: #461430;\n    --mod4-primary-channel: #812359;\n    --mod4-secondary-note: #3f112b;\n    --mod4-primary-note: #812359;\n    --mod-label-primary: #282828;\n    --mod-label-secondary-text: #707070;\n    --mod-label-primary-text: white;\n    --disabled-note-primary: #5d5d5d;\n    --disabled-note-secondary: #292929;\n}", ":root {\n    /*--mod-title: #CCCCCC;*/\n    --loop-accent: #CCCCCC;\n    --playhead: #CCCCCC;\n    /*--primary-text: #CCCCCC;*/\n    /*--hover-preview: #CCCCCC;*/\n    --link-accent: #FF8EC5;\n    --indicator-primary: #FF8EC5;\n    /*--indicator-primary: #CCCCCC;*/\n    /*--indicator-secondary: #E856B2;*/\n    --white-piano-key: #CCCCCC;\n    /*--black-piano-key: #444;*/\n    --text-selection: #932253;\n    --oscilloscope-line-L: #CCCCCC;\n    --oscilloscope-line-R: #932253;\n    --pitch-channel-limit: 8;\n    --pitch1-secondary-channel: #A83030;\n    --pitch1-primary-channel: #FF7C7C;\n    --pitch1-secondary-note: #B51532;\n    --pitch1-primary-note: #FFA3A3;\n\n    --pitch2-secondary-channel: #C75000;\n    --pitch2-primary-channel: #FF9752;\n    --pitch2-secondary-note: #FF771C;\n    --pitch2-primary-note: #FFCDAB;\n\n    --pitch3-secondary-channel: #A1A100;\n    --pitch3-primary-channel: #FFFF25;\n    --pitch3-secondary-note: #C7C700;\n    --pitch3-primary-note: #FFFF92;\n\n    --pitch4-secondary-channel: #139620;\n    --pitch4-primary-channel: #25ff3a;\n    --pitch4-secondary-note: #21FF33;\n    --pitch4-primary-note: #C0FFB5;\n\n    --pitch5-secondary-channel: #0099A1;\n    --pitch5-primary-channel: #25F3FF;\n    --pitch5-secondary-note: #00BDC7;\n    --pitch5-primary-note: #92F9FF;\n\n    --pitch6-secondary-channel: #58599E;\n    --pitch6-primary-channel: #5EA3FF;\n    --pitch6-secondary-note: #183AC7;\n    --pitch6-primary-note: #9EC8FF;\n\n    --pitch7-secondary-channel: #6038a5;\n    --pitch7-primary-channel: #C760FF;\n    --pitch7-secondary-note: #5433A0;\n    --pitch7-primary-note: #D99EFF;\n\n    --pitch8-secondary-channel: #932253;\n    --pitch8-primary-channel: #FF60A5;\n    --pitch8-secondary-note: #8E1C4E;\n    --pitch8-primary-note: #FF8EC5;\n\n    /*--track-editor-bg-mod: #632D45;*/\n    /*--track-editor-bg-mod-dim: #3F1D2C;*/\n}", ":root {\n    --page-margin: #0e031a;\n    --editor-background: #0e031a;\n    --hover-preview: #e5ffea;\n    --playhead: rgba(255, 255, 255, 0.9);\n    --primary-text: #f0e0ff;\n    --secondary-text: #706087;\n    --box-selection-fill: #225835;\n    --loop-accent: #8f00fb;\n    --link-accent: #82dd5d;\n    --ui-widget-background: #303c66;\n    --ui-widget-focus: #62559b;\n    --pitch-background: #293b52;\n    --tonic: #5b46ad;\n    --fifth-note: #42604d;\n    --white-piano-key: #f6e8ff;\n    --black-piano-key: #5a4972;\n    --use-color-formula: true;\n    --track-editor-bg-pitch: #392a46;\n    --track-editor-bg-pitch-dim: #1c1d28;\n    --track-editor-bg-noise: #403150;\n    --track-editor-bg-noise-dim: #161313;\n    --track-editor-bg-mod: #253c25;\n    --track-editor-bg-mod-dim: #0c1811;\n    --multiplicative-mod-slider: #606c9f;\n    --overwriting-mod-slider: #6850b5;\n    --indicator-primary: #9c64f7;\n    --indicator-secondary: #393e4f;\n    --select2-opt-group: #5d576f;\n    --input-box-outline: #403150;\n    --mute-button-normal: #82dd5d;\n    --mute-button-mod: #945de5;\n    --mod-label-primary: #312840;\n    --mod-label-secondary-text: rgb(88 70 104);\n    --mod-label-primary-text: #82dd5d;\n    --pitch-secondary-channel-hue: 64;\n    --pitch-secondary-channel-hue-scale: 6.1;\n    --pitch-secondary-channel-sat: 63.3;\n    --pitch-secondary-channel-sat-scale: 0.1;\n    --pitch-secondary-channel-lum: 40;\n    --pitch-secondary-channel-lum-scale: 0.05;\n    --pitch-primary-channel-hue: 64;\n    --pitch-primary-channel-hue-scale: 6.1;\n    --pitch-primary-channel-sat: 90;\n    --pitch-primary-channel-sat-scale: 0.1;\n    --pitch-primary-channel-lum: 67.5;\n    --pitch-primary-channel-lum-scale: 0.05;\n    --pitch-secondary-note-hue: 32;\n    --pitch-secondary-note-hue-scale: 6.1;\n    --pitch-secondary-note-sat: 87.9;\n    --pitch-secondary-note-sat-scale: 0.1;\n    --pitch-secondary-note-lum: 25;\n    --pitch-secondary-note-lum-scale: 0.05;\n    --pitch-primary-note-hue: 64;\n    --pitch-primary-note-hue-scale: 6.1;\n    --pitch-primary-note-sat: 90;\n    --pitch-primary-note-sat-scale: 0.05;\n    --pitch-primary-note-lum: 85.6;\n    --pitch-primary-note-lum-scale: 0.025;\n    --noise-secondary-channel-hue: 192;\n    --noise-secondary-channel-hue-scale: 2;\n    --noise-secondary-channel-sat: 45;\n    --noise-secondary-channel-sat-scale: 0;\n    --noise-secondary-channel-lum: 32;\n    --noise-secondary-channel-lum-scale: 0;\n    --noise-primary-channel-hue: 192;\n    --noise-primary-channel-hue-scale: 2;\n    --noise-primary-channel-sat: 33;\n    --noise-primary-channel-sat-scale: 0;\n    --noise-primary-channel-lum: 43.5;\n    --noise-primary-channel-lum-scale: 0;\n    --noise-secondary-note-hue: 160;\n    --noise-secondary-note-hue-scale: 2;\n    --noise-secondary-note-sat: 33.5;\n    --noise-secondary-note-sat-scale: 0;\n    --noise-secondary-note-lum: 45;\n    --noise-secondary-note-lum-scale: 0;\n    --noise-primary-note-hue: 192;\n    --noise-primary-note-hue-scale: 2;\n    --noise-primary-note-sat: 46.5;\n    --noise-primary-note-sat-scale: 0;\n    --noise-primary-note-lum: 74;\n    --noise-primary-note-lum-scale: 0;\n    --mod-secondary-channel-hue: 132;\n    --mod-secondary-channel-hue-scale: 1.5;\n    --mod-secondary-channel-sat: 88;\n    --mod-secondary-channel-sat-scale: 0;\n    --mod-secondary-channel-lum: 50;\n    --mod-secondary-channel-lum-scale: 0;\n    --mod-primary-channel-hue: 132;\n    --mod-primary-channel-hue-scale: 1.5;\n    --mod-primary-channel-sat: 96;\n    --mod-primary-channel-sat-scale: 0;\n    --mod-primary-channel-lum: 80;\n    --mod-primary-channel-lum-scale: 0;\n    --mod-secondary-note-hue: 100;\n    --mod-secondary-note-hue-scale: 1.5;\n    --mod-secondary-note-sat: 92;\n    --mod-secondary-note-sat-scale: 0;\n    --mod-secondary-note-lum: 45;\n    --mod-secondary-note-lum-scale: 0;\n    --mod-primary-note-hue: 132;\n    --mod-primary-note-hue-scale: 1.5;\n    --mod-primary-note-sat: 96;\n    --mod-primary-note-sat-scale: 0;\n    --mod-primary-note-lum: 85;\n    --mod-primary-note-lum-scale: 0;\n    --disabled-note-primary: #91879f;\n    --disabled-note-secondary: #6a677a;\n}", ":root {\n    --page-margin: #050000;\n    --editor-background: #050000;\n    --pitch-channel-limit: 6;\n    --noise-channel-limit: 3;\n}\n\n* {\n    cursor: url(\"theme_resources/wackybox_cursor.png\"), auto !important;\n}", ":root {\n    --loop-accent: #C3593D;\n    --pitch1-secondary-channel: #06c400;\n    --pitch1-primary-channel: #08ff00;\n    --pitch1-secondary-note: #06c400;\n    --pitch1-primary-note: #06e000;\n    --pitch2-secondary-channel: #00bf97;\n    --pitch2-primary-channel: #00ffcb;\n    --pitch2-secondary-note: #00bf97;\n    --pitch2-primary-note: #00edbc;\n    --pitch3-secondary-channel: #b5b000;\n    --pitch3-primary-channel: #fffa00;\n    --pitch3-secondary-note: #b5b000;\n    --pitch3-primary-note: #e0db00;\n    --pitch4-secondary-channel: #c90000;\n    --pitch4-primary-channel: #e20000;\n    --pitch4-secondary-note: #c90000;\n    --pitch4-primary-note: #e20000;\n    --pitch5-secondary-channel: #d17d12;\n    --pitch5-primary-channel: #ff9e21;\n    --pitch5-secondary-note: #d17d12;\n    --pitch5-primary-note: #ef9017;\n    --pitch6-secondary-channel: #d35bc8;\n    --pitch6-primary-channel: #ffa5f7;\n    --pitch6-secondary-note: #d35bc8;\n    --pitch6-primary-note: #fc64ee;\n    --pitch7-secondary-channel: #D00000;\n    --pitch7-primary-channel: #FF4444;\n    --pitch7-secondary-note: #D00000;\n    --pitch7-primary-note: #FF4444;\n    --pitch8-secondary-channel: #00C700;\n    --pitch8-primary-channel: #A0FFA0;\n    --pitch8-secondary-note: #00C700;\n    --pitch8-primary-note: #A0FFA0;\n    --pitch9-secondary-channel: #A88981;\n    --pitch9-primary-channel: #F1C3B7;\n    --pitch9-secondary-note: #A88981;\n    --pitch9-primary-note: #F1C3B7;\n    --pitch10-secondary-channel: #0C0A99;\n    --pitch10-primary-channel: #0000EE;\n    --pitch10-secondary-note: #0C0A99;\n    --pitch10-primary-note: #0000EE;\n    --noise1-secondary-channel: #ABABAB;\n    --noise1-primary-channel: #D6D6D6;\n    --noise1-secondary-note: #ABABAB;\n    --noise1-primary-note: #D6D6D6;\n    --noise2-secondary-channel: #A18F51;\n    --noise2-primary-channel: #F6BB6A;\n    --noise2-secondary-note: #A18F51;\n    --noise2-primary-note: #F6BB6A;\n    --noise3-secondary-channel: #5869BD;\n    --noise3-primary-channel: #768DFC;\n    --noise3-secondary-note: #5869BD;\n    --noise3-primary-note: #768DFC;\n    --noise4-secondary-channel: #8888D0;\n    --noise4-primary-channel: #D0D0FF;\n    --noise4-secondary-note: #8888D0;\n    --noise4-primary-note: #D0D0FF;\n    --noise5-secondary-channel: #B7148E;\n    --noise5-primary-channel: #E819B4;\n    --noise5-secondary-note: #B7148E;\n    --noise5-primary-note: #E819B4;\n    --mod1-secondary-channel: #06c400;\n    --mod1-primary-channel: #08ff00;\n    --mod1-secondary-note: #06c400;\n    --mod1-primary-note: #06e000;\n    --mod2-secondary-channel: #00bf97;\n    --mod2-primary-channel: #00ffcb;\n    --mod2-secondary-note: #00bf97;\n    --mod2-primary-note: #00edbc;\n    --mod3-secondary-channel: #b5b000;\n    --mod3-primary-channel: #fffa00;\n    --mod3-secondary-note: #b5b000;\n    --mod3-primary-note: #e0db00;\n    --mod4-secondary-channel: #c90000;\n    --mod4-primary-channel: #e20000;\n    --mod4-secondary-note: #c90000;\n    --mod4-primary-note: #e20000;\n}", "// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { HTML } from \"imperative-html/dist/esm/elements-strict\";\nimport { Song } from \"../synth/Song\";\nimport { BeepBoxOption, Config, DictionaryArray, toNameMap } from \"../synth/SynthConfig\";\nimport { nsLocalStorage_get } from \"./namespaced_localStorage\";\n\nimport abyssboxClassicThemeCSS from \"../data/themes/abyssbox_classic.css\";\nimport abyssboxLightThemeCSS from \"../data/themes/abyssbox_light.css\";\nimport amoledDarkThemeCSS from \"../data/themes/amoled_dark.css\";\nimport autumnThemeCSS from \"../data/themes/autumn.css\";\nimport azurLaneThemeCSS from \"../data/themes/azur_lane.css\";\nimport beachcombingThemeCSS from \"../data/themes/beachcombing.css\";\nimport bluboxClassicThemeCSS from \"../data/themes/blubox_classic.css\";\nimport blutoniumThemeCSS from \"../data/themes/blutonium.css\";\nimport bruceboxThemeCSS from \"../data/themes/brucebox.css\";\nimport canyonThemeCSS from \"../data/themes/canyon.css\";\nimport cardboardboxClassicThemeCSS from \"../data/themes/cardboardbox_classic.css\";\nimport darkCompetitionThemeCSS from \"../data/themes/dark_competition.css\";\nimport dogebox2ThemeCSS from \"../data/themes/dogebox2.css\";\nimport dogeboxClassicThemeCSS from \"../data/themes/dogebox_classic.css\";\nimport dogeboxDarkThemeCSS from \"../data/themes/dogebox_dark.css\";\nimport energizedThemeCSS from \"../data/themes/energized.css\";\nimport fogboxThemeCSS from \"../data/themes/fogbox.css\";\nimport forestThemeCSS from \"../data/themes/forest.css\";\nimport foxboxThemeCSS from \"../data/themes/foxbox.css\";\nimport fruitThemeCSS from \"../data/themes/fruit.css\";\nimport fusionThemeCSS from \"../data/themes/fusion.css\";\nimport greyscaleThemeCSS from \"../data/themes/greyscale.css\";\nimport harryboxThemeCSS from \"../data/themes/harrybox.css\";\nimport inverseThemeCSS from \"../data/themes/inverse.css\";\nimport jummboxClassicThemeCSS from \"../data/themes/jummbox_classic.css\";\nimport jummboxLightThemeCSS from \"../data/themes/jummbox_light.css\";\nimport lightClassicThemeCSS from \"../data/themes/light_classic.css\";\nimport mainbox1ThemeCSS from \"../data/themes/mainbox1.css\";\nimport microboxThemeCSS from \"../data/themes/microbox.css\";\nimport midboxThemeCSS from \"../data/themes/midbox.css\";\nimport midnightThemeCSS from \"../data/themes/midnight.css\";\nimport modboxClassicThemeCSS from \"../data/themes/modbox_classic.css\";\nimport moonlightThemeCSS from \"../data/themes/moonlight.css\";\nimport neapolitanThemeCSS from \"../data/themes/neapolitan.css\";\nimport nebulaThemeCSS from \"../data/themes/nebula.css\";\nimport nepboxThemeCSS from \"../data/themes/nepbox.css\";\nimport nerdboxThemeCSS from \"../data/themes/nerdbox.css\";\nimport paandorasboxThemeCSS from \"../data/themes/paandorasbox.css\";\nimport polyThemeCSS from \"../data/themes/poly.css\";\nimport portalThemeCSS from \"../data/themes/portal.css\";\nimport roeThemeCSS from \"../data/themes/roe.css\";\nimport roeLightThemeCSS from \"../data/themes/roe_light.css\";\nimport sandboxClassicThemeCSS from \"../data/themes/sandbox_classic.css\";\nimport shitbox2ThemeCSS from \"../data/themes/shitbox2.css\";\nimport shitbox3ThemeCSS from \"../data/themes/shitbox3.css\";\nimport slarmoosboxThemeCSS from \"../data/themes/slarmoosbox.css\";\nimport slushieThemeCSS from \"../data/themes/slushie.css\";\nimport sunsetThemeCSS from \"../data/themes/sunset.css\";\nimport todboxDarkModeThemeCSS from \"../data/themes/todbox_dark.css\";\nimport toxicThemeCSS from \"../data/themes/toxic.css\";\nimport ultraboxDarkThemeCSS from \"../data/themes/ultrabox_dark.css\";\nimport violentVerdantThemeCSS from \"../data/themes/violent_verdant.css\";\nimport wackyboxThemeCSS from \"../data/themes/wackybox.css\";\nimport zefboxThemeCSS from \"../data/themes/zefbox.css\";\n\nexport interface ChannelColors extends BeepBoxOption {\n    readonly secondaryChannel: string;\n    readonly primaryChannel: string;\n    readonly secondaryNote: string;\n    readonly primaryNote: string;\n}\n\nexport class ColorConfig {\n    static colorLookup = new Map<number, ChannelColors>();\n    static usesColorFormula = false;\n    static readonly defaultTheme = \"dark classic\";\n    static readonly themes: Record<string, string> = {\n        \"dark classic\": ``, // why is the empty?????? is it the default?\n        \"dark competition\": darkCompetitionThemeCSS,\n        \"light classic\": lightClassicThemeCSS,\n        \"jummbox classic\": jummboxClassicThemeCSS,\n        \"forest\": forestThemeCSS,\n        \"canyon\": canyonThemeCSS,\n        \"midnight\": midnightThemeCSS,\n        \"jummbox light\": jummboxLightThemeCSS,\n        \"amoled dark\": amoledDarkThemeCSS,\n        \"beachcombing\": beachcombingThemeCSS,\n        \"roe\": roeThemeCSS,\n        \"moonlight\": moonlightThemeCSS,\n        \"autumn\": autumnThemeCSS,\n        \"fruit\": fruitThemeCSS,\n        \"sunset\": sunsetThemeCSS,\n        \"toxic\": toxicThemeCSS,\n        \"violet verdant\": violentVerdantThemeCSS,\n        \"portal\": portalThemeCSS,\n        \"fusion\": fusionThemeCSS,\n        \"inverse\": inverseThemeCSS,\n        \"nebula\": nebulaThemeCSS,\n        \"roe light\": roeLightThemeCSS,\n        \"energized\": energizedThemeCSS,\n        \"neapolitan\": neapolitanThemeCSS,\n        \"poly\": polyThemeCSS,\n        \"greyscale\": greyscaleThemeCSS,\n        \"blutonium\": blutoniumThemeCSS,\n        \"slushie\": slushieThemeCSS,\n        \"ultrabox dark\": ultraboxDarkThemeCSS,\n        \"modbox classic\": modboxClassicThemeCSS,\n        \"zefbox\": zefboxThemeCSS,\n        \"sandbox classic\": sandboxClassicThemeCSS,\n        \"harrybox\": harryboxThemeCSS,\n        \"brucebox\": bruceboxThemeCSS,\n        \"shitbox 2.0\": shitbox2ThemeCSS,\n        \"shitbox 3.0\": shitbox3ThemeCSS,\n        \"nerdbox\": nerdboxThemeCSS,\n        \"nepbox\": nepboxThemeCSS,\n        \"cardboardbox classic\": cardboardboxClassicThemeCSS,\n        \"blubox classic\": bluboxClassicThemeCSS,\n        \"dogebox classic\": dogeboxClassicThemeCSS,\n        \"dogebox dark\": dogeboxDarkThemeCSS,\n        \"todbox dark mode\": todboxDarkModeThemeCSS,\n        \"mainbox 1.0\": mainbox1ThemeCSS,\n        \"fogbox\": fogboxThemeCSS,\n        \"foxbox\": foxboxThemeCSS,\n        \"wackybox\": wackyboxThemeCSS,\n        \"microbox\": microboxThemeCSS,\n        \"paandorasbox\": paandorasboxThemeCSS,\n        \"midbox\": midboxThemeCSS,\n        \"dogebox2\": dogebox2ThemeCSS,\n        \"abyssbox classic\": abyssboxClassicThemeCSS,\n        \"abyssbox light\": abyssboxLightThemeCSS,\n        \"slarmoosbox\": slarmoosboxThemeCSS,\n        \"azur lane\": azurLaneThemeCSS,\n        \"custom\": `${nsLocalStorage_get(\"customColors\") || `:root {  }`}`,\n    };\n\n    static readonly pageMargin = \"var(--page-margin, black)\";\n    static readonly editorBackground = \"var(--editor-background, black)\";\n    static readonly hoverPreview = \"var(--hover-preview, white)\";\n    static readonly playhead = \"var(--playhead, white)\";\n    static readonly primaryText = \"var(--primary-text, white)\";\n    static readonly secondaryText = \"var(--secondary-text, #999)\";\n    static readonly invertedText = \"var(--inverted-text, black)\";\n    static readonly textSelection = \"var(--text-selection, rgba(119,68,255,0.99))\";\n    static readonly boxSelectionFill = \"var(--box-selection-fill, rgba(255,255,255,0.2))\";\n    static readonly loopAccent = \"var(--loop-accent, #74f)\";\n    static readonly linkAccent = \"var(--link-accent, #98f)\";\n    static readonly uiWidgetBackground = \"var(--ui-widget-background, #444)\";\n    static readonly uiWidgetFocus = \"var(--ui-widget-focus, #777)\";\n    static readonly pitchBackground = \"var(--pitch-background, #444)\";\n    static readonly tonic = \"var(--tonic, #864)\";\n    static readonly fifthNote = \"var(--fifth-note, #468)\";\n    static readonly whitePianoKey = \"var(--white-piano-key, #bbb)\";\n    static readonly blackPianoKey = \"var(--black-piano-key, #444)\";\n    static readonly whitePianoKeyText = \"var(--white-piano-key-text, #131200)\";\n    static readonly blackPianoKeyText = \"var(--black-piano-key-text, #fff)\";\n    //public static readonly oscilloscopeLineL = \"var(--oscilloscope-line-L, var(--primary-text, white))\";\n    //public static readonly oscilloscopeLineR = \"var(--oscilloscope-line-R, var(--text-selection, rgba(119,68,255,0.99)))\";\n    // modTitle can stay uncommented until it's used somwhere that's not index.html\n    // public static readonly modTitle = \"var(--mod-title)\";\n    static readonly useColorFormula = \"var(--use-color-formula, false)\";\n    // public static readonly pitchLimit = \"var(--pitch-channel-limit)\";\n    // public static readonly noiseLimit = \"var(--noise-channel-limit)\";\n    // public static readonly modLimit = \"var(--mod-channel-limit)\";\n    // public static readonly colorFormulaPitchLimit = \"var(--formula-pitch-channel-limit)\";\n    // public static readonly colorFormulaNoiseLimit = \"var(--formula-noise-channel-limit)\";\n    // public static readonly colorFormulaModLimit = \"var(--formula-mod-channel-limit)\";\n    static readonly pitchSecondaryChannelHue = \"var(--pitch-secondary-channel-hue)\";\n    static readonly pitchSecondaryChannelHueScale = \"var(--pitch-secondary-channel-hue-scale)\";\n    static readonly pitchSecondaryChannelSat = \"var(--pitch-secondary-channel-sat)\";\n    static readonly pitchSecondaryChannelSatScale = \"var(--pitch-secondary-channel-sat-scale)\";\n    static readonly pitchSecondaryChannelLum = \"var(--pitch-secondary-channel-lum)\";\n    static readonly pitchSecondaryChannelLumScale = \"var(--pitch-secondary-channel-lum-scale)\";\n    static readonly pitchPrimaryChannelHue = \"var(--pitch-primary-channel-hue)\";\n    static readonly pitchPrimaryChannelHueScale = \"var(--pitch-primary-channel-hue-scale)\";\n    static readonly pitchPrimaryChannelSat = \"var(--pitch-primary-channel-sat)\";\n    static readonly pitchPrimaryChannelSatScale = \"var(--pitch-primary-channel-sat-scale)\";\n    static readonly pitchPrimaryChannelLum = \"var(--pitch-primary-channel-lum)\";\n    static readonly pitchPrimaryChannelLumScale = \"var(--pitch-primary-channel-lum-scale)\";\n    static readonly pitchSecondaryNoteHue = \"var(--pitch-secondary-note-hue)\";\n    static readonly pitchSecondaryNoteHueScale = \"var(--pitch-secondary-note-hue-scale)\";\n    static readonly pitchSecondaryNoteSat = \"var(--pitch-secondary-note-sat)\";\n    static readonly pitchSecondaryNoteSatScale = \"var(--pitch-secondary-note-sat-scale)\";\n    static readonly pitchSecondaryNoteLum = \"var(--pitch-secondary-note-lum)\";\n    static readonly pitchSecondaryNoteLumScale = \"var(--pitch-secondary-note-lum-scale)\";\n    static readonly pitchPrimaryNoteHue = \"var(--pitch-primary-note-hue)\";\n    static readonly pitchPrimaryNoteHueScale = \"var(--pitch-primary-note-hue-scale)\";\n    static readonly pitchPrimaryNoteSat = \"var(--pitch-primary-note-sat)\";\n    static readonly pitchPrimaryNoteSatScale = \"var(--pitch-primary-note-sat-scale)\";\n    static readonly pitchPrimaryNoteLum = \"var(--pitch-primary-note-lum)\";\n    static readonly pitchPrimaryNoteLumScale = \"var(--pitch-primary-note-lum-scale)\";\n    static readonly modSecondaryChannelHue = \"var(--mod-secondary-channel-hue)\";\n    static readonly modSecondaryChannelHueScale = \"var(--mod-secondary-channel-hue-scale)\";\n    static readonly modSecondaryChannelSat = \"var(--mod-secondary-channel-sat)\";\n    static readonly modSecondaryChannelSatScale = \"var(--mod-secondary-channel-sat-scale)\";\n    static readonly modSecondaryChannelLum = \"var(--mod-secondary-channel-lum)\";\n    static readonly modSecondaryChannelLumScale = \"var(--mod-secondary-channel-lum-scale)\";\n    static readonly modPrimaryChannelHue = \"var(--mod-primary-channel-hue)\";\n    static readonly modPrimaryChannelHueScale = \"var(--mod-primary-channel-hue-scale)\";\n    static readonly modPrimaryChannelSat = \"var(--mod-primary-channel-sat)\";\n    static readonly modPrimaryChannelSatScale = \"var(--mod-primary-channel-sat-scale)\";\n    static readonly modPrimaryChannelLum = \"var(--mod-primary-channel-lum)\";\n    static readonly modPrimaryChannelLumScale = \"var(--mod-primary-channel-lum-scale)\";\n    static readonly modSecondaryNoteHue = \"var(--mod-secondary-note-hue)\";\n    static readonly modSecondaryNoteHueScale = \"var(--mod-secondary-note-hue-scale)\";\n    static readonly modSecondaryNoteSat = \"var(--mod-secondary-note-sat)\";\n    static readonly modSecondaryNoteSatScale = \"var(--mod-secondary-note-sat-scale)\";\n    static readonly modSecondaryNoteLum = \"var(--mod-secondary-note-lum)\";\n    static readonly modSecondaryNoteLumScale = \"var(--mod-secondary-note-lum-scale)\";\n    static readonly modPrimaryNoteHue = \"var(--mod-primary-note-hue)\";\n    static readonly modPrimaryNoteHueScale = \"var(--mod-primary-note-hue-scale)\";\n    static readonly modPrimaryNoteSat = \"var(--mod-primary-note-sat)\";\n    static readonly modPrimaryNoteSatScale = \"var(--mod-primary-note-sat-scale)\";\n    static readonly modPrimaryNoteLum = \"var(--mod-primary-note-lum)\";\n    static readonly modPrimaryNoteLumScale = \"var(--mod-primary-note-lum-scale)\";\n    static readonly noiseSecondaryChannelHue = \"var(--noise-secondary-channel-hue)\";\n    static readonly noiseSecondaryChannelHueScale = \"var(--noise-secondary-channel-hue-scale)\";\n    static readonly noiseSecondaryChannelSat = \"var(--noise-secondary-channel-sat)\";\n    static readonly noiseSecondaryChannelSatScale = \"var(--noise-secondary-channel-sat-scale)\";\n    static readonly noiseSecondaryChannelLum = \"var(--noise-secondary-channel-lum)\";\n    static readonly noiseSecondaryChannelLumScale = \"var(--noise-secondary-channel-lum-scale)\";\n    static readonly noisePrimaryChannelHue = \"var(--noise-primary-channel-hue)\";\n    static readonly noisePrimaryChannelHueScale = \"var(--noise-primary-channel-hue-scale)\";\n    static readonly noisePrimaryChannelSat = \"var(--noise-primary-channel-sat)\";\n    static readonly noisePrimaryChannelSatScale = \"var(--noise-primary-channel-sat-scale)\";\n    static readonly noisePrimaryChannelLum = \"var(--noise-primary-channel-lum)\";\n    static readonly noisePrimaryChannelLumScale = \"var(--noise-primary-channel-lum-scale)\";\n    static readonly noiseSecondaryNoteHue = \"var(--noise-secondary-note-hue)\";\n    static readonly noiseSecondaryNoteHueScale = \"var(--noise-secondary-note-hue-scale)\";\n    static readonly noiseSecondaryNoteSat = \"var(--noise-secondary-note-sat)\";\n    static readonly noiseSecondaryNoteSatScale = \"var(--noise-secondary-note-sat-scale)\";\n    static readonly noiseSecondaryNoteLum = \"var(--noise-secondary-note-lum)\";\n    static readonly noiseSecondaryNoteLumScale = \"var(--noise-secondary-note-lum-scale)\";\n    static readonly noisePrimaryNoteHue = \"var(--noise-primary-note-hue)\";\n    static readonly noisePrimaryNoteHueScale = \"var(--noise-primary-note-hue-scale)\";\n    static readonly noisePrimaryNoteSat = \"var(--noise-primary-note-sat)\";\n    static readonly noisePrimaryNoteSatScale = \"var(--noise-primary-note-sat-scale)\";\n    static readonly noisePrimaryNoteLum = \"var(--noise-primary-note-lum)\";\n    static readonly noisePrimaryNoteLumScale = \"var(--noise-primary-note-lum-scale)\";\n    static readonly trackEditorBgPitch = \"var(--track-editor-bg-pitch, #444)\";\n    static readonly trackEditorBgPitchDim = \"var(--track-editor-bg-pitch-dim, #333)\";\n    static readonly trackEditorBgNoise = \"var(--track-editor-bg-noise, #444)\";\n    static readonly trackEditorBgNoiseDim = \"var(--track-editor-bg-noise-dim, #333)\";\n    static readonly trackEditorBgMod = \"var(--track-editor-bg-mod, #234)\";\n    static readonly trackEditorBgModDim = \"var(--track-editor-bg-mod-dim, #123)\";\n    static readonly multiplicativeModSlider = \"var(--multiplicative-mod-slider, #456;)\";\n    static readonly overwritingModSlider = \"var(--overwriting-mod-slider, #654)\";\n    static readonly indicatorPrimary = \"var(--indicator-primary, #74f)\";\n    static readonly indicatorSecondary = \"var(--indicator-secondary, #444)\";\n    static readonly select2OptGroup = \"var(--select2-opt-group, #585858)\";\n    static readonly inputBoxOutline = \"var(--input-box-outline, #333)\";\n    static readonly muteButtonNormal = \"var(--mute-button-normal, #ffa033)\";\n    static readonly muteButtonMod = \"var(--mute-button-mod, #9a6bff)\";\n    static readonly modLabelPrimary = \"var(--mod-label-primary, #999)\";\n    static readonly modLabelSecondaryText = \"var(--mod-label-secondary-text, #333)\";\n    static readonly modLabelPrimaryText = \"var(--mod-label-primary-text, black)\";\n    static readonly disabledNotePrimary = \"var(--disabled-note-primary, #999)\";\n    static readonly disabledNoteSecondary = \"var(--disabled-note-secondary, #666)\";\n\n    static c_pitchSecondaryChannelHue = 0;\n    static c_pitchSecondaryChannelHueScale = 0;\n    static c_pitchSecondaryChannelSat = 0;\n    static c_pitchSecondaryChannelSatScale = 0;\n    static c_pitchSecondaryChannelLum = 0;\n    static c_pitchSecondaryChannelLumScale = 0;\n    static c_pitchPrimaryChannelHue = 0;\n    static c_pitchPrimaryChannelHueScale = 0;\n    static c_pitchPrimaryChannelSat = 0;\n    static c_pitchPrimaryChannelSatScale = 0;\n    static c_pitchPrimaryChannelLum = 0;\n    static c_pitchPrimaryChannelLumScale = 0;\n    static c_pitchSecondaryNoteHue = 0;\n    static c_pitchSecondaryNoteHueScale = 0;\n    static c_pitchSecondaryNoteSat = 0;\n    static c_pitchSecondaryNoteSatScale = 0;\n    static c_pitchSecondaryNoteLum = 0;\n    static c_pitchSecondaryNoteLumScale = 0;\n    static c_pitchPrimaryNoteHue = 0;\n    static c_pitchPrimaryNoteHueScale = 0;\n    static c_pitchPrimaryNoteSat = 0;\n    static c_pitchPrimaryNoteSatScale = 0;\n    static c_pitchPrimaryNoteLum = 0;\n    static c_pitchPrimaryNoteLumScale = 0;\n    static c_modSecondaryChannelHue = 0;\n    static c_modSecondaryChannelHueScale = 0;\n    static c_modSecondaryChannelSat = 0;\n    static c_modSecondaryChannelSatScale = 0;\n    static c_modSecondaryChannelLum = 0;\n    static c_modSecondaryChannelLumScale = 0;\n    static c_modPrimaryChannelHue = 0;\n    static c_modPrimaryChannelHueScale = 0;\n    static c_modPrimaryChannelSat = 0;\n    static c_modPrimaryChannelSatScale = 0;\n    static c_modPrimaryChannelLum = 0;\n    static c_modPrimaryChannelLumScale = 0;\n    static c_modSecondaryNoteHue = 0;\n    static c_modSecondaryNoteHueScale = 0;\n    static c_modSecondaryNoteSat = 0;\n    static c_modSecondaryNoteSatScale = 0;\n    static c_modSecondaryNoteLum = 0;\n    static c_modSecondaryNoteLumScale = 0;\n    static c_modPrimaryNoteHue = 0;\n    static c_modPrimaryNoteHueScale = 0;\n    static c_modPrimaryNoteSat = 0;\n    static c_modPrimaryNoteSatScale = 0;\n    static c_modPrimaryNoteLum = 0;\n    static c_modPrimaryNoteLumScale = 0;\n    static c_noiseSecondaryChannelHue = 0;\n    static c_noiseSecondaryChannelHueScale = 0;\n    static c_noiseSecondaryChannelSat = 0;\n    static c_noiseSecondaryChannelSatScale = 0;\n    static c_noiseSecondaryChannelLum = 0;\n    static c_noiseSecondaryChannelLumScale = 0;\n    static c_noisePrimaryChannelHue = 0;\n    static c_noisePrimaryChannelHueScale = 0;\n    static c_noisePrimaryChannelSat = 0;\n    static c_noisePrimaryChannelSatScale = 0;\n    static c_noisePrimaryChannelLum = 0;\n    static c_noisePrimaryChannelLumScale = 0;\n    static c_noiseSecondaryNoteHue = 0;\n    static c_noiseSecondaryNoteHueScale = 0;\n    static c_noiseSecondaryNoteSat = 0;\n    static c_noiseSecondaryNoteSatScale = 0;\n    static c_noiseSecondaryNoteLum = 0;\n    static c_noiseSecondaryNoteLumScale = 0;\n    static c_noisePrimaryNoteHue = 0;\n    static c_noisePrimaryNoteHueScale = 0;\n    static c_noisePrimaryNoteSat = 0;\n    static c_noisePrimaryNoteSatScale = 0;\n    static c_noisePrimaryNoteLum = 0;\n    static c_noisePrimaryNoteLumScale = 0;\n\n    static c_pitchChannelCountOverride = 40;\n    static c_noiseChannelCountOverride = 16;\n    static c_modChannelCountOverride = 12;\n\n    static c_pitchLimit = 1;\n    static c_noiseLimit = 1;\n    static c_modLimit = 1;\n    static c_colorFormulaPitchLimit = 1;\n    static c_colorFormulaNoiseLimit = 1;\n    static c_colorFormulaModLimit = 1;\n\n    static c_invertedText = \"\";\n    static c_trackEditorBgNoiseDim = \"\";\n    static c_trackEditorBgNoise = \"\";\n    static c_trackEditorBgModDim = \"\";\n    static c_trackEditorBgMod = \"\";\n    static c_trackEditorBgPitchDim = \"\";\n    static c_trackEditorBgPitch = \"\";\n\n    static readonly pitchChannels: DictionaryArray<ChannelColors> = toNameMap([\n        {\n            name: \"pitch1\", // cyan\n            secondaryChannel: \"var(--pitch1-secondary-channel, #0099A1)\",\n            primaryChannel: \"var(--pitch1-primary-channel, #25F3FF)\",\n            secondaryNote: \"var(--pitch1-secondary-note, #00BDC7)\",\n            primaryNote: \"var(--pitch1-primary-note, #92F9FF)\",\n        }, {\n            name: \"pitch2\", // yellow\n            secondaryChannel: \"var(--pitch2-secondary-channel, #A1A100)\",\n            primaryChannel: \"var(--pitch2-primary-channel, #FFFF25)\",\n            secondaryNote: \"var(--pitch2-secondary-note, #C7C700)\",\n            primaryNote: \"var(--pitch2-primary-note, #FFFF92)\",\n        }, {\n            name: \"pitch3\", // orange\n            secondaryChannel: \"var(--pitch3-secondary-channel, #C75000)\",\n            primaryChannel: \"var(--pitch3-primary-channel, #FF9752)\",\n            secondaryNote: \"var(--pitch3-secondary-note, #FF771C)\",\n            primaryNote: \"var(--pitch3-primary-note, #FFCDAB)\",\n        }, {\n            name: \"pitch4\", // green\n            secondaryChannel: \"var(--pitch4-secondary-channel, #00A100)\",\n            primaryChannel: \"var(--pitch4-primary-channel, #50FF50)\",\n            secondaryNote: \"var(--pitch4-secondary-note, #00C700)\",\n            primaryNote: \"var(--pitch4-primary-note, #A0FFA0)\",\n        }, {\n            name: \"pitch5\", // magenta\n            secondaryChannel: \"var(--pitch5-secondary-channel, #D020D0)\",\n            primaryChannel: \"var(--pitch5-primary-channel, #FF90FF)\",\n            secondaryNote: \"var(--pitch5-secondary-note, #E040E0)\",\n            primaryNote: \"var(--pitch5-primary-note, #FFC0FF)\",\n        }, {\n            name: \"pitch6\", // blue\n            secondaryChannel: \"var(--pitch6-secondary-channel, #7777B0)\",\n            primaryChannel: \"var(--pitch6-primary-channel, #A0A0FF)\",\n            secondaryNote: \"var(--pitch6-secondary-note, #8888D0)\",\n            primaryNote: \"var(--pitch6-primary-note, #D0D0FF)\",\n        }, {\n            name: \"pitch7\", // olive\n            secondaryChannel: \"var(--pitch7-secondary-channel, #8AA100)\",\n            primaryChannel: \"var(--pitch7-primary-channel, #DEFF25)\",\n            secondaryNote: \"var(--pitch7-secondary-note, #AAC700)\",\n            primaryNote: \"var(--pitch7-primary-note, #E6FF92)\",\n        }, {\n            name: \"pitch8\", // red\n            secondaryChannel: \"var(--pitch8-secondary-channel, #DF0019)\",\n            primaryChannel: \"var(--pitch8-primary-channel, #FF98A4)\",\n            secondaryNote: \"var(--pitch8-secondary-note, #FF4E63)\",\n            primaryNote: \"var(--pitch8-primary-note, #FFB2BB)\",\n        }, {\n            name: \"pitch9\", // teal\n            secondaryChannel: \"var(--pitch9-secondary-channel, #00A170)\",\n            primaryChannel: \"var(--pitch9-primary-channel, #50FFC9)\",\n            secondaryNote: \"var(--pitch9-secondary-note, #00C78A)\",\n            primaryNote: \"var(--pitch9-primary-note, #83FFD9)\",\n        }, {\n            name: \"pitch10\", // purple\n            secondaryChannel: \"var(--pitch10-secondary-channel, #A11FFF)\",\n            primaryChannel: \"var(--pitch10-primary-channel, #CE8BFF)\",\n            secondaryNote: \"var(--pitch10-secondary-note, #B757FF)\",\n            primaryNote: \"var(--pitch10-primary-note, #DFACFF)\",\n        },\n    ]);\n    static readonly noiseChannels: DictionaryArray<ChannelColors> = toNameMap([\n        {\n            name: \"noise1\", // gray\n            secondaryChannel: \"var(--noise1-secondary-channel, #6F6F6F)\",\n            primaryChannel: \"var(--noise1-primary-channel, #AAAAAA)\",\n            secondaryNote: \"var(--noise1-secondary-note, #A7A7A7)\",\n            primaryNote: \"var(--noise1-primary-note, #E0E0E0)\",\n        }, {\n            name: \"noise2\", // brown\n            secondaryChannel: \"var(--noise2-secondary-channel, #996633)\",\n            primaryChannel: \"var(--noise2-primary-channel, #DDAA77)\",\n            secondaryNote: \"var(--noise2-secondary-note, #CC9966)\",\n            primaryNote: \"var(--noise2-primary-note, #F0D0BB)\",\n        }, {\n            name: \"noise3\", // azure\n            secondaryChannel: \"var(--noise3-secondary-channel, #4A6D8F)\",\n            primaryChannel: \"var(--noise3-primary-channel, #77AADD)\",\n            secondaryNote: \"var(--noise3-secondary-note, #6F9FCF)\",\n            primaryNote: \"var(--noise3-primary-note, #BBD7FF)\",\n        }, {\n            name: \"noise4\", // purple\n            secondaryChannel: \"var(--noise4-secondary-channel, #7A4F9A)\",\n            primaryChannel: \"var(--noise4-primary-channel, #AF82D2)\",\n            secondaryNote: \"var(--noise4-secondary-note, #9E71C1)\",\n            primaryNote: \"var(--noise4-primary-note, #D4C1EA)\",\n        }, {\n            name: \"noise5\", // sage\n            secondaryChannel: \"var(--noise5-secondary-channel, #607837)\",\n            primaryChannel: \"var(--noise5-primary-channel, #A2BB77)\",\n            secondaryNote: \"var(--noise5-secondary-note, #91AA66)\",\n            primaryNote: \"var(--noise5-primary-note, #C5E2B2)\",\n        },\n    ]);\n    static readonly modChannels: DictionaryArray<ChannelColors> = toNameMap([\n        {\n            name: \"mod1\",\n            secondaryChannel: \"var(--mod1-secondary-channel, #339955)\",\n            primaryChannel: \"var(--mod1-primary-channel, #77fc55)\",\n            secondaryNote: \"var(--mod1-secondary-note, #77ff8a)\",\n            primaryNote: \"var(--mod1-primary-note, #cdffee)\",\n        }, {\n            name: \"mod2\",\n            secondaryChannel: \"var(--mod2-secondary-channel, #993355)\",\n            primaryChannel: \"var(--mod2-primary-channel, #f04960)\",\n            secondaryNote: \"var(--mod2-secondary-note, #f057a0)\",\n            primaryNote: \"var(--mod2-primary-note, #ffb8de)\",\n        }, {\n            name: \"mod3\",\n            secondaryChannel: \"var(--mod3-secondary-channel, #553399)\",\n            primaryChannel: \"var(--mod3-primary-channel, #8855fc)\",\n            secondaryNote: \"var(--mod3-secondary-note, #aa64ff)\",\n            primaryNote: \"var(--mod3-primary-note, #f8ddff)\",\n        }, {\n            name: \"mod4\",\n            secondaryChannel: \"var(--mod4-secondary-channel, #a86436)\",\n            primaryChannel: \"var(--mod4-primary-channel, #c8a825)\",\n            secondaryNote: \"var(--mod4-secondary-note, #e8ba46)\",\n            primaryNote: \"var(--mod4-primary-note, #fff6d3)\",\n        },\n    ]);\n\n    static resetColors() {\n        this.colorLookup.clear();\n    }\n\n    static getArbitaryChannelColor(type: string, channel: number): ChannelColors {\n\n        if (!this.usesColorFormula) {\n            let base: ChannelColors;\n            switch (type) {\n                case (\"noise\"): {\n                    base = ColorConfig.noiseChannels[(channel % this.c_noiseLimit) % ColorConfig.noiseChannels.length];\n                    break;\n                }\n                case (\"mod\"): {\n                    base = ColorConfig.modChannels[(channel % this.c_modLimit) % ColorConfig.modChannels.length];\n                    break;\n                }\n                case (\"pitch\"):\n                default: {\n                    base = ColorConfig.pitchChannels[(channel % this.c_pitchLimit) % ColorConfig.pitchChannels.length];\n                    break;\n                }\n            }\n            var regex = /\\(([^\\,)]+)/;\n            let newChannelSecondary = ColorConfig.getComputed((regex.exec(base.secondaryChannel) as RegExpExecArray)[1] as string);\n            let newChannelPrimary = ColorConfig.getComputed((regex.exec(base.primaryChannel) as RegExpExecArray)[1] as string);\n            let newNoteSecondary = ColorConfig.getComputed((regex.exec(base.secondaryNote) as RegExpExecArray)[1] as string);\n            let newNotePrimary = ColorConfig.getComputed((regex.exec(base.primaryNote) as RegExpExecArray)[1] as string);\n            return <ChannelColors>{ secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };\n        }\n        let colorFormulaPitchLimit = this.c_colorFormulaPitchLimit;\n        let colorFormulaNoiseLimit = this.c_colorFormulaNoiseLimit;\n        let colorFormulaModLimit = this.c_colorFormulaModLimit;\n        switch (type) {\n            case (\"noise\"): {\n                // Noise formula\n\n                let newChannelSecondary = \"hsl(\" + ((this.c_noiseSecondaryChannelHue + ((channel * this.c_noiseSecondaryChannelHueScale) / this.c_noiseChannelCountOverride) * 256) % colorFormulaNoiseLimit) + \",\"\n                    + (this.c_noiseSecondaryChannelSat + channel * this.c_noiseSecondaryChannelSatScale) + \"%,\"\n                    + (this.c_noiseSecondaryChannelLum + channel * this.c_noiseSecondaryChannelLumScale) + \"%)\";\n                let newChannelPrimary = \"hsl(\" + ((this.c_noisePrimaryChannelHue + ((channel * this.c_noisePrimaryChannelHueScale) / this.c_noiseChannelCountOverride) * 256) % colorFormulaNoiseLimit) + \",\"\n                    + (this.c_noisePrimaryChannelSat + channel * this.c_noisePrimaryChannelSatScale) + \"%,\"\n                    + (this.c_noisePrimaryChannelLum + channel * this.c_noisePrimaryChannelLumScale) + \"%)\";\n                let newNoteSecondary = \"hsl(\" + ((this.c_noiseSecondaryNoteHue + ((channel * this.c_noiseSecondaryNoteHueScale) / this.c_noiseChannelCountOverride) * 256) % colorFormulaNoiseLimit) + \",\"\n                    + (this.c_noiseSecondaryNoteSat + channel * this.c_noiseSecondaryNoteSatScale) + \"%,\"\n                    + (this.c_noiseSecondaryNoteLum + channel * this.c_noiseSecondaryNoteLumScale) + \"%)\";\n                let newNotePrimary = \"hsl(\" + ((this.c_noisePrimaryNoteHue + ((channel * this.c_noisePrimaryNoteHueScale) / this.c_noiseChannelCountOverride) * 256) % colorFormulaNoiseLimit) + \",\"\n                    + (this.c_noisePrimaryNoteSat + channel * this.c_noisePrimaryNoteSatScale) + \"%,\"\n                    + (this.c_noisePrimaryNoteLum + channel * this.c_noisePrimaryNoteLumScale) + \"%)\";\n\n                let newChannelColors = <ChannelColors>{ secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };\n                return newChannelColors;\n            } case (\"mod\"): {\n                // Mod formula\n\n                let newChannelSecondary = \"hsl(\" + ((this.c_modSecondaryChannelHue + ((channel * this.c_modSecondaryChannelHueScale) / this.c_modChannelCountOverride) * 256) % colorFormulaModLimit) + \",\"\n                    + (this.c_modSecondaryChannelSat + channel * this.c_modSecondaryChannelSatScale) + \"%,\"\n                    + (this.c_modSecondaryChannelLum + channel * this.c_modSecondaryChannelLumScale) + \"%)\";\n                let newChannelPrimary = \"hsl(\" + ((this.c_modPrimaryChannelHue + ((channel * this.c_modPrimaryChannelHueScale) / this.c_modChannelCountOverride) * 256) % colorFormulaModLimit) + \",\"\n                    + (this.c_modPrimaryChannelSat + channel * this.c_modPrimaryChannelSatScale) + \"%,\"\n                    + (this.c_modPrimaryChannelLum + channel * this.c_modPrimaryChannelLumScale) + \"%)\";\n                let newNoteSecondary = \"hsl(\" + ((this.c_modSecondaryNoteHue + ((channel * this.c_modSecondaryNoteHueScale) / this.c_modChannelCountOverride) * 256) % colorFormulaModLimit) + \",\"\n                    + (this.c_modSecondaryNoteSat + channel * this.c_modSecondaryNoteSatScale) + \"%,\"\n                    + (this.c_modSecondaryNoteLum + channel * this.c_modSecondaryNoteLumScale) + \"%)\";\n                let newNotePrimary = \"hsl(\" + ((this.c_modPrimaryNoteHue + ((channel * this.c_modPrimaryNoteHueScale) / this.c_modChannelCountOverride) * 256) % colorFormulaModLimit) + \",\"\n                    + (this.c_modPrimaryNoteSat + channel * this.c_modPrimaryNoteSatScale) + \"%,\"\n                    + (this.c_modPrimaryNoteLum + channel * this.c_modPrimaryNoteLumScale) + \"%)\";\n\n                let newChannelColors = <ChannelColors>{ secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };\n                return newChannelColors;\n            }\n            case (\"pitch\"):\n            default: {\n                // Pitch formula\n\n                let newChannelSecondary = \"hsl(\" + ((this.c_pitchSecondaryChannelHue + (channel * this.c_pitchSecondaryChannelHueScale / this.c_pitchChannelCountOverride) * 256) % colorFormulaPitchLimit) + \",\"\n                    + (this.c_pitchSecondaryChannelSat * (1 - (this.c_pitchSecondaryChannelSatScale * Math.floor(channel / 7)))) + \"%,\"\n                    + (this.c_pitchSecondaryChannelLum * (1 - (this.c_pitchSecondaryChannelLumScale * Math.floor(channel / 7)))) + \"%)\";\n                let newChannelPrimary = \"hsl(\" + ((this.c_pitchPrimaryChannelHue + (channel * this.c_pitchPrimaryChannelHueScale / this.c_pitchChannelCountOverride) * 256) % colorFormulaPitchLimit) + \",\"\n                    + (this.c_pitchPrimaryChannelSat * (1 - (this.c_pitchPrimaryChannelSatScale * Math.floor(channel / 7)))) + \"%,\"\n                    + (this.c_pitchPrimaryChannelLum * (1 - (this.c_pitchPrimaryChannelLumScale * Math.floor(channel / 7)))) + \"%)\";\n                let newNoteSecondary = \"hsl(\" + ((this.c_pitchSecondaryNoteHue + (channel * this.c_pitchSecondaryNoteHueScale / this.c_pitchChannelCountOverride) * 256) % colorFormulaPitchLimit) + \",\"\n                    + (this.c_pitchSecondaryNoteSat * (1 - (this.c_pitchSecondaryNoteSatScale * Math.floor(channel / 7)))) + \"%,\"\n                    + (this.c_pitchSecondaryNoteLum * (1 - (this.c_pitchSecondaryNoteLumScale * Math.floor(channel / 7)))) + \"%)\";\n                let newNotePrimary = \"hsl(\" + ((this.c_pitchPrimaryNoteHue + (channel * this.c_pitchPrimaryNoteHueScale / this.c_pitchChannelCountOverride) * 256) % colorFormulaPitchLimit) + \",\"\n                    + (this.c_pitchPrimaryNoteSat * (1 - (this.c_pitchPrimaryNoteSatScale * Math.floor(channel / 7)))) + \"%,\"\n                    + (this.c_pitchPrimaryNoteLum * (1 - (this.c_pitchPrimaryNoteLumScale * Math.floor(channel / 7)))) + \"%)\";\n\n                let newChannelColors = <ChannelColors>{ secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };\n                return newChannelColors;\n            }\n        }\n    }\n\n    // Same as below, but won't return var colors\n    static getComputedChannelColor(song: Song, color: number, channel: number, useFixedOrder: boolean): ChannelColors {\n        if (!this.usesColorFormula) {\n            let base = ColorConfig.getChannelColor(song, color, channel, useFixedOrder);\n            // Trim away \"var(...)\"\n            var regex = /\\(([^\\,)]+)/;\n            let newChannelSecondary = ColorConfig.getComputed((regex.exec(base.secondaryChannel) as RegExpExecArray)[1] as string);\n            let newChannelPrimary = ColorConfig.getComputed((regex.exec(base.primaryChannel) as RegExpExecArray)[1] as string);\n            let newNoteSecondary = ColorConfig.getComputed((regex.exec(base.secondaryNote) as RegExpExecArray)[1] as string);\n            let newNotePrimary = ColorConfig.getComputed((regex.exec(base.primaryNote) as RegExpExecArray)[1] as string);\n            return <ChannelColors>{ secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };\n        }\n        else {\n            return ColorConfig.getChannelColor(song, color, channel, useFixedOrder);\n        }\n    };\n\n    static getChannelColor(song: Song, color: number, channel: number, useFixedOrder: boolean): ChannelColors {\n        if (!this.usesColorFormula) {\n            // Set colors, not defined by formula\n            if (!useFixedOrder) {\n                if (channel < song.pitchChannelCount) {\n                    return ColorConfig.pitchChannels[(color % this.c_pitchLimit) % ColorConfig.pitchChannels.length];\n                } else if (channel < song.pitchChannelCount + song.noiseChannelCount) {\n                    return ColorConfig.noiseChannels[(color % this.c_noiseLimit) % ColorConfig.noiseChannels.length];\n                } else {\n                    return ColorConfig.modChannels[(color % this.c_modLimit) % ColorConfig.modChannels.length];\n                }\n            }\n            else {\n                if (channel < song.pitchChannelCount) {\n                    return ColorConfig.pitchChannels[(channel % this.c_pitchLimit) % ColorConfig.pitchChannels.length];\n                } else if (channel < song.pitchChannelCount + song.noiseChannelCount) {\n                    return ColorConfig.noiseChannels[((channel - song.pitchChannelCount) % this.c_noiseLimit) % ColorConfig.noiseChannels.length];\n                } else {\n                    return ColorConfig.modChannels[((channel - song.pitchChannelCount - song.noiseChannelCount) % this.c_modLimit) % ColorConfig.modChannels.length];\n                }\n            }\n        }\n        else {\n            if (useFixedOrder) color = channel;\n            // Determine if color is cached\n            if (ColorConfig.colorLookup.has(color)) {\n                return ColorConfig.colorLookup.get(color) as ChannelColors;\n            }\n            else {\n                // Formulaic color definition\n                let colorFormulaPitchLimit = this.c_colorFormulaPitchLimit;\n                let colorFormulaNoiseLimit = this.c_colorFormulaNoiseLimit;\n                let colorFormulaModLimit = this.c_colorFormulaModLimit;\n                if (channel < song.pitchChannelCount) {\n                    // Pitch formula\n\n                    let newChannelSecondary = \"hsl(\" + ((this.c_pitchSecondaryChannelHue + (color * this.c_pitchSecondaryChannelHueScale / this.c_pitchChannelCountOverride) * 256) % colorFormulaPitchLimit) + \",\"\n                        + (this.c_pitchSecondaryChannelSat * (1 - (this.c_pitchSecondaryChannelSatScale * Math.floor(color / 9)))) + \"%,\"\n                        + (this.c_pitchSecondaryChannelLum * (1 - (this.c_pitchSecondaryChannelLumScale * Math.floor(color / 9)))) + \"%)\";\n                    let newChannelPrimary = \"hsl(\" + ((this.c_pitchPrimaryChannelHue + (color * this.c_pitchPrimaryChannelHueScale / this.c_pitchChannelCountOverride) * 256) % colorFormulaPitchLimit) + \",\"\n                        + (this.c_pitchPrimaryChannelSat * (1 - (this.c_pitchPrimaryChannelSatScale * Math.floor(color / 9)))) + \"%,\"\n                        + (this.c_pitchPrimaryChannelLum * (1 - (this.c_pitchPrimaryChannelLumScale * Math.floor(color / 9)))) + \"%)\";\n                    let newNoteSecondary = \"hsl(\" + ((this.c_pitchSecondaryNoteHue + (color * this.c_pitchSecondaryNoteHueScale / this.c_pitchChannelCountOverride) * 256) % colorFormulaPitchLimit) + \",\"\n                        + (this.c_pitchSecondaryNoteSat * (1 - (this.c_pitchSecondaryNoteSatScale * Math.floor(color / 9)))) + \"%,\"\n                        + (this.c_pitchSecondaryNoteLum * (1 - (this.c_pitchSecondaryNoteLumScale * Math.floor(color / 9)))) + \"%)\";\n                    let newNotePrimary = \"hsl(\" + ((this.c_pitchPrimaryNoteHue + (color * this.c_pitchPrimaryNoteHueScale / this.c_pitchChannelCountOverride) * 256) % colorFormulaPitchLimit) + \",\"\n                        + (this.c_pitchPrimaryNoteSat * (1 - (this.c_pitchPrimaryNoteSatScale * Math.floor(color / 9)))) + \"%,\"\n                        + (this.c_pitchPrimaryNoteLum * (1 - (this.c_pitchPrimaryNoteLumScale * Math.floor(color / 9)))) + \"%)\";\n\n                    let newChannelColors = <ChannelColors>{ secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };\n                    ColorConfig.colorLookup.set(color, newChannelColors);\n                    return newChannelColors;\n\n                }\n                else if (channel < song.pitchChannelCount + song.noiseChannelCount) {\n                    // Noise formula\n\n                    let newChannelSecondary = \"hsl(\" + ((this.c_noiseSecondaryChannelHue + (((color - song.pitchChannelCount) * this.c_noiseSecondaryChannelHueScale) / this.c_noiseChannelCountOverride) * 256) % colorFormulaNoiseLimit) + \",\"\n                        + (this.c_noiseSecondaryChannelSat + color * this.c_noiseSecondaryChannelSatScale) + \"%,\"\n                        + (this.c_noiseSecondaryChannelLum + color * this.c_noiseSecondaryChannelLumScale) + \"%)\";\n                    let newChannelPrimary = \"hsl(\" + ((this.c_noisePrimaryChannelHue + (((color - song.pitchChannelCount) * this.c_noisePrimaryChannelHueScale) / this.c_noiseChannelCountOverride) * 256) % colorFormulaNoiseLimit) + \",\"\n                        + (this.c_noisePrimaryChannelSat + color * this.c_noisePrimaryChannelSatScale) + \"%,\"\n                        + (this.c_noisePrimaryChannelLum + color * this.c_noisePrimaryChannelLumScale) + \"%)\";\n                    let newNoteSecondary = \"hsl(\" + ((this.c_noiseSecondaryNoteHue + (((color - song.pitchChannelCount) * this.c_noiseSecondaryNoteHueScale) / this.c_noiseChannelCountOverride) * 256) % colorFormulaNoiseLimit) + \",\"\n                        + (this.c_noiseSecondaryNoteSat + color * this.c_noiseSecondaryNoteSatScale) + \"%,\"\n                        + (this.c_noiseSecondaryNoteLum + color * this.c_noiseSecondaryNoteLumScale) + \"%)\";\n                    let newNotePrimary = \"hsl(\" + ((this.c_noisePrimaryNoteHue + (((color - song.pitchChannelCount) * this.c_noisePrimaryNoteHueScale) / this.c_noiseChannelCountOverride) * 256) % colorFormulaNoiseLimit) + \",\"\n                        + (this.c_noisePrimaryNoteSat + color * this.c_noisePrimaryNoteSatScale) + \"%,\"\n                        + (this.c_noisePrimaryNoteLum + color * this.c_noisePrimaryNoteLumScale) + \"%)\";\n\n                    let newChannelColors = <ChannelColors>{ secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };\n                    ColorConfig.colorLookup.set(color, newChannelColors);\n                    return newChannelColors;\n                }\n                else {\n                    // Mod formula\n\n                    let newChannelSecondary = \"hsl(\" + ((this.c_modSecondaryChannelHue + (((color - song.pitchChannelCount - song.noiseChannelCount) * this.c_modSecondaryChannelHueScale) / this.c_modChannelCountOverride) * 256) % colorFormulaModLimit) + \",\"\n                        + (this.c_modSecondaryChannelSat + color * this.c_modSecondaryChannelSatScale) + \"%,\"\n                        + (this.c_modSecondaryChannelLum + color * this.c_modSecondaryChannelLumScale) + \"%)\";\n                    let newChannelPrimary = \"hsl(\" + ((this.c_modPrimaryChannelHue + (((color - song.pitchChannelCount - song.noiseChannelCount) * this.c_modPrimaryChannelHueScale) / this.c_modChannelCountOverride) * 256) % colorFormulaModLimit) + \",\"\n                        + (this.c_modPrimaryChannelSat + color * this.c_modPrimaryChannelSatScale) + \"%,\"\n                        + (this.c_modPrimaryChannelLum + color * this.c_modPrimaryChannelLumScale) + \"%)\";\n                    let newNoteSecondary = \"hsl(\" + ((this.c_modSecondaryNoteHue + (((color - song.pitchChannelCount - song.noiseChannelCount) * this.c_modSecondaryNoteHueScale) / this.c_modChannelCountOverride) * 256) % colorFormulaModLimit) + \",\"\n                        + (this.c_modSecondaryNoteSat + color * this.c_modSecondaryNoteSatScale) + \"%,\"\n                        + (this.c_modSecondaryNoteLum + color * this.c_modSecondaryNoteLumScale) + \"%)\";\n                    let newNotePrimary = \"hsl(\" + ((this.c_modPrimaryNoteHue + (((color - song.pitchChannelCount - song.noiseChannelCount) * this.c_modPrimaryNoteHueScale) / this.c_modChannelCountOverride) * 256) % colorFormulaModLimit) + \",\"\n                        + (this.c_modPrimaryNoteSat + color * this.c_modPrimaryNoteSatScale) + \"%,\"\n                        + (this.c_modPrimaryNoteLum + color * this.c_modPrimaryNoteLumScale) + \"%)\";\n\n                    let newChannelColors = <ChannelColors>{ secondaryChannel: newChannelSecondary, primaryChannel: newChannelPrimary, secondaryNote: newNoteSecondary, primaryNote: newNotePrimary };\n                    ColorConfig.colorLookup.set(color, newChannelColors);\n                    return newChannelColors;\n                }\n            }\n        }\n    }\n\n    private static readonly _styleElement = document.head.appendChild(HTML.style({ type: \"text/css\" }));\n\n    static setTheme(name: string): void {\n        let theme = this.themes[name];\n        if (theme == undefined) theme = ColorConfig.defaultTheme;\n        this._styleElement.textContent = theme;\n\n        // for getComputed\n        let valuesToAdd = \":root{\";\n\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--oscilloscope-line-L\") == \"\") valuesToAdd += \"--oscilloscope-line-L:var(--primary-text,white);\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--oscilloscope-line-R\") == \"\") valuesToAdd += \"--oscilloscope-line-R:var(--text-selection,rgba(119,68,255,0.99));\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--text-enabled-icon\") == \"\") valuesToAdd += \"--text-enabled-icon:\u2713 ;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--text-disabled-icon\") == \"\") valuesToAdd += \"--text-disabled-icon:\u3000;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--text-spacing-icon\") == \"\") valuesToAdd += \"--text-spacing-icon:\u3000;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--note-flash\") == \"\") valuesToAdd += \"--note-flash:#ffffff;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--note-flash-secondary\") == \"\") valuesToAdd += \"--note-flash-secondary:#ffffff77;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-channel-limit\") == \"\") valuesToAdd += \"--pitch-channel-limit:\" + Config.pitchChannelCountMax + \";\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--noise-channel-limit\") == \"\") valuesToAdd += \"--noise-channel-limit:\" + Config.noiseChannelCountMax + \";\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--mod-channel-limit\") == \"\") valuesToAdd += \"--mod-channel-limit:\" + Config.modChannelCountMax + \";\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--formula-pitch-channel-limit\") == \"\") valuesToAdd += \"--formula-pitch-channel-limit:360;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--formula-noise-channel-limit\") == \"\") valuesToAdd += \"--formula-noise-channel-limit:360;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--formula-mod-channel-limit\") == \"\") valuesToAdd += \"--formula-mod-channel-limit:360;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--editor-background\") == \"\") valuesToAdd += \"--editor-background:black;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--ui-widget-background\") == \"\") valuesToAdd += \"--ui-widget-background:#444;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--loop-accent\") == \"\") valuesToAdd += \"--loop-accent:#74f;\";\n        // if (getComputedStyle(this._styleElement).getPropertyValue(\"--link-accent\") == \"\") valuesToAdd += \"--link-accent:#9c64f7;\";\n        // if (getComputedStyle(this._styleElement).getPropertyValue(\"--mod-title\") == \"\") valuesToAdd += \"--mod-title:var(--link-accent);\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--box-selection-fill\") == \"\") valuesToAdd += \"--box-selection-fill:rgba(255,255,255,0.2);\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--primary-text\") == \"\") valuesToAdd += \"--primary-text:white;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--inverted-text\") == \"\") valuesToAdd += \"--inverted-text:black;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--track-editor-bg-pitch\") == \"\") valuesToAdd += \"--track-editor-bg-pitch:#444;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--track-editor-bg-pitch-dim\") == \"\") valuesToAdd += \"--track-editor-bg-pitch-dim:#333;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--track-editor-bg-noise\") == \"\") valuesToAdd += \"--track-editor-bg-noise:#444;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--track-editor-bg-noise-dim\") == \"\") valuesToAdd += \"--track-editor-bg-noise-dim:#333;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--track-editor-bg-mod\") == \"\") valuesToAdd += \"--track-editor-bg-mod:#234;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--track-editor-bg-mod-dim\") == \"\") valuesToAdd += \"--track-editor-bg-mod-dim:#123;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--mute-button-normal\") == \"\") valuesToAdd += \"--mute-button-normal:#ffa033;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--mute-button-mod\") == \"\") valuesToAdd += \"--mute-button-mod:#9a6bff;\";\n\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch1-secondary-channel\") == \"\") valuesToAdd += \"--pitch1-secondary-channel:#0099A1;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch1-primary-channel\") == \"\") valuesToAdd += \"--pitch1-primary-channel:#25F3FF;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch1-secondary-note\") == \"\") valuesToAdd += \"--pitch1-secondary-note:#00BDC7;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch1-primary-note\") == \"\") valuesToAdd += \"--pitch1-primary-note:#92F9FF;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch2-secondary-channel\") == \"\") valuesToAdd += \"--pitch2-secondary-channel:#A1A100;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch2-primary-channel\") == \"\") valuesToAdd += \"--pitch2-primary-channel:#FFFF25;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch2-secondary-note\") == \"\") valuesToAdd += \"--pitch2-secondary-note:#C7C700;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch2-primary-note\") == \"\") valuesToAdd += \"--pitch2-primary-note:#FFFF92;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch3-secondary-channel\") == \"\") valuesToAdd += \"--pitch3-secondary-channel:#C75000;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch3-primary-channel\") == \"\") valuesToAdd += \"--pitch3-primary-channel:#FF9752;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch3-secondary-note\") == \"\") valuesToAdd += \"--pitch3-secondary-note:#FF771C;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch3-primary-note\") == \"\") valuesToAdd += \"--pitch3-primary-note:#FFCDAB;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch4-secondary-channel\") == \"\") valuesToAdd += \"--pitch4-secondary-channel:#00A100;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch4-primary-channel\") == \"\") valuesToAdd += \"--pitch4-primary-channel:#50FF50;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch4-secondary-note\") == \"\") valuesToAdd += \"--pitch4-secondary-note:#00C700;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch4-primary-note\") == \"\") valuesToAdd += \"--pitch4-primary-note:#A0FFA0;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch5-secondary-channel\") == \"\") valuesToAdd += \"--pitch5-secondary-channel:#D020D0;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch5-primary-channel\") == \"\") valuesToAdd += \"--pitch5-primary-channel:#FF90FF;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch5-secondary-note\") == \"\") valuesToAdd += \"--pitch5-secondary-note:#E040E0;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch5-primary-note\") == \"\") valuesToAdd += \"--pitch5-primary-note:#FFC0FF;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch6-secondary-channel\") == \"\") valuesToAdd += \"--pitch6-secondary-channel:#7777B0;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch6-primary-channel\") == \"\") valuesToAdd += \"--pitch6-primary-channel:#A0A0FF;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch6-secondary-note\") == \"\") valuesToAdd += \"--pitch6-secondary-note:#8888D0;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch6-primary-note\") == \"\") valuesToAdd += \"--pitch6-primary-note:#D0D0FF;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch7-secondary-channel\") == \"\") valuesToAdd += \"--pitch7-secondary-channel:#8AA100;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch7-primary-channel\") == \"\") valuesToAdd += \"--pitch7-primary-channel:#DEFF25;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch7-secondary-note\") == \"\") valuesToAdd += \"--pitch7-secondary-note:#AAC700;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch7-primary-note\") == \"\") valuesToAdd += \"--pitch7-primary-note:#E6FF92;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch8-secondary-channel\") == \"\") valuesToAdd += \"--pitch8-secondary-channel:#DF0019;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch8-primary-channel\") == \"\") valuesToAdd += \"--pitch8-primary-channel:#FF98A4;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch8-secondary-note\") == \"\") valuesToAdd += \"--pitch8-secondary-note:#FF4E63;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch8-primary-note\") == \"\") valuesToAdd += \"--pitch8-primary-note:#FFB2BB;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch9-secondary-channel\") == \"\") valuesToAdd += \"--pitch9-secondary-channel:#00A170;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch9-primary-channel\") == \"\") valuesToAdd += \"--pitch9-primary-channel:#50FFC9;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch9-secondary-note\") == \"\") valuesToAdd += \"--pitch9-secondary-note:#00C78A;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch9-primary-note\") == \"\") valuesToAdd += \"--pitch9-primary-note:#83FFD9;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch10-secondary-channel\") == \"\") valuesToAdd += \"--pitch10-secondary-channel:#A11FFF;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch10-primary-channel\") == \"\") valuesToAdd += \"--pitch10-primary-channel:#CE8BFF;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch10-secondary-note\") == \"\") valuesToAdd += \"--pitch10-secondary-note:#B757FF;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--pitch10-primary-note\") == \"\") valuesToAdd += \"--pitch10-primary-note:#DFACFF;\";\n\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--noise1-secondary-channel\") == \"\") valuesToAdd += \"--noise1-secondary-channel:#6F6F6F;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--noise1-primary-channel\") == \"\") valuesToAdd += \"--noise1-primary-channel:#AAAAAA;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--noise1-secondary-note\") == \"\") valuesToAdd += \"--noise1-secondary-note:#A7A7A7;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--noise1-primary-note\") == \"\") valuesToAdd += \"--noise1-primary-note:#E0E0E0;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--noise2-secondary-channel\") == \"\") valuesToAdd += \"--noise2-secondary-channel:#996633;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--noise2-primary-channel\") == \"\") valuesToAdd += \"--noise2-primary-channel:#DDAA77;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--noise2-secondary-note\") == \"\") valuesToAdd += \"--noise2-secondary-note:#CC9966;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--noise2-primary-note\") == \"\") valuesToAdd += \"--noise2-primary-note:#F0D0BB;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--noise3-secondary-channel\") == \"\") valuesToAdd += \"--noise3-secondary-channel:#4A6D8F;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--noise3-primary-channel\") == \"\") valuesToAdd += \"--noise3-primary-channel:#77AADD;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--noise3-secondary-note\") == \"\") valuesToAdd += \"--noise3-secondary-note:#6F9FCF;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--noise3-primary-note\") == \"\") valuesToAdd += \"--noise3-primary-note:#BBD7FF;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--noise4-secondary-channel\") == \"\") valuesToAdd += \"--noise4-secondary-channel:#7A4F9A;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--noise4-primary-channel\") == \"\") valuesToAdd += \"--noise4-primary-channel:#AF82D2;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--noise4-secondary-note\") == \"\") valuesToAdd += \"--noise4-secondary-note:#9E71C1;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--noise4-primary-note\") == \"\") valuesToAdd += \"--noise4-primary-note:#D4C1EA;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--noise5-secondary-channel\") == \"\") valuesToAdd += \"--noise5-secondary-channel:#607837;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--noise5-primary-channel\") == \"\") valuesToAdd += \"--noise5-primary-channel:#A2BB77;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--noise5-secondary-note\") == \"\") valuesToAdd += \"--noise5-secondary-note:#91AA66;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--noise5-primary-note\") == \"\") valuesToAdd += \"--noise5-primary-note:#C5E2B2;\";\n\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--mod1-secondary-channel\") == \"\") valuesToAdd += \"--mod1-secondary-channel:#339955;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--mod1-primary-channel\") == \"\") valuesToAdd += \"--mod1-primary-channel:#77fc55;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--mod1-secondary-note\") == \"\") valuesToAdd += \"--mod1-secondary-note:#77ff8a;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--mod1-primary-note\") == \"\") valuesToAdd += \"--mod1-primary-note:#cdffee;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--mod2-secondary-channel\") == \"\") valuesToAdd += \"--mod2-secondary-channel:#993355;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--mod2-primary-channel\") == \"\") valuesToAdd += \"--mod2-primary-channel:#f04960;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--mod2-secondary-note\") == \"\") valuesToAdd += \"--mod2-secondary-note:#f057a0;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--mod2-primary-note\") == \"\") valuesToAdd += \"--mod2-primary-note:#ffb8de;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--mod3-secondary-channel\") == \"\") valuesToAdd += \"--mod3-secondary-channel:#553399;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--mod3-primary-channel\") == \"\") valuesToAdd += \"--mod3-primary-channel:#8855fc;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--mod3-secondary-note\") == \"\") valuesToAdd += \"--mod3-secondary-note:#aa64ff;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--mod3-primary-note\") == \"\") valuesToAdd += \"--mod3-primary-note:#f8ddff;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--mod4-secondary-channel\") == \"\") valuesToAdd += \"--mod4-secondary-channel:#a86436;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--mod4-primary-channel\") == \"\") valuesToAdd += \"--mod4-primary-channel:#c8a825;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--mod4-secondary-note\") == \"\") valuesToAdd += \"--mod4-secondary-note:#e8ba46;\";\n        if (getComputedStyle(this._styleElement).getPropertyValue(\"--mod4-primary-note\") == \"\") valuesToAdd += \"--mod4-primary-note:#fff6d3;\";\n\n        valuesToAdd += \"}\";\n        this._styleElement.textContent = valuesToAdd + this._styleElement.textContent;\n\n        const themeColor = <HTMLMetaElement>document.querySelector(\"meta[name='theme-color']\");\n        if (themeColor != null) {\n            themeColor.setAttribute(\"content\", getComputedStyle(document.documentElement).getPropertyValue('--ui-widget-background'));\n        }\n\n        this.resetColors();\n\n        this.usesColorFormula = (getComputedStyle(this._styleElement).getPropertyValue(\"--use-color-formula\").trim() == \"true\");\n\n        this.c_pitchLimit = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-channel-limit\");\n        this.c_noiseLimit = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-channel-limit\");\n        this.c_modLimit = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-channel-limit\");\n        this.c_colorFormulaPitchLimit = +getComputedStyle(this._styleElement).getPropertyValue(\"--formula-pitch-channel-limit\");\n        this.c_colorFormulaNoiseLimit = +getComputedStyle(this._styleElement).getPropertyValue(\"--formula-noise-channel-limit\");\n        this.c_colorFormulaModLimit = +getComputedStyle(this._styleElement).getPropertyValue(\"--formula-mod-channel-limit\");\n\n        this.c_invertedText = getComputedStyle(this._styleElement).getPropertyValue(\"--inverted-text\");\n        this.c_trackEditorBgNoiseDim = getComputedStyle(this._styleElement).getPropertyValue(\"--track-editor-bg-noise-dim\");\n        this.c_trackEditorBgNoise = getComputedStyle(this._styleElement).getPropertyValue(\"--track-editor-bg-noise\");\n        this.c_trackEditorBgModDim = getComputedStyle(this._styleElement).getPropertyValue(\"--track-editor-bg-mod-dim\");\n        this.c_trackEditorBgMod = getComputedStyle(this._styleElement).getPropertyValue(\"--track-editor-bg-mod\");\n        this.c_trackEditorBgPitchDim = getComputedStyle(this._styleElement).getPropertyValue(\"--track-editor-bg-pitch-dim\");\n        this.c_trackEditorBgPitch = getComputedStyle(this._styleElement).getPropertyValue(\"--track-editor-bg-pitch\");\n\n        if (this.usesColorFormula) {\n            this.c_pitchSecondaryChannelHue = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-channel-hue\");\n            this.c_pitchSecondaryChannelHueScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-channel-hue-scale\");\n            this.c_pitchSecondaryChannelSat = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-channel-sat\");\n            this.c_pitchSecondaryChannelSatScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-channel-sat-scale\");\n            this.c_pitchSecondaryChannelLum = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-channel-lum\");\n            this.c_pitchSecondaryChannelLumScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-channel-lum-scale\");\n            this.c_pitchPrimaryChannelHue = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-channel-hue\");\n            this.c_pitchPrimaryChannelHueScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-channel-hue-scale\");\n            this.c_pitchPrimaryChannelSat = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-channel-sat\");\n            this.c_pitchPrimaryChannelSatScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-channel-sat-scale\");\n            this.c_pitchPrimaryChannelLum = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-channel-lum\");\n            this.c_pitchPrimaryChannelLumScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-channel-lum-scale\");\n            this.c_pitchSecondaryNoteHue = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-note-hue\");\n            this.c_pitchSecondaryNoteHueScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-note-hue-scale\");\n            this.c_pitchSecondaryNoteSat = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-note-sat\");\n            this.c_pitchSecondaryNoteSatScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-note-sat-scale\");\n            this.c_pitchSecondaryNoteLum = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-note-lum\");\n            this.c_pitchSecondaryNoteLumScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-secondary-note-lum-scale\");\n            this.c_pitchPrimaryNoteHue = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-note-hue\");\n            this.c_pitchPrimaryNoteHueScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-note-hue-scale\");\n            this.c_pitchPrimaryNoteSat = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-note-sat\");\n            this.c_pitchPrimaryNoteSatScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-note-sat-scale\");\n            this.c_pitchPrimaryNoteLum = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-note-lum\");\n            this.c_pitchPrimaryNoteLumScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--pitch-primary-note-lum-scale\");\n\n            this.c_noiseSecondaryChannelHue = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-channel-hue\");\n            this.c_noiseSecondaryChannelHueScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-channel-hue-scale\");\n            this.c_noiseSecondaryChannelSat = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-channel-sat\");\n            this.c_noiseSecondaryChannelSatScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-channel-sat-scale\");\n            this.c_noiseSecondaryChannelLum = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-channel-lum\");\n            this.c_noiseSecondaryChannelLumScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-channel-lum-scale\");\n            this.c_noisePrimaryChannelHue = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-channel-hue\");\n            this.c_noisePrimaryChannelHueScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-channel-hue-scale\");\n            this.c_noisePrimaryChannelSat = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-channel-sat\");\n            this.c_noisePrimaryChannelSatScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-channel-sat-scale\");\n            this.c_noisePrimaryChannelLum = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-channel-lum\");\n            this.c_noisePrimaryChannelLumScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-channel-lum-scale\");\n            this.c_noiseSecondaryNoteHue = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-note-hue\");\n            this.c_noiseSecondaryNoteHueScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-note-hue-scale\");\n            this.c_noiseSecondaryNoteSat = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-note-sat\");\n            this.c_noiseSecondaryNoteSatScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-note-sat-scale\");\n            this.c_noiseSecondaryNoteLum = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-note-lum\");\n            this.c_noiseSecondaryNoteLumScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-secondary-note-lum-scale\");\n            this.c_noisePrimaryNoteHue = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-note-hue\");\n            this.c_noisePrimaryNoteHueScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-note-hue-scale\");\n            this.c_noisePrimaryNoteSat = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-note-sat\");\n            this.c_noisePrimaryNoteSatScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-note-sat-scale\");\n            this.c_noisePrimaryNoteLum = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-note-lum\");\n            this.c_noisePrimaryNoteLumScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--noise-primary-note-lum-scale\");\n\n            this.c_modSecondaryChannelHue = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-channel-hue\");\n            this.c_modSecondaryChannelHueScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-channel-hue-scale\");\n            this.c_modSecondaryChannelSat = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-channel-sat\");\n            this.c_modSecondaryChannelSatScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-channel-sat-scale\");\n            this.c_modSecondaryChannelLum = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-channel-lum\");\n            this.c_modSecondaryChannelLumScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-channel-lum-scale\");\n            this.c_modPrimaryChannelHue = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-channel-hue\");\n            this.c_modPrimaryChannelHueScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-channel-hue-scale\");\n            this.c_modPrimaryChannelSat = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-channel-sat\");\n            this.c_modPrimaryChannelSatScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-channel-sat-scale\");\n            this.c_modPrimaryChannelLum = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-channel-lum\");\n            this.c_modPrimaryChannelLumScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-channel-lum-scale\");\n            this.c_modSecondaryNoteHue = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-note-hue\");\n            this.c_modSecondaryNoteHueScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-note-hue-scale\");\n            this.c_modSecondaryNoteSat = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-note-sat\");\n            this.c_modSecondaryNoteSatScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-note-sat-scale\");\n            this.c_modSecondaryNoteLum = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-note-lum\");\n            this.c_modSecondaryNoteLumScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-secondary-note-lum-scale\");\n            this.c_modPrimaryNoteHue = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-note-hue\");\n            this.c_modPrimaryNoteHueScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-note-hue-scale\");\n            this.c_modPrimaryNoteSat = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-note-sat\");\n            this.c_modPrimaryNoteSatScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-note-sat-scale\");\n            this.c_modPrimaryNoteLum = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-note-lum\");\n            this.c_modPrimaryNoteLumScale = +getComputedStyle(this._styleElement).getPropertyValue(\"--mod-primary-note-lum-scale\");\n\n            if (getComputedStyle(this._styleElement).getPropertyValue(\"--formula-pitch-channel-count-override\") != \"\") this.c_pitchChannelCountOverride = +getComputedStyle(this._styleElement).getPropertyValue(\"--formula-pitch-channel-count-override\");\n            if (getComputedStyle(this._styleElement).getPropertyValue(\"--formula-noise-channel-count-override\") != \"\") this.c_noiseChannelCountOverride = +getComputedStyle(this._styleElement).getPropertyValue(\"--formula-noise-channel-count-override\");\n            if (getComputedStyle(this._styleElement).getPropertyValue(\"--formula-mod-channel-count-override\") != \"\") this.c_modChannelCountOverride = +getComputedStyle(this._styleElement).getPropertyValue(\"--formula-mod-channel-count-override\");\n        }\n\n    }\n\n    static getComputed(name: string): string {\n        return getComputedStyle(this._styleElement).getPropertyValue(name);\n    }\n}\n", "//A simple events system for effectively direct links without actualy linking files or references\nclass EventManager<T extends string, D, E, C extends (data: D, extradata: E | undefined) => void> {\n    private activeEvents: T[];\n    private listeners: Record<T, C[]>;\n\n    constructor() {\n        this.activeEvents = [];\n        this.listeners = {} as any;\n    }\n\n\n    raise(eventType: T, eventData: D, extraEventData?: E): void {\n        if (this.listeners[eventType] == undefined) {\n            return;\n        }\n        this.activeEvents.push(eventType);\n        for (let i = 0; i < this.listeners[eventType].length; i++) {\n            this.listeners[eventType][i](eventData, extraEventData)\n        }\n        this.activeEvents.pop();\n    }\n\n    listen(eventType: T, callback: C): void {\n        if (this.listeners[eventType] == undefined) {\n            this.listeners[eventType] = []\n        }\n        this.listeners[eventType].push(callback)\n    }\n\n    unlisten(eventType: T, callback: C): void {\n        if (this.listeners[eventType] == undefined) {\n            return;\n        }\n        const lisen = this.listeners[eventType].indexOf(callback);\n        if (lisen != -1) {\n            this.listeners[eventType].splice(lisen, 1);\n        }\n    }\n    unlistenAll(eventType: T): void {\n        if (this.listeners[eventType] == undefined) {\n            return;\n        }\n        this.listeners[eventType] = [];\n    }\n}\n\nexport const events = new EventManager()", "import { ColorConfig } from \"../editor/ColorConfig\";\nimport { events } from \"./Events\";\n\nexport class oscilloscopeCanvas {\n    _EventUpdateCanvas:Function;\n\n    constructor(public readonly canvas: HTMLCanvasElement, readonly scale = 1) {\n        this._EventUpdateCanvas = function (directlinkL: Float32Array, directlinkR?: Float32Array): void {\n            if (directlinkR) {\n                var ctx = canvas.getContext(\"2d\") as CanvasRenderingContext2D;\n\n                ctx.fillStyle = ColorConfig.getComputed(\"--editor-background\");\n                ctx.fillRect(0, 0, canvas.width, canvas.height);\n\n                ctx.fillStyle = ColorConfig.getComputed(\"--oscilloscope-line-L\");\n                for (let i = directlinkL.length - 1; i >= directlinkL.length - 1 - (canvas.width/scale); i--) {\n                    let x = i - (directlinkL.length - 1) + (canvas.width/scale);\n                    let yl = (directlinkL[i] * (canvas.height/scale / 2) + (canvas.height/scale / 2));\n\n                    ctx.fillRect((x - 1) * scale, (yl - 1) * scale, 1 * scale, 1.5 * scale);\n                    if (x == 0) break;\n                }\n                ctx.fillStyle = ColorConfig.getComputed(\"--oscilloscope-line-R\"); //less ctx style calls = less expensive??? also avoiding uncached colors\n                for (let i = directlinkR.length - 1; i >= directlinkR.length - 1 - (canvas.width/scale); i--) {\n                    let x = i - (directlinkR.length - 1) + (canvas.width/scale);\n                    let yr = (directlinkR[i] * (canvas.height/scale / 2) + (canvas.height/scale / 2));\n                    \n                    ctx.fillRect((x - 1)*scale, (yr - 1)*scale, 1*scale, 1.5*scale);\n                    if (x == 0) break;\n                }\n            }\n        };\n        events.listen(\"oscilloscopeUpdate\", this._EventUpdateCanvas);\n    }\n\n\n}", "// Copyright (c) John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { Instrument } from \"./Instrument\";\nimport { Pattern } from \"./Pattern\";\n\nexport class Channel {\n    octave = 0;\n    readonly instruments: Instrument[] = [];\n    readonly patterns: Pattern[] = [];\n    readonly bars: number[] = [];\n    muted = false;\n    visible = true;\n    name = \"\";\n    color = 0;\n}\n", "/*\nThis file contains code to compute digital audio filter coefficients based on\nthe desired type, cutoff frequency, and other parameters. You can use these\ncoefficients to apply the filter to audio samples. It also contains code to\nanalyze these filters, which is useful for graphically displaying their effects.\n\nAll of the filters in this file are known as \"Infinite Impulse Response\" or IIR\nfilters, because older output samples contribute feedback to newer output\nsamples and thus contribute to all future samples, although typically filters\nare design to reduce the contribution of older samples over time.\n\nLow-pass filters aka high-cut filters preserve audio signals below the cutoff\nfrequency, and attenuate audio signals above the cutoff frequency. High-pass\nfilters aka low-cut filters are the reverse. All-pass filters do not affect the\nvolume of the signal at all but induce phase changes above the cutoff frequency.\nPeak/Notch filters maintain the volume on either side of the cutoff frequency,\nbut raise or lower the volume at that frequency. \n\nThe number of old samples used in the filter determines the \"order\" of the\nfilter. First-order filters generally have shallower slopes, and second-order\nfilters generally have steeper slopes and can be configured to \"resonate\",\nmeaning they have a louder peak at the cutoff frequency. This file contains\nfirst-order filters and second-order filters, meaning one or two older samples\nare involved, as well as the current input sample.\n\nThe class FilterCoefficients is defined lower in this file. You can use it to\nset up a first order filter like this:\n\n\tconst cutoffRadiansPerSample = 2 * Math.PI * cutoffHz / sampleRate;\n\tconst filter = new FilterCoefficients();\n\tfilter.lowPass1stOrderButterworth(cutoffRadiansPerSample);\n\t// output sample coefficients are conventionally called a0, a1, etc. Note\n\t// that a[0] is typically normalized to 1.0 and need not be used directly.\n\tconst a: number[] = filter.a;\n\t// input sample coefficients are conventionally called b0, b1, etc\n\tconst b: number[] = filter.b;\n\t// filter input samples, x[0] is the most recent, x[1] is the previous one, etc.\n\tconst x: number[] = [0, 0, 0];\n\t// filter output samples, y[0] will be computed by the filter based on input\n\t// samples and older output samples.\n\tconst y: number[] = [0, 0, 0];\n\nThen to apply the first-order filter to samples inside a loop, using the current\ninput sample (x[0]) as well as previous input and output samples, do this:\n\n\t// Compute the next output sample y[0]:\n\ty[0] = b[0] * x[0] + b[1] * x[1] - a[1] * y[1];\n\t// Remember the input and output samples for next time:\n\tx[1] = x[0];\n\ty[1] = y[0];\n\n2nd order filters are similar, but have more parameters and require more old\nsamples:\n\n\t// Compute the next output sample y[0]:\n\ty[0] = b[0] * x[0] + b[1] * x[1] + b[2] * x[2] - a[1] * y[1] - a[2] * y[2];\n\t// Remember the input and output samples for next time:\n\tx[2] = x[1];\n\tx[1] = x[0];\n\ty[2] = y[1];\n\ty[1] = y[0];\n\nYou can compose multiple filters into a higher order filter, although doing so\nreduces the numerical stability of the filter:\n\n\tfilter3.combination(filter1, filter2);\n\t// filter3.order will equal: filter1.order + filter2.order\n\t// The number of coefficients in filter3.a and filter3.b will be: order + 1\n\nThis file also contains a class called FrequencyResponse. You can use it to\ndetermine how much gain or attenuation a filter would apply to sounds at a\nspecific input frequency, as well as the phase offset:\n\n\tconst inputRadians = 2 * Math.PI * cutoffHz / sampleRate;\n\tconst response = new FrequencyResponse();\n\tresponse.analyze(filter, inputRadians);\n\tconst gainResponse = response.magnitude();\n\tconst phaseResponse = response.angle();\n\nThat's basically all you need to know to use this code, but I'll also explain\nhow the analysis works.\n\nA first-order digital IIR filter is ordinarily implemented in a form like this:\n\n\toutput = inputCoeff * input + prevInputCoeff * prevInput - prevOutputCoeff * prevOutput;\n\nIf we adopt standard naming conventions for audio filters, this same code would\ninstead look like:\n\n\t// x0 = current input, x1 = prevInput, y0 = current output, y1 = prevOutput\n\ty0 = b0*x0 + b1*x1 - a1*y1;\n\nLeaving behind the world of code for a moment and entering the world of algebra,\nwe can rewrite this equation by moving all the output terms to the left side,\nand we can add a coefficient to the y0 term called a0 (which is typically\nnormalized to 1.0, which is why I didn't bother including it until now):\n\n\ta0*y0 + a1*y1 = b0*x0 + b1*x1\n\nThis is known as the symmetrical form of the filter, and it will help us analyze\nthe impact of the filter on an input audio signal. Here's a lesson that helped\nme understand the symmetrical form:\nhttps://web.archive.org/web/20200626183458/http://123.physics.ucdavis.edu/week_5_files/filters/digital_filter.pdf\n\nThe end of that lesson introduces a concept called the \"delay operator\" which\nlooks like \"z^-1\", which (magically) turns a sample into the previous sample\nwhen you multiply them. For example:\n\n\tx0 * z^-1 = x1\n\nThe lesson doesn't explain how it actually works. Audio signals aren't always\npredictable, which means that you generally can't do math on a single sample to\ncompute what the previous sample was. However, some audio signals ARE\npredictable, such as pure sine waves. Fortunately, all audio signals can be\nbroken down into a sum of independent sine waves. We can pick one sine wave at a\ntime, and use it to analyze the filter's impact on waves at that frequency. In\npractice, this tells us what the filter will do to unpredictable input samples\nthat contain a partial sine wave at that frequency.\n\nTechnically, you can't just use a single sine wave sample to determine the\nprevious sine wave sample, because each possible value is passed going upwards\nand downwards once per period and the direction is ambigous. This is where we\nneed to move into the complex number domain, where the real and imaginary\ncomponents can provide enough information to compute the previous position on\nthe input signal. So now instead of talking about sine waves, we're talking\nabout waves where the imaginary component is a sine wave and the real component\nis a cosine wave at the same frequency. Together, they trace around a unit\ncircle in the complex domain, and each sample is just a consistent rotation\napplied to the previous sample. The \"delay operator\" described above, z^-1, is\nthis same rotation applied in reverse, and it can be computed as:\n\n\tz^-1 = cos(radiansPerSample) - i * sin(radiansPerSample)\n\nMath nerds may be interested to know that \"Euler's formula\" was used here, but\nexplaining what that means is probably beyond the scope of this documentation\naside from noting that a complex number on the unit circle represents a 2D\nrotation that you can apply via multiplication.\n\nNow we can rewrite the symmetrical form using the delay operator and algebra:\n\n\ta0*y0 + a1*y0*z^-1 = b0*x0 + b1*x0*z^-1\n\ty0 * (a0 + a1*z^-1) = x0 * (b0 + b1*z^-1)\n\ty0 = x0 * (b0 + b1*z^-1) / (a0 + a1*z^-1)\n\ty0 / x0 = (b0 + b1*z^-1) / (a0 + a1*z^-1)\n\nThat last equation expresses the relationship between the input and output\nsignals (y0/x0) in terms of the filter coefficients and delay operator. At this\npoint, the specific values of the input and output samples don't even matter!\nThis is called the \"transfer function\", and it's conventionally named \"H(z)\":\n\n\tH(z) = (b0 + b1*z^-1) / (a0 + a1*z^-1)\n\nIf you plug in actual filter coefficients and express the delay operators as\ncomplex numbers with the appropriate trigonometry functions, the transfer\nfunction can be computed and produces a complex number that represents the\nrelationship between the input and output signals, whose magnitude represents\nthe volume gain (or attenuation) of signals at that frequency, and whose angle\nrepresents how much phase shift is applied by the filter to signals at that\nfrequency.\n\n(Note that in order to compute the transfer function, you'll need to do\nsomething about the complex number in the denominator. It turns out you can turn\nthe denominator into a real number by multiplying both the numerator and\ndenominator by the complex conjugate of the denominator, which is just the\ndenominator with the imaginary component negated.)\n\nFinally, I'll list some of the links that helped me understand filters and\nprovided some of the algorithms I that use here.\n\nHere's where I found accurate 2nd order low-pass, high-pass, and high-shelf\ndigital filters:\nhttps://web.archive.org/web/20120531011328/http://www.musicdsp.org/files/Audio-EQ-Cookbook.txt\n\nThis page is how I found a link to the cookbook article above. It claims these\nfilters are Butterworth filters:\nhttp://web.archive.org/web/20191213120120/https://crypto.stanford.edu/~blynn/sound/analog.html\n\nI found the first-order digital Butterworth filter coefficients at:\nhttps://www.researchgate.net/publication/338022014_Digital_Implementation_of_Butterworth_First-Order_Filter_Type_IIR\n\nThis meta-paper helped me understand how to make 2nd order peak/notch filters:\nhttps://web.archive.org/web/20170706085655/https://www.thesounddesign.com/MIO/EQ-Coefficients.pdf\n\nBeepBox originally used simpler low-pass filters that I adapted from SFXR:\nhttps://www.drpetter.se/project_sfxr.html\nFor low cutoff frequencies, the simpler filters and the Butterworth filters are\nnearly identical, but when closer to the nyquist frequency the simpler filters\ncreate extra resonance.\n*/\n\nexport class FilterCoefficients {\n\treadonly a: number[] = [1.0]; // output coefficients (negated, keep a[0]=1)\n\treadonly b: number[] = [1.0]; // input coefficients\n\torder = 0;\n\t\n\tlinearGain0thOrder(linearGain: number): void {\n\t\t//a[0] = 1.0; // a0 should always be normalized to 1.0, no need to assign it directly.\n\t\tthis.b[0] = linearGain;\n\t\tthis.order = 0;\n\t}\n\t\n\tlowPass1stOrderButterworth(cornerRadiansPerSample: number): void {\n\t\t// First-order Butterworth low-pass filter according to:\n\t\t// https://www.researchgate.net/publication/338022014_Digital_Implementation_of_Butterworth_First-Order_Filter_Type_IIR\n\t\t// A butterworth filter is one where the amplitude response is equal to:\n\t\t// 1 / \u221A(1 + (freq / cutoffFreq)^(2 * order))\n\t\tconst g = 1.0 / Math.tan(cornerRadiansPerSample * 0.5);\n\t\tconst a0 = 1.0 + g;\n\t\tthis.a[1] = (1.0 - g) / a0;\n\t\tthis.b[1] = this.b[0] = 1 / a0;\n\t\tthis.order = 1;\n\t}\n\t\n\tlowPass1stOrderSimplified(cornerRadiansPerSample: number): void {\n\t\t// The output of this filter is nearly identical to the 1st order\n\t\t// Butterworth low-pass above, except if the cutoff is set to nyquist/3,\n\t\t// then the output is the same as the input, and if the cutoff is higher\n\t\t// than that, then the output actually resonates at high frequencies\n\t\t// instead of attenuating.\n\t\t// I'm guessing this filter was converted from analog to digital using\n\t\t// the \"matched z-transform\" method instead of the \"bilinear transform\"\n\t\t// method. The difference is that the bilinear transform warps\n\t\t// frequencies so that the lowpass response of zero at analogue \u221Ehz maps\n\t\t// to the digital nyquist frequency, whereas the matched z-transform\n\t\t// preserves the frequency of the filter response but also adds the\n\t\t// reflected response from above the nyquist frequency.\n\t\tconst g = 2.0 * Math.sin(cornerRadiansPerSample * 0.5);\n\t\tthis.a[1] = g - 1.0;\n\t\tthis.b[0] = g;\n\t\tthis.b[1] = 0.0;\n\t\t/*\n\t\t// Alternatively:\n\t\tconst g = 1.0 / (2.0 * Math.sin(cornerRadiansPerSample / 2));\n\t\tconst a0 = g;\n\t\tthis.a[1] = (1.0 - g) / a0;\n\t\tthis.b[0] = 1.0 / a0;\n\t\tthis.b[1] = 0.0 / a0;\n\t\t*/\n\t\tthis.order = 1;\n\t}\n\t\n\thighPass1stOrderButterworth(cornerRadiansPerSample: number): void {\n\t\t// First-order Butterworth high-pass filter according to:\n\t\t// https://www.researchgate.net/publication/338022014_Digital_Implementation_of_Butterworth_First-Order_Filter_Type_IIR\n\t\tconst g = 1.0 / Math.tan(cornerRadiansPerSample * 0.5);\n\t\tconst a0 = 1.0 + g;\n\t\tthis.a[1] = (1.0 - g) / a0;\n\t\tthis.b[0] = g / a0;\n\t\tthis.b[1] = -g / a0;\n\t\tthis.order = 1;\n\t}\n\t/*\n\thighPass1stOrderSimplified(cornerRadiansPerSample: number): void {\n\t\t// The output of this filter is nearly identical to the 1st order\n\t\t// Butterworth high-pass above, except it resonates when the cutoff\n\t\t// appoaches the nyquist.\n\t\tconst g = 2.0 * Math.sin(cornerRadiansPerSample * 0.5);\n\t\tthis.a[1] = g - 1.0;\n\t\tthis.b[0] = 1.0;\n\t\tthis.b[1] = -1.0;\n\t\tthis.order = 1;\n\t}\n\t*/\n\thighShelf1stOrder(cornerRadiansPerSample: number, shelfLinearGain: number): void {\n\t\t// I had trouble figuring this one out because I couldn't find any\n\t\t// online algorithms that I understood. There are 3 degrees of freedom\n\t\t// and I could narrow down a couple of them based on the desired gain at\n\t\t// DC and nyquist, but getting the cutoff frequency correct took a\n\t\t// little bit of trial and error in my attempts to interpret page 53 of\n\t\t// this chapter: http://www.music.mcgill.ca/~ich/classes/FiltersChap2.pdf\n\t\t// Obviously I don't fully understand the bilinear transform yet!\n\t\tconst tan = Math.tan(cornerRadiansPerSample * 0.5);\n\t\tconst sqrtGain = Math.sqrt(shelfLinearGain);\n\t\tconst g = (tan * sqrtGain - 1) / (tan * sqrtGain + 1.0);\n\t\tconst a0 = 1.0;\n\t\tthis.a[1] = g / a0;\n\t\tthis.b[0] = (1.0 + g + shelfLinearGain * (1.0 - g)) / (2.0 * a0);\n\t\tthis.b[1] = (1.0 + g - shelfLinearGain * (1.0 - g)) / (2.0 * a0);\n\t\tthis.order = 1;\n\t}\n\t\n\tallPass1stOrderInvertPhaseAbove(cornerRadiansPerSample: number): void {\n\t\tconst g = (Math.sin(cornerRadiansPerSample) - 1.0) / Math.cos(cornerRadiansPerSample);\n\t\tthis.a[1] = g;\n\t\tthis.b[0] = g;\n\t\tthis.b[1] = 1.0;\n\t\tthis.order = 1;\n\t}\n\t\n\t/*\n\t// I haven't found a practical use for this version of the all pass filter.\n\t// It seems to create a weird subharmonic when used in a delay feedback loop.\n\tallPass1stOrderInvertPhaseBelow(cornerRadiansPerSample: number): void {\n\t\tconst g = (Math.sin(cornerRadiansPerSample) - 1.0) / Math.cos(cornerRadiansPerSample);\n\t\tthis.a[1] = g;\n\t\tthis.b[0] = -g;\n\t\tthis.b[1] = -1.0;\n\t\tthis.order = 1;\n\t}\n\t*/\n\t\n\tallPass1stOrderFractionalDelay(delay: number) {\n\t\t// Very similar to allPass1stOrderInvertPhaseAbove, but configured\n\t\t// differently and for a different purpose! Useful for interpolating\n\t\t// between samples in a delay line.\n\t\tconst g = (1.0 - delay) / (1.0 + delay);\n\t\tthis.a[1] = g;\n\t\tthis.b[0] = g;\n\t\tthis.b[1] = 1.0;\n\t\tthis.order = 1;\n\t}\n\t\n\tlowPass2ndOrderButterworth(cornerRadiansPerSample: number, peakLinearGain: number): void {\n\t\t// This is Butterworth if peakLinearGain=1/\u221A2 according to:\n\t\t// http://web.archive.org/web/20191213120120/https://crypto.stanford.edu/~blynn/sound/analog.html\n\t\t// An interesting property is that if peakLinearGain=1/16 then the\n\t\t// output resembles a first-order lowpass at a cutoff 4 octaves lower,\n\t\t// although it gets distorted near the nyquist.\n\t\tconst alpha = Math.sin(cornerRadiansPerSample) / (2.0 * peakLinearGain);\n\t\tconst cos = Math.cos(cornerRadiansPerSample);\n\t\tconst a0 = 1.0 + alpha;\n\t\tthis.a[1] = -2.0*cos / a0;\n\t\tthis.a[2] = (1 - alpha) / a0;\n\t\tthis.b[2] = this.b[0] = (1 - cos) / (2.0*a0);\n\t\tthis.b[1] = (1 - cos) / a0;\n\t\tthis.order = 2;\n\t}\n\t\n\tlowPass2ndOrderSimplified(cornerRadiansPerSample: number, peakLinearGain: number): void {\n\t\t// This filter is adapted from the one in the SFXR source code:\n\t\t// https://www.drpetter.se/project_sfxr.html\n\t\t// The output is nearly identical to the resonant Butterworth low-pass\n\t\t// above, except it resonates too much when the cutoff appoaches the\n\t\t// nyquist. If the resonance is set to zero and the cutoff is set to\n\t\t// nyquist/3, then the output is the same as the input.\n\t\tconst g = 2.0 * Math.sin(cornerRadiansPerSample / 2.0);\n\t\tconst filterResonance = 1.0 - 1.0 / (2.0 * peakLinearGain);\n\t\tconst feedback = filterResonance + filterResonance / (1.0 - g);\n\t\tthis.a[1] = 2.0*g + (g - 1.0) * g*feedback - 2.0;\n\t\tthis.a[2] = (g - 1.0) * (g - g*feedback - 1.0);\n\t\tthis.b[0] = g*g;\n\t\tthis.b[1] = 0;\n\t\tthis.b[2] = 0;\n\t\tthis.order = 2;\n\t}\n\t\n\thighPass2ndOrderButterworth(cornerRadiansPerSample: number, peakLinearGain: number): void {\n\t\tconst alpha = Math.sin(cornerRadiansPerSample) / (2 * peakLinearGain);\n\t\tconst cos = Math.cos(cornerRadiansPerSample);\n\t\tconst a0 = 1.0 + alpha;\n\t\tthis.a[1] = -2.0*cos / a0;\n\t\tthis.a[2] = (1.0 - alpha) / a0;\n\t\tthis.b[2] = this.b[0] = (1.0 + cos) / (2.0*a0);\n\t\tthis.b[1] = -(1.0 + cos) / a0;\n\t\tthis.order = 2;\n\t}\n\t/*\n\thighPass2ndOrderSimplified(cornerRadiansPerSample: number, peakLinearGain: number): void {\n\t\tconst g = 2.0 * Math.sin(cornerRadiansPerSample * 0.5);\n\t\tconst filterResonance = 1.0 - 1.0 / (2.0 * peakLinearGain);\n\t\tconst feedback = filterResonance + filterResonance / (1.0 - g);\n\t\tthis.a[1] = 2.0*g + (g - 1.0) * g*feedback - 2.0;\n\t\tthis.a[2] = (g - 1.0) * (g - g*feedback - 1.0);\n\t\tthis.b[0] = 1.0;\n\t\tthis.b[1] = -2.0;\n\t\tthis.b[2] = 1.0;\n\t\tthis.order = 2;\n\t}\n\t*/\n\thighShelf2ndOrder(cornerRadiansPerSample: number, shelfLinearGain: number, slope: number): void {\n\t\tconst A = Math.sqrt(shelfLinearGain);\n\t\tconst c = Math.cos(cornerRadiansPerSample);\n\t\tconst Aplus = A + 1.0;\n\t\tconst Aminus = A - 1.0;\n\t\tconst alpha = Math.sin(cornerRadiansPerSample) * 0.5 * Math.sqrt((Aplus / A) * (1.0 / slope - 1.0) + 2.0);\n\t\tconst sqrtA2Alpha = 2.0 * Math.sqrt(A) * alpha;\n\t\tconst a0 =   (Aplus  - Aminus * c + sqrtA2Alpha);\n\t\tthis.a[1] =  2 *     (Aminus - Aplus  * c              ) / a0;\n\t\tthis.a[2] =          (Aplus  - Aminus * c - sqrtA2Alpha) / a0;\n\t\tthis.b[0] =      A * (Aplus  + Aminus * c + sqrtA2Alpha) / a0;\n\t\tthis.b[1] = -2 * A * (Aminus + Aplus  * c              ) / a0;\n\t\tthis.b[2] =      A * (Aplus  + Aminus * c - sqrtA2Alpha) / a0;\n\t\tthis.order = 2;\n\t}\n\n\tpeak2ndOrder(cornerRadiansPerSample: number, peakLinearGain: number, bandWidthScale: number): void {\n\t\tconst sqrtGain = Math.sqrt(peakLinearGain);\n\t\tconst bandWidth = bandWidthScale * cornerRadiansPerSample / (sqrtGain >= 1 ? sqrtGain : 1/sqrtGain);\n\t\t//const bandWidth = bandWidthScale * cornerRadiansPerSample / Math.max(sqrtGain, 1.0);\n\t\tconst alpha = Math.tan(bandWidth * 0.5);\n\t\tconst a0 = 1.0 + alpha / sqrtGain;\n\t\tthis.b[0] = (1.0 + alpha * sqrtGain) / a0;\n\t\tthis.b[1] = this.a[1] = -2.0 * Math.cos(cornerRadiansPerSample) / a0;\n\t\tthis.b[2] = (1.0 - alpha * sqrtGain) / a0;\n\t\tthis.a[2] = (1.0 - alpha / sqrtGain) / a0;\n\t\tthis.order = 2;\n\t}\n\t/*\n\t// Create a higher order filter by combining two lower order filters.\n\t// However, making high order filters in this manner results in instability.\n\t// It is recommended to apply the 2nd order filters (biquads) in sequence instead.\n\tcombination(filter1: FilterCoefficients, filter2: FilterCoefficients): void {\n\t\tthis.order = filter1.order + filter2.order;\n\t\tfor (let i = 0; i <= this.order; i++) {\n\t\t\tthis.a[i] = 0.0;\n\t\t\tthis.b[i] = 0.0;\n\t\t}\n\t\tfor (let i = 0; i <= filter1.order; i++) {\n\t\t\tfor (let j = 0; j <= filter2.order; j++) {\n\t\t\t\tthis.a[i + j] += filter1.a[i] * filter2.a[j];\n\t\t\t\tthis.b[i + j] += filter1.b[i] * filter2.b[j];\n\t\t\t}\n\t\t}\n\t}\n\t\n\tscaledDifference(other: FilterCoefficients, scale: number): void {\n\t\tif (other.order != this.order) throw new Error();\n\t\tfor (let i = 0; i <= this.order; i++) {\n\t\t\tthis.a[i] = (this.a[i] - other.a[i]) * scale;\n\t\t\tthis.b[i] = (this.b[i] - other.b[i]) * scale;\n\t\t}\n\t}\n\t\n\tcopy(other: FilterCoefficients): void {\n\t\tthis.order = other.order;\n\t\tfor (let i = 0; i <= this.order; i++) {\n\t\t\tthis.a[i] = other.a[i];\n\t\t\tthis.b[i] = other.b[i];\n\t\t}\n\t}\n\t*/\n}\n\nexport class FrequencyResponse {\n\treal = 0.0;\n\timag = 0.0;\n\tdenom = 1.0;\n\t\n\tanalyze(filter: FilterCoefficients, radiansPerSample: number): void {\n\t\tthis.analyzeComplex(filter, Math.cos(radiansPerSample), Math.sin(radiansPerSample));\n\t}\n\t\n\tanalyzeComplex(filter: FilterCoefficients, real: number, imag: number): void {\n\t\tconst a: number[] = filter.a;\n\t\tconst b: number[] = filter.b;\n\t\tconst realZ1 = real;\n\t\tconst imagZ1 = -imag;\n\t\tlet realNum = b[0] + b[1] * realZ1;\n\t\tlet imagNum = b[1] * imagZ1;\n\t\tlet realDenom = 1.0 + a[1] * realZ1;\n\t\tlet imagDenom = a[1] * imagZ1;\n\t\tlet realZ = realZ1;\n\t\tlet imagZ = imagZ1;\n\t\tfor (let i = 2; i <= filter.order; i++) {\n\t\t\tconst realTemp = realZ * realZ1 - imagZ * imagZ1;\n\t\t\tconst imagTemp = realZ * imagZ1 + imagZ * realZ1;\n\t\t\trealZ = realTemp;\n\t\t\timagZ = imagTemp;\n\t\t\trealNum += b[i] * realZ;\n\t\t\timagNum += b[i] * imagZ;\n\t\t\trealDenom += a[i] * realZ;\n\t\t\timagDenom += a[i] * imagZ;\n\t\t}\n\t\tthis.denom = realDenom * realDenom + imagDenom * imagDenom;\n\t\tthis.real = realNum * realDenom + imagNum * imagDenom;\n\t\tthis.imag = imagNum * realDenom - realNum * imagDenom;\n\t}\n\t\n\tmagnitude(): number {\n\t\treturn Math.sqrt(this.real * this.real + this.imag * this.imag) / this.denom;\n\t}\n\t\n\tangle(): number {\n\t\treturn Math.atan2(this.imag, this.real);\n\t}\n}\n\nexport class DynamicBiquadFilter {\n\ta1 = 0.0;\n\ta2 = 0.0;\n\tb0 = 1.0;\n\tb1 = 0.0;\n\tb2 = 0.0;\n\ta1Delta = 0.0;\n\ta2Delta = 0.0;\n\tb0Delta = 0.0;\n\tb1Delta = 0.0;\n\tb2Delta = 0.0;\n\toutput1 = 0.0;\n\toutput2 = 0.0;\n\t\n\t// Some filter types are more stable when interpolating between coefficients\n\t// if the \"b\" coefficient interpolation is multiplicative. Don't enable this\n\t// for filter types where the \"b\" coefficients might change sign!\n\tuseMultiplicativeInputCoefficients = false;\n\t\n\tresetOutput(): void {\n\t\tthis.output1 = 0.0;\n\t\tthis.output2 = 0.0;\n\t}\n\t\n\tloadCoefficientsWithGradient(start: FilterCoefficients, end: FilterCoefficients, deltaRate: number, useMultiplicativeInputCoefficients: boolean): void {\n\t\tif (start.order != 2 || end.order != 2) throw new Error();\n\t\tthis.a1 = start.a[1];\n\t\tthis.a2 = start.a[2];\n\t\tthis.b0 = start.b[0];\n\t\tthis.b1 = start.b[1];\n\t\tthis.b2 = start.b[2];\n\t\tthis.a1Delta = (end.a[1] - start.a[1]) * deltaRate;\n\t\tthis.a2Delta = (end.a[2] - start.a[2]) * deltaRate;\n\t\tif (useMultiplicativeInputCoefficients) {\n\t\t\tthis.b0Delta = Math.pow(end.b[0] / start.b[0], deltaRate);\n\t\t\tthis.b1Delta = Math.pow(end.b[1] / start.b[1], deltaRate);\n\t\t\tthis.b2Delta = Math.pow(end.b[2] / start.b[2], deltaRate);\n\t\t} else {\n\t\t\tthis.b0Delta = (end.b[0] - start.b[0]) * deltaRate;\n\t\t\tthis.b1Delta = (end.b[1] - start.b[1]) * deltaRate;\n\t\t\tthis.b2Delta = (end.b[2] - start.b[2]) * deltaRate;\n\t\t}\n\t\tthis.useMultiplicativeInputCoefficients = useMultiplicativeInputCoefficients;\n\t}\n}\n\n// Filters are typically designed as analog filters first, then converted to\n// digital filters using one of two methods: the \"matched z-transform\" or the\n// \"bilinear transform\". The \"bilinear transform\" does a better job of\n// preserving the magnitudes of the frequency response, but warps the frequency\n// range such that the nyquist frequency of the digital filter (\u03C0) maps to the\n// infinity frequency of the analog filter. You can use the below functions to\n// manually perform this warping in either direction.\nexport function warpNyquistToInfinity(radians: number): number {\n\treturn 2.0 * Math.tan(radians * 0.5);\n}\nexport function warpInfinityToNyquist(radians: number): number {\n\treturn 2.0 * Math.atan(radians * 0.5);\n}\n", "// Copyright (c) John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { EnvelopeType, FilterType, Config, Envelope } from \"./SynthConfig\";\nimport { FilterCoefficients, FrequencyResponse } from \"./filtering\";\n\nexport class FilterSettings {\n    readonly controlPoints: FilterControlPoint[] = [];\n    controlPointCount = 0;\n\n    constructor() {\n        this.reset();\n    }\n\n    reset(): void {\n        this.controlPointCount = 0;\n    }\n\n    addPoint(type: FilterType, freqSetting: number, gainSetting: number): void {\n        let controlPoint: FilterControlPoint;\n        if (this.controlPoints.length <= this.controlPointCount) {\n            controlPoint = new FilterControlPoint();\n            this.controlPoints[this.controlPointCount] = controlPoint;\n        } else {\n            controlPoint = this.controlPoints[this.controlPointCount];\n        }\n        this.controlPointCount++;\n        controlPoint.type = type;\n        controlPoint.set(freqSetting, gainSetting);\n    }\n\n    toJsonObject(): Object {\n        const filterArray: any[] = [];\n        for (let i = 0; i < this.controlPointCount; i++) {\n            const point = this.controlPoints[i];\n            filterArray.push({\n                \"type\": Config.filterTypeNames[point.type],\n                \"cutoffHz\": Math.round(point.getHz() * 100) / 100,\n                             \"linearGain\": Math.round(point.getLinearGain() * 10000) / 10000,\n            });\n        }\n        return filterArray;\n    }\n\n    fromJsonObject(filterObject: any): void {\n        this.controlPoints.length = 0;\n        if (filterObject) {\n            for (const pointObject of filterObject) {\n                const point = new FilterControlPoint();\n                point.type = Config.filterTypeNames.indexOf(pointObject[\"type\"]);\n                if (<any>point.type == -1) point.type = FilterType.peak;\n                if (pointObject[\"cutoffHz\"] != undefined) {\n                    point.freq = FilterControlPoint.getRoundedSettingValueFromHz(pointObject[\"cutoffHz\"]);\n                } else {\n                    point.freq = 0;\n                }\n                if (pointObject[\"linearGain\"] != undefined) {\n                    point.gain = FilterControlPoint.getRoundedSettingValueFromLinearGain(pointObject[\"linearGain\"]);\n                } else {\n                    point.gain = Config.filterGainCenter;\n                }\n                this.controlPoints.push(point);\n            }\n        }\n        this.controlPointCount = this.controlPoints.length;\n    }\n\n    // Returns true if all filter control points match in number and type (but not freq/gain)\n    static filtersCanMorph(filterA: FilterSettings, filterB: FilterSettings): boolean {\n        if (filterA.controlPointCount != filterB.controlPointCount)\n            return false;\n        for (let i = 0; i < filterA.controlPointCount; i++) {\n            if (filterA.controlPoints[i].type != filterB.controlPoints[i].type)\n                return false;\n        }\n        return true;\n    }\n\n    // Interpolate two FilterSettings, where pos=0 is filterA and pos=1 is filterB\n    static lerpFilters(filterA: FilterSettings, filterB: FilterSettings, pos: number): FilterSettings {\n\n        let lerpedFilter = new FilterSettings();\n\n        // One setting or another is null, return the other.\n        if (filterA == null) {\n            return filterA;\n        }\n        if (filterB == null) {\n            return filterB;\n        }\n\n        pos = Math.max(0, Math.min(1, pos));\n\n        // Filter control points match in number and type\n        if (this.filtersCanMorph(filterA, filterB)) {\n            for (let i = 0; i < filterA.controlPointCount; i++) {\n                lerpedFilter.controlPoints[i] = new FilterControlPoint();\n                lerpedFilter.controlPoints[i].type = filterA.controlPoints[i].type;\n                lerpedFilter.controlPoints[i].freq = filterA.controlPoints[i].freq + (filterB.controlPoints[i].freq - filterA.controlPoints[i].freq) * pos;\n                lerpedFilter.controlPoints[i].gain = filterA.controlPoints[i].gain + (filterB.controlPoints[i].gain - filterA.controlPoints[i].gain) * pos;\n            }\n\n            lerpedFilter.controlPointCount = filterA.controlPointCount;\n\n            return lerpedFilter;\n        }\n        else {\n            // Not allowing morph of unmatching filters for now. It's a hornet's nest of problems, and I had it implemented and mostly working and it didn't sound very interesting since the shape becomes \"mushy\" in between\n            return (pos >= 1) ? filterB : filterA;\n        }\n    }\n\n    convertLegacySettings(legacyCutoffSetting: number, legacyResonanceSetting: number, legacyEnv: Envelope): void {\n        this.reset();\n\n        const legacyFilterCutoffMaxHz = 8000; // This was carefully calculated to correspond to no change in response when filtering at 48000 samples per second... when using the legacy simplified low-pass filter.\n        const legacyFilterMax = 0.95;\n        const legacyFilterMaxRadians = Math.asin(legacyFilterMax / 2.0) * 2.0;\n        const legacyFilterMaxResonance = 0.95;\n        const legacyFilterCutoffRange = 11;\n        const legacyFilterResonanceRange = 8;\n\n        const resonant = (legacyResonanceSetting > 1);\n        const firstOrder = (legacyResonanceSetting == 0);\n        const cutoffAtMax = (legacyCutoffSetting == legacyFilterCutoffRange - 1);\n        const envDecays = (legacyEnv.type == EnvelopeType.flare || legacyEnv.type == EnvelopeType.twang || legacyEnv.type == EnvelopeType.decay || legacyEnv.type == EnvelopeType.noteSize);\n\n        const standardSampleRate = 48000;\n        const legacyHz = legacyFilterCutoffMaxHz * Math.pow(2.0, (legacyCutoffSetting - (legacyFilterCutoffRange - 1)) * 0.5);\n        const legacyRadians = Math.min(legacyFilterMaxRadians, 2 * Math.PI * legacyHz / standardSampleRate);\n\n        if (legacyEnv.type == EnvelopeType.none && !resonant && cutoffAtMax) {\n            // The response is flat and there's no envelopes, so don't even bother adding any control points.\n        } else if (firstOrder) {\n            // In general, a 1st order lowpass can be approximated by a 2nd order lowpass\n            // with a cutoff ~4 octaves higher (*16) and a gain of 1/16.\n            // However, BeepBox's original lowpass filters behaved oddly as they\n            // approach the nyquist frequency, so I've devised this curved conversion\n            // to guess at a perceptually appropriate new cutoff frequency and gain.\n            const extraOctaves = 3.5;\n            const targetRadians = legacyRadians * Math.pow(2.0, extraOctaves);\n            const curvedRadians = targetRadians / (1.0 + targetRadians / Math.PI);\n            const curvedHz = standardSampleRate * curvedRadians / (2.0 * Math.PI)\n            const freqSetting = FilterControlPoint.getRoundedSettingValueFromHz(curvedHz);\n            const finalHz = FilterControlPoint.getHzFromSettingValue(freqSetting);\n            const finalRadians = 2.0 * Math.PI * finalHz / standardSampleRate;\n\n            const legacyFilter = new FilterCoefficients();\n            legacyFilter.lowPass1stOrderSimplified(legacyRadians);\n            const response = new FrequencyResponse();\n            response.analyze(legacyFilter, finalRadians);\n            const legacyFilterGainAtNewRadians = response.magnitude();\n\n            let logGain = Math.log2(legacyFilterGainAtNewRadians);\n            // Bias slightly toward 2^(-extraOctaves):\n            logGain = -extraOctaves + (logGain + extraOctaves) * 0.82;\n            // Decaying envelopes move the cutoff frequency back into an area where the best approximation of the first order slope requires a lower gain setting.\n            if (envDecays) logGain = Math.min(logGain, -1.0);\n            const convertedGain = Math.pow(2.0, logGain);\n            const gainSetting = FilterControlPoint.getRoundedSettingValueFromLinearGain(convertedGain);\n\n            this.addPoint(FilterType.lowPass, freqSetting, gainSetting);\n        } else {\n            const intendedGain = 0.5 / (1.0 - legacyFilterMaxResonance * Math.sqrt(Math.max(0.0, legacyResonanceSetting - 1.0) / (legacyFilterResonanceRange - 2.0)));\n            const invertedGain = 0.5 / intendedGain;\n            const maxRadians = 2.0 * Math.PI * legacyFilterCutoffMaxHz / standardSampleRate;\n            const freqRatio = legacyRadians / maxRadians;\n            const targetRadians = legacyRadians * (freqRatio * Math.pow(invertedGain, 0.9) + 1.0);\n            const curvedRadians = legacyRadians + (targetRadians - legacyRadians) * invertedGain;\n            let curvedHz: number;\n            if (envDecays) {\n                curvedHz = standardSampleRate * Math.min(curvedRadians, legacyRadians * Math.pow(2, 0.25)) / (2.0 * Math.PI);\n            } else {\n                curvedHz = standardSampleRate * curvedRadians / (2.0 * Math.PI);\n            }\n            const freqSetting = FilterControlPoint.getRoundedSettingValueFromHz(curvedHz);\n\n            let legacyFilterGain: number;\n            if (envDecays) {\n                legacyFilterGain = intendedGain;\n            } else {\n                const legacyFilter = new FilterCoefficients();\n                legacyFilter.lowPass2ndOrderSimplified(legacyRadians, intendedGain);\n                const response = new FrequencyResponse();\n                response.analyze(legacyFilter, curvedRadians);\n                legacyFilterGain = response.magnitude();\n            }\n            if (!resonant) legacyFilterGain = Math.min(legacyFilterGain, Math.sqrt(0.5));\n            const gainSetting = FilterControlPoint.getRoundedSettingValueFromLinearGain(legacyFilterGain);\n\n            this.addPoint(FilterType.lowPass, freqSetting, gainSetting);\n        }\n\n        // Added for JummBox - making a 0 point filter does not truncate control points!\n        this.controlPoints.length = this.controlPointCount;\n    }\n\n    // Similar to above, but purpose-fit for quick conversions in synth calls.\n    convertLegacySettingsForSynth(legacyCutoffSetting: number, legacyResonanceSetting: number, allowFirstOrder = false): void {\n        this.reset();\n\n        const legacyFilterCutoffMaxHz = 8000; // This was carefully calculated to correspond to no change in response when filtering at 48000 samples per second... when using the legacy simplified low-pass filter.\n        const legacyFilterMax = 0.95;\n        const legacyFilterMaxRadians = Math.asin(legacyFilterMax / 2.0) * 2.0;\n        const legacyFilterMaxResonance = 0.95;\n        const legacyFilterCutoffRange = 11;\n        const legacyFilterResonanceRange = 8;\n\n        const firstOrder = (legacyResonanceSetting == 0 && allowFirstOrder);\n        const standardSampleRate = 48000;\n        const legacyHz = legacyFilterCutoffMaxHz * Math.pow(2.0, (legacyCutoffSetting - (legacyFilterCutoffRange - 1)) * 0.5);\n        const legacyRadians = Math.min(legacyFilterMaxRadians, 2 * Math.PI * legacyHz / standardSampleRate);\n\n        if (firstOrder) {\n            // In general, a 1st order lowpass can be approximated by a 2nd order lowpass\n            // with a cutoff ~4 octaves higher (*16) and a gain of 1/16.\n            // However, BeepBox's original lowpass filters behaved oddly as they\n            // approach the nyquist frequency, so I've devised this curved conversion\n            // to guess at a perceptually appropriate new cutoff frequency and gain.\n            const extraOctaves = 3.5;\n            const targetRadians = legacyRadians * Math.pow(2.0, extraOctaves);\n            const curvedRadians = targetRadians / (1.0 + targetRadians / Math.PI);\n            const curvedHz = standardSampleRate * curvedRadians / (2.0 * Math.PI)\n            const freqSetting = FilterControlPoint.getRoundedSettingValueFromHz(curvedHz);\n            const finalHz = FilterControlPoint.getHzFromSettingValue(freqSetting);\n            const finalRadians = 2.0 * Math.PI * finalHz / standardSampleRate;\n\n            const legacyFilter = new FilterCoefficients();\n            legacyFilter.lowPass1stOrderSimplified(legacyRadians);\n            const response = new FrequencyResponse();\n            response.analyze(legacyFilter, finalRadians);\n            const legacyFilterGainAtNewRadians = response.magnitude();\n\n            let logGain = Math.log2(legacyFilterGainAtNewRadians);\n            // Bias slightly toward 2^(-extraOctaves):\n            logGain = -extraOctaves + (logGain + extraOctaves) * 0.82;\n            const convertedGain = Math.pow(2.0, logGain);\n            const gainSetting = FilterControlPoint.getRoundedSettingValueFromLinearGain(convertedGain);\n\n            this.addPoint(FilterType.lowPass, freqSetting, gainSetting);\n        } else {\n            const intendedGain = 0.5 / (1.0 - legacyFilterMaxResonance * Math.sqrt(Math.max(0.0, legacyResonanceSetting - 1.0) / (legacyFilterResonanceRange - 2.0)));\n            const invertedGain = 0.5 / intendedGain;\n            const maxRadians = 2.0 * Math.PI * legacyFilterCutoffMaxHz / standardSampleRate;\n            const freqRatio = legacyRadians / maxRadians;\n            const targetRadians = legacyRadians * (freqRatio * Math.pow(invertedGain, 0.9) + 1.0);\n            const curvedRadians = legacyRadians + (targetRadians - legacyRadians) * invertedGain;\n            let curvedHz: number;\n\n            curvedHz = standardSampleRate * curvedRadians / (2.0 * Math.PI);\n            const freqSetting = FilterControlPoint.getSettingValueFromHz(curvedHz);\n\n            let legacyFilterGain: number;\n\n            const legacyFilter = new FilterCoefficients();\n            legacyFilter.lowPass2ndOrderSimplified(legacyRadians, intendedGain);\n            const response = new FrequencyResponse();\n            response.analyze(legacyFilter, curvedRadians);\n            legacyFilterGain = response.magnitude();\n            const gainSetting = FilterControlPoint.getRoundedSettingValueFromLinearGain(legacyFilterGain);\n\n            this.addPoint(FilterType.lowPass, freqSetting, gainSetting);\n        }\n\n    }\n}\n\nexport class FilterControlPoint {\n    freq = 0;\n    gain = Config.filterGainCenter;\n    type = FilterType.peak;\n\n    set(freqSetting: number, gainSetting: number): void {\n        this.freq = freqSetting;\n        this.gain = gainSetting;\n    }\n\n    getHz(): number {\n        return FilterControlPoint.getHzFromSettingValue(this.freq);\n    }\n\n    static getHzFromSettingValue(value: number): number {\n        return Config.filterFreqReferenceHz * Math.pow(2.0, (value - Config.filterFreqReferenceSetting) * Config.filterFreqStep);\n    }\n    static getSettingValueFromHz(hz: number): number {\n        return Math.log2(hz / Config.filterFreqReferenceHz) / Config.filterFreqStep + Config.filterFreqReferenceSetting;\n    }\n    static getRoundedSettingValueFromHz(hz: number): number {\n        return Math.max(0, Math.min(Config.filterFreqRange - 1, Math.round(FilterControlPoint.getSettingValueFromHz(hz))));\n    }\n\n    getLinearGain(peakMult = 1.0): number {\n        const power = (this.gain - Config.filterGainCenter) * Config.filterGainStep;\n        const neutral = (this.type == FilterType.peak) ? 0.0 : -0.5;\n        const interpolatedPower = neutral + (power - neutral) * peakMult;\n        return Math.pow(2.0, interpolatedPower);\n    }\n    static getRoundedSettingValueFromLinearGain(linearGain: number): number {\n        return Math.max(0, Math.min(Config.filterGainRange - 1, Math.round(Math.log2(linearGain) / Config.filterGainStep + Config.filterGainCenter)));\n    }\n\n    toCoefficients(filter: FilterCoefficients, sampleRate: number, freqMult = 1.0, peakMult = 1.0): void {\n        const cornerRadiansPerSample = 2.0 * Math.PI * Math.max(Config.filterFreqMinHz, Math.min(Config.filterFreqMaxHz, freqMult * this.getHz())) / sampleRate;\n        const linearGain = this.getLinearGain(peakMult);\n        switch (this.type) {\n            case FilterType.lowPass:\n                filter.lowPass2ndOrderButterworth(cornerRadiansPerSample, linearGain);\n                break;\n            case FilterType.highPass:\n                filter.highPass2ndOrderButterworth(cornerRadiansPerSample, linearGain);\n                break;\n            case FilterType.peak:\n                filter.peak2ndOrder(cornerRadiansPerSample, linearGain, 1.0);\n                break;\n            default:\n                throw new Error();\n        }\n    }\n\n    getVolumeCompensationMult(): number {\n        const octave = (this.freq - Config.filterFreqReferenceSetting) * Config.filterFreqStep;\n        const gainPow = (this.gain - Config.filterGainCenter) * Config.filterGainStep;\n        switch (this.type) {\n            case FilterType.lowPass:\n                const freqRelativeTo8khz = Math.pow(2.0, octave) * Config.filterFreqReferenceHz / 8000.0;\n                // Reverse the frequency warping from importing legacy simplified filters to imitate how the legacy filter cutoff setting affected volume.\n                const warpedFreq = (Math.sqrt(1.0 + 4.0 * freqRelativeTo8khz) - 1.0) / 2.0;\n                const warpedOctave = Math.log2(warpedFreq);\n                return Math.pow(0.5, 0.2 * Math.max(0.0, gainPow + 1.0) + Math.min(0.0, Math.max(-3.0, 0.595 * warpedOctave + 0.35 * Math.min(0.0, gainPow + 1.0))));\n            case FilterType.highPass:\n                return Math.pow(0.5, 0.125 * Math.max(0.0, gainPow + 1.0) + Math.min(0.0, 0.3 * (-octave - Math.log2(Config.filterFreqReferenceHz / 125.0)) + 0.2 * Math.min(0.0, gainPow + 1.0)));\n            case FilterType.peak:\n                const distanceFromCenter = octave + Math.log2(Config.filterFreqReferenceHz / 2000.0);\n                const freqLoudness = Math.pow(1.0 / (1.0 + Math.pow(distanceFromCenter / 3.0, 2.0)), 2.0);\n                return Math.pow(0.5, 0.125 * Math.max(0.0, gainPow) + 0.1 * freqLoudness * Math.min(0.0, gainPow));\n            default:\n                throw new Error();\n        }\n    }\n}\n", "// Copyright (c) John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { EffectType, Config } from \"./SynthConfig\";\nimport { FilterSettings } from \"./Filter\";\n\nexport class Effect {\n\ttype = EffectType.reverb;\n\twetDryMix = 0.5;\n\tsend = 1;\n\n\teqFilter = new FilterSettings();\n\teqFilterType = false;\n\teqFilterSimpleCut = Config.filterSimpleCutRange - 1;\n\teqFilterSimplePeak = 0;\n\teqSubFilters: (FilterSettings | null)[] = [];\n\ttmpEqFilterStart: FilterSettings | null;\n\ttmpEqFilterEnd: FilterSettings | null;\n\t//public envelopes: EnvelopeSettings[] = [];\n\t//public envelopeCount = 0;\n\t//public envelopeSpeed = 12;\n\n\tgain = Config.volumeRange / 2;\n\tpan = Config.panCenter;\n\tpanDelay = 0;\n\tpanMode = 0;\n\taliases = false;\n\tdistortion = 0;\n\tbitcrusherFreq = 0;\n\tbitcrusherQuantization = 0;\n\tringModulation = Math.floor(Config.ringModRange/2);\n\tringModulationHz = Math.floor(Config.ringModHzRange / 2);\n\tringModWaveformIndex = 0;\n\tringModPulseWidth = 0;\n\tringModHzOffset = 200;\n\tgranular = 4;\n\tgrainSize = (Config.grainSizeMax-Config.grainSizeMin)/Config.grainSizeStep;\n\tgrainAmounts = Config.grainAmountsMax;\n\tgrainRange = 40;\n\tflanger = 0;\n\tflangerSpeed = 0;\n\tflangerDepth = 0;\n\tflangerFeedback = 0;\n\tchorus = 0;\n\treverb = 0;\n\techoSustain = 0;\n\techoDelay = 0;\n\techoPingPong = Config.panCenter;\n\n\tconstructor(type: EffectType) {\n\t\tthis.type = type;\n\t}\n}\n", "// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { Config } from \"./SynthConfig\";\n\nexport function clamp(min: number, max: number, val: number): number {\n\tmax = max - 1;\n\tif (val <= max) {\n\t\tif (val >= min) return val;\n\t\telse return min;\n\t} else {\n\t\treturn max;\n\t}\n}\n\nexport function validateRange(min: number, max: number, val: number): number {\n\tif (min <= val && val <= max) return val;\n\tthrow new Error(`Value ${val} not in range [${min}, ${max}]`);\n}\n\nexport function parseFloatWithDefault<T>(s: string, defaultValue: T): number | T {\n\tlet result: number | T = parseFloat(s);\n\tif (Number.isNaN(result)) result = defaultValue;\n\treturn result;\n}\n\nexport function parseIntWithDefault<T>(s: string, defaultValue: T): number | T {\n\tlet result: number | T = parseInt(s);\n\tif (Number.isNaN(result)) result = defaultValue;\n\treturn result;\n}\n\nexport function fadeInSettingToSeconds(setting: number): number {\n\treturn 0.0125 * (0.95 * setting + 0.05 * setting * setting);\n}\n\nexport function secondsToFadeInSetting(seconds: number): number {\n\treturn clamp(0, Config.fadeInRange, Math.round((-0.95 + Math.sqrt(0.9025 + 0.2 * seconds / 0.0125)) / 0.1));\n}\n\nexport function fadeOutSettingToTicks(setting: number): number {\n\treturn Config.fadeOutTicks[setting];\n}\n\nexport function ticksToFadeOutSetting(ticks: number): number {\n\tlet lower = Config.fadeOutTicks[0];\n\tif (ticks <= lower) return 0;\n\tfor (let i = 1; i < Config.fadeOutTicks.length; i++) {\n\t\tlet upper = Config.fadeOutTicks[i];\n\t\tif (ticks <= upper) return (ticks < (lower + upper) / 2) ? i - 1 : i;\n\t\tlower = upper;\n\t}\n\treturn Config.fadeOutTicks.length - 1;\n}\n\n// public static lerp(t: number, a: number, b: number): number {\n//     return a + (b - a) * t;\n// }\n\n// public static unlerp(x: number, a: number, b: number): number {\n//     return (x - a) / (b - a);\n// }\n\nexport function detuneToCents(detune: number): number {\n\t// BeepBox formula, for reference:\n\t// return detune * (Math.abs(detune) + 1) / 2;\n\treturn detune - Config.detuneCenter;\n}\n\nexport function centsToDetune(cents: number): number {\n\t// BeepBox formula, for reference:\n\t// return Math.sign(cents) * (Math.sqrt(1 + 8 * Math.abs(cents)) - 1) / 2.0;\n\treturn cents + Config.detuneCenter;\n}\n\nexport function fittingPowerOfTwo(x: number): number {\n\treturn 1 << (32 - Math.clz32(Math.ceil(x) - 1));\n}\n", "// Copyright (c) John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { Config, EnvelopeType, LFOEnvelopeTypes } from \"./SynthConfig\";\nimport { clamp } from \"./utils\";\nexport class EnvelopeSettings {\n    target = 0;\n    index = 0;\n    envelope = 0;\n    //slarmoo's box 1.0\n    pitchEnvelopeStart: number;\n    pitchEnvelopeEnd: number;\n    inverse: boolean;\n    //midbox\n    perEnvelopeSpeed = Config.envelopes[this.envelope].speed;\n    perEnvelopeLowerBound = 0;\n    perEnvelopeUpperBound = 1;\n    //modulation support\n    tempEnvelopeSpeed: number | null = null;\n    tempEnvelopeLowerBound: number | null = null;\n    tempEnvelopeUpperBound: number | null = null;\n    //pseudo random\n    steps = 2;\n    seed = 2;\n    //lfo and random types\n    waveform = LFOEnvelopeTypes.sine;\n    //moved discrete into here\n    discrete = false;\n\n    constructor(public isNoiseEnvelope: boolean) {\n        this.reset();\n    }\n\n    reset(): void {\n        this.target = 0;\n        this.index = 0;\n        this.envelope = 0;\n        this.pitchEnvelopeStart = 0;\n        this.pitchEnvelopeEnd = this.isNoiseEnvelope ? Config.drumCount - 1 : Config.maxPitch;\n        this.inverse = false;\n        this.isNoiseEnvelope = false;\n        this.perEnvelopeSpeed = Config.envelopes[this.envelope].speed;\n        this.perEnvelopeLowerBound = 0;\n        this.perEnvelopeUpperBound = 1;\n        this.tempEnvelopeSpeed = null;\n        this.tempEnvelopeLowerBound = null;\n        this.tempEnvelopeUpperBound = null;\n        this.steps = 2;\n        this.seed = 2;\n        this.waveform = LFOEnvelopeTypes.sine;\n        this.discrete = false;\n    }\n\n    toJsonObject(): Object {\n        const envelopeObject: any = {\n            \"target\": Config.instrumentAutomationTargets[this.target].name,\n            \"envelope\": Config.newEnvelopes[this.envelope].name,\n            \"inverse\": this.inverse,\n            \"perEnvelopeSpeed\": this.perEnvelopeSpeed,\n            \"perEnvelopeLowerBound\": this.perEnvelopeLowerBound,\n            \"perEnvelopeUpperBound\": this.perEnvelopeUpperBound,\n            \"discrete\": this.discrete,\n        };\n        if (Config.instrumentAutomationTargets[this.target].maxCount > 1) {\n            envelopeObject[\"index\"] = this.index;\n        }\n        if (Config.newEnvelopes[this.envelope].name == \"pitch\") {\n            envelopeObject[\"pitchEnvelopeStart\"] = this.pitchEnvelopeStart;\n            envelopeObject[\"pitchEnvelopeEnd\"] = this.pitchEnvelopeEnd;\n        } else if (Config.newEnvelopes[this.envelope].name == \"random\") {\n            envelopeObject[\"steps\"] = this.steps;\n            envelopeObject[\"seed\"] = this.seed;\n            envelopeObject[\"waveform\"] = this.waveform;\n        } else if (Config.newEnvelopes[this.envelope].name == \"lfo\") {\n            envelopeObject[\"waveform\"] = this.waveform;\n            envelopeObject[\"steps\"] = this.steps;\n        }\n        return envelopeObject;\n    }\n\n    fromJsonObject(envelopeObject: any, format: string): void {\n        this.reset();\n\n        let target = Config.instrumentAutomationTargets.dictionary[envelopeObject[\"target\"]];\n        if (target == null) target = Config.instrumentAutomationTargets.dictionary[\"noteVolume\"];\n        this.target = target.index;\n\n        let envelope = Config.envelopes.dictionary[\"none\"];\n        let isTremolo2 = false;\n        if (format == \"slarmoosbox\") {\n            if (envelopeObject[\"envelope\"] == \"tremolo2\") {\n                envelope = Config.newEnvelopes[EnvelopeType.lfo];\n                isTremolo2 = true;\n            } else if (envelopeObject[\"envelope\"] == \"tremolo\") {\n                envelope = Config.newEnvelopes[EnvelopeType.lfo];\n                isTremolo2 = false;\n            } else {\n                envelope = Config.newEnvelopes.dictionary[envelopeObject[\"envelope\"]];\n            }\n        } else {\n            if (Config.envelopes.dictionary[envelopeObject[\"envelope\"]].type == EnvelopeType.tremolo2) {\n                envelope = Config.newEnvelopes[EnvelopeType.lfo];\n                isTremolo2 = true;\n            } else if (Config.newEnvelopes[Math.max(Config.envelopes.dictionary[envelopeObject[\"envelope\"]].type - 1, 0)].index > EnvelopeType.lfo){\n                envelope = Config.newEnvelopes[Config.envelopes.dictionary[envelopeObject[\"envelope\"]].type - 1];\n            } else {\n                envelope = Config.newEnvelopes[Config.envelopes.dictionary[envelopeObject[\"envelope\"]].type];\n            }\n        }\n\n        if (envelope == undefined) {\n            if (Config.envelopes.dictionary[envelopeObject[\"envelope\"]].type == EnvelopeType.tremolo2) {\n                envelope = Config.newEnvelopes[EnvelopeType.lfo];\n                isTremolo2 = true;\n            } else if (Config.newEnvelopes[Math.max(Config.envelopes.dictionary[envelopeObject[\"envelope\"]].type - 1, 0)].index > EnvelopeType.lfo) {\n                envelope = Config.newEnvelopes[Config.envelopes.dictionary[envelopeObject[\"envelope\"]].type - 1];\n            } else {\n                envelope = Config.newEnvelopes[Config.envelopes.dictionary[envelopeObject[\"envelope\"]].type];\n            }\n        }\n        if (envelope == null) envelope = Config.envelopes.dictionary[\"none\"];\n        this.envelope = envelope.index;\n\n        if (envelopeObject[\"index\"] != undefined) {\n            this.index = clamp(0, Config.instrumentAutomationTargets[this.target].maxCount, envelopeObject[\"index\"] | 0);\n        } else {\n            this.index = 0;\n        }\n\n        if (envelopeObject[\"pitchEnvelopeStart\"] != undefined) {\n            this.pitchEnvelopeStart = clamp(0, this.isNoiseEnvelope ? Config.drumCount : Config.maxPitch + 1, envelopeObject[\"pitchEnvelopeStart\"]);\n        } else {\n            this.pitchEnvelopeStart = 0;\n        }\n\n        if (envelopeObject[\"pitchEnvelopeEnd\"] != undefined) {\n            this.pitchEnvelopeEnd = clamp(0, this.isNoiseEnvelope ? Config.drumCount : Config.maxPitch + 1, envelopeObject[\"pitchEnvelopeEnd\"]);\n        } else {\n            this.pitchEnvelopeEnd = this.isNoiseEnvelope ? Config.drumCount : Config.maxPitch;\n        }\n\n        this.inverse = Boolean(envelopeObject[\"inverse\"]);\n\n        if (envelopeObject[\"perEnvelopeSpeed\"] != undefined) {\n            this.perEnvelopeSpeed = envelopeObject[\"perEnvelopeSpeed\"];\n        } else {\n            this.perEnvelopeSpeed = Config.envelopes.dictionary[envelopeObject[\"envelope\"]].speed;\n        }\n\n        if (envelopeObject[\"perEnvelopeLowerBound\"] != undefined) {\n            this.perEnvelopeLowerBound = clamp(Config.perEnvelopeBoundMin, Config.perEnvelopeBoundMax + 1, envelopeObject[\"perEnvelopeLowerBound\"]);\n        } else {\n            this.perEnvelopeLowerBound = 0;\n        }\n\n        if (envelopeObject[\"perEnvelopeUpperBound\"] != undefined) {\n            this.perEnvelopeUpperBound = clamp(Config.perEnvelopeBoundMin, Config.perEnvelopeBoundMax + 1, envelopeObject[\"perEnvelopeUpperBound\"]);\n        } else {\n            this.perEnvelopeUpperBound = 1;\n        }\n\n        //convert tremolo2 settings into lfo\n        if (isTremolo2) {\n            if (this.inverse) {\n                this.perEnvelopeUpperBound = Math.floor((this.perEnvelopeUpperBound / 2) * 10) / 10;\n                this.perEnvelopeLowerBound = Math.floor((this.perEnvelopeLowerBound / 2) * 10) / 10;\n            } else {\n                this.perEnvelopeUpperBound = Math.floor((0.5 + (this.perEnvelopeUpperBound - this.perEnvelopeLowerBound) / 2) * 10) / 10;\n                this.perEnvelopeLowerBound = 0.5;\n            }\n        }\n\n        if (envelopeObject[\"steps\"] != undefined) {\n            this.steps = clamp(1, Config.randomEnvelopeStepsMax + 1, envelopeObject[\"steps\"]);\n        } else {\n            this.steps = 2;\n        }\n\n        if (envelopeObject[\"seed\"] != undefined) {\n            this.seed = clamp(1, Config.randomEnvelopeSeedMax + 1, envelopeObject[\"seed\"]);\n        } else {\n            this.seed = 2;\n        }\n\n        if (envelopeObject[\"waveform\"] != undefined) {\n            this.waveform = envelopeObject[\"waveform\"];\n        } else {\n            this.waveform = LFOEnvelopeTypes.sine;\n        }\n\n        if (envelopeObject[\"discrete\"] != undefined) {\n            this.discrete = envelopeObject[\"discrete\"];\n        } else {\n            this.discrete = false;\n        }\n    }\n}\n", "// Copyright (c) John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { Effect } from \"./Effect\";\nimport { EnvelopeSettings } from \"./Envelope\";\nimport { FilterSettings } from \"./Filter\";\nimport { Chord, Config, Dictionary, DictionaryArray, effectsIncludeChord, effectsIncludeDetune, effectsIncludePitchShift, effectsIncludeTransition, effectsIncludeVibrato, EffectType, Envelope, EnvelopeType, InstrumentType, LFOEnvelopeTypes, MDEffectType, SustainType, toNameMap, Transition, Unison, Vibrato } from \"./SynthConfig\";\nimport { centsToDetune, clamp, detuneToCents, fadeInSettingToSeconds, fadeOutSettingToTicks, fittingPowerOfTwo, secondsToFadeInSetting, ticksToFadeOutSetting } from \"./utils\";\n\n// Settings that were available to old versions of BeepBox but are no longer available in the\n// current version that need to be reinterpreted as a group to determine the best way to\n// represent them in the current version.\nexport interface LegacySettings {\n    filterCutoff?: number;\n    filterResonance?: number;\n    filterEnvelope?: Envelope;\n    pulseEnvelope?: Envelope;\n    operatorEnvelopes?: Envelope[];\n    feedbackEnvelope?: Envelope;\n}\n\nexport class Operator {\n    frequency = 4;\n    amplitude = 0;\n    waveform = 0;\n    pulseWidth = 0.5;\n\n    constructor(index: number) {\n        this.reset(index);\n    }\n\n    reset(index: number): void {\n        this.frequency = 4; //defualt to 1x\n        this.amplitude = (index <= 1) ? Config.operatorAmplitudeMax : 0;\n        this.waveform = 0;\n        this.pulseWidth = 5;\n    }\n\n    copy(other: Operator): void {\n        this.frequency = other.frequency;\n        this.amplitude = other.amplitude;\n        this.waveform = other.waveform;\n        this.pulseWidth = other.pulseWidth;\n    }\n}\n\nexport class CustomAlgorithm {\n    name = \"\";\n    carrierCount = 0;\n    modulatedBy: number[][] = [[], [], [], [], [], []];\n    associatedCarrier: number[] = [];\n\n    constructor() {\n        this.fromPreset(1);\n    }\n\n    set(carriers: number, modulation: number[][]) {\n        this.reset();\n        this.carrierCount = carriers;\n        for (let i = 0; i < this.modulatedBy.length; i++) {\n            this.modulatedBy[i] = modulation[i];\n            if (i < carriers) {\n                this.associatedCarrier[i] = i + 1;\n            }\n            this.name += (i + 1);\n            for (let j = 0; j < modulation[i].length; j++) {\n                this.name += modulation[i][j];\n                if (modulation[i][j] > carriers - 1) {\n                    this.associatedCarrier[modulation[i][j] - 1] = i + 1;\n                }\n                this.name += \",\";\n            }\n            if (i < carriers) {\n                this.name += \"|\";\n            } else {\n                this.name += \".\";\n            }\n        }\n    }\n\n    reset(): void {\n        this.name = \"\"\n        this.carrierCount = 1;\n        this.modulatedBy = [[2, 3, 4, 5, 6], [], [], [], [], []];\n        this.associatedCarrier = [1, 1, 1, 1, 1, 1];\n    }\n\n    copy(other: CustomAlgorithm): void {\n        this.name = other.name;\n        this.carrierCount = other.carrierCount;\n        this.modulatedBy = other.modulatedBy;\n        this.associatedCarrier = other.associatedCarrier;\n    }\n\n    fromPreset(other: number): void {\n        this.reset();\n        let preset = Config.algorithms6Op[other]\n        this.name = preset.name;\n        this.carrierCount = preset.carrierCount;\n        for (var i = 0; i < preset.modulatedBy.length; i++) {\n            this.modulatedBy[i] = Array.from(preset.modulatedBy[i]);\n            this.associatedCarrier[i] = preset.associatedCarrier[i];\n        }\n    }\n}\n\nexport class CustomFeedBack { //feels redunant\n    name = \"\";\n    indices: number[][] = [[], [], [], [], [], []];\n\n    constructor() {\n        this.fromPreset(1);\n    }\n\n    set(inIndices: number[][]) {\n        this.reset();\n        for (let i = 0; i < this.indices.length; i++) {\n            this.indices[i] = inIndices[i];\n            for (let j = 0; j < inIndices[i].length; j++) {\n                this.name += inIndices[i][j];\n                this.name += \",\";\n            }\n            this.name += \".\";\n        }\n    }\n\n    reset(): void {\n        this.reset;\n        this.name = \"\";\n        this.indices = [[1], [], [], [], [], []];\n    }\n\n    copy(other: CustomFeedBack): void {\n        this.name = other.name;\n        this.indices = other.indices;\n    }\n\n    fromPreset(other: number): void {\n        this.reset();\n        let preset = Config.feedbacks6Op[other]\n        for (var i = 0; i < preset.indices.length; i++) {\n            this.indices[i] = Array.from(preset.indices[i]);\n            for (let j = 0; j < preset.indices[i].length; j++) {\n                this.name += preset.indices[i][j];\n                this.name += \",\";\n            }\n            this.name += \".\";\n        }\n    }\n}\n\nexport class SpectrumWave {\n    spectrum: number[] = [];\n    hash = -1;\n\n    constructor(isNoiseChannel: boolean) {\n        this.reset(isNoiseChannel);\n    }\n\n    reset(isNoiseChannel: boolean): void {\n        for (let i = 0; i < Config.spectrumControlPoints; i++) {\n            if (isNoiseChannel) {\n                this.spectrum[i] = Math.round(Config.spectrumMax * (1 / Math.sqrt(1 + i / 3)));\n            } else {\n                const isHarmonic = i == 0 || i == 7 || i == 11 || i == 14 || i == 16 || i == 18 || i == 21 || i == 23 || i >= 25;\n                this.spectrum[i] = isHarmonic ? Math.max(0, Math.round(Config.spectrumMax * (1 - i / 30))) : 0;\n            }\n        }\n        this.markCustomWaveDirty();\n    }\n\n    markCustomWaveDirty(): void {\n        const hashMult = fittingPowerOfTwo(Config.spectrumMax + 2) - 1;\n        let hash = 0;\n        for (const point of this.spectrum) hash = ((hash * hashMult) + point) >>> 0;\n        this.hash = hash;\n    }\n}\n\nexport class HarmonicsWave {\n    harmonics: number[] = [];\n    hash = -1;\n\n    constructor() {\n        this.reset();\n    }\n\n    reset(): void {\n        for (let i = 0; i < Config.harmonicsControlPoints; i++) {\n            this.harmonics[i] = 0;\n        }\n        this.harmonics[0] = Config.harmonicsMax;\n        this.harmonics[3] = Config.harmonicsMax;\n        this.harmonics[6] = Config.harmonicsMax;\n        this.markCustomWaveDirty();\n    }\n\n    markCustomWaveDirty(): void {\n        const hashMult = fittingPowerOfTwo(Config.harmonicsMax + 2) - 1;\n        let hash = 0;\n        for (const point of this.harmonics) hash = ((hash * hashMult) + point) >>> 0;\n        this.hash = hash;\n    }\n}\n\nexport class Instrument {\n    type = InstrumentType.chip;\n    preset = 0;\n    chipWave = 2;\n    // advloop addition\n    isUsingAdvancedLoopControls = false;\n    chipWaveLoopStart = 0;\n    chipWaveLoopEnd = Config.rawRawChipWaves[this.chipWave].samples.length - 1;\n    chipWaveLoopMode = 0; // 0: loop, 1: ping-pong, 2: once, 3: play loop once\n    chipWavePlayBackwards = false;\n    chipWaveStartOffset = 0;\n    // advloop addition\n    chipWaveInStereo = false;\n    chipNoise = 1;\n    noteFilter = new FilterSettings();\n    noteFilterType = false;\n    noteFilterSimpleCut = Config.filterSimpleCutRange - 1;\n    noteFilterSimplePeak = 0;\n    noteSubFilters: (FilterSettings | null)[] = [];\n    tmpNoteFilterStart: FilterSettings | null;\n    tmpNoteFilterEnd: FilterSettings | null;\n    envelopes: EnvelopeSettings[] = [];\n    fadeIn = 0;\n    fadeOut = Config.fadeOutNeutral;\n    envelopeCount = 0;\n    transition = Config.transitions.dictionary[\"normal\"].index;\n    pitchShift = 0;\n    detune = 0;\n    vibrato = 0;\n    interval = 0;\n    vibratoDepth = 0;\n    vibratoSpeed = 10;\n    vibratoDelay = 0;\n    vibratoType = 0;\n    envelopeSpeed = 12;\n    unison = 0;\n    unisonVoices = 1;\n    unisonSpread = 0.0;\n    unisonOffset = 0.0;\n    unisonExpression = 1.4;\n    unisonSign = 1.0;\n    effects: Effect[] = [];\n    effectCount = 0;\n    mdeffects = 0;\n    chord = 1;\n    volume = 0;\n    arpeggioSpeed = 12;\n    monoChordTone = 0;\n    fastTwoNoteArp = false;\n    legacyTieOver = false;\n    clicklessTransition = false;\n    aliases = false;\n    pulseWidth = Config.pulseWidthRange;\n    decimalOffset = 0;\n    supersawDynamism = Config.supersawDynamismMax;\n    supersawSpread = Math.ceil(Config.supersawSpreadMax / 2.0);\n    supersawShape = 0;\n    stringSustain = 10;\n    stringSustainType = SustainType.acoustic;\n    algorithm = 0;\n    feedbackType = 0;\n    algorithm6Op = 1;\n    feedbackType6Op = 1;//default to not custom\n    customAlgorithm = new CustomAlgorithm(); //{ name: \"1\u21904(2\u21905 3\u21906\", carrierCount: 3, associatedCarrier: [1, 2, 3, 1, 2, 3], modulatedBy: [[2, 3, 4], [5], [6], [], [], []] };\n    customFeedbackType = new CustomFeedBack(); //{ name: \"1\u21944 2\u21945 3\u21946\", indices: [[3], [5], [6], [1], [2], [3]] };\n    feedbackAmplitude = 0;\n    customChipWave: Float32Array = new Float32Array(64);\n    customChipWaveIntegral: Float32Array = new Float32Array(65); // One extra element for wrap-around in chipSynth.\n    readonly operators: Operator[] = [];\n    readonly spectrumWave: SpectrumWave;\n    readonly harmonicsWave = new HarmonicsWave();\n    readonly drumsetEnvelopes: number[] = [];\n    readonly drumsetSpectrumWaves: SpectrumWave[] = [];\n    modChannels: number[][] = [];\n    modInstruments: number[][] = [];\n    modulators: number[] = [];\n    modFilterTypes: number[] = [];\n    modEnvelopeNumbers: number[] = [];\n    invalidModulators: boolean[] = [];\n\n    //Literally just for pitch envelopes.\n    isNoiseInstrument = false;\n    constructor(isNoiseChannel: boolean, isModChannel: boolean) {\n\n        // @jummbus - My screed on how modulator arrays for instruments work, for the benefit of myself in the future, or whoever else.\n        //\n        // modulators[mod] is the index in Config.modulators to use, with \"none\" being the first entry.\n        //\n        // modChannels[mod] gives the index of a channel set for this mod. Two special values:\n        //   -2 \"none\"\n        //   -1 \"song\"\n        //   0+ actual channel index\n        //\n        // modInstruments[mod] gives the index of an instrument within the channel set for this mod.\n        //   [0 ~ channel.instruments.length-1]     channel's instrument index\n        //\n        // in Theepbox, the channel and instrument is given as a list because many channel-instrument pairs can be enabled at once :3\n        //\n        // modFilterTypes[mod] gives some info about the filter type: 0 is morph, 1+ is index in the dot selection array (dot 1 x, dot 1 y, dot 2 x...)\n        //   0  filter morph\n        //   1+ filter dot target, starting from dot 1 x and then dot 1 y, then repeating x, y for all dots in order. Note: odd values are always \"x\" targets, even are \"y\".\n\n        if (isModChannel) {\n            for (let mod = 0; mod < Config.modCount; mod++) {\n                this.modChannels.push([-2]);\n                this.modInstruments.push([0]);\n                this.modulators.push(Config.modulators.dictionary[\"none\"].index);\n            }\n        }\n\n        this.spectrumWave = new SpectrumWave(isNoiseChannel);\n        for (let i = 0; i < Config.operatorCount + 2; i++) {//hopefully won't break everything\n            this.operators[i] = new Operator(i);\n        }\n        for (let i = 0; i < Config.drumCount; i++) {\n            this.drumsetEnvelopes[i] = Config.envelopes.dictionary[\"twang 2\"].index;\n            this.drumsetSpectrumWaves[i] = new SpectrumWave(true);\n        }\n\n        for (let i = 0; i < 64; i++) {\n            this.customChipWave[i] = 24 - Math.floor(i * (48 / 64));\n        }\n\n        let sum = 0.0;\n        for (let i = 0; i < this.customChipWave.length; i++) {\n            sum += this.customChipWave[i];\n        }\n        const average = sum / this.customChipWave.length;\n\n        // Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\n        let cumulative = 0;\n        let wavePrev = 0;\n        for (let i = 0; i < this.customChipWave.length; i++) {\n            cumulative += wavePrev;\n            wavePrev = this.customChipWave[i] - average;\n            this.customChipWaveIntegral[i] = cumulative;\n        }\n\n        // 65th, last sample is for anti-aliasing\n        this.customChipWaveIntegral[64] = 0.0;\n\n        //properly sets the isNoiseInstrument value\n        this.isNoiseInstrument = isNoiseChannel;\n\n    }\n\n    setTypeAndReset(type: InstrumentType, isNoiseChannel: boolean, isModChannel: boolean): void {\n        // Mod channels are forced to one type.\n        if (isModChannel) type = InstrumentType.mod;\n        this.type = type;\n        this.preset = type;\n        this.volume = 0;\n        this.effects = [];\n        this.effectCount = 0;\n        this.mdeffects = 0;\n        for (let i = 0; i < Config.filterMorphCount; i++) {\n            this.noteSubFilters[i] = null;\n        }\n        this.noteFilter.reset();\n        this.noteFilterType = false;\n        this.noteFilterSimpleCut = Config.filterSimpleCutRange - 1;\n        this.noteFilterSimplePeak = 0;\n        this.pitchShift = Config.pitchShiftCenter;\n        this.detune = Config.detuneCenter;\n        this.vibrato = 0;\n        this.unison = 0;\n        this.stringSustain = 10;\n        this.stringSustainType = Config.enableAcousticSustain ? SustainType.acoustic : SustainType.bright;\n        this.clicklessTransition = false;\n        this.arpeggioSpeed = 12;\n        this.monoChordTone = 1;\n        this.envelopeSpeed = 12;\n        this.legacyTieOver = false;\n        this.aliases = false;\n        this.fadeIn = 0;\n        this.fadeOut = Config.fadeOutNeutral;\n        this.transition = Config.transitions.dictionary[\"normal\"].index;\n        this.envelopeCount = 0;\n        this.isNoiseInstrument = isNoiseChannel;\n        switch (type) {\n            case InstrumentType.chip:\n                this.chipWave = 2;\n                // TODO: enable the chord effect?\n                this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                // advloop addition\n                this.isUsingAdvancedLoopControls = false;\n                this.chipWaveLoopStart = 0;\n                this.chipWaveLoopEnd = Config.rawRawChipWaves[this.chipWave].samples.length - 1;\n                this.chipWaveLoopMode = 0;\n                this.chipWavePlayBackwards = false;\n                this.chipWaveInStereo = false;\n                this.chipWaveStartOffset = 0;\n                // advloop addition\n                break;\n            case InstrumentType.customChipWave:\n                this.chipWave = 2;\n                this.chipWaveInStereo = false;\n                this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                for (let i = 0; i < 64; i++) {\n                    this.customChipWave[i] = 24 - (Math.floor(i * (48 / 64)));\n                }\n\n                let sum = 0.0;\n                for (let i = 0; i < this.customChipWave.length; i++) {\n                    sum += this.customChipWave[i];\n                }\n                const average = sum / this.customChipWave.length;\n\n                // Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\n                let cumulative = 0;\n                let wavePrev = 0;\n                for (let i = 0; i < this.customChipWave.length; i++) {\n                    cumulative += wavePrev;\n                    wavePrev = this.customChipWave[i] - average;\n                    this.customChipWaveIntegral[i] = cumulative;\n                }\n\n                this.customChipWaveIntegral[64] = 0.0;\n                break;\n            case InstrumentType.fm:\n                this.chord = Config.chords.dictionary[\"custom interval\"].index;\n                this.algorithm = 0;\n                this.feedbackType = 0;\n                this.feedbackAmplitude = 0;\n                for (let i = 0; i < this.operators.length; i++) {\n                    this.operators[i].reset(i);\n                }\n                break;\n            case InstrumentType.fm6op:\n                this.transition = 1;\n                this.vibrato = 0;\n                this.chord = 3;\n                this.algorithm = 0;\n                this.feedbackType = 0;\n                this.algorithm6Op = 1;\n                this.feedbackType6Op = 1;\n                this.customAlgorithm.fromPreset(1);\n                this.feedbackAmplitude = 0;\n                for (let i = 0; i < this.operators.length; i++) {\n                    this.operators[i].reset(i);\n                }\n                break;\n            case InstrumentType.noise:\n                this.chipNoise = 1;\n                this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                break;\n            case InstrumentType.spectrum:\n                this.chord = Config.chords.dictionary[\"simultaneous\"].index;\n                this.spectrumWave.reset(isNoiseChannel);\n                break;\n            case InstrumentType.drumset:\n                this.chord = Config.chords.dictionary[\"simultaneous\"].index;\n                for (let i = 0; i < Config.drumCount; i++) {\n                    this.drumsetEnvelopes[i] = Config.envelopes.dictionary[\"twang 2\"].index;\n                    if (this.drumsetSpectrumWaves[i] == undefined) {\n                        this.drumsetSpectrumWaves[i] = new SpectrumWave(true);\n                    }\n                    this.drumsetSpectrumWaves[i].reset(isNoiseChannel);\n                }\n                break;\n            case InstrumentType.harmonics:\n                this.chord = Config.chords.dictionary[\"simultaneous\"].index;\n                this.harmonicsWave.reset();\n                break;\n            case InstrumentType.pwm:\n                this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                this.pulseWidth = Config.pulseWidthRange;\n                this.decimalOffset = 0;\n                break;\n            case InstrumentType.pickedString:\n                this.chord = Config.chords.dictionary[\"strum\"].index;\n                this.harmonicsWave.reset();\n                break;\n            case InstrumentType.mod:\n                this.transition = 0;\n                this.vibrato = 0;\n                this.interval = 0;\n                this.chord = 0;\n                this.modChannels = [];\n                this.modInstruments = [];\n                this.modulators = [];\n                for (let mod = 0; mod < Config.modCount; mod++) {\n                    this.modChannels.push([-2]);\n                    this.modInstruments.push([0]);\n                    this.modulators.push(Config.modulators.dictionary[\"none\"].index);\n                    this.invalidModulators[mod] = false;\n                    this.modFilterTypes[mod] = 0;\n                    this.modEnvelopeNumbers[mod] = 0;\n                }\n                break;\n            case InstrumentType.supersaw:\n                this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                this.supersawDynamism = Config.supersawDynamismMax;\n                this.supersawSpread = Math.ceil(Config.supersawSpreadMax / 2.0);\n                this.supersawShape = 0;\n                this.pulseWidth = Config.pulseWidthRange - 1;\n                this.decimalOffset = 0;\n                break;\n            default:\n                throw new Error(\"Unrecognized instrument type: \" + type);\n        }\n        // Chip/noise instruments had arpeggio and FM had custom interval but neither\n        // explicitly saved the chorus setting beforeSeven so enable it here. The effects\n        // will otherwise get overridden when reading SongTagCode.startInstrument.\n        if (this.chord != Config.chords.dictionary[\"simultaneous\"].index) {\n            // Enable chord if it was used.\n            this.mdeffects = (this.mdeffects | (1 << MDEffectType.chord));\n        }\n    }\n\n    // (only) difference for JummBox: Returns whether or not the note filter was chosen for filter conversion.\n    convertLegacySettings(legacySettings: LegacySettings, forceSimpleFilter: boolean): void {\n        let legacyCutoffSetting: number | undefined = legacySettings.filterCutoff;\n        let legacyResonanceSetting: number | undefined = legacySettings.filterResonance;\n        let legacyFilterEnv: Envelope | undefined = legacySettings.filterEnvelope;\n        let legacyPulseEnv: Envelope | undefined = legacySettings.pulseEnvelope;\n        let legacyOperatorEnvelopes: Envelope[] | undefined = legacySettings.operatorEnvelopes;\n        let legacyFeedbackEnv: Envelope | undefined = legacySettings.feedbackEnvelope;\n\n        // legacy defaults:\n        if (legacyCutoffSetting == undefined) legacyCutoffSetting = (this.type == InstrumentType.chip) ? 6 : 10;\n        if (legacyResonanceSetting == undefined) legacyResonanceSetting = 0;\n        if (legacyFilterEnv == undefined) legacyFilterEnv = Config.envelopes.dictionary[\"none\"];\n        if (legacyPulseEnv == undefined) legacyPulseEnv = Config.envelopes.dictionary[(this.type == InstrumentType.pwm) ? \"twang 2\" : \"none\"];\n        if (legacyOperatorEnvelopes == undefined) legacyOperatorEnvelopes = [Config.envelopes.dictionary[(this.type == InstrumentType.fm) ? \"note size\" : \"none\"], Config.envelopes.dictionary[\"none\"], Config.envelopes.dictionary[\"none\"], Config.envelopes.dictionary[\"none\"]];\n        if (legacyFeedbackEnv == undefined) legacyFeedbackEnv = Config.envelopes.dictionary[\"none\"];\n\n        // The \"punch\" envelope is special: it goes *above* the chosen cutoff. But if the cutoff was already at the max, it couldn't go any higher... except in the current version of BeepBox I raised the max cutoff so it *can* but then it sounds different, so to preserve the original sound let's just remove the punch envelope.\n        const legacyFilterCutoffRange = 11;\n        const cutoffAtMax = (legacyCutoffSetting == legacyFilterCutoffRange - 1);\n        if (cutoffAtMax && legacyFilterEnv.type == EnvelopeType.punch) legacyFilterEnv = Config.envelopes.dictionary[\"none\"];\n\n        const carrierCount = Config.algorithms[this.algorithm].carrierCount;\n        let noCarriersControlledByNoteSize = true;\n        let allCarriersControlledByNoteSize = true;\n        let noteSizeControlsSomethingElse = (legacyFilterEnv.type == EnvelopeType.noteSize) || (legacyPulseEnv.type == EnvelopeType.noteSize);\n        if (this.type == InstrumentType.fm || this.type == InstrumentType.fm6op) {\n            noteSizeControlsSomethingElse = noteSizeControlsSomethingElse || (legacyFeedbackEnv.type == EnvelopeType.noteSize);\n            for (let i = 0; i < legacyOperatorEnvelopes.length; i++) {\n                if (i < carrierCount) {\n                    if (legacyOperatorEnvelopes[i].type != EnvelopeType.noteSize) {\n                        allCarriersControlledByNoteSize = false;\n                    } else {\n                        noCarriersControlledByNoteSize = false;\n                    }\n                } else {\n                    noteSizeControlsSomethingElse = noteSizeControlsSomethingElse || (legacyOperatorEnvelopes[i].type == EnvelopeType.noteSize);\n                }\n            }\n        }\n\n        this.envelopeCount = 0;\n\n        if (this.type == InstrumentType.fm || this.type == InstrumentType.fm6op) {\n            if (allCarriersControlledByNoteSize && noteSizeControlsSomethingElse) {\n                this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"noteVolume\"].index, 0, Config.envelopes.dictionary[\"note size\"].index, false);\n            } else if (noCarriersControlledByNoteSize && !noteSizeControlsSomethingElse) {\n                this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"none\"].index, 0, Config.envelopes.dictionary[\"note size\"].index, false);\n            }\n        }\n\n        /*\n        if (legacyFilterEnv.type == EnvelopeType.none) {\n            this.noteFilter.reset();\n            this.noteFilterType = false;\n            this.eqFilter.convertLegacySettings(legacyCutoffSetting, legacyResonanceSetting, legacyFilterEnv);\n            this.addEffect(EffectType.eqFilter);\n            if (forceSimpleFilter || this.eqFilterType) {\n                this.eqFilterType = true;\n                this.eqFilterSimpleCut = legacyCutoffSetting;\n                this.eqFilterSimplePeak = legacyResonanceSetting;\n            }\n        } else {\n            this.eqFilter.reset();\n\n            this.eqFilterType = false;\n            this.noteFilterType = false;\n            this.noteFilter.convertLegacySettings(legacyCutoffSetting, legacyResonanceSetting, legacyFilterEnv);\n            this.removeEffect(EffectType.eqFilter);\n            this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"noteFilterAllFreqs\"].index, 0, legacyFilterEnv.index, false);\n            if (forceSimpleFilter || this.noteFilterType) {\n                this.noteFilterType = true;\n                this.noteFilterSimpleCut = legacyCutoffSetting;\n                this.noteFilterSimplePeak = legacyResonanceSetting;\n            }\n        }\n        */\n\n        if (legacyPulseEnv.type != EnvelopeType.none) {\n            this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"pulseWidth\"].index, 0, legacyPulseEnv.index, false);\n        }\n\n        for (let i = 0; i < legacyOperatorEnvelopes.length; i++) {\n            if (i < carrierCount && allCarriersControlledByNoteSize) continue;\n            if (legacyOperatorEnvelopes[i].type != EnvelopeType.none) {\n                this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"operatorAmplitude\"].index, i, legacyOperatorEnvelopes[i].index, false);\n            }\n        }\n\n        if (legacyFeedbackEnv.type != EnvelopeType.none) {\n            this.addEnvelope(Config.instrumentAutomationTargets.dictionary[\"feedbackAmplitude\"].index, 0, legacyFeedbackEnv.index, false);\n        }\n    }\n\n    toJsonObject(): Object {\n        const instrumentObject: any = {\n            \"type\": Config.instrumentTypeNames[this.type],\n            \"volume\": this.volume,\n            \"noteFilter\": this.noteFilter.toJsonObject(),\n            \"noteFilterType\": this.noteFilterType,\n            \"noteSimpleCut\": this.noteFilterSimpleCut,\n            \"noteSimplePeak\": this.noteFilterSimplePeak,\n            \"envelopeSpeed\": this.envelopeSpeed,\n        };\n\n        if (this.preset != this.type) {\n            instrumentObject[\"preset\"] = this.preset;\n        }\n\n        for (let i = 0; i < Config.filterMorphCount; i++) {\n            if (this.noteSubFilters[i] != null)\n                instrumentObject[\"noteSubFilters\" + i] = this.noteSubFilters[i]!.toJsonObject();\n        }\n\n        //instrumentObject[\"effects\"] = this.effects;\n        instrumentObject[\"mdeffects\"] = this.mdeffects;\n\n        if (effectsIncludeTransition(this.mdeffects)) {\n            instrumentObject[\"transition\"] = Config.transitions[this.transition].name;\n            instrumentObject[\"clicklessTransition\"] = this.clicklessTransition;\n        }\n        if (effectsIncludeChord(this.mdeffects)) {\n            instrumentObject[\"chord\"] = this.getChord().name;\n            instrumentObject[\"fastTwoNoteArp\"] = this.fastTwoNoteArp;\n            instrumentObject[\"arpeggioSpeed\"] = this.arpeggioSpeed;\n            instrumentObject[\"monoChordTone\"] = this.monoChordTone;\n        }\n        if (effectsIncludePitchShift(this.mdeffects)) {\n            instrumentObject[\"pitchShiftSemitones\"] = this.pitchShift;\n        }\n        if (effectsIncludeDetune(this.mdeffects)) {\n            instrumentObject[\"detuneCents\"] = detuneToCents(this.detune);\n        }\n        if (effectsIncludeVibrato(this.mdeffects)) {\n            if (this.vibrato == -1) {\n                this.vibrato = 5;\n            }\n            if (this.vibrato != 5) {\n                instrumentObject[\"vibrato\"] = Config.vibratos[this.vibrato].name;\n            } else {\n                instrumentObject[\"vibrato\"] = \"custom\";\n            }\n            instrumentObject[\"vibratoDepth\"] = this.vibratoDepth;\n            instrumentObject[\"vibratoDelay\"] = this.vibratoDelay;\n            instrumentObject[\"vibratoSpeed\"] = this.vibratoSpeed;\n            instrumentObject[\"vibratoType\"] = this.vibratoType;\n        }\n        /*\n        for (let i = 0; i < this.effectCount; i++) {\n            let effect: Effect | null = this.effects[i]\n            if (effect == null) continue;\n            if (effect.type == EffectType.eqFilter) {\n                instrumentObject[\"eqFilterType\"] = effect.eqFilterType;\n                instrumentObject[\"eqSimpleCut\"] = effect.eqFilterSimpleCut;\n                instrumentObject[\"eqSimplePeak\"] = effect.eqFilterSimplePeak;\n                instrumentObject[\"eqFilter\"] = effect.eqFilter.toJsonObject();\n\n                for (let j = 0; j < Config.filterMorphCount; j++) {\n                    if (effect.eqSubFilters[j] != null)\n                        instrumentObject[\"eqSubFilters\" + j] = effect.eqSubFilters[j]!.toJsonObject();\n                }\n            }\n            else if (effect.type == EffectType.granular) {\n                instrumentObject[\"granular\"] = effect.granular;\n                instrumentObject[\"grainSize\"] = effect.grainSize;\n                instrumentObject[\"grainAmounts\"] = effect.grainAmounts;\n                instrumentObject[\"grainRange\"] = effect.grainRange;\n            }\n            else if (effect.type == EffectType.ringModulation) {\n                instrumentObject[\"ringMod\"] = Math.round(100 * effect.ringModulation / (Config.ringModRange - 1));\n                instrumentObject[\"ringModHz\"] = Math.round(100 * effect.ringModulationHz / (Config.ringModHzRange - 1));\n                instrumentObject[\"ringModWaveformIndex\"] = effect.ringModWaveformIndex;\n                instrumentObject[\"ringModPulseWidth\"] = Math.round(100 * effect.ringModPulseWidth / (Config.pulseWidthRange - 1));\n                instrumentObject[\"ringModHzOffset\"] = Math.round(100 * effect.ringModHzOffset / (Config.rmHzOffsetMax));\n            }\n            else if (effect.type == EffectType.distortion) {\n                instrumentObject[\"distortion\"] = Math.round(100 * effect.distortion / (Config.distortionRange - 1));\n                instrumentObject[\"aliases\"] = this.aliases;\n            }\n            else if (effect.type == EffectType.bitcrusher) {\n                instrumentObject[\"bitcrusherOctave\"] = (Config.bitcrusherFreqRange - 1 - effect.bitcrusherFreq) * Config.bitcrusherOctaveStep;\n                instrumentObject[\"bitcrusherQuantization\"] = Math.round(100 * effect.bitcrusherQuantization / (Config.bitcrusherQuantizationRange - 1));\n            }\n            else if (effect.type == EffectType.panning) {\n                instrumentObject[\"pan\"] = Math.round(100 * (effect.pan - Config.panCenter) / Config.panCenter);\n                instrumentObject[\"panDelay\"] = effect.panDelay;\n            }\n            else if (effect.type == EffectType.chorus) {\n                instrumentObject[\"chorus\"] = Math.round(100 * effect.chorus / (Config.chorusRange - 1));\n            }\n            else if (effect.type == EffectType.echo) {\n                instrumentObject[\"echoSustain\"] = Math.round(100 * effect.echoSustain / (Config.echoSustainRange - 1));\n                instrumentObject[\"echoDelayBeats\"] = Math.round(1000 * (effect.echoDelay + 1) * Config.echoDelayStepTicks / (Config.ticksPerPart * Config.partsPerBeat)) / 1000;\n                instrumentObject[\"echoPingPong\"] = Math.round(100 * (effect.echoPingPong - Config.panCenter) / Config.panCenter);\n            }\n            else if (effect.type == EffectType.reverb) {\n                instrumentObject[\"reverb\"] = Math.round(100 * effect.reverb / (Config.reverbRange - 1));\n            }\n        }\n        */\n\n        if (this.type != InstrumentType.drumset) {\n            instrumentObject[\"fadeInSeconds\"] = Math.round(10000 * fadeInSettingToSeconds(this.fadeIn)) / 10000;\n            instrumentObject[\"fadeOutTicks\"] = fadeOutSettingToTicks(this.fadeOut);\n        }\n\n        if (this.type == InstrumentType.harmonics || this.type == InstrumentType.pickedString) {\n            instrumentObject[\"harmonics\"] = [];\n            for (let i = 0; i < Config.harmonicsControlPoints; i++) {\n                instrumentObject[\"harmonics\"][i] = Math.round(100 * this.harmonicsWave.harmonics[i] / Config.harmonicsMax);\n            }\n        }\n\n        if (this.type == InstrumentType.noise) {\n            instrumentObject[\"wave\"] = Config.chipNoises[this.chipNoise].name;\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\n            if (this.unison == Config.unisons.length) {\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\n            }\n        } else if (this.type == InstrumentType.spectrum) {\n            instrumentObject[\"spectrum\"] = [];\n            for (let i = 0; i < Config.spectrumControlPoints; i++) {\n                instrumentObject[\"spectrum\"][i] = Math.round(100 * this.spectrumWave.spectrum[i] / Config.spectrumMax);\n            }\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\n            if (this.unison == Config.unisons.length) {\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\n            }\n        } else if (this.type == InstrumentType.drumset) {\n            instrumentObject[\"drums\"] = [];\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\n            if (this.unison == Config.unisons.length) {\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\n            }\n            for (let j = 0; j < Config.drumCount; j++) {\n                const spectrum: number[] = [];\n                for (let i = 0; i < Config.spectrumControlPoints; i++) {\n                    spectrum[i] = Math.round(100 * this.drumsetSpectrumWaves[j].spectrum[i] / Config.spectrumMax);\n                }\n                instrumentObject[\"drums\"][j] = {\n                    \"filterEnvelope\": this.getDrumsetEnvelope(j).name,\n                    \"spectrum\": spectrum,\n                };\n            }\n        } else if (this.type == InstrumentType.chip) {\n            instrumentObject[\"wave\"] = Config.chipWaves[this.chipWave].name;\n            // should this unison pushing code be turned into a function..?\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\n            // these don't need to be pushed if custom unisons aren't being used\n            if (this.unison == Config.unisons.length) {\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\n            }\n\n            // advloop addition\n            instrumentObject[\"isUsingAdvancedLoopControls\"] = this.isUsingAdvancedLoopControls;\n            instrumentObject[\"chipWaveLoopStart\"] = this.chipWaveLoopStart;\n            instrumentObject[\"chipWaveLoopEnd\"] = this.chipWaveLoopEnd;\n            instrumentObject[\"chipWaveLoopMode\"] = this.chipWaveLoopMode;\n            instrumentObject[\"chipWavePlayBackwards\"] = this.chipWavePlayBackwards;\n            instrumentObject[\"chipWaveStartOffset\"] = this.chipWaveStartOffset;\n            // advloop addition\n            instrumentObject[\"chipWaveInStereo\"] = this.chipWaveInStereo;\n        } else if (this.type == InstrumentType.pwm) {\n            instrumentObject[\"pulseWidth\"] = this.pulseWidth;\n            instrumentObject[\"decimalOffset\"] = this.decimalOffset;\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\n            if (this.unison == Config.unisons.length) {\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\n            }\n        } else if (this.type == InstrumentType.supersaw) {\n            instrumentObject[\"pulseWidth\"] = this.pulseWidth;\n            instrumentObject[\"decimalOffset\"] = this.decimalOffset;\n            instrumentObject[\"dynamism\"] = Math.round(100 * this.supersawDynamism / Config.supersawDynamismMax);\n            instrumentObject[\"spread\"] = Math.round(100 * this.supersawSpread / Config.supersawSpreadMax);\n            instrumentObject[\"shape\"] = Math.round(100 * this.supersawShape / Config.supersawShapeMax);\n        } else if (this.type == InstrumentType.pickedString) {\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\n            if (this.unison == Config.unisons.length) {\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\n            }\n            instrumentObject[\"stringSustain\"] = Math.round(100 * this.stringSustain / (Config.stringSustainRange - 1));\n            if (Config.enableAcousticSustain) {\n                instrumentObject[\"stringSustainType\"] = Config.sustainTypeNames[this.stringSustainType];\n            }\n        } else if (this.type == InstrumentType.harmonics) {\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\n            if (this.unison == Config.unisons.length) {\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\n            }\n        } else if (this.type == InstrumentType.fm || this.type == InstrumentType.fm6op) {\n            const operatorArray: Object[] = [];\n            for (const operator of this.operators) {\n                operatorArray.push({\n                    \"frequency\": Config.operatorFrequencies[operator.frequency].name,\n                    \"amplitude\": operator.amplitude,\n                    \"waveform\": Config.operatorWaves[operator.waveform].name,\n                    \"pulseWidth\": operator.pulseWidth,\n                });\n            }\n            if (this.type == InstrumentType.fm) {\n                instrumentObject[\"algorithm\"] = Config.algorithms[this.algorithm].name;\n                instrumentObject[\"feedbackType\"] = Config.feedbacks[this.feedbackType].name;\n                instrumentObject[\"feedbackAmplitude\"] = this.feedbackAmplitude;\n                instrumentObject[\"operators\"] = operatorArray;\n            } else {\n                instrumentObject[\"algorithm\"] = Config.algorithms6Op[this.algorithm6Op].name;\n                instrumentObject[\"feedbackType\"] = Config.feedbacks6Op[this.feedbackType6Op].name;\n                instrumentObject[\"feedbackAmplitude\"] = this.feedbackAmplitude;\n                if (this.algorithm6Op == 0) {\n                    const customAlgorithm: any = {};\n                    customAlgorithm[\"mods\"] = this.customAlgorithm.modulatedBy;\n                    customAlgorithm[\"carrierCount\"] = this.customAlgorithm.carrierCount;\n                    instrumentObject[\"customAlgorithm\"] = customAlgorithm;\n                }\n                if (this.feedbackType6Op == 0) {\n                    const customFeedback: any = {};\n                    customFeedback[\"mods\"] = this.customFeedbackType.indices;\n                    instrumentObject[\"customFeedback\"] = customFeedback;\n                }\n\n                instrumentObject[\"operators\"] = operatorArray;\n            }\n        } else if (this.type == InstrumentType.customChipWave) {\n            instrumentObject[\"wave\"] = Config.chipWaves[this.chipWave].name;\n            instrumentObject[\"unison\"] = this.unison == Config.unisons.length ? \"custom\" : Config.unisons[this.unison].name;\n            if (this.unison == Config.unisons.length) {\n                instrumentObject[\"unisonVoices\"] = this.unisonVoices;\n                instrumentObject[\"unisonSpread\"] = this.unisonSpread;\n                instrumentObject[\"unisonOffset\"] = this.unisonOffset;\n                instrumentObject[\"unisonExpression\"] = this.unisonExpression;\n                instrumentObject[\"unisonSign\"] = this.unisonSign;\n            }\n            instrumentObject[\"customChipWave\"] = new Float64Array(64);\n            instrumentObject[\"customChipWaveIntegral\"] = new Float64Array(65);\n            for (let i = 0; i < this.customChipWave.length; i++) {\n                instrumentObject[\"customChipWave\"][i] = this.customChipWave[i];\n                // Meh, waste of space and can be inaccurate. It will be recalc'ed when instrument loads.\n                //instrumentObject[\"customChipWaveIntegral\"][i] = this.customChipWaveIntegral[i];\n            }\n        } else if (this.type == InstrumentType.mod) {\n            instrumentObject[\"modChannels\"] = [];\n            instrumentObject[\"modInstruments\"] = [];\n            instrumentObject[\"modSettings\"] = [];\n            instrumentObject[\"modFilterTypes\"] = [];\n            instrumentObject[\"modEnvelopeNumbers\"] = [];\n            for (let mod = 0; mod < Config.modCount; mod++) {\n                instrumentObject[\"modChannels\"][mod] = this.modChannels[mod];\n                instrumentObject[\"modInstruments\"][mod] = this.modInstruments[mod];\n                instrumentObject[\"modSettings\"][mod] = this.modulators[mod];\n                instrumentObject[\"modFilterTypes\"][mod] = this.modFilterTypes[mod];\n                instrumentObject[\"modEnvelopeNumbers\"][mod] = this.modEnvelopeNumbers[mod];\n            }\n        } else {\n            throw new Error(\"Unrecognized instrument type\");\n        }\n\n        const envelopes: any[] = [];\n        for (let i = 0; i < this.envelopeCount; i++) {\n            envelopes.push(this.envelopes[i].toJsonObject());\n        }\n        instrumentObject[\"envelopes\"] = envelopes;\n\n        return instrumentObject;\n    }\n\n\n    fromJsonObject(instrumentObject: any, isNoiseChannel: boolean, isModChannel: boolean, useSlowerRhythm: boolean, useFastTwoNoteArp: boolean, legacyGlobalReverb = 0, jsonFormat = Config.jsonFormat): void {\n        if (instrumentObject == undefined) instrumentObject = {};\n\n        const format = jsonFormat.toLowerCase();\n\n        let type = Config.instrumentTypeNames.indexOf(instrumentObject[\"type\"]);\n        // SynthBox support\n        if ((format == \"synthbox\") && (instrumentObject[\"type\"] == \"FM\")) type = Config.instrumentTypeNames.indexOf(\"FM6op\");\n        if (<any>type == -1) type = isModChannel ? InstrumentType.mod : (isNoiseChannel ? InstrumentType.noise : InstrumentType.chip);\n        this.setTypeAndReset(type, isNoiseChannel, isModChannel);\n\n        if (instrumentObject[\"preset\"] != undefined) {\n            this.preset = instrumentObject[\"preset\"] >>> 0;\n        }\n\n        if (instrumentObject[\"volume\"] != undefined) {\n            if (format == \"jummbox\" || format == \"midbox\" || format == \"synthbox\" || format == \"goldbox\" || format == \"paandorasbox\" || format == \"ultrabox\" || format == \"slarmoosbox\" || format == \"Theepbox\") {\n                this.volume = clamp(-Config.volumeRange / 2, (Config.volumeRange / 2) + 1, instrumentObject[\"volume\"] | 0);\n            } else {\n                this.volume = Math.round(-clamp(0, 8, Math.round(5 - (instrumentObject[\"volume\"] | 0) / 20)) * 25.0 / 7.0);\n            }\n        } else {\n            this.volume = 0;\n        }\n\n        //These can probably be condensed with ternary operators\n        this.envelopeSpeed = instrumentObject[\"envelopeSpeed\"] != undefined ? clamp(0, Config.modulators.dictionary[\"envelope speed\"].maxRawVol + 1, instrumentObject[\"envelopeSpeed\"] | 0) : 12;\n\n        if (Array.isArray(instrumentObject[\"effects\"])) {\n            //this.effects = instrumentObject[\"effects\"];\n            /*\n            for (let i = 0; i < instrumentObject[\"effects\"].length; i++) {\n                this.addEffect(instrumentObject[\"effects\"][i]);\n            }\n            */\n        } else {\n            // The index of these names is reinterpreted as a bitfield, which relies on reverb and chorus being the first effects!\n            //const legacyEffectsNames: string[] = [\"none\", \"reverb\", \"chorus\", \"chorus & reverb\"];\n            //this.effects = legacyEffectsNames.indexOf(instrumentObject[\"effects\"]);\n            //if (this.effects == -1) this.effects = (this.type == InstrumentType.noise) ? 0 : 1;\n        }\n        if (instrumentObject[\"mdeffects\"] != undefined) {\n            this.mdeffects = instrumentObject[\"mdeffects\"];\n        }\n        else this.mdeffects = 0; //TODO: convert old effect list into md effects\n\n        this.transition = Config.transitions.dictionary[\"normal\"].index; // default value.\n        const transitionProperty = instrumentObject[\"transition\"] || instrumentObject[\"envelope\"]; // the transition property used to be called envelope, so check that too.\n        if (transitionProperty != undefined) {\n            let transition: Transition | undefined = Config.transitions.dictionary[transitionProperty];\n            if (instrumentObject[\"fadeInSeconds\"] == undefined || instrumentObject[\"fadeOutTicks\"] == undefined) {\n                const legacySettings = (<any>{\n                    \"binary\": { transition: \"interrupt\", fadeInSeconds: 0.0, fadeOutTicks: -1 },\n                    \"seamless\": { transition: \"interrupt\", fadeInSeconds: 0.0, fadeOutTicks: -1 },\n                    \"sudden\": { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: -3 },\n                    \"hard\": { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: -3 },\n                    \"smooth\": { transition: \"normal\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\n                    \"soft\": { transition: \"normal\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\n                    // Note that the old slide transition has the same name as a new slide transition that is different.\n                    // Only apply legacy settings if the instrument JSON was created before, based on the presence\n                    // of the fade in/out fields.\n                    \"slide\": { transition: \"slide in pattern\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\n                    \"cross fade\": { transition: \"normal\", fadeInSeconds: 0.04, fadeOutTicks: 6 },\n                    \"hard fade\": { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: 48 },\n                    \"medium fade\": { transition: \"normal\", fadeInSeconds: 0.0125, fadeOutTicks: 72 },\n                    \"soft fade\": { transition: \"normal\", fadeInSeconds: 0.06, fadeOutTicks: 96 },\n                })[transitionProperty];\n                if (legacySettings != undefined) {\n                    transition = Config.transitions.dictionary[legacySettings.transition];\n                    // These may be overridden below.\n                    this.fadeIn = secondsToFadeInSetting(legacySettings.fadeInSeconds);\n                    this.fadeOut = ticksToFadeOutSetting(legacySettings.fadeOutTicks);\n                }\n            }\n            if (transition != undefined) this.transition = transition.index;\n\n            if (this.transition != Config.transitions.dictionary[\"normal\"].index) {\n                // Enable transition if it was used.\n                this.mdeffects = (this.mdeffects | (1 << MDEffectType.transition));\n            }\n        }\n\n        // Overrides legacy settings in transition above.\n        if (instrumentObject[\"fadeInSeconds\"] != undefined) {\n            this.fadeIn = secondsToFadeInSetting(+instrumentObject[\"fadeInSeconds\"]);\n        }\n        if (instrumentObject[\"fadeOutTicks\"] != undefined) {\n            this.fadeOut = ticksToFadeOutSetting(+instrumentObject[\"fadeOutTicks\"]);\n        }\n\n        {\n            // Note that the chord setting may be overridden by instrumentObject[\"chorus\"] below.\n            const chordProperty = instrumentObject[\"chord\"];\n            const legacyChordNames: Dictionary<string> = { \"harmony\": \"simultaneous\" };\n            const chord: Chord | undefined = Config.chords.dictionary[legacyChordNames[chordProperty]] || Config.chords.dictionary[chordProperty];\n            if (chord != undefined) {\n                this.chord = chord.index;\n            } else {\n                // Different instruments have different default chord types based on historical behaviour.\n                if (this.type == InstrumentType.noise) {\n                    this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                } else if (this.type == InstrumentType.pickedString) {\n                    this.chord = Config.chords.dictionary[\"strum\"].index;\n                } else if (this.type == InstrumentType.chip) {\n                    this.chord = Config.chords.dictionary[\"arpeggio\"].index;\n                } else if (this.type == InstrumentType.fm || this.type == InstrumentType.fm6op) {\n                    this.chord = Config.chords.dictionary[\"custom interval\"].index;\n                } else {\n                    this.chord = Config.chords.dictionary[\"simultaneous\"].index;\n                }\n            }\n        }\n\n        this.unison = Config.unisons.dictionary[\"none\"].index; // default value.\n        const unisonProperty = instrumentObject[\"unison\"] || instrumentObject[\"interval\"] || instrumentObject[\"chorus\"]; // The unison property has gone by various names in the past.\n        if (unisonProperty != undefined) {\n            const legacyChorusNames: Dictionary<string> = { \"union\": \"none\", \"fifths\": \"fifth\", \"octaves\": \"octave\", \"error\": \"voiced\" };\n            const unison: Unison | undefined = Config.unisons.dictionary[legacyChorusNames[unisonProperty]] || Config.unisons.dictionary[unisonProperty];\n            if (unison != undefined) this.unison = unison.index;\n            if (unisonProperty == \"custom\") this.unison = Config.unisons.length;\n        }\n        //clamp these???\n        this.unisonVoices = (instrumentObject[\"unisonVoices\"] == undefined) ? Config.unisons[this.unison].voices : instrumentObject[\"unisonVoices\"];\n        this.unisonSpread = (instrumentObject[\"unisonSpread\"] == undefined) ? Config.unisons[this.unison].spread : instrumentObject[\"unisonSpread\"];\n        this.unisonOffset = (instrumentObject[\"unisonOffset\"] == undefined) ? Config.unisons[this.unison].offset : instrumentObject[\"unisonOffset\"];\n        this.unisonExpression = (instrumentObject[\"unisonExpression\"] == undefined) ? Config.unisons[this.unison].expression : instrumentObject[\"unisonExpression\"];\n        this.unisonSign = (instrumentObject[\"unisonSign\"] == undefined) ? Config.unisons[this.unison].sign : instrumentObject[\"unisonSign\"];\n\n        if (instrumentObject[\"chorus\"] == \"custom harmony\") {\n            // The original chorus setting had an option that now maps to two different settings. Override those if necessary.\n            this.unison = Config.unisons.dictionary[\"hum\"].index;\n            this.chord = Config.chords.dictionary[\"custom interval\"].index;\n        }\n        if (this.chord != Config.chords.dictionary[\"simultaneous\"].index && !Array.isArray(instrumentObject[\"mdeffects\"])) {\n            // Enable chord if it was used.\n            this.mdeffects = (this.mdeffects | (1 << MDEffectType.chord));\n        }\n\n        if (instrumentObject[\"pitchShiftSemitones\"] != undefined) {\n            this.pitchShift = clamp(0, Config.pitchShiftRange, Math.round(+instrumentObject[\"pitchShiftSemitones\"]));\n        }\n        // modbox pitch shift, known in that mod as \"octave offset\"\n        if (instrumentObject[\"octoff\"] != undefined) {\n            let potentialPitchShift = instrumentObject[\"octoff\"];\n            this.mdeffects = (this.mdeffects | (1 << MDEffectType.pitchShift));\n\n            if ((potentialPitchShift == \"+1 (octave)\") || (potentialPitchShift == \"+2 (2 octaves)\")) {\n                this.pitchShift = 24;\n            } else if ((potentialPitchShift == \"+1/2 (fifth)\") || (potentialPitchShift == \"+1 1/2 (octave and fifth)\")) {\n                this.pitchShift = 18;\n            } else if ((potentialPitchShift == \"-1 (octave)\") || (potentialPitchShift == \"-2 (2 octaves\")) { //this typo is in modbox\n                this.pitchShift = 0;\n            } else if ((potentialPitchShift == \"-1/2 (fifth)\") || (potentialPitchShift == \"-1 1/2 (octave and fifth)\")) {\n                this.pitchShift = 6;\n            } else {\n                this.pitchShift = 12;\n            }\n        }\n        if (instrumentObject[\"detuneCents\"] != undefined) {\n            this.detune = clamp(Config.detuneMin, Config.detuneMax + 1, Math.round(centsToDetune(+instrumentObject[\"detuneCents\"])));\n        }\n\n        this.vibrato = Config.vibratos.dictionary[\"none\"].index; // default value.\n        const vibratoProperty = instrumentObject[\"vibrato\"] || instrumentObject[\"effect\"]; // The vibrato property was previously called \"effect\", not to be confused with the current \"effects\".\n        if (vibratoProperty != undefined) {\n\n            const legacyVibratoNames: Dictionary<string> = { \"vibrato light\": \"light\", \"vibrato delayed\": \"delayed\", \"vibrato heavy\": \"heavy\" };\n            const vibrato: Vibrato | undefined = Config.vibratos.dictionary[legacyVibratoNames[unisonProperty]] || Config.vibratos.dictionary[vibratoProperty];\n            if (vibrato != undefined)\n                this.vibrato = vibrato.index;\n            else if (vibratoProperty == \"custom\")\n                this.vibrato = Config.vibratos.length; // custom\n\n            if (this.vibrato == Config.vibratos.length) {\n                this.vibratoDepth = instrumentObject[\"vibratoDepth\"];\n                this.vibratoSpeed = instrumentObject[\"vibratoSpeed\"];\n                this.vibratoDelay = instrumentObject[\"vibratoDelay\"];\n                this.vibratoType = instrumentObject[\"vibratoType\"];\n            }\n            else { // Set defaults for the vibrato profile\n                this.vibratoDepth = Config.vibratos[this.vibrato].amplitude;\n                this.vibratoDelay = Config.vibratos[this.vibrato].delayTicks / 2;\n                this.vibratoSpeed = 10; // default;\n                this.vibratoType = Config.vibratos[this.vibrato].type;\n            }\n\n            // Old songs may have a vibrato effect without explicitly enabling it.\n            if (vibrato != Config.vibratos.dictionary[\"none\"]) {\n                this.mdeffects = (this.mdeffects | (1 << MDEffectType.vibrato));\n            }\n        }\n\n        if (instrumentObject[\"detune\"] != undefined) {\n            this.detune = clamp(Config.detuneMin, Config.detuneMax + 1, (instrumentObject[\"detune\"] | 0));\n        }\n        else if (instrumentObject[\"detuneCents\"] == undefined) {\n            this.detune = Config.detuneCenter;\n        }\n\n        if (instrumentObject[\"pulseWidth\"] != undefined) {\n            this.pulseWidth = clamp(1, Config.pulseWidthRange + 1, Math.round(instrumentObject[\"pulseWidth\"]));\n        } else {\n            this.pulseWidth = Config.pulseWidthRange;\n        }\n\n        if (instrumentObject[\"decimalOffset\"] != undefined) {\n            this.decimalOffset = clamp(0, 99 + 1, Math.round(instrumentObject[\"decimalOffset\"]));\n        } else {\n            this.decimalOffset = 0;\n        }\n\n        if (instrumentObject[\"dynamism\"] != undefined) {\n            this.supersawDynamism = clamp(0, Config.supersawDynamismMax + 1, Math.round(Config.supersawDynamismMax * (instrumentObject[\"dynamism\"] | 0) / 100));\n        } else {\n            this.supersawDynamism = Config.supersawDynamismMax;\n        }\n        if (instrumentObject[\"spread\"] != undefined) {\n            this.supersawSpread = clamp(0, Config.supersawSpreadMax + 1, Math.round(Config.supersawSpreadMax * (instrumentObject[\"spread\"] | 0) / 100));\n        } else {\n            this.supersawSpread = Math.ceil(Config.supersawSpreadMax / 2.0);\n        }\n        if (instrumentObject[\"shape\"] != undefined) {\n            this.supersawShape = clamp(0, Config.supersawShapeMax + 1, Math.round(Config.supersawShapeMax * (instrumentObject[\"shape\"] | 0) / 100));\n        } else {\n            this.supersawShape = 0;\n        }\n\n        if (instrumentObject[\"harmonics\"] != undefined) {\n            for (let i = 0; i < Config.harmonicsControlPoints; i++) {\n                this.harmonicsWave.harmonics[i] = Math.max(0, Math.min(Config.harmonicsMax, Math.round(Config.harmonicsMax * (+instrumentObject[\"harmonics\"][i]) / 100)));\n            }\n            this.harmonicsWave.markCustomWaveDirty();\n        } else {\n            this.harmonicsWave.reset();\n        }\n\n        if (instrumentObject[\"spectrum\"] != undefined) {\n            for (let i = 0; i < Config.spectrumControlPoints; i++) {\n                this.spectrumWave.spectrum[i] = Math.max(0, Math.min(Config.spectrumMax, Math.round(Config.spectrumMax * (+instrumentObject[\"spectrum\"][i]) / 100)));\n                this.spectrumWave.markCustomWaveDirty();\n            }\n        } else {\n            this.spectrumWave.reset(isNoiseChannel);\n        }\n\n        if (instrumentObject[\"stringSustain\"] != undefined) {\n            this.stringSustain = clamp(0, Config.stringSustainRange, Math.round((Config.stringSustainRange - 1) * (instrumentObject[\"stringSustain\"] | 0) / 100));\n        } else {\n            this.stringSustain = 10;\n        }\n        this.stringSustainType = Config.enableAcousticSustain ? Config.sustainTypeNames.indexOf(instrumentObject[\"stringSustainType\"]) : SustainType.bright;\n        if (<any>this.stringSustainType == -1) this.stringSustainType = SustainType.bright;\n\n        if (this.type == InstrumentType.noise) {\n            this.chipNoise = Config.chipNoises.findIndex(wave => wave.name == instrumentObject[\"wave\"]);\n            if (instrumentObject[\"wave\"] == \"pink noise\") this.chipNoise = Config.chipNoises.findIndex(wave => wave.name == \"pink\");\n            if (instrumentObject[\"wave\"] == \"brownian noise\") this.chipNoise = Config.chipNoises.findIndex(wave => wave.name == \"brownian\");\n            if (this.chipNoise == -1) this.chipNoise = 1;\n        }\n\n        const legacyEnvelopeNames: Dictionary<string> = { \"custom\": \"note size\", \"steady\": \"none\", \"pluck 1\": \"twang 1\", \"pluck 2\": \"twang 2\", \"pluck 3\": \"twang 3\" };\n        const getEnvelope = (name: any): Envelope | undefined => {\n            if (legacyEnvelopeNames[name] != undefined) return Config.envelopes.dictionary[legacyEnvelopeNames[name]];\n            else {\n                return Config.envelopes.dictionary[name];\n            }\n        }\n\n        if (this.type == InstrumentType.drumset) {\n            if (instrumentObject[\"drums\"] != undefined) {\n                for (let j = 0; j < Config.drumCount; j++) {\n                    const drum = instrumentObject[\"drums\"][j];\n                    if (drum == undefined) continue;\n\n                    this.drumsetEnvelopes[j] = Config.envelopes.dictionary[\"twang 2\"].index; // default value.\n                    if (drum[\"filterEnvelope\"] != undefined) {\n                        const envelope: Envelope | undefined = getEnvelope(drum[\"filterEnvelope\"]);\n                        if (envelope != undefined) this.drumsetEnvelopes[j] = envelope.index;\n                    }\n                    if (drum[\"spectrum\"] != undefined) {\n                        for (let i = 0; i < Config.spectrumControlPoints; i++) {\n                            this.drumsetSpectrumWaves[j].spectrum[i] = Math.max(0, Math.min(Config.spectrumMax, Math.round(Config.spectrumMax * (+drum[\"spectrum\"][i]) / 100)));\n                        }\n                    }\n                    this.drumsetSpectrumWaves[j].markCustomWaveDirty();\n                }\n            }\n        }\n\n        if (this.type == InstrumentType.chip) {\n            const legacyWaveNames: Dictionary<number> = { \"triangle\": 1, \"square\": 2, \"pulse wide\": 3, \"pulse narrow\": 4, \"sawtooth\": 5, \"double saw\": 6, \"double pulse\": 7, \"spiky\": 8, \"plateau\": 0 };\n            const modboxWaveNames: Dictionary<number> = { \"10% pulse\": 22, \"sunsoft bass\": 23, \"loud pulse\": 24, \"sax\": 25, \"guitar\": 26, \"atari bass\": 28, \"atari pulse\": 29, \"1% pulse\": 30, \"curved sawtooth\": 31, \"viola\": 32, \"brass\": 33, \"acoustic bass\": 34, \"lyre\": 35, \"ramp pulse\": 36, \"piccolo\": 37, \"squaretooth\": 38, \"flatline\": 39, \"pnryshk a (u5)\": 40, \"pnryshk b (riff)\": 41 };\n            const sandboxWaveNames: Dictionary<number> = { \"shrill lute\": 42, \"shrill bass\": 44, \"nes pulse\": 45, \"saw bass\": 46, \"euphonium\": 47, \"shrill pulse\": 48, \"r-sawtooth\": 49, \"recorder\": 50, \"narrow saw\": 51, \"deep square\": 52, \"ring pulse\": 53, \"double sine\": 54, \"contrabass\": 55, \"double bass\": 56 };\n            const zefboxWaveNames: Dictionary<number> = { \"semi-square\": 63, \"deep square\": 64, \"squaretal\": 40, \"saw wide\": 65, \"saw narrow \": 66, \"deep sawtooth\": 67, \"sawtal\": 68, \"pulse\": 69, \"triple pulse\": 70, \"high pulse\": 71, \"deep pulse\": 72 };\n            const miscWaveNames: Dictionary<number> = { \"test1\": 56, \"pokey 4bit lfsr\": 57, \"pokey 5step bass\": 58, \"isolated spiky\": 59, \"unnamed 1\": 60, \"unnamed 2\": 61, \"guitar string\": 75, \"intense\": 76, \"buzz wave\": 77, \"pokey square\": 57, \"pokey bass\": 58, \"banana wave\": 83, \"test 1\": 84, \"test 2\": 84, \"real snare\": 85, \"earthbound o. guitar\": 86 };\n            const paandorasboxWaveNames: Dictionary<number> = { \"kick\": 87, \"snare\": 88, \"piano1\": 89, \"WOW\": 90, \"overdrive\": 91, \"trumpet\": 92, \"saxophone\": 93, \"orchestrahit\": 94, \"detached violin\": 95, \"synth\": 96, \"sonic3snare\": 97, \"come on\": 98, \"choir\": 99, \"overdriveguitar\": 100, \"flute\": 101, \"legato violin\": 102, \"tremolo violin\": 103, \"amen break\": 104, \"pizzicato violin\": 105, \"tim allen grunt\": 106, \"tuba\": 107, \"loopingcymbal\": 108, \"standardkick\": 109, \"standardsnare\": 110, \"closedhihat\": 111, \"foothihat\": 112, \"openhihat\": 113, \"crashcymbal\": 114, \"pianoC4\": 115, \"liver pad\": 116, \"marimba\": 117, \"susdotwav\": 118, \"wackyboxtts\": 119 };\n            // const paandorasbetaWaveNames = {\"contrabass\": 55, \"double bass\": 56 };\n            //this.chipWave = legacyWaveNames[instrumentObject[\"wave\"]] != undefined ? legacyWaveNames[instrumentObject[\"wave\"]] : Config.chipWaves.findIndex(wave => wave.name == instrumentObject[\"wave\"]);\n            this.chipWave = -1;\n            const rawName = instrumentObject[\"wave\"];\n            for (const table of [\n                legacyWaveNames,\n                modboxWaveNames,\n                sandboxWaveNames,\n                zefboxWaveNames,\n                miscWaveNames,\n                paandorasboxWaveNames\n            ]) {\n                if (this.chipWave == -1 && table[rawName] != undefined && Config.chipWaves[table[rawName]] != undefined) {\n                    this.chipWave = table[rawName];\n                    break;\n                }\n            }\n            if (this.chipWave == -1) {\n                const potentialChipWaveIndex = Config.chipWaves.findIndex(wave => wave.name == rawName);\n                if (potentialChipWaveIndex != -1) this.chipWave = potentialChipWaveIndex;\n            }\n            // this.chipWave = legacyWaveNames[instrumentObject[\"wave\"]] != undefined ? legacyWaveNames[instrumentObject[\"wave\"]] : modboxWaveNames[instrumentObject[\"wave\"]] != undefined ? modboxWaveNames[instrumentObject[\"wave\"]] : sandboxWaveNames[instrumentObject[\"wave\"]] != undefined ? sandboxWaveNames[instrumentObject[\"wave\"]] : zefboxWaveNames[instrumentObject[\"wave\"]] != undefined ? zefboxWaveNames[instrumentObject[\"wave\"]] : miscWaveNames[instrumentObject[\"wave\"]] != undefined ? miscWaveNames[instrumentObject[\"wave\"]] : paandorasboxWaveNames[instrumentObject[\"wave\"]] != undefined ? paandorasboxWaveNames[instrumentObject[\"wave\"]] : Config.chipWaves.findIndex(wave => wave.name == instrumentObject[\"wave\"]);\n            if (this.chipWave == -1) this.chipWave = 1;\n        }\n\n        if (this.type == InstrumentType.fm || this.type == InstrumentType.fm6op) {\n            if (this.type == InstrumentType.fm) {\n                this.algorithm = Config.algorithms.findIndex(algorithm => algorithm.name == instrumentObject[\"algorithm\"]);\n                if (this.algorithm == -1) this.algorithm = 0;\n                this.feedbackType = Config.feedbacks.findIndex(feedback => feedback.name == instrumentObject[\"feedbackType\"]);\n                if (this.feedbackType == -1) this.feedbackType = 0;\n            } else {\n                this.algorithm6Op = Config.algorithms6Op.findIndex(algorithm6Op => algorithm6Op.name == instrumentObject[\"algorithm\"]);\n                if (this.algorithm6Op == -1) this.algorithm6Op = 1;\n                if (this.algorithm6Op == 0) {\n                    this.customAlgorithm.set(instrumentObject[\"customAlgorithm\"][\"carrierCount\"], instrumentObject[\"customAlgorithm\"][\"mods\"]);\n                } else {\n                    this.customAlgorithm.fromPreset(this.algorithm6Op);\n                }\n                this.feedbackType6Op = Config.feedbacks6Op.findIndex(feedback6Op => feedback6Op.name == instrumentObject[\"feedbackType\"]);\n                // SynthBox feedback support\n                if (this.feedbackType6Op == -1) {\n                    // These are all of the SynthBox feedback presets that aren't present in Gold/UltraBox\n                    let synthboxLegacyFeedbacks: DictionaryArray<any> = toNameMap([\n                        { name: \"2\u27F2 3\u27F2\", indices: [[], [2], [3], [], [], []] },\n                        { name: \"3\u27F2 4\u27F2\", indices: [[], [], [3], [4], [], []] },\n                        { name: \"4\u27F2 5\u27F2\", indices: [[], [], [], [4], [5], []] },\n                        { name: \"5\u27F2 6\u27F2\", indices: [[], [], [], [], [5], [6]] },\n                        { name: \"1\u27F2 6\u27F2\", indices: [[1], [], [], [], [], [6]] },\n                        { name: \"1\u27F2 3\u27F2\", indices: [[1], [], [3], [], [], []] },\n                        { name: \"1\u27F2 4\u27F2\", indices: [[1], [], [], [4], [], []] },\n                        { name: \"1\u27F2 5\u27F2\", indices: [[1], [], [], [], [5], []] },\n                        { name: \"4\u27F2 6\u27F2\", indices: [[], [], [], [4], [], [6]] },\n                        { name: \"2\u27F2 6\u27F2\", indices: [[], [2], [], [], [], [6]] },\n                        { name: \"3\u27F2 6\u27F2\", indices: [[], [], [3], [], [], [6]] },\n                        { name: \"4\u27F2 5\u27F2 6\u27F2\", indices: [[], [], [], [4], [5], [6]] },\n                        { name: \"1\u27F2 3\u27F2 6\u27F2\", indices: [[1], [], [3], [], [], [6]] },\n                        { name: \"2\u21925\", indices: [[], [], [], [], [2], []] },\n                        { name: \"2\u21926\", indices: [[], [], [], [], [], [2]] },\n                        { name: \"3\u21925\", indices: [[], [], [], [], [3], []] },\n                        { name: \"3\u21926\", indices: [[], [], [], [], [], [3]] },\n                        { name: \"4\u21926\", indices: [[], [], [], [], [], [4]] },\n                        { name: \"5\u21926\", indices: [[], [], [], [], [], [5]] },\n                        { name: \"1\u21923\u21924\", indices: [[], [], [1], [], [3], []] },\n                        { name: \"2\u21925\u21926\", indices: [[], [], [], [], [2], [5]] },\n                        { name: \"2\u21924\u21926\", indices: [[], [], [], [2], [], [4]] },\n                        { name: \"4\u21925\u21926\", indices: [[], [], [], [], [4], [5]] },\n                        { name: \"3\u21924\u21925\u21926\", indices: [[], [], [], [3], [4], [5]] },\n                        { name: \"2\u21923\u21924\u21925\u21926\", indices: [[], [1], [2], [3], [4], [5]] },\n                        { name: \"1\u21922\u21923\u21924\u21925\u21926\", indices: [[], [1], [2], [3], [4], [5]] },\n                    ]);\n\n                    let synthboxFeedbackType = synthboxLegacyFeedbacks[synthboxLegacyFeedbacks.findIndex(feedback => feedback.name == instrumentObject[\"feedbackType\"])]!.indices;\n\n                    if (synthboxFeedbackType != undefined) {\n                        this.feedbackType6Op = 0;\n                        this.customFeedbackType.set(synthboxFeedbackType);\n                    } else {\n                        // if the feedback type STILL can't be resolved, default to the first non-custom option\n                        this.feedbackType6Op = 1;\n                    }\n                }\n\n                if ((this.feedbackType6Op == 0) && (instrumentObject[\"customFeedback\"] != undefined)) {\n                    this.customFeedbackType.set(instrumentObject[\"customFeedback\"][\"mods\"]);\n                } else {\n                    this.customFeedbackType.fromPreset(this.feedbackType6Op);\n                }\n            }\n            if (instrumentObject[\"feedbackAmplitude\"] != undefined) {\n                this.feedbackAmplitude = clamp(0, Config.operatorAmplitudeMax + 1, instrumentObject[\"feedbackAmplitude\"] | 0);\n            } else {\n                this.feedbackAmplitude = 0;\n            }\n\n            for (let j = 0; j < Config.operatorCount + (this.type == InstrumentType.fm6op ? 2 : 0); j++) {\n                const operator = this.operators[j];\n                let operatorObject = undefined;\n                if (instrumentObject[\"operators\"] != undefined) operatorObject = instrumentObject[\"operators\"][j];\n                if (operatorObject == undefined) operatorObject = {};\n\n                operator.frequency = Config.operatorFrequencies.findIndex(freq => freq.name == operatorObject[\"frequency\"]);\n                if (operator.frequency == -1) operator.frequency = 0;\n                if (operatorObject[\"amplitude\"] != undefined) {\n                    operator.amplitude = clamp(0, Config.operatorAmplitudeMax + 1, operatorObject[\"amplitude\"] | 0);\n                } else {\n                    operator.amplitude = 0;\n                }\n                if (operatorObject[\"waveform\"] != undefined) {\n                    // If the json is from GB, we override the last two waves to be sine to account for a bug\n                    if (format == \"goldbox\" && j > 3) {\n                        operator.waveform = 0;\n                        continue;\n                    }\n\n                    operator.waveform = Config.operatorWaves.findIndex(wave => wave.name == operatorObject[\"waveform\"]);\n                    if (operator.waveform == -1) {\n                        // GoldBox compatibility\n                        if (operatorObject[\"waveform\"] == \"square\") {\n                            operator.waveform = Config.operatorWaves.dictionary[\"pulse width\"].index;\n                            operator.pulseWidth = 5;\n                        } else if (operatorObject[\"waveform\"] == \"rounded\") {\n                            operator.waveform = Config.operatorWaves.dictionary[\"quasi-sine\"].index;\n                        } else {\n                            operator.waveform = 0;\n                        }\n\n                    }\n                } else {\n                    operator.waveform = 0;\n                }\n                if (operatorObject[\"pulseWidth\"] != undefined) {\n                    operator.pulseWidth = operatorObject[\"pulseWidth\"] | 0;\n                } else {\n                    operator.pulseWidth = 5;\n                }\n            }\n        }\n        else if (this.type == InstrumentType.customChipWave) {\n            if (instrumentObject[\"customChipWave\"]) {\n\n                for (let i = 0; i < 64; i++) {\n                    this.customChipWave[i] = instrumentObject[\"customChipWave\"][i];\n                }\n\n\n                let sum = 0.0;\n                for (let i = 0; i < this.customChipWave.length; i++) {\n                    sum += this.customChipWave[i];\n                }\n                const average = sum / this.customChipWave.length;\n\n                // Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\n                let cumulative = 0;\n                let wavePrev = 0;\n                for (let i = 0; i < this.customChipWave.length; i++) {\n                    cumulative += wavePrev;\n                    wavePrev = this.customChipWave[i] - average;\n                    this.customChipWaveIntegral[i] = cumulative;\n                }\n\n                // 65th, last sample is for anti-aliasing\n                this.customChipWaveIntegral[64] = 0.0;\n            }\n        } else if (this.type == InstrumentType.mod) {\n            if (instrumentObject[\"modChannels\"] != undefined) {\n                for (let mod = 0; mod < Config.modCount; mod++) {\n                    this.modChannels[mod] = instrumentObject[\"modChannels\"][mod];\n                    this.modInstruments[mod] = instrumentObject[\"modInstruments\"][mod];\n                    this.modulators[mod] = instrumentObject[\"modSettings\"][mod];\n                    // Due to an oversight, this isn't included in JSONs prior to JB 2.6.\n                    if (instrumentObject[\"modFilterTypes\"] != undefined)\n                        this.modFilterTypes[mod] = instrumentObject[\"modFilterTypes\"][mod];\n                    if (instrumentObject[\"modEnvelopeNumbers\"] != undefined)\n                        this.modEnvelopeNumbers[mod] = instrumentObject[\"modEnvelopeNumbers\"][mod];\n                }\n            }\n        }\n\n        if (this.type != InstrumentType.mod) {\n            // Arpeggio speed\n            if (this.chord == Config.chords.dictionary[\"arpeggio\"].index && instrumentObject[\"arpeggioSpeed\"] != undefined) {\n                this.arpeggioSpeed = instrumentObject[\"arpeggioSpeed\"];\n            }\n            else {\n                this.arpeggioSpeed = (useSlowerRhythm) ? 9 : 12; // Decide whether to import arps as x3/4 speed\n            }\n            if (this.chord == Config.chords.dictionary[\"monophonic\"].index && instrumentObject[\"monoChordTone\"] != undefined) {\n                this.monoChordTone = instrumentObject[\"monoChordTone\"];\n            }\n\n            if (instrumentObject[\"fastTwoNoteArp\"] != undefined) {\n                this.fastTwoNoteArp = instrumentObject[\"fastTwoNoteArp\"];\n            }\n            else {\n                this.fastTwoNoteArp = useFastTwoNoteArp;\n            }\n\n            if (instrumentObject[\"clicklessTransition\"] != undefined) {\n                this.clicklessTransition = instrumentObject[\"clicklessTransition\"];\n            }\n            else {\n                this.clicklessTransition = false;\n            }\n\n            if (instrumentObject[\"aliases\"] != undefined) {\n                this.aliases = instrumentObject[\"aliases\"];\n            }\n            else {\n                // modbox had no anti-aliasing, so enable it for everything if that mode is selected\n                if (format == \"modbox\") {\n                    let newEffect = this.addEffect(EffectType.distortion);\n                    this.aliases = true;\n                    newEffect.distortion = 0;\n                } else {\n                    this.aliases = false;\n                }\n            }\n\n            if (instrumentObject[\"noteFilterType\"] != undefined) {\n                this.noteFilterType = instrumentObject[\"noteFilterType\"];\n            }\n            if (instrumentObject[\"noteSimpleCut\"] != undefined) {\n                this.noteFilterSimpleCut = instrumentObject[\"noteSimpleCut\"];\n            }\n            if (instrumentObject[\"noteSimplePeak\"] != undefined) {\n                this.noteFilterSimplePeak = instrumentObject[\"noteSimplePeak\"];\n            }\n            if (instrumentObject[\"noteFilter\"] != undefined) {\n                this.noteFilter.fromJsonObject(instrumentObject[\"noteFilter\"]);\n            } else {\n                this.noteFilter.reset();\n            }\n            for (let i = 0; i < Config.filterMorphCount; i++) {\n                if (Array.isArray(instrumentObject[\"noteSubFilters\" + i])) {\n                    this.noteSubFilters[i] = new FilterSettings();\n                    this.noteSubFilters[i]!.fromJsonObject(instrumentObject[\"noteSubFilters\" + i]);\n                }\n            }\n            if (!Array.isArray(instrumentObject[\"eqFilter\"])) {\n                const legacySettings: LegacySettings = {};\n\n                // Try converting from legacy filter settings.\n                const filterCutoffMaxHz = 8000;\n                const filterCutoffRange = 11;\n                const filterResonanceRange = 8;\n                if (instrumentObject[\"filterCutoffHz\"] != undefined) {\n                    legacySettings.filterCutoff = clamp(0, filterCutoffRange, Math.round((filterCutoffRange - 1) + 2.0 * Math.log((instrumentObject[\"filterCutoffHz\"] | 0) / filterCutoffMaxHz) / Math.LN2));\n                } else {\n                    legacySettings.filterCutoff = (this.type == InstrumentType.chip) ? 6 : 10;\n                }\n                if (instrumentObject[\"filterResonance\"] != undefined) {\n                    legacySettings.filterResonance = clamp(0, filterResonanceRange, Math.round((filterResonanceRange - 1) * (instrumentObject[\"filterResonance\"] | 0) / 100));\n                } else {\n                    legacySettings.filterResonance = 0;\n                }\n\n                legacySettings.filterEnvelope = getEnvelope(instrumentObject[\"filterEnvelope\"]);\n                legacySettings.pulseEnvelope = getEnvelope(instrumentObject[\"pulseEnvelope\"]);\n                legacySettings.feedbackEnvelope = getEnvelope(instrumentObject[\"feedbackEnvelope\"]);\n                if (Array.isArray(instrumentObject[\"operators\"])) {\n                    legacySettings.operatorEnvelopes = [];\n                    for (let j = 0; j < Config.operatorCount + (this.type == InstrumentType.fm6op ? 2 : 0); j++) {\n                        let envelope: Envelope | undefined;\n                        if (instrumentObject[\"operators\"][j] != undefined) {\n                            envelope = getEnvelope(instrumentObject[\"operators\"][j][\"envelope\"]);\n                        }\n                        legacySettings.operatorEnvelopes[j] = (envelope != undefined) ? envelope : Config.envelopes.dictionary[\"none\"];\n                    }\n                }\n\n                // Try converting from even older legacy filter settings.\n                if (instrumentObject[\"filter\"] != undefined) {\n                    const legacyToCutoff: number[] = [10, 6, 3, 0, 8, 5, 2];\n                    const legacyToEnvelope: string[] = [\"none\", \"none\", \"none\", \"none\", \"decay 1\", \"decay 2\", \"decay 3\"];\n                    const filterNames: string[] = [\"none\", \"bright\", \"medium\", \"soft\", \"decay bright\", \"decay medium\", \"decay soft\"];\n                    const oldFilterNames: Dictionary<number> = { \"sustain sharp\": 1, \"sustain medium\": 2, \"sustain soft\": 3, \"decay sharp\": 4 };\n                    let legacyFilter = oldFilterNames[instrumentObject[\"filter\"]] != undefined ? oldFilterNames[instrumentObject[\"filter\"]] : filterNames.indexOf(instrumentObject[\"filter\"]);\n                    if (legacyFilter == -1) legacyFilter = 0;\n                    legacySettings.filterCutoff = legacyToCutoff[legacyFilter];\n                    legacySettings.filterEnvelope = getEnvelope(legacyToEnvelope[legacyFilter]);\n                    legacySettings.filterResonance = 0;\n                }\n\n                this.convertLegacySettings(legacySettings, true);\n            }\n\n            if (Array.isArray(instrumentObject[\"envelopes\"])) {\n                const envelopeArray: any[] = instrumentObject[\"envelopes\"];\n                for (let i = 0; i < envelopeArray.length; i++) {\n                    if (this.envelopeCount >= Config.maxEnvelopeCount) break;\n                    const tempEnvelope = new EnvelopeSettings(this.isNoiseInstrument);\n                    tempEnvelope.fromJsonObject(envelopeArray[i], format);\n                    //old pitch envelope detection\n                    let pitchEnvelopeStart: number;\n                    if (instrumentObject[\"pitchEnvelopeStart\"] != undefined && instrumentObject[\"pitchEnvelopeStart\"] != null) { //make sure is not null bc for some reason it can be\n                        pitchEnvelopeStart = instrumentObject[\"pitchEnvelopeStart\"];\n                    } else if (instrumentObject[\"pitchEnvelopeStart\" + i] != undefined && instrumentObject[\"pitchEnvelopeStart\" + i] != undefined) {\n                        pitchEnvelopeStart = instrumentObject[\"pitchEnvelopeStart\" + i];\n                    } else {\n                        pitchEnvelopeStart = tempEnvelope.pitchEnvelopeStart;\n                    }\n                    let pitchEnvelopeEnd: number;\n                    if (instrumentObject[\"pitchEnvelopeEnd\"] != undefined && instrumentObject[\"pitchEnvelopeEnd\"] != null) {\n                        pitchEnvelopeEnd = instrumentObject[\"pitchEnvelopeEnd\"];\n                    } else if (instrumentObject[\"pitchEnvelopeEnd\" + i] != undefined && instrumentObject[\"pitchEnvelopeEnd\" + i] != null) {\n                        pitchEnvelopeEnd = instrumentObject[\"pitchEnvelopeEnd\" + i];\n                    } else {\n                        pitchEnvelopeEnd = tempEnvelope.pitchEnvelopeEnd;\n                    }\n                    let envelopeInverse: boolean;\n                    if (instrumentObject[\"envelopeInverse\" + i] != undefined && instrumentObject[\"envelopeInverse\" + i] != null) {\n                        envelopeInverse = instrumentObject[\"envelopeInverse\" + i];\n                    } else if (instrumentObject[\"pitchEnvelopeInverse\"] != undefined && instrumentObject[\"pitchEnvelopeInverse\"] != null && Config.envelopes[tempEnvelope.envelope].name == \"pitch\") { //assign only if a pitch envelope\n                        envelopeInverse = instrumentObject[\"pitchEnvelopeInverse\"];\n                    } else {\n                        envelopeInverse = tempEnvelope.inverse;\n                    }\n                    let discreteEnvelope: boolean;\n                    if (instrumentObject[\"discreteEnvelope\"] != undefined) {\n                        discreteEnvelope = instrumentObject[\"discreteEnvelope\"];\n                    } else {\n                        discreteEnvelope = tempEnvelope.discrete;\n                    }\n                    this.addEnvelope(tempEnvelope.target, tempEnvelope.index, tempEnvelope.envelope, true, pitchEnvelopeStart, pitchEnvelopeEnd, envelopeInverse, tempEnvelope.perEnvelopeSpeed, tempEnvelope.perEnvelopeLowerBound, tempEnvelope.perEnvelopeUpperBound, tempEnvelope.steps, tempEnvelope.seed, tempEnvelope.waveform, discreteEnvelope);\n                }\n            }\n        }\n        // advloop addition\n        if (type === 0) {\n            if (instrumentObject[\"isUsingAdvancedLoopControls\"] != undefined) {\n                this.isUsingAdvancedLoopControls = instrumentObject[\"isUsingAdvancedLoopControls\"];\n                this.chipWaveLoopStart = instrumentObject[\"chipWaveLoopStart\"];\n                this.chipWaveLoopEnd = instrumentObject[\"chipWaveLoopEnd\"];\n                this.chipWaveLoopMode = instrumentObject[\"chipWaveLoopMode\"];\n                this.chipWavePlayBackwards = instrumentObject[\"chipWavePlayBackwards\"];\n                this.chipWaveStartOffset = instrumentObject[\"chipWaveStartOffset\"];\n            } else {\n                this.isUsingAdvancedLoopControls = false;\n                this.chipWaveLoopStart = 0;\n                this.chipWaveLoopEnd = Config.rawRawChipWaves[this.chipWave].samples.length - 1;\n                this.chipWaveLoopMode = 0;\n                this.chipWavePlayBackwards = false;\n                this.chipWaveStartOffset = 0;\n            }\n            this.chipWaveInStereo = instrumentObject[\"chipWaveInStereo\"];\n        }\n    }\n    // advloop addition\n\n    getLargestControlPointCount(forNoteFilter: boolean) {\n        let largest: number;\n        if (forNoteFilter) {\n            largest = this.noteFilter.controlPointCount;\n            for (let i = 0; i < Config.filterMorphCount; i++) {\n                if (this.noteSubFilters[i] != null && this.noteSubFilters[i]!.controlPointCount > largest)\n                    largest = this.noteSubFilters[i]!.controlPointCount;\n            }\n        }\n        else {\n            largest = this.effects[0]!.eqFilter.controlPointCount;\n            for (let effectIndex = 0; effectIndex < this.effectCount; effectIndex++) {\n                if (this.effects[effectIndex] != null && this.effects[effectIndex]!.type == EffectType.eqFilter) {\n                    for (let i = 0; i < Config.filterMorphCount; i++) {\n                        if (this.effects[effectIndex]!.eqSubFilters[i] != null && this.effects[effectIndex]!.eqSubFilters[i]!.controlPointCount > largest)\n                            largest = this.effects[effectIndex]!.eqSubFilters[i]!.controlPointCount;\n                    }\n                }\n            }\n        }\n        return largest;\n    }\n\n    static frequencyFromPitch(pitch: number): number {\n        return 440.0 * Math.pow(2.0, (pitch - 69.0) / 12.0);\n    }\n\n    addEffect(type: EffectType): Effect {\n        let newEffect = new Effect(type);\n        this.effects.push(newEffect);\n        this.effectCount++;\n        return newEffect;\n    }\n\n    removeEffect(type: EffectType): void {\n        for(let i = 0; i < this.effectCount; i++) {\n            if (this.effects[i] != null && this.effects[i]!.type == type) {\n                this.effects.splice(i, 1);\n                break;\n            }\n        }\n        this.effectCount--;\n    }\n\n    effectsIncludeType(type: EffectType): boolean {\n        for (let i = 0; i < this.effects.length; i++) if (this.effects[i] != null && this.effects[i]!.type == type) return true;\n        return false;\n    }\n\n    addEnvelope(target: number, index: number, envelope: number, newEnvelopes: boolean, start = 0, end = -1, inverse = false, perEnvelopeSpeed = -1, perEnvelopeLowerBound = 0, perEnvelopeUpperBound = 1, steps = 2, seed = 2, waveform = LFOEnvelopeTypes.sine, discrete = false): void {\n        end = end != -1 ? end : this.isNoiseInstrument ? Config.drumCount - 1 : Config.maxPitch; //find default if none is given\n        perEnvelopeSpeed = perEnvelopeSpeed != -1 ? perEnvelopeSpeed : newEnvelopes ? 1 : Config.envelopes[envelope].speed; //find default if none is given\n        let makeEmpty = false;\n        if (!this.supportsEnvelopeTarget(target, index)) makeEmpty = true;\n        if (this.envelopeCount >= Config.maxEnvelopeCount) throw new Error();\n        while (this.envelopes.length <= this.envelopeCount) this.envelopes[this.envelopes.length] = new EnvelopeSettings(this.isNoiseInstrument);\n        const envelopeSettings = this.envelopes[this.envelopeCount];\n        envelopeSettings.target = makeEmpty ? Config.instrumentAutomationTargets.dictionary[\"none\"].index : target;\n        envelopeSettings.index = makeEmpty ? 0 : index;\n        if (!newEnvelopes) {\n            envelopeSettings.envelope = clamp(0, Config.newEnvelopes.length, Config.envelopes[envelope].type);\n        } else {\n            envelopeSettings.envelope = envelope;\n        }\n        envelopeSettings.pitchEnvelopeStart = start;\n        envelopeSettings.pitchEnvelopeEnd = end;\n        envelopeSettings.inverse = inverse;\n        envelopeSettings.perEnvelopeSpeed = perEnvelopeSpeed;\n        envelopeSettings.perEnvelopeLowerBound = perEnvelopeLowerBound;\n        envelopeSettings.perEnvelopeUpperBound = perEnvelopeUpperBound;\n        envelopeSettings.steps = steps;\n        envelopeSettings.seed = seed;\n        envelopeSettings.waveform = waveform;\n        envelopeSettings.discrete = discrete;\n        this.envelopeCount++;\n    }\n\n    supportsEnvelopeTarget(target: number, index: number): boolean {\n        const automationTarget = Config.instrumentAutomationTargets[target];\n        if (automationTarget.computeIndex == null && automationTarget.name != \"none\") {\n            return false;\n        }\n        if (index >= automationTarget.maxCount) {\n            return false;\n        }\n        if (automationTarget.compatibleInstruments != null && automationTarget.compatibleInstruments.indexOf(this.type) == -1) {\n            return false;\n        }\n        if ((automationTarget.effect != null && !this.effectsIncludeType(automationTarget.effect)) || (automationTarget.mdeffect != null && (this.mdeffects & (1 << automationTarget.mdeffect)) == 0)) {\n            return false;\n        }\n        if (automationTarget.isFilter) {\n            //if (automationTarget.perNote) {\n            let useControlPointCount = this.noteFilter.controlPointCount;\n            if (this.noteFilterType)\n                useControlPointCount = 1;\n            if (index >= useControlPointCount) return false;\n            //} else {\n            //\tif (index >= this.eqFilter.controlPointCount)   return false;\n            //}\n        }\n        if ((automationTarget.name == \"operatorFrequency\") || (automationTarget.name == \"operatorAmplitude\")) {\n            if (index >= 4 + (this.type == InstrumentType.fm6op ? 2 : 0)) return false;\n        }\n        return true;\n    }\n\n    clearInvalidEnvelopeTargets(): void {\n        for (let envelopeIndex = 0; envelopeIndex < this.envelopeCount; envelopeIndex++) {\n            const target = this.envelopes[envelopeIndex].target;\n            const index = this.envelopes[envelopeIndex].index;\n            if (!this.supportsEnvelopeTarget(target, index)) {\n                this.envelopes[envelopeIndex].target = Config.instrumentAutomationTargets.dictionary[\"none\"].index;\n                this.envelopes[envelopeIndex].index = 0;\n            }\n        }\n    }\n\n    getTransition(): Transition {\n        return effectsIncludeTransition(this.mdeffects) ? Config.transitions[this.transition] :\n            (this.type == InstrumentType.mod ? Config.transitions.dictionary[\"interrupt\"] : Config.transitions.dictionary[\"normal\"]);\n    }\n\n    getFadeInSeconds(): number {\n        return (this.type == InstrumentType.drumset) ? 0.0 : fadeInSettingToSeconds(this.fadeIn);\n    }\n\n    getFadeOutTicks(): number {\n        return (this.type == InstrumentType.drumset) ? Config.drumsetFadeOutTicks : fadeOutSettingToTicks(this.fadeOut)\n    }\n\n    getChord(): Chord {\n        return effectsIncludeChord(this.mdeffects) ? Config.chords[this.chord] : Config.chords.dictionary[\"simultaneous\"];\n    }\n\n    getDrumsetEnvelope(pitch: number): Envelope {\n        if (this.type != InstrumentType.drumset) throw new Error(\"Can't getDrumsetEnvelope() for non-drumset.\");\n        return Config.envelopes[this.drumsetEnvelopes[pitch]];\n    }\n}\n", "// Copyright (c) John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { Channel } from \"./Channel\";\nimport { Song } from \"./Song\";\nimport { Config } from \"./SynthConfig\";\nimport { clamp } from \"./utils\";\n\nexport interface NotePin {\n    interval: number;\n    time: number;\n    size: number;\n}\n\nexport function makeNotePin(interval: number, time: number, size: number): NotePin {\n    return { interval: interval, time: time, size: size };\n}\n\nexport class Note {\n    pitches: number[];\n    pins: NotePin[];\n    start: number;\n    end: number;\n    continuesLastPattern: boolean;\n    chipWaveStartOffset: number;\n\n    constructor(pitch: number, start: number, end: number, size: number, fadeout = false, chipWaveStartOffset = 0) {\n        this.pitches = [pitch];\n        this.pins = [makeNotePin(0, 0, size), makeNotePin(0, end - start, fadeout ? 0 : size)];\n        this.start = start;\n        this.end = end;\n        this.continuesLastPattern = false;\n        this.chipWaveStartOffset = chipWaveStartOffset;\n    }\n\n    pickMainInterval(): number {\n        let longestFlatIntervalDuration = 0;\n        let mainInterval = 0;\n        for (let pinIndex = 1; pinIndex < this.pins.length; pinIndex++) {\n            const pinA = this.pins[pinIndex - 1];\n            const pinB = this.pins[pinIndex];\n            if (pinA.interval == pinB.interval) {\n                const duration = pinB.time - pinA.time;\n                if (longestFlatIntervalDuration < duration) {\n                    longestFlatIntervalDuration = duration;\n                    mainInterval = pinA.interval;\n                }\n            }\n        }\n        if (longestFlatIntervalDuration == 0) {\n            let loudestSize = 0;\n            for (let pinIndex = 0; pinIndex < this.pins.length; pinIndex++) {\n                const pin = this.pins[pinIndex];\n                if (loudestSize < pin.size) {\n                    loudestSize = pin.size;\n                    mainInterval = pin.interval;\n                }\n            }\n        }\n        return mainInterval;\n    }\n\n    clone(): Note {\n        const newNote = new Note(-1, this.start, this.end, 3);\n        newNote.pitches = this.pitches.concat();\n        newNote.pins = [];\n        for (const pin of this.pins) {\n            newNote.pins.push(makeNotePin(pin.interval, pin.time, pin.size));\n        }\n        newNote.continuesLastPattern = this.continuesLastPattern;\n        return newNote;\n    }\n\n    getEndPinIndex(part: number): number {\n        let endPinIndex: number;\n        for (endPinIndex = 1; endPinIndex < this.pins.length - 1; endPinIndex++) {\n            if (this.pins[endPinIndex].time + this.start > part) break;\n        }\n        return endPinIndex;\n    }\n}\n\nexport class Pattern {\n    notes: Note[] = [];\n    readonly instruments: number[] = [0];\n\n    cloneNotes(): Note[] {\n        const result: Note[] = [];\n        for (const note of this.notes) {\n            result.push(note.clone());\n        }\n        return result;\n    }\n\n    reset(): void {\n        this.notes.length = 0;\n        this.instruments[0] = 0;\n        this.instruments.length = 1;\n    }\n\n    toJsonObject(song: Song, channel: Channel, isModChannel: boolean): any {\n        const noteArray: Object[] = [];\n        for (const note of this.notes) {\n            // Only one ins per pattern is enforced in mod channels.\n            let instrument = channel.instruments[this.instruments[0]];\n            let mod = Math.max(0, Config.modCount - note.pitches[0] - 1);\n            let volumeCap = song.getVolumeCapForSetting(isModChannel, instrument.modulators[mod], instrument.modFilterTypes[mod]);\n            const pointArray: Object[] = [];\n            for (const pin of note.pins) {\n                let useVol = isModChannel ? Math.round(pin.size) : Math.round(pin.size * 100 / volumeCap);\n                pointArray.push({\n                    \"tick\": (pin.time + note.start) * Config.rhythms[song.rhythm].stepsPerBeat / Config.partsPerBeat,\n                                \"pitchBend\": pin.interval,\n                                \"volume\": useVol,\n                                \"forMod\": isModChannel,\n                });\n            }\n\n            const noteObject: any = {\n                \"pitches\": note.pitches,\n                \"points\": pointArray,\n            };\n            if (note.start == 0) {\n                noteObject[\"continuesLastPattern\"] = note.continuesLastPattern;\n            }\n            noteArray.push(noteObject);\n        }\n\n        const patternObject: any = { \"notes\": noteArray };\n        if (song.patternInstruments) {\n            patternObject[\"instruments\"] = this.instruments.map(i => i + 1);\n        }\n        return patternObject;\n    }\n\n    fromJsonObject(patternObject: any, song: Song, channel: Channel, importedPartsPerBeat: number, isNoiseChannel: boolean, isModChannel: boolean, jsonFormat = \"auto\"): void {\n        const format = jsonFormat.toLowerCase();\n\n        if (song.patternInstruments) {\n            if (Array.isArray(patternObject[\"instruments\"])) {\n                const instruments: any[] = patternObject[\"instruments\"];\n                const instrumentCount = clamp(Config.instrumentCountMin, song.getMaxInstrumentsPerPatternForChannel(channel) + 1, instruments.length);\n                for (let j = 0; j < instrumentCount; j++) {\n                    this.instruments[j] = clamp(0, channel.instruments.length, (instruments[j] | 0) - 1);\n                }\n                this.instruments.length = instrumentCount;\n            } else {\n                this.instruments[0] = clamp(0, channel.instruments.length, (patternObject[\"instrument\"] | 0) - 1);\n                this.instruments.length = 1;\n            }\n        }\n\n        if (patternObject[\"notes\"] && patternObject[\"notes\"].length > 0) {\n            const maxNoteCount = Math.min(song.beatsPerBar * Config.partsPerBeat * (isModChannel ? Config.modCount : 1), patternObject[\"notes\"].length >>> 0);\n\n            // TODO: Consider supporting notes specified in any timing order, sorting them and truncating as necessary.\n            //let tickClock = 0;\n            for (let j = 0; j < patternObject[\"notes\"].length; j++) {\n                if (j >= maxNoteCount) break;\n\n                const noteObject = patternObject[\"notes\"][j];\n                if (!noteObject || !noteObject[\"pitches\"] || !(noteObject[\"pitches\"].length >= 1) || !noteObject[\"points\"] || !(noteObject[\"points\"].length >= 2)) {\n                    continue;\n                }\n\n                const note = new Note(0, 0, 0, 0);\n                note.pitches = [];\n                note.pins = [];\n\n                for (let k = 0; k < noteObject[\"pitches\"].length; k++) {\n                    const pitch = noteObject[\"pitches\"][k] | 0;\n                    if (note.pitches.indexOf(pitch) != -1) continue;\n                    note.pitches.push(pitch);\n                    if (note.pitches.length >= Config.maxChordSize) break;\n                }\n                if (note.pitches.length < 1) continue;\n\n                //let noteClock = tickClock;\n                let startInterval = 0;\n\n                let instrument = channel.instruments[this.instruments[0]];\n                let mod = Math.max(0, Config.modCount - note.pitches[0] - 1);\n\n                for (let k = 0; k < noteObject[\"points\"].length; k++) {\n                    const pointObject = noteObject[\"points\"][k];\n                    if (pointObject == undefined || pointObject[\"tick\"] == undefined) continue;\n                    const interval = (pointObject[\"pitchBend\"] == undefined) ? 0 : (pointObject[\"pitchBend\"] | 0);\n\n                    const time = Math.round((+pointObject[\"tick\"]) * Config.partsPerBeat / importedPartsPerBeat);\n\n                    // Only one instrument per pattern allowed in mod channels.\n                    let volumeCap = song.getVolumeCapForSetting(isModChannel, instrument.modulators[mod], instrument.modFilterTypes[mod]);\n\n                    // The strange volume formula used for notes is not needed for mods. Some rounding errors were possible.\n                    // A \"forMod\" signifier was added to new JSON export to detect when the higher precision export was used in a file.\n                    let size: number;\n                    if (pointObject[\"volume\"] == undefined) {\n                        size = volumeCap;\n                    } else if (pointObject[\"forMod\"] == undefined) {\n                        size = Math.max(0, Math.min(volumeCap, Math.round((pointObject[\"volume\"] | 0) * volumeCap / 100)));\n                    }\n                    else {\n                        size = ((pointObject[\"forMod\"] | 0) > 0) ? Math.round(pointObject[\"volume\"] | 0) : Math.max(0, Math.min(volumeCap, Math.round((pointObject[\"volume\"] | 0) * volumeCap / 100)));\n                    }\n\n                    if (time > song.beatsPerBar * Config.partsPerBeat) continue;\n                    if (note.pins.length == 0) {\n                        //if (time < noteClock) continue;\n                        note.start = time;\n                        startInterval = interval;\n                    } else {\n                        //if (time <= noteClock) continue;\n                    }\n                    //noteClock = time;\n\n                    note.pins.push(makeNotePin(interval - startInterval, time - note.start, size));\n                }\n                if (note.pins.length < 2) continue;\n\n                note.end = note.pins[note.pins.length - 1].time + note.start;\n\n                const maxPitch = isNoiseChannel ? Config.drumCount - 1 : Config.maxPitch;\n                let lowestPitch = maxPitch;\n                let highestPitch = 0;\n                for (let k = 0; k < note.pitches.length; k++) {\n                    note.pitches[k] += startInterval;\n                    if (note.pitches[k] < 0 || note.pitches[k] > maxPitch) {\n                        note.pitches.splice(k, 1);\n                        k--;\n                    }\n                    if (note.pitches[k] < lowestPitch) lowestPitch = note.pitches[k];\n                    if (note.pitches[k] > highestPitch) highestPitch = note.pitches[k];\n                }\n                if (note.pitches.length < 1) continue;\n\n                for (let k = 0; k < note.pins.length; k++) {\n                    const pin = note.pins[k];\n                    if (pin.interval + lowestPitch < 0) pin.interval = -lowestPitch;\n                    if (pin.interval + highestPitch > maxPitch) pin.interval = maxPitch - highestPitch;\n                    if (k >= 2) {\n                        if (pin.interval == note.pins[k - 1].interval &&\n                            pin.interval == note.pins[k - 2].interval &&\n                            pin.size == note.pins[k - 1].size &&\n                            pin.size == note.pins[k - 2].size) {\n                            note.pins.splice(k - 1, 1);\n                        k--;\n                            }\n                    }\n                }\n\n                if (note.start == 0) {\n                    note.continuesLastPattern = (noteObject[\"continuesLastPattern\"] === true);\n                } else {\n                    note.continuesLastPattern = false;\n                }\n\n                if ((format != \"ultrabox\" && format != \"slarmoosbox\") && instrument.modulators[mod] == Config.modulators.dictionary[\"tempo\"].index) {\n                    for (const pin of note.pins) {\n                        const oldMin = 30;\n                        const newMin = 1;\n                        const old = pin.size + oldMin;\n                        pin.size = old - newMin; // convertRealFactor will add back newMin as necessary\n                    }\n                }\n\n                this.notes.push(note);\n            }\n        }\n    }\n}\n", "// Copyright (c) John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { InstrumentState } from \"./InstrumentState\";\n\nexport class ChannelState {\n    readonly instruments: InstrumentState[] = [];\n    muted = false;\n    singleSeamlessInstrument: number | null = null; // Seamless tones from a pattern with a single instrument can be transferred to a different single seamless instrument in the next pattern.\n}\n", "// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nexport class Deque<T> {\n\tprivate _capacity = 1;\n\tprivate _buffer: Array<T | undefined> = [undefined];\n\tprivate _mask = 0;\n\tprivate _offset = 0;\n\tprivate _count = 0;\n\n\tpushFront(element: T): void {\n\t\tif (this._count >= this._capacity) this._embiggen();\n\t\tthis._offset = (this._offset - 1) & this._mask;\n\t\tthis._buffer[this._offset] = element;\n\t\tthis._count++;\n\t}\n\tpushBack(element: T): void {\n\t\tif (this._count >= this._capacity) this._embiggen();\n\t\tthis._buffer[(this._offset + this._count) & this._mask] = element;\n\t\tthis._count++;\n\t}\n\tpopFront(): T {\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\n\t\tconst element = <T>this._buffer[this._offset];\n\t\tthis._buffer[this._offset] = undefined;\n\t\tthis._offset = (this._offset + 1) & this._mask;\n\t\tthis._count--;\n\t\treturn element;\n\t}\n\tpopBack(): T {\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\n\t\tthis._count--;\n\t\tconst index = (this._offset + this._count) & this._mask;\n\t\tconst element = <T>this._buffer[index];\n\t\tthis._buffer[index] = undefined;\n\t\treturn element;\n\t}\n\tpeakFront(): T {\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\n\t\treturn <T>this._buffer[this._offset];\n\t}\n\tpeakBack(): T {\n\t\tif (this._count <= 0) throw new Error(\"No elements left to pop.\");\n\t\treturn <T>this._buffer[(this._offset + this._count - 1) & this._mask];\n\t}\n\tcount(): number {\n\t\treturn this._count;\n\t}\n\tset(index: number, element: T): void {\n\t\tif (index < 0 || index >= this._count) throw new Error(\"Invalid index\");\n\t\tthis._buffer[(this._offset + index) & this._mask] = element;\n\t}\n\tget(index: number): T {\n\t\tif (index < 0 || index >= this._count) throw new Error(\"Invalid index\");\n\t\treturn <T>this._buffer[(this._offset + index) & this._mask];\n\t}\n\tremove(index: number): void {\n\t\tif (index < 0 || index >= this._count) throw new Error(\"Invalid index\");\n\t\tif (index <= (this._count >> 1)) {\n\t\t\twhile (index > 0) {\n\t\t\t\tthis.set(index, this.get(index - 1));\n\t\t\t\tindex--;\n\t\t\t}\n\t\t\tthis.popFront();\n\t\t} else {\n\t\t\tindex++;\n\t\t\twhile (index < this._count) {\n\t\t\t\tthis.set(index - 1, this.get(index));\n\t\t\t\tindex++;\n\t\t\t}\n\t\t\tthis.popBack();\n\t\t}\n\t}\n\tprivate _embiggen(): void {\n\t\tif (this._capacity >= 0x40000000)\n            throw new Error(`wtf?? requested more than ${this._capacity} elements in deque`);\n\t\tthis._capacity = this._capacity << 1;\n\t\tconst oldBuffer: Array<T | undefined> = this._buffer;\n\t\tconst newBuffer: Array<T | undefined> = new Array(this._capacity);\n\t\tconst size = this._count | 0;\n\t\tconst offset = this._offset | 0;\n\t\tfor (let i = 0; i < size; i++) {\n\t\t\tnewBuffer[i] = oldBuffer[(offset + i) & this._mask];\n\t\t}\n\t\tfor (let i = size; i < this._capacity; i++) {\n\t\t\tnewBuffer[i] = undefined;\n\t\t}\n\t\tthis._offset = 0;\n\t\tthis._buffer = newBuffer;\n\t\tthis._mask = this._capacity - 1;\n\t}\n}", "const PRIME32_1 = 2654435761;\nconst PRIME32_2 = 2246822519;\nconst PRIME32_3 = 3266489917;\nconst PRIME32_4 = 668265263;\nconst PRIME32_5 = 374761393;\nlet encoder;\n/**\n *\n * @param input - byte array or string\n * @param seed - optional seed (32-bit unsigned);\n */\nexport function xxHash32(input, seed = 0) {\n    const buffer = typeof input === 'string' ? (encoder ??= new TextEncoder()).encode(input) : input;\n    const b = buffer;\n    /*\n        Step 1. Initialize internal accumulators\n        Each accumulator gets an initial value based on optional seed input. Since the seed is optional, it can be 0.\n\n        ```\n            u32 acc1 = seed + PRIME32_1 + PRIME32_2;\n            u32 acc2 = seed + PRIME32_2;\n            u32 acc3 = seed + 0;\n            u32 acc4 = seed - PRIME32_1;\n        ```\n        Special case : input is less than 16 bytes\n        When input is too small (< 16 bytes), the algorithm will not process any stripe. Consequently, it will not\n        make use of parallel accumulators.\n\n        In which case, a simplified initialization is performed, using a single accumulator :\n\n        u32 acc  = seed + PRIME32_5;\n        The algorithm then proceeds directly to step 4.\n    */\n    let acc = (seed + PRIME32_5) & 0xffffffff;\n    let offset = 0;\n    if (b.length >= 16) {\n        const accN = [\n            (seed + PRIME32_1 + PRIME32_2) & 0xffffffff,\n            (seed + PRIME32_2) & 0xffffffff,\n            (seed + 0) & 0xffffffff,\n            (seed - PRIME32_1) & 0xffffffff,\n        ];\n        /*\n            Step 2. Process stripes\n            A stripe is a contiguous segment of 16 bytes. It is evenly divided into 4 lanes, of 4 bytes each.\n            The first lane is used to update accumulator 1, the second lane is used to update accumulator 2, and so on.\n\n            Each lane read its associated 32-bit value using little-endian convention.\n\n            For each {lane, accumulator}, the update process is called a round, and applies the following formula :\n\n            ```\n            accN = accN + (laneN * PRIME32_2);\n            accN = accN <<< 13;\n            accN = accN * PRIME32_1;\n            ```\n\n            This shuffles the bits so that any bit from input lane impacts several bits in output accumulator.\n            All operations are performed modulo 2^32.\n\n            Input is consumed one full stripe at a time. Step 2 is looped as many times as necessary to consume\n            the whole input, except the last remaining bytes which cannot form a stripe (< 16 bytes). When that\n            happens, move to step 3.\n        */\n        const b = buffer;\n        const limit = b.length - 16;\n        let lane = 0;\n        for (offset = 0; (offset & 0xfffffff0) <= limit; offset += 4) {\n            const i = offset;\n            const laneN0 = b[i + 0] + (b[i + 1] << 8);\n            const laneN1 = b[i + 2] + (b[i + 3] << 8);\n            const laneNP = laneN0 * PRIME32_2 + ((laneN1 * PRIME32_2) << 16);\n            let acc = (accN[lane] + laneNP) & 0xffffffff;\n            acc = (acc << 13) | (acc >>> 19);\n            const acc0 = acc & 0xffff;\n            const acc1 = acc >>> 16;\n            accN[lane] = (acc0 * PRIME32_1 + ((acc1 * PRIME32_1) << 16)) & 0xffffffff;\n            lane = (lane + 1) & 0x3;\n        }\n        /*\n            Step 3. Accumulator convergence\n            All 4 lane accumulators from previous steps are merged to produce a single remaining accumulator\n            of same width (32-bit). The associated formula is as follows :\n\n            ```\n            acc = (acc1 <<< 1) + (acc2 <<< 7) + (acc3 <<< 12) + (acc4 <<< 18);\n            ```\n        */\n        acc =\n            (((accN[0] << 1) | (accN[0] >>> 31)) +\n                ((accN[1] << 7) | (accN[1] >>> 25)) +\n                ((accN[2] << 12) | (accN[2] >>> 20)) +\n                ((accN[3] << 18) | (accN[3] >>> 14))) &\n                0xffffffff;\n    }\n    /*\n        Step 4. Add input length\n        The input total length is presumed known at this stage. This step is just about adding the length to\n        accumulator, so that it participates to final mixing.\n\n        ```\n        acc = acc + (u32)inputLength;\n        ```\n    */\n    acc = (acc + buffer.length) & 0xffffffff;\n    /*\n        Step 5. Consume remaining input\n        There may be up to 15 bytes remaining to consume from the input. The final stage will digest them according\n        to following pseudo-code :\n        ```\n        while (remainingLength >= 4) {\n            lane = read_32bit_little_endian(input_ptr);\n            acc = acc + lane * PRIME32_3;\n            acc = (acc <<< 17) * PRIME32_4;\n            input_ptr += 4; remainingLength -= 4;\n        }\n        ```\n        This process ensures that all input bytes are present in the final mix.\n    */\n    const limit = buffer.length - 4;\n    for (; offset <= limit; offset += 4) {\n        const i = offset;\n        const laneN0 = b[i + 0] + (b[i + 1] << 8);\n        const laneN1 = b[i + 2] + (b[i + 3] << 8);\n        const laneP = laneN0 * PRIME32_3 + ((laneN1 * PRIME32_3) << 16);\n        acc = (acc + laneP) & 0xffffffff;\n        acc = (acc << 17) | (acc >>> 15);\n        acc = ((acc & 0xffff) * PRIME32_4 + (((acc >>> 16) * PRIME32_4) << 16)) & 0xffffffff;\n    }\n    /*\n        ```\n        while (remainingLength >= 1) {\n            lane = read_byte(input_ptr);\n            acc = acc + lane * PRIME32_5;\n            acc = (acc <<< 11) * PRIME32_1;\n            input_ptr += 1; remainingLength -= 1;\n        }\n        ```\n    */\n    for (; offset < b.length; ++offset) {\n        const lane = b[offset];\n        acc = acc + lane * PRIME32_5;\n        acc = (acc << 11) | (acc >>> 21);\n        acc = ((acc & 0xffff) * PRIME32_1 + (((acc >>> 16) * PRIME32_1) << 16)) & 0xffffffff;\n    }\n    /*\n        Step 6. Final mix (avalanche)\n        The final mix ensures that all input bits have a chance to impact any bit in the output digest,\n        resulting in an unbiased distribution. This is also called avalanche effect.\n        ```\n        acc = acc xor (acc >> 15);\n        acc = acc * PRIME32_2;\n        acc = acc xor (acc >> 13);\n        acc = acc * PRIME32_3;\n        acc = acc xor (acc >> 16);\n        ```\n    */\n    acc = acc ^ (acc >>> 15);\n    acc = (((acc & 0xffff) * PRIME32_2) & 0xffffffff) + (((acc >>> 16) * PRIME32_2) << 16);\n    acc = acc ^ (acc >>> 13);\n    acc = (((acc & 0xffff) * PRIME32_3) & 0xffffffff) + (((acc >>> 16) * PRIME32_3) << 16);\n    acc = acc ^ (acc >>> 16);\n    // turn any negatives back into a positive number;\n    return acc < 0 ? acc + 4294967296 : acc;\n}\n//# sourceMappingURL=xxHash32.js.map", "// Copyright (c) John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { xxHash32 } from \"js-xxhash\";\nimport { Instrument } from \"./Instrument\";\nimport { InstrumentState } from \"./InstrumentState\";\nimport { Synth } from \"./synth\";\nimport { AutomationTarget, Config, Envelope, EnvelopeComputeIndex, EnvelopeType, FilterType, getArpeggioPitchIndex, LFOEnvelopeTypes, RandomEnvelopeTypes } from \"./SynthConfig\";\nimport { Tone } from \"./Tone\";\n\nexport class EnvelopeComputer {\n    // \"Unscaled\" values do not increase with Envelope Speed's timescale factor. Thus they are \"real\" seconds since the start of the note.\n    // Fade envelopes notably use unscaled values instead of being tied to Envelope Speed.\n    noteSecondsStart: number[] = [];\n    noteSecondsStartUnscaled = 0.0;\n    noteSecondsEnd: number[] = [];\n    noteSecondsEndUnscaled = 0.0;\n    noteTicksStart = 0.0;\n    noteTicksEnd = 0.0;\n    noteSizeStart = Config.noteSizeMax;\n    noteSizeEnd = Config.noteSizeMax;\n    prevNoteSize = Config.noteSizeMax;\n    nextNoteSize = Config.noteSizeMax;\n    private _noteSizeFinal = Config.noteSizeMax;\n    prevNoteSecondsStart: number[] = [];\n    prevNoteSecondsStartUnscaled = 0.0;\n    prevNoteSecondsEnd: number[] = [];\n    prevNoteSecondsEndUnscaled = 0.0;\n    prevNoteTicksStart = 0.0;\n    prevNoteTicksEnd = 0.0;\n    private _prevNoteSizeFinal = Config.noteSizeMax;\n    tickTimeEnd: number[] = [];\n\n    drumsetFilterEnvelopeStart = 0.0;\n    drumsetFilterEnvelopeEnd = 0.0;\n\n    prevSlideStart = false;\n    prevSlideEnd = false;\n    nextSlideStart = false;\n    nextSlideEnd = false;\n    prevSlideRatioStart = 0.0;\n    prevSlideRatioEnd = 0.0;\n    nextSlideRatioStart = 0.0;\n    nextSlideRatioEnd = 0.0;\n\n    startPinTickAbsolute: number | null = null;\n    private startPinTickDefaultPitch: number | null = null;\n    private startPinTickPitch: number | null = null;\n\n    readonly envelopeStarts: number[] = [];\n    readonly envelopeEnds: number[] = [];\n    private readonly _modifiedEnvelopeIndices: number[] = [];\n    private _modifiedEnvelopeCount = 0;\n    lowpassCutoffDecayVolumeCompensation = 1.0;\n\n    constructor(/*private _perNote: boolean*/) {\n        //const length = this._perNote ? EnvelopeComputeIndex.length : InstrumentAutomationIndex.length;\n        const length = EnvelopeComputeIndex.length;\n        for (let i = 0; i < length; i++) {\n            this.envelopeStarts[i] = 1.0;\n            this.envelopeEnds[i] = 1.0;\n        }\n\n        this.reset();\n    }\n\n    reset(): void {\n        for (let envelopeIndex = 0; envelopeIndex < Config.maxEnvelopeCount + 1; envelopeIndex++) {\n            this.noteSecondsEnd[envelopeIndex] = 0.0;\n            this.prevNoteSecondsEnd[envelopeIndex] = 0.0;\n        }\n        this.noteSecondsEndUnscaled = 0.0;\n        this.noteTicksEnd = 0.0;\n        this._noteSizeFinal = Config.noteSizeMax;\n        this.prevNoteSecondsEndUnscaled = 0.0;\n        this.prevNoteTicksEnd = 0.0;\n        this._prevNoteSizeFinal = Config.noteSizeMax;\n        this._modifiedEnvelopeCount = 0;\n        this.drumsetFilterEnvelopeStart = 0.0;\n        this.drumsetFilterEnvelopeEnd = 0.0;\n        this.startPinTickAbsolute = null;\n        this.startPinTickDefaultPitch = null;\n        this.startPinTickPitch = null;\n    }\n\n    computeEnvelopes(instrument: Instrument, currentPart: number, tickTimeStart: number[], tickTimeStartReal: number, secondsPerTick: number, tone: Tone | null, timeScale: number[], instrumentState: InstrumentState, synth: Synth, channelIndex: number, instrumentIndex: number): void {\n        const secondsPerTickUnscaled = secondsPerTick;\n        const transition = instrument.getTransition();\n        if (tone != null && tone.atNoteStart && !transition.continues && !tone.forceContinueAtStart) {\n            this.prevNoteSecondsEndUnscaled = this.noteSecondsEndUnscaled;\n            this.prevNoteTicksEnd = this.noteTicksEnd;\n            this._prevNoteSizeFinal = this._noteSizeFinal;\n            this.noteSecondsEndUnscaled = 0.0;\n            this.noteTicksEnd = 0.0;\n            for (let envelopeIndex = 0; envelopeIndex < Config.maxEnvelopeCount + 1; envelopeIndex++) {\n                this.prevNoteSecondsEnd[envelopeIndex] = this.noteSecondsEnd[envelopeIndex];\n                this.noteSecondsEnd[envelopeIndex] = 0.0;\n            }\n        }\n        if (tone != null) {\n            if (tone.note != null) {\n                this._noteSizeFinal = tone.note.pins[tone.note.pins.length - 1].size;\n            } else {\n                this._noteSizeFinal = Config.noteSizeMax;\n            }\n        }\n        const tickTimeEnd: number[] = [];\n        const tickTimeEndReal = tickTimeStartReal + 1.0;\n        const noteSecondsStart: number[] = [];\n        const noteSecondsStartUnscaled = this.noteSecondsEndUnscaled;\n        const noteSecondsEnd: number[] = [];\n        const noteSecondsEndUnscaled = noteSecondsStartUnscaled + secondsPerTickUnscaled;\n        const noteTicksStart = this.noteTicksEnd;\n        const noteTicksEnd = noteTicksStart + 1.0;\n        const prevNoteSecondsStart: number[] = [];\n        const prevNoteSecondsEnd: number[] = [];\n        const prevNoteSecondsStartUnscaled = this.prevNoteSecondsEndUnscaled;\n        const prevNoteSecondsEndUnscaled = prevNoteSecondsStartUnscaled + secondsPerTickUnscaled;\n        const prevNoteTicksStart = this.prevNoteTicksEnd;\n        const prevNoteTicksEnd = prevNoteTicksStart + 1.0;\n\n        const beatsPerTick = 1.0 / (Config.ticksPerPart * Config.partsPerBeat);\n        const beatTimeStart: number[] = [];\n        const beatTimeEnd: number[] = [];\n\n        let noteSizeStart = this._noteSizeFinal;\n        let noteSizeEnd = this._noteSizeFinal;\n        let prevNoteSize = this._prevNoteSizeFinal;\n        let nextNoteSize = 0;\n        let prevSlideStart = false;\n        let prevSlideEnd = false;\n        let nextSlideStart = false;\n        let nextSlideEnd = false;\n        let prevSlideRatioStart = 0.0;\n        let prevSlideRatioEnd = 0.0;\n        let nextSlideRatioStart = 0.0;\n        let nextSlideRatioEnd = 0.0;\n        if (tone == null) {\n            this.startPinTickAbsolute = null;\n            this.startPinTickDefaultPitch = null;\n        }\n        if (tone != null && tone.note != null && !tone.passedEndOfNote) {\n            const endPinIndex = tone.note.getEndPinIndex(currentPart);\n            const startPin = tone.note.pins[endPinIndex - 1];\n            const endPin = tone.note.pins[endPinIndex];\n            const startPinTick = (tone.note.start + startPin.time) * Config.ticksPerPart;\n            if (this.startPinTickAbsolute == null || (!(transition.continues || transition.slides)) && tone.passedEndOfNote) this.startPinTickAbsolute = startPinTick + synth.computeTicksSinceStart(true); //for random per note\n            if (this.startPinTickDefaultPitch == null ||/* (!(transition.continues || transition.slides)) &&*/ tone.passedEndOfNote) this.startPinTickDefaultPitch = this.getPitchValue(instrument, tone, instrumentState, false);\n            if (!tone.passedEndOfNote) this.startPinTickPitch = this.getPitchValue(instrument, tone, instrumentState, true);\n            const endPinTick = (tone.note.start + endPin.time) * Config.ticksPerPart;\n            const ratioStart = (tickTimeStartReal - startPinTick) / (endPinTick - startPinTick);\n            const ratioEnd = (tickTimeEndReal - startPinTick) / (endPinTick - startPinTick);\n            noteSizeStart = startPin.size + (endPin.size - startPin.size) * ratioStart;\n            noteSizeEnd = startPin.size + (endPin.size - startPin.size) * ratioEnd;\n\n            if (transition.slides) {\n                const noteStartTick = tone.noteStartPart * Config.ticksPerPart;\n                const noteEndTick = tone.noteEndPart * Config.ticksPerPart;\n                const noteLengthTicks = noteEndTick - noteStartTick;\n                const maximumSlideTicks = noteLengthTicks * 0.5;\n                const slideTicks = Math.min(maximumSlideTicks, transition.slideTicks);\n                if (tone.prevNote != null && !tone.forceContinueAtStart) {\n                    if (tickTimeStartReal - noteStartTick < slideTicks) {\n                        prevSlideStart = true;\n                        prevSlideRatioStart = 0.5 * (1.0 - (tickTimeStartReal - noteStartTick) / slideTicks);\n                    }\n                    if (tickTimeEndReal - noteStartTick < slideTicks) {\n                        prevSlideEnd = true;\n                        prevSlideRatioEnd = 0.5 * (1.0 - (tickTimeEndReal - noteStartTick) / slideTicks);\n                    }\n                }\n                if (tone.nextNote != null && !tone.forceContinueAtEnd) {\n                    nextNoteSize = tone.nextNote.pins[0].size\n                    if (noteEndTick - tickTimeStartReal < slideTicks) {\n                        nextSlideStart = true;\n                        nextSlideRatioStart = 0.5 * (1.0 - (noteEndTick - tickTimeStartReal) / slideTicks);\n                    }\n                    if (noteEndTick - tickTimeEndReal < slideTicks) {\n                        nextSlideEnd = true;\n                        nextSlideRatioEnd = 0.5 * (1.0 - (noteEndTick - tickTimeEndReal) / slideTicks);\n                    }\n                }\n            }\n        }\n\n        let lowpassCutoffDecayVolumeCompensation = 1.0;\n        let usedNoteSize = false;\n        for (let envelopeIndex = 0; envelopeIndex <= instrument.envelopeCount; envelopeIndex++) {\n            let automationTarget: AutomationTarget;\n            let targetIndex: number;\n            let envelope: Envelope;\n\n            let inverse = false;\n            let isDiscrete = false;\n            let perEnvelopeSpeed = 1;\n            let globalEnvelopeSpeed = 1;\n            let envelopeSpeed = perEnvelopeSpeed * globalEnvelopeSpeed;\n            let perEnvelopeLowerBound = 0;\n            let perEnvelopeUpperBound = 1;\n            let timeSinceStart = 0;\n            let steps = 2;\n            let seed = 2;\n            let waveform = LFOEnvelopeTypes.sine;\n            let startPinTickAbsolute = this.startPinTickAbsolute || 0.0;\n            let defaultPitch = this.startPinTickDefaultPitch || 0.0;\n            if (envelopeIndex == instrument.envelopeCount) {\n                if (usedNoteSize /*|| !this._perNote*/) break;\n                // Special case: if no other envelopes used note size, default to applying it to note volume.\n                automationTarget = Config.instrumentAutomationTargets.dictionary[\"noteVolume\"];\n                targetIndex = 0;\n                envelope = Config.newEnvelopes.dictionary[\"note size\"];\n            } else {\n                let envelopeSettings = instrument.envelopes[envelopeIndex];\n                automationTarget = Config.instrumentAutomationTargets[envelopeSettings.target];\n                targetIndex = envelopeSettings.index;\n                envelope = Config.newEnvelopes[envelopeSettings.envelope];\n                inverse = instrument.envelopes[envelopeIndex].inverse;\n                isDiscrete = instrument.envelopes[envelopeIndex].discrete;\n                perEnvelopeSpeed = instrument.envelopes[envelopeIndex].perEnvelopeSpeed;\n                globalEnvelopeSpeed = Math.pow(instrument.envelopeSpeed, 2) / 144;\n                envelopeSpeed = perEnvelopeSpeed * globalEnvelopeSpeed;\n\n                perEnvelopeLowerBound = instrument.envelopes[envelopeIndex].perEnvelopeLowerBound;\n                perEnvelopeUpperBound = instrument.envelopes[envelopeIndex].perEnvelopeUpperBound;\n                if (synth.isModActive(Config.modulators.dictionary[\"individual envelope lower bound\"].index, channelIndex, instrumentIndex) && instrument.envelopes[envelopeIndex].tempEnvelopeLowerBound != null) { //modulation\n                    perEnvelopeLowerBound = instrument.envelopes[envelopeIndex].tempEnvelopeLowerBound!;\n                }\n                if (synth.isModActive(Config.modulators.dictionary[\"individual envelope upper bound\"].index, channelIndex, instrumentIndex) && instrument.envelopes[envelopeIndex].tempEnvelopeUpperBound != null) { //modulation\n                    perEnvelopeUpperBound = instrument.envelopes[envelopeIndex].tempEnvelopeUpperBound!;\n                }\n                if (!(perEnvelopeLowerBound <= perEnvelopeUpperBound)) { //reset bounds if incorrect\n                    perEnvelopeLowerBound = 0;\n                    perEnvelopeUpperBound = 1;\n                }\n\n                timeSinceStart = synth.computeTicksSinceStart();\n                steps = instrument.envelopes[envelopeIndex].steps;\n                seed = instrument.envelopes[envelopeIndex].seed;\n                if (instrument.envelopes[envelopeIndex].waveform >= (envelope.name == \"lfo\" ? LFOEnvelopeTypes.length : RandomEnvelopeTypes.length)) {\n                    instrument.envelopes[envelopeIndex].waveform = 0; //make sure that waveform is a proper index\n                }\n                waveform = instrument.envelopes[envelopeIndex].waveform;\n\n\n                if (!timeScale[envelopeIndex]) timeScale[envelopeIndex] = 0;\n\n                const secondsPerTickScaled = secondsPerTick * timeScale[envelopeIndex];\n                if (!tickTimeStart[envelopeIndex]) tickTimeStart[envelopeIndex] = 0; //prevents tremolos from causing a NaN width error\n                tickTimeEnd[envelopeIndex] = tickTimeStart[envelopeIndex] ? tickTimeStart[envelopeIndex] + timeScale[envelopeIndex] : timeScale[envelopeIndex];\n                noteSecondsStart[envelopeIndex] = this.noteSecondsEnd[envelopeIndex] ? this.noteSecondsEnd[envelopeIndex] : 0;\n                prevNoteSecondsStart[envelopeIndex] = this.prevNoteSecondsEnd[envelopeIndex] ? this.prevNoteSecondsEnd[envelopeIndex] : 0;\n                noteSecondsEnd[envelopeIndex] = noteSecondsStart[envelopeIndex] ? noteSecondsStart[envelopeIndex] + secondsPerTickScaled : secondsPerTickScaled;\n                prevNoteSecondsEnd[envelopeIndex] = prevNoteSecondsStart[envelopeIndex] ? prevNoteSecondsStart[envelopeIndex] + secondsPerTickScaled : secondsPerTickScaled;\n                beatTimeStart[envelopeIndex] = tickTimeStart[envelopeIndex] ? beatsPerTick * tickTimeStart[envelopeIndex] : beatsPerTick;\n                beatTimeEnd[envelopeIndex] = tickTimeEnd[envelopeIndex] ? beatsPerTick * tickTimeEnd[envelopeIndex] : beatsPerTick;\n\n                if (envelope.type == EnvelopeType.noteSize) usedNoteSize = true;\n            }\n            //only calculate pitch if needed\n            const pitch = (envelope.type == EnvelopeType.pitch) ? this.computePitchEnvelope(instrument, envelopeIndex, (this.startPinTickPitch || this.getPitchValue(instrument, tone, instrumentState, true))) : 0;\n\n            //calculate envelope values if target isn't null\n            if (automationTarget.computeIndex != null) {\n                const computeIndex = automationTarget.computeIndex + targetIndex;\n                let envelopeStart = EnvelopeComputer.computeEnvelope(envelope, envelopeSpeed, globalEnvelopeSpeed, noteSecondsStartUnscaled, noteSecondsStart[envelopeIndex], beatTimeStart[envelopeIndex], timeSinceStart, noteSizeStart, pitch, inverse, perEnvelopeLowerBound, perEnvelopeUpperBound, false, steps, seed, waveform, defaultPitch, startPinTickAbsolute);\n                if (prevSlideStart) {\n                    const other = EnvelopeComputer.computeEnvelope(envelope, envelopeSpeed, globalEnvelopeSpeed, prevNoteSecondsStartUnscaled, prevNoteSecondsStart[envelopeIndex], beatTimeStart[envelopeIndex], timeSinceStart, prevNoteSize, pitch, inverse, perEnvelopeLowerBound, perEnvelopeUpperBound, false, steps, seed, waveform, defaultPitch, startPinTickAbsolute);\n                    envelopeStart += (other - envelopeStart) * prevSlideRatioStart;\n                }\n                if (nextSlideStart) {\n                    const other = EnvelopeComputer.computeEnvelope(envelope, envelopeSpeed, globalEnvelopeSpeed, 0.0, 0.0, beatTimeStart[envelopeIndex], timeSinceStart, nextNoteSize, pitch, inverse, perEnvelopeLowerBound, perEnvelopeUpperBound, false, steps, seed, waveform, defaultPitch, startPinTickAbsolute);\n                    envelopeStart += (other - envelopeStart) * nextSlideRatioStart;\n                }\n                let envelopeEnd = envelopeStart;\n                if (isDiscrete == false) {\n                    envelopeEnd = EnvelopeComputer.computeEnvelope(envelope, envelopeSpeed, globalEnvelopeSpeed, noteSecondsEndUnscaled, noteSecondsEnd[envelopeIndex], beatTimeEnd[envelopeIndex], timeSinceStart, noteSizeEnd, pitch, inverse, perEnvelopeLowerBound, perEnvelopeUpperBound, false, steps, seed, waveform, defaultPitch, startPinTickAbsolute);\n                    if (prevSlideEnd) {\n                        const other = EnvelopeComputer.computeEnvelope(envelope, envelopeSpeed, globalEnvelopeSpeed, prevNoteSecondsEndUnscaled, prevNoteSecondsEnd[envelopeIndex], beatTimeEnd[envelopeIndex], timeSinceStart, prevNoteSize, pitch, inverse, perEnvelopeLowerBound, perEnvelopeUpperBound, false, steps, seed, waveform, defaultPitch, startPinTickAbsolute);\n                        envelopeEnd += (other - envelopeEnd) * prevSlideRatioEnd;\n                    }\n                    if (nextSlideEnd) {\n                        const other = EnvelopeComputer.computeEnvelope(envelope, envelopeSpeed, globalEnvelopeSpeed, 0.0, 0.0, beatTimeEnd[envelopeIndex], timeSinceStart, nextNoteSize, pitch, inverse, perEnvelopeLowerBound, perEnvelopeUpperBound, false, steps, seed, waveform, defaultPitch, startPinTickAbsolute);\n                        envelopeEnd += (other - envelopeEnd) * nextSlideRatioEnd;\n                    }\n                }\n\n                this.envelopeStarts[computeIndex] *= envelopeStart;\n                this.envelopeEnds[computeIndex] *= envelopeEnd;\n                this._modifiedEnvelopeIndices[this._modifiedEnvelopeCount++] = computeIndex;\n\n                if (automationTarget.isFilter) {\n                    const filterSettings = /*this._perNote ?*/ (instrument.tmpNoteFilterStart != null) ? instrument.tmpNoteFilterStart : instrument.noteFilter /*: instrument.eqFilter*/;\n                    if (filterSettings.controlPointCount > targetIndex && filterSettings.controlPoints[targetIndex].type == FilterType.lowPass) {\n                        lowpassCutoffDecayVolumeCompensation = Math.max(lowpassCutoffDecayVolumeCompensation, EnvelopeComputer.getLowpassCutoffDecayVolumeCompensation(envelope, perEnvelopeSpeed));\n                    }\n                }\n            }\n        }\n\n        this.noteSecondsStartUnscaled = noteSecondsStartUnscaled;\n        this.noteSecondsEndUnscaled = noteSecondsEndUnscaled;\n        this.noteTicksStart = noteTicksStart;\n        this.noteTicksEnd = noteTicksEnd;\n        this.prevNoteSecondsStartUnscaled = prevNoteSecondsStartUnscaled;\n        this.prevNoteSecondsEndUnscaled = prevNoteSecondsEndUnscaled;\n        this.prevNoteTicksStart = prevNoteTicksStart;\n        this.prevNoteTicksEnd = prevNoteTicksEnd;\n        for (let envelopeIndex = 0; envelopeIndex < Config.maxEnvelopeCount + 1; envelopeIndex++) {\n            this.noteSecondsStart[envelopeIndex] = noteSecondsStart[envelopeIndex];\n            this.noteSecondsEnd[envelopeIndex] = noteSecondsEnd[envelopeIndex];\n            this.prevNoteSecondsStart[envelopeIndex] = prevNoteSecondsStart[envelopeIndex];\n            this.prevNoteSecondsEnd[envelopeIndex] = prevNoteSecondsEnd[envelopeIndex];\n        }\n        this.prevNoteSize = prevNoteSize;\n        this.nextNoteSize = nextNoteSize;\n        this.noteSizeStart = noteSizeStart;\n        this.noteSizeEnd = noteSizeEnd;\n        this.prevSlideStart = prevSlideStart;\n        this.prevSlideEnd = prevSlideEnd;\n        this.nextSlideStart = nextSlideStart;\n        this.nextSlideEnd = nextSlideEnd;\n        this.prevSlideRatioStart = prevSlideRatioStart;\n        this.prevSlideRatioEnd = prevSlideRatioEnd;\n        this.nextSlideRatioStart = nextSlideRatioStart;\n        this.nextSlideRatioEnd = nextSlideRatioEnd;\n        this.lowpassCutoffDecayVolumeCompensation = lowpassCutoffDecayVolumeCompensation;\n    }\n\n    clearEnvelopes(): void {\n        for (let envelopeIndex = 0; envelopeIndex < this._modifiedEnvelopeCount; envelopeIndex++) {\n            const computeIndex = this._modifiedEnvelopeIndices[envelopeIndex];\n            this.envelopeStarts[computeIndex] = 1.0;\n            this.envelopeEnds[computeIndex] = 1.0;\n        }\n        this._modifiedEnvelopeCount = 0;\n    }\n\n    static computeEnvelope(envelope: Envelope, perEnvelopeSpeed: number, globalEnvelopeSpeed: number, unspedTime: number, time: number, beats: number, timeSinceStart: number, noteSize: number, pitch: number, inverse: boolean, perEnvelopeLowerBound: number, perEnvelopeUpperBound: number, isDrumset = false, steps: number, seed: number, waveform: number, defaultPitch: number, notePinStart: number): number {\n        const envelopeSpeed = isDrumset ? envelope.speed : 1;\n        const boundAdjust = (perEnvelopeUpperBound - perEnvelopeLowerBound);\n        switch (envelope.type) {\n            case EnvelopeType.none: return perEnvelopeUpperBound;\n            case EnvelopeType.noteSize:\n                if (!inverse) {\n                    return Synth.noteSizeToVolumeMult(noteSize) * (boundAdjust) + perEnvelopeLowerBound;\n                } else {\n                    return perEnvelopeUpperBound - Synth.noteSizeToVolumeMult(noteSize) * (boundAdjust);\n                }\n            case EnvelopeType.pitch:\n                //inversion and bounds are handled in the pitch calculation that we did prior\n                return pitch;\n            case EnvelopeType.pseudorandom:\n                //randomization is essentially just a complex hashing function which appears random to us, but is repeatable every time\n                //we can use either the time passed from the beginning of our song or the pitch of the note for what we hash\n                const hashMax = 0xffffffff;\n                const step = steps;\n                switch (waveform) {\n                    case RandomEnvelopeTypes.time:\n                        if (step <= 1) return 1;\n                        const timeHash = xxHash32((perEnvelopeSpeed == 0 ? 0 : Math.floor((timeSinceStart * perEnvelopeSpeed) / (256))) + \"\", seed);\n                        if (inverse) {\n                            return perEnvelopeUpperBound - boundAdjust * (step / (step - 1)) * Math.floor(timeHash * step / (hashMax + 1)) / step;\n                        } else {\n                            return boundAdjust * (step / (step - 1)) * Math.floor(timeHash * (step) / (hashMax + 1)) / step + perEnvelopeLowerBound;\n                        }\n                    case RandomEnvelopeTypes.pitch:\n                        const pitchHash = xxHash32(defaultPitch + \"\", seed);\n                        if (inverse) {\n                            return perEnvelopeUpperBound - boundAdjust * pitchHash / (hashMax + 1);\n                        } else {\n                            return boundAdjust * pitchHash / (hashMax + 1) + perEnvelopeLowerBound;\n                        }\n                    case RandomEnvelopeTypes.note:\n                        if (step <= 1) return 1;\n                        const noteHash = xxHash32(notePinStart + \"\", seed);\n                        if (inverse) {\n                            return perEnvelopeUpperBound - boundAdjust * (step / (step - 1)) * Math.floor(noteHash * step / (hashMax + 1)) / step;\n                        } else {\n                            return boundAdjust * (step / (step - 1)) * Math.floor(noteHash * (step) / (hashMax + 1)) / step + perEnvelopeLowerBound;\n                        }\n                    case RandomEnvelopeTypes.timeSmooth:\n                        const timeHashA = xxHash32((perEnvelopeSpeed == 0 ? 0 : Math.floor((timeSinceStart * perEnvelopeSpeed) / (256))) + \"\", seed);\n                        const timeHashB = xxHash32((perEnvelopeSpeed == 0 ? 0 : Math.floor((timeSinceStart * perEnvelopeSpeed + 256) / (256))) + \"\", seed);\n                        const weightedAverage = timeHashA * (1 - ((timeSinceStart * perEnvelopeSpeed) / (256)) % 1) + timeHashB * (((timeSinceStart * perEnvelopeSpeed) / (256)) % 1);\n                        if (inverse) {\n                            return perEnvelopeUpperBound - boundAdjust * weightedAverage / (hashMax + 1);\n                        } else {\n                            return boundAdjust * weightedAverage / (hashMax + 1) + perEnvelopeLowerBound;\n                        }\n                    default: throw new Error(\"Unrecognized operator envelope waveform type: \" + waveform);\n                }\n            case EnvelopeType.twang:\n                if (inverse) {\n                    return perEnvelopeUpperBound - boundAdjust * (1.0 / (1.0 + time * envelopeSpeed));\n                } else {\n                    return boundAdjust / (1.0 + time * envelopeSpeed) + perEnvelopeLowerBound;\n                }\n            case EnvelopeType.swell:\n                if (inverse) {\n                    return boundAdjust / (1.0 + time * envelopeSpeed) + perEnvelopeLowerBound; //swell is twang's inverse... I wonder if it would be worth it to just merge the two :/\n                } else {\n                    return perEnvelopeUpperBound - boundAdjust / (1.0 + time * envelopeSpeed);\n                }\n            case EnvelopeType.lfo:\n                switch (waveform) {\n                    case LFOEnvelopeTypes.sine:\n                        if (inverse) {\n                            return (perEnvelopeUpperBound / 2) + boundAdjust * Math.cos(beats * 2.0 * Math.PI * envelopeSpeed) * 0.5 + (perEnvelopeLowerBound / 2);\n                        } else {\n                            return (perEnvelopeUpperBound / 2) - boundAdjust * Math.cos(beats * 2.0 * Math.PI * envelopeSpeed) * 0.5 + (perEnvelopeLowerBound / 2);\n                        }\n                    case LFOEnvelopeTypes.square:\n                        if (inverse) {\n                            return (Math.cos(beats * 2.0 * Math.PI * envelopeSpeed + 3 * Math.PI / 2) < 0) ? perEnvelopeUpperBound : perEnvelopeLowerBound;\n                        } else {\n                            return (Math.cos(beats * 2.0 * Math.PI * envelopeSpeed + 3 * Math.PI / 2) < 0) ? perEnvelopeLowerBound : perEnvelopeUpperBound;\n                        }\n                    case LFOEnvelopeTypes.triangle:\n                        if (inverse) {\n                            return (perEnvelopeUpperBound / 2) - (boundAdjust / Math.PI) * Math.asin(Math.sin((Math.PI / 2) + beats * Math.PI * 2.0 * envelopeSpeed)) + (perEnvelopeLowerBound / 2);\n                        } else {\n                            return (perEnvelopeUpperBound / 2) + (boundAdjust / Math.PI) * Math.asin(Math.sin((Math.PI / 2) + beats * Math.PI * 2.0 * envelopeSpeed)) + (perEnvelopeLowerBound / 2);\n                        }\n                    case LFOEnvelopeTypes.sawtooth:\n                        if (inverse) {\n                            return perEnvelopeUpperBound - (beats * envelopeSpeed) % 1 * boundAdjust;\n                        } else {\n                            return (beats * envelopeSpeed) % 1 * boundAdjust + perEnvelopeLowerBound;\n                        }\n                    case LFOEnvelopeTypes.trapezoid:\n                        let trap = 0;\n                        if (inverse) {\n                            trap = (perEnvelopeUpperBound / 2) - (boundAdjust * 2 / Math.PI) * Math.asin(Math.sin((Math.PI / 2) + beats * Math.PI * 2.0 * envelopeSpeed)) + (perEnvelopeLowerBound / 2);\n                        } else {\n                            trap = (perEnvelopeUpperBound / 2) + (boundAdjust * 2 / Math.PI) * Math.asin(Math.sin((Math.PI / 2) + beats * Math.PI * 2.0 * envelopeSpeed)) + (perEnvelopeLowerBound / 2);\n                        }\n                        return Math.max(perEnvelopeLowerBound, Math.min(perEnvelopeUpperBound, trap));\n                    case LFOEnvelopeTypes.steppedSaw:\n                        if (steps <= 1) return 1;\n                        let saw = (beats * envelopeSpeed) % 1;\n                        if (inverse) {\n                            return perEnvelopeUpperBound - Math.floor(saw * steps) * boundAdjust / (steps - 1);\n                        } else {\n                            return Math.floor(saw * steps) * boundAdjust / (steps - 1) + perEnvelopeLowerBound;\n                        }\n\n                    case LFOEnvelopeTypes.steppedTri:\n                        if (steps <= 1) return 1;\n                        let tri = 0.5 + (inverse ? -1 : 1) * (1 / Math.PI) * Math.asin(Math.sin((Math.PI / 2) + beats * Math.PI * 2.0 * envelopeSpeed));\n                        return Math.round(tri * (steps - 1)) * boundAdjust / (steps - 1) + perEnvelopeLowerBound;\n                    default: throw new Error(\"Unrecognized operator envelope waveform type: \" + waveform);\n                }\n            case EnvelopeType.tremolo2: //kept only for drumsets right now\n                if (inverse) {\n                    return (perEnvelopeUpperBound / 4) + boundAdjust * Math.cos(beats * 2.0 * Math.PI * envelopeSpeed) * 0.25 + (perEnvelopeLowerBound / 4); //inverse works strangely with tremolo2. If I ever update this I'll need to turn all current versions into tremolo with bounds\n                } else {\n                    return 0.5 + (perEnvelopeUpperBound / 4) - boundAdjust * Math.cos(beats * 2.0 * Math.PI * envelopeSpeed) * 0.25 - (perEnvelopeLowerBound / 4);\n                }\n            case EnvelopeType.punch:\n                if (inverse) {\n                    return Math.max(0, perEnvelopeUpperBound + 1.0 - Math.max(1.0 - perEnvelopeLowerBound, 1.0 - perEnvelopeUpperBound - unspedTime * globalEnvelopeSpeed * 10.0)); //punch special case: 2- instead of 1-\n                } else {\n                    return Math.max(1.0+perEnvelopeLowerBound, 1.0+perEnvelopeUpperBound - unspedTime * globalEnvelopeSpeed * 10.0); //punch only uses global envelope speed\n                }\n            case EnvelopeType.flare:\n                const attack = 0.25 / Math.sqrt(envelopeSpeed * perEnvelopeSpeed); //flare and blip need to be handled a little differently with envelope speeds. I have to use the old system\n                if (inverse) {\n                    return perEnvelopeUpperBound - boundAdjust * (unspedTime < attack ? unspedTime / attack : 1.0 / (1.0 + (unspedTime - attack) * envelopeSpeed * perEnvelopeSpeed));\n                } else {\n                    return boundAdjust * (unspedTime < attack ? unspedTime / attack : 1.0 / (1.0 + (unspedTime - attack) * envelopeSpeed * perEnvelopeSpeed)) + perEnvelopeLowerBound;\n                }\n            case EnvelopeType.decay:\n                if (inverse) {\n                    return perEnvelopeUpperBound - boundAdjust * Math.pow(2, -envelopeSpeed * time);\n                } else {\n                    return boundAdjust * Math.pow(2, -envelopeSpeed * time) + perEnvelopeLowerBound;\n                }\n            case EnvelopeType.blip:\n                if (inverse) {\n                    return perEnvelopeUpperBound - boundAdjust * +(unspedTime < (0.25 / Math.sqrt(envelopeSpeed * perEnvelopeSpeed)));\n                } else {\n                    return boundAdjust * +(unspedTime < (0.25 / Math.sqrt(envelopeSpeed * perEnvelopeSpeed))) + perEnvelopeLowerBound;\n                }\n            case EnvelopeType.wibble:\n                let temp = 0.5 - Math.cos(beats * envelopeSpeed) * 0.5;\n                temp = 1.0 / (1.0 + time * (envelopeSpeed - (temp / (1.5 / envelopeSpeed))));\n                temp = temp > 0.0 ? temp : 0.0;\n                if (inverse) {\n                    return perEnvelopeUpperBound - boundAdjust * temp;\n                } else {\n                    return boundAdjust * temp + perEnvelopeLowerBound;\n                }\n            case EnvelopeType.linear: {\n                let lin = (1.0 - (time / (16 / envelopeSpeed)));\n                lin = lin > 0.0 ? lin : 0.0;\n                if (inverse) { //another case where linear's inverse is rise. Do I merge them?\n                    return perEnvelopeUpperBound - boundAdjust * lin;\n                } else {\n                    return boundAdjust * lin + perEnvelopeLowerBound;\n                }\n            }\n            case EnvelopeType.rise: {\n                let lin = (time / (16 / envelopeSpeed));\n                lin = lin < 1.0 ? lin : 1.0;\n                if (inverse) {\n                    return perEnvelopeUpperBound - boundAdjust * lin;\n                } else {\n                    return boundAdjust * lin + perEnvelopeLowerBound;\n                }\n            }\n            case EnvelopeType.fall: {\n                if (inverse) {\n                    return Math.min(Math.max(perEnvelopeLowerBound, perEnvelopeUpperBound - boundAdjust * Math.sqrt(Math.max(1.0 - envelopeSpeed * time / 2, 0))), perEnvelopeUpperBound);\n                } else {\n                    return Math.max(perEnvelopeLowerBound, boundAdjust * Math.sqrt(Math.max(1.0 - envelopeSpeed * time / 2, 0)) + perEnvelopeLowerBound);\n                }\n            }\n            default: throw new Error(\"Unrecognized operator envelope type.\");\n        }\n\n    }\n\n    getPitchValue(instrument: Instrument, tone: Tone | null, instrumentState: InstrumentState, calculateBends = true): number {\n        if (tone && tone.pitchCount >= 1) {\n            const chord = instrument.getChord();\n            const arpeggiates = chord.arpeggiates;\n            const monophonic = chord.name == \"monophonic\"\n            const arpeggio = Math.floor(instrumentState.arpTime / Config.ticksPerArpeggio); //calculate arpeggiation\n            const tonePitch = tone.pitches[arpeggiates ? getArpeggioPitchIndex(tone.pitchCount, instrument.fastTwoNoteArp, arpeggio) : monophonic ? instrument.monoChordTone : 0]\n            if (calculateBends) {\n                return tone.lastInterval != tonePitch ? tonePitch + tone.lastInterval : tonePitch; //account for pitch bends\n            } else {\n                return tonePitch;\n            }\n        }\n        return 0;\n    }\n\n    computePitchEnvelope(instrument: Instrument, index: number, pitch = 0): number {\n        let startNote = 0;\n        let endNote = Config.maxPitch;\n        let inverse = false;\n        let envelopeLowerBound = 0;\n        let envelopeUpperBound = 1;\n\n        if (instrument.isNoiseInstrument) {\n            endNote = Config.drumCount - 1;\n        }\n\n\n        if (index < instrument.envelopeCount && index !== -2) {\n            startNote = instrument.envelopes[index].pitchEnvelopeStart;\n            endNote = instrument.envelopes[index].pitchEnvelopeEnd;\n            inverse = instrument.envelopes[index].inverse;\n            envelopeLowerBound = instrument.envelopes[index].perEnvelopeLowerBound;\n            envelopeUpperBound = instrument.envelopes[index].perEnvelopeUpperBound;\n        }\n\n        if (startNote > endNote) { //Reset if values are improper\n            startNote = 0;\n            endNote = instrument.isNoiseInstrument ? Config.drumCount - 1 : Config.maxPitch;\n        }\n        const range = endNote - startNote + 1;\n        if (!inverse) {\n            if (pitch <= startNote) {\n                return envelopeLowerBound;\n            } else if (pitch >= endNote) {\n                return envelopeUpperBound;\n            } else {\n                return (pitch - startNote) * (envelopeUpperBound - envelopeLowerBound) / range + envelopeLowerBound;\n            }\n        } else {\n            if (pitch <= startNote) {\n                return envelopeUpperBound;\n            } else if (pitch >= endNote) {\n                return envelopeLowerBound;\n            } else {\n                return envelopeUpperBound - (pitch - startNote) * (envelopeUpperBound - envelopeLowerBound) / range;\n            }\n        }\n    }\n\n    static getLowpassCutoffDecayVolumeCompensation(envelope: Envelope, perEnvelopeSpeed = 1): number {\n        // This is a little hokey in the details, but I designed it a while ago and keep it\n        // around for compatibility. This decides how much to increase the volume (or\n        // expression) to compensate for a decaying lowpass cutoff to maintain perceived\n        // volume overall.\n        if (envelope.type == EnvelopeType.decay) return 1.25 + 0.025 * /*envelope.speed */ perEnvelopeSpeed;\n        if (envelope.type == EnvelopeType.twang) return 1.0 + 0.02 * /*envelope.speed */ perEnvelopeSpeed;\n        return 1.0;\n    }\n\n    computeDrumsetEnvelopes(instrument: Instrument, drumsetFilterEnvelope: Envelope, beatsPerPart: number, partTimeStart: number, partTimeEnd: number) {\n\n        const pitch = 1\n\n        function computeDrumsetEnvelope(unspedTime: number, time: number, beats: number, noteSize: number):number {\n            return EnvelopeComputer.computeEnvelope(drumsetFilterEnvelope, 1, 1, unspedTime, time, beats, 0, noteSize, pitch, false, 0, 1, true, 2, 2, LFOEnvelopeTypes.sine, pitch, 0);\n        }\n\n        // Drumset filters use the same envelope timing as the rest of the envelopes, but do not include support for slide transitions.\n        let drumsetFilterEnvelopeStart = computeDrumsetEnvelope(this.noteSecondsStartUnscaled, this.noteSecondsStartUnscaled, beatsPerPart * partTimeStart, this.noteSizeStart); //doesn't have/need pitchStart, pitchEnd, pitchInvert, steps, seed, timeSinceBeginning, etc\n\n        // Apply slide interpolation to drumset envelope.\n        if (this.prevSlideStart) {\n            const other = computeDrumsetEnvelope(this.prevNoteSecondsStartUnscaled, this.prevNoteSecondsStartUnscaled, beatsPerPart * partTimeStart, this.prevNoteSize);\n            drumsetFilterEnvelopeStart += (other - drumsetFilterEnvelopeStart) * this.prevSlideRatioStart;\n        }\n        if (this.nextSlideStart) {\n            const other = computeDrumsetEnvelope(0.0, 0.0, beatsPerPart * partTimeStart, this.nextNoteSize);\n            drumsetFilterEnvelopeStart += (other - drumsetFilterEnvelopeStart) * this.nextSlideRatioStart;\n        }\n\n        let drumsetFilterEnvelopeEnd = drumsetFilterEnvelopeStart;\n\n\n        //hmm, I guess making discrete per envelope leaves out drumsets....\n        drumsetFilterEnvelopeEnd = computeDrumsetEnvelope(this.noteSecondsEndUnscaled, this.noteSecondsEndUnscaled, beatsPerPart * partTimeEnd, this.noteSizeEnd);\n\n        if (this.prevSlideEnd) {\n            const other = computeDrumsetEnvelope(this.prevNoteSecondsEndUnscaled, this.prevNoteSecondsEndUnscaled, beatsPerPart * partTimeEnd, this.prevNoteSize);\n            drumsetFilterEnvelopeEnd += (other - drumsetFilterEnvelopeEnd) * this.prevSlideRatioEnd;\n        }\n        if (this.nextSlideEnd) {\n            const other = computeDrumsetEnvelope(0.0, 0.0, beatsPerPart * partTimeEnd, this.nextNoteSize);\n            drumsetFilterEnvelopeEnd += (other - drumsetFilterEnvelopeEnd) * this.nextSlideRatioEnd;\n        }\n\n        this.drumsetFilterEnvelopeStart = drumsetFilterEnvelopeStart;\n        this.drumsetFilterEnvelopeEnd = drumsetFilterEnvelopeEnd;\n\n    }\n\n}\n", "// Copyright (c) John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { Effect } from \"./Effect\";\nimport { FilterControlPoint, FilterSettings } from \"./Filter\";\nimport { DynamicBiquadFilter } from \"./filtering\";\nimport { Instrument } from \"./Instrument\";\nimport { InstrumentState } from \"./InstrumentState\";\nimport { Synth } from \"./synth\";\nimport { Config, EffectType, EnvelopeComputeIndex, FilterType, GranularEnvelopeType, calculateRingModHertz } from \"./SynthConfig\";\nimport { Tone } from \"./Tone\";\nimport { fittingPowerOfTwo } from \"./utils\";\n\nclass Grain {\n\tdelayLinePosition: number; // Relative to latest sample\n\n\tageInSamples: number;\n\tmaxAgeInSamples: number;\n\tdelay: number;\n\n\t//parabolic envelope implementation\n\tparabolicEnvelopeAmplitude: number;\n\tparabolicEnvelopeSlope: number;\n\tparabolicEnvelopeCurve: number;\n\n\t//raised cosine bell envelope implementation\n\trcbEnvelopeAmplitude: number;\n\trcbEnvelopeAttackIndex: number;\n\trcbEnvelopeReleaseIndex: number;\n\trcbEnvelopeSustain: number;\n\n\tconstructor() {\n\t\tthis.delayLinePosition = 0;\n\n\t\tthis.ageInSamples = 0;\n\t\tthis.maxAgeInSamples = 0;\n\t\tthis.delay = 0;\n\n\t\tthis.parabolicEnvelopeAmplitude = 0;\n\t\tthis.parabolicEnvelopeSlope = 0;\n\t\tthis.parabolicEnvelopeCurve = 0;\n\n\t\tthis.rcbEnvelopeAmplitude = 0;\n\t\tthis.rcbEnvelopeAttackIndex = 0;\n\t\tthis.rcbEnvelopeReleaseIndex = 0;\n\t\tthis.rcbEnvelopeSustain = 0;\n\t}\n\n\tinitializeParabolicEnvelope(durationInSamples: number, amplitude: number): void {\n\t\tthis.parabolicEnvelopeAmplitude = 0;\n\t\tconst invDuration = 1.0 / durationInSamples;\n\t\tconst invDurationSquared = invDuration * invDuration;\n\t\tthis.parabolicEnvelopeSlope = 4.0 * amplitude * (invDuration - invDurationSquared);\n\t\tthis.parabolicEnvelopeCurve = -8.0 * amplitude * invDurationSquared;\n\t}\n\n\tupdateParabolicEnvelope(): void {\n\t\tthis.parabolicEnvelopeAmplitude += this.parabolicEnvelopeSlope;\n\t\tthis.parabolicEnvelopeSlope += this.parabolicEnvelopeCurve;\n\t}\n\n\tinitializeRCBEnvelope(durationInSamples: number, amplitude: number): void {\n\t\t// attack:\n\t\tthis.rcbEnvelopeAttackIndex = Math.floor(durationInSamples / 6);\n\t\t// sustain:\n\t\tthis.rcbEnvelopeSustain = amplitude;\n\t\t// release:\n\t\tthis.rcbEnvelopeReleaseIndex = Math.floor(durationInSamples * 5 / 6);\n\t}\n\n\tupdateRCBEnvelope(): void {\n\t\tif (this.ageInSamples < this.rcbEnvelopeAttackIndex) { //attack\n\t\t\tthis.rcbEnvelopeAmplitude = (1.0 + Math.cos(Math.PI + (Math.PI * (this.ageInSamples / this.rcbEnvelopeAttackIndex) * (this.rcbEnvelopeSustain / 2.0))));\n\t\t} else if (this.ageInSamples > this.rcbEnvelopeReleaseIndex) { //release\n\t\t\tthis.rcbEnvelopeAmplitude = (1.0 + Math.cos(Math.PI * ((this.ageInSamples - this.rcbEnvelopeReleaseIndex) / this.rcbEnvelopeAttackIndex)) * (this.rcbEnvelopeSustain / 2.0));\n\t\t} //sustain covered by the end of attack\n\t}\n\n\taddDelay(delay: number): void {\n\t\tthis.delay = delay;\n\t}\n}\n\nexport class EffectState {\n\ttype = EffectType.reverb;\n\n\teqFilterVolume = 1.0;\n\teqFilterVolumeDelta = 0.0;\n\n\tgranularMix = 1.0;\n\tgranularMixDelta = 0.0;\n\tgranularDelayLineL: Float32Array | null = null;\n\tgranularDelayLineR: Float32Array | null = null;\n\tgranularDelayLineIndex = 0;\n\tgranularMaximumDelayTimeInSeconds = 1;\n\tgranularGrains: Grain[];\n\tgranularGrainsLength: number;\n\tgranularMaximumGrains: number;\n\tusesRandomGrainLocation = true; //eventually I might use the granular code for sample pitch shifting, but we'll see\n\tgranularDelayLineDirty = false;\n\tcomputeGrains = true;\n\n\tringModMix = 0;\n\tringModMixDelta = 0;\n\tringModPhase = 0;\n\tringModPhaseDelta = 0;\n\tringModPhaseDeltaScale = 1.0;\n\tringModWaveformIndex = 0.0;\n\tringModPulseWidth = 0.0;\n\tringModHzOffset = 0.0;\n\tringModMixFade = 1.0;\n\tringModMixFadeDelta = 0;\n\n\tdistortion = 0.0;\n\tdistortionDelta = 0.0;\n\tdistortionDrive = 0.0;\n\tdistortionDriveDelta = 0.0;\n\tdistortionFractionalInputL1 = 0.0;\n\tdistortionFractionalInputL2 = 0.0;\n\tdistortionFractionalInputL3 = 0.0;\n\tdistortionFractionalInputR1 = 0.0;\n\tdistortionFractionalInputR2 = 0.0;\n\tdistortionFractionalInputR3 = 0.0;\n\tdistortionPrevInputL = 0.0;\n\tdistortionPrevInputR = 0.0;\n\tdistortionNextOutputL = 0.0;\n\tdistortionNextOutputR = 0.0;\n\n\tbitcrusherPrevInputL = 0.0;\n\tbitcrusherPrevInputR = 0.0;\n\tbitcrusherCurrentOutputL = 0.0;\n\tbitcrusherCurrentOutputR = 0.0;\n\tbitcrusherPhase = 1.0;\n\tbitcrusherPhaseDelta = 0.0;\n\tbitcrusherPhaseDeltaScale = 1.0;\n\tbitcrusherScale = 1.0;\n\tbitcrusherScaleScale = 1.0;\n\tbitcrusherFoldLevel = 1.0;\n\tbitcrusherFoldLevelScale = 1.0;\n\n\treadonly eqFiltersL: DynamicBiquadFilter[] = [];\n\treadonly eqFiltersR: DynamicBiquadFilter[] = [];\n\teqFilterCount = 0;\n\tinitialEqFilterInputL1 = 0.0;\n\tinitialEqFilterInputR1 = 0.0;\n\tinitialEqFilterInputL2 = 0.0;\n\tinitialEqFilterInputR2 = 0.0;\n\n\tgain = 1.0;\n\tgainDelta = 0.0;\n\n\tpanningDelayLineL: Float32Array | null = null;\n\tpanningDelayLineR: Float32Array | null = null;\n\tpanningDelayPos = 0;\n\tpanningVolumeL = 0.0;\n\tpanningVolumeR = 0.0;\n\tpanningVolumeDeltaL = 0.0;\n\tpanningVolumeDeltaR = 0.0;\n\tpanningOffsetL = 0.0;\n\tpanningOffsetR = 0.0;\n\tpanningOffsetDeltaL = 0.0;\n\tpanningOffsetDeltaR = 0.0;\n\tpanningMode = 0;\n\n\tflangerDelayLineL: Float32Array | null = null;\n\tflangerDelayLineR: Float32Array | null = null;\n\tflangerDelayLineDirty = false;\n\tflangerDelayPos = 0;\n\tflanger = 0;\n\tflangerDelta = 0;\n\tflangerSpeed = 0;\n\tflangerSpeedDelta = 0;\n\tflangerDepth = 0;\n\tflangerDepthDelta = 0;\n\tflangerFeedback = 0;\n\tflangerFeedbackDelta = 0;\n\tflangerPhase = 0;\n\n\tchorusDelayLineL: Float32Array | null = null;\n\tchorusDelayLineR: Float32Array | null = null;\n\tchorusDelayLineDirty = false;\n\tchorusDelayPos = 0;\n\tchorusPhase = 0;\n\tchorusVoiceMult = 0;\n\tchorusVoiceMultDelta = 0;\n\tchorusCombinedMult = 0;\n\tchorusCombinedMultDelta = 0;\n\n\techoDelayLineL: Float32Array | null = null;\n\techoDelayLineR: Float32Array | null = null;\n\techoDelayLineDirty = false;\n\techoDelayPosL = 0;\n\techoDelayPosR = 0;\n\techoDelayOffsetStart = 0;\n\techoDelayOffsetEnd: number | null = null;\n\techoDelayOffsetRatio = 0.0;\n\techoDelayOffsetRatioDelta = 0.0;\n\techoMult = 0.0;\n\techoMultDelta = 0.0;\n\techoPingPong = 0.0;\n\techoShelfA1 = 0.0;\n\techoShelfB0 = 0.0;\n\techoShelfB1 = 0.0;\n\techoShelfSampleL = 0.0;\n\techoShelfSampleR = 0.0;\n\techoShelfPrevInputL = 0.0;\n\techoShelfPrevInputR = 0.0;\n\n\treverbDelayLine: Float32Array | null = null;\n\treverbDelayLineDirty = false;\n\treverbDelayPos = 0;\n\treverbMult = 0.0;\n\treverbMultDelta = 0.0;\n\treverbShelfA1 = 0.0;\n\treverbShelfB0 = 0.0;\n\treverbShelfB1 = 0.0;\n\treverbShelfSample0 = 0.0;\n\treverbShelfSample1 = 0.0;\n\treverbShelfSample2 = 0.0;\n\treverbShelfSample3 = 0.0;\n\treverbShelfPrevInput0 = 0.0;\n\treverbShelfPrevInput1 = 0.0;\n\treverbShelfPrevInput2 = 0.0;\n\treverbShelfPrevInput3 = 0.0;\n\n\tconstructor(type: EffectType) {\n\t\tthis.type = type;\n\t\t// Allocate all grains to be used ahead of time.\n\t\t// granularGrainsLength is what indicates how many grains actually \"exist\".\n\t\tthis.granularGrains = [];\n\t\tthis.granularMaximumGrains = 256;\n\t\tfor (let i = 0; i < this.granularMaximumGrains; i++) {\n\t\t\tthis.granularGrains.push(new Grain());\n\t\t}\n\t\tthis.granularGrainsLength = 0;\n\t}\n\n\treset(): void {\n\t\tif (this.chorusDelayLineDirty) {\n\t\t\tfor (let i = 0; i < this.chorusDelayLineL!.length; i++) this.chorusDelayLineL![i] = 0.0;\n\t\t\tfor (let i = 0; i < this.chorusDelayLineR!.length; i++) this.chorusDelayLineR![i] = 0.0;\n\t\t}\n\t\tif (this.flangerDelayLineDirty) {\n\t\t\tfor (let i = 0; i < this.flangerDelayLineL!.length; i++) this.flangerDelayLineL![i] = 0.0;\n\t\t\tfor (let i = 0; i < this.flangerDelayLineR!.length; i++) this.flangerDelayLineR![i] = 0.0;\n\t\t}\n\t\tif (this.echoDelayLineDirty) {\n\t\t\tfor (let i = 0; i < this.echoDelayLineL!.length; i++) this.echoDelayLineL![i] = 0.0;\n\t\t\tfor (let i = 0; i < this.echoDelayLineR!.length; i++) this.echoDelayLineR![i] = 0.0;\n\t\t}\n\t\tif (this.reverbDelayLineDirty) {\n\t\t\tfor (let i = 0; i < this.reverbDelayLine!.length; i++) this.reverbDelayLine![i] = 0.0;\n\t\t}\n\t\tif (this.granularDelayLineDirty) {\n\t\t\tfor (let i = 0; i < this.granularDelayLineL!.length; i++) this.granularDelayLineL![i] = 0.0;\n\t\t\tfor (let i = 0; i < this.granularDelayLineR!.length; i++) this.granularDelayLineR![i] = 0.0;\n\t\t}\n\n\t\tthis.flangerPhase = 0.0;\n\t\tthis.chorusPhase = 0.0;\n\t\tthis.ringModPhase = 0.0;\n\t\tthis.ringModMixFade = 1.0;\n\t}\n\n\tallocateNecessaryBuffers(synth: Synth, instrument: Instrument, effect: Effect, samplesPerTick: number): void {\n\t\tif (effect.type == EffectType.panning) {\n\t\t\tif (this.panningDelayLineL == null || this.panningDelayLineR == null || this.panningDelayLineL.length < synth.panningDelayBufferSize || this.panningDelayLineR.length < synth.panningDelayBufferSize) {\n\t\t\t\tthis.panningDelayLineL = new Float32Array(synth.panningDelayBufferSize);\n\t\t\t\tthis.panningDelayLineR = new Float32Array(synth.panningDelayBufferSize);\n\t\t\t}\n\t\t}\n\t\tif (effect.type == EffectType.chorus) {\n\t\t\tif (this.chorusDelayLineL == null || this.chorusDelayLineL.length < synth.chorusDelayBufferSize) {\n\t\t\t\tthis.chorusDelayLineL = new Float32Array(synth.chorusDelayBufferSize);\n\t\t\t}\n\t\t\tif (this.chorusDelayLineR == null || this.chorusDelayLineR.length < synth.chorusDelayBufferSize) {\n\t\t\t\tthis.chorusDelayLineR = new Float32Array(synth.chorusDelayBufferSize);\n\t\t\t}\n\t\t}\n\t\tif (effect.type == EffectType.flanger) {\n\t\t\tif (this.flangerDelayLineL == null || this.flangerDelayLineL.length < synth.flangerDelayBufferSize) {\n\t\t\t\tthis.flangerDelayLineL = new Float32Array(synth.flangerDelayBufferSize);\n\t\t\t}\n\t\t\tif (this.flangerDelayLineR == null || this.flangerDelayLineR.length < synth.flangerDelayBufferSize) {\n\t\t\t\tthis.flangerDelayLineR = new Float32Array(synth.flangerDelayBufferSize);\n\t\t\t}\n\t\t}\n\t\tif (effect.type == EffectType.echo) {\n\t\t\tthis.allocateEchoBuffers(samplesPerTick, effect.echoDelay);\n\t\t}\n\t\tif (effect.type == EffectType.reverb) {\n\t\t\t// TODO: Make reverb delay line sample rate agnostic. Maybe just double buffer size for 96KHz? Adjust attenuation and shelf cutoff appropriately?\n\t\t\tif (this.reverbDelayLine == null) {\n\t\t\t\tthis.reverbDelayLine = new Float32Array(Config.reverbDelayBufferSize);\n\t\t\t}\n\t\t}\n\t\tif (effect.type == EffectType.granular) {\n\t\t\tconst granularDelayLineSizeInMilliseconds = 2500;\n\t\t\tconst granularDelayLineSizeInSeconds = granularDelayLineSizeInMilliseconds / 1000; // Maximum possible delay time\n\t\t\tthis.granularMaximumDelayTimeInSeconds = granularDelayLineSizeInSeconds;\n\t\t\tconst granularDelayLineSizeInSamples = fittingPowerOfTwo(Math.floor(granularDelayLineSizeInSeconds * synth.samplesPerSecond));\n\t\t\tif (this.granularDelayLineL == null || this.granularDelayLineR == null || this.granularDelayLineL.length != granularDelayLineSizeInSamples || this.granularDelayLineR.length != granularDelayLineSizeInSamples) {\n\t\t\t\tthis.granularDelayLineL = new Float32Array(granularDelayLineSizeInSamples);\n\t\t\t\tthis.granularDelayLineR = new Float32Array(granularDelayLineSizeInSamples);\n\t\t\t\tthis.granularDelayLineIndex = 0;\n\t\t\t}\n\t\t\tconst oldGrainsLength = this.granularGrains.length;\n\t\t\tif (this.granularMaximumGrains > oldGrainsLength) { //increase grain amount if it changes\n\t\t\t\tfor (let i = oldGrainsLength; i < this.granularMaximumGrains+1; i++) {\n\t\t\t\t\tthis.granularGrains.push(new Grain());\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (this.granularMaximumGrains < this.granularGrainsLength) {\n\t\t\t\tthis.granularGrainsLength = Math.round(this.granularMaximumGrains);\n\t\t\t}\n\t\t}\n\t}\n\n\tallocateEchoBuffers(samplesPerTick: number, echoDelay: number) {\n\t\t// account for tempo and delay automation changing delay length during a tick?\n\t\tconst safeEchoDelaySteps = Math.max(Config.echoDelayRange >> 1, (echoDelay + 1)); // The delay may be very short now, but if it increases later make sure we have enough sample history.\n\t\tconst baseEchoDelayBufferSize = fittingPowerOfTwo(safeEchoDelaySteps * Config.echoDelayStepTicks * samplesPerTick);\n\t\tconst safeEchoDelayBufferSize = baseEchoDelayBufferSize * 2; // If the tempo or delay changes and we suddenly need a longer delay, make sure that we have enough sample history to accomodate the longer delay.\n\n\t\tif (this.echoDelayLineL == null || this.echoDelayLineR == null) {\n\t\t\tthis.echoDelayLineL = new Float32Array(safeEchoDelayBufferSize);\n\t\t\tthis.echoDelayLineR = new Float32Array(safeEchoDelayBufferSize);\n\t\t} else if (this.echoDelayLineL.length < safeEchoDelayBufferSize || this.echoDelayLineR.length < safeEchoDelayBufferSize) {\n\t\t\t// The echo delay length may change while the song is playing if tempo changes,\n\t\t\t// so buffers may need to be reallocated, but we don't want to lose any echoes\n\t\t\t// so we need to copy the contents of the old buffer to the new one.\n\t\t\tconst newDelayLineL: Float32Array = new Float32Array(safeEchoDelayBufferSize);\n\t\t\tconst newDelayLineR: Float32Array = new Float32Array(safeEchoDelayBufferSize);\n\t\t\tconst oldMask = this.echoDelayLineL.length - 1;\n\n\t\t\tfor (let i = 0; i < this.echoDelayLineL.length; i++) {\n\t\t\t\tnewDelayLineL[i] = this.echoDelayLineL[(this.echoDelayPosL + i) & oldMask];\n\t\t\t\tnewDelayLineR[i] = this.echoDelayLineR[(this.echoDelayPosR + i) & oldMask];\n\t\t\t}\n\n\t\t\tthis.echoDelayPosL = this.echoDelayLineL.length;\n\t\t\tthis.echoDelayPosR = this.echoDelayLineR.length;\n\t\t\tthis.echoDelayLineL = newDelayLineL;\n\t\t\tthis.echoDelayLineR = newDelayLineR;\n\t\t}\n\t}\n\n\tdeactivate(): void {\n\t\tthis.bitcrusherPrevInputL = 0.0;\n\t\tthis.bitcrusherPrevInputR = 0.0;\n\t\tthis.bitcrusherCurrentOutputL = 0.0;\n\t\tthis.bitcrusherCurrentOutputR = 0.0;\n\t\tthis.bitcrusherPhase = 1.0;\n\t\tfor (let i = 0; i < this.eqFilterCount; i++) {\n\t\t\tthis.eqFiltersL[i].resetOutput();\n\t\t\tthis.eqFiltersR[i].resetOutput();\n\t\t}\n\t\tthis.eqFilterCount = 0;\n\t\tthis.initialEqFilterInputL1 = 0.0;\n\t\tthis.initialEqFilterInputR1 = 0.0;\n\t\tthis.initialEqFilterInputL2 = 0.0;\n\t\tthis.initialEqFilterInputR2 = 0.0;\n\t\tthis.distortionFractionalInputL1 = 0.0;\n\t\tthis.distortionFractionalInputL2 = 0.0;\n\t\tthis.distortionFractionalInputL3 = 0.0;\n\t\tthis.distortionFractionalInputR1 = 0.0;\n\t\tthis.distortionFractionalInputR2 = 0.0;\n\t\tthis.distortionFractionalInputR3 = 0.0;\n\t\tthis.distortionPrevInputL = 0.0;\n\t\tthis.distortionPrevInputR = 0.0;\n\t\tthis.distortionNextOutputL = 0.0;\n\t\tthis.distortionNextOutputR = 0.0;\n\t\tthis.flangerDelayPos = 0;\n\t\tthis.panningDelayPos = 0;\n\t\tif (this.panningDelayLineL != null) for (let i = 0; i < this.panningDelayLineL.length; i++) this.panningDelayLineL[i] = 0.0;\n\t\tif (this.panningDelayLineR != null) for (let i = 0; i < this.panningDelayLineR.length; i++) this.panningDelayLineR[i] = 0.0;\n\t\tthis.echoDelayOffsetEnd = null;\n\t\tthis.echoShelfSampleL = 0.0;\n\t\tthis.echoShelfSampleR = 0.0;\n\t\tthis.echoShelfPrevInputL = 0.0;\n\t\tthis.echoShelfPrevInputR = 0.0;\n\t\tthis.reverbShelfSample0 = 0.0;\n\t\tthis.reverbShelfSample1 = 0.0;\n\t\tthis.reverbShelfSample2 = 0.0;\n\t\tthis.reverbShelfSample3 = 0.0;\n\t\tthis.reverbShelfPrevInput0 = 0.0;\n\t\tthis.reverbShelfPrevInput1 = 0.0;\n\t\tthis.reverbShelfPrevInput2 = 0.0;\n\t\tthis.reverbShelfPrevInput3 = 0.0;\n\t}\n\n\tcompute(synth: Synth, instrument: Instrument, effect: Effect, instrumentState: InstrumentState, samplesPerTick: number, roundedSamplesPerTick: number, tone: Tone | null, channelIndex: number, instrumentIndex: number, envelopeStarts: number[], envelopeEnds: number[]): void {\n\t\tconst samplesPerSecond = synth.samplesPerSecond;\n\n\t\tthis.type = effect.type;\n\n\t\tconst usesGranular = effect.type == EffectType.granular;\n\t\tconst usesRingModulation = effect.type == EffectType.ringModulation;\n\t\tconst usesDistortion = effect.type == EffectType.distortion;\n\t\tconst usesBitcrusher = effect.type == EffectType.bitcrusher;\n\t\tconst usesGain = effect.type == EffectType.gain;\n\t\tconst usesPanning = effect.type == EffectType.panning;\n\t\tconst usesFlanger = effect.type == EffectType.flanger;\n\t\tconst usesChorus = effect.type == EffectType.chorus;\n\t\tconst usesEcho = effect.type == EffectType.echo;\n\t\tconst usesReverb = effect.type == EffectType.reverb;\n\t\tconst usesEQFilter = effect.type == EffectType.eqFilter;\n\n\t\tif (usesGranular) { //has to happen before buffer allocation\n\t\t\tthis.granularMaximumGrains = Math.pow(2, effect.grainAmounts * envelopeStarts[EnvelopeComputeIndex.grainAmount]);\n\t\t\tif (synth.isModActive(Config.modulators.dictionary[\"grain freq\"].index, channelIndex, instrumentIndex)) {\n\t\t\t\tthis.granularMaximumGrains = Math.pow(2, synth.getModValue(Config.modulators.dictionary[\"grain freq\"].index, channelIndex, instrumentIndex, false) * envelopeStarts[EnvelopeComputeIndex.grainAmount]);\n\t\t\t}\n\t\t\tthis.granularMaximumGrains == Math.floor(this.granularMaximumGrains);\n\t\t}\n\n\t\tthis.allocateNecessaryBuffers(synth, instrument, effect, samplesPerTick);\n\n\t\tif (usesGranular) {\n\t\t\tthis.granularMix = effect.granular / Config.granularRange;\n\t\t\tthis.computeGrains = true;\n\t\t\tlet granularMixEnd = this.granularMix;\n\t\t\tif (synth.isModActive(Config.modulators.dictionary[\"granular\"].index, channelIndex, instrumentIndex)) {\n\t\t\t\tthis.granularMix = synth.getModValue(Config.modulators.dictionary[\"granular\"].index, channelIndex, instrumentIndex, false) / Config.granularRange;\n\t\t\t\tgranularMixEnd = synth.getModValue(Config.modulators.dictionary[\"granular\"].index, channelIndex, instrumentIndex, true) / Config.granularRange;\n\t\t\t}\n\t\t\tthis.granularMix *= envelopeStarts[EnvelopeComputeIndex.granular];\n\t\t\tgranularMixEnd *= envelopeEnds[EnvelopeComputeIndex.granular];\n\t\t\tthis.granularMixDelta = (granularMixEnd - this.granularMix) / roundedSamplesPerTick;\n\t\t\tfor (let iterations = 0; iterations < Math.ceil(Math.random() * Math.random() * 10); iterations++) { //dirty weighting toward lower numbers\n\t\t\t\t//create a grain\n\t\t\t\tif (this.granularGrainsLength < this.granularMaximumGrains) {\n\t\t\t\t\tlet granularMinGrainSizeInMilliseconds = effect.grainSize;\n\t\t\t\t\tif (synth.isModActive(Config.modulators.dictionary[\"grain size\"].index, channelIndex, instrumentIndex)) {\n\t\t\t\t\t\tgranularMinGrainSizeInMilliseconds = synth.getModValue(Config.modulators.dictionary[\"grain size\"].index, channelIndex, instrumentIndex, false);\n\t\t\t\t\t}\n\t\t\t\t\tgranularMinGrainSizeInMilliseconds *= envelopeStarts[EnvelopeComputeIndex.grainSize];\n\t\t\t\t\tlet grainRange = effect.grainRange;\n\t\t\t\t\tif (synth.isModActive(Config.modulators.dictionary[\"grain range\"].index, channelIndex, instrumentIndex)) {\n\t\t\t\t\t\tgrainRange = synth.getModValue(Config.modulators.dictionary[\"grain range\"].index, channelIndex, instrumentIndex, false);\n\t\t\t\t\t}\n\t\t\t\t\tgrainRange *= envelopeStarts[EnvelopeComputeIndex.grainRange];\n\t\t\t\t\tconst granularMaxGrainSizeInMilliseconds = granularMinGrainSizeInMilliseconds + grainRange;\n\t\t\t\t\tconst granularGrainSizeInMilliseconds = granularMinGrainSizeInMilliseconds + (granularMaxGrainSizeInMilliseconds - granularMinGrainSizeInMilliseconds) * Math.random();\n\t\t\t\t\tconst granularGrainSizeInSeconds = granularGrainSizeInMilliseconds / 1000.0;\n\t\t\t\t\tconst granularGrainSizeInSamples = Math.floor(granularGrainSizeInSeconds * samplesPerSecond);\n\t\t\t\t\tconst granularDelayLineLength = this.granularDelayLineL!.length;\n\t\t\t\t\tconst grainIndex = this.granularGrainsLength;\n\n\t\t\t\t\tthis.granularGrainsLength++;\n\t\t\t\t\tconst grain = this.granularGrains[grainIndex];\n\t\t\t\t\tgrain.ageInSamples = 0;\n\t\t\t\t\tgrain.maxAgeInSamples = granularGrainSizeInSamples;\n\t\t\t\t\t// const minDelayTimeInMilliseconds = 2;\n\t\t\t\t\t// const minDelayTimeInSeconds = minDelayTimeInMilliseconds / 1000.0;\n\t\t\t\t\tconst minDelayTimeInSeconds = 0.02;\n\t\t\t\t\t// const maxDelayTimeInSeconds = this.granularMaximumDelayTimeInSeconds;\n\t\t\t\t\tconst maxDelayTimeInSeconds = 2.4;\n\t\t\t\t\tgrain.delayLinePosition = this.usesRandomGrainLocation ? (minDelayTimeInSeconds + (maxDelayTimeInSeconds - minDelayTimeInSeconds) * Math.random() * Math.random() * samplesPerSecond) % (granularDelayLineLength - 1) : minDelayTimeInSeconds; //dirty weighting toward lower numbers ; The clamp was clumping everything at the end, so I decided to use a modulo instead\n\t\t\t\t\tif (Config.granularEnvelopeType == GranularEnvelopeType.parabolic) {\n\t\t\t\t\t\tgrain.initializeParabolicEnvelope(grain.maxAgeInSamples, 1.0);\n\t\t\t\t\t} else if (Config.granularEnvelopeType == GranularEnvelopeType.raisedCosineBell) {\n\t\t\t\t\t\tgrain.initializeRCBEnvelope(grain.maxAgeInSamples, 1.0);\n\t\t\t\t\t}\n\t\t\t\t\t// if (this.usesRandomGrainLocation) {\n\t\t\t\t\tgrain.addDelay(Math.random() * samplesPerTick * 4); //offset when grains begin playing ; This is different from the above delay, which delays how far back in time the grain looks for samples\n\t\t\t\t\t// }\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (usesDistortion) {\n\t\t\tlet useDistortionStart = effect.distortion;\n\t\t\tlet useDistortionEnd = effect.distortion;\n\n\t\t\t// Check for distortion mods\n\t\t\tif (synth.isModActive(Config.modulators.dictionary[\"distortion\"].index, channelIndex, instrumentIndex)) {\n\t\t\t\tuseDistortionStart = synth.getModValue(Config.modulators.dictionary[\"distortion\"].index, channelIndex, instrumentIndex, false);\n\t\t\t\tuseDistortionEnd = synth.getModValue(Config.modulators.dictionary[\"distortion\"].index, channelIndex, instrumentIndex, true);\n\t\t\t}\n\n\t\t\tconst distortionSliderStart = Math.min(1.0, envelopeStarts[EnvelopeComputeIndex.distortion] * useDistortionStart / (Config.distortionRange - 1));\n\t\t\tconst distortionSliderEnd = Math.min(1.0, envelopeEnds[EnvelopeComputeIndex.distortion] * useDistortionEnd / (Config.distortionRange - 1));\n\t\t\tconst distortionStart = Math.pow(1.0 - 0.895 * (Math.pow(20.0, distortionSliderStart) - 1.0) / 19.0, 2.0);\n\t\t\tconst distortionEnd = Math.pow(1.0 - 0.895 * (Math.pow(20.0, distortionSliderEnd) - 1.0) / 19.0, 2.0);\n\t\t\tconst distortionDriveStart = (1.0 + 2.0 * distortionSliderStart) / Config.distortionBaseVolume;\n\t\t\tconst distortionDriveEnd = (1.0 + 2.0 * distortionSliderEnd) / Config.distortionBaseVolume;\n\t\t\tthis.distortion = distortionStart;\n\t\t\tthis.distortionDelta = (distortionEnd - distortionStart) / roundedSamplesPerTick;\n\t\t\tthis.distortionDrive = distortionDriveStart;\n\t\t\tthis.distortionDriveDelta = (distortionDriveEnd - distortionDriveStart) / roundedSamplesPerTick;\n\t\t}\n\n\t\tif (usesBitcrusher) {\n\t\t\tlet freqSettingStart = effect.bitcrusherFreq * Math.sqrt(envelopeStarts[EnvelopeComputeIndex.bitcrusherFrequency]);\n\t\t\tlet freqSettingEnd = effect.bitcrusherFreq * Math.sqrt(envelopeEnds[EnvelopeComputeIndex.bitcrusherFrequency]);\n\n\t\t\t// Check for freq crush mods\n\t\t\tif (synth.isModActive(Config.modulators.dictionary[\"freq crush\"].index, channelIndex, instrumentIndex)) {\n\t\t\t\tfreqSettingStart = synth.getModValue(Config.modulators.dictionary[\"freq crush\"].index, channelIndex, instrumentIndex, false) * Math.sqrt(envelopeStarts[EnvelopeComputeIndex.bitcrusherFrequency]);\n\t\t\t\tfreqSettingEnd = synth.getModValue(Config.modulators.dictionary[\"freq crush\"].index, channelIndex, instrumentIndex, true) * Math.sqrt(envelopeEnds[EnvelopeComputeIndex.bitcrusherFrequency]);\n\t\t\t}\n\n\t\t\tlet quantizationSettingStart = effect.bitcrusherQuantization * Math.sqrt(envelopeStarts[EnvelopeComputeIndex.bitcrusherQuantization]);\n\t\t\tlet quantizationSettingEnd = effect.bitcrusherQuantization * Math.sqrt(envelopeEnds[EnvelopeComputeIndex.bitcrusherQuantization]);\n\n\t\t\t// Check for bitcrush mods\n\t\t\tif (synth.isModActive(Config.modulators.dictionary[\"bit crush\"].index, channelIndex, instrumentIndex)) {\n\t\t\t\tquantizationSettingStart = synth.getModValue(Config.modulators.dictionary[\"bit crush\"].index, channelIndex, instrumentIndex, false) * Math.sqrt(envelopeStarts[EnvelopeComputeIndex.bitcrusherQuantization]);\n\t\t\t\tquantizationSettingEnd = synth.getModValue(Config.modulators.dictionary[\"bit crush\"].index, channelIndex, instrumentIndex, true) * Math.sqrt(envelopeEnds[EnvelopeComputeIndex.bitcrusherQuantization]);\n\t\t\t}\n\n\t\t\tconst basePitch = Config.keys[synth.song!.key].basePitch + (Config.pitchesPerOctave * synth.song!.octave); // TODO: What if there's a key change mid-song?\n\t\t\tconst freqStart = Instrument.frequencyFromPitch(basePitch + 60) * Math.pow(2.0, (Config.bitcrusherFreqRange - 1 - freqSettingStart) * Config.bitcrusherOctaveStep);\n\t\t\tconst freqEnd = Instrument.frequencyFromPitch(basePitch + 60) * Math.pow(2.0, (Config.bitcrusherFreqRange - 1 - freqSettingEnd) * Config.bitcrusherOctaveStep);\n\t\t\tconst phaseDeltaStart = Math.min(1.0, freqStart / samplesPerSecond);\n\t\t\tconst phaseDeltaEnd = Math.min(1.0, freqEnd / samplesPerSecond);\n\t\t\tthis.bitcrusherPhaseDelta = phaseDeltaStart;\n\t\t\tthis.bitcrusherPhaseDeltaScale = Math.pow(phaseDeltaEnd / phaseDeltaStart, 1.0 / roundedSamplesPerTick);\n\n\t\t\tconst scaleStart = 2.0 * Config.bitcrusherBaseVolume * Math.pow(2.0, 1.0 - Math.pow(2.0, (Config.bitcrusherQuantizationRange - 1 - quantizationSettingStart) * 0.5));\n\t\t\tconst scaleEnd = 2.0 * Config.bitcrusherBaseVolume * Math.pow(2.0, 1.0 - Math.pow(2.0, (Config.bitcrusherQuantizationRange - 1 - quantizationSettingEnd) * 0.5));\n\t\t\tthis.bitcrusherScale = scaleStart;\n\t\t\tthis.bitcrusherScaleScale = Math.pow(scaleEnd / scaleStart, 1.0 / roundedSamplesPerTick);\n\n\t\t\tconst foldLevelStart = 2.0 * Config.bitcrusherBaseVolume * Math.pow(1.5, Config.bitcrusherQuantizationRange - 1 - quantizationSettingStart);\n\t\t\tconst foldLevelEnd = 2.0 * Config.bitcrusherBaseVolume * Math.pow(1.5, Config.bitcrusherQuantizationRange - 1 - quantizationSettingEnd);\n\t\t\tthis.bitcrusherFoldLevel = foldLevelStart;\n\t\t\tthis.bitcrusherFoldLevelScale = Math.pow(foldLevelEnd / foldLevelStart, 1.0 / roundedSamplesPerTick);\n\t\t}\n\n\t\tif (usesEQFilter) {\n\t\t\tlet eqFilterVolume = 1.0; //this.envelopeComputer.lowpassCutoffDecayVolumeCompensation;\n\t\t\tif (effect.eqFilterType) {\n\t\t\t\t// Simple EQ filter (old style). For analysis, using random filters from normal style since they are N/A in this context.\n\t\t\t\tconst eqFilterSettingsStart = effect.eqFilter;\n\t\t\t\tif (effect.eqSubFilters[1] == null)\n\t\t\t\t\teffect.eqSubFilters[1] = new FilterSettings();\n\t\t\t\tconst eqFilterSettingsEnd = effect.eqSubFilters[1];\n\n\t\t\t\t// Change location based on slider values\n\t\t\t\tlet startSimpleFreq = effect.eqFilterSimpleCut;\n\t\t\t\tlet startSimpleGain = effect.eqFilterSimplePeak;\n\t\t\t\tlet endSimpleFreq = effect.eqFilterSimpleCut;\n\t\t\t\tlet endSimpleGain = effect.eqFilterSimplePeak;\n\n\t\t\t\tlet filterChanges = false;\n\n\t\t\t\tif (synth.isModActive(Config.modulators.dictionary[\"eq filt cut\"].index, channelIndex, instrumentIndex)) {\n\t\t\t\t\tstartSimpleFreq = synth.getModValue(Config.modulators.dictionary[\"eq filt cut\"].index, channelIndex, instrumentIndex, false);\n\t\t\t\t\tendSimpleFreq = synth.getModValue(Config.modulators.dictionary[\"eq filt cut\"].index, channelIndex, instrumentIndex, true);\n\t\t\t\t\tfilterChanges = true;\n\t\t\t\t}\n\t\t\t\tif (synth.isModActive(Config.modulators.dictionary[\"eq filt peak\"].index, channelIndex, instrumentIndex)) {\n\t\t\t\t\tstartSimpleGain = synth.getModValue(Config.modulators.dictionary[\"eq filt peak\"].index, channelIndex, instrumentIndex, false);\n\t\t\t\t\tendSimpleGain = synth.getModValue(Config.modulators.dictionary[\"eq filt peak\"].index, channelIndex, instrumentIndex, true);\n\t\t\t\t\tfilterChanges = true;\n\t\t\t\t}\n\n\t\t\t\tlet startPoint: FilterControlPoint;\n\n\t\t\t\tif (filterChanges) {\n\t\t\t\t\teqFilterSettingsStart.convertLegacySettingsForSynth(startSimpleFreq, startSimpleGain);\n\t\t\t\t\teqFilterSettingsEnd.convertLegacySettingsForSynth(endSimpleFreq, endSimpleGain);\n\n\t\t\t\t\tstartPoint = eqFilterSettingsStart.controlPoints[0];\n\t\t\t\t\tlet endPoint = eqFilterSettingsEnd.controlPoints[0];\n\n\t\t\t\t\tstartPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, 1.0, 1.0);\n\t\t\t\t\tendPoint.toCoefficients(Synth.tempFilterEndCoefficients, samplesPerSecond, 1.0, 1.0);\n\n\t\t\t\t\tif (this.eqFiltersL.length < 1) this.eqFiltersL[0] = new DynamicBiquadFilter();\n\t\t\t\t\tif (this.eqFiltersR.length < 1) this.eqFiltersR[0] = new DynamicBiquadFilter();\n\t\t\t\t\tthis.eqFiltersL[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\n\t\t\t\t\tthis.eqFiltersR[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\n\t\t\t\t} else {\n\t\t\t\t\teqFilterSettingsStart.convertLegacySettingsForSynth(startSimpleFreq, startSimpleGain, true);\n\n\t\t\t\t\tstartPoint = eqFilterSettingsStart.controlPoints[0];\n\n\t\t\t\t\tstartPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, 1.0, 1.0);\n\n\t\t\t\t\tif (this.eqFiltersL.length < 1) this.eqFiltersL[0] = new DynamicBiquadFilter();\n\t\t\t\t\tif (this.eqFiltersR.length < 1) this.eqFiltersR[0] = new DynamicBiquadFilter();\n\t\t\t\t\tthis.eqFiltersL[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterStartCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\n\t\t\t\t\tthis.eqFiltersR[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterStartCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\n\t\t\t\t}\n\t\t\t\tthis.eqFilterCount = 1;\n\n\t\t\t\teqFilterVolume *= startPoint.getVolumeCompensationMult();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tconst eqFilterSettings = (effect.tmpEqFilterStart != null) ? effect.tmpEqFilterStart : effect.eqFilter;\n\t\t\t\t//const eqAllFreqsEnvelopeStart = envelopeStarts[InstrumentAutomationIndex.eqFilterAllFreqs];\n\t\t\t\t//const eqAllFreqsEnvelopeEnd = envelopeEnds[  InstrumentAutomationIndex.eqFilterAllFreqs];\n\t\t\t\tfor (let i = 0; i < eqFilterSettings.controlPointCount; i++) {\n\t\t\t\t\t//const eqFreqEnvelopeStart = envelopeStarts[InstrumentAutomationIndex.eqFilterFreq0 + i];\n\t\t\t\t\t//const eqFreqEnvelopeEnd = envelopeEnds[  InstrumentAutomationIndex.eqFilterFreq0 + i];\n\t\t\t\t\t//const eqPeakEnvelopeStart = envelopeStarts[InstrumentAutomationIndex.eqFilterGain0 + i];\n\t\t\t\t\t//const eqPeakEnvelopeEnd = envelopeEnds[  InstrumentAutomationIndex.eqFilterGain0 + i];\n\t\t\t\t\tlet startPoint = eqFilterSettings.controlPoints[i];\n\t\t\t\t\tlet endPoint = (effect.tmpEqFilterEnd != null && effect.tmpEqFilterEnd.controlPoints[i] != null) ? effect.tmpEqFilterEnd.controlPoints[i] : eqFilterSettings.controlPoints[i];\n\n\t\t\t\t\t// If switching dot type, do it all at once and do not try to interpolate since no valid interpolation exists.\n\t\t\t\t\tif (startPoint.type != endPoint.type) {\n\t\t\t\t\t\tstartPoint = endPoint;\n\t\t\t\t\t}\n\n\t\t\t\t\tstartPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, /*eqAllFreqsEnvelopeStart * eqFreqEnvelopeStart*/ 1.0, /*eqPeakEnvelopeStart*/ 1.0);\n\t\t\t\t\tendPoint.toCoefficients(Synth.tempFilterEndCoefficients, samplesPerSecond, /*eqAllFreqsEnvelopeEnd   * eqFreqEnvelopeEnd*/   1.0, /*eqPeakEnvelopeEnd*/   1.0);\n\t\t\t\t\tif (this.eqFiltersL.length <= i) this.eqFiltersL[i] = new DynamicBiquadFilter();\n\t\t\t\t\tif (this.eqFiltersR.length <= i) this.eqFiltersR[i] = new DynamicBiquadFilter();\n\t\t\t\t\tthis.eqFiltersL[i].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\n\t\t\t\t\tthis.eqFiltersR[i].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\n\t\t\t\t\teqFilterVolume *= startPoint.getVolumeCompensationMult();\n\n\t\t\t\t}\n\t\t\t\tthis.eqFilterCount = eqFilterSettings.controlPointCount;\n\t\t\t}\n\t\t\teqFilterVolume = Math.min(3.0, eqFilterVolume);\n\n\t\t\tlet eqFilterVolumeStart = eqFilterVolume;\n\t\t\tlet eqFilterVolumeEnd = eqFilterVolume;\n\n\t\t\tthis.eqFilterVolume = eqFilterVolumeStart;\n\t\t\tthis.eqFilterVolumeDelta = (eqFilterVolumeEnd - eqFilterVolumeStart) / roundedSamplesPerTick;\n\t\t}\n\n\t\tif (usesPanning) {\n\t\t\tthis.panningMode = effect.panMode;\n\n\t\t\tconst panEnvelopeStart = envelopeStarts[EnvelopeComputeIndex.panning] * 2.0 - 1.0;\n\t\t\tconst panEnvelopeEnd = envelopeEnds[EnvelopeComputeIndex.panning] * 2.0 - 1.0;\n\n\t\t\tlet usePanStart = effect.pan;\n\t\t\tlet usePanEnd = effect.pan;\n\t\t\t// Check for pan mods\n\t\t\tif (synth.isModActive(Config.modulators.dictionary[\"pan\"].index, channelIndex, instrumentIndex)) {\n\t\t\t\tusePanStart = synth.getModValue(Config.modulators.dictionary[\"pan\"].index, channelIndex, instrumentIndex, false);\n\t\t\t\tusePanEnd = synth.getModValue(Config.modulators.dictionary[\"pan\"].index, channelIndex, instrumentIndex, true);\n\t\t\t}\n\n\t\t\tlet panStart = Math.max(-1.0, Math.min(1.0, (usePanStart - Config.panCenter) / Config.panCenter * panEnvelopeStart));\n\t\t\tlet panEnd = Math.max(-1.0, Math.min(1.0, (usePanEnd - Config.panCenter) / Config.panCenter * panEnvelopeEnd));\n\n\t\t\tconst volumeStartL = Math.cos((1 + panStart) * Math.PI * 0.25) * 1.414;\n\t\t\tconst volumeStartR = Math.cos((1 - panStart) * Math.PI * 0.25) * 1.414;\n\t\t\tconst volumeEndL = Math.cos((1 + panEnd) * Math.PI * 0.25) * 1.414;\n\t\t\tconst volumeEndR = Math.cos((1 - panEnd) * Math.PI * 0.25) * 1.414;\n\t\t\tconst maxDelaySamples = samplesPerSecond * Config.panDelaySecondsMax;\n\n\t\t\tlet usePanDelayStart = effect.panDelay;\n\t\t\tlet usePanDelayEnd = effect.panDelay;\n\t\t\t// Check for pan delay mods\n\t\t\tif (synth.isModActive(Config.modulators.dictionary[\"pan delay\"].index, channelIndex, instrumentIndex)) {\n\t\t\t\tusePanDelayStart = synth.getModValue(Config.modulators.dictionary[\"pan delay\"].index, channelIndex, instrumentIndex, false);\n\t\t\t\tusePanDelayEnd = synth.getModValue(Config.modulators.dictionary[\"pan delay\"].index, channelIndex, instrumentIndex, true);\n\t\t\t}\n\n\t\t\tconst delayStart = panStart * usePanDelayStart * maxDelaySamples / 10;\n\t\t\tconst delayEnd = panEnd * usePanDelayEnd * maxDelaySamples / 10;\n\t\t\tconst delayStartL = Math.max(0.0, delayStart);\n\t\t\tconst delayStartR = Math.max(0.0, -delayStart);\n\t\t\tconst delayEndL = Math.max(0.0, delayEnd);\n\t\t\tconst delayEndR = Math.max(0.0, -delayEnd);\n\n\t\t\tthis.panningVolumeL = volumeStartL;\n\t\t\tthis.panningVolumeR = volumeStartR;\n\t\t\tthis.panningVolumeDeltaL = (volumeEndL - volumeStartL) / roundedSamplesPerTick;\n\t\t\tthis.panningVolumeDeltaR = (volumeEndR - volumeStartR) / roundedSamplesPerTick;\n\t\t\tthis.panningOffsetL = this.panningDelayPos - delayStartL + synth.panningDelayBufferSize;\n\t\t\tthis.panningOffsetR = this.panningDelayPos - delayStartR + synth.panningDelayBufferSize;\n\t\t\tthis.panningOffsetDeltaL = (delayEndL - delayStartL) / roundedSamplesPerTick;\n\t\t\tthis.panningOffsetDeltaR = (delayEndR - delayStartR) / roundedSamplesPerTick;\n\t\t}\n\n\t\tif (usesGain) {\n\t\t\tconst gainEnvelopeStart = envelopeStarts[EnvelopeComputeIndex.gain];\n\t\t\tconst gainEnvelopeEnd = envelopeEnds[EnvelopeComputeIndex.gain];\n\n\t\t\tlet useGainStart = effect.gain;\n\t\t\tlet useGainEnd = effect.gain;\n\t\t\t// Check for pan mods\n\t\t\tif (synth.isModActive(Config.modulators.dictionary[\"gain\"].index, channelIndex, instrumentIndex)) {\n\t\t\t\tuseGainStart = synth.getModValue(Config.modulators.dictionary[\"gain\"].index, channelIndex, instrumentIndex, false);\n\t\t\t\tuseGainEnd = synth.getModValue(Config.modulators.dictionary[\"gain\"].index, channelIndex, instrumentIndex, true);\n\t\t\t}\n\n\t\t\tlet gainStart = Math.min(Config.gainRangeMult, gainEnvelopeStart * useGainStart / (Config.volumeRange / 2 * Config.gainRangeMult)) * Config.gainRangeMult;\n\t\t\tlet gainEnd = Math.min(Config.gainRangeMult, gainEnvelopeEnd * useGainEnd / (Config.volumeRange / 2 * Config.gainRangeMult)) * Config.gainRangeMult;\n\n\t\t\tthis.gain = gainStart;\n\t\t\tthis.gainDelta = (gainEnd - gainStart) / roundedSamplesPerTick;\n\t\t}\n\n\t\tif (usesChorus) {\n\t\t\tconst chorusEnvelopeStart = envelopeStarts[EnvelopeComputeIndex.chorus];\n\t\t\tconst chorusEnvelopeEnd = envelopeEnds[EnvelopeComputeIndex.chorus];\n\t\t\tlet useChorusStart = effect.chorus;\n\t\t\tlet useChorusEnd = effect.chorus;\n\t\t\t// Check for chorus mods\n\t\t\tif (synth.isModActive(Config.modulators.dictionary[\"chorus\"].index, channelIndex, instrumentIndex)) {\n\t\t\t\tuseChorusStart = synth.getModValue(Config.modulators.dictionary[\"chorus\"].index, channelIndex, instrumentIndex, false);\n\t\t\t\tuseChorusEnd = synth.getModValue(Config.modulators.dictionary[\"chorus\"].index, channelIndex, instrumentIndex, true);\n\t\t\t}\n\n\t\t\tlet chorusStart = Math.min(1.0, chorusEnvelopeStart * useChorusStart / (Config.chorusRange - 1));\n\t\t\tlet chorusEnd = Math.min(1.0, chorusEnvelopeEnd * useChorusEnd / (Config.chorusRange - 1));\n\t\t\tchorusStart = chorusStart * 0.6 + (Math.pow(chorusStart, 6.0)) * 0.4;\n\t\t\tchorusEnd = chorusEnd * 0.6 + (Math.pow(chorusEnd, 6.0)) * 0.4;\n\t\t\tconst chorusCombinedMultStart = 1.0 / Math.sqrt(3.0 * chorusStart * chorusStart + 1.0);\n\t\t\tconst chorusCombinedMultEnd = 1.0 / Math.sqrt(3.0 * chorusEnd * chorusEnd + 1.0);\n\t\t\tthis.chorusVoiceMult = chorusStart;\n\t\t\tthis.chorusVoiceMultDelta = (chorusEnd - chorusStart) / roundedSamplesPerTick;\n\t\t\tthis.chorusCombinedMult = chorusCombinedMultStart;\n\t\t\tthis.chorusCombinedMultDelta = (chorusCombinedMultEnd - chorusCombinedMultStart) / roundedSamplesPerTick;\n\t\t}\n\n\t\tif (usesFlanger) {\n\t\t\tconst flangerEnvelopeStart = envelopeStarts[EnvelopeComputeIndex.flanger];\n\t\t\tconst flangerEnvelopeEnd = envelopeEnds[EnvelopeComputeIndex.flanger];\n\t\t\tlet useFlangerStart = effect.flanger;\n\t\t\tlet useFlangerEnd = effect.flanger;\n\t\t\tif (synth.isModActive(Config.modulators.dictionary[\"flanger\"].index, channelIndex, instrumentIndex)) {\n\t\t\t\tuseFlangerStart = synth.getModValue(Config.modulators.dictionary[\"flanger\"].index, channelIndex, instrumentIndex, false);\n\t\t\t\tuseFlangerEnd = synth.getModValue(Config.modulators.dictionary[\"flanger\"].index, channelIndex, instrumentIndex, true);\n\t\t\t}\n\t\t\tlet flangerStart = Math.min(1.0, flangerEnvelopeStart * useFlangerStart / (Config.flangerRange - 1));\n\t\t\tlet flangerEnd = Math.min(1.0, flangerEnvelopeEnd * useFlangerEnd / (Config.flangerRange - 1));\n\n\t\t\tconst flangerSpeedEnvelopeStart = envelopeStarts[EnvelopeComputeIndex.flangerSpeed];\n\t\t\tconst flangerSpeedEnvelopeEnd = envelopeEnds[EnvelopeComputeIndex.flangerSpeed];\n\t\t\tlet useFlangerSpeedStart = effect.flangerSpeed;\n\t\t\tlet useFlangerSpeedEnd = effect.flangerSpeed;\n\t\t\tif (synth.isModActive(Config.modulators.dictionary[\"flanger speed\"].index, channelIndex, instrumentIndex)) {\n\t\t\t\tuseFlangerSpeedStart = synth.getModValue(Config.modulators.dictionary[\"flanger speed\"].index, channelIndex, instrumentIndex, false);\n\t\t\t\tuseFlangerSpeedEnd = synth.getModValue(Config.modulators.dictionary[\"flanger speed\"].index, channelIndex, instrumentIndex, true);\n\t\t\t}\n\t\t\tlet flangerSpeedStart = flangerSpeedEnvelopeStart * useFlangerSpeedStart + 2;\n\t\t\tlet flangerSpeedEnd = flangerSpeedEnvelopeEnd * useFlangerSpeedEnd + 2;\n\n\t\t\tconst flangerDepthEnvelopeStart = envelopeStarts[EnvelopeComputeIndex.flangerDepth];\n\t\t\tconst flangerDepthEnvelopeEnd = envelopeEnds[EnvelopeComputeIndex.flangerDepth];\n\t\t\tlet useFlangerDepthStart = effect.flangerDepth;\n\t\t\tlet useFlangerDepthEnd = effect.flangerDepth;\n\t\t\tif (synth.isModActive(Config.modulators.dictionary[\"flanger depth\"].index, channelIndex, instrumentIndex)) {\n\t\t\t\tuseFlangerDepthStart = synth.getModValue(Config.modulators.dictionary[\"flanger depth\"].index, channelIndex, instrumentIndex, false);\n\t\t\t\tuseFlangerDepthEnd = synth.getModValue(Config.modulators.dictionary[\"flanger depth\"].index, channelIndex, instrumentIndex, true);\n\t\t\t}\n\t\t\tlet flangerDepthStart = flangerDepthEnvelopeStart * useFlangerDepthStart * 2 + 2;\n\t\t\tlet flangerDepthEnd = flangerDepthEnvelopeEnd * useFlangerDepthEnd * 2 + 2;\n\n\t\t\tconst flangerFeedbackEnvelopeStart = envelopeStarts[EnvelopeComputeIndex.flangerFeedback];\n\t\t\tconst flangerFeedbackEnvelopeEnd = envelopeEnds[EnvelopeComputeIndex.flangerFeedback];\n\t\t\tlet useFlangerFeedbackStart = effect.flangerFeedback;\n\t\t\tlet useFlangerFeedbackEnd = effect.flangerFeedback;\n\t\t\tif (synth.isModActive(Config.modulators.dictionary[\"flanger feedback\"].index, channelIndex, instrumentIndex)) {\n\t\t\t\tuseFlangerFeedbackStart = synth.getModValue(Config.modulators.dictionary[\"flanger feedback\"].index, channelIndex, instrumentIndex, false);\n\t\t\t\tuseFlangerFeedbackEnd = synth.getModValue(Config.modulators.dictionary[\"flanger feedback\"].index, channelIndex, instrumentIndex, true);\n\t\t\t}\n\t\t\tlet flangerFeedbackStart = flangerFeedbackEnvelopeStart * useFlangerFeedbackStart * 1.5;\n\t\t\tlet flangerFeedbackEnd = flangerFeedbackEnvelopeEnd * useFlangerFeedbackEnd * 1.5;\n\n\t\t\tthis.flanger = flangerStart;\n\t\t\tthis.flangerDelta = (flangerEnd - flangerStart) / roundedSamplesPerTick;\n\t\t\tthis.flangerSpeed = flangerSpeedStart;\n\t\t\tthis.flangerSpeedDelta = (flangerSpeedEnd - flangerSpeedStart) / roundedSamplesPerTick;\n\t\t\tthis.flangerDepth = flangerDepthStart;\n\t\t\tthis.flangerDepthDelta = (flangerDepthEnd - flangerDepthStart) / roundedSamplesPerTick;\n\t\t\tthis.flangerFeedback = (Math.sqrt(flangerFeedbackStart) / Math.sqrt(Config.flangerFeedbackRange));\n\t\t\tthis.flangerFeedbackDelta = ((Math.sqrt(flangerFeedbackEnd) / Math.sqrt(Config.flangerFeedbackRange)) - (Math.sqrt(flangerFeedbackStart) / Math.sqrt(Config.flangerFeedbackRange))) / roundedSamplesPerTick;\n\t\t}\n\n\t\tif (usesRingModulation) {\n\t\t\tlet useRingModStart = effect.ringModulation;\n\t\t\tlet useRingModEnd = effect.ringModulation;\n\n\t\t\tlet useRingModEnvelopeStart = envelopeStarts[EnvelopeComputeIndex.ringModulation];\n\t\t\tlet useRingModEnvelopeEnd = envelopeEnds[EnvelopeComputeIndex.ringModulation];\n\n\t\t\tlet useRingModHzStart = Math.min(1.0, effect.ringModulationHz / (Config.ringModHzRange - 1));\n\t\t\tlet useRingModHzEnd = Math.min(1.0, effect.ringModulationHz / (Config.ringModHzRange - 1));\n\t\t\tlet useRingModHzEnvelopeStart = envelopeStarts[EnvelopeComputeIndex.ringModulationHz];\n\t\t\tlet useRingModHzEnvelopeEnd = envelopeEnds[EnvelopeComputeIndex.ringModulationHz];\n\n\n\t\t\tif (synth.isModActive(Config.modulators.dictionary[\"ring modulation\"].index, channelIndex, instrumentIndex)) {\n\t\t\t\tuseRingModStart = (synth.getModValue(Config.modulators.dictionary[\"ring modulation\"].index, channelIndex, instrumentIndex, false));\n\t\t\t\tuseRingModEnd = (synth.getModValue(Config.modulators.dictionary[\"ring modulation\"].index, channelIndex, instrumentIndex, true));\n\t\t\t}\n\t\t\tif (synth.isModActive(Config.modulators.dictionary[\"ring mod hertz\"].index, channelIndex, instrumentIndex)) {\n\t\t\t\tuseRingModHzStart = Math.min(1.0, Math.max(0.0, (synth.getModValue(Config.modulators.dictionary[\"ring mod hertz\"].index, channelIndex, instrumentIndex, false)) / (Config.ringModHzRange - 1)));\n\t\t\t\tuseRingModHzEnd = Math.min(1.0, Math.max(0.0, (synth.getModValue(Config.modulators.dictionary[\"ring mod hertz\"].index, channelIndex, instrumentIndex, false)) / (Config.ringModHzRange - 1)));\n\t\t\t}\n\t\t\tuseRingModHzStart *= useRingModHzEnvelopeStart;\n\t\t\tuseRingModHzEnd *= useRingModHzEnvelopeEnd;\n\t\t\tlet ringModStart = Math.min(1.0, (useRingModStart * useRingModEnvelopeStart) / (Config.ringModRange - 1));\n\t\t\tlet ringModEnd = Math.min(1.0, (useRingModEnd * useRingModEnvelopeEnd) / (Config.ringModRange - 1));\n\n\t\t\tthis.ringModMix = ringModStart;\n\t\t\tthis.ringModMixDelta = (ringModEnd - ringModStart) / roundedSamplesPerTick;\n\n\t\t\tthis.ringModHzOffset = effect.ringModHzOffset;\n\n\t\t\tlet ringModPhaseDeltaStart = (Math.max(0, calculateRingModHertz(useRingModHzStart))) / synth.samplesPerSecond;\n\t\t\tlet ringModPhaseDeltaEnd = (Math.max(0, calculateRingModHertz(useRingModHzEnd))) / synth.samplesPerSecond;\n\n\t\t\tthis.ringModMixFadeDelta = 0;\n\t\t\tif (this.ringModMixFade < 0) this.ringModMixFade = 0;\n\t\t\tif (ringModPhaseDeltaStart <= 0 && ringModPhaseDeltaEnd <= 0 && this.ringModMixFade != 0) {\n\t\t\t\tthis.ringModMixFadeDelta = this.ringModMixFade / -10;\n\t\t\t} else if (ringModPhaseDeltaStart > 0 && ringModPhaseDeltaEnd > 0) {\n\t\t\t\tthis.ringModMixFade = 1.0;\n\t\t\t}\n\n\t\t\tthis.ringModPhaseDelta = ringModPhaseDeltaStart;\n\t\t\tthis.ringModPhaseDeltaScale = ringModPhaseDeltaStart == 0 ? 1 : Math.pow(ringModPhaseDeltaEnd / ringModPhaseDeltaStart, 1.0 / roundedSamplesPerTick);\n\n\t\t\tthis.ringModWaveformIndex = effect.ringModWaveformIndex;\n\t\t\tthis.ringModPulseWidth = effect.ringModPulseWidth;\n\n\t\t}\n\n\t\tlet maxEchoMult = 0.0;\n\t\tlet averageEchoDelaySeconds = 0.0;\n\n\t\tif (usesEcho) {\n\t\t\tconst echoSustainEnvelopeStart = envelopeStarts[EnvelopeComputeIndex.echoSustain];\n\t\t\tconst echoSustainEnvelopeEnd = envelopeEnds[EnvelopeComputeIndex.echoSustain];\n\t\t\tlet useEchoSustainStart = effect.echoSustain;\n\t\t\tlet useEchoSustainEnd = effect.echoSustain;\n\t\t\t// Check for echo mods\n\t\t\tif (synth.isModActive(Config.modulators.dictionary[\"echo\"].index, channelIndex, instrumentIndex)) {\n\t\t\t\tuseEchoSustainStart = Math.max(0.0, synth.getModValue(Config.modulators.dictionary[\"echo\"].index, channelIndex, instrumentIndex, false));\n\t\t\t\tuseEchoSustainEnd = Math.max(0.0, synth.getModValue(Config.modulators.dictionary[\"echo\"].index, channelIndex, instrumentIndex, true));\n\t\t\t}\n\t\t\tconst echoMultStart = Math.min(1.0, Math.pow(echoSustainEnvelopeStart * useEchoSustainStart / Config.echoSustainRange, 1.1)) * 0.9;\n\t\t\tconst echoMultEnd = Math.min(1.0, Math.pow(echoSustainEnvelopeEnd * useEchoSustainEnd / Config.echoSustainRange, 1.1)) * 0.9;\n\t\t\tthis.echoMult = echoMultStart;\n\t\t\tthis.echoMultDelta = Math.max(0.0, (echoMultEnd - echoMultStart) / roundedSamplesPerTick);\n\t\t\tmaxEchoMult = Math.max(echoMultStart, echoMultEnd);\n\n\t\t\t// TODO: After computing a tick's settings once for multiple run lengths (which is\n\t\t\t// good for audio worklet threads), compute the echo delay envelopes at tick (or\n\t\t\t// part) boundaries to interpolate between two delay taps.\n\t\t\tconst echoDelayEnvelopeStart = envelopeStarts[EnvelopeComputeIndex.echoDelay];\n\t\t\tconst echoDelayEnvelopeEnd = envelopeEnds[EnvelopeComputeIndex.echoDelay];\n\t\t\tlet useEchoDelayStart = effect.echoDelay * echoDelayEnvelopeStart;\n\t\t\tlet useEchoDelayEnd = effect.echoDelay * echoDelayEnvelopeEnd;\n\t\t\t// let ignoreTicks = false;\n\t\t\t// Check for echo delay mods\n\t\t\tif (synth.isModActive(Config.modulators.dictionary[\"echo delay\"].index, channelIndex, instrumentIndex)) {\n\t\t\t\tuseEchoDelayStart = synth.getModValue(Config.modulators.dictionary[\"echo delay\"].index, channelIndex, instrumentIndex, false) * echoDelayEnvelopeStart;\n\t\t\t\tuseEchoDelayEnd = synth.getModValue(Config.modulators.dictionary[\"echo delay\"].index, channelIndex, instrumentIndex, true) * echoDelayEnvelopeEnd;\n\t\t\t\t// ignoreTicks = true;\n\t\t\t\t// this.allocateEchoBuffers(samplesPerTick, Math.max(useEchoDelayStart,useEchoDelayEnd)); //update buffer size for modulation / envelopes\n\t\t\t}\n\t\t\tconst tmpEchoDelayOffsetStart = /*ignoreTicks ? (useEchoDelayStart + 1) * Config.echoDelayStepTicks * samplesPerTick : */Math.round((useEchoDelayStart + 1) * Config.echoDelayStepTicks * samplesPerTick);\n\t\t\tconst tmpEchoDelayOffsetEnd = /*ignoreTicks ? (useEchoDelayEnd + 1) * Config.echoDelayStepTicks * samplesPerTick : */Math.round((useEchoDelayEnd + 1) * Config.echoDelayStepTicks * samplesPerTick);\n\t\t\tif (this.echoDelayOffsetEnd != null/* && !ignoreTicks*/) {\n\t\t\t\tthis.echoDelayOffsetStart = this.echoDelayOffsetEnd;\n\t\t\t} else {\n\t\t\t\tthis.echoDelayOffsetStart = tmpEchoDelayOffsetStart;\n\t\t\t}\n\n\t\t\tthis.echoDelayOffsetEnd = tmpEchoDelayOffsetEnd;\n\t\t\taverageEchoDelaySeconds = (this.echoDelayOffsetStart + this.echoDelayOffsetEnd) * 0.5 / samplesPerSecond;\n\n\t\t\tthis.echoDelayOffsetRatio = 0.0;\n\t\t\tthis.echoDelayOffsetRatioDelta = 1.0 / roundedSamplesPerTick;\n\n\t\t\tthis.echoPingPong = ((effect.echoPingPong / Config.panMax) - 0.5) * 2;\n\t\t\t//const echoPingPongEnd\n\n\t\t\tconst shelfRadians = 2.0 * Math.PI * Config.echoShelfHz / synth.samplesPerSecond;\n\t\t\tSynth.tempFilterStartCoefficients.highShelf1stOrder(shelfRadians, Config.echoShelfGain);\n\t\t\tthis.echoShelfA1 = Synth.tempFilterStartCoefficients.a[1];\n\t\t\tthis.echoShelfB0 = Synth.tempFilterStartCoefficients.b[0];\n\t\t\tthis.echoShelfB1 = Synth.tempFilterStartCoefficients.b[1];\n\t\t}\n\n\t\tlet maxReverbMult = 0.0;\n\n\t\tif (usesReverb) {\n\t\t\tconst reverbEnvelopeStart = envelopeStarts[EnvelopeComputeIndex.reverb];\n\t\t\tconst reverbEnvelopeEnd = envelopeEnds[EnvelopeComputeIndex.reverb];\n\n\t\t\tlet useReverbStart = effect.reverb;\n\t\t\tlet useReverbEnd = effect.reverb;\n\n\t\t\t// Check for mod reverb, instrument level\n\t\t\tif (synth.isModActive(Config.modulators.dictionary[\"reverb\"].index, channelIndex, instrumentIndex)) {\n\t\t\t\tuseReverbStart = synth.getModValue(Config.modulators.dictionary[\"reverb\"].index, channelIndex, instrumentIndex, false);\n\t\t\t\tuseReverbEnd = synth.getModValue(Config.modulators.dictionary[\"reverb\"].index, channelIndex, instrumentIndex, true);\n\t\t\t}\n\t\t\t// Check for mod reverb, song scalar\n\t\t\tif (synth.isModActive(Config.modulators.dictionary[\"song reverb\"].index, channelIndex, instrumentIndex)) {\n\t\t\t\tuseReverbStart *= (synth.getModValue(Config.modulators.dictionary[\"song reverb\"].index, undefined, undefined, false) - Config.modulators.dictionary[\"song reverb\"].convertRealFactor) / Config.reverbRange;\n\t\t\t\tuseReverbEnd *= (synth.getModValue(Config.modulators.dictionary[\"song reverb\"].index, undefined, undefined, true) - Config.modulators.dictionary[\"song reverb\"].convertRealFactor) / Config.reverbRange;\n\t\t\t}\n\n\t\t\tconst reverbStart = Math.min(1.0, Math.pow(reverbEnvelopeStart * useReverbStart / Config.reverbRange, 0.667)) * 0.425;\n\t\t\tconst reverbEnd = Math.min(1.0, Math.pow(reverbEnvelopeEnd * useReverbEnd / Config.reverbRange, 0.667)) * 0.425;\n\n\t\t\tthis.reverbMult = reverbStart;\n\t\t\tthis.reverbMultDelta = (reverbEnd - reverbStart) / roundedSamplesPerTick;\n\t\t\tmaxReverbMult = Math.max(reverbStart, reverbEnd);\n\n\t\t\tconst shelfRadians = 2.0 * Math.PI * Config.reverbShelfHz / synth.samplesPerSecond;\n\t\t\tSynth.tempFilterStartCoefficients.highShelf1stOrder(shelfRadians, Config.reverbShelfGain);\n\t\t\tthis.reverbShelfA1 = Synth.tempFilterStartCoefficients.a[1];\n\t\t\tthis.reverbShelfB0 = Synth.tempFilterStartCoefficients.b[0];\n\t\t\tthis.reverbShelfB1 = Synth.tempFilterStartCoefficients.b[1];\n\t\t}\n\n\t\tif (!instrumentState.tonesAddedInThisTick && !instrumentState.flushingDelayLines) {\n\t\t\tconst attenuationThreshold = 1.0 / 256.0; // when the delay line signal has attenuated this much, it should be inaudible and should be flushed to zero.\n\t\t\tconst halfLifeMult = -Math.log2(attenuationThreshold);\n\n\t\t\tif (usesChorus) {\n\t\t\t\tinstrumentState.delayDuration += Config.chorusMaxDelay;\n\t\t\t}\n\n\t\t\tif (usesFlanger) {\n\t\t\t\tinstrumentState.delayDuration += Config.flangerMaxDelay;\n\t\t\t}\n\n\t\t\tif (usesEcho) {\n\t\t\t\tconst attenuationPerSecond = Math.pow(maxEchoMult, 1.0 / averageEchoDelaySeconds);\n\t\t\t\tconst halfLife = -1.0 / Math.log2(attenuationPerSecond);\n\t\t\t\tconst echoDuration = halfLife * halfLifeMult;\n\t\t\t\tinstrumentState.delayDuration += echoDuration;\n\t\t\t}\n\n\t\t\tif (usesReverb) {\n\t\t\t\tconst averageMult = maxReverbMult * 2.0;\n\t\t\t\tconst averageReverbDelaySeconds = (Config.reverbDelayBufferSize / 4.0) / samplesPerSecond;\n\t\t\t\tconst attenuationPerSecond = Math.pow(averageMult, 1.0 / averageReverbDelaySeconds);\n\t\t\t\tconst halfLife = -1.0 / Math.log2(attenuationPerSecond);\n\t\t\t\tconst reverbDuration = halfLife * halfLifeMult;\n\t\t\t\tinstrumentState.delayDuration += reverbDuration;\n\t\t\t}\n\n\t\t\tif (usesGranular) {\n\t\t\t\tthis.computeGrains = false;\n\t\t\t}\n\t\t} else {\n\t\t\t// Flushing delay lines to zero since the signal has mostly dissipated.\n\t\t\t//eqFilterVolumeStart = 0.0;\n\t\t\t//eqFilterVolumeEnd = 0.0;\n\n\t\t\tif (usesChorus) instrumentState.totalDelaySamples += synth.chorusDelayBufferSize;\n\t\t\tif (usesFlanger) instrumentState.totalDelaySamples += synth.flangerDelayBufferSize;\n\t\t\tif (usesEcho) instrumentState.totalDelaySamples += this.echoDelayLineL!.length;\n\t\t\tif (usesReverb) instrumentState.totalDelaySamples += Config.reverbDelayBufferSize;\n\t\t\tif (usesGranular) instrumentState.totalDelaySamples += this.granularMaximumDelayTimeInSeconds;\n\t\t}\n\t}\n}\n", "// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\n// interface shared by number[], Float32Array, and other typed arrays in JavaScript.\ninterface NumberArray {\n\tlength: number;\n\t[index: number]: number;\n}\n\n// A basic FFT operation scales the overall magnitude of elements by the\n// square root of the length of the array, \u221AN. Performing a forward FFT and\n// then an inverse FFT results in the original array, but multiplied by N.\n// This helper function can be used to compensate for that. \nexport function scaleElementsByFactor(array: NumberArray, factor: number): void {\n\tfor (let i = 0; i < array.length; i++) {\n\t\tarray[i] *= factor;\n\t}\n}\n\nfunction isPowerOf2(n: number): boolean {\n\treturn !!n && !(n & (n - 1));\n}\n\nfunction countBits(n: number): number {\n\tif (!isPowerOf2(n)) throw new Error(\"FFT array length must be a power of 2.\");\n\treturn Math.round(Math.log(n) / Math.log(2));\n}\n\n// Rearranges the elements of the array, swapping the element at an index\n// with an element at an index that is the bitwise reverse of the first\n// index in base 2. Useful for computing the FFT.\nfunction reverseIndexBits(array: NumberArray, fullArrayLength: number): void {\n\tconst bitCount = countBits(fullArrayLength);\n\tif (bitCount > 16) throw new Error(\"FFT array length must not be greater than 2^16.\");\n\tconst finalShift = 16 - bitCount;\n\tfor (let i = 0; i < fullArrayLength; i++) {\n\t\t// Dear Javascript: Please support bit order reversal intrinsics. Thanks! :D\n\t\tlet j: number;\n\t\tj = ((i & 0xaaaa) >> 1) | ((i & 0x5555) << 1);\n\t\tj = ((j & 0xcccc) >> 2) | ((j & 0x3333) << 2);\n\t\tj = ((j & 0xf0f0) >> 4) | ((j & 0x0f0f) << 4);\n\t\t\tj = ((j           >> 8) | ((j &   0xff) << 8)) >> finalShift;\n\t\tif (j > i) {\n\t\t\tlet temp = array[i];\n\t\t\tarray[i] = array[j];\n\t\t\tarray[j] = temp;\n\t\t}\n\t}\n}\n\n// Provided for educational purposes. Easier to read than\n// fastFourierTransform(), but computes the same result.\n// Takes two parallel arrays representing the real and imaginary elements,\n// respectively, and returns an array containing two new arrays, which\n// contain the complex result of the transform.\nexport function discreteFourierTransform(realArray: NumberArray, imagArray: NumberArray): number[][] {\n\tconst fullArrayLength = realArray.length;\n\tif (fullArrayLength != imagArray.length) throw new Error(\"FFT arrays must be the same length.\");\n\tconst realOut: number[] = [];\n\tconst imagOut: number[] = [];\n\tfor (let i = 0; i < fullArrayLength; i++) {\n\t\trealOut[i] = 0.0;\n\t\timagOut[i] = 0.0;\n\t\tfor (let j = 0; j < fullArrayLength; j++) {\n\t\t\tconst radians = -6.2831853 * j * i / fullArrayLength;\n\t\t\tconst c = Math.cos(radians);\n\t\t\tconst s = Math.sin(radians);\n\t\t\trealOut[i] += realArray[j] * c - imagArray[j] * s;\n\t\t\timagOut[i] += realArray[j] * s + imagArray[j] * c;\n\t\t}\n\t}\n\treturn [realOut, imagOut];\n}\n\n// Performs a Fourier transform in O(N log(N)) operations. Overwrites the\n// input real and imaginary arrays. Can be used for both forward and inverse\n// transforms: swap the order of the arguments for the inverse.\nexport function fastFourierTransform(realArray: NumberArray, imagArray: NumberArray): void {\n\tconst fullArrayLength = realArray.length;\n\tif (!isPowerOf2(fullArrayLength)) throw new Error(\"FFT array length must be a power of 2.\");\n\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\n\tif (fullArrayLength != imagArray.length) throw new Error(\"FFT arrays must be the same length.\");\n\t\t\n\treverseIndexBits(realArray, fullArrayLength);\n\treverseIndexBits(imagArray, fullArrayLength);\n\t\t\n\t// First two passes, with strides of 2 and 4, can be combined and optimized.\n\tfor (let startIndex = 0; startIndex < fullArrayLength; startIndex += 4) {\n\t\tconst startIndex1 = startIndex + 1;\n\t\tconst startIndex2 = startIndex + 2;\n\t\tconst startIndex3 = startIndex + 3;\n\t\t\tconst real0 = realArray[startIndex ];\n\t\tconst real1 = realArray[startIndex1];\n\t\tconst real2 = realArray[startIndex2];\n\t\tconst real3 = realArray[startIndex3];\n\t\t\tconst imag0 = imagArray[startIndex ];\n\t\tconst imag1 = imagArray[startIndex1];\n\t\tconst imag2 = imagArray[startIndex2];\n\t\tconst imag3 = imagArray[startIndex3];\n\t\tconst realTemp0 = real0 + real1;\n\t\tconst realTemp1 = real0 - real1;\n\t\tconst realTemp2 = real2 + real3;\n\t\tconst realTemp3 = real2 - real3;\n\t\tconst imagTemp0 = imag0 + imag1;\n\t\tconst imagTemp1 = imag0 - imag1;\n\t\tconst imagTemp2 = imag2 + imag3;\n\t\tconst imagTemp3 = imag2 - imag3;\n\t\t\trealArray[startIndex ] = realTemp0 + realTemp2;\n\t\trealArray[startIndex1] = realTemp1 + imagTemp3;\n\t\trealArray[startIndex2] = realTemp0 - realTemp2;\n\t\trealArray[startIndex3] = realTemp1 - imagTemp3;\n\t\t\timagArray[startIndex ] = imagTemp0 + imagTemp2;\n\t\timagArray[startIndex1] = imagTemp1 - realTemp3;\n\t\timagArray[startIndex2] = imagTemp0 - imagTemp2;\n\t\timagArray[startIndex3] = imagTemp1 + realTemp3;\n\t}\n\t\t\n\tfor (let stride = 8; stride <= fullArrayLength; stride += stride) {\n\t\tconst halfLength = stride >>> 1;\n\t\tconst radiansIncrement = Math.PI * 2.0 / stride;\n\t\tconst cosIncrement = Math.cos(radiansIncrement);\n\t\tconst sinIncrement = Math.sin(radiansIncrement);\n\t\tconst oscillatorMultiplier = 2.0 * cosIncrement;\n\t\tfor (let startIndex = 0; startIndex < fullArrayLength; startIndex += stride) {\n\t\t\tlet c = 1.0;\n\t\t\tlet s = 0.0;\n\t\t\tlet cPrev = cosIncrement;\n\t\t\tlet sPrev = sinIncrement;\n\t\t\tconst secondHalf = startIndex + halfLength;\n\t\t\tfor (let i = startIndex; i < secondHalf; i++) {\n\t\t\t\tconst j = i + halfLength;\n\t\t\t\tconst real0 = realArray[i];\n\t\t\t\tconst imag0 = imagArray[i];\n\t\t\t\tconst real1 = realArray[j] * c - imagArray[j] * s;\n\t\t\t\tconst imag1 = realArray[j] * s + imagArray[j] * c;\n\t\t\t\trealArray[i] = real0 + real1;\n\t\t\t\timagArray[i] = imag0 + imag1;\n\t\t\t\trealArray[j] = real0 - real1;\n\t\t\t\timagArray[j] = imag0 - imag1;\n\t\t\t\tconst cTemp = oscillatorMultiplier * c - cPrev;\n\t\t\t\tconst sTemp = oscillatorMultiplier * s - sPrev;\n\t\t\t\tcPrev = c;\n\t\t\t\tsPrev = s;\n\t\t\t\tc = cTemp;\n\t\t\t\ts = sTemp;\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Computes the Fourier transform from an array of real-valued time-domain\n// samples. The output is specially formatted for space efficieny: elements\n// 0 through N/2 represent cosine wave amplitudes in ascending frequency,\n// and elements N/2+1 through N-1 represent sine wave amplitudes in\n// descending frequency. Overwrites the input array.\nexport function forwardRealFourierTransform(array: NumberArray): void {\n\tconst fullArrayLength = array.length;\n\tconst totalPasses = countBits(fullArrayLength);\n\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\n\t\t\n\treverseIndexBits(array, fullArrayLength);\n\t\t\n\t// First and second pass.\n\tfor (let index = 0; index < fullArrayLength; index += 4) {\n\t\tconst index1 = index + 1;\n\t\tconst index2 = index + 2;\n\t\tconst index3 = index + 3;\n\t\t\tconst real0 = array[index ];\n\t\tconst real1 = array[index1];\n\t\tconst real2 = array[index2];\n\t\tconst real3 = array[index3];\n\t\t// no imaginary elements yet since the input is fully real.\n\t\tconst tempA = real0 + real1;\n\t\tconst tempB = real2 + real3;\n\t\t\tarray[index ] = tempA + tempB;\n\t\tarray[index1] = real0 - real1;\n\t\tarray[index2] = tempA - tempB;\n\t\tarray[index3] = real2 - real3;\n\t}\n\t\t\n\t// Third pass.\n\tconst sqrt2over2 = Math.sqrt(2.0) / 2.0;\n\tfor (let index = 0; index < fullArrayLength; index += 8) {\n\t\tconst index1 = index + 1;\n\t\tconst index3 = index + 3;\n\t\tconst index4 = index + 4;\n\t\tconst index5 = index + 5;\n\t\tconst index7 = index + 7;\n\t\t\tconst real0 = array[index ];\n\t\tconst real1 = array[index1];\n\t\tconst imag3 = array[index3];\n\t\tconst real4 = array[index4];\n\t\tconst real5 = array[index5];\n\t\tconst imag7 = array[index7];\n\t\tconst tempA = (real5 - imag7) * sqrt2over2;\n\t\tconst tempB = (real5 + imag7) * sqrt2over2;\n\t\t\tarray[index ] = real0 + real4;\n\t\tarray[index1] = real1 + tempA;\n\t\tarray[index3] = real1 - tempA;\n\t\tarray[index4] = real0 - real4;\n\t\tarray[index5] = tempB - imag3;\n\t\tarray[index7] = tempB + imag3;\n\t}\n\t\t\n\t// Handle remaining passes.\n\tfor (let pass = 3; pass < totalPasses; pass++) {\n\t\tconst subStride = 1 << pass;\n\t\tconst midSubStride = subStride >> 1;\n\t\tconst stride = subStride << 1;\n\t\tconst radiansIncrement = Math.PI * 2.0 / stride;\n\t\tconst cosIncrement = Math.cos(radiansIncrement);\n\t\tconst sinIncrement = Math.sin(radiansIncrement);\n\t\tconst oscillatorMultiplier = 2.0 * cosIncrement;\n\t\tfor (let startIndex = 0; startIndex < fullArrayLength; startIndex += stride) {\n\t\t\tconst startIndexA = startIndex;\n\t\t\tconst startIndexB = startIndexA + subStride;\n\t\t\tconst stopIndex = startIndexB + subStride;\n\t\t\tconst realStartA = array[startIndexA];\n\t\t\tconst realStartB = array[startIndexB];\n\t\t\tarray[startIndexA] = realStartA + realStartB;\n\t\t\tarray[startIndexB] = realStartA - realStartB;\n\t\t\tlet c = cosIncrement;\n\t\t\tlet s = -sinIncrement;\n\t\t\tlet cPrev = 1.0;\n\t\t\tlet sPrev = 0.0;\n\t\t\tfor (let index = 1; index < midSubStride; index++) {\n\t\t\t\tconst indexA0 = startIndexA + index;\n\t\t\t\tconst indexA1 = startIndexB - index;\n\t\t\t\tconst indexB0 = startIndexB + index;\n\t\t\t\t\tconst indexB1 = stopIndex   - index;\n\t\t\t\tconst real0 = array[indexA0];\n\t\t\t\tconst imag0 = array[indexA1];\n\t\t\t\tconst real1 = array[indexB0];\n\t\t\t\tconst imag1 = array[indexB1];\n\t\t\t\tconst tempA = real1 * c + imag1 * s;\n\t\t\t\tconst tempB = real1 * s - imag1 * c;\n\t\t\t\tarray[indexA0] = real0 + tempA;\n\t\t\t\tarray[indexA1] = real0 - tempA;\n\t\t\t\t\tarray[indexB0] =-imag0 - tempB;\n\t\t\t\tarray[indexB1] = imag0 - tempB;\n\t\t\t\tconst cTemp = oscillatorMultiplier * c - cPrev;\n\t\t\t\tconst sTemp = oscillatorMultiplier * s - sPrev;\n\t\t\t\tcPrev = c;\n\t\t\t\tsPrev = s;\n\t\t\t\tc = cTemp;\n\t\t\t\ts = sTemp;\n\t\t\t}\n\t\t}\n\t}\n}\n\n// Computes the inverse Fourier transform from a specially formatted array of\n// scalar values. Elements 0 through N/2 are expected to be the real values of\n// the corresponding complex elements, representing cosine wave amplitudes in\n// ascending frequency, and elements N/2+1 through N-1 correspond to the\n// imaginary values, representing sine wave amplitudes in descending frequency.\n// Generates real-valued time-domain samples. Overwrites the input array.\nexport function inverseRealFourierTransform(array: NumberArray, fullArrayLength: number): void {\n\tconst totalPasses = countBits(fullArrayLength);\n\tif (fullArrayLength < 4) throw new Error(\"FFT array length must be at least 4.\");\n\n\t// Perform all but the last few passes in reverse.\n\tfor (let pass = totalPasses - 1; pass >= 2; pass--) {\n\t\tconst subStride = 1 << pass;\n\t\tconst midSubStride = subStride >> 1;\n\t\tconst stride = subStride << 1;\n\t\tconst radiansIncrement = Math.PI * 2.0 / stride;\n\t\tconst cosIncrement = Math.cos(radiansIncrement);\n\t\tconst sinIncrement = Math.sin(radiansIncrement);\n\t\tconst oscillatorMultiplier = 2.0 * cosIncrement;\n\t\t\t\n\t\tfor (let startIndex = 0; startIndex < fullArrayLength; startIndex += stride) {\n\t\t\tconst startIndexA = startIndex;\n\t\t\tconst midIndexA = startIndexA + midSubStride;\n\t\t\tconst startIndexB = startIndexA + subStride;\n\t\t\tconst midIndexB = startIndexB + midSubStride;\n\t\t\tconst stopIndex = startIndexB + subStride;\n\t\t\tconst realStartA = array[startIndexA];\n\t\t\tconst imagStartB = array[startIndexB];\n\t\t\tarray[startIndexA] = realStartA + imagStartB;\n\t\t\tarray[midIndexA] *= 2;\n\t\t\tarray[startIndexB] = realStartA - imagStartB;\n\t\t\tarray[midIndexB] *= 2;\n\t\t\tlet c = cosIncrement;\n\t\t\tlet s = -sinIncrement;\n\t\t\tlet cPrev = 1.0;\n\t\t\tlet sPrev = 0.0;\n\t\t\tfor (let index = 1; index < midSubStride; index++) {\n\t\t\t\tconst indexA0 = startIndexA + index;\n\t\t\t\tconst indexA1 = startIndexB - index;\n\t\t\t\tconst indexB0 = startIndexB + index;\n\t\t\t\t\tconst indexB1 = stopIndex   - index;\n\t\t\t\tconst real0 = array[indexA0];\n\t\t\t\tconst real1 = array[indexA1];\n\t\t\t\tconst imag0 = array[indexB0];\n\t\t\t\tconst imag1 = array[indexB1];\n\t\t\t\tconst tempA = real0 - real1;\n\t\t\t\tconst tempB = imag0 + imag1;\n\t\t\t\tarray[indexA0] = real0 + real1;\n\t\t\t\tarray[indexA1] = imag1 - imag0;\n\t\t\t\tarray[indexB0] = tempA * c - tempB * s;\n\t\t\t\tarray[indexB1] = tempB * c + tempA * s;\n\t\t\t\tconst cTemp = oscillatorMultiplier * c - cPrev;\n\t\t\t\tconst sTemp = oscillatorMultiplier * s - sPrev;\n\t\t\t\tcPrev = c;\n\t\t\t\tsPrev = s;\n\t\t\t\tc = cTemp;\n\t\t\t\ts = sTemp;\n\t\t\t}\n\t\t}\n\t}\n\t/*\n\t// Commented out this block (and compensated with an extra pass above)\n\t// because it's slower in my testing so far.\n\t// Pass with stride 8.\n\tconst sqrt2over2 = Math.sqrt(2.0) / 2.0;\n\tfor (let index = 0; index < fullArrayLength; index += 8) {\n\t\tconst index1 = index + 1;\n\t\tconst index2 = index + 2;\n\t\tconst index3 = index + 3;\n\t\tconst index4 = index + 4;\n\t\tconst index5 = index + 5;\n\t\tconst index6 = index + 6;\n\t\tconst index7 = index + 7;\n\t\tconst real0 = array[index ];\n\t\tconst real1 = array[index1];\n\t\tconst real2 = array[index2];\n\t\tconst real3 = array[index3];\n\t\tconst imag4 = array[index4];\n\t\tconst imag5 = array[index5];\n\t\tconst imag6 = array[index6];\n\t\tconst imag7 = array[index7];\n\t\tconst tempA = real1 - real3;\n\t\tconst tempB = imag5 + imag7;\n\t\tarray[index ] = real0 + imag4;\n\t\tarray[index1] = real1 + real3;\n\t\tarray[index2] = real2 * 2;\n\t\tarray[index3] = imag7 - imag5;\n\t\tarray[index4] = real0 - imag4;\n\t\tarray[index5] = (tempA + tempB) * sqrt2over2;\n\t\tarray[index6] = imag6 * 2;\n\t\tarray[index7] = (tempB - tempA) * sqrt2over2;\n\t}\n\t*/\n\t// The final passes with strides 4 and 2, combined into one loop.\n\tfor (let index = 0; index < fullArrayLength; index += 4) {\n\t\tconst index1 = index + 1;\n\t\tconst index2 = index + 2;\n\t\tconst index3 = index + 3;\n\t\t\tconst real0 = array[index ];\n\t\tconst real1 = array[index1] * 2;\n\t\tconst imag2 = array[index2];\n\t\tconst imag3 = array[index3] * 2;\n\t\tconst tempA = real0 + imag2;\n\t\tconst tempB = real0 - imag2;\n\t\t\tarray[index ] = tempA + real1;\n\t\tarray[index1] = tempA - real1;\n\t\tarray[index2] = tempB + imag3;\n\t\tarray[index3] = tempB - imag3;\n\t}\n\t\t\n\treverseIndexBits(array, fullArrayLength);\n}\n", "// Copyright (c) John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { Deque } from \"./Deque\";\nimport { EffectState } from \"./EffectState\";\nimport { EnvelopeComputer } from \"./EnvelopeComputer\";\nimport { inverseRealFourierTransform, scaleElementsByFactor } from \"./FFT\";\nimport { warpInfinityToNyquist } from \"./filtering\";\nimport { HarmonicsWave, Instrument, SpectrumWave } from \"./Instrument\";\nimport { Synth } from \"./synth\";\nimport { Chord, Config, drawNoiseSpectrum, EffectType, EnvelopeComputeIndex, getDrumWave, InstrumentType, performIntegralOld, SustainType, Unison } from \"./SynthConfig\";\nimport { Tone } from \"./Tone\";\nimport { fittingPowerOfTwo } from \"./utils\";\n\nexport class SpectrumWaveState {\n    wave: Float32Array | null = null;\n    private _hash = -1;\n\n    getCustomWave(settings: SpectrumWave, lowestOctave: number): Float32Array {\n        if (this._hash == settings.hash) return this.wave!;\n        this._hash = settings.hash;\n\n        const waveLength = Config.spectrumNoiseLength;\n        if (this.wave == null || this.wave.length != waveLength + 1) {\n            this.wave = new Float32Array(waveLength + 1);\n        }\n        const wave: Float32Array = this.wave;\n\n        for (let i = 0; i < waveLength; i++) {\n            wave[i] = 0;\n        }\n\n        const highestOctave = 14;\n        const falloffRatio = 0.25;\n        // Nudge the 2/7 and 4/7 control points so that they form harmonic intervals.\n        const pitchTweak: number[] = [0, 1 / 7, Math.log2(5 / 4), 3 / 7, Math.log2(3 / 2), 5 / 7, 6 / 7];\n        function controlPointToOctave(point: number): number {\n            return lowestOctave + Math.floor(point / Config.spectrumControlPointsPerOctave) + pitchTweak[(point + Config.spectrumControlPointsPerOctave) % Config.spectrumControlPointsPerOctave];\n        }\n\n        let combinedAmplitude = 1;\n        for (let i = 0; i < Config.spectrumControlPoints + 1; i++) {\n            const value1 = (i <= 0) ? 0 : settings.spectrum[i - 1];\n            const value2 = (i >= Config.spectrumControlPoints) ? settings.spectrum[Config.spectrumControlPoints - 1] : settings.spectrum[i];\n            const octave1 = controlPointToOctave(i - 1);\n            let octave2 = controlPointToOctave(i);\n            if (i >= Config.spectrumControlPoints) octave2 = highestOctave + (octave2 - highestOctave) * falloffRatio;\n            if (value1 == 0 && value2 == 0) continue;\n\n            combinedAmplitude += 0.02 * drawNoiseSpectrum(wave, waveLength, octave1, octave2, value1 / Config.spectrumMax, value2 / Config.spectrumMax, -0.5);\n        }\n        if (settings.spectrum[Config.spectrumControlPoints - 1] > 0) {\n            combinedAmplitude += 0.02 * drawNoiseSpectrum(wave, waveLength, highestOctave + (controlPointToOctave(Config.spectrumControlPoints) - highestOctave) * falloffRatio, highestOctave, settings.spectrum[Config.spectrumControlPoints - 1] / Config.spectrumMax, 0, -0.5);\n        }\n\n        inverseRealFourierTransform(wave, waveLength);\n        scaleElementsByFactor(wave, 5.0 / (Math.sqrt(waveLength) * Math.pow(combinedAmplitude, 0.75)));\n\n        // Duplicate the first sample at the end for easier wrap-around interpolation.\n        wave[waveLength] = wave[0];\n\n        return wave;\n    }\n}\n\nexport class HarmonicsWaveState {\n    wave: Float32Array | null = null;\n    private _hash = -1;\n    private _generatedForType: InstrumentType;\n\n    getCustomWave(settings: HarmonicsWave, instrumentType: InstrumentType): Float32Array {\n        if (this._hash == settings.hash && this._generatedForType == instrumentType) return this.wave!;\n        this._hash = settings.hash;\n        this._generatedForType = instrumentType;\n\n        const harmonicsRendered = (instrumentType == InstrumentType.pickedString) ? Config.harmonicsRenderedForPickedString : Config.harmonicsRendered;\n\n        const waveLength = Config.harmonicsWavelength;\n        const retroWave: Float32Array = getDrumWave(0, null, null);\n\n        if (this.wave == null || this.wave.length != waveLength + 1) {\n            this.wave = new Float32Array(waveLength + 1);\n        }\n        const wave: Float32Array = this.wave;\n\n        for (let i = 0; i < waveLength; i++) {\n            wave[i] = 0;\n        }\n\n        const overallSlope = -0.25;\n        let combinedControlPointAmplitude = 1;\n\n        for (let harmonicIndex = 0; harmonicIndex < harmonicsRendered; harmonicIndex++) {\n            const harmonicFreq = harmonicIndex + 1;\n            let controlValue = harmonicIndex < Config.harmonicsControlPoints ? settings.harmonics[harmonicIndex] : settings.harmonics[Config.harmonicsControlPoints - 1];\n            if (harmonicIndex >= Config.harmonicsControlPoints) {\n                controlValue *= 1 - (harmonicIndex - Config.harmonicsControlPoints) / (harmonicsRendered - Config.harmonicsControlPoints);\n            }\n            const normalizedValue = controlValue / Config.harmonicsMax;\n            let amplitude = Math.pow(2, controlValue - Config.harmonicsMax + 1) * Math.sqrt(normalizedValue);\n            if (harmonicIndex < Config.harmonicsControlPoints) {\n                combinedControlPointAmplitude += amplitude;\n            }\n            amplitude *= Math.pow(harmonicFreq, overallSlope);\n\n            // Multiply all the sine wave amplitudes by 1 or -1 based on the LFSR\n            // retro wave (effectively random) to avoid egregiously tall spikes.\n            amplitude *= retroWave[harmonicIndex + 589];\n\n            wave[waveLength - harmonicFreq] = amplitude;\n        }\n\n        inverseRealFourierTransform(wave, waveLength);\n\n        // Limit the maximum wave amplitude.\n        const mult = 1 / Math.pow(combinedControlPointAmplitude, 0.7);\n        for (let i = 0; i < wave.length; i++) wave[i] *= mult;\n\n        performIntegralOld(wave);\n\n        // The first sample should be zero, and we'll duplicate it at the end for easier interpolation.\n        wave[waveLength] = wave[0];\n\n        return wave;\n    }\n}\n\nexport class PickedString {\n    delayLine: Float32Array | null = null;\n    delayIndex: number;\n    allPassSample: number;\n    allPassPrevInput: number;\n    sustainFilterSample: number;\n    sustainFilterPrevOutput2: number;\n    sustainFilterPrevInput1: number;\n    sustainFilterPrevInput2: number;\n    fractionalDelaySample: number;\n    prevDelayLength: number;\n    delayLengthDelta: number;\n    delayResetOffset: number;\n\n    allPassG = 0.0;\n    allPassGDelta = 0.0;\n    sustainFilterA1 = 0.0;\n    sustainFilterA1Delta = 0.0;\n    sustainFilterA2 = 0.0;\n    sustainFilterA2Delta = 0.0;\n    sustainFilterB0 = 0.0;\n    sustainFilterB0Delta = 0.0;\n    sustainFilterB1 = 0.0;\n    sustainFilterB1Delta = 0.0;\n    sustainFilterB2 = 0.0;\n    sustainFilterB2Delta = 0.0;\n\n    constructor() {\n        this.reset();\n    }\n\n    reset(): void {\n        this.delayIndex = -1;\n        this.allPassSample = 0.0;\n        this.allPassPrevInput = 0.0;\n        this.sustainFilterSample = 0.0;\n        this.sustainFilterPrevOutput2 = 0.0;\n        this.sustainFilterPrevInput1 = 0.0;\n        this.sustainFilterPrevInput2 = 0.0;\n        this.fractionalDelaySample = 0.0;\n        this.prevDelayLength = -1.0;\n        this.delayResetOffset = 0;\n    }\n\n    update(synth: Synth, instrumentState: InstrumentState, tone: Tone, stringIndex: number, roundedSamplesPerTick: number, stringDecayStart: number, stringDecayEnd: number, sustainType: SustainType): void {\n        const allPassCenter = 2.0 * Math.PI * Config.pickedStringDispersionCenterFreq / synth.samplesPerSecond;\n\n        const prevDelayLength = this.prevDelayLength;\n\n        const phaseDeltaStart = tone.phaseDeltas[stringIndex];\n        const phaseDeltaScale = tone.phaseDeltaScales[stringIndex];\n        const phaseDeltaEnd = phaseDeltaStart * Math.pow(phaseDeltaScale, roundedSamplesPerTick);\n\n        const radiansPerSampleStart = Math.PI * 2.0 * phaseDeltaStart;\n        const radiansPerSampleEnd = Math.PI * 2.0 * phaseDeltaEnd;\n\n        const centerHarmonicStart = radiansPerSampleStart * 2.0;\n        const centerHarmonicEnd = radiansPerSampleEnd * 2.0;\n\n        const allPassRadiansStart = Math.min(Math.PI, radiansPerSampleStart * Config.pickedStringDispersionFreqMult * Math.pow(allPassCenter / radiansPerSampleStart, Config.pickedStringDispersionFreqScale));\n        const allPassRadiansEnd = Math.min(Math.PI, radiansPerSampleEnd * Config.pickedStringDispersionFreqMult * Math.pow(allPassCenter / radiansPerSampleEnd, Config.pickedStringDispersionFreqScale));\n        const shelfRadians = 2.0 * Math.PI * Config.pickedStringShelfHz / synth.samplesPerSecond;\n        const decayCurveStart = (Math.pow(100.0, stringDecayStart) - 1.0) / 99.0;\n        const decayCurveEnd = (Math.pow(100.0, stringDecayEnd  ) - 1.0) / 99.0;\n        const register = sustainType == SustainType.acoustic ? 0.25 : 0.0;\n        const registerShelfCenter = 15.6;\n        const registerLowpassCenter = 3.0 * synth.samplesPerSecond / 48000;\n        //const decayRateStart = Math.pow(0.5, decayCurveStart * shelfRadians / radiansPerSampleStart);\n        //const decayRateEnd = Math.pow(0.5, decayCurveEnd   * shelfRadians / radiansPerSampleEnd);\n        const decayRateStart = Math.pow(0.5, decayCurveStart * Math.pow(shelfRadians / (radiansPerSampleStart * registerShelfCenter), (1.0 + 2.0 * register)) * registerShelfCenter);\n        const decayRateEnd = Math.pow(0.5, decayCurveEnd   * Math.pow(shelfRadians / (radiansPerSampleEnd   * registerShelfCenter), (1.0 + 2.0 * register)) * registerShelfCenter);\n\n        const expressionDecayStart = Math.pow(decayRateStart, 0.002);\n        const expressionDecayEnd = Math.pow(decayRateEnd, 0.002);\n\n        Synth.tempFilterStartCoefficients.allPass1stOrderInvertPhaseAbove(allPassRadiansStart);\n        synth.tempFrequencyResponse.analyze(Synth.tempFilterStartCoefficients, centerHarmonicStart);\n        const allPassGStart = Synth.tempFilterStartCoefficients.b[0]; /* same as a[1] */\n        const allPassPhaseDelayStart = -synth.tempFrequencyResponse.angle() / centerHarmonicStart;\n\n        Synth.tempFilterEndCoefficients.allPass1stOrderInvertPhaseAbove(allPassRadiansEnd);\n        synth.tempFrequencyResponse.analyze(Synth.tempFilterEndCoefficients, centerHarmonicEnd);\n        const allPassGEnd = Synth.tempFilterEndCoefficients.b[0]; /* same as a[1] */\n        const allPassPhaseDelayEnd = -synth.tempFrequencyResponse.angle() / centerHarmonicEnd;\n\n        // 1st order shelf filters and 2nd order lowpass filters have differently shaped frequency\n        // responses, as well as adjustable shapes. I originally picked a 1st order shelf filter,\n        // but I kinda prefer 2nd order lowpass filters now and I designed a couple settings:\n        const enum PickedStringBrightnessType {\n            bright, // 1st order shelf\n            normal, // 2nd order lowpass, rounded corner\n            resonant, // 3rd order lowpass, harder corner\n        }\n        const brightnessType = <any> sustainType == SustainType.bright ? PickedStringBrightnessType.bright : PickedStringBrightnessType.normal;\n        if (brightnessType == PickedStringBrightnessType.bright) {\n            const shelfGainStart = Math.pow(decayRateStart, Config.stringDecayRate);\n            const shelfGainEnd = Math.pow(decayRateEnd,   Config.stringDecayRate);\n            Synth.tempFilterStartCoefficients.highShelf2ndOrder(shelfRadians, shelfGainStart, 0.5);\n            Synth.tempFilterEndCoefficients.highShelf2ndOrder(shelfRadians, shelfGainEnd, 0.5);\n        } else {\n            const cornerHardness = Math.pow(brightnessType == PickedStringBrightnessType.normal ? 0.0 : 1.0, 0.25);\n            const lowpass1stOrderCutoffRadiansStart = Math.pow(registerLowpassCenter * registerLowpassCenter * radiansPerSampleStart * 3.3 * 48000 / synth.samplesPerSecond, 0.5 + register) / registerLowpassCenter / Math.pow(decayCurveStart, .5);\n            const lowpass1stOrderCutoffRadiansEnd = Math.pow(registerLowpassCenter * registerLowpassCenter * radiansPerSampleEnd   * 3.3 * 48000 / synth.samplesPerSecond, 0.5 + register) / registerLowpassCenter / Math.pow(decayCurveEnd,   .5);\n            const lowpass2ndOrderCutoffRadiansStart = lowpass1stOrderCutoffRadiansStart * Math.pow(2.0, 0.5 - 1.75 * (1.0 - Math.pow(1.0 - cornerHardness, 0.85)));\n            const lowpass2ndOrderCutoffRadiansEnd = lowpass1stOrderCutoffRadiansEnd   * Math.pow(2.0, 0.5 - 1.75 * (1.0 - Math.pow(1.0 - cornerHardness, 0.85)));\n            const lowpass2ndOrderGainStart = Math.pow(2.0, -Math.pow(2.0, -Math.pow(cornerHardness, 0.9)));\n            const lowpass2ndOrderGainEnd = Math.pow(2.0, -Math.pow(2.0, -Math.pow(cornerHardness, 0.9)));\n            Synth.tempFilterStartCoefficients.lowPass2ndOrderButterworth(warpInfinityToNyquist(lowpass2ndOrderCutoffRadiansStart), lowpass2ndOrderGainStart);\n            Synth.tempFilterEndCoefficients  .lowPass2ndOrderButterworth(warpInfinityToNyquist(lowpass2ndOrderCutoffRadiansEnd),   lowpass2ndOrderGainEnd);\n        }\n\n        synth.tempFrequencyResponse.analyze(Synth.tempFilterStartCoefficients, centerHarmonicStart);\n        const sustainFilterA1Start = Synth.tempFilterStartCoefficients.a[1];\n        const sustainFilterA2Start = Synth.tempFilterStartCoefficients.a[2];\n        const sustainFilterB0Start = Synth.tempFilterStartCoefficients.b[0] * expressionDecayStart;\n        const sustainFilterB1Start = Synth.tempFilterStartCoefficients.b[1] * expressionDecayStart;\n        const sustainFilterB2Start = Synth.tempFilterStartCoefficients.b[2] * expressionDecayStart;\n        const sustainFilterPhaseDelayStart = -synth.tempFrequencyResponse.angle() / centerHarmonicStart;\n\n        synth.tempFrequencyResponse.analyze(Synth.tempFilterEndCoefficients, centerHarmonicEnd);\n        const sustainFilterA1End = Synth.tempFilterEndCoefficients.a[1];\n        const sustainFilterA2End = Synth.tempFilterEndCoefficients.a[2];\n        const sustainFilterB0End = Synth.tempFilterEndCoefficients.b[0] * expressionDecayEnd;\n        const sustainFilterB1End = Synth.tempFilterEndCoefficients.b[1] * expressionDecayEnd;\n        const sustainFilterB2End = Synth.tempFilterEndCoefficients.b[2] * expressionDecayEnd;\n        const sustainFilterPhaseDelayEnd = -synth.tempFrequencyResponse.angle() / centerHarmonicEnd;\n\n        const periodLengthStart = 1.0 / phaseDeltaStart;\n        const periodLengthEnd = 1.0 / phaseDeltaEnd;\n        const minBufferLength = Math.ceil(Math.max(periodLengthStart, periodLengthEnd) * 2);\n        const delayLength = periodLengthStart - allPassPhaseDelayStart - sustainFilterPhaseDelayStart;\n        const delayLengthEnd = periodLengthEnd - allPassPhaseDelayEnd - sustainFilterPhaseDelayEnd;\n\n        this.prevDelayLength = delayLength;\n        this.delayLengthDelta = (delayLengthEnd - delayLength) / roundedSamplesPerTick;\n        this.allPassG = allPassGStart;\n        this.sustainFilterA1 = sustainFilterA1Start;\n        this.sustainFilterA2 = sustainFilterA2Start;\n        this.sustainFilterB0 = sustainFilterB0Start;\n        this.sustainFilterB1 = sustainFilterB1Start;\n        this.sustainFilterB2 = sustainFilterB2Start;\n        this.allPassGDelta = (allPassGEnd - allPassGStart) / roundedSamplesPerTick;\n        this.sustainFilterA1Delta = (sustainFilterA1End - sustainFilterA1Start) / roundedSamplesPerTick;\n        this.sustainFilterA2Delta = (sustainFilterA2End - sustainFilterA2Start) / roundedSamplesPerTick;\n        this.sustainFilterB0Delta = (sustainFilterB0End - sustainFilterB0Start) / roundedSamplesPerTick;\n        this.sustainFilterB1Delta = (sustainFilterB1End - sustainFilterB1Start) / roundedSamplesPerTick;\n        this.sustainFilterB2Delta = (sustainFilterB2End - sustainFilterB2Start) / roundedSamplesPerTick;\n\n        const pitchChanged = Math.abs(Math.log2(delayLength / prevDelayLength)) > 0.01;\n\n        const reinitializeImpulse = (this.delayIndex == -1 || pitchChanged);\n        if (this.delayLine == null || this.delayLine.length <= minBufferLength) {\n            // The delay line buffer will get reused for other tones so might as well\n            // start off with a buffer size that is big enough for most notes.\n            const likelyMaximumLength = Math.ceil(2 * synth.samplesPerSecond / Instrument.frequencyFromPitch(12));\n            const newDelayLine: Float32Array = new Float32Array(fittingPowerOfTwo(Math.max(likelyMaximumLength, minBufferLength)));\n            if (!reinitializeImpulse && this.delayLine != null) {\n                // If the tone has already started but the buffer needs to be reallocated,\n                // transfer the old data to the new buffer.\n                const oldDelayBufferMask = (this.delayLine.length - 1) >> 0;\n                const startCopyingFromIndex = this.delayIndex + this.delayResetOffset;\n                this.delayIndex = this.delayLine.length - this.delayResetOffset;\n                for (let i = 0; i < this.delayLine.length; i++) {\n                    newDelayLine[i] = this.delayLine[(startCopyingFromIndex + i) & oldDelayBufferMask];\n                }\n            }\n            this.delayLine = newDelayLine;\n        }\n        const delayLine: Float32Array = this.delayLine;\n        const delayBufferMask = (delayLine.length - 1) >> 0;\n\n        if (reinitializeImpulse) {\n            // -1 delay index means the tone was reset.\n            // Also, if the pitch changed suddenly (e.g. from seamless or arpeggio) then reset the wave.\n\n            this.delayIndex = 0;\n            this.allPassSample = 0.0;\n            this.allPassPrevInput = 0.0;\n            this.sustainFilterSample = 0.0;\n            this.sustainFilterPrevOutput2 = 0.0;\n            this.sustainFilterPrevInput1 = 0.0;\n            this.sustainFilterPrevInput2 = 0.0;\n            this.fractionalDelaySample = 0.0;\n\n            // Clear away a region of the delay buffer for the new impulse.\n            const startImpulseFrom = -delayLength;\n            const startZerosFrom = Math.floor(startImpulseFrom - periodLengthStart / 2);\n            const stopZerosAt = Math.ceil(startZerosFrom + periodLengthStart * 2);\n            this.delayResetOffset = stopZerosAt; // And continue clearing the area in front of the delay line.\n            for (let i = startZerosFrom; i <= stopZerosAt; i++) {\n                delayLine[i & delayBufferMask] = 0.0;\n            }\n\n            const impulseWave: Float32Array = instrumentState.waveL!;\n            const impulseWaveLength = impulseWave.length - 1; // The first sample is duplicated at the end, don't double-count it.\n            const impulsePhaseDelta = impulseWaveLength / periodLengthStart;\n\n            const fadeDuration = Math.min(periodLengthStart * 0.2, synth.samplesPerSecond * 0.003);\n            const startImpulseFromSample = Math.ceil(startImpulseFrom);\n            const stopImpulseAt = startImpulseFrom + periodLengthStart + fadeDuration;\n            const stopImpulseAtSample = stopImpulseAt;\n            let impulsePhase = (startImpulseFromSample - startImpulseFrom) * impulsePhaseDelta;\n            let prevWaveIntegral = 0.0;\n            for (let i = startImpulseFromSample; i <= stopImpulseAtSample; i++) {\n                const impulsePhaseInt = impulsePhase | 0;\n                const index = impulsePhaseInt % impulseWaveLength;\n                let nextWaveIntegral = impulseWave[index];\n                const phaseRatio = impulsePhase - impulsePhaseInt;\n                nextWaveIntegral += (impulseWave[index + 1] - nextWaveIntegral) * phaseRatio;\n                const sample = (nextWaveIntegral - prevWaveIntegral) / impulsePhaseDelta;\n                const fadeIn = Math.min(1.0, (i - startImpulseFrom) / fadeDuration);\n                const fadeOut = Math.min(1.0, (stopImpulseAt - i) / fadeDuration);\n                const combinedFade = fadeIn * fadeOut;\n                const curvedFade = combinedFade * combinedFade * (3.0 - 2.0 * combinedFade); // A cubic sigmoid from 0 to 1.\n                delayLine[i & delayBufferMask] += sample * curvedFade;\n                prevWaveIntegral = nextWaveIntegral;\n                impulsePhase += impulsePhaseDelta;\n            }\n        }\n    }\n}\n\nexport class InstrumentState {\n    awake = false; // Whether the instrument's effects-processing loop should continue.\n    computed = false; // Whether the effects-processing parameters are up-to-date for the current synth run.\n    tonesAddedInThisTick = false; // Whether any instrument tones are currently active.\n    flushingDelayLines = false; // If no tones were active recently, enter a mode where the delay lines are filled with zeros to reset them for later use.\n    deactivateAfterThisTick = false; // Whether the instrument is ready to be deactivated because the delay lines, if any, are fully zeroed.\n    attentuationProgress = 0.0; // How long since an active tone introduced an input signal to the delay lines, normalized from 0 to 1 based on how long to wait until the delay lines signal will have audibly dissapated.\n    flushedSamples = 0; // How many delay line samples have been flushed to zero.\n    readonly activeTones: Deque<Tone> = new Deque<Tone>();\n    readonly activeModTones: Deque<Tone> = new Deque<Tone>();\n    readonly releasedTones: Deque<Tone> = new Deque<Tone>(); // Tones that are in the process of fading out after the corresponding notes ended.\n    readonly liveInputTones: Deque<Tone> = new Deque<Tone>(); // Tones that are initiated by a source external to the loaded song data.\n\n    type = InstrumentType.chip;\n    synthesizer: Function | null = null;\n    waveL: Float32Array | null = null;\n    waveR: Float32Array | null = null;\n    isStereo = false; //this refers to whether or not the synth should be processed through the effect chain in mono or stereo...\n    // advloop addition\n    isUsingAdvancedLoopControls = false;\n    chipWaveLoopStart = 0;\n    chipWaveLoopEnd = 0;\n    chipWaveLoopMode = 0;\n    chipWavePlayBackwards = false;\n    chipWaveStartOffset = 0;\n    // advloop addition\n    chipWaveInStereo = false; //...and this refers to whether or not the stereo checkmark is active.\n    noisePitchFilterMult = 1.0;\n    unison: Unison | null = null;\n    unisonVoices = 1;\n    unisonSpread = 0.0;\n    unisonOffset = 0.0;\n    unisonExpression = 1.4;\n    unisonSign = 1.0;\n    chord: Chord | null = null;\n    effects: EffectState[] = [];\n\n    volumeScale = 0;\n    aliases = false;\n    arpTime = 0;\n    vibratoTime = 0;\n    nextVibratoTime = 0;\n    envelopeTime: number[] = [];\n    mixVolume = 1.0;\n    mixVolumeDelta = 0.0;\n    delayDuration = 0.0;\n    totalDelaySamples = 0.0;\n    delayInputMult = 0.0;\n    delayInputMultDelta = 0.0;\n\n    readonly spectrumWave = new SpectrumWaveState();\n    readonly harmonicsWave = new HarmonicsWaveState();\n    readonly drumsetSpectrumWaves: SpectrumWaveState[] = [];\n\n    constructor() {\n        for (let i = 0; i < Config.drumCount; i++) {\n            this.drumsetSpectrumWaves[i] = new SpectrumWaveState();\n        }\n    }\n\n    readonly envelopeComputer = new EnvelopeComputer();\n\n    allocateNecessaryBuffers(synth: Synth, instrument: Instrument, samplesPerTick: number): void {\n        for (let effectIndex = 0; effectIndex < instrument.effects.length; effectIndex++) {\n            if (this.effects[effectIndex] != null) {\n                let effect = instrument.effects[effectIndex]!\n                this.effects[effectIndex]!.allocateNecessaryBuffers(synth, instrument, effect, samplesPerTick);\n            }\n        }\n    }\n\n    deactivate(): void {\n        for (let effectIndex = 0; effectIndex < this.effects.length; effectIndex++) {\n            if (this.effects[effectIndex] != null) this.effects[effectIndex]!.deactivate();\n        }\n\n        this.volumeScale = 1.0;\n        this.aliases = false;\n\n        this.awake = false;\n        this.flushingDelayLines = false;\n        this.deactivateAfterThisTick = false;\n        this.attentuationProgress = 0.0;\n        this.flushedSamples = 0;\n    }\n\n    resetAllEffects(): void {\n        this.deactivate();\n        // LFOs are reset here rather than in deactivate() for periodic oscillation that stays \"on the beat\". Resetting in deactivate() will cause it to reset with each note.\n        this.vibratoTime = 0;\n        this.nextVibratoTime = 0;\n        this.arpTime = 0;\n        for (let envelopeIndex = 0; envelopeIndex < Config.maxEnvelopeCount + 1; envelopeIndex++) this.envelopeTime[envelopeIndex] = 0;\n        this.envelopeComputer.reset();\n\n        for (let effectIndex = 0; effectIndex < this.effects.length; effectIndex++) {\n            if (this.effects[effectIndex] != null) this.effects[effectIndex]!.reset();\n        }\n    }\n\n    compute(synth: Synth, instrument: Instrument, samplesPerTick: number, roundedSamplesPerTick: number, tone: Tone | null, channelIndex: number, instrumentIndex: number): void {\n        this.computed = true;\n\n        this.type = instrument.type;\n        this.synthesizer = Synth.getInstrumentSynthFunction(instrument);\n        this.unison = Config.unisons[instrument.unison];\n        this.chord = instrument.getChord();\n        this.noisePitchFilterMult = Config.chipNoises[instrument.chipNoise].pitchFilterMult;\n\n        this.aliases = instrument.aliases;\n        this.volumeScale = 1.0;\n        this.delayDuration = 0.0;\n        this.totalDelaySamples = 0.0;\n\n        for (let effectIndex = 0; effectIndex < instrument.effects.length; effectIndex++) {\n            if (this.effects[effectIndex] == null) this.effects[effectIndex] = new EffectState(instrument.effects[effectIndex]!.type);\n        }\n        this.effects.length = instrument.effects.length\n\n        this.allocateNecessaryBuffers(synth, instrument, samplesPerTick);\n\n        const samplesPerSecond = synth.samplesPerSecond;\n        this.updateWaves(instrument, samplesPerSecond);\n\n        const ticksIntoBar = synth.getTicksIntoBar();\n        const tickTimeStart = ticksIntoBar;\n        const secondsPerTick = samplesPerTick / synth.samplesPerSecond;\n        const currentPart = synth.getCurrentPart();\n        const envelopeSpeeds: number[] = [];\n        for (let i = 0; i < Config.maxEnvelopeCount; i++) {\n            envelopeSpeeds[i] = 0;\n        }\n        let useEnvelopeSpeed = Config.arpSpeedScale[instrument.envelopeSpeed];\n        if (synth.isModActive(Config.modulators.dictionary[\"envelope speed\"].index, channelIndex, instrumentIndex)) {\n            useEnvelopeSpeed = Math.max(0, Math.min(Config.arpSpeedScale.length - 1, synth.getModValue(Config.modulators.dictionary[\"envelope speed\"].index, channelIndex, instrumentIndex, false)));\n            if (Number.isInteger(useEnvelopeSpeed)) {\n                useEnvelopeSpeed = Config.arpSpeedScale[useEnvelopeSpeed];\n            } else {\n                // Linear interpolate envelope values\n                useEnvelopeSpeed = ((1 - (useEnvelopeSpeed % 1)) * Config.arpSpeedScale[Math.floor(useEnvelopeSpeed)] + (useEnvelopeSpeed % 1) * Config.arpSpeedScale[Math.ceil(useEnvelopeSpeed)]);\n            }\n        }\n        for (let envelopeIndex = 0; envelopeIndex < instrument.envelopeCount; envelopeIndex++) {\n            let perEnvelopeSpeed = instrument.envelopes[envelopeIndex].perEnvelopeSpeed;\n            if (synth.isModActive(Config.modulators.dictionary[\"individual envelope speed\"].index, channelIndex, instrumentIndex) && instrument.envelopes[envelopeIndex].tempEnvelopeSpeed != null) {\n                perEnvelopeSpeed = instrument.envelopes[envelopeIndex].tempEnvelopeSpeed!;\n            }\n            envelopeSpeeds[envelopeIndex] = useEnvelopeSpeed * perEnvelopeSpeed;\n        }\n        this.envelopeComputer.computeEnvelopes(instrument, currentPart, this.envelopeTime, tickTimeStart, secondsPerTick, tone, envelopeSpeeds, this, synth, channelIndex, instrumentIndex);\n        const envelopeStarts: number[] = this.envelopeComputer.envelopeStarts;\n        const envelopeEnds: number[] = this.envelopeComputer.envelopeEnds;\n\n        for (let effectIndex = 0; effectIndex < instrument.effects.length; effectIndex++) {\n            if (this.effects[effectIndex] != null) {\n                let effect = instrument.effects[effectIndex]!\n                this.effects[effectIndex]!.compute(synth, instrument, effect, this, samplesPerTick, roundedSamplesPerTick, tone, channelIndex, instrumentIndex, envelopeStarts, envelopeEnds);\n            }\n        }\n\n        //const mainInstrumentVolume = Synth.instrumentVolumeToVolumeMult(instrument.volume);\n        this.mixVolume = envelopeStarts[EnvelopeComputeIndex.mixVolume] * Synth.instrumentVolumeToVolumeMult(instrument.volume);\n        let mixVolumeEnd = envelopeEnds[EnvelopeComputeIndex.mixVolume] * Synth.instrumentVolumeToVolumeMult(instrument.volume);\n\n        // Check for mod-related volume delta\n        if (synth.isModActive(Config.modulators.dictionary[\"post volume\"].index, channelIndex, instrumentIndex)) {\n            // Linear falloff below 0, normal volume formula above 0. Seems to work best for scaling since the normal volume mult formula has a big gap from -25 to -24.\n            const startVal = synth.getModValue(Config.modulators.dictionary[\"post volume\"].index, channelIndex, instrumentIndex, false);\n            const endVal = synth.getModValue(Config.modulators.dictionary[\"post volume\"].index, channelIndex, instrumentIndex, true);\n            this.mixVolume *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(startVal));\n            mixVolumeEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(endVal));\n        }\n\n        // Check for SONG mod-related volume delta\n        if (synth.isModActive(Config.modulators.dictionary[\"song volume\"].index)) {\n            this.mixVolume *= (synth.getModValue(Config.modulators.dictionary[\"song volume\"].index, undefined, undefined, false)) / 100.0;\n            mixVolumeEnd *= (synth.getModValue(Config.modulators.dictionary[\"song volume\"].index, undefined, undefined, true)) / 100.0;\n        }\n\n        this.mixVolumeDelta = (mixVolumeEnd - this.mixVolume) / roundedSamplesPerTick;\n\n        let delayInputMultStart = 1.0;\n        let delayInputMultEnd = 1.0;\n\n        if (this.tonesAddedInThisTick) {\n            this.attentuationProgress = 0.0;\n            this.flushedSamples = 0;\n            this.flushingDelayLines = false;\n        } else if (!this.flushingDelayLines) {\n            // If this instrument isn't playing tones anymore, the volume can fade out by the\n            // end of the first tick. It's possible for filters and the panning delay line to\n            // continue past the end of the tone but they should have mostly dissipated by the\n            // end of the tick anyway.\n            if (this.attentuationProgress == 0.0) {\n                //eqFilterVolumeEnd = 0.0;\n            } else {\n                //eqFilterVolumeStart = 0.0;\n                //eqFilterVolumeEnd = 0.0;\n            }\n\n            const secondsInTick = samplesPerTick / samplesPerSecond;\n            const progressInTick = secondsInTick / this.delayDuration;\n            const progressAtEndOfTick = this.attentuationProgress + progressInTick;\n            if (progressAtEndOfTick >= 1.0) {\n                delayInputMultEnd = 0.0;\n            }\n\n            this.attentuationProgress = progressAtEndOfTick;\n            if (this.attentuationProgress >= 1.0) {\n                this.flushingDelayLines = true;\n            }\n        } else {\n            delayInputMultStart = 0.0;\n            delayInputMultEnd = 0.0;\n\n            this.flushedSamples += roundedSamplesPerTick;\n            if (this.flushedSamples >= this.totalDelaySamples) {\n                this.deactivateAfterThisTick = true;\n            }\n        }\n\n        this.delayInputMult = delayInputMultStart;\n        this.delayInputMultDelta = (delayInputMultEnd - delayInputMultStart) / roundedSamplesPerTick;\n\n        this.envelopeComputer.clearEnvelopes();\n    }\n\n    updateWaves(instrument: Instrument, samplesPerSecond: number): void {\n        this.volumeScale = 1.0;\n        if (instrument.type == InstrumentType.chip) {\n            this.waveL = (this.aliases) ? Config.rawChipWaves[instrument.chipWave].samples : Config.chipWaves[instrument.chipWave].samples;\n            this.waveR = (this.aliases) ? Config.rawChipWaves[instrument.chipWave].samplesR || Config.rawChipWaves[instrument.chipWave].samples : Config.chipWaves[instrument.chipWave].samplesR || Config.chipWaves[instrument.chipWave].samples;\n            // advloop addition\n            this.isUsingAdvancedLoopControls = instrument.isUsingAdvancedLoopControls;\n            this.chipWaveLoopStart = instrument.chipWaveLoopStart;\n            this.chipWaveLoopEnd = instrument.chipWaveLoopEnd;\n            this.chipWaveLoopMode = instrument.chipWaveLoopMode;\n            this.chipWavePlayBackwards = instrument.chipWavePlayBackwards;\n            this.chipWaveStartOffset = instrument.chipWaveStartOffset;\n            // advloop addition\n\n            this.chipWaveInStereo = instrument.chipWaveInStereo;\n            this.unisonVoices = instrument.unisonVoices;\n            this.unisonSpread = instrument.unisonSpread;\n            this.unisonOffset = instrument.unisonOffset;\n            this.unisonExpression = instrument.unisonExpression;\n            this.unisonSign = instrument.unisonSign;\n        } else if (instrument.type == InstrumentType.pwm) {\n            this.unisonVoices = instrument.unisonVoices;\n            this.unisonSpread = instrument.unisonSpread;\n            this.unisonOffset = instrument.unisonOffset;\n            this.unisonExpression = instrument.unisonExpression;\n            this.unisonSign = instrument.unisonSign;\n        } else if (instrument.type == InstrumentType.customChipWave) {\n            this.waveL = (this.aliases) ? instrument.customChipWave! : instrument.customChipWaveIntegral!;\n            this.waveR = (this.aliases) ? instrument.customChipWave! : instrument.customChipWaveIntegral!;\n            this.volumeScale = 0.05;\n            this.unisonVoices = instrument.unisonVoices;\n            this.unisonSpread = instrument.unisonSpread;\n            this.unisonOffset = instrument.unisonOffset;\n            this.unisonExpression = instrument.unisonExpression;\n            this.unisonSign = instrument.unisonSign;\n        } else if (instrument.type == InstrumentType.noise) {\n            this.waveL = getDrumWave(instrument.chipNoise, inverseRealFourierTransform, scaleElementsByFactor);\n            this.unisonVoices = instrument.unisonVoices;\n            this.unisonSpread = instrument.unisonSpread;\n            this.unisonOffset = instrument.unisonOffset;\n            this.unisonExpression = instrument.unisonExpression;\n            this.unisonSign = instrument.unisonSign;\n        } else if (instrument.type == InstrumentType.harmonics) {\n            this.waveL = this.harmonicsWave.getCustomWave(instrument.harmonicsWave, instrument.type);\n            this.unisonVoices = instrument.unisonVoices;\n            this.unisonSpread = instrument.unisonSpread;\n            this.unisonOffset = instrument.unisonOffset;\n            this.unisonExpression = instrument.unisonExpression;\n            this.unisonSign = instrument.unisonSign;\n        } else if (instrument.type == InstrumentType.pickedString) {\n            this.waveL = this.harmonicsWave.getCustomWave(instrument.harmonicsWave, instrument.type);\n            this.unisonVoices = instrument.unisonVoices;\n            this.unisonSpread = instrument.unisonSpread;\n            this.unisonOffset = instrument.unisonOffset;\n            this.unisonExpression = instrument.unisonExpression;\n            this.unisonSign = instrument.unisonSign;\n        } else if (instrument.type == InstrumentType.spectrum) {\n            this.waveL = this.spectrumWave.getCustomWave(instrument.spectrumWave, 8);\n            this.unisonVoices = instrument.unisonVoices;\n            this.unisonSpread = instrument.unisonSpread;\n            this.unisonOffset = instrument.unisonOffset;\n            this.unisonExpression = instrument.unisonExpression;\n            this.unisonSign = instrument.unisonSign;\n        } else if (instrument.type == InstrumentType.drumset) {\n            for (let i = 0; i < Config.drumCount; i++) {\n                this.drumsetSpectrumWaves[i].getCustomWave(instrument.drumsetSpectrumWaves[i], InstrumentState._drumsetIndexToSpectrumOctave(i));\n            }\n            this.waveL = null;\n            this.unisonVoices = instrument.unisonVoices;\n            this.unisonSpread = instrument.unisonSpread;\n            this.unisonOffset = instrument.unisonOffset;\n            this.unisonExpression = instrument.unisonExpression;\n            this.unisonSign = instrument.unisonSign;\n        } else {\n            this.waveL = null;\n        }\n    }\n\n    getDrumsetWave(pitch: number): Float32Array {\n        if (this.type == InstrumentType.drumset) {\n            return this.drumsetSpectrumWaves[pitch].wave!;\n        } else {\n            throw new Error(\"Unhandled instrument type in getDrumsetWave\");\n        }\n    }\n\n    static drumsetIndexReferenceDelta(index: number): number {\n        return Instrument.frequencyFromPitch(Config.spectrumBasePitch + index * 6) / 44100;\n    }\n\n    private static _drumsetIndexToSpectrumOctave(index: number): number {\n        return 15 + Math.log2(InstrumentState.drumsetIndexReferenceDelta(index));\n    }\n\n    effectsIncludeType(type: EffectType): boolean {\n        for (let i = 0; i < this.effects.length; i++) if (this.effects[i] != null && this.effects[i]!.type == type) return true;\n        return false;\n    }\n}\n", "// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { DictionaryArray, BeepBoxOption, InstrumentType, toNameMap, TypePresets } from \"../synth/SynthConfig\";\n\nexport interface PresetCategory extends BeepBoxOption {\n    readonly presets: DictionaryArray<Preset>;\n}\n\nexport interface Preset extends BeepBoxOption {\n    readonly isNoise?: boolean;\n    readonly isMod?: boolean;\n    readonly generalMidi?: boolean;\n    readonly midiProgram?: number;\n    readonly midiSubharmonicOctaves?: number;\n    readonly customType?: InstrumentType;\n    readonly settings?: any;\n}\n\nexport const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini|android|ipad|playbook|silk/i.test(navigator.userAgent);\n\nexport function prettyNumber(value: number): string {\n    return value.toFixed(2).replace(/\\.?0*$/, \"\");\n}\n\nexport class EditorConfig {\n    static readonly version = \"v1\";\n    static readonly versionDisplayName = \"DragonBox\";\n\n    static readonly releaseNotesURL = \"./patch_notes.html\";\n\n    static readonly isOnMac = /^Mac/i.test(navigator.platform) || /Mac OS X/i.test(navigator.userAgent) || /^(iPhone|iPad|iPod)/i.test(navigator.platform) || /(iPhone|iPad|iPod)/i.test(navigator.userAgent);\n    static readonly ctrlSymbol = EditorConfig.isOnMac ? \"\u2318\" : \"Ctrl+\";\n    static readonly ctrlName = EditorConfig.isOnMac ? \"command\" : \"control\";\n\n    static customSamples: string[] | null;\n\n    static readonly presetCategories: DictionaryArray<PresetCategory> = toNameMap([\n        {\n            // The order of this array needs to line up with the order of the InstrumentType declarations in SynthConfig.ts. (changes.ts' random instrument generation relies on this, for one.)\n            name: \"Custom Instruments\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: TypePresets[InstrumentType.chip], customType: InstrumentType.chip },\n                { name: TypePresets[InstrumentType.fm], customType: InstrumentType.fm },\n                { name: TypePresets[InstrumentType.noise], customType: InstrumentType.noise },\n                { name: TypePresets[InstrumentType.spectrum], customType: InstrumentType.spectrum },\n                { name: TypePresets[InstrumentType.drumset], customType: InstrumentType.drumset },\n                { name: TypePresets[InstrumentType.harmonics], customType: InstrumentType.harmonics },\n                { name: TypePresets[InstrumentType.pwm], customType: InstrumentType.pwm },\n                { name: TypePresets[InstrumentType.pickedString], customType: InstrumentType.pickedString },\n                { name: TypePresets[InstrumentType.supersaw], customType: InstrumentType.supersaw },\n                { name: TypePresets[InstrumentType.customChipWave], customType: InstrumentType.customChipWave },\n                { name: TypePresets[InstrumentType.fm6op], customType: InstrumentType.fm6op },\n            ])\n        },\n        {\n            name: \"Retro Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"square wave\", midiProgram: 80, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"aliasing\"], \"transition\": \"interrupt\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"chord\": \"arpeggio\", \"wave\": \"square\", \"unison\": \"none\", \"envelopes\": [] } },\n                { name: \"triangle wave\", midiProgram: 71, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"aliasing\"], \"transition\": \"interrupt\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"chord\": \"arpeggio\", \"wave\": \"triangle\", \"unison\": \"none\", \"envelopes\": [] } },\n                { name: \"square lead\", midiProgram: 80, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.3536 }], \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"wave\": \"square\", \"unison\": \"hum\", \"envelopes\": [] } },\n                { name: \"sawtooth lead 1\", midiProgram: 81, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"shimmer\", \"envelopes\": [] } },\n                { name: \"sawtooth lead 2\", midiProgram: 81, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 1 }], \"effects\": [\"vibrato\", \"aliasing\"], \"vibrato\": \"light\", \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"hum\", \"envelopes\": [] } },\n                { name: \"chip noise\", midiProgram: 116, isNoise: true, settings: { \"type\": \"noise\", \"transition\": \"hard\", \"effects\": [\"aliasing\"], \"chord\": \"arpeggio\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"wave\": \"retro\" } },\n                { name: \"supersaw lead\", midiProgram: 81, settings: { \"type\": \"supersaw\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 2 }], \"effects\": [\"reverb\"], \"reverb\": 67, \"fadeInSeconds\": 0, \"fadeOutTicks\": -6, \"pulseWidth\": 50, \"dynamism\": 100, \"spread\": 58, \"shape\": 0, \"envelopes\": [] } },\n                { name: \"FM twang\", midiProgram: 32, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 15 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 1 }] } },\n                { name: \"FM bass\", midiProgram: 36, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"custom interval\", \"algorithm\": \"1\u2190(2\u20023\u21904)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"2\u00D7\", \"amplitude\": 11 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 7 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 9 }, { \"frequency\": \"20\u00D7\", \"amplitude\": 3 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 3 }] } },\n                { name: \"FM flute\", midiProgram: 73, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 6 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 1 }] } },\n                { name: \"FM organ\", midiProgram: 16, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"vibrato\"], \"vibrato\": \"delayed\", \"transition\": \"normal\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"custom interval\", \"algorithm\": \"1\u21903\u20032\u21904\", \"feedbackType\": \"1\u27F2\u20032\u27F2\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 14 }, { \"frequency\": \"2\u00D7\", \"amplitude\": 14 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 11 }, { \"frequency\": \"2\u00D7\", \"amplitude\": 11 }], \"envelopes\": [] } },\n                { name: \"FM sine\", midiProgram: 55, settings: { \"type\": \"FM\", \"eqFilter\": [], \"eqFilterType\": true, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"effects\": [], \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1\u20032\u20033\u20034\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\" }], \"envelopes\": [] } },\n                { name: \"NES Pulse\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"vibrato\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -24, -24, -24, -23, -23, -23, -23, -22, -22, -22, -22, -21, -21, -21, -21, -20, -20, -20, -20, -19, -19, -19, -19, -18, -18, -18, -18, -17, -17, -17, -17, 24, 24, 24, 24, 23, 23, 23, 23, 22, 22, 22, 22, 21, 21, 21, 21, 20, 20, 20, 20, 19, 19, 19, 19, 18, 18, 18, 18, 17, 17, 17, 17] } },\n                { name: \"Gameboy Pulse\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -20, -17, -15, -13, -13, -11, -11, -11, -9, -9, -9, -9, -7, -7, -7, -7, -7, -5, -5, -5, -5, -5, -5, -3, -3, -3, -3, -3, -3, -3, -3, 24, 20, 17, 15, 13, 13, 11, 11, 11, 9, 9, 9, 9, 7, 7, 7, 7, 7, 5, 5, 5, 5, 5, 5, 3, 3, 3, 3, 3, 3, 3, 3] } },\n                { name: \"VRC6 Sawtooth\", midiProgram: 81, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -20, -16, -13, -10, -8, -6, -5, -4, -4, 0, 0, 0, 0, 4, 4, 4, 4, 4, 4, 8, 8, 8, 8, 8, 8, 8, 8, 12, 12, 12, 12, 12, 12, 12, 12, 16, 16, 16, 16, 16, 16, 16, 16, 20, 20, 20, 20, 20, 20, 20, 20, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24] } },\n                { name: \"Atari Square\", midiProgram: 80, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -24, -24, -23, -23, -23, -22, -22, -22, -21, -21, -21, -20, -20, -20, -19, -19, -19, -18, -18, -18, -17, -17, -17, -16, -16, -16, -15, -15, -15, -14, -14, -14, -13, -13, -13, 24, 24, 24, 23, 23, 23, 22, 22, 22, 21, 21, 21, 20, 20, 20, 19, 19, 19, 18, 18, 18, 17, 17, 17, 16, 16, 15, 15] } },\n                { name: \"Atari Bass\", midiProgram: 36, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"interrupt\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [-24, -24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, -24, -24, -24, 24, 24, 24, -24, -24, -24, 24, 24, 24, -24, -24, -24, 24, 24, -24, -24, -24, -24, -24, -24, -24, -24, -24, 24, 24, 24, 24, 24, 24, -24, -24, 24, 24, 24, 24, 24, -24, -24, -24, -24, 24, 24, -24, -24, 24, 24] } },\n                { name: \"Sunsoft Bass\", midiProgram: 36, settings: { \"type\": \"custom chip\", \"effects\": [\"aliasing\"], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"unison\": \"none\", \"envelopes\": [], \"customChipWave\": [24, 24, 15, 15, 9, 9, -4, -4, 0, 0, -13, -13, -19, -19, -24, -24, -24, -24, -10, -10, 0, 0, -7, -7, -7, -7, 0, 0, 6, 6, -4, -4, 3, 3, -4, -4, 3, 3, 3, 3, 9, 9, 15, 15, 15, 15, 6, 6, -4, -4, -4, -4, -4, -4, -4, -4, -4, -4, 3, 3, 12, 12, 24, 24] } },\n            ])\n        },\n        {\n            name: \"Keyboard Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"grand piano 1\", midiProgram: 0, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.7071 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 2.8284 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.125 }], \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [100, 100, 86, 86, 86, 71, 71, 71, 0, 86, 71, 71, 71, 57, 57, 71, 57, 14, 57, 57, 57, 57, 57, 57, 57, 57, 29, 57], \"unison\": \"piano\", \"stringSustain\": 79, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"note size\" }] } },\n                { name: \"bright piano\", midiProgram: 1, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.7071 }, { \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 3363.59, \"linearGain\": 1.4142 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"chord\": \"simultaneous\", \"harmonics\": [100, 100, 86, 86, 71, 71, 0, 71, 71, 71, 71, 71, 71, 14, 57, 57, 57, 57, 57, 57, 29, 57, 57, 57, 57, 57, 57, 57], \"unison\": \"piano\", \"stringSustain\": 86, \"envelopes\": [] } },\n                { name: \"electric grand\", midiProgram: 2, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.5 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"wave\": \"1/8 pulse\", \"unison\": \"shimmer\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }] } },\n                { name: \"honky-tonk piano\", midiProgram: 3, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 0.3536 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [100, 100, 86, 71, 86, 71, 43, 71, 43, 43, 57, 57, 57, 29, 57, 57, 57, 57, 57, 57, 43, 57, 57, 57, 43, 43, 43, 43], \"unison\": \"honky tonk\", \"stringSustain\": 71, \"envelopes\": [] } },\n                { name: \"electric piano 1\", midiProgram: 4, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 0.5 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"harmonics\": [86, 100, 100, 71, 71, 57, 57, 43, 43, 43, 29, 29, 29, 14, 14, 14, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 2\" }] } },\n                { name: \"electric piano 2\", midiProgram: 5, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"algorithm\": \"1\u21903\u20032\u21904\", \"feedbackType\": \"1\u27F2\u20032\u27F2\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 12 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 6 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 9 }, { \"frequency\": \"16\u00D7\", \"amplitude\": 6 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 3 }] } },\n                { name: \"harpsichord\", midiProgram: 6, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 11313.71, \"linearGain\": 2.8284 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"chord\": \"simultaneous\", \"harmonics\": [100, 100, 100, 86, 57, 86, 86, 86, 86, 57, 57, 71, 71, 86, 86, 71, 71, 86, 86, 71, 71, 71, 71, 71, 71, 71, 71, 71], \"unison\": \"none\", \"stringSustain\": 79, \"envelopes\": [] } },\n                { name: \"clavinet\", midiProgram: 7, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.3536 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"3\u27F2\", \"feedbackAmplitude\": 6, \"operators\": [{ \"frequency\": \"3\u00D7\", \"amplitude\": 15 }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 6 }, { \"frequency\": \"8\u00D7\", \"amplitude\": 4 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 2\" }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 2\" }] } },\n                { name: \"dulcimer\", midiProgram: 15, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.3536 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"harmonics\": [100, 100, 100, 86, 100, 86, 57, 100, 100, 86, 100, 86, 100, 86, 100, 71, 57, 71, 71, 100, 86, 71, 86, 86, 100, 86, 86, 86], \"unison\": \"piano\", \"stringSustain\": 79, \"envelopes\": [] } },\n                { name: \"grand piano 2\", midiProgram: 0, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.7071 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 2.8284 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.125 }], \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [100, 86, 86, 86, 86, 71, 71, 57, 0, 57, 29, 43, 57, 57, 57, 43, 43, 0, 29, 43, 43, 43, 43, 43, 43, 29, 0, 29], \"unison\": \"piano\", \"stringSustain\": 79, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"note size\" }] } },\n                { name: \"grand piano 3\", midiProgram: 0, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.7071 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 4 }, { \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.1768 }, { \"type\": \"peak\", \"cutoffHz\": 3363.59, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 2378.41, \"linearGain\": 0.25 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 125, \"linearGain\": 0.0884 }], \"reverb\": 67, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"harmonics\": [100, 100, 86, 86, 86, 71, 71, 71, 0, 71, 71, 71, 71, 57, 57, 71, 57, 14, 57, 57, 57, 57, 57, 57, 57, 57, 29, 57], \"unison\": \"piano\", \"stringSustain\": 86, \"stringSustainType\": \"acoustic\", \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"note size\", \"index\": 0 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"twang 1\", \"index\": 1 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"twang 1\", \"index\": 1 }] } },\n\n            ])\n        },\n        {\n            name: \"Idiophone Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"celesta\", midiProgram: 8, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"(1\u20022)\u2190(3\u20024)\", \"feedbackType\": \"1\u27F2\u20032\u27F2\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~1\u00D7\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"8\u00D7\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"20\u00D7\", \"amplitude\": 3, \"envelope\": \"twang 1\" }, { \"frequency\": \"3\u00D7\", \"amplitude\": 1, \"envelope\": \"twang 2\" }] } },\n                { name: \"glockenspiel\", midiProgram: 9, generalMidi: true, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"preset\": 193, \"effects\": [\"panning\", \"chord type\", \"note filter\", \"reverb\"], \"chord\": \"strum\", \"fastTwoNoteArp\": true, \"arpeggioSpeed\": 12, \"noteFilterType\": true, \"noteSimpleCut\": 9, \"noteSimplePeak\": 1, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.5 }], \"pan\": 0, \"panDelay\": 10, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"algorithm\": \"(1\u20022\u20023)\u21904\", \"feedbackType\": \"1\u27F2\u20032\u27F2\u20033\u27F2\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 7, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"5\u00D7\", \"amplitude\": 11, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"8\u00D7\", \"amplitude\": 7, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"20\u00D7\", \"amplitude\": 2, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 8, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 10, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n                { name: \"music box 1\", midiProgram: 10, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.5 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"harmonics\": [100, 0, 0, 100, 0, 0, 0, 0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 71, 0], \"unison\": \"none\", \"stringSustain\": 64, \"envelopes\": [] } },\n                { name: \"music box 2\", midiProgram: 10, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 0.7071 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"harmonics\": [100, 57, 57, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 0, 0, 0, 0, 0, 0, 0, 0], \"unison\": \"none\", \"stringSustain\": 29, \"envelopes\": [] } },\n                { name: \"vibraphone\", midiProgram: 11, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1\u20032\u20033\u20034\", \"feedbackType\": \"1\u21922\u21923\u21924\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"9\u00D7\", \"amplitude\": 3, \"envelope\": \"custom\" }, { \"frequency\": \"4\u00D7\", \"amplitude\": 9, \"envelope\": \"custom\" }] } },\n                { name: \"marimba\", midiProgram: 12, generalMidi: true, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"preset\": 197, \"effects\": [\"panning\", \"chord type\", \"note filter\", \"reverb\"], \"chord\": \"strum\", \"fastTwoNoteArp\": true, \"arpeggioSpeed\": 12, \"noteFilterType\": true, \"noteSimpleCut\": 6, \"noteSimplePeak\": 2, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.7071 }], \"pan\": 0, \"panDelay\": 10, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"algorithm\": \"1\u20032\u2190(3\u20024)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 10, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"4\u00D7\", \"amplitude\": 6, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"13\u00D7\", \"amplitude\": 6, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 10, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 2 }], \"isDrum\": false } },\n                { name: \"kalimba\", midiProgram: 108, generalMidi: true, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"preset\": 198, \"effects\": [\"panning\", \"chord type\", \"note filter\", \"reverb\"], \"chord\": \"strum\", \"fastTwoNoteArp\": true, \"arpeggioSpeed\": 12, \"noteFilterType\": true, \"noteSimpleCut\": 7, \"noteSimplePeak\": 1, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 0.5 }], \"pan\": 0, \"panDelay\": 10, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 11, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"5\u00D7\", \"amplitude\": 3, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"20\u00D7\", \"amplitude\": 3, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 10, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 8, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 2 }], \"isDrum\": false } },\n                { name: \"xylophone\", midiProgram: 13, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1\u20022\u20023)\u21904\", \"feedbackType\": \"1\u27F2\u20032\u27F2\u20033\u27F2\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"6\u00D7\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"11\u00D7\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"20\u00D7\", \"amplitude\": 6, \"envelope\": \"twang 1\" }] } },\n                { name: \"tubular bell\", midiProgram: 14, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }, { \"type\": \"high-pass\", \"cutoffHz\": 105.11, \"linearGain\": 0.3536 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 96, \"chord\": \"strum\", \"harmonics\": [43, 71, 0, 100, 0, 100, 0, 86, 0, 0, 86, 0, 14, 71, 14, 14, 57, 14, 14, 43, 14, 14, 43, 14, 14, 43, 14, 14], \"unison\": \"shimmer\", \"stringSustain\": 86, \"envelopes\": [] } },\n                { name: \"bell synth\", midiProgram: 14, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~2\u00D7\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"7\u00D7\", \"amplitude\": 6, \"envelope\": \"twang 3\" }, { \"frequency\": \"20\u00D7\", \"amplitude\": 1, \"envelope\": \"twang 1\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n                { name: \"rain drop\", midiProgram: 96, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1\u20022)\u2190(3\u20024)\", \"feedbackType\": \"1\u27F2\u20032\u27F2\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"6\u00D7\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"20\u00D7\", \"amplitude\": 3, \"envelope\": \"twang 1\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 6, \"envelope\": \"tremolo1\" }] } },\n                { name: \"crystal\", midiProgram: 98, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"delayed\", \"algorithm\": \"1\u20032\u20033\u20034\", \"feedbackType\": \"1\u27F2 2\u27F2 3\u27F2 4\u27F2\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"3\u00D7\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"6\u00D7\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"13\u00D7\", \"amplitude\": 4, \"envelope\": \"custom\" }] } },\n                { name: \"tinkle bell\", midiProgram: 112, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1\u20032\u20033\u20034\", \"feedbackType\": \"1\u21922\u21923\u21924\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"~2\u00D7\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"5\u00D7\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"7\u00D7\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"16\u00D7\", \"amplitude\": 7, \"envelope\": \"custom\" }] } },\n                { name: \"agogo\", midiProgram: 113, generalMidi: true, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"preset\": 205, \"effects\": [\"panning\", \"chord type\", \"note filter\", \"reverb\"], \"chord\": \"strum\", \"fastTwoNoteArp\": true, \"arpeggioSpeed\": 12, \"noteFilterType\": true, \"noteSimpleCut\": 8, \"noteSimplePeak\": 1, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.5 }], \"pan\": 0, \"panDelay\": 10, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"algorithm\": \"1\u20032\u20033\u20034\", \"feedbackType\": \"1\u21924\", \"feedbackAmplitude\": 15, \"operators\": [{ \"frequency\": \"2\u00D7\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"5\u00D7\", \"amplitude\": 6, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"8\u00D7\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"13\u00D7\", \"amplitude\": 11, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 10, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 10, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n            ])\n        },\n        {\n            name: \"Guitar Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"nylon guitar\", midiProgram: 24, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1\u21902\u21903\u21904\", \"feedbackType\": \"3\u27F2\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"5\u00D7\", \"amplitude\": 2, \"envelope\": \"steady\" }, { \"frequency\": \"7\u00D7\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\n                { name: \"steel guitar\", midiProgram: 25, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"harmonics\": [100, 100, 86, 71, 71, 71, 86, 86, 71, 57, 43, 43, 43, 57, 57, 57, 57, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43], \"unison\": \"none\", \"stringSustain\": 71, \"envelopes\": [] } },\n                { name: \"jazz guitar\", midiProgram: 26, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 57, 71, 71, 43, 57, 71, 57, 43, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0] } },\n                { name: \"clean guitar\", midiProgram: 27, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 100, 100, 100, 86, 57, 86, 100, 100, 100, 71, 57, 43, 71, 86, 71, 57, 57, 71, 71, 71, 71, 57, 57, 57, 57, 57, 43] } },\n                { name: \"muted guitar\", midiProgram: 28, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1\u2190(2\u20023\u21904)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 4, \"envelope\": \"twang 3\" }, { \"frequency\": \"4\u00D7\", \"amplitude\": 4, \"envelope\": \"twang 2\" }, { \"frequency\": \"16\u00D7\", \"amplitude\": 4, \"envelope\": \"twang 1\" }] } },\n            ])\n        },\n        {\n            name: \"Picked Bass Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"acoustic bass\", midiProgram: 32, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14] } },\n                { name: \"fingered bass\", midiProgram: 33, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 86, 71, 57, 71, 43, 57, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 0] } },\n                { name: \"picked bass\", midiProgram: 34, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1\u2190(2\u20023\u21904)\", \"feedbackType\": \"3\u27F2\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"11\u00D7\", \"amplitude\": 1, \"envelope\": \"twang 3\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 9, \"envelope\": \"steady\" }] } },\n                { name: \"fretless bass\", midiProgram: 35, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 1000, \"filterResonance\": 14, \"filterEnvelope\": \"flare 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 86, 71, 71, 57, 57, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 29, 14] } },\n                { name: \"slap bass 1\", midiProgram: 36, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 100, 100, 100, 86, 71, 57, 29, 29, 43, 43, 57, 71, 57, 29, 29, 43, 57, 57, 57, 43, 43, 43, 57, 71, 71, 71, 71] } },\n                { name: \"slap bass 2\", midiProgram: 37, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1\u21902\u21903\u21904\", \"feedbackType\": \"3\u27F2\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"3\u00D7\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"13\u00D7\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\n                { name: \"bass synth 1\", midiProgram: 38, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"strum\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1\u21903\u20032\u21904\", \"feedbackType\": \"3\u27F2\u20034\u27F2\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 14, \"envelope\": \"twang 1\" }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 13, \"envelope\": \"twang 2\" }] } },\n                { name: \"bass synth 2\", midiProgram: 39, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 1000, \"filterResonance\": 57, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"1\u21922\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 9, \"envelope\": \"steady\" }, { \"frequency\": \"3\u00D7\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n                { name: \"bass & lead\", midiProgram: 87, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"hard\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 86, \"filterEnvelope\": \"twang 2\", \"wave\": \"sawtooth\", \"interval\": \"shimmer\", \"vibrato\": \"none\" } },\n                { name: \"dubstep yoi yoi\", midiProgram: 87, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.7071 }], \"effects\": [\"note filter\", \"bitcrusher\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 594.6, \"linearGain\": 11.3137 }], \"bitcrusherOctave\": 1.5, \"bitcrusherQuantization\": 0, \"transition\": \"slide\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"wave\": \"sawtooth\", \"unison\": \"none\", \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"flare 2\", \"index\": 0 }] } },\n            ])\n        },\n        {\n            name: \"Picked String Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"pizzicato strings\", midiProgram: 45, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"medium fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"(1\u20022\u20023)\u21904\", \"feedbackType\": \"1\u27F2 2\u27F2 3\u27F2 4\u27F2\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"3\u00D7\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"6\u00D7\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 10, \"envelope\": \"steady\" }] } },\n                { name: \"harp\", midiProgram: 46, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"hard fade\", \"effects\": \"reverb\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1\u21903\u20032\u21904\", \"feedbackType\": \"3\u27F2\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"4\u00D7\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"~2\u00D7\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 6, \"envelope\": \"steady\" }] } },\n                { name: \"sitar\", midiProgram: 104, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"hard fade\", \"effects\": \"reverb\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 57, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 14, \"envelope\": \"twang 3\" }, { \"frequency\": \"9\u00D7\", \"amplitude\": 3, \"envelope\": \"twang 3\" }, { \"frequency\": \"16\u00D7\", \"amplitude\": 9, \"envelope\": \"swell 3\" }] } },\n                { name: \"banjo\", midiProgram: 105, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1\u2190(2\u20023\u21904)\", \"feedbackType\": \"2\u27F2\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4\u00D7\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 10, \"envelope\": \"steady\" }, { \"frequency\": \"11\u00D7\", \"amplitude\": 3, \"envelope\": \"twang 3\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\n                { name: \"ukulele\", midiProgram: 105, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 0, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1\u2190(2\u20023\u21904)\", \"feedbackType\": \"3\u27F2\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"2\u00D7\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"9\u00D7\", \"amplitude\": 4, \"envelope\": \"twang 2\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 11, \"envelope\": \"steady\" }] } },\n                { name: \"shamisen\", midiProgram: 106, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"vibrato\": \"none\", \"algorithm\": \"1\u2190(2\u20023\u21904)\", \"feedbackType\": \"3\u27F2\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 12, \"envelope\": \"steady\" }, { \"frequency\": \"16\u00D7\", \"amplitude\": 4, \"envelope\": \"twang 3\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 7, \"envelope\": \"steady\" }] } },\n                { name: \"koto\", midiProgram: 107, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"vibrato\": \"none\", \"algorithm\": \"1\u21903\u20032\u21904\", \"feedbackType\": \"1\u27F2\u20032\u27F2\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 2\", \"operators\": [{ \"frequency\": \"~1\u00D7\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"6\u00D7\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"4\u00D7\", \"amplitude\": 8, \"envelope\": \"twang 3\" }, { \"frequency\": \"~2\u00D7\", \"amplitude\": 8, \"envelope\": \"twang 3\" }] } },\n            ])\n        },\n        {\n            name: \"Distortion Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"overdrive guitar\", midiProgram: 29, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.7071 }, { \"type\": \"high-pass\", \"cutoffHz\": 210.22, \"linearGain\": 1 }, { \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.5 }], \"effects\": [\"note filter\", \"distortion\"], \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 2 }, { \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.7071 }], \"distortion\": 71, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"chord\": \"strum\", \"harmonics\": [86, 100, 100, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57], \"unison\": \"none\", \"stringSustain\": 71, \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"note size\", \"index\": 1 }] } },\n                { name: \"distortion guitar\", midiProgram: 30, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.7071 }, { \"type\": \"high-pass\", \"cutoffHz\": 210.22, \"linearGain\": 1 }, { \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 0.25 }], \"effects\": [\"note filter\", \"distortion\", \"reverb\"], \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 353.55, \"linearGain\": 2 }, { \"type\": \"low-pass\", \"cutoffHz\": 2000, \"linearGain\": 1 }], \"distortion\": 86, \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"chord\": \"strum\", \"harmonics\": [86, 100, 100, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57, 57], \"unison\": \"none\", \"stringSustain\": 71, \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"note size\", \"index\": 1 }] } },\n                { name: \"charango synth\", midiProgram: 84, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 1 }], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"algorithm\": \"1\u2190(2\u20023\u21904)\", \"feedbackType\": \"1\u21922\u21923\u21924\", \"feedbackAmplitude\": 8, \"operators\": [{ \"frequency\": \"3\u00D7\", \"amplitude\": 13 }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 5 }, { \"frequency\": \"4\u00D7\", \"amplitude\": 6 }, { \"frequency\": \"3\u00D7\", \"amplitude\": 7 }], \"envelopes\": [{ \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\n                { name: \"guitar harmonics\", midiProgram: 31, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 2 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"algorithm\": \"1\u2190(2\u20023)\u21904\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"4\u00D7\", \"amplitude\": 12 }, { \"frequency\": \"16\u00D7\", \"amplitude\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 2 }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 12 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 1\", \"index\": 3 }] } },\n                { name: \"PWM overdrive\", midiProgram: 29, settings: { \"type\": \"PWM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1.4142 }], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"pulseWidth\": 17.67767, \"envelopes\": [{ \"target\": \"pulseWidth\", \"envelope\": \"punch\" }] } },\n                { name: \"PWM distortion\", midiProgram: 30, settings: { \"type\": \"PWM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 2 }], \"effects\": [\"vibrato\"], \"vibrato\": \"delayed\", \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"pulseWidth\": 50, \"envelopes\": [{ \"target\": \"pulseWidth\", \"envelope\": \"swell 1\" }] } },\n                { name: \"FM overdrive\", midiProgram: 29, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 1 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"algorithm\": \"1\u2190(2\u20023\u21904)\", \"feedbackType\": \"1\u21922\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"~1\u00D7\", \"amplitude\": 15 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 12 }, { \"frequency\": \"~2\u00D7\", \"amplitude\": 6 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 12 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"twang 1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 3\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"punch\" }] } },\n                { name: \"FM distortion\", midiProgram: 30, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 2 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"strum\", \"algorithm\": \"1\u2190(2\u20023\u21904)\", \"feedbackType\": \"1\u21922\", \"feedbackAmplitude\": 4, \"operators\": [{ \"frequency\": \"~1\u00D7\", \"amplitude\": 15 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 11 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 9 }, { \"frequency\": \"~2\u00D7\", \"amplitude\": 4 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 3\", \"index\": 3 }] } },\n            ])\n        },\n        {\n            name: \"Bellows Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"drawbar organ 1\", midiProgram: 16, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 86, 0, 86, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\n                { name: \"drawbar organ 2\", midiProgram: 16, midiSubharmonicOctaves: 1, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [86, 29, 71, 86, 71, 14, 0, 100, 0, 0, 0, 86, 0, 0, 0, 71, 0, 0, 0, 57, 0, 0, 0, 29, 0, 0, 0, 0] } },\n                { name: \"percussive organ\", midiProgram: 17, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"preset\": 515, \"effects\": [\"panning\", \"vibrato\", \"note filter\", \"chorus\", \"reverb\"], \"vibrato\": \"delayed\", \"vibratoDepth\": 0.3, \"vibratoDelay\": 18.5, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": true, \"noteSimpleCut\": 8, \"noteSimplePeak\": 1, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 0.5 }], \"pan\": 0, \"panDelay\": 10, \"chorus\": 100, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"algorithm\": \"(1\u20022\u20023)\u21904\", \"feedbackType\": \"1\u27F2\u20032\u27F2\u20033\u27F2\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"4\u00D7\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"6\u00D7\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"2\u00D7\", \"amplitude\": 5, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"punch\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n                { name: \"rock organ\", midiProgram: 18, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"delayed\", \"algorithm\": \"(1\u20022\u20023)\u21904\", \"feedbackType\": \"1\u27F2\u20032\u27F2\u20033\u27F2\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"flare 1\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"4\u00D7\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"6\u00D7\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"2\u00D7\", \"amplitude\": 5, \"envelope\": \"steady\" }] } },\n                { name: \"pipe organ\", midiProgram: 19, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"transition\": \"cross fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1\u20032\u20033\u20034\", \"feedbackType\": \"1\u27F2 2\u27F2 3\u27F2 4\u27F2\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"2\u00D7\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"4\u00D7\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"8\u00D7\", \"amplitude\": 8, \"envelope\": \"custom\" }] } },\n                { name: \"reed organ\", midiProgram: 20, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [71, 86, 100, 86, 71, 100, 57, 71, 71, 71, 43, 43, 43, 71, 43, 71, 57, 57, 57, 57, 57, 57, 57, 29, 43, 29, 29, 14] } },\n                { name: \"accordion\", midiProgram: 21, generalMidi: true, settings: { \"type\": \"chip\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 0, \"filterEnvelope\": \"swell 1\", \"wave\": \"double saw\", \"interval\": \"honky tonk\", \"vibrato\": \"none\" } },\n                { name: \"bandoneon\", midiProgram: 23, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"interval\": \"hum\", \"vibrato\": \"none\", \"harmonics\": [86, 86, 86, 57, 71, 86, 57, 71, 71, 71, 57, 43, 57, 43, 71, 43, 71, 57, 57, 43, 43, 43, 57, 43, 43, 29, 29, 29] } },\n                { name: \"bagpipe\", midiProgram: 109, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"punch\", \"interval\": \"hum\", \"vibrato\": \"none\", \"harmonics\": [71, 86, 86, 100, 100, 86, 57, 100, 86, 71, 71, 71, 57, 57, 57, 71, 57, 71, 57, 71, 43, 57, 57, 43, 43, 43, 43, 43] } },\n            ])\n        },\n        {\n            name: \"String Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"violin 1\", midiProgram: 40, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 105.11, \"linearGain\": 0.3536 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"delayed\", \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 6, \"chord\": \"simultaneous\", \"algorithm\": \"(1\u20022)\u2190(3\u20024)\", \"feedbackType\": \"1\u21922\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"4\u00D7\", \"amplitude\": 9 }, { \"frequency\": \"3\u00D7\", \"amplitude\": 9 }, { \"frequency\": \"2\u00D7\", \"amplitude\": 7 }, { \"frequency\": \"7\u00D7\", \"amplitude\": 5 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\n                { name: \"viola\", midiProgram: 41, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1\u20022\u20023)\u21904\", \"feedbackType\": \"1\u27F2\u20032\u27F2\u20033\u27F2\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"2\u00D7\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"7\u00D7\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"13\u00D7\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 5, \"envelope\": \"steady\" }] } },\n                { name: \"cello\", midiProgram: 42, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 0.1768 }, { \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 0.7071 }, { \"type\": \"peak\", \"cutoffHz\": 4756.83, \"linearGain\": 5.6569 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.0884 }], \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 12, \"chord\": \"simultaneous\", \"algorithm\": \"(1\u20022)\u21903\u21904\", \"feedbackType\": \"1\u27F2\u20032\u27F2\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"16\u00D7\", \"amplitude\": 5 }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 10 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 9 }, { \"frequency\": \"6\u00D7\", \"amplitude\": 3 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 1\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 3 }] } },\n                { name: \"contrabass\", midiProgram: 43, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1\u20022)\u21903\u21904\", \"feedbackType\": \"1\u27F2\u20032\u27F2\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"16\u00D7\", \"amplitude\": 5, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 10, \"envelope\": \"steady\" }, { \"frequency\": \"6\u00D7\", \"amplitude\": 3, \"envelope\": \"swell 1\" }] } },\n                { name: \"fiddle\", midiProgram: 110, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"(1\u20022)\u2190(3\u20024)\", \"feedbackType\": \"3\u27F2\u20034\u27F2\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"2\u00D7\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"8\u00D7\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"16\u00D7\", \"amplitude\": 3, \"envelope\": \"steady\" }] } },\n                { name: \"tremolo strings\", midiProgram: 44, generalMidi: true, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"effects\": [\"panning\", \"note filter\", \"chorus\", \"reverb\"], \"noteFilterType\": true, \"noteSimpleCut\": 6, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 0.1768 }], \"pan\": 0, \"panDelay\": 10, \"chorus\": 100, \"reverb\": 0, \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"algorithm\": \"1\u20032\u20033\u20034\", \"feedbackType\": \"1\u21922\u21923\u21924\", \"feedbackAmplitude\": 12, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2\u00D7\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"4\u00D7\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"7\u00D7\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 4, \"perEnvelopeLowerBound\": 0.5, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n                { name: \"strings\", midiProgram: 48, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"(1\u20022)\u2190(3\u20024)\", \"feedbackType\": \"4\u27F2\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"4\u00D7\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"3\u00D7\", \"amplitude\": 9, \"envelope\": \"custom\" }, { \"frequency\": \"2\u00D7\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7\u00D7\", \"amplitude\": 3, \"envelope\": \"swell 1\" }] } },\n                { name: \"slow strings\", midiProgram: 49, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 0, \"filterEnvelope\": \"swell 2\", \"vibrato\": \"none\", \"algorithm\": \"(1\u20022)\u2190(3\u20024)\", \"feedbackType\": \"4\u27F2\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"flare 3\", \"operators\": [{ \"frequency\": \"4\u00D7\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"3\u00D7\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"2\u00D7\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7\u00D7\", \"amplitude\": 4, \"envelope\": \"swell 1\" }] } },\n                { name: \"strings synth 1\", midiProgram: 50, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"soft fade\", \"effects\": \"chorus & reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"wave\": \"sawtooth\", \"interval\": \"hum\", \"vibrato\": \"delayed\" } },\n                { name: \"strings synth 2\", midiProgram: 51, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1\u20032\u20033\u20034\", \"feedbackType\": \"1\u27F2 2\u27F2 3\u27F2 4\u27F2\", \"feedbackAmplitude\": 12, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"3\u00D7\", \"amplitude\": 6, \"envelope\": \"custom\" }, { \"frequency\": \"2\u00D7\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 8, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 9, \"envelope\": \"custom\" }] } },\n                { name: \"orchestra hit 1\", midiProgram: 55, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"custom\", \"vibrato\": \"none\", \"algorithm\": \"1\u20032\u20033\u20034\", \"feedbackType\": \"1\u27F2 2\u27F2 3\u27F2 4\u27F2\", \"feedbackAmplitude\": 14, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"envelope\": \"twang 3\" }, { \"frequency\": \"2\u00D7\", \"amplitude\": 15, \"envelope\": \"flare 3\" }, { \"frequency\": \"4\u00D7\", \"amplitude\": 15, \"envelope\": \"flare 2\" }, { \"frequency\": \"8\u00D7\", \"amplitude\": 15, \"envelope\": \"flare 1\" }] } },\n                { name: \"violin 2\", midiProgram: 40, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 105.11, \"linearGain\": 0.3536 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"light\", \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 6, \"chord\": \"simultaneous\", \"algorithm\": \"(1\u20022)\u2190(3\u20024)\", \"feedbackType\": \"4\u27F2\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"twang 3\", \"operators\": [{ \"frequency\": \"4\u00D7\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"3\u00D7\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"2\u00D7\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"7\u00D7\", \"amplitude\": 8, \"envelope\": \"swell 1\" }] } },\n                { name: \"orchestra hit 2\", midiProgram: 55, midiSubharmonicOctaves: 1, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"preset\": 588, \"effects\": [\"panning\", \"vibrato\", \"note filter\", \"chorus\", \"reverb\"], \"vibrato\": \"delayed\", \"vibratoDepth\": 0.3, \"vibratoDelay\": 18.5, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": true, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.5 }], \"pan\": 0, \"panDelay\": 10, \"chorus\": 100, \"reverb\": 0, \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"algorithm\": \"1\u20032\u20033\u20034\", \"feedbackType\": \"1\u27F2 2\u27F2 3\u27F2 4\u27F2\", \"feedbackAmplitude\": 14, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 12, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"2\u00D7\", \"amplitude\": 14, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"3\u00D7\", \"amplitude\": 12, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"4\u00D7\", \"amplitude\": 14, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 10, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n                { name: \"supersaw string\", midiProgram: 41, settings: { \"type\": \"supersaw\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 1.4142 }, { \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 0.1768 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 500, \"linearGain\": 0.1768 }], \"reverb\": 33, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": 6, \"pulseWidth\": 35.35534, \"dynamism\": 83, \"spread\": 8, \"shape\": 50, \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"twang 1\", \"index\": 0 }] } },\n                { name: \"supersaw string 2\", midiProgram: 41, settings: { \"type\": \"supersaw\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.5 }, { \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 4756.83, \"linearGain\": 2 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.5 }, { \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 4756.83, \"linearGain\": 2 }], \"effects\": [\"note filter\", \"chorus\", \"reverb\"], \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 1 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 1 }], \"chorus\": 57, \"reverb\": 42, \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": -6, \"pulseWidth\": 50, \"dynamism\": 67, \"spread\": 58, \"shape\": 0, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"punch\" }, { \"target\": \"pulseWidth\", \"envelope\": \"flare 2\" }] } },\n            ])\n        },\n        {\n            name: \"Vocal Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"choir soprano\", midiProgram: 94, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 5.6569 }, { \"type\": \"high-pass\", \"cutoffHz\": 707.11, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.25 }, { \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 11.3137 }], \"effects\": [\"vibrato\", \"chorus\", \"reverb\"], \"vibrato\": \"shaky\", \"chorus\": 100, \"reverb\": 33, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 24, \"harmonics\": [100, 100, 86, 57, 29, 29, 57, 71, 57, 29, 14, 14, 14, 29, 43, 57, 43, 29, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [] } },\n                { name: \"choir tenor\", midiProgram: 52, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 11.3137 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 0.7071 }, { \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 11.3137 }], \"effects\": [\"vibrato\", \"chorus\", \"reverb\"], \"vibrato\": \"shaky\", \"chorus\": 100, \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [86, 100, 100, 86, 71, 57, 43, 29, 29, 29, 29, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14], \"unison\": \"none\", \"envelopes\": [] } },\n                { name: \"choir bass\", midiProgram: 52, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 11.3137 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 11.3137 }], \"effects\": [\"vibrato\", \"chorus\", \"reverb\"], \"vibrato\": \"shaky\", \"chorus\": 100, \"reverb\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"harmonics\": [71, 86, 100, 100, 86, 86, 57, 43, 29, 29, 29, 29, 29, 29, 43, 43, 43, 43, 43, 29, 29, 29, 29, 14, 14, 14, 14, 14], \"unison\": \"none\", \"envelopes\": [] } },\n                { name: \"solo soprano\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 5.6569 }, { \"type\": \"high-pass\", \"cutoffHz\": 707.11, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.25 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"shaky\", \"reverb\": 33, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 12, \"harmonics\": [86, 100, 86, 43, 14, 14, 57, 71, 57, 14, 14, 14, 14, 14, 43, 57, 43, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [] } },\n                { name: \"solo tenor\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 11.3137 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 297.3, \"linearGain\": 0.7071 }, { \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 11.3137 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"shaky\", \"reverb\": 33, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 12, \"harmonics\": [86, 100, 100, 86, 71, 57, 43, 29, 29, 29, 29, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14], \"unison\": \"none\", \"envelopes\": [] } },\n                { name: \"solo bass\", midiProgram: 85, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 8 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 8 }, { \"type\": \"high-pass\", \"cutoffHz\": 210.22, \"linearGain\": 1.4142 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"shaky\", \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": 12, \"chord\": \"simultaneous\", \"harmonics\": [71, 86, 100, 100, 86, 86, 57, 43, 29, 29, 29, 29, 29, 29, 43, 43, 43, 43, 43, 29, 29, 29, 29, 14, 14, 14, 14, 14], \"unison\": \"none\", \"envelopes\": [] } },\n                { name: \"voice ooh\", midiProgram: 53, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"shaky\", \"harmonics\": [100, 57, 43, 43, 14, 14, 0, 0, 0, 14, 29, 29, 14, 0, 14, 29, 29, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\n                { name: \"voice synth\", midiProgram: 54, generalMidi: true, settings: { \"type\": \"chip\", \"transition\": \"medium fade\", \"effects\": \"chorus & reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"wave\": \"rounded\", \"interval\": \"union\", \"vibrato\": \"light\" } },\n                { name: \"vox synth lead\", midiProgram: 85, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"(1\u20022\u20023)\u21904\", \"feedbackType\": \"1\u21922\u21923\u21924\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"punch\", \"operators\": [{ \"frequency\": \"2\u00D7\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"9\u00D7\", \"amplitude\": 5, \"envelope\": \"custom\" }, { \"frequency\": \"20\u00D7\", \"amplitude\": 1, \"envelope\": \"custom\" }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\n                { name: \"tiny robot\", midiProgram: 85, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"delayed\", \"reverb\": 33, \"transition\": \"slide\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"2\u00D7\", \"amplitude\": 15 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 7 }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 7 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 1 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\n                { name: \"yowie\", midiProgram: 85, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"effects\": [\"panning\", \"note filter\", \"reverb\"], \"noteFilterType\": true, \"noteSimpleCut\": 6, \"noteSimplePeak\": 6, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2000, \"linearGain\": 4 }], \"pan\": 0, \"panDelay\": 10, \"reverb\": 0, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 6, \"algorithm\": \"1\u21902\u2190(3\u20024)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 12, \"operators\": [{ \"frequency\": \"2\u00D7\", \"amplitude\": 12, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"16\u00D7\", \"amplitude\": 5, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 5, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 2, \"perEnvelopeLowerBound\": 0.5, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 1, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n                { name: \"mouse\", midiProgram: 85, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"light\", \"reverb\": 33, \"transition\": \"slide in pattern\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1\u20032\u20033\u20034\", \"feedbackType\": \"1\u27F2\u20032\u27F2\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"2\u00D7\", \"amplitude\": 13 }, { \"frequency\": \"5\u00D7\", \"amplitude\": 12 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"note size\" }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 2\" }] } },\n                { name: \"gumdrop\", midiProgram: 85, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"(1\u20022\u20023)\u21904\", \"feedbackType\": \"1\u27F2\u20032\u27F2\u20033\u27F2\", \"feedbackAmplitude\": 0, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2\u00D7\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"4\u00D7\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"7\u00D7\", \"amplitude\": 15, \"envelope\": \"punch\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 10, \"envelope\": \"twang 1\" }] } },\n                { name: \"echo drop\", midiProgram: 102, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1\u2190(2\u20023\u21904)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"~2\u00D7\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"11\u00D7\", \"amplitude\": 2, \"envelope\": \"steady\" }, { \"frequency\": \"16\u00D7\", \"amplitude\": 5, \"envelope\": \"swell 3\" }] } },\n                { name: \"dark choir\", midiProgram: 85, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"spectrum\": [43, 14, 14, 14, 14, 14, 14, 100, 14, 14, 14, 57, 14, 14, 100, 14, 43, 14, 43, 14, 14, 43, 14, 29, 14, 29, 14, 14, 29, 0] } },\n            ])\n        },\n        {\n            name: \"Brass Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"trumpet\", midiProgram: 56, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 5, \"envelope\": \"flare 2\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n                { name: \"trombone\", midiProgram: 57, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"2\u27F2\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n                { name: \"tuba\", midiProgram: 58, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"2\u27F2\", \"feedbackAmplitude\": 8, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n                { name: \"muted trumpet\", midiProgram: 59, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 4000, \"linearGain\": 2.8284 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 1 }], \"reverb\": 33, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1\u2190(2\u20023\u21904)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 13 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 5 }, { \"frequency\": \"9\u00D7\", \"amplitude\": 5 }, { \"frequency\": \"13\u00D7\", \"amplitude\": 7 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 1\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 2\" }] } },\n                { name: \"french horn\", midiProgram: 60, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 2378.41, \"linearGain\": 2.8284 }], \"effects\": [\"reverb\"], \"reverb\": 33, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1\u21903\u20032\u21904\", \"feedbackType\": \"1\u27F2\u20032\u27F2\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 12 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 10 }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 8 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 2\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"swell 1\" }] } },\n                { name: \"brass section\", midiProgram: 61, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"vibrato\": \"none\", \"algorithm\": \"1\u21903\u20032\u21904\", \"feedbackType\": \"1\u27F2\u20032\u27F2\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 10, \"envelope\": \"swell 1\" }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 10, \"envelope\": \"swell 1\" }] } },\n                { name: \"brass synth 1\", midiProgram: 62, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1\u21903\u20032\u21904\", \"feedbackType\": \"1\u27F2\u20032\u27F2\", \"feedbackAmplitude\": 11, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 14, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 12, \"envelope\": \"flare 1\" }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 8, \"envelope\": \"flare 2\" }] } },\n                { name: \"brass synth 2\", midiProgram: 63, generalMidi: true, settings: { \"type\": \"FM\", \"transition\": \"soft\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"twang 3\", \"vibrato\": \"none\", \"algorithm\": \"1\u21903\u20032\u21904\", \"feedbackType\": \"1\u27F2\u20032\u27F2\", \"feedbackAmplitude\": 9, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 10, \"envelope\": \"flare 1\" }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 7, \"envelope\": \"flare 1\" }] } },\n                { name: \"pulse brass\", midiProgram: 62, settings: { \"type\": \"PWM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 1\", \"pulseWidth\": 50, \"pulseEnvelope\": \"flare 3\", \"vibrato\": \"none\" } },\n            ])\n        },\n        {\n            name: \"Reed Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"soprano sax\", midiProgram: 64, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1\u21902\u21903\u21904\", \"feedbackType\": \"4\u27F2\", \"feedbackAmplitude\": 5, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"4\u00D7\", \"amplitude\": 4, \"envelope\": \"swell 1\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"5\u00D7\", \"amplitude\": 4, \"envelope\": \"punch\" }] } },\n                { name: \"alto sax\", midiProgram: 65, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1\u2190(2\u20023\u21904)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"punch\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 13, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"4\u00D7\", \"amplitude\": 6, \"envelope\": \"swell 1\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 12, \"envelope\": \"steady\" }] } },\n                { name: \"tenor sax\", midiProgram: 66, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1\u21902\u21903\u21904\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 6, \"feedbackEnvelope\": \"swell 1\", \"operators\": [{ \"frequency\": \"2\u00D7\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"3\u00D7\", \"amplitude\": 7, \"envelope\": \"steady\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 3, \"envelope\": \"steady\" }, { \"frequency\": \"8\u00D7\", \"amplitude\": 3, \"envelope\": \"steady\" }] } },\n                { name: \"baritone sax\", midiProgram: 67, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1\u2190(2\u20023\u21904)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"swell 2\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"8\u00D7\", \"amplitude\": 4, \"envelope\": \"steady\" }, { \"frequency\": \"4\u00D7\", \"amplitude\": 5, \"envelope\": \"steady\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 4, \"envelope\": \"punch\" }] } },\n                { name: \"sax synth\", midiProgram: 64, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"1\u27F2\u20032\u27F2\", \"feedbackAmplitude\": 4, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4\u00D7\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"envelope\": \"steady\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n                { name: \"shehnai\", midiProgram: 111, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 8000, \"filterResonance\": 0, \"filterEnvelope\": \"steady\", \"vibrato\": \"light\", \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 3, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4\u00D7\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 8, \"envelope\": \"steady\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"envelope\": \"steady\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n                { name: \"oboe\", midiProgram: 68, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 1\", \"vibrato\": \"none\", \"algorithm\": \"1\u20032\u2190(3\u20024)\", \"feedbackType\": \"2\u27F2\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"tremolo5\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 7, \"envelope\": \"custom\" }, { \"frequency\": \"4\u00D7\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"6\u00D7\", \"amplitude\": 2, \"envelope\": \"steady\" }] } },\n                { name: \"english horn\", midiProgram: 69, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1\u20032\u2190(3\u20024)\", \"feedbackType\": \"2\u27F2\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"4\u00D7\", \"amplitude\": 12, \"envelope\": \"custom\" }, { \"frequency\": \"2\u00D7\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 8, \"envelope\": \"punch\" }, { \"frequency\": \"8\u00D7\", \"amplitude\": 4, \"envelope\": \"steady\" }] } },\n                { name: \"bassoon\", midiProgram: 70, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 707, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1\u2190(2\u20023\u21904)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 2, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"2\u00D7\", \"amplitude\": 11, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 6, \"envelope\": \"steady\" }, { \"frequency\": \"6\u00D7\", \"amplitude\": 6, \"envelope\": \"swell 1\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"envelope\": \"steady\" }] } },\n                { name: \"clarinet\", midiProgram: 71, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 43, 86, 57, 86, 71, 86, 71, 71, 71, 71, 71, 71, 43, 71, 71, 57, 57, 57, 57, 57, 57, 43, 43, 43, 29, 14, 0] } },\n                { name: \"harmonica\", midiProgram: 22, generalMidi: true, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"preset\": 778, \"effects\": [\"panning\", \"note filter\", \"reverb\"], \"noteFilterType\": true, \"noteSimpleCut\": 9, \"noteSimplePeak\": 2, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 7231.23, \"linearGain\": 1 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 7231.23, \"linearGain\": 1 }], \"pan\": 0, \"panDelay\": 10, \"reverb\": 0, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1\u2190(2\u20023\u21904)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 9, \"operators\": [{ \"frequency\": \"2\u00D7\", \"amplitude\": 14, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2\u00D7\", \"amplitude\": 2, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 2, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 2 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"tremolo2\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 2, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n            ])\n        },\n        {\n            name: \"Flute Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"flute 1\", midiProgram: 73, generalMidi: true, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9656.85, \"linearGain\": 0.5 }], \"eqFilterType\": true, \"eqSimpleCut\": 9, \"eqSimplePeak\": 1, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"preset\": 832, \"eqSubFilters1\": [], \"effects\": [\"panning\", \"reverb\"], \"pan\": 0, \"panDelay\": 10, \"reverb\": 0, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"4\u27F2\", \"feedbackAmplitude\": 7, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"2\u00D7\", \"amplitude\": 4, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 3, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 1, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 7, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n                { name: \"recorder\", midiProgram: 74, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 29, \"filterEnvelope\": \"swell 2\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 43, 57, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0] } },\n                { name: \"whistle\", midiProgram: 78, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"chorus & reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"delayed\", \"harmonics\": [100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\n                { name: \"ocarina\", midiProgram: 79, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"none\", \"harmonics\": [100, 14, 57, 14, 29, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0] } },\n                { name: \"piccolo\", midiProgram: 72, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 43, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1\u21903\u20032\u21904\", \"feedbackType\": \"4\u27F2\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"1\u00D7\", \"amplitude\": 10, \"envelope\": \"custom\" }, { \"frequency\": \"~2\u00D7\", \"amplitude\": 3, \"envelope\": \"punch\" }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 5, \"envelope\": \"punch\" }] } },\n                { name: \"shakuhachi\", midiProgram: 77, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"vibrato\": \"delayed\", \"algorithm\": \"1\u2190(2\u20023\u21904)\", \"feedbackType\": \"3\u21924\", \"feedbackAmplitude\": 15, \"feedbackEnvelope\": \"steady\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"2\u00D7\", \"amplitude\": 3, \"envelope\": \"punch\" }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 4, \"envelope\": \"twang 1\" }, { \"frequency\": \"20\u00D7\", \"amplitude\": 15, \"envelope\": \"steady\" }] } },\n                { name: \"pan flute\", midiProgram: 75, generalMidi: true, settings: { \"type\": \"spectrum\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 5.6569 }], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.7071 }], \"reverb\": 33, \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -3, \"spectrum\": [100, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 71, 0, 0, 14, 0, 57, 0, 29, 14, 29, 14, 14, 29, 14, 29, 14, 14, 29, 14], \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"twang 1\", \"index\": 0 }, { \"target\": \"noteVolume\", \"envelope\": \"punch\" }] } },\n                { name: \"blown bottle\", midiProgram: 76, generalMidi: true, settings: { \"type\": \"FM\", \"effects\": \"chorus & reverb\", \"transition\": \"cross fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 57, \"filterEnvelope\": \"steady\", \"vibrato\": \"none\", \"algorithm\": \"1\u20032\u20033\u20034\", \"feedbackType\": \"1\u27F2 2\u27F2 3\u27F2 4\u27F2\", \"feedbackAmplitude\": 7, \"feedbackEnvelope\": \"twang 1\", \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"envelope\": \"custom\" }, { \"frequency\": \"3\u00D7\", \"amplitude\": 4, \"envelope\": \"custom\" }, { \"frequency\": \"6\u00D7\", \"amplitude\": 2, \"envelope\": \"custom\" }, { \"frequency\": \"11\u00D7\", \"amplitude\": 2, \"envelope\": \"custom\" }] } },\n                { name: \"calliope\", midiProgram: 82, generalMidi: true, settings: { \"type\": \"spectrum\", \"transition\": \"cross fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 5657, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"spectrum\": [100, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 71, 0, 0, 57, 0, 43, 0, 29, 14, 14, 29, 14, 14, 14, 14, 14, 14, 14, 14] } },\n                { name: \"chiffer\", midiProgram: 83, generalMidi: true, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"punch\", \"spectrum\": [86, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 71, 0, 0, 57, 0, 57, 0, 43, 14, 14, 43, 14, 29, 14, 29, 29, 29, 29, 14] } },\n                { name: \"breath noise\", midiProgram: 121, generalMidi: true, settings: { \"type\": \"spectrum\", \"eqFilter\": [], \"effects\": [\"chord type\", \"note filter\", \"reverb\"], \"chord\": \"strum\", \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 840.9, \"linearGain\": 0.3536 }, { \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.3536 }], \"reverb\": 33, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 12, \"spectrum\": [71, 0, 0, 0, 0, 0, 0, 29, 0, 0, 0, 71, 0, 0, 29, 0, 100, 29, 14, 29, 100, 29, 100, 14, 14, 71, 0, 29, 0, 0], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 1\" }] } },\n                { name: \"flute 2\", midiProgram: 73, generalMidi: true, settings: { \"type\": \"harmonics\", \"effects\": \"reverb\", \"transition\": \"seamless\", \"chord\": \"harmony\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"steady\", \"interval\": \"union\", \"vibrato\": \"delayed\", \"harmonics\": [100, 43, 86, 57, 86, 71, 86, 71, 71, 71, 71, 71, 71, 43, 71, 71, 57, 57, 57, 57, 57, 57, 43, 43, 43, 29, 14, 0] } },\n            ])\n        },\n        {\n            name: \"Pad Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"new age pad\", midiProgram: 88, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"chorus\"], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"algorithm\": \"1\u2190(2\u20023\u21904)\", \"feedbackType\": \"1\u27F2\u20032\u27F2\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"2\u00D7\", \"amplitude\": 14 }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 4 }, { \"frequency\": \"6\u00D7\", \"amplitude\": 3 }, { \"frequency\": \"13\u00D7\", \"amplitude\": 3 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 2\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"swell 3\" }] } },\n                { name: \"warm pad\", midiProgram: 89, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 1 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"simultaneous\", \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 7, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 14 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 6 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 1\", \"index\": 1 }] } },\n                { name: \"polysynth pad\", midiProgram: 90, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"vibrato\", \"note filter\", \"chorus\"], \"vibrato\": \"delayed\", \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 1 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"honky tonk\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }] } },\n                { name: \"space voice pad\", midiProgram: 91, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 1414.21, \"linearGain\": 0.1768 }], \"effects\": [\"chorus\"], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"algorithm\": \"(1\u20022\u20023)\u21904\", \"feedbackType\": \"1\u27F2 2\u27F2 3\u27F2 4\u27F2\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 10 }, { \"frequency\": \"2\u00D7\", \"amplitude\": 8 }, { \"frequency\": \"3\u00D7\", \"amplitude\": 7 }, { \"frequency\": \"11\u00D7\", \"amplitude\": 2 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"swell 2\" }] } },\n                { name: \"bowed glass pad\", midiProgram: 92, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.5 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"simultaneous\", \"algorithm\": \"1\u21903\u20032\u21904\", \"feedbackType\": \"1\u27F2\u20032\u27F2\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 10 }, { \"frequency\": \"2\u00D7\", \"amplitude\": 12 }, { \"frequency\": \"3\u00D7\", \"amplitude\": 7 }, { \"frequency\": \"7\u00D7\", \"amplitude\": 4 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 3\", \"index\": 3 }] } },\n                { name: \"metallic pad\", midiProgram: 93, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.5 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"algorithm\": \"1\u21903\u20032\u21904\", \"feedbackType\": \"1\u27F2\u20032\u27F2\", \"feedbackAmplitude\": 13, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15 }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 9 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 7 }, { \"frequency\": \"11\u00D7\", \"amplitude\": 7 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 2\", \"index\": 2 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\n                { name: \"sweep pad\", midiProgram: 95, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 4 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"hum\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"flare 3\" }] } },\n                { name: \"atmosphere\", midiProgram: 99, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 1 }], \"effects\": [\"chorus\", \"reverb\"], \"chorus\": 100, \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"strum\", \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"3\u27F2\u20034\u27F2\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 14 }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 10 }, { \"frequency\": \"3\u00D7\", \"amplitude\": 7 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 7 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"swell 3\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 3 }] } },\n                { name: \"brightness\", midiProgram: 100, generalMidi: true, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 2 }], \"effects\": [\"chorus\"], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"harmonics\": [100, 86, 86, 86, 43, 57, 43, 71, 43, 43, 43, 57, 43, 43, 57, 71, 57, 43, 29, 43, 57, 57, 43, 29, 29, 29, 29, 14], \"unison\": \"octave\", \"stringSustain\": 86, \"envelopes\": [] } },\n                { name: \"goblins\", midiProgram: 101, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 11.3137 }], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.5 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"simultaneous\", \"algorithm\": \"1\u21902\u21903\u21904\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 10, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15 }, { \"frequency\": \"4\u00D7\", \"amplitude\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 10 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 2\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 3\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"tremolo1\", \"index\": 2 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 3\" }] } },\n                { name: \"sci-fi\", midiProgram: 103, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 9513.66, \"linearGain\": 2.8284 }], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.5 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"algorithm\": \"(1\u20022)\u21903\u21904\", \"feedbackType\": \"1\u27F2 2\u27F2 3\u27F2 4\u27F2\", \"feedbackAmplitude\": 8, \"operators\": [{ \"frequency\": \"~1\u00D7\", \"amplitude\": 13 }, { \"frequency\": \"2\u00D7\", \"amplitude\": 10 }, { \"frequency\": \"5\u00D7\", \"amplitude\": 5 }, { \"frequency\": \"11\u00D7\", \"amplitude\": 8 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"tremolo5\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang 3\" }] } },\n                { name: \"flutter pad\", midiProgram: 90, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"vibrato\", \"note filter\", \"chorus\"], \"vibrato\": \"delayed\", \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 4 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"algorithm\": \"(1\u20022)\u2190(3\u20024)\", \"feedbackType\": \"1\u27F2\u20032\u27F2\u20033\u27F2\", \"feedbackAmplitude\": 9, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 13 }, { \"frequency\": \"5\u00D7\", \"amplitude\": 7 }, { \"frequency\": \"7\u00D7\", \"amplitude\": 5 }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 6 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"tremolo1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 3 }] } },\n                { name: \"feedback pad\", midiProgram: 89, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 2378.41, \"linearGain\": 8 }], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": 96, \"chord\": \"custom interval\", \"algorithm\": \"1\u20032\u20033\u20034\", \"feedbackType\": \"1\u27F2 2\u27F2 3\u27F2 4\u27F2\", \"feedbackAmplitude\": 8, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 15 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 15 }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 15 }], \"envelopes\": [{ \"target\": \"feedbackAmplitude\", \"envelope\": \"swell 2\" }] } },\n                { name: \"supersaw pad\", midiProgram: 93, settings: { \"type\": \"supersaw\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.1768 }], \"effects\": [\"reverb\"], \"reverb\": 100, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": 24, \"pulseWidth\": 50, \"dynamism\": 100, \"spread\": 58, \"shape\": 0, \"envelopes\": [] } },\n            ])\n        },\n        {\n            name: \"Drum Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"standard drumset\", midiProgram: 116, isNoise: true, settings: { \"type\": \"drumset\", \"effects\": \"reverb\", \"drums\": [{ \"filterEnvelope\": \"twang 1\", \"spectrum\": [57, 71, 71, 86, 86, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 100, 71, 71, 57, 86, 57, 57, 57, 71, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43, 43] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 0, 100, 57, 43, 43, 29, 57, 43, 29, 71, 43, 43, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 29, 43, 43, 43] }, { \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 0, 0, 0, 0, 71, 57, 43, 43, 43, 57, 57, 43, 29, 57, 43, 43, 43, 29, 43, 57, 43, 43, 43, 43, 43, 43, 29, 43, 43] }, { \"filterEnvelope\": \"decay 2\", \"spectrum\": [0, 14, 29, 43, 86, 71, 29, 43, 43, 43, 43, 29, 71, 29, 71, 29, 43, 43, 43, 43, 57, 43, 43, 57, 43, 43, 43, 57, 57, 57] }, { \"filterEnvelope\": \"decay 1\", \"spectrum\": [0, 0, 14, 14, 14, 14, 29, 29, 29, 43, 43, 43, 57, 57, 57, 71, 71, 71, 71, 71, 71, 71, 71, 57, 57, 57, 57, 43, 43, 43] }, { \"filterEnvelope\": \"twang 3\", \"spectrum\": [43, 43, 43, 71, 29, 29, 43, 43, 43, 29, 43, 43, 43, 29, 29, 43, 43, 29, 29, 29, 57, 14, 57, 43, 43, 57, 43, 43, 57, 57] }, { \"filterEnvelope\": \"decay 3\", \"spectrum\": [29, 43, 43, 43, 43, 29, 29, 43, 29, 29, 43, 29, 14, 29, 43, 29, 43, 29, 57, 29, 43, 57, 43, 71, 43, 71, 57, 57, 71, 71] }, { \"filterEnvelope\": \"twang 3\", \"spectrum\": [43, 29, 29, 43, 29, 29, 29, 57, 29, 29, 29, 57, 43, 43, 29, 29, 57, 43, 43, 43, 71, 43, 43, 71, 57, 71, 71, 71, 71, 71] }, { \"filterEnvelope\": \"decay 3\", \"spectrum\": [57, 57, 57, 43, 57, 57, 43, 43, 57, 43, 43, 43, 71, 57, 43, 57, 86, 71, 57, 86, 71, 57, 86, 100, 71, 86, 86, 86, 86, 86] }, { \"filterEnvelope\": \"flare 1\", \"spectrum\": [0, 0, 14, 14, 14, 14, 29, 29, 29, 43, 43, 43, 57, 57, 71, 71, 86, 86, 100, 100, 100, 100, 100, 100, 100, 100, 86, 57, 29, 0] }, { \"filterEnvelope\": \"decay 2\", \"spectrum\": [14, 14, 14, 14, 29, 14, 14, 29, 14, 43, 14, 43, 57, 86, 57, 57, 100, 57, 43, 43, 57, 100, 57, 43, 29, 14, 0, 0, 0, 0] }] } },\n                { name: \"steel pan\", midiProgram: 114, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 0.1768 }], \"effects\": [\"note filter\", \"chorus\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }], \"chorus\": 67, \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"chord\": \"simultaneous\", \"algorithm\": \"1\u2190(2\u20023\u21904)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"~1\u00D7\", \"amplitude\": 14 }, { \"frequency\": \"7\u00D7\", \"amplitude\": 3 }, { \"frequency\": \"3\u00D7\", \"amplitude\": 5 }, { \"frequency\": \"4\u00D7\", \"amplitude\": 4 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"decay 2\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 1\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 2\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 2\", \"index\": 3 }] } },\n                { name: \"steel pan synth\", midiProgram: 114, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"algorithm\": \"1\u20032\u20033\u21904\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"~1\u00D7\", \"amplitude\": 12 }, { \"frequency\": \"2\u00D7\", \"amplitude\": 15 }, { \"frequency\": \"4\u00D7\", \"amplitude\": 14 }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 3 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 1\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 0 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 1\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 2\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 1\" }] } },\n                { name: \"timpani\", midiProgram: 47, generalMidi: true, settings: { \"type\": \"spectrum\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 6727.17, \"linearGain\": 5.6569 }], \"effects\": [\"pitch shift\", \"note filter\", \"reverb\"], \"pitchShiftSemitones\": 15, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.5 }], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"spectrum\": [100, 0, 0, 0, 86, 0, 0, 71, 0, 14, 43, 14, 43, 43, 0, 29, 43, 29, 29, 29, 43, 29, 43, 29, 43, 43, 43, 43, 43, 43], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 1\" }, { \"target\": \"pitchShift\", \"envelope\": \"twang 1\" }] } },\n                { name: \"dark strike\", midiProgram: 47, settings: { \"type\": \"spectrum\", \"eqFilter\": [], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.7071 }], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"spectrum\": [0, 0, 14, 14, 14, 29, 29, 43, 43, 86, 43, 43, 43, 29, 86, 29, 29, 29, 86, 29, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 2\" }] } },\n                { name: \"woodblock\", midiProgram: 115, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"spectrum\": [0, 14, 29, 43, 43, 57, 86, 86, 71, 57, 57, 43, 43, 57, 86, 86, 43, 43, 71, 57, 57, 57, 57, 57, 86, 86, 71, 71, 71, 71] } },\n                { name: \"taiko drum\", midiProgram: 116, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -0.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 29, \"filterEnvelope\": \"twang 1\", \"spectrum\": [71, 100, 100, 43, 43, 71, 71, 43, 43, 43, 43, 43, 43, 57, 29, 57, 43, 57, 43, 43, 57, 43, 43, 43, 43, 43, 43, 43, 43, 43] } },\n                { name: \"melodic drum\", midiProgram: 117, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -1.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2828, \"filterResonance\": 43, \"filterEnvelope\": \"twang 1\", \"spectrum\": [100, 71, 71, 57, 57, 43, 43, 71, 43, 43, 43, 57, 43, 43, 57, 43, 43, 43, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] } },\n                { name: \"drum synth\", midiProgram: 118, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 43, \"filterEnvelope\": \"decay 1\", \"spectrum\": [100, 86, 71, 57, 43, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29] } },\n                { name: \"tom-tom\", midiProgram: 116, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 1\", \"spectrum\": [100, 29, 14, 0, 0, 86, 14, 43, 29, 86, 29, 14, 29, 57, 43, 43, 43, 43, 57, 43, 43, 43, 29, 57, 43, 43, 43, 43, 43, 43] } },\n                { name: \"metal pipe\", midiProgram: 117, isNoise: true, midiSubharmonicOctaves: -1.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 8000, \"filterResonance\": 14, \"filterEnvelope\": \"twang 2\", \"spectrum\": [29, 43, 86, 43, 43, 43, 43, 43, 100, 29, 14, 14, 100, 14, 14, 0, 0, 0, 0, 0, 14, 29, 29, 14, 0, 0, 14, 29, 0, 0] } },\n                { name: \"synth kick\", midiProgram: 47, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -6, \"chord\": \"simultaneous\", \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"8\u00D7\", \"amplitude\": 15 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"operatorFrequency\", \"envelope\": \"twang 1\", \"index\": 0 }, { \"target\": \"noteVolume\", \"envelope\": \"twang 2\" }] } },\n            ])\n        },\n        {\n            name: \"Novelty Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"guitar fret noise\", midiProgram: 120, generalMidi: true, settings: { \"type\": \"spectrum\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 1000, \"linearGain\": 0.1768 }], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 5.6569 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"spectrum\": [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 29, 14, 0, 0, 43, 0, 43, 0, 71, 43, 0, 57, 0], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"flare 1\" }, { \"target\": \"noteVolume\", \"envelope\": \"twang 2\" }] } },\n                { name: \"fifth saw lead\", midiProgram: 86, generalMidi: true, midiSubharmonicOctaves: 1, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 1.4142 }], \"chorus\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"fifth\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 3\" }] } },\n                { name: \"fifth swell\", midiProgram: 86, midiSubharmonicOctaves: 1, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2000, \"linearGain\": 2 }], \"chorus\": 100, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"fifth\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell 3\" }] } },\n                { name: \"soundtrack\", midiProgram: 97, generalMidi: true, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\", \"chorus\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.5 }], \"chorus\": 67, \"transition\": \"normal\", \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"wave\": \"sawtooth\", \"unison\": \"fifth\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"flare 3\" }] } },\n                { name: \"reverse cymbal\", midiProgram: 119, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"effects\": \"none\", \"transition\": \"soft\", \"chord\": \"harmony\", \"filterCutoffHz\": 4000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 3\", \"spectrum\": [29, 57, 57, 29, 57, 57, 29, 29, 43, 29, 29, 43, 29, 29, 57, 57, 14, 57, 14, 57, 71, 71, 57, 86, 57, 100, 86, 86, 86, 86] } },\n                { name: \"seashore\", midiProgram: 122, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"transition\": \"soft fade\", \"effects\": \"reverb\", \"chord\": \"harmony\", \"filterCutoffHz\": 2828, \"filterResonance\": 0, \"filterEnvelope\": \"swell 3\", \"spectrum\": [14, 14, 29, 29, 43, 43, 43, 57, 57, 57, 57, 57, 57, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 71, 57] } },\n                { name: \"bird tweet\", midiProgram: 123, generalMidi: true, settings: { \"type\": \"harmonics\", \"eqFilter\": [], \"effects\": [\"chord type\", \"vibrato\", \"reverb\"], \"chord\": \"strum\", \"vibrato\": \"heavy\", \"reverb\": 67, \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": -6, \"harmonics\": [0, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"unison\": \"hum\", \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"decay 1\" }] } },\n                { name: \"telephone ring\", midiProgram: 124, generalMidi: true, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -3, \"chord\": \"arpeggio\", \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"2\u00D7\", \"amplitude\": 12 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 4 }, { \"frequency\": \"20\u00D7\", \"amplitude\": 1 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"tremolo4\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"tremolo1\", \"index\": 1 }] } },\n                { name: \"helicopter\", midiProgram: 125, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -0.5, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"seamless\", \"chord\": \"arpeggio\", \"filterCutoffHz\": 1414, \"filterResonance\": 14, \"filterEnvelope\": \"tremolo4\", \"spectrum\": [14, 43, 43, 57, 57, 57, 71, 71, 71, 71, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 71, 71, 71, 71, 71, 71, 71, 57, 57] } },\n                { name: \"applause\", midiProgram: 126, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -3, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"soft fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 3\", \"spectrum\": [14, 14, 29, 29, 29, 43, 43, 57, 71, 71, 86, 86, 86, 71, 71, 57, 57, 57, 71, 86, 86, 86, 86, 86, 71, 71, 57, 57, 57, 57] } },\n                { name: \"gunshot\", midiProgram: 127, generalMidi: true, isNoise: true, midiSubharmonicOctaves: -2, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"strum\", \"filterCutoffHz\": 1414, \"filterResonance\": 29, \"filterEnvelope\": \"twang 1\", \"spectrum\": [14, 29, 43, 43, 57, 57, 57, 71, 71, 71, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 86, 71, 71, 71, 71, 57, 57, 57, 57, 43] } },\n                { name: \"scoot\", midiProgram: 92, settings: { \"type\": \"chip\", \"eqFilter\": [], \"effects\": [\"note filter\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 707.11, \"linearGain\": 4 }], \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -3, \"chord\": \"simultaneous\", \"wave\": \"double saw\", \"unison\": \"shimmer\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"flare 1\" }] } },\n                { name: \"buzz saw\", midiProgram: 30, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.5 }], \"effects\": [], \"transition\": \"normal\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"chord\": \"custom interval\", \"algorithm\": \"1\u21902\u21903\u21904\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 4, \"operators\": [{ \"frequency\": \"5\u00D7\", \"amplitude\": 13 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 10 }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 6 }, { \"frequency\": \"11\u00D7\", \"amplitude\": 12 }], \"envelopes\": [] } },\n                { name: \"mosquito\", midiProgram: 93, settings: { \"type\": \"PWM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 2 }], \"effects\": [\"vibrato\"], \"vibrato\": \"shaky\", \"transition\": \"normal\", \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": -6, \"chord\": \"simultaneous\", \"pulseWidth\": 4.41942, \"envelopes\": [{ \"target\": \"pulseWidth\", \"envelope\": \"tremolo6\" }] } },\n                { name: \"breathing\", midiProgram: 126, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"spectrum\", \"effects\": \"reverb\", \"transition\": \"hard fade\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 14, \"filterEnvelope\": \"swell 2\", \"spectrum\": [14, 14, 14, 29, 29, 29, 29, 29, 43, 29, 29, 43, 43, 43, 29, 29, 71, 43, 86, 86, 57, 100, 86, 86, 86, 86, 71, 86, 71, 57] } },\n                { name: \"klaxon synth\", midiProgram: 125, isNoise: true, midiSubharmonicOctaves: -1, settings: { \"type\": \"noise\", \"effects\": \"reverb\", \"transition\": \"slide\", \"chord\": \"harmony\", \"filterCutoffHz\": 2000, \"filterResonance\": 86, \"filterEnvelope\": \"steady\", \"wave\": \"buzz\" } },\n                { name: \"theremin\", midiProgram: 40, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.7071 }], \"effects\": [\"vibrato\", \"reverb\"], \"vibrato\": \"heavy\", \"reverb\": 33, \"transition\": \"slide in pattern\", \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -6, \"chord\": \"simultaneous\", \"harmonics\": [100, 71, 57, 43, 29, 29, 14, 14, 14, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [] } },\n                { name: \"sonar ping\", midiProgram: 121, settings: { \"type\": \"spectrum\", \"eqFilter\": [], \"effects\": [\"note filter\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.5 }], \"reverb\": 33, \"transition\": \"normal\", \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"chord\": \"simultaneous\", \"spectrum\": [100, 43, 29, 29, 14, 14, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 2\" }] } },\n            ])\n        },\n        {\n            name: \"UltraBox Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                { name: \"nes white\", midiProgram: 116, generalMidi: true, isNoise: true, settings: { \"type\": \"noise\", \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 8, \"eqSimplePeak\": 0, \"eqSubFilters1\": [], \"effects\": [\"panning\"], \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": 0, \"wave\": \"1-bit white\", \"envelopes\": [] } },\n                { name: \"nes ping\", midiProgram: 116, generalMidi: true, isNoise: true, settings: { \"type\": \"noise\", \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 8, \"eqSimplePeak\": 0, \"eqSubFilters1\": [], \"effects\": [\"panning\"], \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": 0, \"wave\": \"1-bit metallic\", \"envelopes\": [] } },\n                //\n                { name: \"distorted pulse vocal\", generalMidi: false, settings: { \"type\": \"chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.0884 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.0884 }], \"effects\": [\"panning\", \"transition type\", \"pitch shift\", \"vibrato\", \"note filter\", \"bitcrusher\", \"echo\", \"reverb\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"pitchShiftSemitones\": 0, \"vibrato\": \"delayed\", \"vibratoDepth\": 0.3, \"vibratoDelay\": 18.5, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 840.9, \"linearGain\": 11.3137 }, { \"type\": \"low-pass\", \"cutoffHz\": 297.3, \"linearGain\": 8 }, { \"type\": \"peak\", \"cutoffHz\": 500, \"linearGain\": 11.3137 }, { \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 1.4142 }, { \"type\": \"peak\", \"cutoffHz\": 176.78, \"linearGain\": 11.3137 }, { \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 11.3137 }], \"noteSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 840.9, \"linearGain\": 11.3137 }, { \"type\": \"low-pass\", \"cutoffHz\": 297.3, \"linearGain\": 8 }, { \"type\": \"peak\", \"cutoffHz\": 500, \"linearGain\": 11.3137 }, { \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 1.4142 }, { \"type\": \"peak\", \"cutoffHz\": 176.78, \"linearGain\": 11.3137 }, { \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 11.3137 }], \"bitcrusherOctave\": 6.5, \"bitcrusherQuantization\": 71, \"pan\": 0, \"panDelay\": 10, \"echoSustain\": 14, \"echoDelayBeats\": 0.167, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"wave\": \"1/8 pulse\", \"unison\": \"none\", \"envelopes\": [] } },\n                // from lognes\n                { name: \"dubsteb bwah\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.7071 }], \"eqFilterType\": true, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters1\": [], \"effects\": [\"panning\", \"transition type\", \"chord type\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"chord\": \"custom interval\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 10, \"operators\": [{ \"frequency\": \"2\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"4\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 11, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 13, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"note size\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 2\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"punch\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 3 }] } },\n                //\n                { name: \"FM cool bass\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 1 }, { \"type\": \"high-pass\", \"cutoffHz\": 88.39, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 0.7071 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 1 }, { \"type\": \"high-pass\", \"cutoffHz\": 88.39, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 0.7071 }], \"effects\": [\"panning\", \"transition type\", \"note filter\", \"reverb\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"noteFilterType\": true, \"noteSimpleCut\": 9, \"noteSimplePeak\": 2, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 7231.23, \"linearGain\": 1 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 7231.23, \"linearGain\": 1 }], \"pan\": 0, \"panDelay\": 10, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1\u2190(2\u20023\u21904)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"2\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 7, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"13\u00D7\", \"amplitude\": 11, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"punch\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 3\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang 2\", \"index\": 3 }] } },\n                //\n                { name: \"FM funky bass\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.1768 }], \"eqFilterType\": true, \"eqSimpleCut\": 5, \"eqSimplePeak\": 0, \"eqSubFilters1\": [], \"effects\": [\"panning\", \"transition type\", \"reverb\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"pan\": 0, \"panDelay\": 10, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"punch\" }, { \"target\": \"noteVolume\", \"envelope\": \"note size\" }] } },\n                //\n                { name: \"talking bass\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [], \"effects\": [\"chord type\"], \"chord\": \"custom interval\", \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"algorithm\": \"1\u2190(2\u20023)\u21904\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 15, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15 }, { \"frequency\": \"2\u00D7\", \"amplitude\": 8 }, { \"frequency\": \"2\u00D7\", \"amplitude\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 12 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"note size\" }] } },\n                // from main\n                { name: \"synth marimba\", generalMidi: false, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 176.78, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 4000, \"linearGain\": 0.5 }], \"effects\": [\"note filter\", \"echo\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 1.4142 }], \"echoSustain\": 71, \"echoDelayBeats\": 0.5, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"harmonics\": [86, 100, 29, 29, 0, 0, 0, 100, 0, 0, 0, 86, 29, 0, 14, 100, 0, 0, 0, 0, 0, 14, 0, 0, 14, 0, 0, 86], \"unison\": \"fifth\", \"stringSustain\": 7, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"punch\" }] } },\n                // from neputendo\n                { name: \"italian accordian\", generalMidi: false, settings: { \"type\": \"custom chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6000, \"linearGain\": 0.5 }], \"eqFilterType\": true, \"eqSimpleCut\": 8, \"eqSimplePeak\": 1, \"eqSubFilters1\": [], \"effects\": [\"panning\", \"chorus\", \"reverb\"], \"pan\": 0, \"panDelay\": 10, \"chorus\": 71, \"reverb\": 45, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"wave\": \"square\", \"unison\": \"honky tonk\", \"customChipWave\": { \"0\": -24, \"1\": -24, \"2\": -24, \"3\": -24, \"4\": -24, \"5\": -24, \"6\": -24, \"7\": -24, \"8\": -24, \"9\": -24, \"10\": -24, \"11\": -24, \"12\": -24, \"13\": -24, \"14\": -24, \"15\": -24, \"16\": 24, \"17\": 24, \"18\": 24, \"19\": 24, \"20\": 24, \"21\": 24, \"22\": 24, \"23\": 24, \"24\": -24, \"25\": -24, \"26\": -24, \"27\": -24, \"28\": -24, \"29\": -24, \"30\": -24, \"31\": -24, \"32\": -24, \"33\": -24, \"34\": -24, \"35\": -24, \"36\": -24, \"37\": -24, \"38\": -24, \"39\": -24, \"40\": 24, \"41\": 24, \"42\": 24, \"43\": 24, \"44\": 24, \"45\": 24, \"46\": 24, \"47\": 24, \"48\": -24, \"49\": -24, \"50\": -24, \"51\": -24, \"52\": -24, \"53\": -24, \"54\": -24, \"55\": -24, \"56\": -24, \"57\": -24, \"58\": -24, \"59\": -24, \"60\": -24, \"61\": -24, \"62\": -24, \"63\": -24 }, \"customChipWaveIntegral\": { \"0\": 0, \"1\": 0, \"2\": 0, \"3\": 0, \"4\": 0, \"5\": 0, \"6\": 0, \"7\": 0, \"8\": 0, \"9\": 0, \"10\": 0, \"11\": 0, \"12\": 0, \"13\": 0, \"14\": 0, \"15\": 0, \"16\": 0, \"17\": 0, \"18\": 0, \"19\": 0, \"20\": 0, \"21\": 0, \"22\": 0, \"23\": 0, \"24\": 0, \"25\": 0, \"26\": 0, \"27\": 0, \"28\": 0, \"29\": 0, \"30\": 0, \"31\": 0, \"32\": 0, \"33\": 0, \"34\": 0, \"35\": 0, \"36\": 0, \"37\": 0, \"38\": 0, \"39\": 0, \"40\": 0, \"41\": 0, \"42\": 0, \"43\": 0, \"44\": 0, \"45\": 0, \"46\": 0, \"47\": 0, \"48\": 0, \"49\": 0, \"50\": 0, \"51\": 0, \"52\": 0, \"53\": 0, \"54\": 0, \"55\": 0, \"56\": 0, \"57\": 0, \"58\": 0, \"59\": 0, \"60\": 0, \"61\": 0, \"62\": 0, \"63\": 0, \"64\": 0 }, \"envelopes\": [] } },\n                // from neputendo\n                { name: \"chip supersaw\", generalMidi: false, settings: { \"type\": \"custom chip\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.7071 }], \"eqFilterType\": true, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters1\": [], \"effects\": [\"panning\", \"transition type\", \"vibrato\", \"chorus\", \"reverb\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"vibrato\": \"delayed\", \"vibratoDepth\": 0.3, \"vibratoDelay\": 18.5, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"pan\": 0, \"panDelay\": 10, \"chorus\": 29, \"reverb\": 29, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"wave\": \"square\", \"unison\": \"dissonant\", \"customChipWave\": { \"0\": 22, \"1\": 22, \"2\": 16, \"3\": 6, \"4\": 0, \"5\": -3, \"6\": -8, \"7\": -10, \"8\": -13, \"9\": -16, \"10\": -19, \"11\": -19, \"12\": -20, \"13\": -22, \"14\": -22, \"15\": -24, \"16\": -24, \"17\": -24, \"18\": -24, \"19\": -24, \"20\": -24, \"21\": -24, \"22\": -24, \"23\": -24, \"24\": -24, \"25\": -24, \"26\": -24, \"27\": -24, \"28\": -24, \"29\": -24, \"30\": -24, \"31\": 24, \"32\": 24, \"33\": 16, \"34\": 9, \"35\": 6, \"36\": 4, \"37\": 2, \"38\": 0, \"39\": -1, \"40\": -3, \"41\": -4, \"42\": -4, \"43\": -6, \"44\": -6, \"45\": -6, \"46\": -6, \"47\": -5, \"48\": -5, \"49\": -4, \"50\": -2, \"51\": -2, \"52\": 1, \"53\": 4, \"54\": 6, \"55\": 8, \"56\": 10, \"57\": 12, \"58\": 14, \"59\": 16, \"60\": 18, \"61\": 19, \"62\": 22, \"63\": 24 }, \"customChipWaveIntegral\": { \"0\": 0, \"1\": 0, \"2\": 0, \"3\": 0, \"4\": 0, \"5\": 0, \"6\": 0, \"7\": 0, \"8\": 0, \"9\": 0, \"10\": 0, \"11\": 0, \"12\": 0, \"13\": 0, \"14\": 0, \"15\": 0, \"16\": 0, \"17\": 0, \"18\": 0, \"19\": 0, \"20\": 0, \"21\": 0, \"22\": 0, \"23\": 0, \"24\": 0, \"25\": 0, \"26\": 0, \"27\": 0, \"28\": 0, \"29\": 0, \"30\": 0, \"31\": 0, \"32\": 0, \"33\": 0, \"34\": 0, \"35\": 0, \"36\": 0, \"37\": 0, \"38\": 0, \"39\": 0, \"40\": 0, \"41\": 0, \"42\": 0, \"43\": 0, \"44\": 0, \"45\": 0, \"46\": 0, \"47\": 0, \"48\": 0, \"49\": 0, \"50\": 0, \"51\": 0, \"52\": 0, \"53\": 0, \"54\": 0, \"55\": 0, \"56\": 0, \"57\": 0, \"58\": 0, \"59\": 0, \"60\": 0, \"61\": 0, \"62\": 0, \"63\": 0, \"64\": 0 }, \"envelopes\": [] } },\n                // THANKS TO ANSWEARING MACHINE for the FM supersaw\n                { name: \"fm supersaw\", generalMidi: false, settings: { \"type\": \"FM6op\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.7071 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.7071 }], \"effects\": [\"panning\", \"transition type\", \"pitch shift\", \"note filter\", \"chorus\", \"reverb\"], \"transition\": \"continue\", \"clicklessTransition\": false, \"pitchShiftSemitones\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [], \"noteSubFilters0\": [], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 1 }], \"pan\": 0, \"panDelay\": 10, \"chorus\": 71, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1\u20032\u20033\u20034\u20035\u20036\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 13, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 15, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"2\u00D7\", \"amplitude\": 10, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"3\u00D7\", \"amplitude\": 7, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"4\u00D7\", \"amplitude\": 9, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"8\u00D7\", \"amplitude\": 6, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }], \"envelopes\": [] } },\n                // based off of the todbox wind preset that was removed\n                { name: \"wind\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 250.03, \"linearGain\": 11.3137 }], \"eqFilterType\": true, \"eqSimpleCut\": 0, \"eqSimplePeak\": 7, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters1\": [], \"effects\": [\"transition type\", \"reverb\"], \"transition\": \"continue\", \"clicklessTransition\": false, \"panDelay\": 10, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"1\u21923\u20032\u21924\", \"feedbackAmplitude\": 15, \"operators\": [{ \"frequency\": \"16\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"16\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"16\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"16\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [] } },\n                // this meow is from nobo\n                { name: \"mrow\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"eqSubFilters0\": [], \"effects\": [\"panning\", \"chord type\", \"reverb\"], \"chord\": \"custom interval\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"pan\": 0, \"panDelay\": 10, \"reverb\": 35, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1\u21903\u20032\u21904\", \"feedbackType\": \"1\u27F2 2\u27F2 3\u27F2 4\u27F2\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"4\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2\u00D7\", \"amplitude\": 13, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2\u00D7\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2\u00D7\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"flare 1\", \"index\": 0 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"note size\", \"index\": 2 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"flare 3\", \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"flare 1\" }] } },\n                // based off of the \"obama why\" beepcord inside joke so thanks to nobo ig\n                { name: \"vocal why\", generalMidi: false, settings: { \"type\": \"harmonics\", \"eqFilter\": [], \"effects\": [\"note filter\", \"panning\", \"reverb\"], \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 840.9, \"linearGain\": 11.3137 }], \"pan\": 0, \"reverb\": 0, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"harmonics\": [100, 86, 29, 29, 14, 14, 0, 14, 14, 43, 71, 100, 100, 86, 71, 71, 57, 57, 43, 43, 43, 43, 43, 0, 0, 0, 0, 0], \"unison\": \"octave\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"note size\" }] } },\n            ])\n        },\n        {\n            name: \"Slarmoo's Box Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                // custom presets from this mod\t\n                // all created by Slarmoo\n                { name: \"radio fm\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1189.21, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 74.33, \"linearGain\": 0.3536 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1189.21, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 74.33, \"linearGain\": 0.3536 }], \"effects\": [\"panning\", \"detune\", \"vibrato\", \"bitcrusher\", \"reverb\"], \"detuneCents\": 0, \"vibrato\": \"none\", \"vibratoDepth\": 0, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"bitcrusherOctave\": 6.5, \"bitcrusherQuantization\": 43, \"pan\": 0, \"panDelay\": 10, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": 6, \"algorithm\": \"1\u20032\u20033\u20034\", \"feedbackType\": \"1\u27F2\u20032\u27F2\", \"feedbackAmplitude\": 4, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 13, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"0.12\u00D7\", \"amplitude\": 7, \"waveform\": \"trapezoid\", \"pulseWidth\": 5 }, { \"frequency\": \"0.5\u00D7\", \"amplitude\": 10, \"waveform\": \"triangle\", \"pulseWidth\": 5 }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 5, \"waveform\": \"triangle\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [], \"isDrum\": false } },\n                { name: \"anguished underworld\", generalMidi: false, settings: { \"type\": \"FM6op\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.5 }], \"effects\": [\"panning\", \"note filter\", \"distortion\", \"bitcrusher\", \"reverb\"], \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 2 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 2 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.5 }], \"distortion\": 43, \"aliases\": false, \"bitcrusherOctave\": 4.5, \"bitcrusherQuantization\": 43, \"pan\": 0, \"panDelay\": 10, \"reverb\": 0, \"fadeInSeconds\": 0.075, \"fadeOutTicks\": 6, \"algorithm\": \"1\u20032\u21904\u20033\u2190(5\u20036)\", \"feedbackType\": \"1\u21925\u20022\u21926 3\u21924\", \"feedbackAmplitude\": 4, \"operators\": [{ \"frequency\": \"0.25\u00D7\", \"amplitude\": 14, \"waveform\": \"triangle\", \"pulseWidth\": 5 }, { \"frequency\": \"0.5\u00D7\", \"amplitude\": 13, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 12, \"waveform\": \"trapezoid\", \"pulseWidth\": 5 }, { \"frequency\": \"8\u00D7\", \"amplitude\": 5, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2\u00D7\", \"amplitude\": 10, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"0.75\u00D7\", \"amplitude\": 3, \"waveform\": \"ramp\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"punch\" }, { \"target\": \"operatorAmplitude\", \"envelope\": \"decay -1\", \"index\": 5 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"wibble 3\" }], \"isDrum\": false } },\n                { name: \"faint sorrow\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4240.89, \"linearGain\": 2 }], \"eqFilterType\": true, \"eqSimpleCut\": 8, \"eqSimplePeak\": 4, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters1\": [], \"effects\": [\"panning\", \"detune\", \"vibrato\", \"echo\", \"reverb\"], \"detuneCents\": 22, \"vibrato\": \"light\", \"vibratoDepth\": 0.15, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"pan\": 0, \"panDelay\": 10, \"echoSustain\": 100, \"echoDelayBeats\": 0.667, \"reverb\": 87, \"fadeInSeconds\": 0.075, \"fadeOutTicks\": 48, \"algorithm\": \"1\u20032\u20033\u20034\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~1\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [], \"isDrum\": false } },\n                { name: \"bright sorrow fm\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [], \"effects\": [\"panning\", \"chord type\", \"note filter\", \"echo\", \"reverb\"], \"chord\": \"strum\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2000, \"linearGain\": 2.8284 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2000, \"linearGain\": 2.8284 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1414.21, \"linearGain\": 1.4142 }], \"pan\": 0, \"panDelay\": 10, \"echoSustain\": 71, \"echoDelayBeats\": 1.333, \"reverb\": 61, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"algorithm\": \"(1\u20022\u20023)\u21904\", \"feedbackType\": \"1\u27F2\u20032\u27F2\u20033\u27F2\", \"feedbackAmplitude\": 2, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 13, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"5\u00D7\", \"amplitude\": 10, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"5\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"2\u00D7\", \"amplitude\": 7, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [], \"isDrum\": false } },\n                { name: \"wet sorrow fm\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.7071 }], \"eqFilterType\": true, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters1\": [], \"effects\": [\"panning\", \"vibrato\", \"reverb\"], \"vibrato\": \"light\", \"vibratoDepth\": 0.15, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"pan\": 0, \"panDelay\": 10, \"reverb\": 23, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 4, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 3, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 2, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"decay 3\", \"index\": 2 }], \"isDrum\": false } },\n                { name: \"scream fm\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 2 }, { \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 0.125 }, { \"type\": \"peak\", \"cutoffHz\": 353.55, \"linearGain\": 0.7071 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 2 }, { \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 0.125 }, { \"type\": \"peak\", \"cutoffHz\": 353.55, \"linearGain\": 0.7071 }], \"effects\": [\"panning\", \"detune\", \"note filter\", \"distortion\", \"reverb\"], \"detuneCents\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.125 }, { \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 11.3137 }], \"noteSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.125 }, { \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 11.3137 }], \"distortion\": 0, \"aliases\": false, \"pan\": 0, \"panDelay\": 10, \"reverb\": 87, \"fadeInSeconds\": 0.135, \"fadeOutTicks\": -3, \"algorithm\": \"(1\u20022\u20023)\u21904\", \"feedbackType\": \"1\u27F2 2\u27F2 3\u27F2 4\u27F2\", \"feedbackAmplitude\": 11, \"operators\": [{ \"frequency\": \"4\u00D7\", \"amplitude\": 13, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 10, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"2\u00D7\", \"amplitude\": 3, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"7\u00D7\", \"amplitude\": 5, \"waveform\": \"triangle\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"detune\", \"envelope\": \"swell 1\" }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"tremolo4\" }], \"isDrum\": false } },\n                { name: \"anguished radio fm pad\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 9513.66, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 353.55, \"linearGain\": 0.0884 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 62.5, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 9513.66, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 353.55, \"linearGain\": 0.0884 }], \"eqSubFilters4\": [], \"effects\": [\"panning\", \"detune\", \"note filter\", \"bitcrusher\", \"chorus\", \"echo\", \"reverb\"], \"detuneCents\": -16, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [], \"noteSubFilters0\": [], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 11313.71, \"linearGain\": 11.3137 }], \"noteSubFilters2\": [{ \"type\": \"low-pass\", \"cutoffHz\": 105.11, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 11313.71, \"linearGain\": 11.3137 }], \"noteSubFilters4\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 11313.71, \"linearGain\": 11.3137 }], \"bitcrusherOctave\": 5.5, \"bitcrusherQuantization\": 43, \"pan\": 0, \"panDelay\": 10, \"chorus\": 29, \"echoSustain\": 43, \"echoDelayBeats\": 1, \"reverb\": 58, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"algorithm\": \"1\u21903\u20032\u21904\", \"feedbackType\": \"1\u21923\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2\u00D7\", \"amplitude\": 7, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [], \"isDrum\": false } },\n                { name: \"juicy kick\", generalMidi: false, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 11.3137 }, { \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 0.0884 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 11.3137 }, { \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 0.3536 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 594.6, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 0.0884 }], \"effects\": [\"panning\"], \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": -6, \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"20\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"operatorFrequency\", \"envelope\": \"twang 1\", \"index\": 0 }, { \"target\": \"noteVolume\", \"envelope\": \"twang 2\" }], \"isDrum\": false } },\n                { name: \"good vibes supersaw\", generalMidi: false, settings: { \"type\": \"supersaw\", \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 6, \"discreteEnvelope\": false, \"pitchEnvelopeStart\": 37, \"pitchEnvelopeEnd\": 96, \"pitchEnvelopeInverse\": true, \"eqSubFilters0\": [], \"effects\": [\"panning\", \"transition type\", \"detune\", \"chorus\", \"reverb\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"detuneCents\": 30, \"pan\": 0, \"panDelay\": 10, \"chorus\": 14, \"reverb\": 23, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": 12, \"pulseWidth\": 26, \"decimalOffset\": 0, \"dynamism\": 33, \"spread\": 33, \"shape\": 17, \"envelopes\": [{ \"target\": \"supersawShape\", \"envelope\": \"pitch\" }, { \"target\": \"detune\", \"envelope\": \"tremolo2\" }], \"isDrum\": false } },\n                { name: \"ethereal\", generalMidi: false, isNoise: false, settings: { \"type\": \"spectrum\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 4000, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 6727.17, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 88.39, \"linearGain\": 1.4142 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 4, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"peak\", \"cutoffHz\": 4000, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 6727.17, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 88.39, \"linearGain\": 1.4142 }], \"eqSubFilters1\": [], \"effects\": [\"panning\", \"transition type\", \"chord type\", \"pitch shift\", \"detune\", \"vibrato\", \"note filter\", \"bitcrusher\", \"chorus\", \"reverb\"], \"transition\": \"continue\", \"clicklessTransition\": false, \"chord\": \"simultaneous\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"pitchShiftSemitones\": 12, \"detuneCents\": 36, \"vibrato\": \"custom\", \"vibratoDepth\": 0.12, \"vibratoDelay\": 36, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 0.0884 }, { \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 0.7071 }], \"noteSubFilters0\": [{ \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 2000, \"linearGain\": 0.0884 }, { \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.0884 }, { \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 0.7071 }], \"bitcrusherOctave\": 4.5, \"bitcrusherQuantization\": 43, \"pan\": 0, \"panDelay\": 10, \"chorus\": 71, \"reverb\": 100, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"spectrum\": [43, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 57, 0, 0, 57, 0, 43, 0, 43, 0, 0, 29, 0, 29, 0, 14, 14, 14, 0, 0], \"unison\": \"none\", \"pitchEnvelopeStart0\": 0, \"pitchEnvelopeEnd0\": 96, \"envelopeInverse0\": false, \"pitchEnvelopeStart1\": 0, \"pitchEnvelopeEnd1\": 96, \"envelopeInverse1\": false, \"pitchEnvelopeStart2\": 0, \"pitchEnvelopeEnd2\": 96, \"envelopeInverse2\": false, \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"note size\" }, { \"target\": \"detune\", \"envelope\": \"tremolo3\" }, { \"target\": \"bitcrusherQuantization\", \"envelope\": \"note size\" }], \"isDrum\": false } },\n                { name: \"walrus wuh\", generalMidi: false, settings: { \"type\": \"supersaw\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }, { \"type\": \"high-pass\", \"cutoffHz\": 353.55, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 4756.83, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 3363.59, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 74.33, \"linearGain\": 2.8284 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"pitchEnvelopeInverse\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }, { \"type\": \"high-pass\", \"cutoffHz\": 353.55, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 4756.83, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 3363.59, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 74.33, \"linearGain\": 2.8284 }], \"effects\": [\"panning\", \"note filter\", \"bitcrusher\", \"chorus\", \"reverb\"], \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 0.125 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 0.125 }], \"bitcrusherOctave\": 4, \"bitcrusherQuantization\": 71, \"pan\": 0, \"panDelay\": 10, \"chorus\": 86, \"reverb\": 32, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": 48, \"pulseWidth\": 50, \"decimalOffset\": 0, \"dynamism\": 100, \"spread\": 50, \"shape\": 0, \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"punch\" }, { \"target\": \"bitcrusherQuantization\", \"envelope\": \"decay 3\" }], \"isDrum\": false } },\n                { name: \"saturnic\", generalMidi: false, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4240.89, \"linearGain\": 2 }], \"eqFilterType\": true, \"eqSimpleCut\": 8, \"eqSimplePeak\": 4, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters1\": [], \"effects\": [\"panning\", \"vibrato\", \"chorus\", \"echo\", \"reverb\"], \"vibrato\": \"light\", \"vibratoDepth\": 0.15, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"pan\": 0, \"panDelay\": 10, \"chorus\": 100, \"echoSustain\": 71, \"echoDelayBeats\": 0.5, \"reverb\": 45, \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": 72, \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 15, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [], \"isDrum\": false } },\n                { name: \"glassy harmonics\", generalMidi: false, settings: { \"type\": \"harmonics\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1000, \"linearGain\": 11.3137 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1000, \"linearGain\": 11.3137 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 0.5 }], \"effects\": [\"panning\", \"detune\", \"note filter\", \"chorus\", \"reverb\"], \"detuneCents\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [], \"noteSubFilters0\": [], \"pan\": 0, \"panDelay\": 10, \"chorus\": 14, \"reverb\": 29, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"harmonics\": [100, 0, 43, 29, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 14, 29, 14, 0, 14, 0, 0, 0, 0, 100, 0, 0, 14, 0], \"unison\": \"none\", \"envelopes\": [], \"isDrum\": false } },\n                { name: \"plucked\", generalMidi: false, settings: { \"type\": \"Picked String\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.0884 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.0884 }], \"effects\": [\"panning\", \"transition type\", \"echo\", \"reverb\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"pan\": 0, \"panDelay\": 10, \"echoSustain\": 100, \"echoDelayBeats\": 1.333, \"reverb\": 26, \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"harmonics\": [100, 86, 57, 0, 0, 57, 57, 57, 86, 57, 57, 43, 43, 43, 29, 29, 14, 14, 29, 14, 14, 14, 29, 100, 57, 43, 14, 14], \"unison\": \"none\", \"stringSustain\": 14, \"envelopes\": [], \"isDrum\": false } },\n                //1.1.1 noise presets\n                { name: \"spectrum wind\", generalMidi: false, isNoise: true, settings: { \"type\": \"spectrum\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 19027.31, \"linearGain\": 0.7071 }], \"eqFilterType\": true, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters1\": [], \"effects\": [\"panning\", \"note filter\", \"reverb\"], \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 1.4142 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 1.4142 }], \"pan\": 0, \"panDelay\": 10, \"reverb\": 87, \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"spectrum\": [29, 0, 0, 0, 0, 0, 0, 71, 0, 0, 0, 14, 57, 14, 0, 57, 57, 0, 0, 57, 0, 71, 14, 29, 100, 71, 0, 100, 14, 86], \"unison\": \"none\", \"envelopes\": [], \"isDrum\": true } },\n                { name: \"hi-hat\", generalMidi: false, isNoise: true, settings: { \"type\": \"noise\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.1768 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.1768 }], \"eqSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.1768 }], \"eqSubFilters2\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.1768 }], \"eqSubFilters3\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.1768 }, { \"type\": \"high-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.1768 }], \"effects\": [\"panning\"], \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"wave\": \"white\", \"unison\": \"none\", \"envelopes\": [], \"isDrum\": true } },\n                //1.2 presets\n                { name: \"jungle bass\", generalMidi: false, isNoise: false, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 148.65, \"linearGain\": 0.0884 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 148.65, \"linearGain\": 0.0884 }], \"effects\": [\"panning\", \"vibrato\", \"note filter\", \"chorus\", \"reverb\"], \"vibrato\": \"none\", \"vibratoDepth\": 0, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 297.3, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 74.33, \"linearGain\": 0.0884 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 297.3, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 74.33, \"linearGain\": 0.0884 }], \"pan\": 0, \"panDelay\": 10, \"chorus\": 14, \"reverb\": 3, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"algorithm\": \"1\u21903\u20032\u21904\", \"feedbackType\": \"1\u21942 3\u21944\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 13, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"2\u00D7\", \"amplitude\": 5, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"8\u00D7\", \"amplitude\": 11, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"pitchEnvelopeStart0\": 0, \"pitchEnvelopeEnd0\": 96, \"envelopeInverse0\": false, \"pitchEnvelopeStart1\": 0, \"pitchEnvelopeEnd1\": 96, \"envelopeInverse1\": false, \"pitchEnvelopeStart2\": 12, \"pitchEnvelopeEnd2\": 28, \"envelopeInverse2\": false, \"envelopes\": [{ \"target\": \"operatorFrequency\", \"envelope\": \"swell 3\", \"index\": 0 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell 3\", \"index\": 1 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"pitch\", \"index\": 0 }], \"isDrum\": false } },\n                { name: \"beach tide\", generalMidi: false, isNoise: false, settings: { \"type\": \"harmonics\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.3536 }, { \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.1768 }, { \"type\": \"peak\", \"cutoffHz\": 8000, \"linearGain\": 0.0884 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.3536 }, { \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.1768 }, { \"type\": \"peak\", \"cutoffHz\": 8000, \"linearGain\": 0.0884 }], \"effects\": [\"panning\", \"transition type\", \"chord type\", \"note filter\", \"chorus\", \"reverb\"], \"transition\": \"continue\", \"clicklessTransition\": false, \"chord\": \"simultaneous\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 0.1768 }], \"noteSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 0.1768 }], \"pan\": 0, \"panDelay\": 10, \"chorus\": 14, \"reverb\": 32, \"fadeInSeconds\": 0.0938, \"fadeOutTicks\": 72, \"harmonics\": [86, 86, 71, 57, 57, 43, 43, 43, 29, 29, 14, 14, 14, 0, 0, 57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"unison\": \"none\", \"pitchEnvelopeStart0\": 0, \"pitchEnvelopeEnd0\": 96, \"envelopeInverse0\": false, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"pitch\" }], \"isDrum\": false } },\n                { name: \"starlight\", generalMidi: false, isNoise: false, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.0884 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.0884 }], \"effects\": [\"panning\", \"transition type\", \"vibrato\", \"bitcrusher\", \"echo\", \"reverb\"], \"transition\": \"continue\", \"clicklessTransition\": false, \"vibrato\": \"light\", \"vibratoDepth\": 0.15, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"bitcrusherOctave\": 5.5, \"bitcrusherQuantization\": 29, \"pan\": 0, \"panDelay\": 10, \"echoSustain\": 29, \"echoDelayBeats\": 1, \"reverb\": 13, \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 6, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [], \"isDrum\": false } },\n                { name: \"distant monument\", generalMidi: false, isNoise: false, settings: { \"type\": \"chip\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 11313.71, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 500, \"linearGain\": 0.125 }, { \"type\": \"peak\", \"cutoffHz\": 210.22, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 5.6569 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 11313.71, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 500, \"linearGain\": 0.125 }, { \"type\": \"peak\", \"cutoffHz\": 210.22, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 5.6569 }], \"effects\": [\"panning\", \"transition type\", \"chord type\", \"detune\", \"bitcrusher\", \"chorus\", \"echo\", \"reverb\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"chord\": \"strum\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"detuneCents\": 24, \"bitcrusherOctave\": 2.5, \"bitcrusherQuantization\": 14, \"pan\": 0, \"panDelay\": 10, \"chorus\": 86, \"echoSustain\": 71, \"echoDelayBeats\": 1, \"reverb\": 35, \"fadeInSeconds\": 0.0413, \"fadeOutTicks\": 12, \"wave\": \"modbox pnryshk a (u5)\", \"unison\": \"detune\", \"isUsingAdvancedLoopControls\": false, \"chipWaveLoopStart\": 0, \"chipWaveLoopEnd\": 11, \"chipWaveLoopMode\": 0, \"chipWavePlayBackwards\": false, \"chipWaveStartOffset\": 0, \"pitchEnvelopeStart0\": 0, \"pitchEnvelopeEnd0\": 96, \"envelopeInverse0\": false, \"pitchEnvelopeStart1\": 0, \"pitchEnvelopeEnd1\": 96, \"envelopeInverse1\": false, \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"punch\" }, { \"target\": \"noteVolume\", \"envelope\": \"twang 1\" }], \"isDrum\": false } },\n                { name: \"mercurial\", generalMidi: false, isNoise: false, settings: { \"type\": \"FM6op\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 88.39, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.1768 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 88.39, \"linearGain\": 2.8284 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.1768 }], \"eqSubFilters1\": [], \"effects\": [\"panning\", \"distortion\", \"chorus\"], \"distortion\": 43, \"aliases\": false, \"pan\": 0, \"panDelay\": 10, \"chorus\": 43, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"Custom\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 8, \"customAlgorithm\": { \"mods\": [[3], [5], [4], [], [6], []], \"carrierCount\": 2 }, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"0.5\u00D7\", \"amplitude\": 10, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 5, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"~2\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 9, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 2, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"operatorFrequency\", \"envelope\": \"linear\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 2, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 3 }, { \"target\": \"distortion\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 20, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n                { name: \"air hiss\", generalMidi: false, isNoise: true, settings: { \"type\": \"spectrum\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.25 }], \"eqFilterType\": true, \"eqSimpleCut\": 7, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters1\": [], \"effects\": [\"panning\", \"note filter\", \"distortion\", \"reverb\"], \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.25 }, { \"type\": \"high-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 0.3536 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.25 }, { \"type\": \"high-pass\", \"cutoffHz\": 2828.43, \"linearGain\": 0.3536 }], \"distortion\": 71, \"aliases\": false, \"pan\": 0, \"panDelay\": 10, \"reverb\": 6, \"fadeInSeconds\": 0, \"fadeOutTicks\": -24, \"spectrum\": [57, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 43, 57, 71, 86, 100, 100, 100, 100, 86, 71, 71, 43], \"unison\": \"none\", \"envelopes\": [], \"isDrum\": true } },\n                //1.3 presets\n                { name: \"spectral phaser\", generalMidi: false, settings: { \"type\": \"spectrum\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 74.33, \"linearGain\": 0.25 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 10, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.3536 }], \"effects\": [\"panning\", \"note filter\", \"distortion\", \"bitcrusher\", \"chorus\", \"echo\", \"reverb\"], \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 9513.66, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 1414.21, \"linearGain\": 0.125 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 353.55, \"linearGain\": 0.1768 }, { \"type\": \"peak\", \"cutoffHz\": 148.65, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 88.39, \"linearGain\": 0.1768 }], \"noteSubFilters0\": [{ \"type\": \"peak\", \"cutoffHz\": 9513.66, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 1414.21, \"linearGain\": 0.125 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 353.55, \"linearGain\": 0.1768 }, { \"type\": \"peak\", \"cutoffHz\": 148.65, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 88.39, \"linearGain\": 0.1768 }], \"distortion\": 14, \"aliases\": false, \"bitcrusherOctave\": 6, \"bitcrusherQuantization\": 14, \"pan\": 0, \"panDelay\": 10, \"chorus\": 100, \"echoSustain\": 86, \"echoDelayBeats\": 1, \"reverb\": 32, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"spectrum\": [86, 0, 0, 0, 57, 0, 0, 71, 0, 0, 0, 86, 0, 0, 57, 0, 43, 0, 43, 0, 0, 43, 0, 29, 0, 29, 14, 14, 29, 14], \"unison\": \"piano\", \"envelopes\": [{ \"target\": \"noteFilterFreq\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0.07, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 0 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0.06, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 1 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0.05, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 2 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0.04, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 3 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0.09, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 4 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0.08, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 5 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0.1, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 6 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0.03, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 7 }, { \"target\": \"distortion\", \"envelope\": \"none\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 0.3 }], \"isDrum\": false } },\n                { name: \"shaker\", generalMidi: false, isNoise: true, settings: { \"type\": \"noise\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 4000, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 4756.83, \"linearGain\": 0.0884 }, { \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 8 }, { \"type\": \"peak\", \"cutoffHz\": 2378.41, \"linearGain\": 0.25 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 6, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 4000, \"linearGain\": 5.6569 }, { \"type\": \"peak\", \"cutoffHz\": 4756.83, \"linearGain\": 0.0884 }, { \"type\": \"low-pass\", \"cutoffHz\": 11313.71, \"linearGain\": 8 }, { \"type\": \"peak\", \"cutoffHz\": 2378.41, \"linearGain\": 0.25 }], \"effects\": [\"panning\", \"transition type\", \"detune\", \"distortion\", \"bitcrusher\", \"chorus\", \"echo\", \"reverb\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"detuneCents\": 30, \"distortion\": 43, \"aliases\": false, \"bitcrusherOctave\": 2.5, \"bitcrusherQuantization\": 43, \"pan\": 0, \"panDelay\": 10, \"chorus\": 43, \"echoSustain\": 29, \"echoDelayBeats\": 1, \"reverb\": 23, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": 96, \"wave\": \"deep\", \"unison\": \"none\", \"envelopes\": [{ \"target\": \"detune\", \"envelope\": \"tremolo2\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 2, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"bitcrusherQuantization\", \"envelope\": \"note size\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"noteVolume\", \"envelope\": \"note size\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"noteVolume\", \"envelope\": \"flare\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 12, \"inverse\": false, \"perEnvelopeSpeed\": 64, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": true } },\n                { name: \"distant sorrow\", generalMidi: false, settings: { \"type\": \"harmonics\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 707.11, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 707.11, \"linearGain\": 4 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 0.5 }], \"effects\": [\"panning\", \"transition type\", \"detune\", \"vibrato\", \"note filter\", \"echo\", \"reverb\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"detuneCents\": 0, \"vibrato\": \"custom\", \"vibratoDepth\": 0.2, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.25 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.25 }], \"pan\": 0, \"panDelay\": 10, \"echoSustain\": 100, \"echoDelayBeats\": 1, \"reverb\": 74, \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"harmonics\": [86, 71, 57, 43, 43, 29, 57, 0, 14, 0, 29, 29, 29, 29, 29, 43, 43, 43, 43, 43, 57, 57, 57, 0, 57, 57, 0, 0], \"unison\": \"none\", \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"fall\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 10, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 2.5, \"perEnvelopeLowerBound\": 0.5, \"perEnvelopeUpperBound\": 2 }], \"isDrum\": false } },\n                { name: \"metallic kick\", generalMidi: false, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 28, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.5 }], \"effects\": [\"panning\"], \"pan\": 0, \"panDelay\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1\u2190(2\u20023\u20024)\", \"feedbackType\": \"1\u21922\u21923\u21924\", \"feedbackAmplitude\": 15, \"operators\": [{ \"frequency\": \"8\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"256x\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"128x\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"256x\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"operatorFrequency\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 16, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 0 }, { \"target\": \"noteVolume\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 3.5, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 256, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 256, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 1 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 256, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 3 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 256, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 2 }], \"isDrum\": false } },\n                //1.4 presets\n                { name: \"chimes\", generalMidi: false, settings: { \"type\": \"Picked String\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 8000, \"linearGain\": 2.8284 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 8000, \"linearGain\": 2.8284 }], \"effects\": [\"panning\", \"chord type\", \"detune\", \"note filter\", \"bitcrusher\", \"chorus\", \"echo\", \"reverb\"], \"chord\": \"strum\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"detuneCents\": 24, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.5 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 0.5 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2378.41, \"linearGain\": 1 }], \"bitcrusherOctave\": 4, \"bitcrusherQuantization\": 29, \"pan\": 0, \"panDelay\": 0, \"chorus\": 29, \"echoSustain\": 86, \"echoDelayBeats\": 0.667, \"reverb\": 84, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"harmonics\": [0, 100, 71, 71, 29, 0, 57, 86, 0, 0, 0, 0, 71, 29, 0, 0, 57, 0, 0, 86, 0, 0, 0, 100, 0, 100, 0, 57], \"unison\": \"none\", \"stringSustain\": 36, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 2, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"bitcrusherQuantization\", \"envelope\": \"swell\", \"inverse\": false, \"perEnvelopeSpeed\": 4.5, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"bitcrusherQuantization\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"noteVolume\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"stringSustain\", \"envelope\": \"random\", \"inverse\": false, \"perEnvelopeSpeed\": 16, \"perEnvelopeLowerBound\": 0.5, \"perEnvelopeUpperBound\": 1, \"steps\": 14, \"seed\": 2, \"waveform\": 0 }, { \"target\": \"detune\", \"envelope\": \"pitch\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96 }], \"isDrum\": false } },\n                { name: \"supersaw bass\", generalMidi: false, settings: { \"type\": \"supersaw\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.5 }], \"effects\": [\"panning\", \"note filter\", \"distortion\", \"chorus\", \"reverb\"], \"noteFilterType\": true, \"noteSimpleCut\": 9, \"noteSimplePeak\": 2, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 7231.23, \"linearGain\": 1 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 7231.23, \"linearGain\": 1 }], \"distortion\": 14, \"aliases\": false, \"pan\": 0, \"panDelay\": 10, \"chorus\": 29, \"reverb\": 0, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"pulseWidth\": 50, \"decimalOffset\": 0, \"dynamism\": 100, \"spread\": 67, \"shape\": 0, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"swell\", \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n                { name: \"ascension\", generalMidi: false, isNoise: false, settings: { \"type\": \"spectrum\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 0.25 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 0.25 }], \"eqSubFilters1\": [], \"effects\": [\"panning\", \"granular\", \"chorus\", \"reverb\"], \"granular\": 7, \"grainSize\": 44, \"grainAmounts\": 9, \"grainRange\": 37, \"pan\": 0, \"panDelay\": 10, \"chorus\": 71, \"reverb\": 19, \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"spectrum\": [43, 0, 0, 57, 0, 0, 14, 100, 29, 0, 0, 100, 29, 0, 100, 0, 57, 29, 86, 14, 14, 100, 14, 0, 14, 14, 0, 0, 43, 0], \"unison\": \"voiced\", \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"swell\", \"inverse\": false, \"perEnvelopeSpeed\": 0.7, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"panning\", \"envelope\": \"lfo\", \"inverse\": false, \"perEnvelopeSpeed\": 0.3, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false, \"waveform\": 2, \"steps\": 6 }], \"isDrum\": false } },\n                { name: \"liminal\", generalMidi: false, isNoise: false, settings: { \"type\": \"supersaw\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 840.9, \"linearGain\": 0.25 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 1.4142 }, { \"type\": \"high-pass\", \"cutoffHz\": 840.9, \"linearGain\": 0.25 }], \"effects\": [\"panning\", \"detune\", \"vibrato\", \"note filter\", \"granular\", \"distortion\", \"bitcrusher\", \"chorus\", \"reverb\"], \"detuneCents\": 8, \"vibrato\": \"custom\", \"vibratoDepth\": 0.48, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": true, \"noteSimpleCut\": 6, \"noteSimplePeak\": 2, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2196.8, \"linearGain\": 1 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2196.8, \"linearGain\": 1 }], \"granular\": 6, \"grainSize\": 49, \"grainAmounts\": 10, \"grainRange\": 40, \"distortion\": 57, \"aliases\": false, \"bitcrusherOctave\": 5, \"bitcrusherQuantization\": 0, \"pan\": 38, \"panDelay\": 10, \"chorus\": 29, \"reverb\": 48, \"fadeInSeconds\": 0, \"fadeOutTicks\": 72, \"pulseWidth\": 30, \"decimalOffset\": 0, \"dynamism\": 17, \"spread\": 83, \"shape\": 67, \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 17, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"pulseWidth\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 1.3333, \"perEnvelopeLowerBound\": 0.1, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"distortion\", \"envelope\": \"random\", \"inverse\": false, \"perEnvelopeSpeed\": 1, \"perEnvelopeLowerBound\": 0.2, \"perEnvelopeUpperBound\": 1, \"discrete\": true, \"steps\": 8, \"seed\": 2, \"waveform\": 2 }, { \"target\": \"panning\", \"envelope\": \"lfo\", \"inverse\": false, \"perEnvelopeSpeed\": 0.3333, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false, \"waveform\": 2, \"steps\": 2 }, { \"target\": \"noteVolume\", \"envelope\": \"swell\", \"inverse\": false, \"perEnvelopeSpeed\": 18, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"noteVolume\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"granular\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }], \"isDrum\": false } },\n\n            ])\n        },\n        {\n            name: \"Slarmoo's Box Chip Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                //Made by Slarmoo\n                { name: \"Slarmoo's Pulse\", midiProgram: 80, settings: { \"type\": \"PWM\", \"volume\": 0, \"eqFilter\": [], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [], \"effects\": [\"panning\", \"transition type\", \"chord type\", \"detune\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"chord\": \"arpeggio\", \"fastTwoNoteArp\": true, \"arpeggioSpeed\": 8, \"detuneCents\": 24, \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"pulseWidth\": 50, \"decimalOffset\": 0, \"unison\": \"none\", \"pitchEnvelopeStart0\": 0, \"pitchEnvelopeEnd0\": 96, \"envelopeInverse0\": false, \"envelopes\": [{ \"target\": \"detune\", \"envelope\": \"pitch\" }], \"isDrum\": false } },\n                { name: \"discovery square\", midiProgram: 80, settings: { \"type\": \"chip\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.3536 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.3536 }], \"effects\": [\"panning\", \"bitcrusher\"], \"bitcrusherOctave\": 5.5, \"bitcrusherQuantization\": 57, \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"wave\": \"square\", \"unison\": \"octave\", \"isUsingAdvancedLoopControls\": false, \"chipWaveLoopStart\": 0, \"chipWaveLoopEnd\": 2, \"chipWaveLoopMode\": 0, \"chipWavePlayBackwards\": false, \"chipWaveStartOffset\": 0, \"envelopes\": [], \"isDrum\": false } },\n                //I got this from masked eternity, though I believe that someone else made it\n                { name: \"VRC6 Sawtooth alt\", midiProgram: 81, settings: { \"type\": \"custom chip\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 0.5 }], \"effects\": [\"panning\", \"transition type\", \"chord type\", \"pitch shift\", \"detune\", \"vibrato\", \"distortion\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"chord\": \"arpeggio\", \"fastTwoNoteArp\": true, \"arpeggioSpeed\": 12, \"pitchShiftSemitones\": 12, \"detuneCents\": 0, \"vibrato\": \"none\", \"vibratoDepth\": 0, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"distortion\": 0, \"aliases\": false, \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"wave\": \"square\", \"unison\": \"none\", \"customChipWave\": { \"0\": -1, \"1\": -1, \"2\": -1, \"3\": -1, \"4\": -1, \"5\": -1, \"6\": -1, \"7\": -1, \"8\": -1, \"9\": -5, \"10\": -5, \"11\": -5, \"12\": -4, \"13\": -4, \"14\": -4, \"15\": -3, \"16\": -3, \"17\": -3, \"18\": -7, \"19\": -7, \"20\": -6, \"21\": -6, \"22\": -5, \"23\": -5, \"24\": -4, \"25\": -4, \"26\": -4, \"27\": -7, \"28\": -7, \"29\": -6, \"30\": -6, \"31\": -5, \"32\": -5, \"33\": -4, \"34\": -4, \"35\": -4, \"36\": -8, \"37\": -8, \"38\": -7, \"39\": -7, \"40\": -6, \"41\": -6, \"42\": -5, \"43\": -5, \"44\": -4, \"45\": -4, \"46\": 21, \"47\": 20, \"48\": 18, \"49\": 17, \"50\": 16, \"51\": 14, \"52\": 13, \"53\": 12, \"54\": 11, \"55\": 7, \"56\": 6, \"57\": 6, \"58\": 5, \"59\": 5, \"60\": 5, \"61\": 4, \"62\": 4, \"63\": 4 }, \"customChipWaveIntegral\": { \"0\": 0, \"1\": 0, \"2\": 0, \"3\": 0, \"4\": 0, \"5\": 0, \"6\": 0, \"7\": 0, \"8\": 0, \"9\": 0, \"10\": 0, \"11\": 0, \"12\": 0, \"13\": 0, \"14\": 0, \"15\": 0, \"16\": 0, \"17\": 0, \"18\": 0, \"19\": 0, \"20\": 0, \"21\": 0, \"22\": 0, \"23\": 0, \"24\": 0, \"25\": 0, \"26\": 0, \"27\": 0, \"28\": 0, \"29\": 0, \"30\": 0, \"31\": 0, \"32\": 0, \"33\": 0, \"34\": 0, \"35\": 0, \"36\": 0, \"37\": 0, \"38\": 0, \"39\": 0, \"40\": 0, \"41\": 0, \"42\": 0, \"43\": 0, \"44\": 0, \"45\": 0, \"46\": 0, \"47\": 0, \"48\": 0, \"49\": 0, \"50\": 0, \"51\": 0, \"52\": 0, \"53\": 0, \"54\": 0, \"55\": 0, \"56\": 0, \"57\": 0, \"58\": 0, \"59\": 0, \"60\": 0, \"61\": 0, \"62\": 0, \"63\": 0, \"64\": 0 }, \"envelopes\": [], \"isDrum\": false } },\n                //Made by Slarmoo\n                { name: \"pulse arps\", midiProgram: 80, settings: { \"type\": \"PWM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.125 }, { \"type\": \"high-pass\", \"cutoffHz\": 840.9, \"linearGain\": 2 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 7, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 0.125 }, { \"type\": \"high-pass\", \"cutoffHz\": 840.9, \"linearGain\": 2 }], \"effects\": [\"panning\", \"transition type\", \"chord type\", \"detune\", \"chorus\", \"echo\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"chord\": \"arpeggio\", \"fastTwoNoteArp\": true, \"arpeggioSpeed\": 8, \"detuneCents\": 64, \"pan\": 58, \"panDelay\": 10, \"chorus\": 43, \"echoSustain\": 71, \"echoDelayBeats\": 0.333, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"pulseWidth\": 50, \"decimalOffset\": 0, \"unison\": \"none\", \"envelopes\": [{ \"target\": \"detune\", \"envelope\": \"pitch\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96 }, { \"target\": \"pulseWidth\", \"envelope\": \"pitch\", \"inverse\": true, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"pitchEnvelopeStart\": 24, \"pitchEnvelopeEnd\": 83 }, { \"target\": \"panning\", \"envelope\": \"lfo\", \"inverse\": false, \"perEnvelopeSpeed\": 1, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"waveform\": 0, \"steps\": 2 }, { \"target\": \"noteVolume\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"chorus\", \"envelope\": \"twang\", \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n            ])\n        },\n        {\n            name: \"Slarmoo's Box Instrumental Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                //Made by Slarmoo\n                { name: \"rusty flute\", midiProgram: 73, settings: { \"type\": \"FM\", \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 13454.34, \"linearGain\": 2.8284 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"peak\", \"cutoffHz\": 13454.34, \"linearGain\": 2.8284 }], \"effects\": [\"panning\", \"transition type\", \"detune\", \"distortion\", \"reverb\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"detuneCents\": -7, \"distortion\": 14, \"aliases\": false, \"pan\": 0, \"panDelay\": 10, \"reverb\": 100, \"fadeInSeconds\": 0, \"fadeOutTicks\": 96, \"algorithm\": \"1\u21902\u21903\u21904\", \"feedbackType\": \"3\u21924\", \"feedbackAmplitude\": 8, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"2\u00D7\", \"amplitude\": 5, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"2\u00D7\", \"amplitude\": 4, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"20\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [], \"isDrum\": false } },\n                { name: \"bitcrushed piano\", midiProgram: 4, settings: { \"type\": \"chip\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 2.8284 }, { \"type\": \"high-pass\", \"cutoffHz\": 74.33, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 2.8284 }, { \"type\": \"high-pass\", \"cutoffHz\": 74.33, \"linearGain\": 0.5 }], \"effects\": [\"panning\", \"transition type\", \"detune\", \"distortion\", \"bitcrusher\", \"reverb\"], \"transition\": \"continue\", \"clicklessTransition\": false, \"detuneCents\": 0, \"distortion\": 29, \"aliases\": true, \"bitcrusherOctave\": 4, \"bitcrusherQuantization\": 43, \"pan\": 0, \"panDelay\": 0, \"reverb\": 0, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"wave\": \"triangle\", \"unison\": \"none\", \"isUsingAdvancedLoopControls\": true, \"chipWaveLoopStart\": 0, \"chipWaveLoopEnd\": 32, \"chipWaveLoopMode\": 0, \"chipWavePlayBackwards\": false, \"chipWaveStartOffset\": 0, \"envelopes\": [{ \"target\": \"bitcrusherQuantization\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0.6, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"noteVolume\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }], \"isDrum\": false } },\n                { name: \"detuned piano\", midiProgram: 3, settings: { \"type\": \"Picked String\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 2.8284 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 840.9, \"linearGain\": 2.8284 }], \"effects\": [\"panning\", \"transition type\", \"detune\", \"vibrato\", \"note filter\", \"bitcrusher\"], \"transition\": \"continue\", \"clicklessTransition\": false, \"detuneCents\": 44, \"vibrato\": \"custom\", \"vibratoDepth\": 0.04, \"vibratoDelay\": 13, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 1 }], \"noteSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 420.45, \"linearGain\": 1 }], \"bitcrusherOctave\": 4, \"bitcrusherQuantization\": 14, \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"harmonics\": [86, 86, 71, 71, 57, 57, 43, 29, 14, 29, 29, 29, 29, 29, 29, 29, 29, 43, 43, 43, 43, 43, 29, 14, 14, 0, 0, 0], \"unison\": \"custom\", \"unisonVoices\": 2, \"unisonSpread\": 0.26, \"unisonOffset\": 0, \"unisonExpression\": 1, \"unisonSign\": 1, \"stringSustain\": 79, \"envelopes\": [{ \"target\": \"detune\", \"envelope\": \"random\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 1, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"steps\": 2, \"seed\": 49, \"waveform\": 1 }, { \"target\": \"noteVolume\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 1.6667, \"perEnvelopeLowerBound\": 0.4, \"perEnvelopeUpperBound\": 1, \"steps\": 2, \"seed\": 2, \"waveform\": 0 }, { \"target\": \"unison\", \"envelope\": \"random\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 1, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"steps\": 2, \"seed\": 20, \"waveform\": 1 }, { \"target\": \"noteFilterAllFreqs\", \"envelope\": \"pitch\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": true, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"steps\": 2, \"seed\": 2, \"waveform\": 0 }], \"isDrum\": false } },\n                { name: \"pan flute 2\", midiProgram: 75, isNoise: false, settings: { \"type\": \"spectrum\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 2 }, { \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.3536 }, { \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"peak\", \"cutoffHz\": 2828.43, \"linearGain\": 2 }, { \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.3536 }, { \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.5 }], \"effects\": [\"panning\", \"transition type\", \"note filter\", \"bitcrusher\", \"reverb\"], \"transition\": \"continue\", \"clicklessTransition\": false, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.5 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.5 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.5 }], \"bitcrusherOctave\": 6, \"bitcrusherQuantization\": 57, \"pan\": 0, \"panDelay\": 10, \"reverb\": 16, \"fadeInSeconds\": 0.0125, \"fadeOutTicks\": -6, \"spectrum\": [100, 29, 14, 14, 57, 0, 0, 71, 0, 86, 57, 43, 57, 71, 14, 29, 14, 14, 14, 100, 71, 14, 14, 14, 14, 86, 43, 14, 0, 0], \"unison\": \"none\", \"pitchEnvelopeStart0\": 0, \"pitchEnvelopeEnd0\": 96, \"envelopeInverse0\": false, \"pitchEnvelopeStart1\": 0, \"pitchEnvelopeEnd1\": 96, \"envelopeInverse1\": false, \"pitchEnvelopeStart2\": 0, \"pitchEnvelopeEnd2\": 96, \"envelopeInverse2\": false, \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"note size\" }, { \"target\": \"bitcrusherQuantization\", \"envelope\": \"note size\" }, { \"target\": \"noteVolume\", \"envelope\": \"note size\" }], \"isDrum\": false } },\n                { name: \"trumpet 2\", midiProgram: 56, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3049.17, \"linearGain\": 1.4142 }], \"eqFilterType\": true, \"eqSimpleCut\": 7, \"eqSimplePeak\": 3, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters1\": [], \"effects\": [\"panning\", \"detune\", \"vibrato\", \"note filter\", \"distortion\", \"chorus\", \"reverb\"], \"detuneCents\": -64, \"vibrato\": \"custom\", \"vibratoDepth\": 0.68, \"vibratoDelay\": 17, \"vibratoSpeed\": 12, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 3363.59, \"linearGain\": 0.1768 }, { \"type\": \"high-pass\", \"cutoffHz\": 1000, \"linearGain\": 0.1768 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 3363.59, \"linearGain\": 0.1768 }, { \"type\": \"high-pass\", \"cutoffHz\": 1000, \"linearGain\": 0.1768 }], \"distortion\": 29, \"aliases\": false, \"pan\": 0, \"panDelay\": 10, \"chorus\": 14, \"reverb\": 0, \"fadeInSeconds\": 0.0263, \"fadeOutTicks\": -3, \"algorithm\": \"1\u20032\u2190(3\u20024)\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 9, \"operators\": [{ \"frequency\": \"0.75\u00D7\", \"amplitude\": 14, \"waveform\": \"pulse width\", \"pulseWidth\": 2 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 14, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 8, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 5, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"operatorAmplitude\", \"envelope\": \"flare\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 8, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 3 }, { \"target\": \"feedbackAmplitude\", \"envelope\": \"swell\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 32, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"operatorFrequency\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 128, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 0 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"swell\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 2.5, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 2 }, { \"target\": \"noteVolume\", \"envelope\": \"note size\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"detune\", \"envelope\": \"note size\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": true, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n                { name: \"harp 2\", midiProgram: 46, settings: { \"type\": \"FM6op\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 2.8284 }, { \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 0.25 }, { \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 1000, \"linearGain\": 2.8284 }, { \"type\": \"high-pass\", \"cutoffHz\": 62.5, \"linearGain\": 0.25 }, { \"type\": \"high-pass\", \"cutoffHz\": 148.65, \"linearGain\": 0.5 }], \"eqSubFilters1\": [], \"effects\": [\"panning\", \"detune\", \"note filter\", \"echo\", \"reverb\"], \"detuneCents\": -23, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 105.11, \"linearGain\": 2.8284 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 6727.17, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 105.11, \"linearGain\": 2.8284 }], \"pan\": 0, \"panDelay\": 10, \"echoSustain\": 29, \"echoDelayBeats\": 1.083, \"reverb\": 74, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"algorithm\": \"1\u21904\u20032\u21905\u20033\u21906\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 5, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 10, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 5, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 10, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"4\u00D7\", \"amplitude\": 6, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"6\u00D7\", \"amplitude\": 12, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 2, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 4, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"operatorFrequency\", \"envelope\": \"tremolo\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 8, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 1 }, { \"target\": \"detune\", \"envelope\": \"decay\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 7, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }, { \"target\": \"noteFilterFreq\", \"envelope\": \"tremolo2\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 1, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 0 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"twang\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 8, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"index\": 4 }, { \"target\": \"operatorAmplitude\", \"envelope\": \"swell\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": true, \"perEnvelopeSpeed\": 8, \"perEnvelopeLowerBound\": 0.4, \"perEnvelopeUpperBound\": 1, \"index\": 0 }, { \"target\": \"noteVolume\", \"envelope\": \"punch\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n                { name: \"electric guitar 1\", midiProgram: 30, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 1189.21, \"linearGain\": 2 }, { \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 1.4142 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 0.0884 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 1189.21, \"linearGain\": 2 }, { \"type\": \"low-pass\", \"cutoffHz\": 4000, \"linearGain\": 1.4142 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 420.45, \"linearGain\": 0.0884 }], \"effects\": [\"panning\", \"chord type\", \"vibrato\", \"note filter\", \"distortion\", \"reverb\"], \"chord\": \"monophonic\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"monoChordTone\": 0, \"vibrato\": \"delayed\", \"vibratoDepth\": 0.3, \"vibratoDelay\": 18.5, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1414.21, \"linearGain\": 4 }, { \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 1 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1414.21, \"linearGain\": 4 }, { \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 1 }], \"distortion\": 100, \"aliases\": false, \"pan\": 0, \"panDelay\": 0, \"reverb\": 6, \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"algorithm\": \"1\u20032\u20033\u20034\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 0, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"2\u00D7\", \"amplitude\": 0, \"waveform\": \"sawtooth\", \"pulseWidth\": 5 }, { \"frequency\": \"4\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"0.25\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"noteVolume\", \"envelope\": \"punch\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"vibratoDepth\", \"envelope\": \"rise\", \"inverse\": false, \"perEnvelopeSpeed\": 9, \"perEnvelopeLowerBound\": 1, \"perEnvelopeUpperBound\": 2, \"discrete\": false }, { \"target\": \"noteVolume\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"distortion\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }], \"isDrum\": false } },\n                { name: \"electric guitar 2\", midiProgram: 30, settings: { \"type\": \"PWM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 5.6569 }, { \"type\": \"high-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 2 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 3363.59, \"linearGain\": 5.6569 }, { \"type\": \"high-pass\", \"cutoffHz\": 1681.79, \"linearGain\": 0.25 }, { \"type\": \"peak\", \"cutoffHz\": 5656.85, \"linearGain\": 2 }], \"effects\": [\"panning\", \"chord type\", \"vibrato\", \"note filter\", \"distortion\", \"bitcrusher\", \"chorus\", \"reverb\"], \"chord\": \"monophonic\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"monoChordTone\": 0, \"vibrato\": \"custom\", \"vibratoDepth\": 0.68, \"vibratoDelay\": 22, \"vibratoSpeed\": 10, \"vibratoType\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1000, \"linearGain\": 2.8284 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1000, \"linearGain\": 2.8284 }], \"distortion\": 43, \"aliases\": false, \"bitcrusherOctave\": 6.5, \"bitcrusherQuantization\": 71, \"pan\": 0, \"panDelay\": 0, \"chorus\": 14, \"reverb\": 13, \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"pulseWidth\": 50, \"decimalOffset\": 0, \"unison\": \"none\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"rise\", \"inverse\": false, \"perEnvelopeSpeed\": 0.3333, \"perEnvelopeLowerBound\": 0.8, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"pulseWidth\", \"envelope\": \"twang\", \"inverse\": true, \"perEnvelopeSpeed\": 2.25, \"perEnvelopeLowerBound\": 0.5, \"perEnvelopeUpperBound\": 0.9, \"discrete\": false }, { \"target\": \"noteVolume\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }, { \"target\": \"bitcrusherQuantization\", \"envelope\": \"note size\", \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"discrete\": false }], \"isDrum\": false } },\n            ])\n        },\n        {\n            name: \"Slarmoo's Box Novelty Presets\", presets: <DictionaryArray<Preset>>toNameMap([\n                //Made by Slarmoo\n                { name: \"bitcrushed artifacts\", generalMidi: false, settings: { \"type\": \"Picked String\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9656.85, \"linearGain\": 0.5 }], \"eqFilterType\": true, \"eqSimpleCut\": 9, \"eqSimplePeak\": 1, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters1\": [], \"effects\": [\"panning\", \"distortion\", \"bitcrusher\", \"echo\"], \"distortion\": 71, \"aliases\": false, \"bitcrusherOctave\": 2, \"bitcrusherQuantization\": 86, \"pan\": 0, \"panDelay\": 10, \"echoSustain\": 0, \"echoDelayBeats\": 1, \"fadeInSeconds\": 0, \"fadeOutTicks\": -6, \"harmonics\": [0, 0, 0, 0, 0, 0, 0, 57, 0, 0, 0, 0, 0, 0, 100, 43, 0, 0, 14, 86, 0, 14, 0, 0, 0, 0, 0, 86], \"unison\": \"none\", \"stringSustain\": 14, \"envelopes\": [], \"isDrum\": false } },\n                { name: \"whistle 2\", midiProgram: 78, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 2110.37, \"linearGain\": 1.4142 }], \"eqFilterType\": true, \"eqSimpleCut\": 6, \"eqSimplePeak\": 3, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters1\": [], \"effects\": [\"panning\", \"transition type\", \"pitch shift\", \"note filter\", \"distortion\", \"echo\", \"reverb\"], \"transition\": \"normal\", \"clicklessTransition\": false, \"pitchShiftSemitones\": 11, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1414.21, \"linearGain\": 2 }, { \"type\": \"high-pass\", \"cutoffHz\": 88.39, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 4 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1414.21, \"linearGain\": 2 }, { \"type\": \"high-pass\", \"cutoffHz\": 88.39, \"linearGain\": 2 }, { \"type\": \"peak\", \"cutoffHz\": 1681.79, \"linearGain\": 4 }], \"distortion\": 43, \"aliases\": false, \"pan\": 0, \"panDelay\": 10, \"echoSustain\": 57, \"echoDelayBeats\": 1.083, \"reverb\": 87, \"fadeInSeconds\": 0.0575, \"fadeOutTicks\": -1, \"harmonics\": [57, 0, 0, 0, 0, 0, 0, 0, 0, 86, 57, 0, 0, 0, 0, 0, 0, 0, 86, 0, 0, 0, 57, 29, 0, 29, 100, 0], \"unison\": \"none\", \"envelopes\": [{ \"target\": \"pitchShift\", \"envelope\": \"decay 1\" }], \"isDrum\": false } },\n                { name: \"frog wuh\", generalMidi: false, settings: { \"type\": \"spectrum\", \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 6727.17, \"linearGain\": 8 }, { \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.125 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 594.6, \"linearGain\": 0.5 }, { \"type\": \"peak\", \"cutoffHz\": 6727.17, \"linearGain\": 8 }, { \"type\": \"low-pass\", \"cutoffHz\": 13454.34, \"linearGain\": 0.125 }], \"eqSubFilters1\": [], \"effects\": [\"panning\", \"pitch shift\", \"note filter\"], \"pitchShiftSemitones\": 0, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1000, \"linearGain\": 1 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 1000, \"linearGain\": 1 }], \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": -3, \"spectrum\": [100, 29, 14, 29, 0, 14, 0, 71, 0, 43, 14, 71, 0, 0, 71, 14, 100, 0, 71, 0, 43, 86, 43, 0, 43, 0, 0, 43, 29, 29], \"envelopes\": [{ \"target\": \"pitchShift\", \"envelope\": \"twang 1\" }, { \"target\": \"noteFilterAllFreqs\", \"envelope\": \"twang 1\" }], \"isDrum\": false } },\n                { name: \"stationary harmonics\", generalMidi: false, settings: { \"type\": \"harmonics\", \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 353.55, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.5 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 4756.83, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 353.55, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 1189.21, \"linearGain\": 0.5 }], \"effects\": [\"panning\", \"transition type\", \"chord type\", \"vibrato\"], \"transition\": \"continue\", \"clicklessTransition\": false, \"chord\": \"simultaneous\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"vibrato\": \"shaky\", \"vibratoDepth\": 0.1, \"vibratoDelay\": 0, \"vibratoSpeed\": 10, \"vibratoType\": 1, \"pan\": 0, \"panDelay\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"harmonics\": [100, 0, 57, 29, 14, 57, 29, 29, 14, 14, 29, 43, 14, 14, 14, 0, 14, 29, 29, 14, 0, 0, 14, 0, 0, 29, 14, 14], \"unison\": \"stationary\", \"envelopes\": [], \"isDrum\": false } },\n                { name: \"dead souls\", generalMidi: false, settings: { \"type\": \"spectrum\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.1768 }, { \"type\": \"high-pass\", \"cutoffHz\": 353.55, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 1.4142 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": true, \"eqSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 0.1768 }, { \"type\": \"high-pass\", \"cutoffHz\": 353.55, \"linearGain\": 0.0884 }, { \"type\": \"peak\", \"cutoffHz\": 707.11, \"linearGain\": 1.4142 }], \"effects\": [\"panning\", \"transition type\", \"chord type\", \"pitch shift\", \"detune\", \"distortion\", \"chorus\", \"reverb\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"chord\": \"arpeggio\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"pitchShiftSemitones\": 24, \"detuneCents\": -200, \"distortion\": 100, \"aliases\": false, \"pan\": 0, \"panDelay\": 10, \"chorus\": 14, \"reverb\": 35, \"fadeInSeconds\": 0, \"fadeOutTicks\": -1, \"spectrum\": [100, 71, 43, 43, 29, 29, 29, 14, 14, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 57, 14, 14, 0, 0], \"unison\": \"none\", \"envelopes\": [{ \"target\": \"pitchShift\", \"envelope\": \"random\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 24, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1.2, \"steps\": 16, \"seed\": 37, \"waveform\": 0 }, { \"target\": \"noteVolume\", \"envelope\": \"note size\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"steps\": 2, \"seed\": 2, \"waveform\": 0 }, { \"target\": \"detune\", \"envelope\": \"note size\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": true, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"steps\": 2, \"seed\": 2, \"waveform\": 0 }, { \"target\": \"distortion\", \"envelope\": \"note size\", \"pitchEnvelopeStart\": 0, \"pitchEnvelopeEnd\": 96, \"inverse\": false, \"perEnvelopeSpeed\": 0, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"steps\": 2, \"seed\": 2, \"waveform\": 0 }], \"isDrum\": false } },\n                { name: \"flutter\", generalMidi: false, settings: { \"type\": \"FM\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 707.11, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 6727.17, \"linearGain\": 2.8284 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 707.11, \"linearGain\": 1 }, { \"type\": \"peak\", \"cutoffHz\": 6727.17, \"linearGain\": 2.8284 }], \"effects\": [\"panning\", \"transition type\", \"chorus\", \"reverb\", \"ring mod\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"ringMod\": 100, \"ringModHz\": 100, \"ringModWaveformIndex\": 0, \"pan\": 0, \"panDelay\": 0, \"chorus\": 14, \"reverb\": 10, \"fadeInSeconds\": 0, \"fadeOutTicks\": 12, \"algorithm\": \"1\u21903\u20032\u21904\", \"feedbackType\": \"1\u27F2\", \"feedbackAmplitude\": 3, \"operators\": [{ \"frequency\": \"1\u00D7\", \"amplitude\": 15, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 10, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }, { \"frequency\": \"1\u00D7\", \"amplitude\": 0, \"waveform\": \"sine\", \"pulseWidth\": 5 }], \"envelopes\": [{ \"target\": \"ringModulationHz\", \"envelope\": \"fall\", \"inverse\": false, \"perEnvelopeSpeed\": 1.5, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1.9 }, { \"target\": \"noteVolume\", \"envelope\": \"blip\", \"inverse\": false, \"perEnvelopeSpeed\": 0.25, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1 }], \"isDrum\": false } },\n                { name: \"vinyl\", generalMidi: false, settings: { \"type\": \"noise\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 1414.21, \"linearGain\": 0.3536 }, { \"type\": \"low-pass\", \"cutoffHz\": 1189.21, \"linearGain\": 0.25 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 1414.21, \"linearGain\": 0.3536 }, { \"type\": \"low-pass\", \"cutoffHz\": 1189.21, \"linearGain\": 0.25 }], \"effects\": [\"panning\", \"transition type\", \"note filter\", \"distortion\", \"bitcrusher\", \"chorus\", \"echo\", \"reverb\"], \"transition\": \"interrupt\", \"clicklessTransition\": false, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 0.5 }, { \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 1 }], \"noteSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 250, \"linearGain\": 0.5 }, { \"type\": \"low-pass\", \"cutoffHz\": 8000, \"linearGain\": 1 }], \"distortion\": 14, \"aliases\": false, \"bitcrusherOctave\": 5.5, \"bitcrusherQuantization\": 14, \"pan\": 0, \"panDelay\": 10, \"chorus\": 29, \"echoSustain\": 14, \"echoDelayBeats\": 0.083, \"reverb\": 32, \"fadeInSeconds\": 0, \"fadeOutTicks\": 24, \"wave\": \"crackling\", \"unison\": \"none\", \"envelopes\": [], \"isDrum\": false } },\n                // { name: \"glass\", generalMidi: false, isNoise: true, settings: { \"type\": \"spectrum\", \"volume\": 0, \"eqFilter\": [{ \"type\": \"high-pass\", \"cutoffHz\": 2000, \"linearGain\": 2.8284 }, { \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1 }], \"eqFilterType\": false, \"eqSimpleCut\": 10, \"eqSimplePeak\": 0, \"envelopeSpeed\": 12, \"discreteEnvelope\": false, \"eqSubFilters0\": [{ \"type\": \"high-pass\", \"cutoffHz\": 2000, \"linearGain\": 2.8284 }, { \"type\": \"low-pass\", \"cutoffHz\": 5656.85, \"linearGain\": 1 }], \"effects\": [\"panning\", \"chord type\", \"note filter\", \"bitcrusher\", \"reverb\"], \"chord\": \"strum\", \"fastTwoNoteArp\": false, \"arpeggioSpeed\": 12, \"noteFilterType\": false, \"noteSimpleCut\": 10, \"noteSimplePeak\": 0, \"noteFilter\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 2000, \"linearGain\": 0.5 }], \"noteSubFilters0\": [{ \"type\": \"low-pass\", \"cutoffHz\": 9513.66, \"linearGain\": 0.3536 }, { \"type\": \"high-pass\", \"cutoffHz\": 2000, \"linearGain\": 0.5 }], \"noteSubFilters1\": [{ \"type\": \"low-pass\", \"cutoffHz\": 16000, \"linearGain\": 1 }], \"bitcrusherOctave\": 3.5, \"bitcrusherQuantization\": 29, \"pan\": 0, \"panDelay\": 0, \"reverb\": 23, \"fadeInSeconds\": 0, \"fadeOutTicks\": 48, \"spectrum\": [100, 0, 0, 0, 0, 71, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], \"unison\": \"none\", \"envelopes\": [{ \"target\": \"noteFilterAllFreqs\", \"envelope\": \"random\", \"inverse\": false, \"perEnvelopeSpeed\": 6.5, \"perEnvelopeLowerBound\": 0.8, \"perEnvelopeUpperBound\": 1, \"steps\": 2, \"seed\": 2, \"waveform\": 3 }, { \"target\": \"bitcrusherFrequency\", \"envelope\": \"random\", \"inverse\": false, \"perEnvelopeSpeed\": 1.5, \"perEnvelopeLowerBound\": 0.8, \"perEnvelopeUpperBound\": 1, \"steps\": 2, \"seed\": 1, \"waveform\": 3 }, { \"target\": \"noteVolume\", \"envelope\": \"random\", \"inverse\": false, \"perEnvelopeSpeed\": 4, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"steps\": 2, \"seed\": 6, \"waveform\": 3 }, { \"target\": \"noteVolume\", \"envelope\": \"random\", \"inverse\": false, \"perEnvelopeSpeed\": 4, \"perEnvelopeLowerBound\": 0, \"perEnvelopeUpperBound\": 1, \"steps\": 2, \"seed\": 10, \"waveform\": 3 }], \"isDrum\": true } },\n            ])\n        }\n    ]);\n\n    static valueToPreset(presetValue: number): Preset | null {\n        const categoryIndex = presetValue >> 6;\n        const presetIndex = presetValue & 0x3F;\n        return EditorConfig.presetCategories[categoryIndex]?.presets[presetIndex];\n    }\n\n    static midiProgramToPresetValue(program: number): number | null {\n        for (let categoryIndex = 0; categoryIndex < EditorConfig.presetCategories.length; categoryIndex++) {\n            const category = EditorConfig.presetCategories[categoryIndex];\n            for (let presetIndex = 0; presetIndex < category.presets.length; presetIndex++) {\n                const preset = category.presets[presetIndex];\n                if (preset.generalMidi && preset.midiProgram == program) return (categoryIndex << 6) + presetIndex;\n            }\n        }\n        return null;\n    }\n\n    static nameToPresetValue(presetName: string): number | null {\n        for (let categoryIndex = 0; categoryIndex < EditorConfig.presetCategories.length; categoryIndex++) {\n            const category = EditorConfig.presetCategories[categoryIndex];\n            for (let presetIndex = 0; presetIndex < category.presets.length; presetIndex++) {\n                const preset = category.presets[presetIndex];\n                if (preset.name == presetName) return (categoryIndex << 6) + presetIndex;\n            }\n        }\n        return null;\n    }\n\n    static instrumentToPreset(instrument: InstrumentType): Preset | null {\n        return EditorConfig.presetCategories[0].presets.dictionary?.[TypePresets?.[instrument]];\n    }\n}\n", "// Copyright (c) John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { EditorConfig, Preset } from \"../editor/EditorConfig\";\nimport { Channel } from \"./Channel\";\nimport { Effect } from \"./Effect\";\nimport { FilterControlPoint, FilterSettings } from \"./Filter\";\nimport { Instrument, LegacySettings } from \"./Instrument\";\nimport { makeNotePin, Note, Pattern } from \"./Pattern\";\nimport { Config, Dictionary, DictionaryArray, effectsIncludeChord, effectsIncludeDetune, effectsIncludePitchShift, effectsIncludeTransition, effectsIncludeVibrato, EffectType, Envelope, EnvelopeType, FilterType, InstrumentType, LFOEnvelopeTypes, loadBuiltInSamples, MDEffectType, RandomEnvelopeTypes, SampleLoadedEvent, sampleLoadEvents, sampleLoadingState, SampleLoadingState, SampleLoadingStatus, startLoadingSample, SustainType, toNameMap } from \"./SynthConfig\";\nimport { clamp, parseFloatWithDefault, parseIntWithDefault, secondsToFadeInSetting, ticksToFadeOutSetting, validateRange } from \"./utils\";\n//import { Synth } from \"./synth\";\n\nfunction encode32BitNumber(buffer: number[], x: number): void {\n    // 0b11_\n    buffer.push(base64IntToCharCode[(x >>> (6 * 5)) & 0x3]);\n    //      111111_\n    buffer.push(base64IntToCharCode[(x >>> (6 * 4)) & 0x3f]);\n    //             111111_\n    buffer.push(base64IntToCharCode[(x >>> (6 * 3)) & 0x3f]);\n    //                    111111_\n    buffer.push(base64IntToCharCode[(x >>> (6 * 2)) & 0x3f]);\n    //                           111111_\n    buffer.push(base64IntToCharCode[(x >>> (6 * 1)) & 0x3f]);\n    //                                  111111\n    buffer.push(base64IntToCharCode[(x >>> (6 * 0)) & 0x3f]);\n}\n\n// @TODO: This is error-prone, because the caller has to remember to increment\n// charIndex by 6 afterwards.\nfunction decode32BitNumber(compressed: string, charIndex: number): number {\n    let x = 0;\n    // 0b11_\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 5);\n    //      111111_\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 4);\n    //             111111_\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 3);\n    //                    111111_\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 2);\n    //                           111111_\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 1);\n    //                                  111111\n    x |= base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << (6 * 0);\n    return x;\n}\n\nfunction encodeUnisonSettings(buffer: number[], v: number, s: number, o: number, e: number, i: number): void {\n    // TODO: make these sign bits more efficient (bundle them together)\n    buffer.push(base64IntToCharCode[v]);\n\n    // TODO: make these use bitshifts instead for consistency\n    buffer.push(base64IntToCharCode[Number((s > 0))]);\n    let cleanS = Math.round(Math.abs(s) * 1000);\n    let cleanSDivided = Math.floor(cleanS / 63);\n    buffer.push(base64IntToCharCode[cleanS % 63], base64IntToCharCode[cleanSDivided % 63], base64IntToCharCode[Math.floor(cleanSDivided / 63)]);\n\n    buffer.push(base64IntToCharCode[Number((o > 0))]);\n    let cleanO = Math.round(Math.abs(o) * 1000);\n    let cleanODivided = Math.floor(cleanO / 63);\n    buffer.push(base64IntToCharCode[cleanO % 63], base64IntToCharCode[cleanODivided % 63], base64IntToCharCode[Math.floor(cleanODivided / 63)]);\n\n    buffer.push(base64IntToCharCode[Number((e > 0))]);\n    let cleanE = Math.round(Math.abs(e) * 1000);\n    buffer.push(base64IntToCharCode[cleanE % 63], base64IntToCharCode[Math.floor(cleanE / 63)]);\n\n    buffer.push(base64IntToCharCode[Number((i > 0))]);\n    let cleanI = Math.round(Math.abs(i) * 1000);\n    buffer.push(base64IntToCharCode[cleanI % 63], base64IntToCharCode[Math.floor(cleanI / 63)]);\n}\n\nfunction convertLegacyKeyToKeyAndOctave(rawKeyIndex: number): [number, number] {\n    let key = clamp(0, Config.keys.length, rawKeyIndex);\n    let octave = 0;\n    // This conversion code depends on C through B being\n    // available as keys, of course.\n    if (rawKeyIndex === 12) {\n        // { name: \"C+\", isWhiteKey: false, basePitch: 24 }\n        key = 0;\n        octave = 1;\n    } else if (rawKeyIndex === 13) {\n        // { name: \"G- (actually F#-)\", isWhiteKey: false, basePitch: 6 }\n        key = 6;\n        octave = -1;\n    } else if (rawKeyIndex === 14) {\n        // { name: \"C-\", isWhiteKey: true, basePitch: 0 }\n        key = 0;\n        octave = -1;\n    } else if (rawKeyIndex === 15) {\n        // { name: \"oh no (F-)\", isWhiteKey: true, basePitch: 5 }\n        key = 5;\n        octave = -1;\n    }\n    return [key, octave];\n}\n\nconst enum CharCode {\n    SPACE = 32,\n    HASH = 35,\n    PERCENT = 37,\n    AMPERSAND = 38,\n    PLUS = 43,\n    DASH = 45,\n    DOT = 46,\n    NUM_0 = 48,\n    NUM_1 = 49,\n    NUM_2 = 50,\n    NUM_3 = 51,\n    NUM_4 = 52,\n    NUM_5 = 53,\n    NUM_6 = 54,\n    NUM_7 = 55,\n    NUM_8 = 56,\n    NUM_9 = 57,\n    EQUALS = 61,\n    A = 65,\n    B = 66,\n    C = 67,\n    D = 68,\n    E = 69,\n    F = 70,\n    G = 71,\n    H = 72,\n    I = 73,\n    J = 74,\n    K = 75,\n    L = 76,\n    M = 77,\n    N = 78,\n    O = 79,\n    P = 80,\n    Q = 81,\n    R = 82,\n    S = 83,\n    T = 84,\n    U = 85,\n    V = 86,\n    W = 87,\n    X = 88,\n    Y = 89,\n    Z = 90,\n    UNDERSCORE = 95,\n    a = 97,\n    b = 98,\n    c = 99,\n    d = 100,\n    e = 101,\n    f = 102,\n    g = 103,\n    h = 104,\n    i = 105,\n    j = 106,\n    k = 107,\n    l = 108,\n    m = 109,\n    n = 110,\n    o = 111,\n    p = 112,\n    q = 113,\n    r = 114,\n    s = 115,\n    t = 116,\n    u = 117,\n    v = 118,\n    w = 119,\n    x = 120,\n    y = 121,\n    z = 122,\n    LEFT_CURLY_BRACE = 123,\n    RIGHT_CURLY_BRACE = 125,\n}\n\nconst enum SongTagCode {\n    beatCount           = CharCode.a, // added in BeepBox URL version 2\n\tbars                = CharCode.b, // added in BeepBox URL version 2\n\tsongEq              = CharCode.c, // added in BeepBox URL version 2 for vibrato, switched to song eq in Slarmoo's Box 1.3\n\tfadeInOut           = CharCode.d, // added in BeepBox URL version 3 for transition, switched to fadeInOut in 9\n\tloopEnd             = CharCode.e, // added in BeepBox URL version 2\n\tnoteFilter          = CharCode.f, // added in BeepBox URL version 3\n\tbarCount            = CharCode.g, // added in BeepBox URL version 3\n\tunison              = CharCode.h, // added in BeepBox URL version 2\n\tinstrumentCount     = CharCode.i, // added in BeepBox URL version 3\n\tpatternCount        = CharCode.j, // added in BeepBox URL version 3\n\tkey                 = CharCode.k, // added in BeepBox URL version 2\n\tloopStart           = CharCode.l, // added in BeepBox URL version 2\n\treverb              = CharCode.m, // added in BeepBox URL version 5, DEPRECATED\n\tchannelCount        = CharCode.n, // added in BeepBox URL version 6\n\tchannelOctave       = CharCode.o, // added in BeepBox URL version 3\n\tpatterns            = CharCode.p, // added in BeepBox URL version 2\n\teffects             = CharCode.q, // added in BeepBox URL version 7\n\trhythm              = CharCode.r, // added in BeepBox URL version 2\n\tscale               = CharCode.s, // added in BeepBox URL version 2\n\ttempo               = CharCode.t, // added in BeepBox URL version 2\n\tpreset              = CharCode.u, // added in BeepBox URL version 7\n\tvolume              = CharCode.v, // added in BeepBox URL version 2\n\twave                = CharCode.w, // added in BeepBox URL version 2\n\tsupersaw            = CharCode.x, // added in BeepBox URL version 9 ([UB] was used for chip wave but is now DEPRECATED)\n\tloopControls        = CharCode.y, // added in BeepBox URL version 7, DEPRECATED, [UB] repurposed for chip wave loop controls\n\tdrumsetEnvelopes    = CharCode.z, // added in BeepBox URL version 7 for filter envelopes, still used for drumset envelopes\n\talgorithm           = CharCode.A, // added in BeepBox URL version 6\n\tfeedbackAmplitude   = CharCode.B, // added in BeepBox URL version 6\n\tchord               = CharCode.C, // added in BeepBox URL version 7, DEPRECATED\n\tdetune              = CharCode.D, // added in JummBox URL version 3(?) for detune, DEPRECATED\n\tenvelopes           = CharCode.E, // added in BeepBox URL version 6 for FM operator envelopes, repurposed in 9 for general envelopes.\n\tfeedbackType        = CharCode.F, // added in BeepBox URL version 6\n\tarpeggioSpeed       = CharCode.G, // added in JummBox URL version 3 for arpeggioSpeed, DEPRECATED\n\tharmonics           = CharCode.H, // added in BeepBox URL version 7\n\tstringSustain       = CharCode.I, // added in BeepBox URL version 9\n//\t                    = CharCode.J,\n//\t                    = CharCode.K,\n\tpan                 = CharCode.L, // added between 8 and 9, DEPRECATED\n\tcustomChipWave      = CharCode.M, // added in JummBox URL version 1(?) for customChipWave\n\tsongTitle           = CharCode.N, // added in JummBox URL version 1(?) for songTitle\n\tlimiterSettings     = CharCode.O, // added in JummBox URL version 3(?) for limiterSettings\n\toperatorAmplitudes  = CharCode.P, // added in BeepBox URL version 6\n\toperatorFrequencies = CharCode.Q, // added in BeepBox URL version 6\n\toperatorWaves       = CharCode.R, // added in JummBox URL version 4 for operatorWaves\n\tspectrum            = CharCode.S, // added in BeepBox URL version 7\n\tstartInstrument     = CharCode.T, // added in BeepBox URL version 6\n\tchannelNames        = CharCode.U, // added in JummBox URL version 4(?) for channelNames\n\tfeedbackEnvelope    = CharCode.V, // added in BeepBox URL version 6, DEPRECATED\n\tpulseWidth          = CharCode.W, // added in BeepBox URL version 7\n\taliases             = CharCode.X, // added in JummBox URL version 4 for aliases, DEPRECATED, [UB] repurposed for PWM decimal offset (DEPRECATED as well)\n//                      = CharCode.Y,\n//\t                    = CharCode.Z,\n//\t                    = CharCode.NUM_0,\n//\t                    = CharCode.NUM_1,\n//\t                    = CharCode.NUM_2,\n//\t                    = CharCode.NUM_3,\n//\t                    = CharCode.NUM_4,\n//\t                    = CharCode.NUM_5,\n//\t                    = CharCode.NUM_6,\n//\t                    = CharCode.NUM_7,\n//\t                    = CharCode.NUM_8,\n//\t                    = CharCode.NUM_9,\n//\t                    = CharCode.DASH,\n//\t                    = CharCode.UNDERSCORE,\n\n}\n\nconst base64IntToCharCode: ReadonlyArray<number> = [48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 45, 95];\nconst base64CharCodeToInt: ReadonlyArray<number> = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 62, 62, 0, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 0, 0, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 0, 0, 0, 0, 63, 0, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 0, 0, 0, 0, 0]; // 62 could be represented by either \"-\" or \".\" for historical reasons. New songs should use \"-\".\n\nclass BitFieldReader {\n    private _bits: number[] = [];\n    private _readIndex = 0;\n\n    constructor(source: string, startIndex: number, stopIndex: number) {\n        for (let i = startIndex; i < stopIndex; i++) {\n            const value = base64CharCodeToInt[source.charCodeAt(i)];\n            this._bits.push((value >> 5) & 0x1);\n            this._bits.push((value >> 4) & 0x1);\n            this._bits.push((value >> 3) & 0x1);\n            this._bits.push((value >> 2) & 0x1);\n            this._bits.push((value >> 1) & 0x1);\n            this._bits.push(value & 0x1);\n        }\n    }\n\n    read(bitCount: number): number {\n        let result = 0;\n        while (bitCount > 0) {\n            result = result << 1;\n            result += this._bits[this._readIndex++];\n            bitCount--;\n        }\n        return result;\n    }\n\n    readLongTail(minValue: number, minBits: number): number {\n        let result = minValue;\n        let numBits = minBits;\n        while (this._bits[this._readIndex++]) {\n            result += 1 << numBits;\n            numBits++;\n        }\n        while (numBits > 0) {\n            numBits--;\n            if (this._bits[this._readIndex++]) {\n                result += 1 << numBits;\n            }\n        }\n        return result;\n    }\n\n    readPartDuration(): number {\n        return this.readLongTail(1, 3);\n    }\n\n    readLegacyPartDuration(): number {\n        return this.readLongTail(1, 2);\n    }\n\n    readPinCount(): number {\n        return this.readLongTail(1, 0);\n    }\n\n    readPitchInterval(): number {\n        if (this.read(1)) {\n            return -this.readLongTail(1, 3);\n        } else {\n            return this.readLongTail(1, 3);\n        }\n    }\n}\n\nclass BitFieldWriter {\n    private _index = 0;\n    private _bits: number[] = [];\n\n    clear() {\n        this._index = 0;\n    }\n\n    write(bitCount: number, value: number): void {\n        bitCount--;\n        while (bitCount >= 0) {\n            this._bits[this._index++] = (value >>> bitCount) & 1;\n            bitCount--;\n        }\n    }\n\n    writeLongTail(minValue: number, minBits: number, value: number): void {\n        if (value < minValue) throw new Error(\"value out of bounds\");\n        value -= minValue;\n        let numBits = minBits;\n        while (value >= (1 << numBits)) {\n            this._bits[this._index++] = 1;\n            value -= 1 << numBits;\n            numBits++;\n        }\n        this._bits[this._index++] = 0;\n        while (numBits > 0) {\n            numBits--;\n            this._bits[this._index++] = (value >>> numBits) & 1;\n        }\n    }\n\n    writePartDuration(value: number): void {\n        this.writeLongTail(1, 3, value);\n    }\n\n    writePinCount(value: number): void {\n        this.writeLongTail(1, 0, value);\n    }\n\n    writePitchInterval(value: number): void {\n        if (value < 0) {\n            this.write(1, 1); // sign\n            this.writeLongTail(1, 3, -value);\n        } else {\n            this.write(1, 0); // sign\n            this.writeLongTail(1, 3, value);\n        }\n    }\n\n    concat(other: BitFieldWriter): void {\n        for (let i = 0; i < other._index; i++) {\n            this._bits[this._index++] = other._bits[i];\n        }\n    }\n\n    encodeBase64(buffer: number[]): number[] {\n\n        for (let i = 0; i < this._index; i += 6) {\n            const value = (this._bits[i] << 5) | (this._bits[i + 1] << 4) | (this._bits[i + 2] << 3) | (this._bits[i + 3] << 2) | (this._bits[i + 4] << 1) | this._bits[i + 5];\n            buffer.push(base64IntToCharCode[value]);\n        }\n        return buffer;\n    }\n\n    lengthBase64(): number {\n        return Math.ceil(this._index / 6);\n    }\n}\n\nexport interface HeldMod {\n    volume: number;\n    channelIndex: number;\n    instrumentIndex: number;\n    setting: number;\n    holdFor: number;\n}\n\nexport class Song {\n    private static readonly _format = Config.jsonFormat;\n    private static readonly _oldestBeepboxVersion = 2;\n    private static readonly _latestBeepboxVersion = 9;\n    private static readonly _oldestJummBoxVersion = 1;\n    private static readonly _latestJummBoxVersion = 6;\n    private static readonly _oldestGoldBoxVersion = 1;\n    private static readonly _latestGoldBoxVersion = 4;\n    private static readonly _oldestUltraBoxVersion = 1;\n    private static readonly _latestUltraBoxVersion = 5;\n    private static readonly _oldestSlarmoosBoxVersion = 1;\n    private static readonly _latestSlarmoosBoxVersion = 5;\n    // One-character variant detection at the start of URL to distinguish variants such as JummBox, Or Goldbox. \"j\" and \"g\" respectively\n    //also \"u\" is ultrabox lol\n    private static readonly _variant = 0x64; //\"d\" ~ DragonBox\n\n    title: string;\n    scale: number;\n    scaleCustom: boolean[] = [];\n    key: number;\n    octave: number;\n    tempo: number;\n    reverb: number;\n    beatsPerBar: number;\n    barCount: number;\n    patternsPerChannel: number;\n    rhythm: number;\n    layeredInstruments: boolean;\n    patternInstruments: boolean;\n    loopStart: number;\n    loopLength: number;\n    pitchChannelCount: number;\n    noiseChannelCount: number;\n    modChannelCount: number;\n    readonly channels: Channel[] = [];\n    limitDecay = 4.0;\n    limitRise = 4000.0;\n    compressionThreshold = 1.0;\n    limitThreshold = 1.0;\n    compressionRatio = 1.0;\n    limitRatio = 1.0;\n    masterGain = 1.0;\n    inVolumeCap = 0.0;\n    outVolumeCap = 0.0;\n    outVolumeCapL = 0.0;\n    outVolumeCapR = 0.0;\n    eqFilter = new FilterSettings();\n    eqFilterType = false;\n    eqFilterSimpleCut = Config.filterSimpleCutRange - 1;\n    eqFilterSimplePeak = 0;\n    eqSubFilters: (FilterSettings | null)[] = [];\n    tmpEqFilterStart: FilterSettings | null;\n    tmpEqFilterEnd: FilterSettings | null;\n\n    constructor(string?: string) {\n        if (string != undefined) {\n            this.fromBase64String(string);\n        } else {\n            this.initToDefault(true);\n        }\n    }\n\n    // Returns the ideal new pre volume when dragging (max volume for a normal note, a \"neutral\" value for mod notes based on how they work)\n    getNewNoteVolume = (isMod: boolean, modChannel?: number, modInstrument?: number, modCount?: number): number => {\n        if (!isMod || modChannel == undefined || modInstrument == undefined || modCount == undefined)\n            return Config.noteSizeMax;\n        else {\n            // Sigh, the way pitches count up and the visual ordering in the UI are flipped.\n            modCount = Config.modCount - modCount - 1;\n\n            const instrument = this.channels[modChannel].instruments[modInstrument];\n            let vol: number | undefined = Config.modulators[instrument.modulators[modCount]].newNoteVol;\n\n            let currentIndex = instrument.modulators[modCount];\n            // For tempo, actually use user defined tempo\n            let tempoIndex = Config.modulators.dictionary[\"tempo\"].index;\n            if(currentIndex == tempoIndex) vol = this.tempo - Config.modulators[tempoIndex].convertRealFactor;\n            //for effects and envelopes, use the user defined value of the selected instrument (or the default value if all or active is selected)\n            if (!Config.modulators[currentIndex].forSong && instrument.modInstruments[modCount][0] < this.channels[instrument.modChannels[modCount][0]].instruments.length) {\n                let chorusIndex = Config.modulators.dictionary[\"chorus\"].index;\n                let reverbIndex = Config.modulators.dictionary[\"reverb\"].index;\n                let gainIndex = Config.modulators.dictionary[\"gain\"].index;\n                let panningIndex = Config.modulators.dictionary[\"pan\"].index;\n                let panDelayIndex = Config.modulators.dictionary[\"pan delay\"].index;\n                let distortionIndex = Config.modulators.dictionary[\"distortion\"].index;\n                let detuneIndex = Config.modulators.dictionary[\"detune\"].index;\n                let vibratoDepthIndex = Config.modulators.dictionary[\"vibrato depth\"].index;\n                let vibratoSpeedIndex = Config.modulators.dictionary[\"vibrato speed\"].index;\n                let vibratoDelayIndex = Config.modulators.dictionary[\"vibrato delay\"].index;\n                let arpSpeedIndex = Config.modulators.dictionary[\"arp speed\"].index;\n                let bitCrushIndex = Config.modulators.dictionary[\"bit crush\"].index;\n                let freqCrushIndex = Config.modulators.dictionary[\"freq crush\"].index;\n                let echoIndex = Config.modulators.dictionary[\"echo\"].index;\n                let echoDelayIndex = Config.modulators.dictionary[\"echo delay\"].index;\n                let echoPingPongIndex = Config.modulators.dictionary[\"echo ping pong\"].index;\n                let pitchShiftIndex = Config.modulators.dictionary[\"pitch shift\"].index;\n                let ringModIndex = Config.modulators.dictionary[\"ring modulation\"].index;\n                let ringModHertzIndex = Config.modulators.dictionary[\"ring mod hertz\"].index;\n                let granularIndex = Config.modulators.dictionary[\"granular\"].index;\n                let grainAmountIndex = Config.modulators.dictionary[\"grain freq\"].index;\n                let grainSizeIndex = Config.modulators.dictionary[\"grain size\"].index;\n                let grainRangeIndex = Config.modulators.dictionary[\"grain range\"].index;\n                let envSpeedIndex = Config.modulators.dictionary[\"envelope speed\"].index;\n                let perEnvSpeedIndex = Config.modulators.dictionary[\"individual envelope speed\"].index;\n                let perEnvLowerIndex = Config.modulators.dictionary[\"individual envelope lower bound\"].index;\n                let perEnvUpperIndex = Config.modulators.dictionary[\"individual envelope upper bound\"].index;\n                let instrumentIndex = instrument.modInstruments[modCount][0];\n                let effectIndex = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effectCount; //in a moment i should be working to make this work with mods\n\n                switch (currentIndex) {\n                    case chorusIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex]!.chorus - Config.modulators[chorusIndex].convertRealFactor;\n                        break;\n                    case reverbIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex]!.reverb - Config.modulators[reverbIndex].convertRealFactor;\n                        break;\n                    case gainIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex]!.gain - Config.modulators[gainIndex].convertRealFactor;\n                        break;\n                    case panningIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex]!.pan - Config.modulators[panningIndex].convertRealFactor;\n                        break;\n                    case panDelayIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex]!.panDelay - Config.modulators[panDelayIndex].convertRealFactor;\n                        break;\n                    case distortionIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex]!.distortion - Config.modulators[distortionIndex].convertRealFactor;\n                        break;\n                    case detuneIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].detune;\n                        break;\n                    case vibratoDepthIndex:\n                        vol = Math.round(this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].vibratoDepth * 25 - Config.modulators[vibratoDepthIndex].convertRealFactor);\n                        break;\n                    case vibratoSpeedIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].vibratoSpeed - Config.modulators[vibratoSpeedIndex].convertRealFactor;\n                        break;\n                    case vibratoDelayIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].vibratoDelay - Config.modulators[vibratoDelayIndex].convertRealFactor;\n                        break;\n                    case arpSpeedIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].arpeggioSpeed - Config.modulators[arpSpeedIndex].convertRealFactor;\n                        break;\n                    case bitCrushIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex]!.bitcrusherQuantization - Config.modulators[bitCrushIndex].convertRealFactor;\n                        break;\n                    case freqCrushIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex]!.bitcrusherFreq - Config.modulators[freqCrushIndex].convertRealFactor;\n                        break;\n                    case echoIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex]!.echoSustain - Config.modulators[echoIndex].convertRealFactor;\n                        break;\n                    case echoDelayIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex]!.echoDelay - Config.modulators[echoDelayIndex].convertRealFactor;\n                        break;\n                    case echoPingPongIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex]!.echoPingPong - Config.modulators[echoPingPongIndex].convertRealFactor;\n                        break;\n                    case pitchShiftIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].pitchShift;\n                        break;\n                    case ringModIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex]!.ringModulation - Config.modulators[ringModIndex].convertRealFactor;\n                        break;\n                    case ringModHertzIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex]!.ringModulationHz - Config.modulators[ringModHertzIndex].convertRealFactor;\n                        break;\n                    case granularIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex]!.granular - Config.modulators[granularIndex].convertRealFactor;\n                        break;\n                    case grainAmountIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex]!.grainAmounts - Config.modulators[grainAmountIndex].convertRealFactor;\n                        break;\n                    case grainSizeIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex]!.grainSize - Config.modulators[grainSizeIndex].convertRealFactor;\n                        break;\n                    case grainRangeIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].effects[effectIndex]!.grainRange - Config.modulators[grainRangeIndex].convertRealFactor;\n                        break;\n                    case envSpeedIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].envelopeSpeed - Config.modulators[envSpeedIndex].convertRealFactor;\n                        break;\n                    case perEnvSpeedIndex:\n                        vol = Config.perEnvelopeSpeedToIndices[this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].envelopes[instrument.modEnvelopeNumbers[modCount]].perEnvelopeSpeed] - Config.modulators[perEnvSpeedIndex].convertRealFactor;\n                        break;\n                    case perEnvLowerIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].envelopes[instrument.modEnvelopeNumbers[modCount]].perEnvelopeLowerBound - Config.modulators[perEnvLowerIndex].convertRealFactor;\n                        break;\n                    case perEnvUpperIndex:\n                        vol = this.channels[instrument.modChannels[modCount][0]].instruments[instrumentIndex].envelopes[instrument.modEnvelopeNumbers[modCount]].perEnvelopeUpperBound - Config.modulators[perEnvUpperIndex].convertRealFactor;\n                        break;\n                }\n            }\n\n            if (vol != undefined)\n                return vol;\n            else\n                return Config.noteSizeMax;\n        }\n    }\n\n\n    getVolumeCap = (isMod: boolean, modChannel?: number, modInstrument?: number, modCount?: number): number => {\n        if (!isMod || modChannel == undefined || modInstrument == undefined || modCount == undefined)\n            return Config.noteSizeMax;\n        else {\n            // Sigh, the way pitches count up and the visual ordering in the UI are flipped.\n            modCount = Config.modCount - modCount - 1;\n\n            let instrument = this.channels[modChannel].instruments[modInstrument];\n            let modulator = Config.modulators[instrument.modulators[modCount]];\n            let cap: number | undefined = modulator.maxRawVol;\n\n            if (cap != undefined) {\n                // For filters, cap is dependent on which filter setting is targeted\n                if (modulator.name == \"post eq\" || modulator.name == \"pre eq\" || modulator.name == \"song eq\") {\n                    // type 0: number of filter morphs\n                    // type 1/odd: number of filter x positions\n                    // type 2/even: number of filter y positions\n                    cap = Config.filterMorphCount - 1;\n                    if (instrument.modFilterTypes[modCount] > 0 && instrument.modFilterTypes[modCount] % 2) {\n                        cap = Config.filterFreqRange;\n                    } else if (instrument.modFilterTypes[modCount] > 0) {\n                        cap = Config.filterGainRange;\n                    }\n                }\n                return cap;\n            }\n            else\n                return Config.noteSizeMax;\n        }\n    }\n\n    getVolumeCapForSetting = (isMod: boolean, modSetting: number, filterType?: number): number => {\n        if (!isMod)\n            return Config.noteSizeMax;\n        else {\n            let cap: number | undefined = Config.modulators[modSetting].maxRawVol;\n            if (cap != undefined) {\n\n                // For filters, cap is dependent on which filter setting is targeted\n                if (filterType != undefined && (Config.modulators[modSetting].name == \"post eq\" || Config.modulators[modSetting].name == \"pre eq\" || Config.modulators[modSetting].name == \"song eq\")) {\n                    // type 0: number of filter morphs\n                    // type 1/odd: number of filter x positions\n                    // type 2/even: number of filter y positions\n                    cap = Config.filterMorphCount - 1;\n                    if (filterType > 0 && filterType % 2) {\n                        cap = Config.filterFreqRange;\n                    } else if (filterType > 0) {\n                        cap = Config.filterGainRange;\n                    }\n                }\n\n                return cap;\n            } else\n                return Config.noteSizeMax;\n        }\n    }\n\n    getChannelCount(): number {\n        return this.pitchChannelCount + this.noiseChannelCount + this.modChannelCount;\n    }\n\n    getMaxInstrumentsPerChannel(): number {\n        return Math.max(\n            this.layeredInstruments ? Config.layeredInstrumentCountMax : Config.instrumentCountMin,\n            this.patternInstruments ? Config.patternInstrumentCountMax : Config.instrumentCountMin);\n    }\n\n    getMaxInstrumentsPerPattern(channelIndex: number): number {\n        return this.getMaxInstrumentsPerPatternForChannel(this.channels[channelIndex]);\n    }\n\n    getMaxInstrumentsPerPatternForChannel(channel: Channel): number {\n        return this.layeredInstruments\n            ? Math.min(Config.layeredInstrumentCountMax, channel.instruments.length)\n            : 1;\n    }\n\n    getChannelIsNoise(channelIndex: number): boolean {\n        return (channelIndex >= this.pitchChannelCount && channelIndex < this.pitchChannelCount + this.noiseChannelCount);\n    }\n\n    getChannelIsMod(channelIndex: number): boolean {\n        return (channelIndex >= this.pitchChannelCount + this.noiseChannelCount);\n    }\n\n    static secondsToFadeInSetting(seconds: number): number {\n        return clamp(0, Config.fadeInRange, Math.round((-0.95 + Math.sqrt(0.9025 + 0.2 * seconds / 0.0125)) / 0.1));\n    }\n\n    static ticksToFadeOutSetting(ticks: number): number {\n        let lower = Config.fadeOutTicks[0];\n        if (ticks <= lower) return 0;\n        for (let i = 1; i < Config.fadeOutTicks.length; i++) {\n            let upper = Config.fadeOutTicks[i];\n            if (ticks <= upper) return (ticks < (lower + upper) / 2) ? i - 1 : i;\n            lower = upper;\n        }\n        return Config.fadeOutTicks.length - 1;\n    }\n\n    initToDefault(andResetChannels = true): void {\n        this.scale = 1;\n        this.scaleCustom = [true, false, true, true, false, false, false, true, true, false, true, true];\n        //this.scaleCustom = [true, false, false, false, false, false, false, false, false, false, false, false];\n        this.key = 0;\n        this.octave = 0;\n        this.loopStart = 0;\n        this.loopLength = 4;\n        this.tempo = 151;\n        this.reverb = 0;\n        this.beatsPerBar = 8;\n        this.barCount = 16;\n        this.patternsPerChannel = 8;\n        this.rhythm = 1;\n        this.layeredInstruments = false;\n        this.patternInstruments = false;\n        this.eqFilter.reset();\n        for (let i = 0; i < Config.filterMorphCount - 1; i++) {\n            this.eqSubFilters[i] = null;\n        }\n\n        //This is the tab's display name\n        this.title = \"Untitled\";\n        document.title = this.title + \" - \" + EditorConfig.versionDisplayName;\n\n        if (andResetChannels) {\n            this.pitchChannelCount = 3;\n            this.noiseChannelCount = 1;\n            this.modChannelCount = 1;\n            for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                const isNoiseChannel = channelIndex >= this.pitchChannelCount && channelIndex < this.pitchChannelCount + this.noiseChannelCount;\n                const isModChannel = channelIndex >= this.pitchChannelCount + this.noiseChannelCount;\n                if (this.channels.length <= channelIndex) {\n                    this.channels[channelIndex] = new Channel();\n                    this.channels[channelIndex].color = channelIndex;\n                }\n                const channel = this.channels[channelIndex];\n                channel.octave = Math.max(4 - channelIndex, 0); // [4, 3, 2, 1, 0]; Descending octaves with drums at zero in last channel.\n\n                for (let pattern = 0; pattern < this.patternsPerChannel; pattern++) {\n                    if (channel.patterns.length <= pattern) {\n                        channel.patterns[pattern] = new Pattern();\n                    } else {\n                        channel.patterns[pattern].reset();\n                    }\n                }\n                channel.patterns.length = this.patternsPerChannel;\n\n                for (let instrument = 0; instrument < Config.instrumentCountMin; instrument++) {\n                    if (channel.instruments.length <= instrument) {\n                        channel.instruments[instrument] = new Instrument(isNoiseChannel, isModChannel);\n                    }\n                    channel.instruments[instrument].setTypeAndReset(isModChannel ? InstrumentType.mod : (isNoiseChannel ? InstrumentType.noise : InstrumentType.chip), isNoiseChannel, isModChannel);\n                }\n                channel.instruments.length = Config.instrumentCountMin;\n\n                for (let bar = 0; bar < this.barCount; bar++) {\n                    channel.bars[bar] = 0;\n                }\n                channel.bars.length = this.barCount;\n            }\n            this.channels.length = this.getChannelCount();\n        }\n    }\n\n    //This determines the url\n    toBase64String(): string {\n        let bits: BitFieldWriter;\n        let buffer: number[] = [];\n\n        buffer.push(Song._variant);\n        buffer.push(base64IntToCharCode[Song._latestSlarmoosBoxVersion]);\n\n        // Length of the song name string\n        buffer.push(SongTagCode.songTitle);\n        var encodedSongTitle = encodeURIComponent(this.title);\n        buffer.push(base64IntToCharCode[encodedSongTitle.length >> 6], base64IntToCharCode[encodedSongTitle.length & 0x3f]);\n\n        // Actual encoded string follows\n        for (let i = 0; i < encodedSongTitle.length; i++) {\n            buffer.push(encodedSongTitle.charCodeAt(i));\n        }\n\n        buffer.push(SongTagCode.channelCount, base64IntToCharCode[this.pitchChannelCount], base64IntToCharCode[this.noiseChannelCount], base64IntToCharCode[this.modChannelCount]);\n        buffer.push(SongTagCode.scale, base64IntToCharCode[this.scale]);\n        if (this.scale == Config.scales[\"dictionary\"][\"Custom\"].index) {\n            for (var i = 1; i < Config.pitchesPerOctave; i++) {\n                buffer.push(base64IntToCharCode[this.scaleCustom[i] ? 1 : 0]) // ineffiecent? yes, all we're going to do for now? hell yes\n            }\n        }\n        buffer.push(SongTagCode.key, base64IntToCharCode[this.key], base64IntToCharCode[this.octave - Config.octaveMin]);\n        buffer.push(SongTagCode.loopStart, base64IntToCharCode[this.loopStart >> 6], base64IntToCharCode[this.loopStart & 0x3f]);\n        buffer.push(SongTagCode.loopEnd, base64IntToCharCode[(this.loopLength - 1) >> 6], base64IntToCharCode[(this.loopLength - 1) & 0x3f]);\n        buffer.push(SongTagCode.tempo, base64IntToCharCode[this.tempo >> 6], base64IntToCharCode[this.tempo & 0x3F]);\n        buffer.push(SongTagCode.beatCount, base64IntToCharCode[this.beatsPerBar - 1]);\n        buffer.push(SongTagCode.barCount, base64IntToCharCode[(this.barCount - 1) >> 6], base64IntToCharCode[(this.barCount - 1) & 0x3f]);\n        buffer.push(SongTagCode.patternCount, base64IntToCharCode[(this.patternsPerChannel - 1) >> 6], base64IntToCharCode[(this.patternsPerChannel - 1) & 0x3f]);\n        buffer.push(SongTagCode.rhythm, base64IntToCharCode[this.rhythm]);\n\n        // Push limiter settings, but only if they aren't the default!\n        buffer.push(SongTagCode.limiterSettings);\n        if (this.compressionRatio != 1.0 || this.limitRatio != 1.0 || this.limitRise != 4000.0 || this.limitDecay != 4.0 || this.limitThreshold != 1.0 || this.compressionThreshold != 1.0 || this.masterGain != 1.0) {\n            buffer.push(base64IntToCharCode[Math.round(this.compressionRatio < 1 ? this.compressionRatio * 10 : 10 + (this.compressionRatio - 1) * 60)]); // 0 ~ 1.15 uneven, mapped to 0 ~ 20\n            buffer.push(base64IntToCharCode[Math.round(this.limitRatio < 1 ? this.limitRatio * 10 : 9 + this.limitRatio)]); // 0 ~ 10 uneven, mapped to 0 ~ 20\n            buffer.push(base64IntToCharCode[this.limitDecay]); // directly 1 ~ 30\n            buffer.push(base64IntToCharCode[Math.round((this.limitRise - 2000.0) / 250.0)]); // 2000 ~ 10000 by 250, mapped to 0 ~ 32\n            buffer.push(base64IntToCharCode[Math.round(this.compressionThreshold * 20)]); // 0 ~ 1.1 by 0.05, mapped to 0 ~ 22\n            buffer.push(base64IntToCharCode[Math.round(this.limitThreshold * 20)]); // 0 ~ 2 by 0.05, mapped to 0 ~ 40\n            buffer.push(base64IntToCharCode[Math.round(this.masterGain * 50) >> 6], base64IntToCharCode[Math.round(this.masterGain * 50) & 0x3f]); // 0 ~ 5 by 0.02, mapped to 0 ~ 250\n        }\n        else {\n            buffer.push(base64IntToCharCode[0x3f]); // Not using limiter\n        }\n\n        //songeq\n        buffer.push(SongTagCode.songEq);\n        if (this.eqFilter == null) {\n            // Push null filter settings\n            buffer.push(base64IntToCharCode[0]);\n            console.log(\"Null post eq settings detected in toBase64String for song\");\n        } else {\n            buffer.push(base64IntToCharCode[this.eqFilter.controlPointCount]);\n            for (let j = 0; j < this.eqFilter.controlPointCount; j++) {\n                const point = this.eqFilter.controlPoints[j];\n                buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\n            }\n        }\n\n        // Push subfilters as well. Skip Index 0, is a copy of the base filter.\n        let usingSubFilterBitfield = 0;\n        for (let j = 0; j < Config.filterMorphCount - 1; j++) {\n            usingSubFilterBitfield |= (+(this.eqSubFilters[j + 1] != null) << j);\n        }\n        // Put subfilter usage into 2 chars (12 bits)\n        buffer.push(base64IntToCharCode[usingSubFilterBitfield >> 6], base64IntToCharCode[usingSubFilterBitfield & 63]);\n        // Put subfilter info in for all used subfilters\n        for (let j = 0; j < Config.filterMorphCount - 1; j++) {\n            if (usingSubFilterBitfield & (1 << j)) {\n                buffer.push(base64IntToCharCode[this.eqSubFilters[j + 1]!.controlPointCount]);\n                for (let k = 0; k < this.eqSubFilters[j + 1]!.controlPointCount; k++) {\n                    const point = this.eqSubFilters[j + 1]!.controlPoints[k];\n                    buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\n                }\n            }\n        }\n\n        buffer.push(SongTagCode.channelNames);\n        for (let channel = 0; channel < this.getChannelCount(); channel++) {\n            // Length of the channel name string\n            var encodedChannelName = encodeURIComponent(this.channels[channel].name);\n            buffer.push(base64IntToCharCode[encodedChannelName.length >> 6], base64IntToCharCode[encodedChannelName.length & 0x3f]);\n\n            // Actual encoded string follows\n            for (let i = 0; i < encodedChannelName.length; i++) {\n                buffer.push(encodedChannelName.charCodeAt(i));\n            }\n            buffer.push(base64IntToCharCode[this.channels[channel].color % 60]);\n        }\n\n        buffer.push(SongTagCode.instrumentCount, base64IntToCharCode[(<any>this.layeredInstruments << 1) | <any>this.patternInstruments]);\n        if (this.layeredInstruments || this.patternInstruments) {\n            for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                buffer.push(base64IntToCharCode[this.channels[channelIndex].instruments.length - Config.instrumentCountMin]);\n            }\n        }\n\n        buffer.push(SongTagCode.channelOctave);\n        for (let channelIndex = 0; channelIndex < this.pitchChannelCount; channelIndex++) {\n            buffer.push(base64IntToCharCode[this.channels[channelIndex].octave]);\n        }\n\n        //This is for specific instrument stuff to url\n        for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n            for (let i = 0; i < this.channels[channelIndex].instruments.length; i++) {\n                const instrument = this.channels[channelIndex].instruments[i];\n                buffer.push(SongTagCode.startInstrument, base64IntToCharCode[instrument.type]);\n                buffer.push(SongTagCode.volume, base64IntToCharCode[(instrument.volume + Config.volumeRange / 2) >> 6], base64IntToCharCode[(instrument.volume + Config.volumeRange / 2) & 0x3f]);\n                buffer.push(SongTagCode.preset, base64IntToCharCode[instrument.preset >> 6], base64IntToCharCode[instrument.preset & 63]);\n\n                buffer.push(SongTagCode.noteFilter);\n                buffer.push(base64IntToCharCode[+instrument.noteFilterType]);\n                if (instrument.noteFilterType) {\n                    buffer.push(base64IntToCharCode[instrument.noteFilterSimpleCut]);\n                    buffer.push(base64IntToCharCode[instrument.noteFilterSimplePeak]);\n                }\n                else {\n                    if (instrument.noteFilter == null) {\n                        // Push null filter settings\n                        buffer.push(base64IntToCharCode[0]);\n                        console.log(\"Null pre eq settings detected in toBase64String for channelIndex \" + channelIndex + \", instrumentIndex \" + i);\n                    } else {\n                        buffer.push(base64IntToCharCode[instrument.noteFilter.controlPointCount]);\n                        for (let j = 0; j < instrument.noteFilter.controlPointCount; j++) {\n                            const point = instrument.noteFilter.controlPoints[j];\n                            buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\n                        }\n                    }\n\n                    // Push subfilters as well. Skip Index 0, is a copy of the base filter.\n                    let usingSubFilterBitfield = 0;\n                    for (let j = 0; j < Config.filterMorphCount - 1; j++) {\n                        usingSubFilterBitfield |= (+(instrument.noteSubFilters[j + 1] != null) << j);\n                    }\n                    // Put subfilter usage into 2 chars (12 bits)\n                    buffer.push(base64IntToCharCode[usingSubFilterBitfield >> 6], base64IntToCharCode[usingSubFilterBitfield & 63]);\n                    // Put subfilter info in for all used subfilters\n                    for (let j = 0; j < Config.filterMorphCount - 1; j++) {\n                        if (usingSubFilterBitfield & (1 << j)) {\n                            buffer.push(base64IntToCharCode[instrument.noteSubFilters[j + 1]!.controlPointCount]);\n                            for (let k = 0; k < instrument.noteSubFilters[j + 1]!.controlPointCount; k++) {\n                                const point = instrument.noteSubFilters[j + 1]!.controlPoints[k];\n                                buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\n                            }\n                        }\n                    }\n                }\n\n                //in Theepbox, effects are stored in arbitary order. this allows it to have multiple of the same effect!\n\n                buffer.push(SongTagCode.effects, base64IntToCharCode[instrument.effectCount]);\n                for (let effectIndex = 0; effectIndex < instrument.effectCount; effectIndex++) {\n                    if (instrument.effects[effectIndex] != null) buffer.push(base64IntToCharCode[instrument.effects[effectIndex]!.type & 63]);\n                    else {\n                        buffer.push(base64IntToCharCode[0]);\n                        continue;\n                    }\n\n                    let effect = instrument.effects[effectIndex] as Effect;\n\n                    if (effect.type == EffectType.eqFilter) {\n                        buffer.push(base64IntToCharCode[+effect.eqFilterType]);\n                        if (effect.eqFilterType) {\n                            buffer.push(base64IntToCharCode[effect.eqFilterSimpleCut]);\n                            buffer.push(base64IntToCharCode[effect.eqFilterSimplePeak]);\n                        }\n                        else {\n                            if (effect.eqFilter == null) {\n                                // Push null filter settings\n                                buffer.push(base64IntToCharCode[0]);\n                                console.log(\"Null post eq settings detected in toBase64String for channelIndex \" + channelIndex + \", instrumentIndex \" + i);\n                            }\n                            else {\n                                buffer.push(base64IntToCharCode[effect.eqFilter.controlPointCount]);\n                                for (let j = 0; j < effect.eqFilter.controlPointCount; j++) {\n                                    const point = effect.eqFilter.controlPoints[j];\n                                    buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\n                                }\n                            }\n\n                            // Push subfilters as well. Skip Index 0, is a copy of the base filter.\n                            let usingSubFilterBitfield = 0;\n                            for (let j = 0; j < Config.filterMorphCount - 1; j++) {\n                                usingSubFilterBitfield |= (+(effect.eqSubFilters[j + 1] != null) << j);\n                            }\n                            // Put subfilter usage into 2 chars (12 bits)\n                            buffer.push(base64IntToCharCode[usingSubFilterBitfield >> 6], base64IntToCharCode[usingSubFilterBitfield & 63]);\n                            // Put subfilter info in for all used subfilters\n                            for (let j = 0; j < Config.filterMorphCount - 1; j++) {\n                                if (usingSubFilterBitfield & (1 << j)) {\n                                    buffer.push(base64IntToCharCode[effect.eqSubFilters[j + 1]!.controlPointCount]);\n                                    for (let k = 0; k < effect.eqSubFilters[j + 1]!.controlPointCount; k++) {\n                                        const point = effect.eqSubFilters[j + 1]!.controlPoints[k];\n                                        buffer.push(base64IntToCharCode[point.type], base64IntToCharCode[Math.round(point.freq)], base64IntToCharCode[Math.round(point.gain)]);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    else if (effect.type == EffectType.distortion) {\n                        buffer.push(base64IntToCharCode[effect.distortion]);\n                        // Aliasing is tied into distortion for now\n                        buffer.push(base64IntToCharCode[+instrument.aliases]);\n                    }\n                    else if (effect.type == EffectType.bitcrusher) {\n                        buffer.push(base64IntToCharCode[effect.bitcrusherFreq], base64IntToCharCode[effect.bitcrusherQuantization]);\n                    }\n                    else if (effect.type == EffectType.gain) {\n                        buffer.push(base64IntToCharCode[effect.gain >> 6], base64IntToCharCode[effect.gain & 0x3f]);\n                    }\n                    else if (effect.type == EffectType.panning) {\n                        buffer.push(base64IntToCharCode[effect.pan >> 6], base64IntToCharCode[effect.pan & 0x3f]);\n                        buffer.push(base64IntToCharCode[effect.panDelay]);\n                        buffer.push(base64IntToCharCode[effect.panMode]);\n                    }\n                    else if (effect.type == EffectType.flanger) {\n                        buffer.push(base64IntToCharCode[effect.flanger]);\n                        buffer.push(base64IntToCharCode[effect.flangerSpeed]);\n                        buffer.push(base64IntToCharCode[effect.flangerDepth]);\n                        buffer.push(base64IntToCharCode[effect.flangerFeedback]);\n                    }\n                    else if (effect.type == EffectType.chorus) {\n                        buffer.push(base64IntToCharCode[effect.chorus]);\n                    }\n                    else if (effect.type == EffectType.echo) { // echo ping pong probably didnt need to have such a massive range. oh well!\n                        buffer.push(base64IntToCharCode[effect.echoSustain], base64IntToCharCode[effect.echoDelay], base64IntToCharCode[effect.echoPingPong >> 6], base64IntToCharCode[effect.echoPingPong & 0x3f]);\n                    }\n                    else if (effect.type == EffectType.reverb) {\n                        buffer.push(base64IntToCharCode[effect.reverb]);\n                    }\n                    else if (effect.type == EffectType.granular) {\n                        buffer.push(base64IntToCharCode[effect.granular]);\n                        buffer.push(base64IntToCharCode[effect.grainSize]);\n                        buffer.push(base64IntToCharCode[effect.grainAmounts]);\n                        buffer.push(base64IntToCharCode[effect.grainRange]);\n                    }\n                    else if (effect.type == EffectType.ringModulation) {\n                        buffer.push(base64IntToCharCode[effect.ringModulation]);\n                        buffer.push(base64IntToCharCode[effect.ringModulationHz]);\n                        buffer.push(base64IntToCharCode[effect.ringModWaveformIndex]);\n                        buffer.push(base64IntToCharCode[effect.ringModPulseWidth]);\n                        buffer.push(base64IntToCharCode[(effect.ringModHzOffset - Config.rmHzOffsetMin) >> 6], base64IntToCharCode[(effect.ringModHzOffset - Config.rmHzOffsetMin) & 0x3F]);\n                    }\n                }\n                // this is a six bit bitfield\n                buffer.push(base64IntToCharCode[instrument.mdeffects & 63]);\n                if (effectsIncludeTransition(instrument.mdeffects)) {\n                    buffer.push(base64IntToCharCode[instrument.transition]);\n                }\n                if (effectsIncludeChord(instrument.mdeffects)) {\n                    buffer.push(base64IntToCharCode[instrument.chord]);\n                    // Custom arpeggio speed... only if the instrument arpeggiates.\n                    if (instrument.chord == Config.chords.dictionary[\"arpeggio\"].index) {\n                        buffer.push(base64IntToCharCode[instrument.arpeggioSpeed]);\n                        buffer.push(base64IntToCharCode[+instrument.fastTwoNoteArp]); // Two note arp setting piggybacks on this\n                    }\n                    if (instrument.chord == Config.chords.dictionary[\"monophonic\"].index) {\n                        buffer.push(base64IntToCharCode[instrument.monoChordTone]); //which note is selected\n                    }\n                }\n                if (effectsIncludePitchShift(instrument.mdeffects)) {\n                    buffer.push(base64IntToCharCode[instrument.pitchShift]);\n                }\n                if (effectsIncludeDetune(instrument.mdeffects)) {\n                    buffer.push(base64IntToCharCode[(instrument.detune - Config.detuneMin) >> 6], base64IntToCharCode[(instrument.detune - Config.detuneMin) & 0x3F]);\n                }\n                if (effectsIncludeVibrato(instrument.mdeffects)) {\n                    buffer.push(base64IntToCharCode[instrument.vibrato]);\n                    // Custom vibrato settings\n                    if (instrument.vibrato == Config.vibratos.length) {\n                        buffer.push(base64IntToCharCode[Math.round(instrument.vibratoDepth * 25)]);\n                        buffer.push(base64IntToCharCode[instrument.vibratoSpeed]);\n                        buffer.push(base64IntToCharCode[Math.round(instrument.vibratoDelay)]);\n                        buffer.push(base64IntToCharCode[instrument.vibratoType]);\n                    }\n                }\n                // if (effectsIncludeNoteRange(instrument.effects)) {\n                //     buffer.push(base64IntToCharCode[instrument.noteRange]);\n                // }\n\n                if (instrument.type != InstrumentType.drumset) {\n                    buffer.push(SongTagCode.fadeInOut, base64IntToCharCode[instrument.fadeIn], base64IntToCharCode[instrument.fadeOut]);\n                    // Transition info follows transition song tag\n                    buffer.push(base64IntToCharCode[+instrument.clicklessTransition]);\n                }\n\n                if (instrument.type == InstrumentType.harmonics || instrument.type == InstrumentType.pickedString) {\n                    buffer.push(SongTagCode.harmonics);\n                    const harmonicsBits = new BitFieldWriter();\n                    for (let i = 0; i < Config.harmonicsControlPoints; i++) {\n                        harmonicsBits.write(Config.harmonicsControlPointBits, instrument.harmonicsWave.harmonics[i]);\n                    }\n                    harmonicsBits.encodeBase64(buffer);\n                }\n\n                if (instrument.type == InstrumentType.chip) {\n                    if (instrument.chipWave > 186) {\n                        buffer.push(119, base64IntToCharCode[instrument.chipWave - 186]);\n                        buffer.push(base64IntToCharCode[3]);\n                    }\n                    else if (instrument.chipWave > 124) {\n                        buffer.push(119, base64IntToCharCode[instrument.chipWave - 124]);\n                        buffer.push(base64IntToCharCode[2]);\n                    }\n                    else if (instrument.chipWave > 62) {\n                        buffer.push(119, base64IntToCharCode[instrument.chipWave - 62]);\n                        buffer.push(base64IntToCharCode[1]);\n                    }\n                    else {\n                        buffer.push(119, base64IntToCharCode[instrument.chipWave]);\n                        buffer.push(base64IntToCharCode[0]);\n                    }\n                    buffer.push(104, base64IntToCharCode[instrument.unison]);\n                    if (instrument.unison == Config.unisons.length) encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\n\n                    // Repurposed for chip wave loop controls.\n                    buffer.push(SongTagCode.loopControls);\n                    // The encoding here is as follows:\n                    // 0b11111_1\n                    //         ^-- isUsingAdvancedLoopControls\n                    //   ^^^^^---- chipWaveLoopMode\n                    // This essentially allocates 32 different loop modes,\n                    // which should be plenty.\n                    const encodedLoopMode = (\n                        (clamp(0, 31 + 1, instrument.chipWaveLoopMode) << 1)\n                        | (instrument.isUsingAdvancedLoopControls ? 1 : 0)\n                    );\n                    buffer.push(base64IntToCharCode[encodedLoopMode]);\n                    // The same encoding above is used here, but with the release mode\n                    // (which isn't implemented currently), and the backwards toggle.\n                    // changed in Theepbox! now i added stereo toggle :3\n                    const encodedReleaseMode = (\n                        (clamp(0, 31 + 1, 0) << 2)\n                        | ((instrument.chipWaveInStereo ? 1 : 0) << 1)\n                        | (instrument.chipWavePlayBackwards ? 1 : 0)\n                    );\n                    buffer.push(base64IntToCharCode[encodedReleaseMode]);\n                    encode32BitNumber(buffer, instrument.chipWaveLoopStart);\n                    encode32BitNumber(buffer, instrument.chipWaveLoopEnd);\n                    encode32BitNumber(buffer, instrument.chipWaveStartOffset);\n\n                } else if (instrument.type == InstrumentType.fm || instrument.type == InstrumentType.fm6op) {\n                    if (instrument.type == InstrumentType.fm) {\n                        buffer.push(SongTagCode.algorithm, base64IntToCharCode[instrument.algorithm]);\n                        buffer.push(SongTagCode.feedbackType, base64IntToCharCode[instrument.feedbackType]);\n                    } else {\n                        buffer.push(SongTagCode.algorithm, base64IntToCharCode[instrument.algorithm6Op]);\n                        if (instrument.algorithm6Op == 0) {\n                            buffer.push(SongTagCode.chord, base64IntToCharCode[instrument.customAlgorithm.carrierCount]);\n                            buffer.push(SongTagCode.effects);\n                            for (let o = 0; o < instrument.customAlgorithm.modulatedBy.length; o++) {\n                                for (let j = 0; j < instrument.customAlgorithm.modulatedBy[o].length; j++) {\n                                    buffer.push(base64IntToCharCode[instrument.customAlgorithm.modulatedBy[o][j]]);\n                                }\n                                buffer.push(SongTagCode.operatorWaves);\n                            }\n                            buffer.push(SongTagCode.effects);\n                        }\n                        buffer.push(SongTagCode.feedbackType, base64IntToCharCode[instrument.feedbackType6Op]);\n                        if (instrument.feedbackType6Op == 0) {\n                            buffer.push(SongTagCode.effects);\n                            for (let o = 0; o < instrument.customFeedbackType.indices.length; o++) {\n                                for (let j = 0; j < instrument.customFeedbackType.indices[o].length; j++) {\n                                    buffer.push(base64IntToCharCode[instrument.customFeedbackType.indices[o][j]]);\n                                }\n                                buffer.push(SongTagCode.operatorWaves);\n                            }\n                            buffer.push(SongTagCode.effects);\n                        }\n                    }\n                    buffer.push(SongTagCode.feedbackAmplitude, base64IntToCharCode[instrument.feedbackAmplitude]);\n\n                    buffer.push(SongTagCode.operatorFrequencies);\n                    for (let o = 0; o < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); o++) {\n                        buffer.push(base64IntToCharCode[instrument.operators[o].frequency]);\n                    }\n                    buffer.push(SongTagCode.operatorAmplitudes);\n                    for (let o = 0; o < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); o++) {\n                        buffer.push(base64IntToCharCode[instrument.operators[o].amplitude]);\n                    }\n                    buffer.push(SongTagCode.operatorWaves);\n                    for (let o = 0; o < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); o++) {\n                        buffer.push(base64IntToCharCode[instrument.operators[o].waveform]);\n                        // Push pulse width if that type is used\n                        if (instrument.operators[o].waveform == 2) {\n                            buffer.push(base64IntToCharCode[instrument.operators[o].pulseWidth]);\n                        }\n                    }\n                } else if (instrument.type == InstrumentType.customChipWave) {\n                    if (instrument.chipWave > 186) {\n                        buffer.push(119, base64IntToCharCode[instrument.chipWave - 186]);\n                        buffer.push(base64IntToCharCode[3]);\n                    }\n                    else if (instrument.chipWave > 124) {\n                        buffer.push(119, base64IntToCharCode[instrument.chipWave - 124]);\n                        buffer.push(base64IntToCharCode[2]);\n                    }\n                    else if (instrument.chipWave > 62) {\n                        buffer.push(119, base64IntToCharCode[instrument.chipWave - 62]);\n                        buffer.push(base64IntToCharCode[1]);\n                    }\n                    else {\n                        buffer.push(119, base64IntToCharCode[instrument.chipWave]);\n                        buffer.push(base64IntToCharCode[0]);\n                    }\n                    buffer.push(104, base64IntToCharCode[instrument.unison]);\n                    if (instrument.unison == Config.unisons.length) encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\n                    buffer.push(SongTagCode.customChipWave);\n                    // Push custom wave values\n                    for (let j = 0; j < 64; j++) {\n                        buffer.push(base64IntToCharCode[(instrument.customChipWave[j] + 24) as number]);\n                    }\n                } else if (instrument.type == InstrumentType.noise) {\n                    buffer.push(SongTagCode.wave, base64IntToCharCode[instrument.chipNoise]);\n                    buffer.push(SongTagCode.unison, base64IntToCharCode[instrument.unison]);\n                    if (instrument.unison == Config.unisons.length) encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\n                } else if (instrument.type == InstrumentType.spectrum) {\n                    buffer.push(SongTagCode.spectrum);\n                    const spectrumBits = new BitFieldWriter();\n                    for (let i = 0; i < Config.spectrumControlPoints; i++) {\n                        spectrumBits.write(Config.spectrumControlPointBits, instrument.spectrumWave.spectrum[i]);\n                    }\n                    spectrumBits.encodeBase64(buffer);\n                    buffer.push(SongTagCode.unison, base64IntToCharCode[instrument.unison]);\n                    if (instrument.unison == Config.unisons.length) encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\n                } else if (instrument.type == InstrumentType.drumset) {\n                    buffer.push(SongTagCode.drumsetEnvelopes);\n                    for (let j = 0; j < Config.drumCount; j++) {\n                        buffer.push(base64IntToCharCode[instrument.drumsetEnvelopes[j]]);\n                    }\n\n                    buffer.push(SongTagCode.spectrum);\n                    const spectrumBits = new BitFieldWriter();\n                    for (let j = 0; j < Config.drumCount; j++) {\n                        for (let i = 0; i < Config.spectrumControlPoints; i++) {\n                            spectrumBits.write(Config.spectrumControlPointBits, instrument.drumsetSpectrumWaves[j].spectrum[i]);\n                        }\n                    }\n                    spectrumBits.encodeBase64(buffer);\n                    buffer.push(SongTagCode.unison, base64IntToCharCode[instrument.unison]);\n                    if (instrument.unison == Config.unisons.length) encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\n                } else if (instrument.type == InstrumentType.harmonics) {\n                    buffer.push(SongTagCode.unison, base64IntToCharCode[instrument.unison]);\n                    if (instrument.unison == Config.unisons.length) encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\n                } else if (instrument.type == InstrumentType.pwm) {\n                    buffer.push(SongTagCode.pulseWidth, base64IntToCharCode[instrument.pulseWidth]);\n                    buffer.push(base64IntToCharCode[instrument.decimalOffset >> 6], base64IntToCharCode[instrument.decimalOffset & 0x3f]);\n                    buffer.push(SongTagCode.unison, base64IntToCharCode[instrument.unison]);\n                    if (instrument.unison == Config.unisons.length) encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\n                } else if (instrument.type == InstrumentType.supersaw) {\n                    buffer.push(SongTagCode.supersaw, base64IntToCharCode[instrument.supersawDynamism], base64IntToCharCode[instrument.supersawSpread], base64IntToCharCode[instrument.supersawShape]);\n                    buffer.push(SongTagCode.pulseWidth, base64IntToCharCode[instrument.pulseWidth]);\n                    buffer.push(base64IntToCharCode[instrument.decimalOffset >> 6], base64IntToCharCode[instrument.decimalOffset & 0x3f]);\n                } else if (instrument.type == InstrumentType.pickedString) {\n                    if (Config.stringSustainRange > 0x20 || SustainType.length > 2) {\n                        throw new Error(\"Not enough bits to represent sustain value and type in same base64 character.\");\n                    }\n                    buffer.push(SongTagCode.unison, base64IntToCharCode[instrument.unison]);\n                    if (instrument.unison == Config.unisons.length) encodeUnisonSettings(buffer, instrument.unisonVoices, instrument.unisonSpread, instrument.unisonOffset, instrument.unisonExpression, instrument.unisonSign);\n                    buffer.push(SongTagCode.stringSustain, base64IntToCharCode[instrument.stringSustain | (instrument.stringSustainType << 5)]);\n                } else if (instrument.type == InstrumentType.mod) {\n                    // Handled down below. Could be moved, but meh.\n                } else {\n                    throw new Error(\"Unknown instrument type.\");\n                }\n\n                buffer.push(SongTagCode.envelopes, base64IntToCharCode[instrument.envelopeCount]);\n                // Added in JB v6: Options for envelopes come next.\n                buffer.push(base64IntToCharCode[instrument.envelopeSpeed]);\n                for (let envelopeIndex = 0; envelopeIndex < instrument.envelopeCount; envelopeIndex++) {\n                    buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].target]);\n                    if (Config.instrumentAutomationTargets[instrument.envelopes[envelopeIndex].target].maxCount > 1) {\n                        buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].index]);\n                    }\n                    buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].envelope]);\n                    //run pitch envelope handling\n                    if (Config.newEnvelopes[instrument.envelopes[envelopeIndex].envelope].name == \"pitch\") {\n                        if (!instrument.isNoiseInstrument) {\n                            buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].pitchEnvelopeStart >> 6], base64IntToCharCode[instrument.envelopes[envelopeIndex].pitchEnvelopeStart & 0x3f]);\n                            buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].pitchEnvelopeEnd >> 6], base64IntToCharCode[instrument.envelopes[envelopeIndex].pitchEnvelopeEnd & 0x3f]);\n                        } else {\n                            buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].pitchEnvelopeStart]);\n                            buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].pitchEnvelopeEnd]);\n                        }\n                    //random\n                    } else if (Config.newEnvelopes[instrument.envelopes[envelopeIndex].envelope].name == \"random\") {\n                        buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].steps]);\n                        buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].seed]);\n                        buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].waveform]);\n                    //lfo\n                    } else if (Config.newEnvelopes[instrument.envelopes[envelopeIndex].envelope].name == \"lfo\") {\n                        buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].waveform]);\n                        if (instrument.envelopes[envelopeIndex].waveform == LFOEnvelopeTypes.steppedSaw || instrument.envelopes[envelopeIndex].waveform == LFOEnvelopeTypes.steppedTri) {\n                            buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].steps]);\n                        }\n                    }\n                    //inverse\n                    let checkboxValues = +instrument.envelopes[envelopeIndex].discrete;\n                    checkboxValues = checkboxValues << 1;\n                    checkboxValues += +instrument.envelopes[envelopeIndex].inverse;\n                    buffer.push(base64IntToCharCode[checkboxValues] ? base64IntToCharCode[checkboxValues] : base64IntToCharCode[0]);\n                    //midbox envelope port\n                    if (Config.newEnvelopes[instrument.envelopes[envelopeIndex].envelope].name != \"pitch\" && Config.newEnvelopes[instrument.envelopes[envelopeIndex].envelope].name != \"note size\" && Config.newEnvelopes[instrument.envelopes[envelopeIndex].envelope].name != \"punch\" && Config.newEnvelopes[instrument.envelopes[envelopeIndex].envelope].name != \"none\") {\n                        buffer.push(base64IntToCharCode[Config.perEnvelopeSpeedToIndices[instrument.envelopes[envelopeIndex].perEnvelopeSpeed]]);\n                    }\n                    buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].perEnvelopeLowerBound * 10]);\n                    buffer.push(base64IntToCharCode[instrument.envelopes[envelopeIndex].perEnvelopeUpperBound * 10]);\n                }\n            }\n        }\n\n        buffer.push(SongTagCode.bars);\n        bits = new BitFieldWriter();\n        let neededBits = 0;\n        while ((1 << neededBits) < this.patternsPerChannel + 1) neededBits++;\n        for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) for (let i = 0; i < this.barCount; i++) {\n            bits.write(neededBits, this.channels[channelIndex].bars[i]);\n        }\n        bits.encodeBase64(buffer);\n\n        buffer.push(SongTagCode.patterns);\n        bits = new BitFieldWriter();\n        const shapeBits = new BitFieldWriter();\n        const bitsPerNoteSize = Song.getNeededBits(Config.noteSizeMax);\n        for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n            const channel = this.channels[channelIndex];\n            const maxInstrumentsPerPattern = this.getMaxInstrumentsPerPattern(channelIndex);\n            const isNoiseChannel = this.getChannelIsNoise(channelIndex);\n            const isModChannel = this.getChannelIsMod(channelIndex);\n            const neededInstrumentCountBits = Song.getNeededBits(maxInstrumentsPerPattern - Config.instrumentCountMin);\n            const neededInstrumentIndexBits = Song.getNeededBits(channel.instruments.length - 1);\n\n            // Some info about modulator settings immediately follows in mod channels.\n            if (isModChannel) {\n                const neededModInstrumentIndexBits = Song.getNeededBits(this.getMaxInstrumentsPerChannel() + 2);\n                for (let instrumentIndex = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n\n                    let instrument = this.channels[channelIndex].instruments[instrumentIndex];\n\n                    for (let mod = 0; mod < Config.modCount; mod++) {\n                        const modChannels: number[] = instrument.modChannels[mod];\n                        const modInstruments: number[] = instrument.modInstruments[mod];\n                        const modSetting = instrument.modulators[mod];\n                        const modFilter = instrument.modFilterTypes[mod];\n                        const modEnvelope = instrument.modEnvelopeNumbers[mod];\n\n                        // Still using legacy \"mod status\" format, but doing it manually as it's only used in the URL now.\n                        // 0 - For pitch/noise\n                        // 1 - (used to be For noise, not needed)\n                        // 2 - For song\n                        // 3 - None\n\n                        let status = Config.modulators[modSetting].forSong ? 2 : 0;\n                        if (modSetting == Config.modulators.dictionary[\"none\"].index)\n                            status = 3;\n\n                        bits.write(2, status);\n\n                        // Channel/Instrument is only used if the status isn't \"song\" or \"none\".\n                        if (status == 0 || status == 1) {\n                            bits.write(8, modChannels.length);\n                            for (let i = 0; i < modChannels.length; i++) bits.write(8, modChannels[i]);\n                            bits.write(8, modInstruments.length);\n                            for (let i = 0; i < modInstruments.length; i++) bits.write(neededModInstrumentIndexBits, modInstruments[i]);\n                        }\n\n                        // Only used if setting isn't \"none\".\n                        if (status != 3) {\n                            bits.write(6, modSetting);\n                        }\n\n                        // Write mod filter info, only if this is a filter mod\n                        if (Config.modulators[instrument.modulators[mod]].name == \"post eq\" || Config.modulators[instrument.modulators[mod]].name == \"pre eq\" || Config.modulators[instrument.modulators[mod]].name == \"song eq\") {\n                            bits.write(6, modFilter);\n                        }\n\n                        //write envelope info only if needed\n                        if (Config.modulators[instrument.modulators[mod]].name == \"individual envelope speed\" ||\n                            Config.modulators[instrument.modulators[mod]].name == \"reset envelope\" ||\n                            Config.modulators[instrument.modulators[mod]].name == \"individual envelope lower bound\" ||\n                            Config.modulators[instrument.modulators[mod]].name == \"individual envelope upper bound\"\n                        ) {\n                            bits.write(6, modEnvelope);\n                        }\n                    }\n                }\n            }\n            const octaveOffset = (isNoiseChannel || isModChannel) ? 0 : channel.octave * Config.pitchesPerOctave;\n            let lastPitch = (isNoiseChannel ? 4 : octaveOffset);\n            const recentPitches: number[] = isModChannel ? [0, 1, 2, 3, 4, 5] : (isNoiseChannel ? [4, 6, 7, 2, 3, 8, 0, 10] : [0, 7, 12, 19, 24, -5, -12]);\n            const recentShapes: string[] = [];\n            for (let i = 0; i < recentPitches.length; i++) {\n                recentPitches[i] += octaveOffset;\n            }\n            for (const pattern of channel.patterns) {\n                if (this.patternInstruments) {\n                    const instrumentCount = validateRange(Config.instrumentCountMin, maxInstrumentsPerPattern, pattern.instruments.length);\n                    bits.write(neededInstrumentCountBits, instrumentCount - Config.instrumentCountMin);\n                    for (let i = 0; i < instrumentCount; i++) {\n                        bits.write(neededInstrumentIndexBits, pattern.instruments[i]);\n                    }\n                }\n\n                if (pattern.notes.length > 0) {\n                    bits.write(1, 1);\n\n                    let curPart = 0;\n                    for (const note of pattern.notes) {\n\n                        // For mod channels, a negative offset may be necessary.\n                        if (note.start < curPart && isModChannel) {\n                            bits.write(2, 0); // rest, then...\n                            bits.write(1, 1); // negative offset\n                            bits.writePartDuration(curPart - note.start);\n                        }\n\n                        if (note.start > curPart) {\n                            bits.write(2, 0); // rest\n                            if (isModChannel) bits.write(1, 0); // positive offset, only needed for mod channels\n                            bits.writePartDuration(note.start - curPart);\n                        }\n\n                        shapeBits.clear();\n\n                        // Old format was:\n                        // 0: 1 pitch, 10: 2 pitches, 110: 3 pitches, 111: 4 pitches\n                        // New format is:\n                        //      0: 1 pitch\n                        // 1[XXX]: 3 bits of binary signifying 2+ pitches\n                        if (note.pitches.length == 1) {\n                            shapeBits.write(1, 0);\n                        } else {\n                            shapeBits.write(1, 1);\n                            shapeBits.write(3, note.pitches.length - 2);\n                        }\n\n                        // chip wave start offset is similar but with more bits: 31, to be exact. this is a lot, (and a TODO is probably to make it more efficient) but it is necessary for my purposes\n                        if (note.chipWaveStartOffset == 0) {\n                            shapeBits.write(1, 0);\n                        } else {\n                            shapeBits.write(1, 1);\n                            shapeBits.write(31, note.chipWaveStartOffset);\n                        }\n\n                        shapeBits.writePinCount(note.pins.length - 1);\n\n                        if (!isModChannel) {\n                            shapeBits.write(bitsPerNoteSize, note.pins[0].size); // volume\n                        }\n                        else {\n                            shapeBits.write(11, note.pins[0].size); // Modulator value. 11 bits for now = 2048 max mod value?\n                        }\n\n                        let shapePart = 0;\n                        let startPitch = note.pitches[0];\n                        let currentPitch = startPitch;\n                        const pitchBends: number[] = [];\n                        for (let i = 1; i < note.pins.length; i++) {\n                            const pin = note.pins[i];\n                            const nextPitch = startPitch + pin.interval;\n                            if (currentPitch != nextPitch) {\n                                shapeBits.write(1, 1);\n                                pitchBends.push(nextPitch);\n                                currentPitch = nextPitch;\n                            } else {\n                                shapeBits.write(1, 0);\n                            }\n                            shapeBits.writePartDuration(pin.time - shapePart);\n                            shapePart = pin.time;\n                            if (!isModChannel) {\n                                shapeBits.write(bitsPerNoteSize, pin.size);\n                            } else {\n                                shapeBits.write(11, pin.size);\n                            }\n                        }\n\n                        const shapeString = String.fromCharCode.apply(null, shapeBits.encodeBase64([]));\n                        const shapeIndex = recentShapes.indexOf(shapeString);\n                        if (shapeIndex == -1) {\n                            bits.write(2, 1); // new shape\n                            bits.concat(shapeBits);\n                        } else {\n                            bits.write(1, 1); // old shape\n                            bits.writeLongTail(0, 0, shapeIndex);\n                            recentShapes.splice(shapeIndex, 1);\n                        }\n                        recentShapes.unshift(shapeString);\n                        if (recentShapes.length > 10) recentShapes.pop();\n\n                        const allPitches: number[] = note.pitches.concat(pitchBends);\n                        for (let i = 0; i < allPitches.length; i++) {\n                            const pitch = allPitches[i];\n                            const pitchIndex = recentPitches.indexOf(pitch);\n                            if (pitchIndex == -1) {\n                                let interval = 0;\n                                let pitchIter = lastPitch;\n                                if (pitchIter < pitch) {\n                                    while (pitchIter != pitch) {\n                                        pitchIter++;\n                                        if (recentPitches.indexOf(pitchIter) == -1) interval++;\n                                    }\n                                } else {\n                                    while (pitchIter != pitch) {\n                                        pitchIter--;\n                                        if (recentPitches.indexOf(pitchIter) == -1) interval--;\n                                    }\n                                }\n                                bits.write(1, 0);\n                                bits.writePitchInterval(interval);\n                            } else {\n                                bits.write(1, 1);\n                                bits.write(4, pitchIndex);\n                                recentPitches.splice(pitchIndex, 1);\n                            }\n                            recentPitches.unshift(pitch);\n                            if (recentPitches.length > 16) recentPitches.pop();\n\n                            if (i == note.pitches.length - 1) {\n                                lastPitch = note.pitches[0];\n                            } else {\n                                lastPitch = pitch;\n                            }\n                        }\n\n                        if (note.start == 0) {\n                            bits.write(1, note.continuesLastPattern ? 1 : 0);\n                        }\n\n                        curPart = note.end;\n                    }\n\n                    if (curPart < this.beatsPerBar * Config.partsPerBeat + (+isModChannel)) {\n                        bits.write(2, 0); // rest\n                        if (isModChannel) bits.write(1, 0); // positive offset\n                        bits.writePartDuration(this.beatsPerBar * Config.partsPerBeat + (+isModChannel) - curPart);\n                    }\n                } else {\n                    bits.write(1, 0);\n                }\n            }\n        }\n        let stringLength = bits.lengthBase64();\n        let digits: number[] = [];\n        while (stringLength > 0) {\n            digits.unshift(base64IntToCharCode[stringLength & 0x3f]);\n            stringLength = stringLength >> 6;\n        }\n        buffer.push(base64IntToCharCode[digits.length]);\n        Array.prototype.push.apply(buffer, digits); // append digits to buffer.\n        bits.encodeBase64(buffer);\n\n        const maxApplyArgs = 64000;\n        let customSamplesStr = \"\";\n        if (EditorConfig.customSamples != undefined && EditorConfig.customSamples.length > 0) {\n            customSamplesStr = \"|\" + EditorConfig.customSamples.join(\"|\")\n\n        }\n        //samplemark\n        if (buffer.length < maxApplyArgs) {\n            // Note: Function.apply may break for long argument lists.\n            return String.fromCharCode.apply(null, buffer) + customSamplesStr;\n            //samplemark\n        } else {\n            let result = \"\";\n            for (let i = 0; i < buffer.length; i += maxApplyArgs) {\n                result += String.fromCharCode.apply(null, buffer.slice(i, i + maxApplyArgs));\n            }\n            return result + customSamplesStr;\n            //samplemark\n        }\n    }\n\n    private static _envelopeFromLegacyIndex(legacyIndex: number): Envelope {\n        // I swapped the order of \"custom\"/\"steady\", now \"none\"/\"note size\".\n        if (legacyIndex == 0) legacyIndex = 1; else if (legacyIndex == 1) legacyIndex = 0;\n        return Config.envelopes[clamp(0, Config.envelopes.length, legacyIndex)];\n    }\n\n    fromBase64String(compressed: string, jsonFormat = \"auto\"): void {\n        if (compressed == null || compressed == \"\") {\n            Song._clearSamples();\n\n            this.initToDefault(true);\n            return;\n        }\n        let charIndex = 0;\n        // skip whitespace.\n        while (compressed.charCodeAt(charIndex) <= CharCode.SPACE) charIndex++;\n        // skip hash mark.\n        if (compressed.charCodeAt(charIndex) == CharCode.HASH) charIndex++;\n        // if it starts with curly brace, treat it as JSON.\n        if (compressed.charCodeAt(charIndex) == CharCode.LEFT_CURLY_BRACE) {\n            this.fromJsonObject(JSON.parse(charIndex == 0 ? compressed : compressed.substring(charIndex)), jsonFormat);\n            return;\n        }\n\n        const variantTest = compressed.charCodeAt(charIndex);\n        //I cleaned up these boolean setters with an initial value. Idk why this wasn't done earlier...\n        let fromBeepBox = false;\n        let fromJummBox = false;\n        let fromGoldBox = false;\n        let fromUltraBox = false;\n        let fromSlarmoosBox = false;\n        let fromTheepBox = false;\n        // let fromMidbox: boolean;\n        // let fromDogebox2: boolean;\n        // let fromAbyssBox: boolean;\n\n        // Detect variant here. If version doesn't match known variant, assume it is a vanilla string which does not report variant.\n        if (variantTest == 0x64) { // \"d\" = DragonBox is (currently) compatible with Theepbox so copy the settings\n            fromTheepBox = true\n            fromSlarmoosBox = true\n            charIndex++;\n        } else if (variantTest == 0x74){ //\"t\"\n            fromTheepBox = true\n            fromSlarmoosBox = true\n            charIndex++;\n        } else if (variantTest == 0x6A) { //\"j\"\n            fromJummBox = true;\n            charIndex++;\n        } else if (variantTest == 0x67) { //\"g\"\n            fromGoldBox = true;\n            charIndex++;\n        } else if (variantTest == 0x75) { //\"u\"\n            fromUltraBox = true;\n            charIndex++;\n        } else if (variantTest == 0x64) { //\"d\"\n            fromJummBox = true;\n            // to-do: add explicit dogebox2 support\n            //fromDogeBox2 = true;\n            charIndex++;\n        } else if (variantTest == 0x61) { //\"a\" Abyssbox does urls the same as ultrabox //not quite anymore, but oh well\n            fromUltraBox = true;\n            charIndex++;\n        } else if(variantTest == 0x73){ //\"s\"\n            fromSlarmoosBox = true\n            charIndex++;\n        } else {\n            fromBeepBox = true;\n        }\n\n        const version = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n        if (fromBeepBox && (version == -1 || version > Song._latestBeepboxVersion || version < Song._oldestBeepboxVersion)) return;\n        if (fromJummBox && (version == -1 || version > Song._latestJummBoxVersion || version < Song._oldestJummBoxVersion)) return;\n        if (fromGoldBox && (version == -1 || version > Song._latestGoldBoxVersion || version < Song._oldestGoldBoxVersion)) return;\n        if (fromUltraBox && (version == -1 || version > Song._latestUltraBoxVersion || version < Song._oldestUltraBoxVersion)) return;\n        if ((fromSlarmoosBox || fromTheepBox) && (version == -1 || version > Song._latestSlarmoosBoxVersion || version < Song._oldestSlarmoosBoxVersion)) return;\n        const beforeTwo = version < 2;\n        const beforeThree = version < 3;\n        const beforeFour = version < 4;\n        const beforeFive = version < 5;\n        const beforeSix = version < 6;\n        const beforeSeven = version < 7;\n        const beforeEight = version < 8;\n        const beforeNine = version < 9;\n        this.initToDefault((fromBeepBox && beforeNine) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)));\n        const forceSimpleFilter = (fromBeepBox && beforeNine || fromJummBox && beforeFive);\n\n        let willLoadLegacySamplesForOldSongs = false;\n\n        if (fromSlarmoosBox || fromUltraBox || fromGoldBox) {\n            compressed = compressed.replaceAll(\"%7C\", \"|\")\n            var compressed_array = compressed.split(\"|\");\n            compressed = compressed_array.shift()!;\n            if (EditorConfig.customSamples == null || EditorConfig.customSamples.join(\", \") != compressed_array.join(\", \")) {\n\n                Song._restoreChipWaveListToDefault();\n\n                let willLoadLegacySamples = false;\n                let willLoadNintariboxSamples = false;\n                let willLoadMarioPaintboxSamples = false;\n                const customSampleUrls: string[] = [];\n                const customSamplePresets: Preset[] = [];\n                sampleLoadingState.statusTable = {};\n                sampleLoadingState.urlTable = {};\n                sampleLoadingState.totalSamples = 0;\n                sampleLoadingState.samplesLoaded = 0;\n                sampleLoadEvents.dispatchEvent(new SampleLoadedEvent(\n                    sampleLoadingState.totalSamples,\n                    sampleLoadingState.samplesLoaded\n                ));\n                for (const url of compressed_array) {\n                    if (url.toLowerCase() === \"legacysamples\") {\n                        if (!willLoadLegacySamples) {\n                            willLoadLegacySamples = true;\n                            customSampleUrls.push(url);\n                            loadBuiltInSamples(0);\n                        }\n                    }\n                    else if (url.toLowerCase() === \"nintariboxsamples\") {\n                        if (!willLoadNintariboxSamples) {\n                            willLoadNintariboxSamples = true;\n                            customSampleUrls.push(url);\n                            loadBuiltInSamples(1);\n                        }\n                    }\n                    else if (url.toLowerCase() === \"mariopaintboxsamples\") {\n                        if (!willLoadMarioPaintboxSamples) {\n                            willLoadMarioPaintboxSamples = true;\n                            customSampleUrls.push(url);\n                            loadBuiltInSamples(2);\n                        }\n                    }\n\n                    else {\n                        // UB version 2 URLs and below will be using the old syntax, so we do need to parse it in that case.\n                        // UB version 3 URLs should only have the new syntax, though, unless the user has edited the URL manually.\n                        const parseOldSyntax = beforeThree;\n                        const ok = Song._parseAndConfigureCustomSample(url, customSampleUrls, customSamplePresets, sampleLoadingState, parseOldSyntax);\n                        if (!ok) {\n                            continue;\n                        }\n                    }\n                }\n                if (customSampleUrls.length > 0) {\n                    EditorConfig.customSamples = customSampleUrls;\n                }\n                if (customSamplePresets.length > 0) {\n                    const customSamplePresetsMap: DictionaryArray<Preset> = toNameMap(customSamplePresets);\n                    EditorConfig.presetCategories[EditorConfig.presetCategories.length] = {\n                        name: \"Custom Sample Presets\",\n                        presets: customSamplePresetsMap,\n                        index: EditorConfig.presetCategories.length,\n                    };\n                    // EditorConfig.presetCategories.splice(1, 0, {\n                    // name: \"Custom Sample Presets\",\n                    // presets: customSamplePresets,\n                    // index: EditorConfig.presetCategories.length,\n                    // });\n                }\n\n\n            }\n            //samplemark\n        }\n\n        if (beforeThree && fromBeepBox) {\n            // Originally, the only instrument transition was \"instant\" and the only drum wave was \"retro\".\n            for (const channel of this.channels) {\n                channel.instruments[0].transition = Config.transitions.dictionary[\"interrupt\"].index;\n                channel.instruments[0].mdeffects |= 1 << MDEffectType.transition;\n            }\n            this.channels[3].instruments[0].chipNoise = 0;\n        }\n\n        let legacySettingsCache: LegacySettings[][] | null = null;\n        if ((fromBeepBox && beforeNine) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n            // Unfortunately, old versions of BeepBox had a variety of different ways of saving\n            // filter-and-envelope-related parameters in the URL, and none of them directly\n            // correspond to the new way of saving these parameters. We can approximate the old\n            // settings by collecting all the old settings for an instrument and passing them to\n            // convertLegacySettings(), so I use this data structure to collect the settings\n            // for each instrument if necessary.\n            legacySettingsCache = [];\n            for (let i = legacySettingsCache.length; i < this.getChannelCount(); i++) {\n                legacySettingsCache[i] = [];\n                for (let j = 0; j < Config.instrumentCountMin; j++) legacySettingsCache[i][j] = {};\n            }\n        }\n\n        let legacyGlobalReverb = 0; // beforeNine reverb was song-global, record that reverb here and adapt it to instruments as needed.\n\n        let instrumentChannelIterator = 0;\n        let instrumentIndexIterator = -1;\n        let command: number;\n        let useSlowerArpSpeed = false;\n        let useFastTwoNoteArp = false;\n        while (charIndex < compressed.length) switch (command = compressed.charCodeAt(charIndex++)) {\n            case SongTagCode.songTitle: {\n                // Length of song name string\n                var songNameLength = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                this.title = decodeURIComponent(compressed.substring(charIndex, charIndex + songNameLength));\n                document.title = this.title + \" - \" + EditorConfig.versionDisplayName;\n\n                charIndex += songNameLength;\n            } break;\n            case SongTagCode.channelCount: {\n                this.pitchChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                this.noiseChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                if (fromBeepBox || (fromJummBox && beforeTwo)) {\n                    // No mod channel support before jummbox v2\n                    this.modChannelCount = 0;\n                } else {\n                    this.modChannelCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                }\n                this.pitchChannelCount = validateRange(Config.pitchChannelCountMin, Config.pitchChannelCountMax, this.pitchChannelCount);\n                this.noiseChannelCount = validateRange(Config.noiseChannelCountMin, Config.noiseChannelCountMax, this.noiseChannelCount);\n                this.modChannelCount = validateRange(Config.modChannelCountMin, Config.modChannelCountMax, this.modChannelCount);\n\n                for (let channelIndex = this.channels.length; channelIndex < this.getChannelCount(); channelIndex++) {\n                    this.channels[channelIndex] = new Channel();\n                }\n                this.channels.length = this.getChannelCount();\n                if ((fromBeepBox && beforeNine) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                    for (let i = legacySettingsCache!.length; i < this.getChannelCount(); i++) {\n                        legacySettingsCache![i] = [];\n                        for (let j = 0; j < Config.instrumentCountMin; j++) legacySettingsCache![i][j] = {};\n                    }\n                }\n            } break;\n            case SongTagCode.scale: {\n                this.scale = clamp(0, Config.scales.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                // All the scales were jumbled around by Jummbox. Just convert to free.\n                if (this.scale == Config.scales[\"dictionary\"][\"Custom\"].index) {\n                    for (var i = 1; i < Config.pitchesPerOctave; i++) {\n                        this.scaleCustom[i] = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] == 1; // ineffiecent? yes, all we're going to do for now? hell yes\n                    }\n                }\n                if (fromBeepBox) this.scale = 0;\n            } break;\n            case SongTagCode.key: {\n                if (beforeSeven && fromBeepBox) {\n                    this.key = clamp(0, Config.keys.length, 11 - base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    this.octave = 0;\n                } else if (fromBeepBox || fromJummBox) {\n                    this.key = clamp(0, Config.keys.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    this.octave = 0;\n                } else if (fromGoldBox || (beforeThree && fromUltraBox)) {\n                    // GoldBox (so far) didn't introduce any new keys, but old\n                    // songs made with early versions of UltraBox share the\n                    // same URL format, and those can have more keys. This\n                    // shouldn't really result in anything other than 0-11 for\n                    // the key and 0 for the octave for GoldBox songs.\n                    const rawKeyIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    const [key, octave]: [number, number] = convertLegacyKeyToKeyAndOctave(rawKeyIndex);\n                    this.key = key;\n                    this.octave = octave;\n                } else {\n                    this.key = clamp(0, Config.keys.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    this.octave = clamp(Config.octaveMin, Config.octaveMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + Config.octaveMin);\n                }\n            } break;\n            case SongTagCode.loopStart: {\n                if (beforeFive && fromBeepBox) {\n                    this.loopStart = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                } else {\n                    this.loopStart = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                }\n            } break;\n            case SongTagCode.loopEnd: {\n                if (beforeFive && fromBeepBox) {\n                    this.loopLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                } else {\n                    this.loopLength = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\n                }\n            } break;\n            case SongTagCode.tempo: {\n                if (beforeFour && fromBeepBox) {\n                    this.tempo = [95, 120, 151, 190][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\n                } else if (beforeSeven && fromBeepBox) {\n                    this.tempo = [88, 95, 103, 111, 120, 130, 140, 151, 163, 176, 190, 206, 222, 240, 259][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\n                } else {\n                    this.tempo = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                }\n                this.tempo = clamp(Config.tempoMin, Config.tempoMax + 1, this.tempo);\n            } break;\n            case SongTagCode.reverb: {\n                if (beforeNine && fromBeepBox) {\n                    legacyGlobalReverb = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 12;\n                    legacyGlobalReverb = clamp(0, Config.reverbRange, legacyGlobalReverb);\n                } else if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\n                    legacyGlobalReverb = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    legacyGlobalReverb = clamp(0, Config.reverbRange, legacyGlobalReverb);\n                } else {\n                    // Do nothing, BeepBox v9+ do not support song-wide reverb - JummBox still does via modulator.\n                }\n            } break;\n            case SongTagCode.beatCount: {\n                if (beforeThree && fromBeepBox) {\n                    this.beatsPerBar = [6, 7, 8, 9, 10][base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\n                } else {\n                    this.beatsPerBar = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\n                }\n                this.beatsPerBar = Math.max(Config.beatsPerBarMin, Math.min(Config.beatsPerBarMax, this.beatsPerBar));\n            } break;\n            case SongTagCode.barCount: {\n                const barCount = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\n                this.barCount = validateRange(Config.barCountMin, Config.barCountMax, barCount);\n                for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                    for (let bar = this.channels[channelIndex].bars.length; bar < this.barCount; bar++) {\n                        this.channels[channelIndex].bars[bar] = (bar < 4) ? 1 : 0;\n                    }\n                    this.channels[channelIndex].bars.length = this.barCount;\n                }\n            } break;\n            case SongTagCode.patternCount: {\n                let patternsPerChannel: number;\n                if (beforeEight && fromBeepBox) {\n                    patternsPerChannel = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\n                } else {\n                    patternsPerChannel = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1;\n                }\n                this.patternsPerChannel = validateRange(1, Config.barCountMax, patternsPerChannel);\n                const channelCount = this.getChannelCount();\n                for (let channelIndex = 0; channelIndex < channelCount; channelIndex++) {\n                    const patterns: Pattern[] = this.channels[channelIndex].patterns;\n                    for (let pattern = patterns.length; pattern < this.patternsPerChannel; pattern++) {\n                        patterns[pattern] = new Pattern();\n                    }\n                    patterns.length = this.patternsPerChannel;\n                }\n            } break;\n            case SongTagCode.instrumentCount: {\n                if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                    const instrumentsPerChannel = validateRange(Config.instrumentCountMin, Config.patternInstrumentCountMax, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + Config.instrumentCountMin);\n                    this.layeredInstruments = false;\n                    this.patternInstruments = (instrumentsPerChannel > 1);\n\n                    for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                        const isNoiseChannel = channelIndex >= this.pitchChannelCount && channelIndex < this.pitchChannelCount + this.noiseChannelCount;\n                        const isModChannel = channelIndex >= this.pitchChannelCount + this.noiseChannelCount;\n\n                        for (let instrumentIndex = this.channels[channelIndex].instruments.length; instrumentIndex < instrumentsPerChannel; instrumentIndex++) {\n                            this.channels[channelIndex].instruments[instrumentIndex] = new Instrument(isNoiseChannel, isModChannel);\n                        }\n                        this.channels[channelIndex].instruments.length = instrumentsPerChannel;\n                        if (beforeSix && fromBeepBox) {\n                            for (let instrumentIndex = 0; instrumentIndex < instrumentsPerChannel; instrumentIndex++) {\n                                this.channels[channelIndex].instruments[instrumentIndex].setTypeAndReset(isNoiseChannel ? InstrumentType.noise : InstrumentType.chip, isNoiseChannel, isModChannel);\n                            }\n                        }\n\n                        for (let j = legacySettingsCache![channelIndex].length; j < instrumentsPerChannel; j++) {\n                            legacySettingsCache![channelIndex][j] = {};\n                        }\n                    }\n                } else {\n                    const instrumentsFlagBits = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    this.layeredInstruments = (instrumentsFlagBits & (1 << 1)) != 0;\n                    this.patternInstruments = (instrumentsFlagBits & (1 << 0)) != 0;\n                    for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                        let instrumentCount = 1;\n                        if (this.layeredInstruments || this.patternInstruments) {\n                            instrumentCount = validateRange(Config.instrumentCountMin, this.getMaxInstrumentsPerChannel(), base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + Config.instrumentCountMin);\n                        }\n                        const channel = this.channels[channelIndex];\n                        const isNoiseChannel = this.getChannelIsNoise(channelIndex);\n                        const isModChannel = this.getChannelIsMod(channelIndex);\n                        for (let i = channel.instruments.length; i < instrumentCount; i++) {\n                            channel.instruments[i] = new Instrument(isNoiseChannel, isModChannel);\n                        }\n                        channel.instruments.length = instrumentCount;\n                    }\n                }\n            } break;\n            case SongTagCode.rhythm: {\n                if (!fromUltraBox && !fromSlarmoosBox) {\n                    let newRhythm = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    this.rhythm = clamp(0, Config.rhythms.length, newRhythm);\n                    if (fromJummBox && beforeThree || fromBeepBox) {\n                        if (this.rhythm == Config.rhythms.dictionary[\"\u00F73 (triplets)\"].index || this.rhythm == Config.rhythms.dictionary[\"\u00F76\"].index) {\n                            useSlowerArpSpeed = true;\n                        }\n                        if (this.rhythm >= Config.rhythms.dictionary[\"\u00F76\"].index) {\n                            // @TODO: This assumes that 6 and 8 are in that order, but\n                            // if someone reorders Config.rhythms that may not be true,\n                            // so this check probably should instead look for those\n                            // specific rhythms.\n                            useFastTwoNoteArp = true;\n                        }\n                    }\n                } else if ((fromSlarmoosBox && beforeFour) || (fromUltraBox && beforeFive)) {\n                    const rhythmMap = [1, 1, 0, 1, 2, 3, 4, 5];\n                    this.rhythm = clamp(0, Config.rhythms.length, rhythmMap[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]]);\n                } else {\n                    this.rhythm = clamp(0, Config.rhythms.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                }\n            } break;\n            case SongTagCode.channelOctave: {\n                if (beforeThree && fromBeepBox) {\n                    const channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    this.channels[channelIndex].octave = clamp(0, Config.pitchOctaves, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);\n                    if (channelIndex >= this.pitchChannelCount) this.channels[channelIndex].octave = 0;\n                } else if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                    for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                        this.channels[channelIndex].octave = clamp(0, Config.pitchOctaves, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);\n                        if (channelIndex >= this.pitchChannelCount) this.channels[channelIndex].octave = 0;\n                    }\n                } else {\n                    for (let channelIndex = 0; channelIndex < this.pitchChannelCount; channelIndex++) {\n                        this.channels[channelIndex].octave = clamp(0, Config.pitchOctaves, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    }\n                    for (let channelIndex = this.pitchChannelCount; channelIndex < this.getChannelCount(); channelIndex++) {\n                        this.channels[channelIndex].octave = 0;\n                    }\n                }\n            } break;\n            case SongTagCode.startInstrument: {\n                instrumentIndexIterator++;\n                if (instrumentIndexIterator >= this.channels[instrumentChannelIterator].instruments.length) {\n                    instrumentChannelIterator++;\n                    instrumentIndexIterator = 0;\n                }\n                validateRange(0, this.channels.length - 1, instrumentChannelIterator);\n                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                // JB before v5 had custom chip and mod before pickedString and supersaw were added. Index +2.\n                let instrumentType = validateRange(0, InstrumentType.length - 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\n                    if (instrumentType == InstrumentType.pickedString || instrumentType == InstrumentType.supersaw) {\n                        instrumentType += 2;\n                    }\n                }\n                // Similar story here, JB before v5 had custom chip and mod before supersaw was added. Index +1.\n                else if ((fromJummBox && beforeSix) || (fromGoldBox && !beforeFour) || (fromUltraBox && beforeFive)) {\n                    if (instrumentType == InstrumentType.supersaw || instrumentType == InstrumentType.customChipWave || instrumentType == InstrumentType.mod) {\n                        instrumentType += 1;\n                    }\n                }\n                instrument.setTypeAndReset(instrumentType, instrumentChannelIterator >= this.pitchChannelCount && instrumentChannelIterator < this.pitchChannelCount + this.noiseChannelCount, instrumentChannelIterator >= this.pitchChannelCount + this.noiseChannelCount);\n\n                // Anti-aliasing was added in BeepBox 3.0 (v6->v7) and JummBox 1.3 (v1->v2 roughly but some leakage possible)\n                if (((beforeSeven && fromBeepBox) || (beforeTwo && fromJummBox)) && (instrumentType == InstrumentType.chip || instrumentType == InstrumentType.customChipWave || instrumentType == InstrumentType.pwm)) {\n                    instrument.aliases = true;\n                    let newEffect = instrument.addEffect(EffectType.distortion);\n                    newEffect.distortion = 0;\n                }\n                if (useSlowerArpSpeed) {\n                    instrument.arpeggioSpeed = 9; // x3/4 speed. This used to be tied to rhythm, but now it is decoupled to each instrument's arp speed slider. This flag gets set when importing older songs to keep things consistent.\n                }\n                if (useFastTwoNoteArp) {\n                    instrument.fastTwoNoteArp = true;\n                }\n\n                if (beforeSeven && fromBeepBox) {\n                    // instrument.effects = 0;\n                    // Chip/noise instruments had arpeggio and FM had custom interval but neither\n                    // explicitly saved the chorus setting beforeSeven so enable it here.\n                    if (instrument.chord != Config.chords.dictionary[\"simultaneous\"].index) {\n                        // Enable chord if it was used.\n                        instrument.mdeffects |= 1 << MDEffectType.chord;\n                    }\n                }\n            } break;\n            case SongTagCode.preset: {\n                const presetValue = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = presetValue;\n                // Picked string was inserted before custom chip in JB v5, so bump up preset index.\n                if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\n                    if (this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset == InstrumentType.pickedString) {\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = InstrumentType.customChipWave;\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].type = InstrumentType.customChipWave;\n                    }\n                }\n                // Similar story, supersaw is also before custom chip (and mod, but mods can't have presets).\n                else if ((fromJummBox && beforeSix) || (fromUltraBox && beforeFive)) {\n                    if (this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset == InstrumentType.supersaw) {\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = InstrumentType.customChipWave;\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].type = InstrumentType.customChipWave;\n                    }\n                    // ultra code for 6-op fm maybe\n                    if (this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset == InstrumentType.mod) {\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = InstrumentType.fm6op;\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].type = InstrumentType.fm6op;\n                    }\n                }\n                // BeepBox directly tweaked \"grand piano\", but JB kept it the same. The most up to date version is now \"grand piano 3\"\n                if (fromBeepBox && presetValue == EditorConfig.nameToPresetValue(\"grand piano 1\")) {\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].preset = EditorConfig.nameToPresetValue(\"grand piano 3\")!;\n                }\n            } break;\n            case SongTagCode.wave: {\n                if (beforeThree && fromBeepBox) {\n                    const legacyWaves: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 0];\n                    const channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    const instrument = this.channels[channelIndex].instruments[0];\n                    instrument.chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\n\n                    // Version 2 didn't save any settings for settings for filters, or envelopes,\n                    // just waves, so initialize them here I guess.\n                    instrument.convertLegacySettings(legacySettingsCache![channelIndex][0], forceSimpleFilter);\n\n                } else if (beforeSix && fromBeepBox) {\n                    const legacyWaves: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 0];\n                    for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                        for (const instrument of this.channels[channelIndex].instruments) {\n                            if (channelIndex >= this.pitchChannelCount) {\n                                instrument.chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            } else {\n                                instrument.chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\n                            }\n                        }\n                    }\n                } else if (beforeSeven && fromBeepBox) {\n                    const legacyWaves: number[] = [1, 2, 3, 4, 5, 6, 7, 8, 0];\n                    if (instrumentChannelIterator >= this.pitchChannelCount) {\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    } else {\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, legacyWaves[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]] | 0);\n                    }\n                } else {\n                    if (this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].type == InstrumentType.noise) {\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipNoise = clamp(0, Config.chipNoises.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    } else {\n                        if (fromSlarmoosBox || fromUltraBox) {\n                            const chipWaveReal = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            const chipWaveCounter = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\n                            if (chipWaveCounter == 3) {\n                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveReal + 186);\n                            } else if (chipWaveCounter == 2) {\n                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveReal + 124);\n                            } else if (chipWaveCounter == 1) {\n                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveReal + 62);\n                            } else {\n                                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveReal);\n                            }\n\n                        } else {\n                            this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                    }\n                }\n            } break;\n            case SongTagCode.noteFilter: {\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\n                    if (beforeSeven && fromBeepBox) {\n                        const legacyToCutoff: number[] = [10, 6, 3, 0, 8, 5, 2];\n                        //const pregoldToEnvelope: number[] = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];\n                        const legacyToEnvelope: string[] = [\"none\", \"none\", \"none\", \"none\", \"decay 1\", \"decay 2\", \"decay 3\"];\n\n                        if (beforeThree && fromBeepBox) {\n                            const channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            const instrument = this.channels[channelIndex].instruments[0];\n                            const legacySettings = legacySettingsCache![channelIndex][0];\n                            const legacyFilter = [1, 3, 4, 5][clamp(0, legacyToCutoff.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                            legacySettings.filterCutoff = legacyToCutoff[legacyFilter];\n                            legacySettings.filterResonance = 0;\n                            legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyToEnvelope[legacyFilter]];\n                            instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                        } else if (beforeSix && fromBeepBox) {\n                            for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                                for (let i = 0; i < this.channels[channelIndex].instruments.length; i++) {\n                                    const instrument = this.channels[channelIndex].instruments[i];\n                                    const legacySettings = legacySettingsCache![channelIndex][i];\n                                    const legacyFilter = clamp(0, legacyToCutoff.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 1);\n                                    if (channelIndex < this.pitchChannelCount) {\n                                        legacySettings.filterCutoff = legacyToCutoff[legacyFilter];\n                                        legacySettings.filterResonance = 0;\n                                        legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyToEnvelope[legacyFilter]];\n                                    } else {\n                                        legacySettings.filterCutoff = 10;\n                                        legacySettings.filterResonance = 0;\n                                        legacySettings.filterEnvelope = Config.envelopes.dictionary[\"none\"];\n                                    }\n                                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                                }\n                            }\n                        } else {\n                            const legacyFilter = clamp(0, legacyToCutoff.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            const legacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n                            legacySettings.filterCutoff = legacyToCutoff[legacyFilter];\n                            legacySettings.filterResonance = 0;\n                            legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyToEnvelope[legacyFilter]];\n                            instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                        }\n                    } else {\n                        const filterCutoffRange = 11;\n                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        const legacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n                        legacySettings.filterCutoff = clamp(0, filterCutoffRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                    }\n                } else {\n                    const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    let typeCheck = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    if (fromTheepBox) { //in mods that arent Theepbox, pre eq is switched with post eq\n                        if (typeCheck == 0) {\n                            instrument.noteFilterType = false;\n                            typeCheck = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            const originalControlPointCount = typeCheck;\n                            instrument.noteFilter.controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalControlPointCount);\n                            for (let i = instrument.noteFilter.controlPoints.length; i < instrument.noteFilter.controlPointCount; i++) {\n                                instrument.noteFilter.controlPoints[i] = new FilterControlPoint();\n                            }\n                            for (let i = 0; i < instrument.noteFilter.controlPointCount; i++) {\n                                const point = instrument.noteFilter.controlPoints[i];\n                                point.type = clamp(0, FilterType.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                            for (let i = instrument.noteFilter.controlPointCount; i < originalControlPointCount; i++) {\n                                charIndex += 3;\n                            }\n\n                            // Get subfilters as well. Skip Index 0, is a copy of the base filter.\n                            instrument.noteSubFilters[0] = instrument.noteFilter;\n                            let usingSubFilterBitfield = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            for (let j = 0; j < Config.filterMorphCount - 1; j++) {\n                                if (usingSubFilterBitfield & (1 << j)) {\n                                    // Number of control points\n                                    const originalSubfilterControlPointCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    if (instrument.noteSubFilters[j + 1] == null)\n                                        instrument.noteSubFilters[j + 1] = new FilterSettings();\n                                    instrument.noteSubFilters[j + 1]!.controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalSubfilterControlPointCount);\n                                    for (let i = instrument.noteSubFilters[j + 1]!.controlPoints.length; i < instrument.noteSubFilters[j + 1]!.controlPointCount; i++) {\n                                        instrument.noteSubFilters[j + 1]!.controlPoints[i] = new FilterControlPoint();\n                                    }\n                                    for (let i = 0; i < instrument.noteSubFilters[j + 1]!.controlPointCount; i++) {\n                                        const point = instrument.noteSubFilters[j + 1]!.controlPoints[i];\n                                        point.type = clamp(0, FilterType.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    }\n                                    for (let i = instrument.noteSubFilters[j + 1]!.controlPointCount; i < originalSubfilterControlPointCount; i++) {\n                                        charIndex += 3;\n                                    }\n                                }\n                            }\n                        }\n                        else {\n                            instrument.noteFilterType = true;\n                            instrument.noteFilterSimpleCut = clamp(0, Config.filterSimpleCutRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.noteFilterSimplePeak = clamp(0, Config.filterSimplePeakRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                    } else {\n                        let newEffect = instrument.addEffect(EffectType.eqFilter);\n                        if (fromBeepBox || typeCheck == 0) {\n                            newEffect.eqFilterType = false;\n                            if (fromJummBox || fromGoldBox || fromUltraBox || fromSlarmoosBox)\n                                typeCheck = base64CharCodeToInt[compressed.charCodeAt(charIndex++)]; // Skip to next to get control point count\n                                const originalControlPointCount = typeCheck;\n                            newEffect.eqFilter.controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalControlPointCount);\n                            for (let i = newEffect.eqFilter.controlPoints.length; i < newEffect.eqFilter.controlPointCount; i++) {\n                                newEffect.eqFilter.controlPoints[i] = new FilterControlPoint();\n                            }\n                            for (let i = 0; i < newEffect.eqFilter.controlPointCount; i++) {\n                                const point = newEffect.eqFilter.controlPoints[i];\n                                point.type = clamp(0, FilterType.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                            for (let i = newEffect.eqFilter.controlPointCount; i < originalControlPointCount; i++) {\n                                charIndex += 3;\n                            }\n\n                            // Get subfilters as well. Skip Index 0, is a copy of the base filter.\n                            newEffect.eqSubFilters[0] = newEffect.eqFilter;\n                            if ((fromJummBox && !beforeFive) || (fromGoldBox && !beforeFour) || fromUltraBox || fromSlarmoosBox) {\n                                let usingSubFilterBitfield = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                for (let j = 0; j < Config.filterMorphCount - 1; j++) {\n                                    if (usingSubFilterBitfield & (1 << j)) {\n                                        // Number of control points\n                                        const originalSubfilterControlPointCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                        if (newEffect.eqSubFilters[j + 1] == null)\n                                            newEffect.eqSubFilters[j + 1] = new FilterSettings();\n                                        newEffect.eqSubFilters[j + 1]!.controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalSubfilterControlPointCount);\n                                        for (let i = newEffect.eqSubFilters[j + 1]!.controlPoints.length; i < newEffect.eqSubFilters[j + 1]!.controlPointCount; i++) {\n                                            newEffect.eqSubFilters[j + 1]!.controlPoints[i] = new FilterControlPoint();\n                                        }\n                                        for (let i = 0; i < newEffect.eqSubFilters[j + 1]!.controlPointCount; i++) {\n                                            const point = newEffect.eqSubFilters[j + 1]!.controlPoints[i];\n                                            point.type = clamp(0, FilterType.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                            point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                            point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        }\n                                        for (let i = newEffect.eqSubFilters[j + 1]!.controlPointCount; i < originalSubfilterControlPointCount; i++) {\n                                            charIndex += 3;\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                        else {\n                            newEffect.eqFilterType = true;\n                            newEffect.eqFilterSimpleCut = clamp(0, Config.filterSimpleCutRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            newEffect.eqFilterSimplePeak = clamp(0, Config.filterSimplePeakRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                    }\n                }\n            } break;\n            case SongTagCode.loopControls: {\n                if (fromSlarmoosBox || fromUltraBox) {\n                    if (beforeThree && fromUltraBox) {\n                        // Still have to support the old and bad loop control data format written as a test, sigh.\n                        const sampleLoopInfoEncodedLength = decode32BitNumber(compressed, charIndex);\n                        charIndex += 6;\n                        const sampleLoopInfoEncoded = compressed.slice(charIndex, charIndex + sampleLoopInfoEncodedLength);\n                        charIndex += sampleLoopInfoEncodedLength;\n                        interface SampleLoopInfo {\n                            isUsingAdvancedLoopControls: boolean;\n                            chipWaveLoopStart: number;\n                            chipWaveLoopEnd: number;\n                            chipWaveLoopMode: number;\n                            chipWavePlayBackwards: boolean;\n                            chipWaveStartOffset: number;\n                        }\n                        interface SampleLoopInfoEntry {\n                            channel: number;\n                            instrument: number;\n                            info: SampleLoopInfo;\n                        }\n                        const sampleLoopInfo: SampleLoopInfoEntry[] = JSON.parse(atob(sampleLoopInfoEncoded));\n                        for (const entry of sampleLoopInfo) {\n                            const channelIndex = entry[\"channel\"];\n                            const instrumentIndex = entry[\"instrument\"];\n                            const info = entry[\"info\"];\n                            const instrument = this.channels[channelIndex].instruments[instrumentIndex];\n                            instrument.isUsingAdvancedLoopControls = info[\"isUsingAdvancedLoopControls\"];\n                            instrument.chipWaveLoopStart = info[\"chipWaveLoopStart\"];\n                            instrument.chipWaveLoopEnd = info[\"chipWaveLoopEnd\"];\n                            instrument.chipWaveLoopMode = info[\"chipWaveLoopMode\"];\n                            instrument.chipWavePlayBackwards = info[\"chipWavePlayBackwards\"];\n                            instrument.chipWaveStartOffset = info[\"chipWaveStartOffset\"];\n                            // @TODO: Whenever chipWaveReleaseMode is implemented, it should be set here to the default.\n                        }\n                    } else {\n                        // Read the new loop control data format.\n                        // See Song.toBase64String for details on the encodings used here.\n                        const encodedLoopMode = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        const isUsingAdvancedLoopControls = Boolean(encodedLoopMode & 1);\n                        const chipWaveLoopMode = encodedLoopMode >> 1;\n                        const encodedReleaseMode = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        const chipWaveInStereo = Boolean(encodedReleaseMode & 2);\n                        const chipWavePlayBackwards = Boolean(encodedReleaseMode & 1);\n                        // const chipWaveReleaseMode = encodedReleaseMode >> 1;\n                        const chipWaveLoopStart = decode32BitNumber(compressed, charIndex);\n                        charIndex += 6;\n                        const chipWaveLoopEnd = decode32BitNumber(compressed, charIndex);\n                        charIndex += 6;\n                        const chipWaveStartOffset = decode32BitNumber(compressed, charIndex);\n                        charIndex += 6;\n                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        instrument.isUsingAdvancedLoopControls = isUsingAdvancedLoopControls;\n                        instrument.chipWaveLoopStart = chipWaveLoopStart;\n                        instrument.chipWaveLoopEnd = chipWaveLoopEnd;\n                        instrument.chipWaveLoopMode = chipWaveLoopMode;\n                        instrument.chipWavePlayBackwards = chipWavePlayBackwards;\n                        instrument.chipWaveStartOffset = chipWaveStartOffset;\n                        instrument.chipWaveInStereo = chipWaveInStereo;\n                        // instrument.chipWaveReleaseMode = chipWaveReleaseMode;\n                    }\n                }\n                else if (fromGoldBox && !beforeFour && beforeSix) {\n                    if (document.URL.substring(document.URL.length - 13).toLowerCase() != \"legacysamples\") {\n                        if (!willLoadLegacySamplesForOldSongs) {\n                            willLoadLegacySamplesForOldSongs = true;\n                            Config.willReloadForCustomSamples = true;\n                            EditorConfig.customSamples = [\"legacySamples\"];\n                            loadBuiltInSamples(0);\n                        }\n                    }\n                    this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + 125);\n                } else if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                    const filterResonanceRange = 8;\n                    const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    const legacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n                    legacySettings.filterResonance = clamp(0, filterResonanceRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n\n                }\n            } break;\n            case SongTagCode.drumsetEnvelopes: {\n                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                const pregoldToEnvelope: number[] = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\n                    if ((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox && !fromSlarmoosBox)) {\n\n                    }\n                    if (instrument.type == InstrumentType.drumset) {\n                        for (let i = 0; i < Config.drumCount; i++) {\n                            let aa = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            if ((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox && !fromSlarmoosBox)) aa = pregoldToEnvelope[aa];\n                            instrument.drumsetEnvelopes[i] = Song._envelopeFromLegacyIndex(aa).index;\n                        }\n                    } else {\n                        // This used to be used for general filter envelopes.\n                        // The presence of an envelope affects how convertLegacySettings\n                        // decides the closest possible approximation, so update it.\n                        const legacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n                        let aa = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        if ((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox && !fromSlarmoosBox)) aa = pregoldToEnvelope[aa];\n                        legacySettings.filterEnvelope = Song._envelopeFromLegacyIndex(aa);\n                        instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                    }\n                } else {\n                    // This tag is now only used for drumset filter envelopes.\n                    for (let i = 0; i < Config.drumCount; i++) {\n                        let aa = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        if ((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox && !fromSlarmoosBox)) aa = pregoldToEnvelope[aa];\n                        if (!fromSlarmoosBox && aa >= 2) aa++; //2 for pitch\n                        instrument.drumsetEnvelopes[i] = clamp(0, Config.envelopes.length, aa);\n                    }\n                }\n            } break;\n            case SongTagCode.pulseWidth: {\n                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                instrument.pulseWidth = clamp(0, Config.pulseWidthRange + (+(fromJummBox)) + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                if (fromBeepBox) {\n                    // BeepBox formula\n                    instrument.pulseWidth = Math.round(Math.pow(0.5, (7 - instrument.pulseWidth) * Config.pulseWidthStepPower) * Config.pulseWidthRange);\n\n                }\n\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\n                    const pregoldToEnvelope: number[] = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];\n                    const legacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n                    let aa = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    if ((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox && !fromSlarmoosBox)) aa = pregoldToEnvelope[aa];\n                    legacySettings.pulseEnvelope = Song._envelopeFromLegacyIndex(aa);\n                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                }\n\n                if ((fromUltraBox && !beforeFour) || fromSlarmoosBox) {\n                    instrument.decimalOffset = clamp(0, 99 + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                }\n\n            } break;\n            case SongTagCode.stringSustain: {\n                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                const sustainValue = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                instrument.stringSustain = clamp(0, Config.stringSustainRange, sustainValue & 0x1F);\n                instrument.stringSustainType = Config.enableAcousticSustain ? clamp(0, SustainType.length, sustainValue >> 5) : SustainType.bright;\n            } break;\n            case SongTagCode.fadeInOut: {\n                if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                    // this tag was used for a combination of transition and fade in/out.\n                    const legacySettings = [\n                        { transition: \"interrupt\", fadeInSeconds: 0.0, fadeOutTicks: -1 },\n                        { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: -3 },\n                        { transition: \"normal\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\n                        { transition: \"slide in pattern\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\n                        { transition: \"normal\", fadeInSeconds: 0.04, fadeOutTicks: 6 },\n                        { transition: \"normal\", fadeInSeconds: 0.0, fadeOutTicks: 48 },\n                        { transition: \"normal\", fadeInSeconds: 0.0125, fadeOutTicks: 72 },\n                        { transition: \"normal\", fadeInSeconds: 0.06, fadeOutTicks: 96 },\n                        { transition: \"slide in pattern\", fadeInSeconds: 0.025, fadeOutTicks: -3 },\n                    ];\n                    if (beforeThree && fromBeepBox) {\n                        const channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                        const instrument = this.channels[channelIndex].instruments[0];\n                        instrument.fadeIn = secondsToFadeInSetting(settings.fadeInSeconds);\n                        instrument.fadeOut = ticksToFadeOutSetting(settings.fadeOutTicks);\n                        instrument.transition = Config.transitions.dictionary[settings.transition].index;\n                        if (instrument.transition != Config.transitions.dictionary[\"normal\"].index) {\n                            // Enable transition if it was used.\n                            instrument.mdeffects |= 1 << MDEffectType.transition;\n                        }\n                    } else if (beforeSix && fromBeepBox) {\n                        for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                            for (const instrument of this.channels[channelIndex].instruments) {\n                                const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                                instrument.fadeIn = secondsToFadeInSetting(settings.fadeInSeconds);\n                                instrument.fadeOut = ticksToFadeOutSetting(settings.fadeOutTicks);\n                                instrument.transition = Config.transitions.dictionary[settings.transition].index;\n                                if (instrument.transition != Config.transitions.dictionary[\"normal\"].index) {\n                                    // Enable transition if it was used.\n                                    instrument.mdeffects |= 1 << MDEffectType.transition;\n                                }\n                            }\n                        }\n                    } else if ((beforeFour && !fromGoldBox && !fromUltraBox && !fromSlarmoosBox) || fromBeepBox) {\n                        const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        instrument.fadeIn = secondsToFadeInSetting(settings.fadeInSeconds);\n                        instrument.fadeOut = ticksToFadeOutSetting(settings.fadeOutTicks);\n                        instrument.transition = Config.transitions.dictionary[settings.transition].index;\n                        if (instrument.transition != Config.transitions.dictionary[\"normal\"].index) {\n                            // Enable transition if it was used.\n                            instrument.mdeffects |= 1 << MDEffectType.transition;\n                        }\n                    } else {\n                        const settings = legacySettings[clamp(0, legacySettings.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        instrument.fadeIn = secondsToFadeInSetting(settings.fadeInSeconds);\n                        instrument.fadeOut = ticksToFadeOutSetting(settings.fadeOutTicks);\n                        instrument.transition = Config.transitions.dictionary[settings.transition].index;\n\n                        // Read tie-note\n                        if (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] > 0) {\n                            // Set legacy tie over flag, which is only used to port notes in patterns using this instrument as tying.\n                            instrument.legacyTieOver = true;\n\n                        }\n                        instrument.clicklessTransition = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\n\n                        if (instrument.transition != Config.transitions.dictionary[\"normal\"].index || instrument.clicklessTransition) {\n                            // Enable transition if it was used.\n                            instrument.mdeffects |= 1 << MDEffectType.transition;\n                        }\n                    }\n                } else {\n                    const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    instrument.fadeIn = clamp(0, Config.fadeInRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    instrument.fadeOut = clamp(0, Config.fadeOutTicks.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    if (fromJummBox || fromGoldBox || fromUltraBox || fromSlarmoosBox)\n                        instrument.clicklessTransition = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\n                }\n            } break;\n            case SongTagCode.songEq: { //deprecated vibrato tag repurposed for songEq\n                if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                    if (beforeSeven && fromBeepBox) {\n                        if (beforeThree && fromBeepBox) {\n                            const legacyEffects: number[] = [0, 3, 2, 0];\n                            const legacyEnvelopes: string[] = [\"none\", \"none\", \"none\", \"tremolo2\"];\n                            const channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            const effect = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            const instrument = this.channels[channelIndex].instruments[0];\n                            const legacySettings = legacySettingsCache![channelIndex][0];\n                            instrument.vibrato = legacyEffects[effect];\n                            if (legacySettings.filterEnvelope == undefined || legacySettings.filterEnvelope.type == EnvelopeType.none) {\n                                // Imitate the legacy tremolo with a filter envelope.\n                                legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyEnvelopes[effect]];\n                                instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                            }\n                            if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\n                                // Enable vibrato if it was used.\n                                instrument.mdeffects |= 1 << MDEffectType.vibrato;\n                            }\n                        } else if (beforeSix && fromBeepBox) {\n                            const legacyEffects: number[] = [0, 1, 2, 3, 0, 0];\n                            const legacyEnvelopes: string[] = [\"none\", \"none\", \"none\", \"none\", \"tremolo5\", \"tremolo2\"];\n                            for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                                for (let i = 0; i < this.channels[channelIndex].instruments.length; i++) {\n                                    const effect = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    const instrument = this.channels[channelIndex].instruments[i];\n                                    const legacySettings = legacySettingsCache![channelIndex][i];\n                                    instrument.vibrato = legacyEffects[effect];\n                                    if (legacySettings.filterEnvelope == undefined || legacySettings.filterEnvelope.type == EnvelopeType.none) {\n                                        // Imitate the legacy tremolo with a filter envelope.\n                                        legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyEnvelopes[effect]];\n                                        instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                                    }\n                                    if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\n                                        // Enable vibrato if it was used.\n                                        instrument.mdeffects |= 1 << MDEffectType.vibrato;\n                                    }\n                                    if ((legacyGlobalReverb != 0 || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) && !this.getChannelIsNoise(channelIndex)) {\n                                        // Enable reverb if it was used globaly before. (Global reverb was added before the effects option so I need to pick somewhere else to initialize instrument reverb, and I picked the vibrato command.)\n                                        let newEffect = instrument.addEffect(EffectType.reverb);\n                                        newEffect.reverb = legacyGlobalReverb;\n                                    }\n                                }\n                            }\n                        } else {\n                            const legacyEffects: number[] = [0, 1, 2, 3, 0, 0];\n                            const legacyEnvelopes: string[] = [\"none\", \"none\", \"none\", \"none\", \"tremolo5\", \"tremolo2\"];\n                            const effect = clamp(0, legacyEffects.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                            const legacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n                            instrument.vibrato = legacyEffects[effect];\n                            if (legacySettings.filterEnvelope == undefined || legacySettings.filterEnvelope.type == EnvelopeType.none) {\n                                // Imitate the legacy tremolo with a filter envelope.\n                                legacySettings.filterEnvelope = Config.envelopes.dictionary[legacyEnvelopes[effect]];\n                                instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                            }\n                            if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\n                                // Enable vibrato if it was used.\n                                instrument.mdeffects |= 1 << MDEffectType.vibrato;\n                            }\n                            if (legacyGlobalReverb != 0 || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                                // Enable reverb if it was used globaly before. (Global reverb was added before the effects option so I need to pick somewhere else to initialize instrument reverb, and I picked the vibrato command.)\n                                let newEffect = instrument.addEffect(EffectType.reverb);\n                                newEffect.reverb = legacyGlobalReverb;\n                            }\n                        }\n                    } else {\n                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        const vibrato = clamp(0, Config.vibratos.length + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        instrument.vibrato = vibrato;\n                        if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\n                            // Enable vibrato if it was used.\n                            instrument.mdeffects |= 1 << MDEffectType.vibrato;\n                        }\n                        // Custom vibrato\n                        if (vibrato == Config.vibratos.length) {\n                            instrument.vibratoDepth = clamp(0, Config.modulators.dictionary[\"vibrato depth\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 50;\n                            instrument.vibratoSpeed = clamp(0, Config.modulators.dictionary[\"vibrato speed\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.vibratoDelay = clamp(0, Config.modulators.dictionary[\"vibrato delay\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 2;\n                            instrument.vibratoType = clamp(0, Config.vibratoTypes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.mdeffects |= 1 << MDEffectType.vibrato;\n                        }\n                        // Enforce standard vibrato settings\n                        else {\n                            instrument.vibratoDepth = Config.vibratos[instrument.vibrato].amplitude;\n                            instrument.vibratoSpeed = 10; // Normal speed\n                            instrument.vibratoDelay = Config.vibratos[instrument.vibrato].delayTicks / 2;\n                            instrument.vibratoType = Config.vibratos[instrument.vibrato].type;\n                        }\n                    }\n                } else {\n                    // songeq\n                    if (fromSlarmoosBox && !beforeFour) { //double check that it's from a valid version\n                        const originalControlPointCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        this.eqFilter.controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalControlPointCount);\n                        for (let i = this.eqFilter.controlPoints.length; i < this.eqFilter.controlPointCount; i++) {\n                            this.eqFilter.controlPoints[i] = new FilterControlPoint();\n                        }\n                        for (let i = 0; i < this.eqFilter.controlPointCount; i++) {\n                            const point = this.eqFilter.controlPoints[i];\n                            point.type = clamp(0, FilterType.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                        for (let i = this.eqFilter.controlPointCount; i < originalControlPointCount; i++) {\n                            charIndex += 3;\n                        }\n\n                        // Get subfilters as well. Skip Index 0, is a copy of the base filter.\n                        this.eqSubFilters[0] = this.eqFilter;\n                        let usingSubFilterBitfield = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        for (let j = 0; j < Config.filterMorphCount - 1; j++) {\n                            if (usingSubFilterBitfield & (1 << j)) {\n                                // Number of control points\n                                const originalSubfilterControlPointCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                if (this.eqSubFilters[j + 1] == null)\n                                    this.eqSubFilters[j + 1] = new FilterSettings();\n                                this.eqSubFilters[j + 1]!.controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalSubfilterControlPointCount);\n                                for (let i = this.eqSubFilters[j + 1]!.controlPoints.length; i < this.eqSubFilters[j + 1]!.controlPointCount; i++) {\n                                    this.eqSubFilters[j + 1]!.controlPoints[i] = new FilterControlPoint();\n                                }\n                                for (let i = 0; i < this.eqSubFilters[j + 1]!.controlPointCount; i++) {\n                                    const point = this.eqSubFilters[j + 1]!.controlPoints[i];\n                                    point.type = clamp(0, FilterType.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                }\n                                for (let i = this.eqSubFilters[j + 1]!.controlPointCount; i < originalSubfilterControlPointCount; i++) {\n                                    charIndex += 3;\n                                }\n                            }\n                        }\n                    }\n                }\n            } break;\n            case SongTagCode.arpeggioSpeed: {\n                // Deprecated, but supported for legacy purposes\n                if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\n                    const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    instrument.arpeggioSpeed = clamp(0, Config.modulators.dictionary[\"arp speed\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    instrument.fastTwoNoteArp = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false; // Two note arp setting piggybacks on this\n                }\n                else {\n                    // Do nothing, deprecated for now\n                }\n            } break;\n            case SongTagCode.unison: {\n                if (beforeThree && fromBeepBox) {\n                    const channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    const instrument = this.channels[channelIndex].instruments[0];\n                    instrument.unison = clamp(0, Config.unisons.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    instrument.unisonVoices = Config.unisons[instrument.unison].voices;\n                    instrument.unisonSpread = Config.unisons[instrument.unison].spread;\n                    instrument.unisonOffset = Config.unisons[instrument.unison].offset;\n                    instrument.unisonExpression = Config.unisons[instrument.unison].expression;\n                    instrument.unisonSign = Config.unisons[instrument.unison].sign;\n                } else if (beforeSix && fromBeepBox) {\n                    for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                        for (const instrument of this.channels[channelIndex].instruments) {\n                            const originalValue = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            let unison = clamp(0, Config.unisons.length, originalValue);\n                            if (originalValue == 8) {\n                                // original \"custom harmony\" now maps to \"hum\" and \"custom interval\".\n                                unison = 2;\n                                instrument.chord = 3;\n                            }\n                            instrument.unison = unison;\n                            instrument.unisonVoices = Config.unisons[instrument.unison].voices;\n                            instrument.unisonSpread = Config.unisons[instrument.unison].spread;\n                            instrument.unisonOffset = Config.unisons[instrument.unison].offset;\n                            instrument.unisonExpression = Config.unisons[instrument.unison].expression;\n                            instrument.unisonSign = Config.unisons[instrument.unison].sign;\n                        }\n                    }\n                } else if (beforeSeven && fromBeepBox) {\n                    const originalValue = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    let unison = clamp(0, Config.unisons.length, originalValue);\n                    const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    if (originalValue == 8) {\n                        // original \"custom harmony\" now maps to \"hum\" and \"custom interval\".\n                        unison = 2;\n                        instrument.chord = 3;\n                    }\n                    instrument.unison = unison;\n                    instrument.unisonVoices = Config.unisons[instrument.unison].voices;\n                    instrument.unisonSpread = Config.unisons[instrument.unison].spread;\n                    instrument.unisonOffset = Config.unisons[instrument.unison].offset;\n                    instrument.unisonExpression = Config.unisons[instrument.unison].expression;\n                    instrument.unisonSign = Config.unisons[instrument.unison].sign;\n                } else {\n                    const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    instrument.unison = clamp(0, Config.unisons.length + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    const unisonLength = (beforeFive || !fromSlarmoosBox) ? 27 : Config.unisons.length; //27 was the old length before I added >2 voice presets\n                    if (((fromUltraBox && !beforeFive) || fromSlarmoosBox) && (instrument.unison == unisonLength)) {\n                        // if (instrument.unison == Config.unisons.length) {\n                        instrument.unison = Config.unisons.length;\n                        instrument.unisonVoices = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\n                        const unisonSpreadNegative = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        const unisonSpread = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 63)) * 63);\n\n                        const unisonOffsetNegative = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        const unisonOffset = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 63)) * 63);\n\n                        const unisonExpressionNegative = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        const unisonExpression = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 63);\n\n                        const unisonSignNegative = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        const unisonSign = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] + (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 63);\n\n\n                        instrument.unisonSpread = unisonSpread / 1000;\n                        if (unisonSpreadNegative == 0) instrument.unisonSpread *= -1;\n\n                        instrument.unisonOffset = unisonOffset / 1000;\n                        if (unisonOffsetNegative == 0) instrument.unisonOffset *= -1;\n\n                        instrument.unisonExpression = unisonExpression / 1000;\n                        if (unisonExpressionNegative == 0) instrument.unisonExpression *= -1;\n\n                        instrument.unisonSign = unisonSign / 1000;\n                        if (unisonSignNegative == 0) instrument.unisonSign *= -1;\n                    } else {\n                        instrument.unisonVoices = Config.unisons[instrument.unison].voices;\n                        instrument.unisonSpread = Config.unisons[instrument.unison].spread;\n                        instrument.unisonOffset = Config.unisons[instrument.unison].offset;\n                        instrument.unisonExpression = Config.unisons[instrument.unison].expression;\n                        instrument.unisonSign = Config.unisons[instrument.unison].sign;\n                    }\n                }\n\n            } break;\n            case SongTagCode.chord: {\n                if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                    const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    instrument.chord = clamp(0, Config.chords.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    if (instrument.chord != Config.chords.dictionary[\"simultaneous\"].index) {\n                        // Enable chord if it was used.\n                        instrument.mdeffects |= 1 << MDEffectType.chord;\n                    }\n                } else {\n                    // Do nothing? This song tag code is deprecated for now.\n                }\n            } break;\n            case SongTagCode.effects: {\n                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                if ((beforeNine && fromBeepBox) || ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                    instrument.addEffect(base64CharCodeToInt[compressed.charCodeAt(charIndex++)] & ((1 << EffectType.length) - 1));\n                    /*\n                    if (legacyGlobalReverb == 0 && !((fromJummBox && beforeFive) || (beforeFour && fromGoldBox))) {\n                        // Disable reverb if legacy song reverb was zero.\n                        instrument.removeEffect(EffectType.reverb);\n                    } else if (instrument.effectsIncludeType(EffectType.reverb)) {\n                        instrument.reverb = legacyGlobalReverb;\n                    }\n                    if (instrument.pan != Config.panCenter) {\n                        instrument.addEffect(EffectType.panning);\n                    }\n                    if (instrument.vibrato != Config.vibratos.dictionary[\"none\"].index) {\n                        // Enable vibrato if it was used.\n                        instrument.mdeffects |= 1 << MDEffectType.vibrato;\n                    }\n                    if (instrument.detune != Config.detuneCenter) {\n                        // Enable detune if it was used.\n                        instrument.mdeffects |= 1 << MDEffectType.detune;\n                    }\n                    if (instrument.aliases)\n                        instrument.addEffect(EffectType.distortion);\n                    else\n                        instrument.removeEffect(EffectType.distortion);\n                    instrument.addEffect(EffectType.eqFilter);\n                    */\n                    //TODO: all this compat stuff, or honestly just remove it idc that much\n\n                    // convertLegacySettings may need to force-enable pre eq, call\n                    // it again here to make sure that this override takes precedence.\n                    const legacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                } else {\n                    // if (EffectType.length > 9) throw new Error();\n                    const effectCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)]\n                    if (fromTheepBox) {\n                        instrument.effects = [];\n                        for (let i = 0; i < effectCount; i++) { // this for loop caused me a lot of grief... i dont wanna talk about it\n                            let newEffect = instrument.addEffect(base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            if (newEffect.type == EffectType.eqFilter) {\n                                let typeCheck = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                if (typeCheck == 0) {\n                                    newEffect.eqFilterType = false;\n                                    typeCheck = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    newEffect.eqFilter.controlPointCount = clamp(0, Config.filterMaxPoints + 1, typeCheck);\n                                    for (let i = newEffect.eqFilter.controlPoints.length; i < newEffect.eqFilter.controlPointCount; i++) {\n                                        newEffect.eqFilter.controlPoints[i] = new FilterControlPoint();\n                                    }\n                                    for (let i = 0; i < newEffect.eqFilter.controlPointCount; i++) {\n                                        const point = newEffect.eqFilter.controlPoints[i];\n                                        point.type = clamp(0, FilterType.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                        point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    }\n                                    for (let i = newEffect.eqFilter.controlPointCount; i < typeCheck; i++) {\n                                        charIndex += 3;\n                                    }\n\n                                    // Get subfilters as well. Skip Index 0, is a copy of the base filter.\n                                    newEffect.eqSubFilters[0] = newEffect.eqFilter;\n                                    let usingSubFilterBitfield = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    for (let j = 0; j < Config.filterMorphCount - 1; j++) {\n                                        if (usingSubFilterBitfield & (1 << j)) {\n                                            // Number of control points\n                                            const originalSubfilterControlPointCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                            if (newEffect.eqSubFilters[j + 1] == null)\n                                                newEffect.eqSubFilters[j + 1] = new FilterSettings();\n                                            newEffect.eqSubFilters[j + 1]!.controlPointCount = clamp(0, Config.filterMaxPoints + 1, originalSubfilterControlPointCount);\n                                            for (let i = newEffect.eqSubFilters[j + 1]!.controlPoints.length; i < newEffect.eqSubFilters[j + 1]!.controlPointCount; i++) {\n                                                newEffect.eqSubFilters[j + 1]!.controlPoints[i] = new FilterControlPoint();\n                                            }\n                                            for (let i = 0; i < newEffect.eqSubFilters[j + 1]!.controlPointCount; i++) {\n                                                const point = newEffect.eqSubFilters[j + 1]!.controlPoints[i];\n                                                point.type = clamp(0, FilterType.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                                point.freq = clamp(0, Config.filterFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                                point.gain = clamp(0, Config.filterGainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                            }\n                                            for (let i = newEffect.eqSubFilters[j + 1]!.controlPointCount; i < originalSubfilterControlPointCount; i++) {\n                                                charIndex += 3;\n                                            }\n                                        }\n                                    }\n                                } else {\n                                    newEffect.eqFilterType = true;\n                                    newEffect.eqFilter.reset();\n                                    newEffect.eqFilterSimpleCut = clamp(0, Config.filterSimpleCutRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    newEffect.eqFilterSimplePeak = clamp(0, Config.filterSimplePeakRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                }\n                            }\n                            if (newEffect.type == EffectType.distortion) {\n                                if (fromTheepBox) newEffect.distortion = clamp(0, Config.distortionRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                else newEffect.distortion = clamp(0, Config.distortionRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) * 2;\n                                if ((fromJummBox && !beforeFive) || fromGoldBox || fromUltraBox || fromSlarmoosBox)\n                                    instrument.aliases = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] ? true : false;\n                            }\n                            if (newEffect.type == EffectType.bitcrusher) {\n                                newEffect.bitcrusherFreq = clamp(0, Config.bitcrusherFreqRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                newEffect.bitcrusherQuantization = clamp(0, Config.bitcrusherQuantizationRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                            if (newEffect.type == EffectType.panning) {\n                                if (fromBeepBox) {\n                                    // Beepbox has a panMax of 8 (9 total positions), Jummbox has a panMax of 100 (101 total positions)\n                                    newEffect.pan = clamp(0, Config.panMax + 1, Math.round(base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * ((Config.panMax) / 8.0)));\n                                }\n                                else {\n                                    newEffect.pan = clamp(0, Config.panMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                }\n\n                                // Now, pan delay follows on new versions of jummbox.\n                                if ((fromJummBox && !beforeTwo) || fromGoldBox || fromUltraBox || fromSlarmoosBox) newEffect.panDelay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                if (fromTheepBox) newEffect.panMode = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            }\n                            if (newEffect.type == EffectType.flanger) {\n                                newEffect.flanger = clamp(0, Config.flangerRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                newEffect.flangerSpeed = clamp(0, Config.flangerSpeedRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                newEffect.flangerDepth = clamp(0, Config.flangerDepthRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                newEffect.flangerFeedback = clamp(0, Config.flangerFeedbackRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                            if (newEffect.type == EffectType.chorus) {\n                                if (fromTheepBox) newEffect.chorus = clamp(0, (Config.chorusRange / 2) + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                else if (fromBeepBox) newEffect.chorus = clamp(0, (Config.chorusRange / 2) + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) * 4;\n                                else newEffect.chorus = clamp(0, Config.chorusRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) * 2;\n                            }\n                            if (newEffect.type == EffectType.gain) {\n                                newEffect.gain = clamp(0, Config.volumeRange, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                            if (newEffect.type == EffectType.echo) {\n                                if (!fromTheepBox) newEffect.echoSustain = clamp(0, Config.echoSustainRange / 3, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) * 3;\n                                else newEffect.echoSustain = clamp(0, Config.echoSustainRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                newEffect.echoDelay = clamp(0, Config.echoDelayRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                newEffect.echoPingPong = clamp(0, Config.panMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                            if (newEffect.type == EffectType.reverb) {\n                                if (fromBeepBox) {\n                                    newEffect.reverb = clamp(0, Config.reverbRange, Math.round(base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * Config.reverbRange / 3.0));\n                                } else {\n                                    newEffect.reverb = clamp(0, Config.reverbRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                }\n                            }\n                            if (newEffect.type == EffectType.granular) {\n                                newEffect.granular = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                newEffect.grainSize = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                newEffect.grainAmounts = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                newEffect.grainRange = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            }\n                            if (newEffect.type == EffectType.ringModulation) {\n                                newEffect.ringModulation = clamp(0, Config.ringModRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                newEffect.ringModulationHz = clamp(0, Config.ringModHzRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                newEffect.ringModWaveformIndex = clamp(0, Config.operatorWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                newEffect.ringModPulseWidth = clamp(0, Config.pulseWidthRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                newEffect.ringModHzOffset = clamp(Config.rmHzOffsetMin, Config.rmHzOffsetMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            }\n                        }\n                        instrument.mdeffects = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    }\n                    else {\n                        // i will admit it feels pretty good to describe a feature as \"legacy\"\n                        // hopefully this will inspire me to add more compatability code (although im not 100% sure i got it right here) ~ theepie\n                        const legacyEffectTypes: (EffectType | MDEffectType)[] = [EffectType.reverb, EffectType.chorus, EffectType.panning, EffectType.distortion, EffectType.bitcrusher, EffectType.eqFilter, EffectType.echo, MDEffectType.pitchShift, MDEffectType.detune, MDEffectType.vibrato, MDEffectType.transition, MDEffectType.chord, MDEffectType.noteRange, EffectType.ringModulation, EffectType.granular];\n                        let bit = 0;\n                        if (fromSlarmoosBox && !beforeFive) {\n                            const bits = new BitFieldReader(compressed, charIndex, charIndex + 18);\n                            for (let i = 0; i < 18; i++) {\n                                bit = bits.read(1)\n                                if (i > 6 && i < 13) instrument.mdeffects &= legacyEffectTypes[bit];\n                                else if (bit == 1) instrument.addEffect(legacyEffectTypes[i] as EffectType);\n                            }\n                        } else {\n                            const bits = new BitFieldReader(compressed, charIndex, charIndex + 12);\n                            for (let i = 0; i < 12; i++) {\n                                bit = bits.read(1)\n                                if (i > 6) instrument.mdeffects &= legacyEffectTypes[bit];\n                                else if (bit == 1) instrument.addEffect(legacyEffectTypes[i] as EffectType);\n                            }\n                        }\n                        //TODO: add the rest of the compatability code lol\n                    }\n\n                    if (effectsIncludeTransition(instrument.mdeffects)) {\n                        instrument.transition = clamp(0, Config.transitions.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    }\n                    if (effectsIncludeChord(instrument.mdeffects)) {\n                        instrument.chord = clamp(0, Config.chords.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        // Custom arpeggio speed... only in JB, and only if the instrument arpeggiates.\n                        if (instrument.chord == Config.chords.dictionary[\"arpeggio\"].index && (fromJummBox||fromGoldBox||fromUltraBox||fromSlarmoosBox)) {\n                            instrument.arpeggioSpeed = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            instrument.fastTwoNoteArp = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) ? true : false;\n                        }\n                        if (instrument.chord == Config.chords.dictionary[\"monophonic\"].index && fromSlarmoosBox && !beforeFive) {\n                            instrument.monoChordTone = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        }\n                    }\n                    if (effectsIncludePitchShift(instrument.mdeffects)) {\n                        instrument.pitchShift = clamp(0, Config.pitchShiftRange, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    }\n                    if (effectsIncludeDetune(instrument.mdeffects)) {\n                        if (fromBeepBox) {\n                            // Convert from BeepBox's formula\n                            instrument.detune = clamp(Config.detuneMin, Config.detuneMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.detune = Math.round((instrument.detune - 9) * (Math.abs(instrument.detune - 9) + 1) / 2 + Config.detuneCenter);\n                        } else {\n                            instrument.detune = clamp(Config.detuneMin, Config.detuneMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                    }\n                    if (effectsIncludeVibrato(instrument.mdeffects)) {\n                        instrument.vibrato = clamp(0, Config.vibratos.length + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n\n                        // Custom vibrato\n                        if (instrument.vibrato == Config.vibratos.length && (fromJummBox || fromGoldBox || fromUltraBox || fromSlarmoosBox)) {\n                            instrument.vibratoDepth = clamp(0, Config.modulators.dictionary[\"vibrato depth\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 25;\n                            instrument.vibratoSpeed = clamp(0, Config.modulators.dictionary[\"vibrato speed\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.vibratoDelay = clamp(0, Config.modulators.dictionary[\"vibrato delay\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                            instrument.vibratoType = clamp(0, Config.vibratoTypes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                        // Enforce standard vibrato settings\n                        else {\n                            instrument.vibratoDepth = Config.vibratos[instrument.vibrato].amplitude;\n                            instrument.vibratoSpeed = 10; // Normal speed\n                            instrument.vibratoDelay = Config.vibratos[instrument.vibrato].delayTicks / 2;\n                            instrument.vibratoType = Config.vibratos[instrument.vibrato].type;\n                        }\n                    }\n                }\n                // Clamp the range...?\n                // if (instrument.effects.length != instrument.effectCount) //not sure what to do exactly\n            } break;\n            case SongTagCode.volume: {\n                if (beforeThree && fromBeepBox) {\n                    const channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    const instrument = this.channels[channelIndex].instruments[0];\n                    instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\n                } else if (beforeSix && fromBeepBox) {\n                    for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                        for (const instrument of this.channels[channelIndex].instruments) {\n                            instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\n                        }\n                    }\n                } else if (beforeSeven && fromBeepBox) {\n                    const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 5.0));\n                } else if (fromBeepBox) {\n                    // Beepbox v9's volume range is 0-7 (0 is max, 7 is mute)\n                    const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    instrument.volume = Math.round(clamp(-Config.volumeRange / 2, 1, -base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 25.0 / 7.0));\n                } else if (!fromTheepBox) {\n                    const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    instrument.volume = Math.round(clamp(-Config.volumeRange / 2, Config.volumeRange / 2 + 1, ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)])) - Config.volumeRange / 2) * 2.0);\n                } else {\n                    const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    // shoutouts to later waffling\n                    instrument.volume = Math.round(clamp(-Config.volumeRange / 2, Config.volumeRange / 2 + 1, ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) | (base64CharCodeToInt[compressed.charCodeAt(charIndex++)])) - Config.volumeRange / 2));\n                }\n            } break;\n            case SongTagCode.pan: { // ideally this tagcode would add a new panning effect. however, there are many other parts of the code that add this aswell! TODO: make this work again? ~ theepie\n                /*\n                if (beforeNine && fromBeepBox) {\n                    // Beepbox has a panMax of 8 (9 total positions), Jummbox has a panMax of 100 (101 total positions)\n                    const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    instrument.pan = clamp(0, Config.panMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * ((Config.panMax) / 8.0));\n                } else if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\n                    const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    instrument.pan = clamp(0, Config.panMax + 1, (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    // Pan delay follows on v3 + v4\n                    if (fromJummBox && !beforeThree || fromGoldBox || fromUltraBox || fromSlarmoosBox) {\n                        instrument.panDelay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    }\n                } else {\n                    // Do nothing? This song tag code is deprecated for now.\n                } */\n            } break;\n            case SongTagCode.detune: {\n                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n\n                if ((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) {\n                    // Before jummbox v5, detune was -50 to 50. Now it is 0 to 400\n                    instrument.detune = clamp(Config.detuneMin, Config.detuneMax + 1, ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) * 4);\n                    instrument.mdeffects |= 1 << MDEffectType.detune;\n                } else {\n                    // Now in v5, tag code is deprecated and handled thru detune effects.\n                }\n            } break;\n            case SongTagCode.customChipWave: {\n                let instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                // Pop custom wave values\n                for (let j = 0; j < 64; j++) {\n                    instrument.customChipWave[j]\n                    = clamp(-24, 25, base64CharCodeToInt[compressed.charCodeAt(charIndex++)] - 24);\n                }\n\n                let sum = 0.0;\n                for (let i = 0; i < instrument.customChipWave.length; i++) {\n                    sum += instrument.customChipWave[i];\n                }\n                const average = sum / instrument.customChipWave.length;\n\n                // Perform the integral on the wave. The chipSynth will perform the derivative to get the original wave back but with antialiasing.\n                let cumulative = 0;\n                let wavePrev = 0;\n                for (let i = 0; i < instrument.customChipWave.length; i++) {\n                    cumulative += wavePrev;\n                    wavePrev = instrument.customChipWave[i] - average;\n                    instrument.customChipWaveIntegral[i] = cumulative;\n                }\n\n                // 65th, last sample is for anti-aliasing\n                instrument.customChipWaveIntegral[64] = 0.0;\n\n            } break;\n            case SongTagCode.limiterSettings: {\n                let nextValue = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\n                // Check if limiter settings are used... if not, restore to default\n                if (nextValue == 0x3f) {\n                    this.restoreLimiterDefaults();\n                }\n                else {\n                    // Limiter is used, grab values\n                    this.compressionRatio = (nextValue < 10 ? nextValue / 10 : (1 + (nextValue - 10) / 60));\n                    nextValue = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    this.limitRatio = (nextValue < 10 ? nextValue / 10 : (nextValue - 9));\n                    this.limitDecay = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    this.limitRise = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)] * 250.0) + 2000.0;\n                    this.compressionThreshold = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 20.0;\n                    this.limitThreshold = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 20.0;\n                    this.masterGain = ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) / 50.0;\n                }\n            } break;\n            case SongTagCode.channelNames: {\n                for (let channel = 0; channel < this.getChannelCount(); channel++) {\n                    // Length of channel name string. Due to some crazy Unicode characters this needs to be 2 bytes...\n                    var channelNameLength;\n                    if (beforeFour && !fromGoldBox && !fromUltraBox && !fromSlarmoosBox)\n                        channelNameLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)]\n                    else\n                        channelNameLength = ((base64CharCodeToInt[compressed.charCodeAt(charIndex++)] << 6) + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    this.channels[channel].name = decodeURIComponent(compressed.substring(charIndex, charIndex + channelNameLength));\n\n                    charIndex += channelNameLength;\n\n                    if (fromTheepBox) this.channels[channel].color = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                }\n            } break;\n            case SongTagCode.algorithm: {\n                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                if (instrument.type == InstrumentType.fm) {\n                    instrument.algorithm = clamp(0, Config.algorithms.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                }\n                else {\n                    instrument.algorithm6Op = clamp(0, Config.algorithms6Op.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    instrument.customAlgorithm.fromPreset(instrument.algorithm6Op);\n                    if (compressed.charCodeAt(charIndex) == SongTagCode.chord) {\n                        let carrierCountTemp = clamp(1, Config.operatorCount + 2 + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex + 1)]);\n                        charIndex++\n                        let tempModArray: number[][] = [];\n                        if (compressed.charCodeAt(charIndex + 1) == SongTagCode.effects) {\n                            charIndex++\n                            let j = 0;\n                            charIndex++\n                            while (compressed.charCodeAt(charIndex) != SongTagCode.effects) {\n                                tempModArray[j] = [];\n                                let o = 0;\n                                while (compressed.charCodeAt(charIndex) != SongTagCode.operatorWaves) {\n                                    tempModArray[j][o] = clamp(1, Config.operatorCount + 3, base64CharCodeToInt[compressed.charCodeAt(charIndex)]);\n                                    o++\n                                    charIndex++\n                                }\n                                j++;\n                                charIndex++\n                            }\n                            instrument.customAlgorithm.set(carrierCountTemp, tempModArray);\n                            charIndex++; //????\n                        }\n                    }\n                }\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\n                    // The algorithm determines the carrier count, which affects how legacy settings are imported.\n                    const legacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                }\n            } break;\n            case SongTagCode.supersaw: {\n                if (fromGoldBox && !beforeFour && beforeSix) {\n                    //is it more useful to save base64 characters or url length?\n                    const chipWaveForCompat = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    if ((chipWaveForCompat + 62) > 85) {\n                        if (document.URL.substring(document.URL.length - 13).toLowerCase() != \"legacysamples\") {\n                            if (!willLoadLegacySamplesForOldSongs) {\n                                willLoadLegacySamplesForOldSongs = true;\n                                Config.willReloadForCustomSamples = true;\n                                EditorConfig.customSamples = [\"legacySamples\"];\n                                loadBuiltInSamples(0);\n                            }\n                        }\n                    }\n\n                    if ((chipWaveForCompat + 62) > 78) {\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveForCompat + 63);\n                    }\n                    else if ((chipWaveForCompat + 62) > 67) {\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveForCompat + 61);\n                    }\n                    else if ((chipWaveForCompat + 62) == 67) {\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = 40;\n                    }\n                    else {\n                        this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].chipWave = clamp(0, Config.chipWaves.length, chipWaveForCompat + 62);\n                    }\n                } else {\n                    const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    instrument.supersawDynamism = clamp(0, Config.supersawDynamismMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    instrument.supersawSpread = clamp(0, Config.supersawSpreadMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    instrument.supersawShape = clamp(0, Config.supersawShapeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                }\n            } break;\n            case SongTagCode.feedbackType: {\n                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                if (instrument.type == InstrumentType.fm) {\n                    instrument.feedbackType = clamp(0, Config.feedbacks.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                }\n                else {\n                    instrument.feedbackType6Op = clamp(0, Config.feedbacks6Op.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    instrument.customFeedbackType.fromPreset(instrument.feedbackType6Op);\n                    let tempModArray: number[][] = [];\n                    if (compressed.charCodeAt(charIndex) == SongTagCode.effects) {\n                        let j = 0;\n                        charIndex++\n                        while (compressed.charCodeAt(charIndex) != SongTagCode.effects) {\n                            tempModArray[j] = [];\n                            let o = 0;\n                            while (compressed.charCodeAt(charIndex) != SongTagCode.operatorWaves) {\n                                tempModArray[j][o] = clamp(1, Config.operatorCount + 2, base64CharCodeToInt[compressed.charCodeAt(charIndex)]);\n                                o++\n                                charIndex++\n                            }\n                            j++;\n                            charIndex++\n                        }\n                        instrument.customFeedbackType.set(tempModArray);\n                        charIndex++; //???? weirdly needs to skip the end character or it'll use that next loop instead of like just moving to the next one itself\n                    }\n                }\n\n            } break;\n            case SongTagCode.feedbackAmplitude: {\n                this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator].feedbackAmplitude = clamp(0, Config.operatorAmplitudeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n            } break;\n            case SongTagCode.feedbackEnvelope: {\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\n                    const pregoldToEnvelope: number[] = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];\n                    const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    const legacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n\n                    let aa = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    if ((beforeTwo && fromGoldBox) || (!fromGoldBox && !fromUltraBox && !fromSlarmoosBox)) aa = pregoldToEnvelope[aa];\n                    legacySettings.feedbackEnvelope = Song._envelopeFromLegacyIndex(base64CharCodeToInt[aa]);\n                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                } else {\n                    // Do nothing? This song tag code is deprecated for now.\n                }\n            } break;\n            case SongTagCode.operatorFrequencies: {\n                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                if (beforeThree && fromGoldBox) {\n                    const freqToGold3 = [4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 18, 20, 22, 24, 2, 1, 9, 17, 19, 21, 23, 0, 3];\n\n                    for (let o = 0; o < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); o++) {\n                        instrument.operators[o].frequency = freqToGold3[clamp(0, freqToGold3.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                    }\n                }\n                else if (!fromGoldBox && !fromUltraBox && !fromSlarmoosBox) {\n                    const freqToUltraBox = [4, 5, 6, 7, 8, 10, 12, 13, 14, 15, 16, 18, 20, 23, 27, 2, 1, 9, 17, 19, 21, 23, 0, 3];\n\n                    for (let o = 0; o < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); o++) {\n                        instrument.operators[o].frequency = freqToUltraBox[clamp(0, freqToUltraBox.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                    }\n\n                }\n                else {\n                    for (let o = 0; o < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); o++) {\n                        instrument.operators[o].frequency = clamp(0, Config.operatorFrequencies.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    }\n                }\n            } break;\n            case SongTagCode.operatorAmplitudes: {\n                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                for (let o = 0; o < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); o++) {\n                    instrument.operators[o].amplitude = clamp(0, Config.operatorAmplitudeMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                }\n            } break;\n            case SongTagCode.envelopes: {\n                const pregoldToEnvelope: number[] = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 27, 28, 29, 32, 33, 34, 31, 11];\n                const jummToUltraEnvelope: number[] = [0, 1, 2, 4, 5, 6, 8, 9, 10, 12, 13, 14, 16, 17, 18, 19, 20, 21, 23, 24, 25, 58, 59, 60];\n                const slarURL3toURL4Envelope: number[] = [0, 1, 2, 3, 4, 5, 6, 7, 8, 8, 9, 10, 11, 12, 13, 14];\n                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\n                    const legacySettings = legacySettingsCache![instrumentChannelIterator][instrumentIndexIterator];\n                    legacySettings.operatorEnvelopes = [];\n                    for (let o = 0; o < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); o++) {\n                        let aa = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        if ((beforeTwo && fromGoldBox) || (fromBeepBox)) aa = pregoldToEnvelope[aa];\n                        if (fromJummBox) aa = jummToUltraEnvelope[aa];\n                        legacySettings.operatorEnvelopes[o] = Song._envelopeFromLegacyIndex(aa);\n                    }\n                    instrument.convertLegacySettings(legacySettings, forceSimpleFilter);\n                } else {\n                    const envelopeCount = clamp(0, Config.maxEnvelopeCount + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    // JB v6 adds some envelope options here in the sequence.\n                    let envelopeDiscrete = false;\n                    if ((fromJummBox && !beforeSix) || (fromUltraBox && !beforeFive) || (fromSlarmoosBox)) {\n                        instrument.envelopeSpeed = clamp(0, Config.modulators.dictionary[\"envelope speed\"].maxRawVol + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        if(!fromSlarmoosBox || beforeFive) {\n                            envelopeDiscrete = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) ? true : false;\n                        }\n                    }\n                    for (let i = 0; i < envelopeCount; i++) {\n                        const target = clamp(0, Config.instrumentAutomationTargets.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        let index = 0;\n                        const maxCount = Config.instrumentAutomationTargets[target].maxCount;\n                        if (maxCount > 1) {\n                            index = clamp(0, maxCount, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                        let aa = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        if ((beforeTwo && fromGoldBox) || (fromBeepBox)) aa = pregoldToEnvelope[aa];\n                        if (fromJummBox) aa = jummToUltraEnvelope[aa];\n                        if (!fromSlarmoosBox && aa >= 2) aa++; //2 for pitch\n                        let updatedEnvelopes = false;\n                        let perEnvelopeSpeed = 1;\n                        if (!fromSlarmoosBox || beforeThree) {\n                            updatedEnvelopes = true;\n                            perEnvelopeSpeed = Config.envelopes[aa].speed;\n                            aa = Config.envelopes[aa].type; //update envelopes\n                        } else if (beforeFour && aa >= 3) aa++; //3 for random\n                        let isTremolo2 = false;\n                        if ((fromSlarmoosBox && !beforeThree && beforeFour) || updatedEnvelopes) { //remove tremolo2\n                            if(aa == 9) isTremolo2 = true;\n                            aa = slarURL3toURL4Envelope[aa];\n                        }\n                        const envelope = clamp(0, ((fromSlarmoosBox && !beforeThree || updatedEnvelopes) ? Config.newEnvelopes.length : Config.envelopes.length), aa);\n                        let pitchEnvelopeStart = 0;\n                        let pitchEnvelopeEnd = Config.maxPitch;\n                        let envelopeInverse = false;\n                        perEnvelopeSpeed = (fromSlarmoosBox && !beforeThree) ? Config.newEnvelopes[envelope].speed : perEnvelopeSpeed;\n                        let perEnvelopeLowerBound = 0;\n                        let perEnvelopeUpperBound = 1;\n                        let steps = 2;\n                        let seed = 2;\n                        let waveform = LFOEnvelopeTypes.sine;\n                        //pull out unique envelope setting values first, then general ones\n                        if (fromSlarmoosBox && !beforeFour) {\n                            if (Config.newEnvelopes[envelope].name == \"lfo\") {\n                                waveform = clamp(0, LFOEnvelopeTypes.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                if (waveform == LFOEnvelopeTypes.steppedSaw || waveform == LFOEnvelopeTypes.steppedTri) {\n                                    steps = clamp(1, Config.randomEnvelopeStepsMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                }\n                            } else if (Config.newEnvelopes[envelope].name == \"random\") {\n                                steps = clamp(1, Config.randomEnvelopeStepsMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                seed = clamp(1, Config.randomEnvelopeSeedMax + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                waveform = clamp(0, RandomEnvelopeTypes.length,base64CharCodeToInt[compressed.charCodeAt(charIndex++)]); //we use waveform for the random type as well\n                            }\n                        }\n                        if (fromSlarmoosBox && !beforeThree) {\n                            if (Config.newEnvelopes[envelope].name == \"pitch\") {\n                                if (!instrument.isNoiseInstrument) {\n                                    let pitchEnvelopeCompact = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    pitchEnvelopeStart = clamp(0, Config.maxPitch+1, pitchEnvelopeCompact * 64 + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    pitchEnvelopeCompact = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                                    pitchEnvelopeEnd = clamp(0, Config.maxPitch+1, pitchEnvelopeCompact * 64 + base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                } else {\n                                    pitchEnvelopeStart = clamp(0, Config.drumCount, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                    pitchEnvelopeEnd = clamp(0, Config.drumCount, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                                }\n                            }\n                            let checkboxValues = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            if (fromSlarmoosBox && !beforeFive) {\n                                envelopeDiscrete = (checkboxValues >> 1) == 1 ? true : false;\n                            }\n                            envelopeInverse = (checkboxValues & 1) == 1 ? true : false;\n                            if (Config.newEnvelopes[envelope].name != \"pitch\" && Config.newEnvelopes[envelope].name != \"note size\" && Config.newEnvelopes[envelope].name != \"punch\" && Config.newEnvelopes[envelope].name != \"none\") {\n                                perEnvelopeSpeed = Config.perEnvelopeSpeedIndices[base64CharCodeToInt[compressed.charCodeAt(charIndex++)]];\n                            }\n                            perEnvelopeLowerBound = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 10;\n                            perEnvelopeUpperBound = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] / 10;\n                        }\n                        if (!fromSlarmoosBox || beforeFour) { //update tremolo2\n                            if (isTremolo2) {\n                                waveform = LFOEnvelopeTypes.sine;\n                                if (envelopeInverse) {\n                                    perEnvelopeUpperBound = Math.floor((perEnvelopeUpperBound / 2) * 10) / 10;\n                                    perEnvelopeLowerBound = Math.floor((perEnvelopeLowerBound / 2) * 10) / 10;\n                                } else {\n                                    perEnvelopeUpperBound = Math.floor((0.5 + (perEnvelopeUpperBound - perEnvelopeLowerBound) / 2) * 10) / 10;\n                                    perEnvelopeLowerBound = 0.5;\n                                }\n                            }\n                        }\n\n                        instrument.addEnvelope(target, index, envelope, true, pitchEnvelopeStart, pitchEnvelopeEnd, envelopeInverse, perEnvelopeSpeed, perEnvelopeLowerBound, perEnvelopeUpperBound, steps, seed, waveform, envelopeDiscrete);\n                        if (fromSlarmoosBox && beforeThree && !beforeTwo) {\n                            let pitchEnvelopeCompact = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            instrument.envelopes[i].pitchEnvelopeStart = pitchEnvelopeCompact * 64 + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            pitchEnvelopeCompact = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            instrument.envelopes[i].pitchEnvelopeEnd = pitchEnvelopeCompact * 64 + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                            instrument.envelopes[i].inverse = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] == 1 ? true : false;\n                        }\n                    }\n\n                    let instrumentPitchEnvelopeStart = 0;\n                    let instrumentPitchEnvelopeEnd = Config.maxPitch;\n                    let instrumentEnvelopeInverse = false;\n                    if (fromSlarmoosBox && beforeTwo) {\n                        let pitchEnvelopeCompact = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        instrumentPitchEnvelopeStart = pitchEnvelopeCompact * 64 + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        pitchEnvelopeCompact = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        instrumentPitchEnvelopeEnd = pitchEnvelopeCompact * 64 + base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        instrumentEnvelopeInverse = base64CharCodeToInt[compressed.charCodeAt(charIndex++)] === 1 ? true : false;\n                        for (let i = 0; i < envelopeCount; i++) {\n                            instrument.envelopes[i].pitchEnvelopeStart = instrumentPitchEnvelopeStart;\n                            instrument.envelopes[i].pitchEnvelopeEnd = instrumentPitchEnvelopeEnd;\n                            instrument.envelopes[i].inverse = Config.envelopes[instrument.envelopes[i].envelope].name == \"pitch\" ? instrumentEnvelopeInverse : false;\n                        }\n                    }\n\n                }\n            } break;\n            case SongTagCode.operatorWaves: {\n                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n\n                if (beforeThree && fromGoldBox) {\n                    for (let o = 0; o < Config.operatorCount; o++) {\n                        const pre3To3g = [0, 1, 3, 2, 2, 2, 4, 5];\n                        const old = clamp(0, pre3To3g.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        if (old == 3) {\n                            instrument.operators[o].pulseWidth = 5;\n                        } else if (old == 4) {\n                            instrument.operators[o].pulseWidth = 4;\n                        } else if (old == 5) {\n                            instrument.operators[o].pulseWidth = 6;\n                        }\n                        instrument.operators[o].waveform = pre3To3g[old];\n                    }\n                } else {\n                    for (let o = 0; o < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); o++) {\n                        if (fromJummBox) {\n                            const jummToG = [0, 1, 3, 2, 4, 5];\n                            instrument.operators[o].waveform = jummToG[clamp(0, Config.operatorWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)])];\n                        } else {\n                            instrument.operators[o].waveform = clamp(0, Config.operatorWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                        // Pulse width follows, if it is a pulse width operator wave\n                        if (instrument.operators[o].waveform == 2) {\n                            instrument.operators[o].pulseWidth = clamp(0, Config.pwmOperatorWaves.length, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                        }\n                    }\n                }\n\n            } break;\n            case SongTagCode.spectrum: {\n                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                if (instrument.type == InstrumentType.spectrum) {\n                    const byteCount = Math.ceil(Config.spectrumControlPoints * Config.spectrumControlPointBits / 6)\n                    const bits = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\n                    for (let i = 0; i < Config.spectrumControlPoints; i++) {\n                        instrument.spectrumWave.spectrum[i] = bits.read(Config.spectrumControlPointBits);\n                    }\n                    instrument.spectrumWave.markCustomWaveDirty();\n                    charIndex += byteCount;\n                } else if (instrument.type == InstrumentType.drumset) {\n                    const byteCount = Math.ceil(Config.drumCount * Config.spectrumControlPoints * Config.spectrumControlPointBits / 6)\n                    const bits = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\n                    for (let j = 0; j < Config.drumCount; j++) {\n                        for (let i = 0; i < Config.spectrumControlPoints; i++) {\n                            instrument.drumsetSpectrumWaves[j].spectrum[i] = bits.read(Config.spectrumControlPointBits);\n                        }\n                        instrument.drumsetSpectrumWaves[j].markCustomWaveDirty();\n                    }\n                    charIndex += byteCount;\n                } else {\n                    throw new Error(\"Unhandled instrument type for spectrum song tag code.\");\n                }\n            } break;\n            case SongTagCode.harmonics: {\n                const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                const byteCount = Math.ceil(Config.harmonicsControlPoints * Config.harmonicsControlPointBits / 6);\n                const bits = new BitFieldReader(compressed, charIndex, charIndex + byteCount);\n                for (let i = 0; i < Config.harmonicsControlPoints; i++) {\n                    instrument.harmonicsWave.harmonics[i] = bits.read(Config.harmonicsControlPointBits);\n                }\n                instrument.harmonicsWave.markCustomWaveDirty();\n                charIndex += byteCount;\n            } break;\n            case SongTagCode.aliases: {\n                if ((fromJummBox && beforeFive) || (fromGoldBox && beforeFour)) {\n                    const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                    instrument.aliases = (base64CharCodeToInt[compressed.charCodeAt(charIndex++)]) ? true : false;\n                    if (instrument.aliases) {\n                        let newEffect = instrument.addEffect(EffectType.distortion);\n                        newEffect.distortion = 0;\n                    }\n                } else {\n                    if (fromUltraBox || fromSlarmoosBox) {\n                        const instrument = this.channels[instrumentChannelIterator].instruments[instrumentIndexIterator];\n                        instrument.decimalOffset = clamp(0, 50 + 1, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    }\n                }\n            }\n            break;\n            case SongTagCode.bars: {\n                let subStringLength: number;\n                if (beforeThree && fromBeepBox) {\n                    const channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    const barCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    subStringLength = Math.ceil(barCount * 0.5);\n                    const bits = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\n                    for (let i = 0; i < barCount; i++) {\n                        this.channels[channelIndex].bars[i] = bits.read(3) + 1;\n                    }\n                } else if (beforeFive && fromBeepBox) {\n                    let neededBits = 0;\n                    while ((1 << neededBits) < this.patternsPerChannel) neededBits++;\n                    subStringLength = Math.ceil(this.getChannelCount() * this.barCount * neededBits / 6);\n                    const bits = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\n                    for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                        for (let i = 0; i < this.barCount; i++) {\n                            this.channels[channelIndex].bars[i] = bits.read(neededBits) + 1;\n                        }\n                    }\n                } else {\n                    let neededBits = 0;\n                    while ((1 << neededBits) < this.patternsPerChannel + 1) neededBits++;\n                    subStringLength = Math.ceil(this.getChannelCount() * this.barCount * neededBits / 6);\n                    const bits = new BitFieldReader(compressed, charIndex, charIndex + subStringLength);\n                    for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n                        for (let i = 0; i < this.barCount; i++) {\n                            this.channels[channelIndex].bars[i] = bits.read(neededBits);\n                        }\n                    }\n                }\n                charIndex += subStringLength;\n            } break;\n            case SongTagCode.patterns: {\n                let bitStringLength = 0;\n                let channelIndex: number;\n                let largerChords = !((beforeFour && fromJummBox) || fromBeepBox);\n                let recentPitchBitLength = (largerChords ? 4 : 3);\n                let recentPitchLength = (largerChords ? 16 : 8);\n                if (beforeThree && fromBeepBox) {\n                    channelIndex = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\n                    // The old format used the next character to represent the number of patterns in the channel, which is usually eight, the default.\n                    charIndex++; //let patternCount = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n\n                    bitStringLength = base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                    bitStringLength = bitStringLength << 6;\n                    bitStringLength += base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                } else {\n                    channelIndex = 0;\n                    let bitStringLengthLength = validateRange(1, 4, base64CharCodeToInt[compressed.charCodeAt(charIndex++)]);\n                    while (bitStringLengthLength > 0) {\n                        bitStringLength = bitStringLength << 6;\n                        bitStringLength += base64CharCodeToInt[compressed.charCodeAt(charIndex++)];\n                        bitStringLengthLength--;\n                    }\n                }\n\n                const bits = new BitFieldReader(compressed, charIndex, charIndex + bitStringLength);\n                charIndex += bitStringLength;\n\n                const bitsPerNoteSize = Song.getNeededBits(Config.noteSizeMax);\n                let songReverbChannel = -1;\n                let songReverbInstrument = -1;\n                let songReverbIndex = -1;\n\n                // @TODO: Include GoldBox here.\n                const shouldCorrectTempoMods = fromJummBox;\n                const jummboxTempoMin = 30;\n\n                while (true) {\n                    const channel = this.channels[channelIndex];\n                    const isNoiseChannel = this.getChannelIsNoise(channelIndex);\n                    const isModChannel = this.getChannelIsMod(channelIndex);\n\n                    const maxInstrumentsPerPattern = this.getMaxInstrumentsPerPattern(channelIndex);\n                    const neededInstrumentCountBits = Song.getNeededBits(maxInstrumentsPerPattern - Config.instrumentCountMin);\n\n                    const neededInstrumentIndexBits = Song.getNeededBits(channel.instruments.length - 1);\n\n                    // Some info about modulator settings immediately follows in mod channels.\n                    if (isModChannel) {\n                        let jumfive = (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)\n\n                        // 2 more indices for 'all' and 'active'\n                        const neededModInstrumentIndexBits = (jumfive) ? neededInstrumentIndexBits : Song.getNeededBits(this.getMaxInstrumentsPerChannel() + 2);\n\n                        for (let instrumentIndex = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n\n                            let instrument = channel.instruments[instrumentIndex];\n\n                            for (let mod = 0; mod < Config.modCount; mod++) {\n                                // Still using legacy \"mod status\" format, but doing it manually as it's only used in the URL now.\n                                // 0 - For pitch/noise\n                                // 1 - (used to be For noise, not needed)\n                                // 2 - For song\n                                // 3 - None\n                                let status = bits.read(2);\n\n                                switch (status) {\n                                    case 0: // Pitch\n                                        let modChannelLength = bits.read(8);\n                                        for (let i = 0; i < modChannelLength; i++) instrument.modChannels[mod][i] = clamp(0, this.pitchChannelCount + this.noiseChannelCount + 1, bits.read(8));\n                                        let modInstrumentLength = bits.read(8);\n                                        for (let i = 0; i < modInstrumentLength; i++) instrument.modInstruments[mod][i] = clamp(0, this.channels[instrument.modChannels[mod][i]].instruments.length + 2, bits.read(neededModInstrumentIndexBits));\n                                        break;\n                                    case 1: // Noise\n                                        // Getting a status of 1 means this is legacy mod info. Need to add pitch channel count, as it used to just store noise channel index and not overall channel index\n                                        instrument.modChannels[mod][0] = this.pitchChannelCount + clamp(0, this.noiseChannelCount + 1, bits.read(8));\n                                        instrument.modInstruments[mod][0] = clamp(0, this.channels[instrument.modChannels[mod][0]].instruments.length + 2, bits.read(neededInstrumentIndexBits));\n                                        break;\n                                    case 2: // For song\n                                        instrument.modChannels[mod][0] = -1;\n                                        break;\n                                    case 3: // None\n                                        instrument.modChannels[mod][0] = -2;\n                                        break;\n                                }\n\n                                // Mod setting is only used if the status isn't \"none\".\n                                if (status != 3) {\n                                    instrument.modulators[mod] = bits.read(6);\n                                }\n\n                                if (!jumfive && (Config.modulators[instrument.modulators[mod]].name == \"post eq\" || Config.modulators[instrument.modulators[mod]].name == \"pre eq\" || Config.modulators[instrument.modulators[mod]].name == \"song eq\")) {\n                                    instrument.modFilterTypes[mod] = bits.read(6);\n                                }\n\n                                if (Config.modulators[instrument.modulators[mod]].name == \"individual envelope speed\" ||\n                                    Config.modulators[instrument.modulators[mod]].name == \"reset envelope\" ||\n                                    Config.modulators[instrument.modulators[mod]].name == \"individual envelope lower bound\" ||\n                                    Config.modulators[instrument.modulators[mod]].name == \"individual envelope upper bound\"\n                                ) {\n                                    instrument.modEnvelopeNumbers[mod] = bits.read(6);\n                                }\n\n                                if (jumfive && instrument.modChannels[mod][0] >= 0) {\n                                    let forNoteFilter = this.channels[instrument.modChannels[mod][0]].instruments[instrument.modInstruments[mod][0]].effectsIncludeType(EffectType.eqFilter);\n\n                                    // For legacy filter cut/peak, need to denote since scaling must be applied\n                                    if (instrument.modulators[mod] == 7) {\n                                        // Legacy filter cut index\n                                        // Check if there is no filter dot on prospective filter. If so, add a low pass at max possible freq.\n\n                                        if (forNoteFilter) {\n                                            instrument.modulators[mod] = Config.modulators.dictionary[\"note filt cut\"].index;\n                                        }\n                                        else {\n                                            instrument.modulators[mod] = Config.modulators.dictionary[\"eq filt cut\"].index;\n                                        }\n\n                                        instrument.modFilterTypes[mod] = 1; // Dot 1 X\n\n                                    }\n                                    else if (instrument.modulators[mod] == 8) {\n                                        // Legacy filter peak index\n                                        if (forNoteFilter) {\n                                            instrument.modulators[mod] = Config.modulators.dictionary[\"note filt peak\"].index;\n                                        }\n                                        else {\n                                            instrument.modulators[mod] = Config.modulators.dictionary[\"eq filt peak\"].index;\n                                        }\n\n                                        instrument.modFilterTypes[mod] = 2; // Dot 1 Y\n                                    }\n                                }\n                                else if (jumfive) {\n                                    // Check for song reverb mod, which must be handled differently now that it is a multiplier\n                                    if (instrument.modulators[mod] == Config.modulators.dictionary[\"song reverb\"].index) {\n                                        songReverbChannel = channelIndex;\n                                        songReverbInstrument = instrumentIndex;\n                                        songReverbIndex = mod;\n                                    }\n                                }\n\n                                // Based on setting, enable some effects for the modulated instrument. This isn't always set, say if the instrument's pan was right in the center.\n                                // Only used on import of old songs, because sometimes an invalid effect can be set in a mod in the new version that is actually unused. In that case,\n                                // keeping the mod invalid is better since it preserves the state.\n                                if (jumfive && Config.modulators[instrument.modulators[mod]].associatedEffect != EffectType.length) {\n                                    this.channels[instrument.modChannels[mod][0]].instruments[instrument.modInstruments[mod][0]].addEffect(Config.modulators[instrument.modulators[mod]].associatedEffect);\n                                }\n                            }\n                        }\n                    }\n\n                    // Scalar applied to detune mods since its granularity was upped. Could be repurposed later if any other granularity changes occur.\n                    const detuneScaleNotes: number[][] = [];\n                    for (let j = 0; j < channel.instruments.length; j++) {\n                        detuneScaleNotes[j] = [];\n                        for (let i = 0; i < Config.modCount; i++) {\n                            detuneScaleNotes[j][Config.modCount - 1 - i] = 1 + 3 * +(((beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) && isModChannel && (channel.instruments[j].modulators[i] == Config.modulators.dictionary[\"detune\"].index));\n                        }\n                    }\n                    const octaveOffset = (isNoiseChannel || isModChannel) ? 0 : channel.octave * 12;\n                    let lastPitch = ((isNoiseChannel || isModChannel) ? 4 : octaveOffset);\n                    const recentPitches: number[] = isModChannel ? [0, 1, 2, 3, 4, 5] : (isNoiseChannel ? [4, 6, 7, 2, 3, 8, 0, 10] : [0, 7, 12, 19, 24, -5, -12]);\n                    const recentShapes: any[] = [];\n                    for (let i = 0; i < recentPitches.length; i++) {\n                        recentPitches[i] += octaveOffset;\n                    }\n                    for (let i = 0; i < this.patternsPerChannel; i++) {\n                        const newPattern = channel.patterns[i];\n\n                        if ((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox)) {\n                            newPattern.instruments[0] = validateRange(0, channel.instruments.length - 1, bits.read(neededInstrumentIndexBits));\n                            newPattern.instruments.length = 1;\n                        } else {\n                            if (this.patternInstruments) {\n                                const instrumentCount = validateRange(Config.instrumentCountMin, maxInstrumentsPerPattern, bits.read(neededInstrumentCountBits) + Config.instrumentCountMin);\n                                for (let j = 0; j < instrumentCount; j++) {\n                                    newPattern.instruments[j] = validateRange(0, channel.instruments.length - 1 + +(isModChannel) * 2, bits.read(neededInstrumentIndexBits));\n                                }\n                                newPattern.instruments.length = instrumentCount;\n                            } else {\n                                newPattern.instruments[0] = 0;\n                                newPattern.instruments.length = Config.instrumentCountMin;\n                            }\n                        }\n\n                        if (!(fromBeepBox && beforeThree) && bits.read(1) == 0) {\n                            newPattern.notes.length = 0;\n                            continue;\n                        }\n\n                        let curPart = 0;\n                        const newNotes: Note[] = newPattern.notes;\n                        let noteCount = 0;\n                        // Due to arbitrary note positioning, mod channels don't end the count until curPart actually exceeds the max\n                        while (curPart < this.beatsPerBar * Config.partsPerBeat + (+isModChannel)) {\n\n                            const useOldShape = bits.read(1) == 1;\n                            let newNote = false;\n                            let shapeIndex = 0;\n                            if (useOldShape) {\n                                shapeIndex = validateRange(0, recentShapes.length - 1, bits.readLongTail(0, 0));\n                            } else {\n                                newNote = bits.read(1) == 1;\n                            }\n\n                            if (!useOldShape && !newNote) {\n                                // For mod channels, check if you need to move backward too (notes can appear in any order and offset from each other).\n                                if (isModChannel) {\n                                    const isBackwards = bits.read(1) == 1;\n                                    const restLength = bits.readPartDuration();\n                                    if (isBackwards) {\n                                        curPart -= restLength;\n                                    }\n                                    else {\n                                        curPart += restLength;\n                                    }\n                                } else {\n                                    const restLength = (beforeSeven && fromBeepBox)\n                                    ? bits.readLegacyPartDuration() * Config.partsPerBeat / Config.rhythms[this.rhythm].stepsPerBeat\n                                    : bits.readPartDuration();\n                                    curPart += restLength;\n\n                                }\n                            } else {\n                                let shape: any;\n                                if (useOldShape) {\n                                    shape = recentShapes[shapeIndex];\n                                    recentShapes.splice(shapeIndex, 1);\n                                } else {\n                                    shape = {};\n\n                                    if (!largerChords) {\n                                        // Old format: X 1's followed by a 0 => X+1 pitches, up to 4\n                                        shape.pitchCount = 1;\n                                        while (shape.pitchCount < 4 && bits.read(1) == 1) shape.pitchCount++;\n                                    }\n                                    else {\n                                        // New format is:\n                                        //      0: 1 pitch\n                                        // 1[XXX]: 3 bits of binary signifying 2+ pitches\n                                        if (bits.read(1) == 1) {\n                                            shape.pitchCount = bits.read(3) + 2;\n                                        }\n                                        else {\n                                            shape.pitchCount = 1;\n                                        }\n                                    }\n\n                                    if (fromTheepBox) {\n                                        if (bits.read(1) == 1) {\n                                            shape.startOffset = bits.read(31);\n                                        }\n                                    } else {\n                                        shape.startOffset = 0;\n                                    }\n\n                                    shape.pinCount = bits.readPinCount();\n                                    if (fromBeepBox) {\n                                        shape.initialSize = bits.read(2) * 2;\n                                    } else if (!isModChannel) {\n                                        shape.initialSize = bits.read(bitsPerNoteSize);\n                                    } else {\n                                        shape.initialSize = bits.read(11);\n                                    }\n\n                                    shape.pins = [];\n                                    shape.length = 0;\n                                    shape.bendCount = 0;\n                                    for (let j = 0; j < shape.pinCount; j++) {\n                                        let pinObj: any = {};\n                                        pinObj.pitchBend = bits.read(1) == 1;\n                                        if (pinObj.pitchBend) shape.bendCount++;\n                                        shape.length += (beforeSeven && fromBeepBox)\n                                        ? bits.readLegacyPartDuration() * Config.partsPerBeat / Config.rhythms[this.rhythm].stepsPerBeat\n                                        : bits.readPartDuration();\n                                        pinObj.time = shape.length;\n                                        if (fromBeepBox) {\n                                            pinObj.size = bits.read(2) * 2;\n                                        } else if (!isModChannel) {\n                                            pinObj.size = bits.read(bitsPerNoteSize);\n                                        }\n                                        else {\n                                            pinObj.size = bits.read(11);\n                                        }\n                                        shape.pins.push(pinObj);\n                                    }\n                                }\n                                recentShapes.unshift(shape);\n                                if (recentShapes.length > 10) recentShapes.pop(); // TODO: Use Deque?\n\n                                let note: Note;\n                                if (newNotes.length <= noteCount) {\n                                    note = new Note(0, curPart, curPart + shape.length, shape.initialSize, false, shape.startOffset);\n                                    newNotes[noteCount++] = note;\n                                } else {\n                                    note = newNotes[noteCount++];\n                                    note.start = curPart;\n                                    note.end = curPart + shape.length;\n                                    note.pins[0].size = shape.initialSize;\n                                }\n\n                                let pitch: number;\n                                let pitchCount = 0;\n                                const pitchBends: number[] = []; // TODO: allocate this array only once! keep separate length and iterator index. Use Deque?\n                                for (let j = 0; j < shape.pitchCount + shape.bendCount; j++) {\n                                    const useOldPitch = bits.read(1) == 1;\n                                    if (!useOldPitch) {\n                                        const interval = bits.readPitchInterval();\n                                        pitch = lastPitch;\n                                        let intervalIter = interval;\n                                        while (intervalIter > 0) {\n                                            pitch++;\n                                            while (recentPitches.indexOf(pitch) != -1) pitch++;\n                                            intervalIter--;\n                                        }\n                                        while (intervalIter < 0) {\n                                            pitch--;\n                                            while (recentPitches.indexOf(pitch) != -1) pitch--;\n                                            intervalIter++;\n                                        }\n                                    } else {\n                                        const pitchIndex = validateRange(0, recentPitches.length - 1, bits.read(recentPitchBitLength));\n                                        pitch = recentPitches[pitchIndex];\n                                        recentPitches.splice(pitchIndex, 1);\n                                    }\n\n                                    recentPitches.unshift(pitch);\n                                    if (recentPitches.length > recentPitchLength) recentPitches.pop();\n\n                                    if (j < shape.pitchCount) {\n                                        note.pitches[pitchCount++] = pitch;\n                                    } else {\n                                        pitchBends.push(pitch);\n                                    }\n\n                                    if (j == shape.pitchCount - 1) {\n                                        lastPitch = note.pitches[0];\n                                    } else {\n                                        lastPitch = pitch;\n                                    }\n                                }\n                                note.pitches.length = pitchCount;\n                                pitchBends.unshift(note.pitches[0]); // TODO: Use Deque?\n                                const noteIsForTempoMod = isModChannel && channel.instruments[newPattern.instruments[0]].modulators[Config.modCount - 1 - note.pitches[0]] === Config.modulators.dictionary[\"tempo\"].index;\n                                let tempoOffset = 0;\n                                if (shouldCorrectTempoMods && noteIsForTempoMod) {\n                                    tempoOffset = jummboxTempoMin - Config.tempoMin; // convertRealFactor will add back Config.tempoMin as necessary\n                                }\n                                if (isModChannel) {\n                                    note.pins[0].size += tempoOffset;\n                                    note.pins[0].size *= detuneScaleNotes[newPattern.instruments[0]][note.pitches[0]];\n                                }\n                                let pinCount = 1;\n                                for (const pinObj of shape.pins) {\n                                    if (pinObj.pitchBend) pitchBends.shift();\n\n                                    const interval = pitchBends[0] - note.pitches[0];\n                                    if (note.pins.length <= pinCount) {\n                                        if (isModChannel) {\n                                            note.pins[pinCount++] = makeNotePin(interval, pinObj.time, pinObj.size * detuneScaleNotes[newPattern.instruments[0]][note.pitches[0]] + tempoOffset);\n                                        } else {\n                                            note.pins[pinCount++] = makeNotePin(interval, pinObj.time, pinObj.size);\n                                        }\n                                    } else {\n                                        const pin = note.pins[pinCount++];\n                                        pin.interval = interval;\n                                        pin.time = pinObj.time;\n                                        if (isModChannel) {\n                                            pin.size = pinObj.size * detuneScaleNotes[newPattern.instruments[0]][note.pitches[0]] + tempoOffset;\n                                        } else {\n                                            pin.size = pinObj.size;\n                                        }\n                                    }\n                                }\n                                note.pins.length = pinCount;\n\n                                if (note.start == 0) {\n                                    if (!((beforeNine && fromBeepBox) || (beforeFive && fromJummBox) || (beforeFour && fromGoldBox))) {\n                                        note.continuesLastPattern = (bits.read(1) == 1);\n                                    } else {\n                                        if ((beforeFour && !fromUltraBox && !fromSlarmoosBox) || fromBeepBox) {\n                                            note.continuesLastPattern = false;\n                                        } else {\n                                            note.continuesLastPattern = channel.instruments[newPattern.instruments[0]].legacyTieOver;\n                                        }\n                                    }\n                                }\n\n                                curPart = validateRange(0, this.beatsPerBar * Config.partsPerBeat, note.end);\n                            }\n                        }\n                        newNotes.length = noteCount;\n                    }\n\n                    if (beforeThree && fromBeepBox) {\n                        break;\n                    } else {\n                        channelIndex++;\n                        if (channelIndex >= this.getChannelCount()) break;\n                    }\n                } // while (true)\n\n                // Correction for old JB songs that had song reverb mods. Change all instruments using reverb to max reverb\n                if (((fromJummBox && beforeFive) || (beforeFour && fromGoldBox)) && songReverbIndex >= 0) {\n                    for (let channelIndex = 0; channelIndex < this.channels.length; channelIndex++) {\n                        for (let instrumentIndex = 0; instrumentIndex < this.channels[channelIndex].instruments.length; instrumentIndex++) {\n                            const instrument = this.channels[channelIndex].instruments[instrumentIndex];\n                            if (instrument.effectsIncludeType(EffectType.reverb)) {\n                                //instrument.reverb = Config.reverbRange - 1;\n                            }\n                            // Set song reverb via mod to the old setting at song start.\n                            if (songReverbChannel == channelIndex && songReverbInstrument == instrumentIndex) {\n                                const patternIndex = this.channels[channelIndex].bars[0];\n                                if (patternIndex > 0) {\n                                    // Doesn't work if 1st pattern isn't using the right ins for song reverb...\n                                    // Add note to start of pattern\n                                    const pattern = this.channels[channelIndex].patterns[patternIndex - 1];\n                                    let lowestPart = 6;\n                                    for (const note of pattern.notes) {\n                                        if (note.pitches[0] == Config.modCount - 1 - songReverbIndex) {\n                                            lowestPart = Math.min(lowestPart, note.start);\n                                        }\n                                    }\n\n                                    if (lowestPart > 0) {\n                                        pattern.notes.push(new Note(Config.modCount - 1 - songReverbIndex, 0, lowestPart, legacyGlobalReverb));\n                                    }\n                                }\n                                else {\n                                    // Add pattern\n                                    if (this.channels[channelIndex].patterns.length < Config.barCountMax) {\n                                        const pattern = new Pattern();\n                                        this.channels[channelIndex].patterns.push(pattern);\n                                        this.channels[channelIndex].bars[0] = this.channels[channelIndex].patterns.length;\n                                        if (this.channels[channelIndex].patterns.length > this.patternsPerChannel) {\n                                            for (let chn = 0; chn < this.channels.length; chn++) {\n                                                if (this.channels[chn].patterns.length <= this.patternsPerChannel) {\n                                                    this.channels[chn].patterns.push(new Pattern());\n                                                }\n                                            }\n                                            this.patternsPerChannel++;\n                                        }\n                                        pattern.instruments.length = 1;\n                                        pattern.instruments[0] = songReverbInstrument;\n                                        pattern.notes.length = 0;\n                                        pattern.notes.push(new Note(Config.modCount - 1 - songReverbIndex, 0, 6, legacyGlobalReverb));\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            } break;\n            default: {\n                throw new Error(\"Unrecognized song tag code \" + String.fromCharCode(command) + \" at index \" + (charIndex - 1) + \" \" + compressed.substring(/*charIndex - 2*/0, charIndex));\n            } break;\n        }\n\n        if (Config.willReloadForCustomSamples) {\n            window.location.hash = this.toBase64String();\n            setTimeout(() => { location.reload(); }, 50);\n        }\n    }\n\n    private static _isProperUrl(string: string): boolean {\n        try {\n            if (OFFLINE) {\n                return Boolean(string);\n            } else {\n                return Boolean(new URL(string));\n            }\n        }\n        catch (x) {\n            return false;\n        }\n    }\n\n    // @TODO: Share more of this code with AddSamplesPrompt.\n    private static _parseAndConfigureCustomSample(url: string, customSampleUrls: string[], customSamplePresets: Preset[], sampleLoadingState: SampleLoadingState, parseOldSyntax: boolean): boolean {\n        const defaultIndex = 0;\n        const defaultIntegratedSamplesL: Float32Array = Config.chipWaves[defaultIndex].samples;\n        const defaultIntegratedSamplesR: Float32Array = Config.chipWaves[defaultIndex].samplesR || Config.chipWaves[defaultIndex].samples;\n        const defaultSamplesL: Float32Array = Config.rawRawChipWaves[defaultIndex].samples;\n        const defaultSamplesR: Float32Array = Config.rawRawChipWaves[defaultIndex].samplesR || Config.chipWaves[defaultIndex].samples;\n\n        const customSampleUrlIndex = customSampleUrls.length;\n        customSampleUrls.push(url);\n        // This depends on `Config.chipWaves` being the same\n        // length as `Config.rawRawChipWaves`.\n        const chipWaveIndex = Config.chipWaves.length;\n\n        let urlSliced = url;\n\n        let customSampleRate = 44100;\n        let isCustomPercussive = false;\n        let customRootKey = 60;\n        let presetIsUsingAdvancedLoopControls = false;\n        let presetChipWaveLoopStart: number | null = null;\n        let presetChipWaveLoopEnd: number | null = null;\n        let presetChipWaveStartOffset: number | null = null;\n        let presetChipWaveLoopMode: number | null = null;\n        let presetChipWavePlayBackwards = false;\n        let presetChipWaveInStereo = false;\n\n        let parsedSampleOptions = false;\n        let optionsStartIndex = url.indexOf(\"!\");\n        let optionsEndIndex = -1;\n        if (optionsStartIndex === 0) {\n            optionsEndIndex = url.indexOf(\"!\", optionsStartIndex + 1);\n            if (optionsEndIndex !== -1) {\n                const rawOptions: string[] = url.slice(optionsStartIndex + 1, optionsEndIndex).split(\",\");\n                for (const rawOption of rawOptions) {\n                    const optionCode = rawOption.charAt(0);\n                    const optionData = rawOption.slice(1, rawOption.length);\n                    if (optionCode === \"s\") {\n                        customSampleRate = clamp(8000, 96000 + 1, parseFloatWithDefault(optionData, 44100));\n                    } else if (optionCode === \"r\") {\n                        customRootKey = parseFloatWithDefault(optionData, 60);\n                    } else if (optionCode === \"p\") {\n                        isCustomPercussive = true;\n                    } else if (optionCode === \"a\") {\n                        presetChipWaveLoopStart = parseIntWithDefault(optionData, null);\n                        if (presetChipWaveLoopStart != null) {\n                            presetIsUsingAdvancedLoopControls = true;\n                        }\n                    } else if (optionCode === \"b\") {\n                        presetChipWaveLoopEnd = parseIntWithDefault(optionData, null);\n                        if (presetChipWaveLoopEnd != null) {\n                            presetIsUsingAdvancedLoopControls = true;\n                        }\n                    } else if (optionCode === \"c\") {\n                        presetChipWaveStartOffset = parseIntWithDefault(optionData, null);\n                        if (presetChipWaveStartOffset != null) {\n                            presetIsUsingAdvancedLoopControls = true;\n                        }\n                    } else if (optionCode === \"d\") {\n                        presetChipWaveLoopMode = parseIntWithDefault(optionData, null);\n                        if (presetChipWaveLoopMode != null) {\n                            // @TODO: Error-prone. This should be automatically\n                            // derived from the list of available loop modes.\n                            presetChipWaveLoopMode = clamp(0, 3 + 1, presetChipWaveLoopMode);\n                            presetIsUsingAdvancedLoopControls = true;\n                        }\n                    } else if (optionCode === \"e\") {\n                        presetChipWavePlayBackwards = true;\n                        presetIsUsingAdvancedLoopControls = true;\n                    } else if (optionCode === \"f\") {\n                        presetChipWaveInStereo = true;\n                        presetIsUsingAdvancedLoopControls = true;\n                    }\n                }\n                urlSliced = url.slice(optionsEndIndex + 1, url.length);\n                parsedSampleOptions = true;\n            }\n        }\n\n        let parsedUrl: URL | string | null = null;\n        if (Song._isProperUrl(urlSliced)) {\n            if (OFFLINE) {\n                parsedUrl = urlSliced;\n            } else {\n                parsedUrl = new URL(urlSliced);\n            }\n        }\n        else {\n            alert(url + \" is not a valid url\");\n            return false;\n        }\n\n        if (parseOldSyntax) {\n            if (!parsedSampleOptions && parsedUrl != null) {\n                if (url.indexOf(\"@\") != -1) {\n                    //urlSliced = url.slice(url.indexOf(\"@\"), url.indexOf(\"@\"));\n                    urlSliced = url.replaceAll(\"@\", \"\")\n                    if (OFFLINE) {\n                        parsedUrl = urlSliced;\n                    } else {\n                        parsedUrl = new URL(urlSliced);\n                    }\n                    isCustomPercussive = true;\n                }\n\n                function sliceForSampleRate() {\n                    urlSliced = url.slice(0, url.indexOf(\",\"));\n                    if (OFFLINE) {\n                        parsedUrl = urlSliced;\n                    } else {\n                        parsedUrl = new URL(urlSliced);\n                    }\n                    customSampleRate = clamp(8000, 96000 + 1, parseFloatWithDefault(url.slice(url.indexOf(\",\") + 1), 44100));\n                    //should this be parseFloat or parseInt?\n                    //ig floats let you do decimals and such, but idk where that would be useful\n                }\n\n                function sliceForRootKey() {\n                    urlSliced = url.slice(0, url.indexOf(\"!\"));\n                    if (OFFLINE) {\n                        parsedUrl = urlSliced;\n                    } else {\n                        parsedUrl = new URL(urlSliced);\n                    }\n                    customRootKey = parseFloatWithDefault(url.slice(url.indexOf(\"!\") + 1), 60);\n                }\n\n\n                if (url.indexOf(\",\") != -1 && url.indexOf(\"!\") != -1) {\n                    if (url.indexOf(\",\") < url.indexOf(\"!\")) {\n                        sliceForRootKey();\n                        sliceForSampleRate();\n                    }\n                    else {\n                        sliceForSampleRate();\n                        sliceForRootKey();\n                    }\n                }\n                else {\n                    if (url.indexOf(\",\") != -1) {\n                        sliceForSampleRate();\n                    }\n                    if (url.indexOf(\"!\") != -1) {\n                        sliceForRootKey();\n                    }\n                }\n            }\n        }\n\n        if (parsedUrl != null) {\n            // Store in the new format.\n            let urlWithNamedOptions = urlSliced;\n            const namedOptions: string[] = [];\n            if (customSampleRate !== 44100) namedOptions.push(\"s\" + customSampleRate);\n            if (customRootKey !== 60) namedOptions.push(\"r\" + customRootKey);\n            if (isCustomPercussive) namedOptions.push(\"p\");\n            if (presetIsUsingAdvancedLoopControls) {\n                if (presetChipWaveLoopStart != null) namedOptions.push(\"a\" + presetChipWaveLoopStart);\n                if (presetChipWaveLoopEnd != null) namedOptions.push(\"b\" + presetChipWaveLoopEnd);\n                if (presetChipWaveStartOffset != null) namedOptions.push(\"c\" + presetChipWaveStartOffset);\n                if (presetChipWaveLoopMode != null) namedOptions.push(\"d\" + presetChipWaveLoopMode);\n                if (presetChipWavePlayBackwards) namedOptions.push(\"e\");\n                if (presetChipWaveInStereo) namedOptions.push(\"f\");\n            }\n            if (namedOptions.length > 0) {\n                urlWithNamedOptions = \"!\" + namedOptions.join(\",\") + \"!\" + urlSliced;\n            }\n            customSampleUrls[customSampleUrlIndex] = urlWithNamedOptions;\n\n            // @TODO: Could also remove known extensions, but it\n            // would probably be much better to be able to specify\n            // a custom name.\n            // @TODO: If for whatever inexplicable reason someone\n            // uses an url like `https://example.com`, this will\n            // result in an empty name here.\n            let name: string;\n            if (OFFLINE) {\n                //@ts-ignore\n                name = decodeURIComponent(parsedUrl.replace(/^([^\\/]*\\/)+/, \"\"));\n            } else {\n                //@ts-ignore\n                name = decodeURIComponent(parsedUrl.pathname.replace(/^([^\\/]*\\/)+/, \"\"));\n            }\n            // @TODO: What to do about samples with the same name?\n            // The problem with using the url is that the name is\n            // user-facing and long names break assumptions of the\n            // UI.\n            const expression = 1.0;\n            Config.chipWaves[chipWaveIndex] = {\n                name: name,\n                expression: expression,\n                isCustomSampled: true,\n                isPercussion: isCustomPercussive,\n                rootKey: customRootKey,\n                sampleRate: customSampleRate,\n                samples: defaultIntegratedSamplesL,\n                samplesR: defaultIntegratedSamplesR,\n                index: chipWaveIndex,\n            };\n            Config.rawChipWaves[chipWaveIndex] = {\n                name: name,\n                expression: expression,\n                isCustomSampled: true,\n                isPercussion: isCustomPercussive,\n                rootKey: customRootKey,\n                sampleRate: customSampleRate,\n                samples: defaultSamplesL,\n                samplesR: defaultSamplesR,\n                index: chipWaveIndex,\n            };\n            Config.rawRawChipWaves[chipWaveIndex] = {\n                name: name,\n                expression: expression,\n                isCustomSampled: true,\n                isPercussion: isCustomPercussive,\n                rootKey: customRootKey,\n                sampleRate: customSampleRate,\n                samples: defaultSamplesL,\n                samplesR: defaultSamplesR,\n                index: chipWaveIndex,\n            };\n            const customSamplePresetSettings: Dictionary<any> = {\n                \"type\": \"chip\",\n                \"eqFilter\": [],\n                \"effects\": [],\n                \"mdeffects\": [],\n                \"transition\": \"normal\",\n                \"fadeInSeconds\": 0,\n                \"fadeOutTicks\": -3,\n                \"chord\": \"harmony\",\n                \"wave\": name,\n                \"unison\": \"none\",\n                \"envelopes\": [],\n                \"chipWaveInStereo\": true,\n            };\n            if (presetIsUsingAdvancedLoopControls) {\n                customSamplePresetSettings[\"isUsingAdvancedLoopControls\"] = true;\n                customSamplePresetSettings[\"chipWaveLoopStart\"] = presetChipWaveLoopStart != null ? presetChipWaveLoopStart : 0;\n                customSamplePresetSettings[\"chipWaveLoopEnd\"] = presetChipWaveLoopEnd != null ? presetChipWaveLoopEnd : 2;\n                customSamplePresetSettings[\"chipWaveLoopMode\"] = presetChipWaveLoopMode != null ? presetChipWaveLoopMode : 0;\n                customSamplePresetSettings[\"chipWavePlayBackwards\"] = presetChipWavePlayBackwards;\n                customSamplePresetSettings[\"chipWaveStartOffset\"] = presetChipWaveStartOffset != null ? presetChipWaveStartOffset : 0;\n            }\n            const customSamplePreset = {\n                index: 0, // This should be overwritten by toNameMap, in our caller.\n                name: name,\n                midiProgram: 80,\n                settings: customSamplePresetSettings,\n            };\n            customSamplePresets.push(customSamplePreset);\n            if (!Config.willReloadForCustomSamples) {\n                const rawLoopOptions = {\n                    \"isUsingAdvancedLoopControls\": presetIsUsingAdvancedLoopControls,\n                    \"chipWaveLoopStart\": presetChipWaveLoopStart,\n                    \"chipWaveLoopEnd\": presetChipWaveLoopEnd,\n                    \"chipWaveLoopMode\": presetChipWaveLoopMode,\n                    \"chipWavePlayBackwards\": presetChipWavePlayBackwards,\n                    \"chipWaveStartOffset\": presetChipWaveStartOffset,\n                };\n                startLoadingSample(urlSliced, chipWaveIndex, customSamplePresetSettings, rawLoopOptions, customSampleRate);\n            }\n            sampleLoadingState.statusTable[chipWaveIndex] = SampleLoadingStatus.loading;\n            sampleLoadingState.urlTable[chipWaveIndex] = urlSliced;\n            sampleLoadingState.totalSamples++;\n        }\n\n        return true;\n    }\n\n    private static _restoreChipWaveListToDefault(): void {\n        Config.chipWaves = toNameMap(Config.chipWaves.slice(0, Config.firstIndexForSamplesInChipWaveList));\n        Config.rawChipWaves = toNameMap(Config.rawChipWaves.slice(0, Config.firstIndexForSamplesInChipWaveList));\n        Config.rawRawChipWaves = toNameMap(Config.rawRawChipWaves.slice(0, Config.firstIndexForSamplesInChipWaveList));\n    }\n\n    private static _clearSamples(): void {\n        EditorConfig.customSamples = null;\n\n        Song._restoreChipWaveListToDefault();\n\n        sampleLoadingState.statusTable = {};\n        sampleLoadingState.urlTable = {};\n        sampleLoadingState.totalSamples = 0;\n        sampleLoadingState.samplesLoaded = 0;\n        sampleLoadEvents.dispatchEvent(new SampleLoadedEvent(\n            sampleLoadingState.totalSamples,\n            sampleLoadingState.samplesLoaded\n        ));\n    }\n\n    toJsonObject(enableIntro = true, loopCount = 1, enableOutro = true): Object {\n        const channelArray: Object[] = [];\n        for (let channelIndex = 0; channelIndex < this.getChannelCount(); channelIndex++) {\n            const channel = this.channels[channelIndex];\n            const instrumentArray: Object[] = [];\n            const isNoiseChannel = this.getChannelIsNoise(channelIndex);\n            const isModChannel = this.getChannelIsMod(channelIndex);\n            for (const instrument of channel.instruments) {\n                instrumentArray.push(instrument.toJsonObject());\n            }\n\n            const patternArray: Object[] = [];\n            for (const pattern of channel.patterns) {\n                patternArray.push(pattern.toJsonObject(this, channel, isModChannel));\n            }\n\n            const sequenceArray: number[] = [];\n            if (enableIntro) for (let i = 0; i < this.loopStart; i++) {\n                sequenceArray.push(channel.bars[i]);\n            }\n            for (let l = 0; l < loopCount; l++) for (let i = this.loopStart; i < this.loopStart + this.loopLength; i++) {\n                sequenceArray.push(channel.bars[i]);\n            }\n            if (enableOutro) for (let i = this.loopStart + this.loopLength; i < this.barCount; i++) {\n                sequenceArray.push(channel.bars[i]);\n            }\n\n            const channelObject: any = {\n                \"type\": isModChannel ? \"mod\" : (isNoiseChannel ? \"drum\" : \"pitch\"),\n                \"name\": channel.name,\n                \"instruments\": instrumentArray,\n                \"patterns\": patternArray,\n                \"sequence\": sequenceArray,\n            };\n            if (!isNoiseChannel) {\n                // For compatibility with old versions the octave is offset by one.\n                channelObject[\"octaveScrollBar\"] = channel.octave - 1;\n            }\n            channelArray.push(channelObject);\n        }\n\n        const result: any = {\n            \"name\": this.title,\n            \"format\": Song._format,\n            \"version\": Song._latestSlarmoosBoxVersion,\n            \"scale\": Config.scales[this.scale].name,\n            \"customScale\": this.scaleCustom,\n            \"key\": Config.keys[this.key].name,\n            \"keyOctave\": this.octave,\n            \"introBars\": this.loopStart,\n            \"loopBars\": this.loopLength,\n            \"beatsPerBar\": this.beatsPerBar,\n            \"ticksPerBeat\": Config.rhythms[this.rhythm].stepsPerBeat,\n            \"beatsPerMinute\": this.tempo,\n            \"reverb\": this.reverb,\n            \"masterGain\": this.masterGain,\n            \"compressionThreshold\": this.compressionThreshold,\n            \"limitThreshold\": this.limitThreshold,\n            \"limitDecay\": this.limitDecay,\n            \"limitRise\": this.limitRise,\n            \"limitRatio\": this.limitRatio,\n            \"compressionRatio\": this.compressionRatio,\n            //\"outroBars\": this.barCount - this.loopStart - this.loopLength; // derive this from bar arrays?\n            //\"patternCount\": this.patternsPerChannel, // derive this from pattern arrays?\n            \"songEq\": this.eqFilter.toJsonObject(),\n            \"layeredInstruments\": this.layeredInstruments,\n            \"patternInstruments\": this.patternInstruments,\n            \"channels\": channelArray,\n        };\n\n        //song eq subfilters\n        for (let i = 0; i < Config.filterMorphCount - 1; i++) {\n            result[\"songEq\" + i] = this.eqSubFilters[i];\n        }\n\n        if (EditorConfig.customSamples != null && EditorConfig.customSamples.length > 0) {\n            result[\"customSamples\"] = EditorConfig.customSamples;\n        }\n\n        return result;\n    }\n\n    fromJsonObject(jsonObject: any, jsonFormat = \"auto\"): void {\n        this.initToDefault(true);\n        if (!jsonObject) return;\n\n        //const version = jsonObject[\"version\"] | 0;\n        //if (version > Song._latestVersion) return; // Go ahead and try to parse something from the future I guess? JSON is pretty easy-going!\n\n        // Code for auto-detect mode; if statements that are lower down have 'higher priority'\n        if (jsonFormat == \"auto\") {\n            if (jsonObject[\"format\"] == \"BeepBox\") {\n                // Assume that if there is a \"riff\" song setting then it must be modbox\n                if (jsonObject[\"riff\"] != undefined) {\n                    jsonFormat = \"modbox\";\n                }\n\n                // Assume that if there are limiter song settings then it must be jummbox\n                // Despite being added in JB 2.1, json export for the limiter settings wasn't added until 2.3\n                if (jsonObject[\"masterGain\"] != undefined) {\n                    jsonFormat = \"jummbox\";\n                }\n            }\n        }\n\n        const format = (jsonFormat == \"auto\" ? jsonObject[\"format\"] : jsonFormat).toLowerCase();\n\n        if (jsonObject[\"name\"] != undefined) {\n            this.title = jsonObject[\"name\"];\n        }\n\n        if (jsonObject[\"customSamples\"] != undefined) {\n            const customSamples: string[] = jsonObject[\"customSamples\"];\n            if (EditorConfig.customSamples == null || EditorConfig.customSamples.join(\", \") != customSamples.join(\", \")) {\n                // Have to duplicate the work done in Song.fromBase64String\n                // early here, because Instrument.fromJsonObject depends on the\n                // chip wave list having the correct items already in memory.\n\n                Config.willReloadForCustomSamples = true;\n\n                Song._restoreChipWaveListToDefault();\n\n                let willLoadLegacySamples = false;\n                let willLoadNintariboxSamples = false;\n                let willLoadMarioPaintboxSamples = false;\n                const customSampleUrls: string[] = [];\n                const customSamplePresets: Preset[] = [];\n                for (const url of customSamples) {\n                    if (url.toLowerCase() === \"legacysamples\") {\n                        if (!willLoadLegacySamples) {\n                            willLoadLegacySamples = true;\n                            customSampleUrls.push(url);\n                            loadBuiltInSamples(0);\n                        }\n                    }\n                    else if (url.toLowerCase() === \"nintariboxsamples\") {\n                        if (!willLoadNintariboxSamples) {\n                            willLoadNintariboxSamples = true;\n                            customSampleUrls.push(url);\n                            loadBuiltInSamples(1);\n                        }\n                    }\n                    else if (url.toLowerCase() === \"mariopaintboxsamples\") {\n                        if (!willLoadMarioPaintboxSamples) {\n                            willLoadMarioPaintboxSamples = true;\n                            customSampleUrls.push(url);\n                            loadBuiltInSamples(2);\n                        }\n                    }\n\n                    else {\n                        // When EditorConfig.customSamples is saved in the json\n                        // export, it should be using the new syntax, unless\n                        // the user has manually modified the URL, so we don't\n                        // really need to parse the old syntax here.\n                        const parseOldSyntax = false;\n                        Song._parseAndConfigureCustomSample(url, customSampleUrls, customSamplePresets, sampleLoadingState, parseOldSyntax);\n                    }\n                }\n                if (customSampleUrls.length > 0) {\n                    EditorConfig.customSamples = customSampleUrls;\n                }\n                if (customSamplePresets.length > 0) {\n                    const customSamplePresetsMap: DictionaryArray<Preset> = toNameMap(customSamplePresets);\n                    EditorConfig.presetCategories[EditorConfig.presetCategories.length] = {\n                        name: \"Custom Sample Presets\",\n                        presets: customSamplePresetsMap,\n                        index: EditorConfig.presetCategories.length,\n                    };\n                }\n            }\n        } else {\n            // No custom samples, so the only possibility at this point is that\n            // we need to load the legacy samples. Let's check whether that's\n            // necessary.\n            let shouldLoadLegacySamples = false;\n            if (jsonObject[\"channels\"] != undefined) {\n                for (let channelIndex = 0; channelIndex < jsonObject[\"channels\"].length; channelIndex++) {\n                    const channelObject = jsonObject[\"channels\"][channelIndex];\n                    if (channelObject[\"type\"] !== \"pitch\") {\n                        // Legacy samples can only exist in pitch channels.\n                        continue;\n                    }\n                    if (Array.isArray(channelObject[\"instruments\"])) {\n                        const instrumentObjects: any[] = channelObject[\"instruments\"];\n                        for (let i = 0; i < instrumentObjects.length; i++) {\n                            const instrumentObject = instrumentObjects[i];\n                            if (instrumentObject[\"type\"] !== \"chip\") {\n                                // Legacy samples can only exist in chip wave\n                                // instruments.\n                                continue;\n                            }\n                            if (instrumentObject[\"wave\"] == null) {\n                                // This should exist if things got saved\n                                // correctly, but if they didn't, skip this.\n                                continue;\n                            }\n                            const waveName = instrumentObject[\"wave\"];\n                            // @TODO: Avoid this duplication.\n                            const names: string[] = [\n                                \"paandorasbox kick\",\n                                \"paandorasbox snare\",\n                                \"paandorasbox piano1\",\n                                \"paandorasbox WOW\",\n                                \"paandorasbox overdrive\",\n                                \"paandorasbox trumpet\",\n                                \"paandorasbox saxophone\",\n                                \"paandorasbox orchestrahit\",\n                                \"paandorasbox detatched violin\",\n                                \"paandorasbox synth\",\n                                \"paandorasbox sonic3snare\",\n                                \"paandorasbox come on\",\n                                \"paandorasbox choir\",\n                                \"paandorasbox overdriveguitar\",\n                                \"paandorasbox flute\",\n                                \"paandorasbox legato violin\",\n                                \"paandorasbox tremolo violin\",\n                                \"paandorasbox amen break\",\n                                \"paandorasbox pizzicato violin\",\n                                \"paandorasbox tim allen grunt\",\n                                \"paandorasbox tuba\",\n                                \"paandorasbox loopingcymbal\",\n                                \"paandorasbox standardkick\",\n                                \"paandorasbox standardsnare\",\n                                \"paandorasbox closedhihat\",\n                                \"paandorasbox foothihat\",\n                                \"paandorasbox openhihat\",\n                                \"paandorasbox crashcymbal\",\n                                \"paandorasbox pianoC4\",\n                                \"paandorasbox liver pad\",\n                                \"paandorasbox marimba\",\n                                \"paandorasbox susdotwav\",\n                                \"paandorasbox wackyboxtts\",\n                                \"paandorasbox peppersteak_1\",\n                                \"paandorasbox peppersteak_2\",\n                                \"paandorasbox vinyl_noise\",\n                                \"paandorasbeta slap bass\",\n                                \"paandorasbeta HD EB overdrive guitar\",\n                                \"paandorasbeta sunsoft bass\",\n                                \"paandorasbeta masculine choir\",\n                                \"paandorasbeta feminine choir\",\n                                \"paandorasbeta tololoche\",\n                                \"paandorasbeta harp\",\n                                \"paandorasbeta pan flute\",\n                                \"paandorasbeta krumhorn\",\n                                \"paandorasbeta timpani\",\n                                \"paandorasbeta crowd hey\",\n                                \"paandorasbeta wario land 4 brass\",\n                                \"paandorasbeta wario land 4 rock organ\",\n                                \"paandorasbeta wario land 4 DAOW\",\n                                \"paandorasbeta wario land 4 hour chime\",\n                                \"paandorasbeta wario land 4 tick\",\n                                \"paandorasbeta kirby kick\",\n                                \"paandorasbeta kirby snare\",\n                                \"paandorasbeta kirby bongo\",\n                                \"paandorasbeta kirby click\",\n                                \"paandorasbeta sonor kick\",\n                                \"paandorasbeta sonor snare\",\n                                \"paandorasbeta sonor snare (left hand)\",\n                                \"paandorasbeta sonor snare (right hand)\",\n                                \"paandorasbeta sonor high tom\",\n                                \"paandorasbeta sonor low tom\",\n                                \"paandorasbeta sonor hihat (closed)\",\n                                \"paandorasbeta sonor hihat (half opened)\",\n                                \"paandorasbeta sonor hihat (open)\",\n                                \"paandorasbeta sonor hihat (open tip)\",\n                                \"paandorasbeta sonor hihat (pedal)\",\n                                \"paandorasbeta sonor crash\",\n                                \"paandorasbeta sonor crash (tip)\",\n                                \"paandorasbeta sonor ride\"\n                            ];\n                            // The difference for these is in the doubled a.\n                            const oldNames: string[] = [\n                                \"pandoraasbox kick\",\n                                \"pandoraasbox snare\",\n                                \"pandoraasbox piano1\",\n                                \"pandoraasbox WOW\",\n                                \"pandoraasbox overdrive\",\n                                \"pandoraasbox trumpet\",\n                                \"pandoraasbox saxophone\",\n                                \"pandoraasbox orchestrahit\",\n                                \"pandoraasbox detatched violin\",\n                                \"pandoraasbox synth\",\n                                \"pandoraasbox sonic3snare\",\n                                \"pandoraasbox come on\",\n                                \"pandoraasbox choir\",\n                                \"pandoraasbox overdriveguitar\",\n                                \"pandoraasbox flute\",\n                                \"pandoraasbox legato violin\",\n                                \"pandoraasbox tremolo violin\",\n                                \"pandoraasbox amen break\",\n                                \"pandoraasbox pizzicato violin\",\n                                \"pandoraasbox tim allen grunt\",\n                                \"pandoraasbox tuba\",\n                                \"pandoraasbox loopingcymbal\",\n                                \"pandoraasbox standardkick\",\n                                \"pandoraasbox standardsnare\",\n                                \"pandoraasbox closedhihat\",\n                                \"pandoraasbox foothihat\",\n                                \"pandoraasbox openhihat\",\n                                \"pandoraasbox crashcymbal\",\n                                \"pandoraasbox pianoC4\",\n                                \"pandoraasbox liver pad\",\n                                \"pandoraasbox marimba\",\n                                \"pandoraasbox susdotwav\",\n                                \"pandoraasbox wackyboxtts\",\n                                \"pandoraasbox peppersteak_1\",\n                                \"pandoraasbox peppersteak_2\",\n                                \"pandoraasbox vinyl_noise\",\n                                \"pandoraasbeta slap bass\",\n                                \"pandoraasbeta HD EB overdrive guitar\",\n                                \"pandoraasbeta sunsoft bass\",\n                                \"pandoraasbeta masculine choir\",\n                                \"pandoraasbeta feminine choir\",\n                                \"pandoraasbeta tololoche\",\n                                \"pandoraasbeta harp\",\n                                \"pandoraasbeta pan flute\",\n                                \"pandoraasbeta krumhorn\",\n                                \"pandoraasbeta timpani\",\n                                \"pandoraasbeta crowd hey\",\n                                \"pandoraasbeta wario land 4 brass\",\n                                \"pandoraasbeta wario land 4 rock organ\",\n                                \"pandoraasbeta wario land 4 DAOW\",\n                                \"pandoraasbeta wario land 4 hour chime\",\n                                \"pandoraasbeta wario land 4 tick\",\n                                \"pandoraasbeta kirby kick\",\n                                \"pandoraasbeta kirby snare\",\n                                \"pandoraasbeta kirby bongo\",\n                                \"pandoraasbeta kirby click\",\n                                \"pandoraasbeta sonor kick\",\n                                \"pandoraasbeta sonor snare\",\n                                \"pandoraasbeta sonor snare (left hand)\",\n                                \"pandoraasbeta sonor snare (right hand)\",\n                                \"pandoraasbeta sonor high tom\",\n                                \"pandoraasbeta sonor low tom\",\n                                \"pandoraasbeta sonor hihat (closed)\",\n                                \"pandoraasbeta sonor hihat (half opened)\",\n                                \"pandoraasbeta sonor hihat (open)\",\n                                \"pandoraasbeta sonor hihat (open tip)\",\n                                \"pandoraasbeta sonor hihat (pedal)\",\n                                \"pandoraasbeta sonor crash\",\n                                \"pandoraasbeta sonor crash (tip)\",\n                                \"pandoraasbeta sonor ride\"\n                            ];\n                            // This mirrors paandorasboxWaveNames, which is unprefixed.\n                            const veryOldNames: string[] = [\n                                \"kick\",\n                                \"snare\",\n                                \"piano1\",\n                                \"WOW\",\n                                \"overdrive\",\n                                \"trumpet\",\n                                \"saxophone\",\n                                \"orchestrahit\",\n                                \"detatched violin\",\n                                \"synth\",\n                                \"sonic3snare\",\n                                \"come on\",\n                                \"choir\",\n                                \"overdriveguitar\",\n                                \"flute\",\n                                \"legato violin\",\n                                \"tremolo violin\",\n                                \"amen break\",\n                                \"pizzicato violin\",\n                                \"tim allen grunt\",\n                                \"tuba\",\n                                \"loopingcymbal\",\n                                \"standardkick\",\n                                \"standardsnare\",\n                                \"closedhihat\",\n                                \"foothihat\",\n                                \"openhihat\",\n                                \"crashcymbal\",\n                                \"pianoC4\",\n                                \"liver pad\",\n                                \"marimba\",\n                                \"susdotwav\",\n                                \"wackyboxtts\"\n                            ];\n                            if (names.includes(waveName)) {\n                                shouldLoadLegacySamples = true;\n                            } else if (oldNames.includes(waveName)) {\n                                shouldLoadLegacySamples = true;\n                                // If we see one of these old names, update it\n                                // to the corresponding new name.\n                                instrumentObject[\"wave\"] = names[oldNames.findIndex(x => x === waveName)];\n                            } else if (veryOldNames.includes(waveName)) {\n                                if ((waveName === \"trumpet\" || waveName === \"flute\") && (format != \"paandorasbox\")) {\n                                    // If we see chip waves named trumpet or flute, and if the format isn't PaandorasBox, we leave them as-is\n                                } else {\n                                    // There's no other chip waves with ambiguous names like that, so it should\n                                    // be okay to assume we'll need to load the legacy samples now.\n                                    shouldLoadLegacySamples = true;\n                                    // If we see one of these old names, update it\n                                    // to the corresponding new name.\n                                    instrumentObject[\"wave\"] = names[veryOldNames.findIndex(x => x === waveName)];\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            if (shouldLoadLegacySamples) {\n                Config.willReloadForCustomSamples = true;\n\n                Song._restoreChipWaveListToDefault();\n\n                loadBuiltInSamples(0);\n                EditorConfig.customSamples = [\"legacySamples\"];\n            } else {\n                // We don't need to load the legacy samples, but we may have\n                // leftover samples in memory. If we do, clear them.\n                if (EditorConfig.customSamples != null && EditorConfig.customSamples.length > 0) {\n                    // We need to reload anyway in this case, because (for now)\n                    // the chip wave lists won't be correctly updated.\n                    Config.willReloadForCustomSamples = true;\n                    Song._clearSamples();\n                }\n            }\n        }\n\n        this.scale = 0; // default to free.\n        if (jsonObject[\"scale\"] != undefined) {\n            const oldScaleNames: Dictionary<string> = {\n                \"romani :)\": \"double harmonic :)\",\n                \"romani :(\": \"double harmonic :(\",\n                \"dbl harmonic :)\": \"double harmonic :)\",\n                \"dbl harmonic :(\": \"double harmonic :(\",\n                \"enigma\": \"strange\",\n            };\n            const scaleName = (oldScaleNames[jsonObject[\"scale\"]] != undefined) ? oldScaleNames[jsonObject[\"scale\"]] : jsonObject[\"scale\"];\n            const scale = Config.scales.findIndex(scale => scale.name == scaleName);\n            if (scale != -1) this.scale = scale;\n            if (this.scale == Config.scales[\"dictionary\"][\"Custom\"].index) {\n                if (jsonObject[\"customScale\"] != undefined) {\n                    for (var i of jsonObject[\"customScale\"].keys()) {\n                        this.scaleCustom[i] = jsonObject[\"customScale\"][i];\n                    }\n                }\n            }\n        }\n\n        if (jsonObject[\"key\"] != undefined) {\n            if (typeof (jsonObject[\"key\"]) == \"number\") {\n                this.key = ((jsonObject[\"key\"] + 1200) >>> 0) % Config.keys.length;\n            } else if (typeof (jsonObject[\"key\"]) == \"string\") {\n                const key = jsonObject[\"key\"];\n                // This conversion code depends on C through B being\n                // available as keys, of course.\n                if (key === \"C+\") {\n                    this.key = 0;\n                    this.octave = 1;\n                } else if (key === \"G- (actually F#-)\") {\n                    this.key = 6;\n                    this.octave = -1;\n                } else if (key === \"C-\") {\n                    this.key = 0;\n                    this.octave = -1;\n                } else if (key === \"oh no (F-)\") {\n                    this.key = 5;\n                    this.octave = -1;\n                } else {\n                    const letter = key.charAt(0).toUpperCase();\n                    const symbol = key.charAt(1).toLowerCase();\n                    const letterMap: Readonly<Dictionary<number>> = { \"C\": 0, \"D\": 2, \"E\": 4, \"F\": 5, \"G\": 7, \"A\": 9, \"B\": 11 };\n                    const accidentalMap: Readonly<Dictionary<number>> = { \"#\": 1, \"\u266F\": 1, \"b\": -1, \"\u266D\": -1 };\n                    let index: number | undefined = letterMap[letter];\n                    const offset: number | undefined = accidentalMap[symbol];\n                    if (index != undefined) {\n                        if (offset != undefined) index += offset;\n                        if (index < 0) index += 12;\n                        index = index % 12;\n                        this.key = index;\n                    }\n                }\n            }\n        }\n\n        if (jsonObject[\"beatsPerMinute\"] != undefined) {\n            this.tempo = clamp(Config.tempoMin, Config.tempoMax + 1, jsonObject[\"beatsPerMinute\"] | 0);\n        }\n\n        if (jsonObject[\"keyOctave\"] != undefined) {\n            this.octave = clamp(Config.octaveMin, Config.octaveMax + 1, jsonObject[\"keyOctave\"] | 0);\n        }\n\n        let legacyGlobalReverb = 0; // In older songs, reverb was song-global, record that here and pass it to Instrument.fromJsonObject() for context.\n        if (jsonObject[\"reverb\"] != undefined) {\n            legacyGlobalReverb = clamp(0, 32, jsonObject[\"reverb\"] | 0);\n        }\n\n        if (jsonObject[\"beatsPerBar\"] != undefined) {\n            this.beatsPerBar = Math.max(Config.beatsPerBarMin, Math.min(Config.beatsPerBarMax, jsonObject[\"beatsPerBar\"] | 0));\n        }\n\n        let importedPartsPerBeat = 4;\n        if (jsonObject[\"ticksPerBeat\"] != undefined) {\n            importedPartsPerBeat = (jsonObject[\"ticksPerBeat\"] | 0) || 4;\n            this.rhythm = Config.rhythms.findIndex(rhythm => rhythm.stepsPerBeat == importedPartsPerBeat);\n            if (this.rhythm == -1) {\n                this.rhythm = 1; //default rhythm\n            }\n        }\n\n        // Read limiter settings. Ranges and defaults are based on slider settings\n\n        if (jsonObject[\"masterGain\"] != undefined) {\n            this.masterGain = Math.max(0.0, Math.min(5.0, jsonObject[\"masterGain\"] || 0));\n        } else {\n            this.masterGain = 1.0;\n        }\n\n        if (jsonObject[\"limitThreshold\"] != undefined) {\n            this.limitThreshold = Math.max(0.0, Math.min(2.0, jsonObject[\"limitThreshold\"] || 0));\n        } else {\n            this.limitThreshold = 1.0;\n        }\n\n        if (jsonObject[\"compressionThreshold\"] != undefined) {\n            this.compressionThreshold = Math.max(0.0, Math.min(1.1, jsonObject[\"compressionThreshold\"] || 0));\n        } else {\n            this.compressionThreshold = 1.0;\n        }\n\n        if (jsonObject[\"limitRise\"] != undefined) {\n            this.limitRise = Math.max(2000.0, Math.min(10000.0, jsonObject[\"limitRise\"] || 0));\n        } else {\n            this.limitRise = 4000.0;\n        }\n\n        if (jsonObject[\"limitDecay\"] != undefined) {\n            this.limitDecay = Math.max(1.0, Math.min(30.0, jsonObject[\"limitDecay\"] || 0));\n        } else {\n            this.limitDecay = 4.0;\n        }\n\n        if (jsonObject[\"limitRatio\"] != undefined) {\n            this.limitRatio = Math.max(0.0, Math.min(11.0, jsonObject[\"limitRatio\"] || 0));\n        } else {\n            this.limitRatio = 1.0;\n        }\n\n        if (jsonObject[\"compressionRatio\"] != undefined) {\n            this.compressionRatio = Math.max(0.0, Math.min(1.168, jsonObject[\"compressionRatio\"] || 0));\n        } else {\n            this.compressionRatio = 1.0;\n        }\n\n        if (jsonObject[\"songEq\"] != undefined) {\n            this.eqFilter.fromJsonObject(jsonObject[\"songEq\"]);\n        } else {\n            this.eqFilter.reset();\n        }\n\n        for (let i = 0; i < Config.filterMorphCount - 1; i++) {\n            if (jsonObject[\"songEq\" + i]) {\n                this.eqSubFilters[i] = jsonObject[\"songEq\" + i];\n            } else {\n                this.eqSubFilters[i] = null;\n            }\n        }\n\n        let maxInstruments = 1;\n        let maxPatterns = 1;\n        let maxBars = 1;\n        if (jsonObject[\"channels\"] != undefined) {\n            for (const channelObject of jsonObject[\"channels\"]) {\n                if (channelObject[\"instruments\"]) maxInstruments = Math.max(maxInstruments, channelObject[\"instruments\"].length | 0);\n                if (channelObject[\"patterns\"]) maxPatterns = Math.max(maxPatterns, channelObject[\"patterns\"].length | 0);\n                if (channelObject[\"sequence\"]) maxBars = Math.max(maxBars, channelObject[\"sequence\"].length | 0);\n            }\n        }\n\n        if (jsonObject[\"layeredInstruments\"] != undefined) {\n            this.layeredInstruments = !!jsonObject[\"layeredInstruments\"];\n        } else {\n            this.layeredInstruments = false;\n        }\n        if (jsonObject[\"patternInstruments\"] != undefined) {\n            this.patternInstruments = !!jsonObject[\"patternInstruments\"];\n        } else {\n            this.patternInstruments = (maxInstruments > 1);\n        }\n        this.patternsPerChannel = Math.min(maxPatterns, Config.barCountMax);\n        this.barCount = Math.min(maxBars, Config.barCountMax);\n\n        if (jsonObject[\"introBars\"] != undefined) {\n            this.loopStart = clamp(0, this.barCount, jsonObject[\"introBars\"] | 0);\n        }\n        if (jsonObject[\"loopBars\"] != undefined) {\n            this.loopLength = clamp(1, this.barCount - this.loopStart + 1, jsonObject[\"loopBars\"] | 0);\n        }\n\n        const newPitchChannels: Channel[] = [];\n        const newNoiseChannels: Channel[] = [];\n        const newModChannels: Channel[] = [];\n        if (jsonObject[\"channels\"] != undefined) {\n            for (let channelIndex = 0; channelIndex < jsonObject[\"channels\"].length; channelIndex++) {\n                let channelObject = jsonObject[\"channels\"][channelIndex];\n\n                const channel = new Channel();\n\n                let isNoiseChannel = false;\n                let isModChannel = false;\n                if (channelObject[\"type\"] != undefined) {\n                    isNoiseChannel = (channelObject[\"type\"] == \"drum\");\n                    isModChannel = (channelObject[\"type\"] == \"mod\");\n                } else {\n                    // for older files, assume drums are channel 3.\n                    isNoiseChannel = (channelIndex >= 3);\n                }\n                if (isNoiseChannel) {\n                    newNoiseChannels.push(channel);\n                } else if (isModChannel) {\n                    newModChannels.push(channel);\n                }\n                else {\n                    newPitchChannels.push(channel);\n                }\n\n                if (channelObject[\"octaveScrollBar\"] != undefined) {\n                    channel.octave = clamp(0, Config.pitchOctaves, (channelObject[\"octaveScrollBar\"] | 0) + 1);\n                    if (isNoiseChannel) channel.octave = 0;\n                }\n\n                if (channelObject[\"name\"] != undefined) {\n                    channel.name = channelObject[\"name\"];\n                }\n                else {\n                    channel.name = \"\";\n                }\n\n                if (Array.isArray(channelObject[\"instruments\"])) {\n                    const instrumentObjects: any[] = channelObject[\"instruments\"];\n                    for (let i = 0; i < instrumentObjects.length; i++) {\n                        if (i >= this.getMaxInstrumentsPerChannel()) break;\n                        const instrument = new Instrument(isNoiseChannel, isModChannel);\n                        channel.instruments[i] = instrument;\n                        instrument.fromJsonObject(instrumentObjects[i], isNoiseChannel, isModChannel, false, false, legacyGlobalReverb, format);\n                    }\n\n                }\n\n                for (let i = 0; i < this.patternsPerChannel; i++) {\n                    const pattern = new Pattern();\n                    channel.patterns[i] = pattern;\n\n                    let patternObject = undefined;\n                    if (channelObject[\"patterns\"]) patternObject = channelObject[\"patterns\"][i];\n                    if (patternObject == undefined) continue;\n\n                    pattern.fromJsonObject(patternObject, this, channel, importedPartsPerBeat, isNoiseChannel, isModChannel, format);\n                }\n                channel.patterns.length = this.patternsPerChannel;\n\n                for (let i = 0; i < this.barCount; i++) {\n                    channel.bars[i] = (channelObject[\"sequence\"] != undefined) ? Math.min(this.patternsPerChannel, channelObject[\"sequence\"][i] >>> 0) : 0;\n                }\n                channel.bars.length = this.barCount;\n            }\n        }\n\n        if (newPitchChannels.length > Config.pitchChannelCountMax) newPitchChannels.length = Config.pitchChannelCountMax;\n        if (newNoiseChannels.length > Config.noiseChannelCountMax) newNoiseChannels.length = Config.noiseChannelCountMax;\n        if (newModChannels.length > Config.modChannelCountMax) newModChannels.length = Config.modChannelCountMax;\n        this.pitchChannelCount = newPitchChannels.length;\n        this.noiseChannelCount = newNoiseChannels.length;\n        this.modChannelCount = newModChannels.length;\n        this.channels.length = 0;\n        Array.prototype.push.apply(this.channels, newPitchChannels);\n        Array.prototype.push.apply(this.channels, newNoiseChannels);\n        Array.prototype.push.apply(this.channels, newModChannels);\n\n        if (Config.willReloadForCustomSamples) {\n            window.location.hash = this.toBase64String();\n            // The prompt seems to get stuck if reloading is done too quickly.\n            setTimeout(() => { location.reload(); }, 50);\n        }\n    }\n\n    getPattern(channelIndex: number, bar: number): Pattern | null {\n        if (bar < 0 || bar >= this.barCount) return null;\n        const patternIndex = this.channels[channelIndex].bars[bar];\n        if (patternIndex == 0) return null;\n        return this.channels[channelIndex].patterns[patternIndex - 1];\n    }\n\n    getBeatsPerMinute(): number {\n        return this.tempo;\n    }\n\n    static getNeededBits(maxValue: number): number {\n        return 32 - Math.clz32(Math.ceil(maxValue + 1) - 1);\n    }\n\n    restoreLimiterDefaults(): void {\n        this.compressionRatio = 1.0;\n        this.limitRatio = 1.0;\n        this.limitRise = 4000.0;\n        this.limitDecay = 4.0;\n        this.limitThreshold = 1.0;\n        this.compressionThreshold = 1.0;\n        this.masterGain = 1.0;\n    }\n}\n", "import { EnvelopeComputer } from \"./EnvelopeComputer\";\nimport { DynamicBiquadFilter } from \"./filtering\";\nimport { PickedString } from \"./InstrumentState\";\nimport { Note } from \"./Pattern\";\nimport { Config, OperatorWave } from \"./SynthConfig\";\n\nexport class Tone {\n    instrumentIndex: number;\n    readonly pitches: number[] = Array(Config.maxChordSize + 2).fill(0);\n    pitchCount = 0;\n    chordSize = 0;\n    drumsetPitch: number | null = null;\n    note: Note | null = null;\n    prevNote: Note | null = null;\n    nextNote: Note | null = null;\n    prevNotePitchIndex = 0;\n    nextNotePitchIndex = 0;\n    freshlyAllocated = true;\n    atNoteStart = false;\n    isOnLastTick = false; // Whether the tone is finished fading out and ready to be freed.\n    passedEndOfNote = false;\n    forceContinueAtStart = false;\n    forceContinueAtEnd = false;\n    noteStartPart = 0;\n    noteEndPart = 0;\n    ticksSinceReleased = 0;\n    liveInputSamplesHeld = 0;\n    lastInterval = 0;\n    chipWaveStartOffset = 0;\n    noiseSample = 0.0;\n    noiseSampleA = 0.0;\n    noiseSampleB = 0.0;\n    stringSustainStart = 0;\n    stringSustainEnd = 0;\n    readonly noiseSamples: number[] = [];\n    readonly phases: number[] = [];\n    readonly operatorWaves: OperatorWave[] = [];\n    readonly phaseDeltas: number[] = [];\n    // advloop addition\n    directions: number[] = [];\n    chipWaveCompletions: number[] = [];\n    chipWavePrevWavesL: number[] = [];\n    chipWavePrevWavesR: number[] = [];\n    chipWaveCompletionsLastWaveL: number[] = [];\n    chipWaveCompletionsLastWaveR: number[] = [];\n    // advloop addition\n    readonly phaseDeltaScales: number[] = [];\n    expression = 0.0;\n    expressionDelta = 0.0;\n    readonly operatorExpressions: number[] = [];\n    readonly operatorExpressionDeltas: number[] = [];\n    readonly prevPitchExpressions: Array<number | null> = Array(Config.maxPitchOrOperatorCount).fill(null);\n    prevVibrato: number | null = null;\n    prevStringDecay: number | null = null;\n    pulseWidth = 0.0;\n    pulseWidthDelta = 0.0;\n    decimalOffset = 0.0;\n    supersawDynamism = 0.0;\n    supersawDynamismDelta = 0.0;\n    supersawUnisonDetunes: number[] = []; // These can change over time, but slowly enough that I'm not including corresponding delta values within a tick run.\n    supersawShape = 0.0;\n    supersawShapeDelta = 0.0;\n    supersawDelayLength = 0.0;\n    supersawDelayLengthDelta = 0.0;\n    supersawDelayLine: Float32Array | null = null;\n    supersawDelayIndex = -1;\n    supersawPrevPhaseDelta: number | null = null;\n    readonly pickedStrings: PickedString[] = [];\n\n    readonly noteFiltersL: DynamicBiquadFilter[] = [];\n    readonly noteFiltersR: DynamicBiquadFilter[] = [];\n    noteFilterCount = 0;\n    initialNoteFilterInputL1 = 0.0;\n    initialNoteFilterInputR1 = 0.0;\n    initialNoteFilterInputL2 = 0.0;\n    initialNoteFilterInputR2 = 0.0;\n\n    specialIntervalExpressionMult = 1.0;\n    readonly feedbackOutputs: number[] = [];\n    feedbackMult = 0.0;\n    feedbackDelta = 0.0;\n    stereoVolumeLStart = 0.0;\n    stereoVolumeRStart = 0.0;\n    stereoVolumeLDelta = 0.0;\n    stereoVolumeRDelta = 0.0;\n    stereoDelayStart = 0.0;\n    stereoDelayEnd = 0.0;\n    stereoDelayDelta = 0.0;\n    customVolumeStart = 0.0;\n    customVolumeEnd = 0.0;\n    filterResonanceStart = 0.0;\n    filterResonanceDelta = 0.0;\n    isFirstOrder = false;\n\n    readonly envelopeComputer = new EnvelopeComputer( /*true*/);\n\n    constructor() {\n        this.reset();\n    }\n\n    reset(): void {\n        // this.noiseSample = 0.0;\n        for (let i = 0; i < Config.unisonVoicesMax; i++) {\n            this.noiseSamples[i] = 0.0;\n        }\n        for (let i = 0; i < Config.maxPitchOrOperatorCount; i++) {\n            this.phases[i] = 0.0;\n            // advloop addition\n            this.directions[i] = 1;\n            this.chipWaveCompletions[i] = 0;\n            this.chipWavePrevWavesL[i] = 0;\n            this.chipWavePrevWavesR[i] = 0;\n            this.chipWaveCompletionsLastWaveL[i] = 0;\n            this.chipWaveCompletionsLastWaveR[i] = 0;\n            // advloop addition\n            this.operatorWaves[i] = Config.operatorWaves[0];\n            this.feedbackOutputs[i] = 0.0;\n            this.prevPitchExpressions[i] = null;\n        }\n        for (let i = 0; i < this.noteFilterCount; i++) {\n            this.noteFiltersL[i].resetOutput();\n            this.noteFiltersR[i].resetOutput();\n        }\n        this.noteFilterCount = 0;\n        this.initialNoteFilterInputL1 = 0.0;\n        this.initialNoteFilterInputR1 = 0.0;\n        this.initialNoteFilterInputL2 = 0.0;\n        this.initialNoteFilterInputR2 = 0.0;\n        this.liveInputSamplesHeld = 0;\n        this.supersawDelayIndex = -1;\n        for (const pickedString of this.pickedStrings) {\n            pickedString.reset();\n        }\n        this.envelopeComputer.reset();\n        this.prevVibrato = null;\n        this.prevStringDecay = null;\n        this.supersawPrevPhaseDelta = null;\n        this.drumsetPitch = null;\n    }\n}\n", "// Copyright (c) 2012-2022 John Nesky and contributing authors, distributed under the MIT license, see accompanying the LICENSE.md file.\n\nimport { events } from \"../global/Events\";\nimport { Channel } from \"./Channel\";\nimport { ChannelState } from \"./ChannelState\";\nimport { Deque } from \"./Deque\";\nimport { Effect } from \"./Effect\";\nimport { EffectState } from \"./EffectState\";\nimport { EnvelopeComputer } from \"./EnvelopeComputer\";\nimport { FilterControlPoint, FilterSettings } from \"./Filter\";\nimport { DynamicBiquadFilter, FilterCoefficients, FrequencyResponse } from \"./filtering\";\nimport { Instrument } from \"./Instrument\";\nimport { InstrumentState, PickedString } from \"./InstrumentState\";\nimport { Note, Pattern } from \"./Pattern\";\nimport { HeldMod, Song } from \"./Song\";\nimport { Chord, Config, Dictionary, DictionaryArray, effectsIncludeDetune, effectsIncludePitchShift, effectsIncludeVibrato, EffectType, Envelope, EnvelopeComputeIndex, EnvelopeType, FilterType, getArpeggioPitchIndex, getPulseWidthRatio, GranularEnvelopeType, InstrumentType, MDEffectType, Transition } from \"./SynthConfig\";\nimport { Tone } from \"./Tone\";\nimport { clamp, detuneToCents, fittingPowerOfTwo } from \"./utils\";\n\ndeclare global {\n    interface Window {\n        webkitAudioContext: AudioContext;\n    }\n}\n\nconst epsilon = (1.0e-24); // For detecting and avoiding float denormals, which have poor performance.\n\n// For performance debugging:\n//let samplesAccumulated = 0;\n//let samplePerformance = 0;\n\nexport class Synth {\n\n    private syncSongState(): void {\n        const channelCount = this.song!.getChannelCount();\n        for (let i = this.channels.length; i < channelCount; i++) {\n            this.channels[i] = new ChannelState();\n        }\n        this.channels.length = channelCount;\n        for (let i = 0; i < channelCount; i++) {\n            const channel = this.song!.channels[i];\n            const channelState = this.channels[i];\n            for (let j = channelState.instruments.length; j < channel.instruments.length; j++) {\n                channelState.instruments[j] = new InstrumentState();\n            }\n            channelState.instruments.length = channel.instruments.length;\n\n            if (channelState.muted != channel.muted) {\n                channelState.muted = channel.muted;\n                if (channelState.muted) {\n                    for (const instrumentState of channelState.instruments) {\n                        instrumentState.resetAllEffects();\n                    }\n                }\n            }\n        }\n    }\n\n    initModFilters(song: Song | null): void {\n        if (song != null) {\n            song.tmpEqFilterStart = song.eqFilter;\n            song.tmpEqFilterEnd = null;\n            for (let channelIndex = 0; channelIndex < song.getChannelCount(); channelIndex++) {\n                for (let instrumentIndex = 0; instrumentIndex < song.channels[channelIndex].instruments.length; instrumentIndex++) {\n                    const instrument = song.channels[channelIndex].instruments[instrumentIndex];\n                    for (let effectIndex = 0; effectIndex < song.channels[channelIndex].instruments[instrumentIndex].effects.length; effectIndex++) {\n                        const effect = song.channels[channelIndex].instruments[instrumentIndex].effects[effectIndex] as Effect;\n                        effect.tmpEqFilterStart = effect.eqFilter;\n                        effect.tmpEqFilterEnd = null;\n                    }\n                    instrument.tmpNoteFilterStart = instrument.noteFilter;\n                    instrument.tmpNoteFilterEnd = null;\n                }\n            }\n        }\n    }\n    warmUpSynthesizer(song: Song | null): void {\n        // Don't bother to generate the drum waves unless the song actually\n        // uses them, since they may require a lot of computation.\n        if (song != null) {\n            this.syncSongState();\n            const samplesPerTick = this.getSamplesPerTick();\n            for (let channelIndex = 0; channelIndex < song.getChannelCount(); channelIndex++) {\n                for (let instrumentIndex = 0; instrumentIndex < song.channels[channelIndex].instruments.length; instrumentIndex++) {\n                    const instrument = song.channels[channelIndex].instruments[instrumentIndex];\n                    const instrumentState = this.channels[channelIndex].instruments[instrumentIndex];\n                    Synth.getInstrumentSynthFunction(instrument);\n                    instrumentState.vibratoTime = 0;\n                    instrumentState.nextVibratoTime = 0;\n                    for (let envelopeIndex = 0; envelopeIndex < Config.maxEnvelopeCount + 1; envelopeIndex++) instrumentState.envelopeTime[envelopeIndex] = 0;\n                    instrumentState.arpTime = 0;\n                    instrumentState.updateWaves(instrument, this.samplesPerSecond);\n                    instrumentState.allocateNecessaryBuffers(this, instrument, samplesPerTick);\n                }\n\n            }\n        }\n        // JummBox needs to run synth functions for at least one sample (for JIT purposes)\n        // before starting audio callbacks to avoid skipping the initial output.\n        var dummyArray = new Float32Array(1);\n        this.isPlayingSong = true;\n        this.synthesize(dummyArray, dummyArray, 1, true);\n        this.isPlayingSong = false;\n    }\n\n\n    computeLatestModValues(): void {\n\n        if (this.song != null && this.song.modChannelCount > 0) {\n\n            // Clear all mod values, and set up temp variables for the time a mod would be set at.\n            let latestModTimes: (number | null)[] = [];\n            let latestModInsTimes: (number | null)[][][] = [];\n            this.modValues = [];\n            this.nextModValues = [];\n            this.modInsValues = [];\n            this.nextModInsValues = [];\n            this.heldMods = [];\n            for (let channel = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\n                latestModInsTimes[channel] = [];\n                this.modInsValues[channel] = [];\n                this.nextModInsValues[channel] = [];\n\n                for (let instrument = 0; instrument < this.song.channels[channel].instruments.length; instrument++) {\n                    this.modInsValues[channel][instrument] = [];\n                    this.nextModInsValues[channel][instrument] = [];\n                    latestModInsTimes[channel][instrument] = [];\n                }\n            }\n\n            // Find out where we're at in the fraction of the current bar.\n            let currentPart = this.beat * Config.partsPerBeat + this.part;\n\n            // For mod channels, calculate last set value for each mod\n            for (let channelIndex = this.song.pitchChannelCount + this.song.noiseChannelCount; channelIndex < this.song.getChannelCount(); channelIndex++) {\n                if (!(this.song.channels[channelIndex].muted)) {\n\n                    let pattern: Pattern | null;\n\n                    for (let currentBar = this.bar; currentBar >= 0; currentBar--) {\n                        pattern = this.song.getPattern(channelIndex, currentBar);\n\n                        if (pattern != null) {\n                            let instrumentIdx = pattern.instruments[0];\n                            let instrument = this.song.channels[channelIndex].instruments[instrumentIdx];\n                            let latestPinParts: number[] = [];\n                            let latestPinValues: number[] = [];\n\n                            let partsInBar = (currentBar == this.bar)\n                                ? currentPart\n                                : this.findPartsInBar(currentBar);\n\n                            for (const note of pattern.notes) {\n                                if (note.start <= partsInBar && (latestPinParts[Config.modCount - 1 - note.pitches[0]] == null || note.end > latestPinParts[Config.modCount - 1 - note.pitches[0]])) {\n                                    if (note.start == partsInBar) { // This can happen with next bar mods, and the value of the aligned note's start pin will be used.\n                                        latestPinParts[Config.modCount - 1 - note.pitches[0]] = note.start;\n                                        latestPinValues[Config.modCount - 1 - note.pitches[0]] = note.pins[0].size;\n                                    }\n                                    if (note.end <= partsInBar) {\n                                        latestPinParts[Config.modCount - 1 - note.pitches[0]] = note.end;\n                                        latestPinValues[Config.modCount - 1 - note.pitches[0]] = note.pins[note.pins.length - 1].size;\n                                    }\n                                    else {\n                                        latestPinParts[Config.modCount - 1 - note.pitches[0]] = partsInBar;\n                                        // Find the pin where bar change happens, and compute where pin volume would be at that time\n                                        for (let pinIdx = 0; pinIdx < note.pins.length; pinIdx++) {\n                                            if (note.pins[pinIdx].time + note.start > partsInBar) {\n                                                const transitionLength = note.pins[pinIdx].time - note.pins[pinIdx - 1].time;\n                                                const toNextBarLength = partsInBar - note.start - note.pins[pinIdx - 1].time;\n                                                const deltaVolume = note.pins[pinIdx].size - note.pins[pinIdx - 1].size;\n\n                                                latestPinValues[Config.modCount - 1 - note.pitches[0]] = Math.round(note.pins[pinIdx - 1].size + deltaVolume * toNextBarLength / transitionLength);\n                                                pinIdx = note.pins.length;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n\n                            // Set modulator value, if it wasn't set in another pattern already scanned\n                            for (let mod = 0; mod < Config.modCount; mod++) {\n                                if (latestPinParts[mod] != null) {\n                                    if (Config.modulators[instrument.modulators[mod]].forSong) {\n                                        const songFilterParam = instrument.modulators[mod] == Config.modulators.dictionary[\"song eq\"].index;\n                                        if (latestModTimes[instrument.modulators[mod]] == null || currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod] > (latestModTimes[instrument.modulators[mod]] as number)) {\n                                            if (songFilterParam) {\n                                                let tgtSong = this.song\n                                                if (instrument.modFilterTypes[mod] == 0) {\n                                                    tgtSong.tmpEqFilterStart = tgtSong.eqSubFilters[latestPinValues[mod]];\n                                                } else {\n                                                    for (let i = 0; i < Config.filterMorphCount; i++) {\n                                                        if (tgtSong.tmpEqFilterStart != null && tgtSong.tmpEqFilterStart == tgtSong.eqSubFilters[i]) {\n                                                            tgtSong.tmpEqFilterStart = new FilterSettings();\n                                                            tgtSong.tmpEqFilterStart.fromJsonObject(tgtSong.eqSubFilters[i]!.toJsonObject());\n                                                            i = Config.filterMorphCount;\n                                                        }\n                                                    }\n                                                    if (tgtSong.tmpEqFilterStart != null && Math.floor((instrument.modFilterTypes[mod] - 1) / 2) < tgtSong.tmpEqFilterStart.controlPointCount) {\n                                                        if (instrument.modFilterTypes[mod] % 2)\n                                                            tgtSong.tmpEqFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].freq = latestPinValues[mod];\n                                                        else\n                                                            tgtSong.tmpEqFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].gain = latestPinValues[mod];\n                                                    }\n                                                }\n                                                tgtSong.tmpEqFilterEnd = tgtSong.tmpEqFilterStart;\n                                            }\n                                            for (let i = 0; i < instrument.modChannels[mod].length; i++) this.setModValue(latestPinValues[mod], latestPinValues[mod], instrument.modChannels[mod][i], instrument.modInstruments[mod][i], instrument.modulators[mod]);\n                                            latestModTimes[instrument.modulators[mod]] = currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod];\n                                        }\n                                    } else {\n                                        // Generate list of used channels + instruments\n                                        let usedChannels: number[] = [];\n                                        let usedInstruments: number[] = [];\n                                        // All\n                                        if (instrument.modInstruments[mod][0] == this.song.channels[instrument.modChannels[mod][0]].instruments.length) {\n                                            for (let i = 0; i < this.song.channels[instrument.modChannels[mod][0]].instruments.length; i++) {\n                                                usedChannels.push(instrument.modChannels[mod][0]);\n                                                usedInstruments.push(i);\n                                            }\n                                        } // Active\n                                        else if (instrument.modInstruments[mod][0] > this.song.channels[instrument.modChannels[mod][0]].instruments.length) {\n                                            const tgtPattern: Pattern | null = this.song.getPattern(instrument.modChannels[mod][0], currentBar);\n                                            if (tgtPattern != null) {\n                                                usedChannels.push(instrument.modChannels[mod][0]);\n                                                usedInstruments = tgtPattern.instruments;\n                                            }\n                                        } else {\n                                            for (let i = 0; i < instrument.modChannels[mod].length; i++) {\n                                                usedChannels.push(instrument.modChannels[mod][i]);\n                                                usedInstruments.push(instrument.modInstruments[mod][i]);\n                                            }\n                                        }\n                                        for (let instrumentIndex = 0; instrumentIndex < usedInstruments.length; instrumentIndex++) {\n                                            // Iterate through all used instruments by this modulator\n                                            // Special indices for mod filter targets, since they control multiple things.\n                                            const eqFilterParam = instrument.modulators[mod] == Config.modulators.dictionary[\"post eq\"].index;\n                                            const noteFilterParam = instrument.modulators[mod] == Config.modulators.dictionary[\"pre eq\"].index;\n                                            let modulatorAdjust = instrument.modulators[mod];\n                                            if (eqFilterParam) {\n                                                modulatorAdjust = Config.modulators.length + (instrument.modFilterTypes[mod] | 0);\n                                            } else if (noteFilterParam) {\n                                                // Skip all possible indices for eq filter\n                                                modulatorAdjust = Config.modulators.length + 1 + (2 * Config.filterMaxPoints) + (instrument.modFilterTypes[mod] | 0);\n                                            }\n\n                                            if (latestModInsTimes[instrument.modChannels[mod][instrumentIndex]][usedInstruments[instrumentIndex]][modulatorAdjust] == null\n                                                || currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod] > latestModInsTimes[instrument.modChannels[mod][instrumentIndex]][usedInstruments[instrumentIndex]][modulatorAdjust]!) {\n\n                                                if (eqFilterParam) {\n                                                    let tgtInstrument = this.song.channels[instrument.modChannels[mod][instrumentIndex]].instruments[usedInstruments[instrumentIndex]];\n                                                    for (let effectIndex = 0; effectIndex < tgtInstrument.effects.length; effectIndex++) {\n                                                        let tgtEffect = tgtInstrument.effects[effectIndex] as Effect;\n                                                        if (instrument.modFilterTypes[mod] == 0) {\n                                                            tgtEffect.tmpEqFilterStart = tgtEffect.eqSubFilters[latestPinValues[mod]];\n                                                        } else {\n                                                            for (let i = 0; i < Config.filterMorphCount; i++) {\n                                                                if (tgtEffect.tmpEqFilterStart != null && tgtEffect.tmpEqFilterStart == tgtEffect.eqSubFilters[i]) {\n                                                                    tgtEffect.tmpEqFilterStart = new FilterSettings();\n                                                                    tgtEffect.tmpEqFilterStart.fromJsonObject(tgtEffect.eqSubFilters[i]!.toJsonObject());\n                                                                    i = Config.filterMorphCount;\n                                                                }\n                                                            }\n                                                            if (tgtEffect.tmpEqFilterStart != null && Math.floor((instrument.modFilterTypes[mod] - 1) / 2) < tgtEffect.tmpEqFilterStart.controlPointCount) {\n                                                                if (instrument.modFilterTypes[mod] % 2)\n                                                                    tgtEffect.tmpEqFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].freq = latestPinValues[mod];\n                                                                else\n                                                                    tgtEffect.tmpEqFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].gain = latestPinValues[mod];\n                                                            }\n                                                        }\n                                                        tgtEffect.tmpEqFilterEnd = tgtEffect.tmpEqFilterStart;\n                                                    }\n                                                } else if (noteFilterParam) {\n                                                    let tgtInstrument = this.song.channels[instrument.modChannels[mod][instrumentIndex]].instruments[usedInstruments[instrumentIndex]];\n                                                    if (instrument.modFilterTypes[mod] == 0) {\n                                                        tgtInstrument.tmpNoteFilterStart = tgtInstrument.noteSubFilters[latestPinValues[mod]];\n                                                    } else {\n                                                        for (let i = 0; i < Config.filterMorphCount; i++) {\n                                                            if (tgtInstrument.tmpNoteFilterStart != null && tgtInstrument.tmpNoteFilterStart == tgtInstrument.noteSubFilters[i]) {\n                                                                tgtInstrument.tmpNoteFilterStart = new FilterSettings();\n                                                                tgtInstrument.tmpNoteFilterStart.fromJsonObject(tgtInstrument.noteSubFilters[i]!.toJsonObject());\n                                                                i = Config.filterMorphCount;\n                                                            }\n                                                        }\n                                                        if (tgtInstrument.tmpNoteFilterStart != null && Math.floor((instrument.modFilterTypes[mod] - 1) / 2) < tgtInstrument.tmpNoteFilterStart.controlPointCount) {\n                                                            if (instrument.modFilterTypes[mod] % 2)\n                                                                tgtInstrument.tmpNoteFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].freq = latestPinValues[mod];\n                                                            else\n                                                                tgtInstrument.tmpNoteFilterStart.controlPoints[Math.floor((instrument.modFilterTypes[mod] - 1) / 2)].gain = latestPinValues[mod];\n                                                        }\n                                                    }\n                                                    tgtInstrument.tmpNoteFilterEnd = tgtInstrument.tmpNoteFilterStart;\n                                                }\n                                                else this.setModValue(latestPinValues[mod], latestPinValues[mod], instrument.modChannels[mod][instrumentIndex], usedInstruments[instrumentIndex], modulatorAdjust);\n\n                                                latestModInsTimes[instrument.modChannels[mod][instrumentIndex]][usedInstruments[instrumentIndex]][modulatorAdjust] = currentBar * Config.partsPerBeat * this.song.beatsPerBar + latestPinParts[mod];\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    // Detects if a modulator is set, but not valid for the current effects/instrument type/filter type\n    // Note, setting 'none' or the intermediary steps when clicking to add a mod, like an unset channel/unset instrument, counts as valid.\n    // TODO: This kind of check is mirrored in SongEditor.ts' whenUpdated. Creates a lot of redundancy for adding new mods. Can be moved into new properties for mods, to avoid this later.\n    determineInvalidModulators(instrument: Instrument): void {\n        if (this.song == null)\n            return;\n        for (let mod = 0; mod < Config.modCount; mod++) {\n            instrument.invalidModulators[mod] = true;\n            // For song modulator, valid if any setting used\n            if (instrument.modChannels[mod][0] == -1) {\n                if (instrument.modulators[mod] != 0)\n                    instrument.invalidModulators[mod] = false;\n                continue;\n            }\n            for (let channelIndex = 0; channelIndex < instrument.modChannels[mod].length; channelIndex++) {\n                const channel: Channel | null = this.song.channels[instrument.modChannels[mod][channelIndex]];\n                if (channel == null) continue;\n                let tgtInstrumentList: Instrument[] = [];\n                if (instrument.modInstruments[mod][channelIndex] >= channel.instruments.length) { // All or active\n                    tgtInstrumentList = channel.instruments;\n                } else {\n                    tgtInstrumentList = [channel.instruments[instrument.modInstruments[mod][channelIndex]]];\n                }\n                for (let i = 0; i < tgtInstrumentList.length; i++) {\n                    const tgtInstrument: Instrument | null = tgtInstrumentList[i];\n                    const tgtEffect = tgtInstrument.effects[0] as Effect;\n                    if (tgtInstrument == null) continue;\n                    const str = Config.modulators[instrument.modulators[mod]].name;\n                    // Check effects\n                    if (!(Config.modulators[instrument.modulators[mod]].associatedEffect != EffectType.length && !(tgtInstrument.effectsIncludeType(Config.modulators[instrument.modulators[mod]].associatedEffect))) && !(Config.modulators[instrument.modulators[mod]].associatedMDEffect != MDEffectType.length && !(tgtInstrument.mdeffects & (1 << Config.modulators[instrument.modulators[mod]].associatedMDEffect)))\n                        // Instrument type specific\n                        || ((tgtInstrument.type != InstrumentType.fm && tgtInstrument.type != InstrumentType.fm6op) && (str == \"fm slider 1\" || str == \"fm slider 2\" || str == \"fm slider 3\" || str == \"fm slider 4\" || str == \"fm feedback\"))\n                        || tgtInstrument.type != InstrumentType.fm6op && (str == \"fm slider 5\" || str == \"fm slider 6\")\n                        || ((tgtInstrument.type != InstrumentType.pwm && tgtInstrument.type != InstrumentType.supersaw) && (str == \"pulse width\" || str == \"decimal offset\"))\n                        || ((tgtInstrument.type != InstrumentType.supersaw) && (str == \"dynamism\" || str == \"spread\" || str == \"saw shape\"))\n                        // Arp check\n                        || (!tgtInstrument.getChord().arpeggiates && (str == \"arp speed\" || str == \"reset arp\"))\n                        // EQ Filter check\n                        || (tgtEffect.eqFilterType && str == \"post eq\")\n                        || (!tgtEffect.eqFilterType && (str == \"post eq cut\" || str == \"post eq peak\"))\n                        || (str == \"post eq\" && Math.floor((instrument.modFilterTypes[mod] + 1) / 2) > tgtInstrument.getLargestControlPointCount(false))\n                        // Note Filter check\n                        || (tgtInstrument!.noteFilterType && str == \"pre eq\")\n                        || (!tgtInstrument!.noteFilterType && (str == \"pre eq cut\" || str == \"pre eq peak\"))\n                        || (str == \"pre eq\" && Math.floor((instrument.modFilterTypes[mod] + 1) / 2) > tgtInstrument.getLargestControlPointCount(true))) {\n\n                        instrument.invalidModulators[mod] = false;\n                        i = tgtInstrumentList.length;\n                    }\n                }\n            }\n        }\n    }\n\n    private static operatorAmplitudeCurve(amplitude: number): number {\n        return (Math.pow(16.0, amplitude / 15.0) - 1.0) / 15.0;\n    }\n\n    samplesPerSecond = 44100;\n    panningDelayBufferSize: number;\n    panningDelayBufferMask: number;\n    flangerDelayBufferSize: number;\n    flangerDelayBufferMask: number;\n    chorusDelayBufferSize: number;\n    chorusDelayBufferMask: number;\n    // TODO: reverb\n\n    song: Song | null = null;\n    preferLowerLatency = false; // enable when recording performances from keyboard or MIDI. Takes effect next time you activate audio.\n    anticipatePoorPerformance = false; // enable on mobile devices to reduce audio stutter glitches. Takes effect next time you activate audio.\n    liveInputDuration = 0;\n    liveBassInputDuration = 0;\n    liveInputStarted = false;\n    liveBassInputStarted = false;\n    liveInputPitches: number[] = [];\n    liveBassInputPitches: number[] = [];\n    liveInputChannel = 0;\n    liveBassInputChannel = 0;\n    liveInputInstruments: number[] = [];\n    liveBassInputInstruments: number[] = [];\n    loopRepeatCount = -1;\n    volume = 1.0;\n    oscRefreshEventTimer = 0;\n    oscEnabled = true;\n    enableMetronome = false;\n    countInMetronome = false;\n    renderingSong = false;\n    heldMods: HeldMod[] = [];\n    private wantToSkip = false;\n    private playheadInternal = 0.0;\n    private bar = 0;\n    private prevBar: number | null = null;\n    private nextBar: number | null = null;\n    private beat = 0;\n    private part = 0;\n    private tick = 0;\n    isAtStartOfTick = true;\n    isAtEndOfTick = true;\n    tickSampleCountdown = 0;\n    private modValues: (number | null)[] = [];\n    modInsValues: (number | null)[][][] = [];\n    private nextModValues: (number | null)[] = [];\n    nextModInsValues: (number | null)[][][] = [];\n    private isPlayingSong = false;\n    private isRecording = false;\n    private liveInputEndTime = 0.0;\n    private browserAutomaticallyClearsAudioBuffer = true; // Assume true until proven otherwise. Older Chrome does not clear the buffer so it needs to be cleared manually.\n\n    static readonly tempFilterStartCoefficients = new FilterCoefficients();\n    static readonly tempFilterEndCoefficients = new FilterCoefficients();\n    private tempDrumSetControlPoint = new FilterControlPoint();\n    tempFrequencyResponse = new FrequencyResponse();\n    loopBarStart = -1;\n    loopBarEnd = -1;\n\n    private static readonly fmSynthFunctionCache: Dictionary<Function> = {};\n    private static readonly fm6SynthFunctionCache: Dictionary<Function> = {};\n    private static readonly effectsFunctionCache: { [signature: string]: Function } = {};\n    private static readonly pickedStringFunctionCache: Function[] = Array(3).fill(undefined); // keep in sync with the number of unison voices.\n    // TODO: re-implement slarmoo's changes to the instrument synths, but in stereo!\n    //private static readonly spectrumFunctionCache: Function[] = [];\n    //private static readonly noiseFunctionCache: Function[] = [];\n    //private static readonly drumFunctionCache: Function[] = [];\n    //private static readonly chipFunctionCache: Function[] = [];\n    //private static readonly pulseFunctionCache: Function[] = [];\n    //private static readonly harmonicsFunctionCache: Function[] = [];\n    //private static readonly loopableChipFunctionCache: Function[][] = Array(Config.unisonVoicesMax + 1).fill([]); //For loopable chips, we have a matrix where the rows represent voices and the columns represent loop types\n\n    readonly channels: ChannelState[] = [];\n    private readonly tonePool: Deque<Tone> = new Deque<Tone>();\n    private readonly tempMatchedPitchTones: Array<Tone | null> = Array(Config.maxChordSize).fill(null);\n\n    private startedMetronome = false;\n    private metronomeSamplesRemaining = -1;\n    private metronomeAmplitude = 0.0;\n    private metronomePrevAmplitude = 0.0;\n    private metronomeFilter = 0.0;\n    private limit = 0.0;\n\n    songEqFilterVolume = 1.0;\n    songEqFilterVolumeDelta = 0.0;\n    readonly songEqFiltersL: DynamicBiquadFilter[] = [];\n    readonly songEqFiltersR: DynamicBiquadFilter[] = [];\n    songEqFilterCount = 0;\n    initialSongEqFilterInput1L = 0.0;\n    initialSongEqFilterInput2L = 0.0;\n    initialSongEqFilterInput1R = 0.0;\n    initialSongEqFilterInput2R = 0.0;\n\n    private tempInstrumentSampleBufferL: Float32Array | null = null;\n    private tempInstrumentSampleBufferR: Float32Array | null = null;\n\n    private audioCtx: any | null = null;\n    private scriptNode: any | null = null;\n\n    get playing(): boolean {\n        return this.isPlayingSong;\n    }\n\n    get recording(): boolean {\n        return this.isRecording;\n    }\n\n    get playhead(): number {\n        return this.playheadInternal;\n    }\n\n    set playhead(value: number) {\n        if (this.song != null) {\n            this.playheadInternal = Math.max(0, Math.min(this.song.barCount, value));\n            let remainder = this.playheadInternal;\n            this.bar = Math.floor(remainder);\n            remainder = this.song.beatsPerBar * (remainder - this.bar);\n            this.beat = Math.floor(remainder);\n            remainder = Config.partsPerBeat * (remainder - this.beat);\n            this.part = Math.floor(remainder);\n            remainder = Config.ticksPerPart * (remainder - this.part);\n            this.tick = Math.floor(remainder);\n            this.tickSampleCountdown = 0;\n            this.isAtStartOfTick = true;\n            this.prevBar = null;\n        }\n    }\n\n    getSamplesPerBar(): number {\n        if (this.song == null) throw new Error();\n        return this.getSamplesPerTick() * Config.ticksPerPart * Config.partsPerBeat * this.song.beatsPerBar;\n    }\n\n    getTicksIntoBar(): number {\n        return (this.beat * Config.partsPerBeat + this.part) * Config.ticksPerPart + this.tick;\n    }\n    getCurrentPart(): number {\n        return (this.beat * Config.partsPerBeat + this.part);\n    }\n\n    private findPartsInBar(bar: number): number {\n        if (this.song == null) return 0;\n        let partsInBar = Config.partsPerBeat * this.song.beatsPerBar;\n        for (let channel = this.song.pitchChannelCount + this.song.noiseChannelCount; channel < this.song.getChannelCount(); channel++) {\n            let pattern: Pattern | null = this.song.getPattern(channel, bar);\n            if (pattern != null) {\n                let instrument = this.song.channels[channel].instruments[pattern.instruments[0]];\n                for (let mod = 0; mod < Config.modCount; mod++) {\n                    if (instrument.modulators[mod] == Config.modulators.dictionary[\"next bar\"].index) {\n                        for (const note of pattern.notes) {\n                            if (note.pitches[0] == (Config.modCount - 1 - mod)) {\n                                // Find the earliest next bar note.\n                                if (partsInBar > note.start)\n                                    partsInBar = note.start;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return partsInBar;\n    }\n\n    // Returns the total samples in the song\n    getTotalSamples(enableIntro: boolean, enableOutro: boolean, loop: number): number {\n        if (this.song == null)\n            return -1;\n\n        // Compute the window to be checked (start bar to end bar)\n        let startBar = enableIntro ? 0 : this.song.loopStart;\n        let endBar = enableOutro ? this.song.barCount : (this.song.loopStart + this.song.loopLength);\n        let hasTempoMods = false;\n        let hasNextBarMods = false;\n        let prevTempo = this.song.tempo;\n\n        // Determine if any tempo or next bar mods happen anywhere in the window\n        for (let channel = this.song.getChannelCount() - 1; channel >= this.song.pitchChannelCount + this.song.noiseChannelCount; channel--) {\n            for (let bar = startBar; bar < endBar; bar++) {\n                let pattern: Pattern | null = this.song.getPattern(channel, bar);\n                if (pattern != null) {\n                    let instrument = this.song.channels[channel].instruments[pattern.instruments[0]];\n                    for (let mod = 0; mod < Config.modCount; mod++) {\n                        if (instrument.modulators[mod] == Config.modulators.dictionary[\"tempo\"].index) {\n                            hasTempoMods = true;\n                        }\n                        if (instrument.modulators[mod] == Config.modulators.dictionary[\"next bar\"].index) {\n                            hasNextBarMods = true;\n                        }\n                    }\n                }\n            }\n        }\n\n        // If intro is not zero length, determine what the \"entry\" tempo is going into the start part, by looking at mods that came before...\n        if (startBar > 0) {\n            let latestTempoPin: number | null = null;\n            let latestTempoValue = 0;\n\n            for (let bar = startBar - 1; bar >= 0; bar--) {\n                for (let channel = this.song.getChannelCount() - 1; channel >= this.song.pitchChannelCount + this.song.noiseChannelCount; channel--) {\n                    let pattern = this.song.getPattern(channel, bar);\n\n                    if (pattern != null) {\n                        let instrumentIdx = pattern.instruments[0];\n                        let instrument = this.song.channels[channel].instruments[instrumentIdx];\n\n                        let partsInBar = this.findPartsInBar(bar);\n\n                        for (const note of pattern.notes) {\n                            if (instrument.modulators[Config.modCount - 1 - note.pitches[0]] == Config.modulators.dictionary[\"tempo\"].index) {\n                                if (note.start < partsInBar && (latestTempoPin == null || note.end > latestTempoPin)) {\n                                    if (note.end <= partsInBar) {\n                                        latestTempoPin = note.end;\n                                        latestTempoValue = note.pins[note.pins.length - 1].size;\n                                    }\n                                    else {\n                                        latestTempoPin = partsInBar;\n                                        // Find the pin where bar change happens, and compute where pin volume would be at that time\n                                        for (let pinIdx = 0; pinIdx < note.pins.length; pinIdx++) {\n                                            if (note.pins[pinIdx].time + note.start > partsInBar) {\n                                                const transitionLength = note.pins[pinIdx].time - note.pins[pinIdx - 1].time;\n                                                const toNextBarLength = partsInBar - note.start - note.pins[pinIdx - 1].time;\n                                                const deltaVolume = note.pins[pinIdx].size - note.pins[pinIdx - 1].size;\n\n                                                latestTempoValue = Math.round(note.pins[pinIdx - 1].size + deltaVolume * toNextBarLength / transitionLength);\n                                                pinIdx = note.pins.length;\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // Done once you process a pattern where tempo mods happened, since the search happens backward\n                if (latestTempoPin != null) {\n                    prevTempo = latestTempoValue + Config.modulators.dictionary[\"tempo\"].convertRealFactor;\n                    bar = -1;\n                }\n            }\n        }\n\n        if (hasTempoMods || hasNextBarMods) {\n            // Run from start bar to end bar and observe looping, computing average tempo across each bar\n            let bar = startBar;\n            let ended = false;\n            let totalSamples = 0;\n\n            while (!ended) {\n                // Compute the subsection of the pattern that will play\n                let partsInBar = Config.partsPerBeat * this.song.beatsPerBar;\n                let currentPart = 0;\n\n                if (hasNextBarMods) {\n                    partsInBar = this.findPartsInBar(bar);\n                }\n\n                // Compute average tempo in this tick window, or use last tempo if nothing happened\n                if (hasTempoMods) {\n                    let foundMod = false;\n                    for (let channel = this.song.getChannelCount() - 1; channel >= this.song.pitchChannelCount + this.song.noiseChannelCount; channel--) {\n                        if (foundMod == false) {\n                            let pattern: Pattern | null = this.song.getPattern(channel, bar);\n                            if (pattern != null) {\n                                let instrument = this.song.channels[channel].instruments[pattern.instruments[0]];\n                                for (let mod = 0; mod < Config.modCount; mod++) {\n                                    if (foundMod == false && instrument.modulators[mod] == Config.modulators.dictionary[\"tempo\"].index\n                                        && pattern.notes.find(n => n.pitches[0] == (Config.modCount - 1 - mod))) {\n                                        // Only the first tempo mod instrument for this bar will be checked (well, the first with a note in this bar).\n                                        foundMod = true;\n                                        // Need to re-sort the notes by start time to make the next part much less painful.\n                                        pattern.notes.sort(function (a, b) { return (a.start == b.start) ? a.pitches[0] - b.pitches[0] : a.start - b.start; });\n                                        for (const note of pattern.notes) {\n                                            if (note.pitches[0] == (Config.modCount - 1 - mod)) {\n                                                // Compute samples up to this note\n                                                totalSamples += (Math.min(partsInBar - currentPart, note.start - currentPart)) * Config.ticksPerPart * this.getSamplesPerTickSpecificBPM(prevTempo);\n\n                                                if (note.start < partsInBar) {\n                                                    for (let pinIdx = 1; pinIdx < note.pins.length; pinIdx++) {\n                                                        // Compute samples up to this pin\n                                                        if (note.pins[pinIdx - 1].time + note.start <= partsInBar) {\n                                                            const tickLength = Config.ticksPerPart * Math.min(partsInBar - (note.start + note.pins[pinIdx - 1].time), note.pins[pinIdx].time - note.pins[pinIdx - 1].time);\n                                                            const prevPinTempo = note.pins[pinIdx - 1].size + Config.modulators.dictionary[\"tempo\"].convertRealFactor;\n                                                            let currPinTempo = note.pins[pinIdx].size + Config.modulators.dictionary[\"tempo\"].convertRealFactor;\n                                                            if (note.pins[pinIdx].time + note.start > partsInBar) {\n                                                                // Compute an intermediary tempo since bar changed over mid-pin. Maybe I'm deep in \"what if\" territory now!\n                                                                currPinTempo = note.pins[pinIdx - 1].size + (note.pins[pinIdx].size - note.pins[pinIdx - 1].size) * (partsInBar - (note.start + note.pins[pinIdx - 1].time)) / (note.pins[pinIdx].time - note.pins[pinIdx - 1].time) + Config.modulators.dictionary[\"tempo\"].convertRealFactor;\n                                                            }\n                                                            let bpmScalar = Config.partsPerBeat * Config.ticksPerPart / 60;\n\n                                                            if (currPinTempo != prevPinTempo) {\n\n                                                                // Definite integral of SamplesPerTick w/r/t beats to find total samples from start point to end point for a variable tempo\n                                                                // The starting formula is\n                                                                // SamplesPerTick = SamplesPerSec / ((PartsPerBeat * TicksPerPart) / SecPerMin) * BeatsPerMin )\n                                                                //\n                                                                // This is an expression of samples per tick \"instantaneously\", and it can be multiplied by a number of ticks to get a sample count.\n                                                                // But this isn't the full story. BeatsPerMin, e.g. tempo, changes throughout the interval so it has to be expressed in terms of ticks, \"t\"\n                                                                // ( Also from now on PartsPerBeat, TicksPerPart, and SecPerMin are combined into one scalar, called \"BPMScalar\" )\n                                                                // Substituting BPM for a step variable that moves with respect to the current tick, we get\n                                                                // SamplesPerTick = SamplesPerSec / (BPMScalar * ( (EndTempo - StartTempo / TickLength) * t + StartTempo ) )\n                                                                //\n                                                                // When this equation is integrated from 0 to TickLength with respect to t, we get the following expression:\n                                                                //   Samples = - SamplesPerSec * TickLength * ( log( BPMScalar * EndTempo * TickLength ) - log( BPMScalar * StartTempo * TickLength ) ) / BPMScalar * ( StartTempo - EndTempo )\n\n                                                                totalSamples += - this.samplesPerSecond * tickLength * (Math.log(bpmScalar * currPinTempo * tickLength) - Math.log(bpmScalar * prevPinTempo * tickLength)) / (bpmScalar * (prevPinTempo - currPinTempo));\n\n                                                            }\n                                                            else {\n\n                                                                // No tempo change between the two pins.\n                                                                totalSamples += tickLength * this.getSamplesPerTickSpecificBPM(currPinTempo);\n\n                                                            }\n                                                            prevTempo = currPinTempo;\n                                                        }\n                                                        currentPart = Math.min(note.start + note.pins[pinIdx].time, partsInBar);\n                                                    }\n                                                }\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n\n                // Compute samples for the rest of the bar\n                totalSamples += (partsInBar - currentPart) * Config.ticksPerPart * this.getSamplesPerTickSpecificBPM(prevTempo);\n\n                bar++;\n                if (loop != 0 && bar == this.song.loopStart + this.song.loopLength) {\n                    bar = this.song.loopStart;\n                    if (loop > 0) loop--;\n                }\n                if (bar >= endBar) {\n                    ended = true;\n                }\n\n            }\n\n            return Math.ceil(totalSamples);\n        }\n        else {\n            // No tempo or next bar mods... phew! Just calculate normally.\n            return this.getSamplesPerBar() * this.getTotalBars(enableIntro, enableOutro, loop);\n        }\n    }\n\n    getTotalBars(enableIntro: boolean, enableOutro: boolean, useLoopCount = this.loopRepeatCount): number {\n        if (this.song == null) throw new Error();\n        let bars = this.song.loopLength * (useLoopCount + 1);\n        if (enableIntro) bars += this.song.loopStart;\n        if (enableOutro) bars += this.song.barCount - (this.song.loopStart + this.song.loopLength);\n        return bars;\n    }\n\n    constructor(song: Song | string | null = null) {\n        this.computeDelayBufferSizes();\n        if (song != null) this.setSong(song);\n    }\n\n    setSong(song: Song | string): void {\n        if (typeof (song) == \"string\") {\n            this.song = new Song(song);\n        } else if (song instanceof Song) {\n            this.song = song;\n        }\n        this.prevBar = null;\n    }\n\n    private computeDelayBufferSizes(): void {\n        this.panningDelayBufferSize = fittingPowerOfTwo(this.samplesPerSecond * Config.panDelaySecondsMax);\n        this.panningDelayBufferMask = this.panningDelayBufferSize - 1;\n        this.flangerDelayBufferSize = fittingPowerOfTwo(this.samplesPerSecond * Config.flangerMaxDelay);\n        this.flangerDelayBufferMask = this.flangerDelayBufferSize - 1;\n        this.chorusDelayBufferSize = fittingPowerOfTwo(this.samplesPerSecond * Config.chorusMaxDelay);\n        this.chorusDelayBufferMask = this.chorusDelayBufferSize - 1;\n    }\n\n    private activateAudio(): void {\n        const bufferSize = this.anticipatePoorPerformance ? (this.preferLowerLatency ? 2048 : 4096) : (this.preferLowerLatency ? 512 : 2048);\n        if (this.audioCtx == null || this.scriptNode == null || this.scriptNode.bufferSize != bufferSize) {\n            if (this.scriptNode != null) this.deactivateAudio();\n            const latencyHint = this.anticipatePoorPerformance ? (this.preferLowerLatency ? \"balanced\" : \"playback\") : (this.preferLowerLatency ? \"interactive\" : \"balanced\");\n            this.audioCtx = this.audioCtx || new (window.AudioContext || window.webkitAudioContext)({ latencyHint: latencyHint });\n            this.samplesPerSecond = this.audioCtx.sampleRate;\n            this.scriptNode = this.audioCtx.createScriptProcessor ? this.audioCtx.createScriptProcessor(bufferSize, 0, 2) : this.audioCtx.createJavaScriptNode(bufferSize, 0, 2); // bufferSize samples per callback buffer, 0 input channels, 2 output channels (left/right)\n            this.scriptNode.onaudioprocess = this.audioProcessCallback;\n            this.scriptNode.channelCountMode = 'explicit';\n            this.scriptNode.channelInterpretation = 'speakers';\n            this.scriptNode.connect(this.audioCtx.destination);\n\n            this.computeDelayBufferSizes();\n        }\n        this.audioCtx.resume();\n    }\n\n    private deactivateAudio(): void {\n        if (this.audioCtx != null && this.scriptNode != null) {\n            this.scriptNode.disconnect(this.audioCtx.destination);\n            this.scriptNode = null;\n            if (this.audioCtx.close) this.audioCtx.close(); // firefox is missing this function?\n            this.audioCtx = null;\n        }\n    }\n\n    maintainLiveInput(): void {\n        this.activateAudio();\n        this.liveInputEndTime = performance.now() + 10000.0;\n    }\n\n    play(): void {\n        if (this.isPlayingSong) return;\n        this.initModFilters(this.song);\n        this.computeLatestModValues();\n        this.activateAudio();\n        this.warmUpSynthesizer(this.song);\n        this.isPlayingSong = true;\n    }\n\n    pause(): void {\n        if (!this.isPlayingSong) return;\n        this.isPlayingSong = false;\n        this.isRecording = false;\n        this.preferLowerLatency = false;\n        this.modValues = [];\n        this.nextModValues = [];\n        this.heldMods = [];\n        if (this.song != null) {\n            this.song.inVolumeCap = 0.0;\n            this.song.outVolumeCap = 0.0;\n            this.song.outVolumeCapL = 0.0;\n            this.song.outVolumeCapR = 0.0;\n            this.song.tmpEqFilterStart = null;\n            this.song.tmpEqFilterEnd = null;\n            for (let channelIndex = 0; channelIndex < this.song.pitchChannelCount + this.song.noiseChannelCount; channelIndex++) {\n                this.modInsValues[channelIndex] = [];\n                this.nextModInsValues[channelIndex] = [];\n            }\n        }\n    }\n\n    startRecording(): void {\n        this.preferLowerLatency = true;\n        this.isRecording = true;\n        this.play();\n    }\n\n    resetEffects(): void {\n        this.limit = 0.0;\n        this.freeAllTones();\n        if (this.song != null) {\n            for (const channelState of this.channels) {\n                for (const instrumentState of channelState.instruments) {\n                    instrumentState.resetAllEffects();\n                }\n            }\n        }\n    }\n\n    setModValue(volumeStart: number, volumeEnd: number, channelIndex: number, instrumentIndex: number, setting: number): number {\n        let val = volumeStart + Config.modulators[setting].convertRealFactor;\n        let nextVal = volumeEnd + Config.modulators[setting].convertRealFactor;\n        if (Config.modulators[setting].forSong) {\n            if (this.modValues[setting] == null || this.modValues[setting] != val || this.nextModValues[setting] != nextVal) {\n                this.modValues[setting] = val;\n                this.nextModValues[setting] = nextVal;\n            }\n        } else {\n            if (this.modInsValues[channelIndex][instrumentIndex][setting] == null\n                || this.modInsValues[channelIndex][instrumentIndex][setting] != val\n                || this.nextModInsValues[channelIndex][instrumentIndex][setting] != nextVal) {\n                this.modInsValues[channelIndex][instrumentIndex][setting] = val;\n                this.nextModInsValues[channelIndex][instrumentIndex][setting] = nextVal;\n            }\n        }\n\n        return val;\n    }\n\n    getModValue(setting: number, channel?: number | null, instrument?: number | null, nextVal?: boolean): number {\n        const forSong = Config.modulators[setting].forSong;\n        if (forSong) {\n            if (this.modValues[setting] != null && this.nextModValues[setting] != null) {\n                return nextVal ? this.nextModValues[setting]! : this.modValues[setting]!;\n            }\n        } else if (channel != undefined && instrument != undefined) {\n            if (this.modInsValues[channel][instrument][setting] != null && this.nextModInsValues[channel][instrument][setting] != null) {\n                return nextVal ? this.nextModInsValues[channel][instrument][setting]! : this.modInsValues[channel][instrument][setting]!;\n            }\n        }\n        return -1;\n    }\n\n    // Checks if any mod is active for the given channel/instrument OR if any mod is active for the song scope. Could split the logic if needed later.\n    isAnyModActive(channel: number, instrument: number): boolean {\n        for (let setting = 0; setting < Config.modulators.length; setting++) {\n            if ((this.modValues != undefined && this.modValues[setting] != null)\n                || (this.modInsValues != undefined && this.modInsValues[channel] != undefined && this.modInsValues[channel][instrument] != undefined && this.modInsValues[channel][instrument][setting] != null)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    unsetMod(setting: number, channel?: number, instrument?: number) {\n        if (this.isModActive(setting) || (channel != undefined && instrument != undefined && this.isModActive(setting, channel, instrument))) {\n            this.modValues[setting] = null;\n            this.nextModValues[setting] = null;\n            for (let i = 0; i < this.heldMods.length; i++) {\n                if (channel != undefined && instrument != undefined) {\n                    if (this.heldMods[i].channelIndex == channel && this.heldMods[i].instrumentIndex == instrument && this.heldMods[i].setting == setting)\n                        this.heldMods.splice(i, 1);\n                } else {\n                    if (this.heldMods[i].setting == setting)\n                        this.heldMods.splice(i, 1);\n                }\n            }\n            if (channel != undefined && instrument != undefined) {\n                this.modInsValues[channel][instrument][setting] = null;\n                this.nextModInsValues[channel][instrument][setting] = null;\n            }\n        }\n    }\n\n    isFilterModActive(forNoteFilter: boolean, channelIdx: number, instrumentIdx: number, forSong?: boolean) {\n        const instrument = this.song!.channels[channelIdx].instruments[instrumentIdx];\n\n        if (forNoteFilter) {\n            if (instrument.noteFilterType)\n                return false;\n            if (instrument.tmpNoteFilterEnd != null)\n                return true;\n        }\n        else {\n            if (forSong) {\n                if (this?.song?.tmpEqFilterEnd != null)\n                    return true;\n            } else {\n                for (let i = 0; i < instrument.effects.length; i++) {\n                    let effect = instrument.effects[i] as Effect\n                    if (effect.eqFilterType)\n                        return false;\n                    if (effect.tmpEqFilterEnd != null)\n                        return true;\n                }\n            }\n        }\n\n        return false\n    }\n\n    isModActive(setting: number, channel?: number, instrument?: number): boolean {\n        const forSong = Config.modulators[setting].forSong;\n        if (forSong) {\n            return (this.modValues != undefined && this.modValues[setting] != null);\n        } else if (channel != undefined && instrument != undefined && this.modInsValues != undefined && this.modInsValues[channel] != null && this.modInsValues[channel][instrument] != null) {\n            return (this.modInsValues[channel][instrument][setting] != null);\n        }\n        return false;\n    }\n\n    // Force a modulator to be held at the given volumeStart for a brief duration.\n    forceHoldMods(volumeStart: number, channelIndex: number, instrumentIndex: number, setting: number): void {\n        let found = false;\n        for (let i = 0; i < this.heldMods.length; i++) {\n            if (this.heldMods[i].channelIndex == channelIndex && this.heldMods[i].instrumentIndex == instrumentIndex && this.heldMods[i].setting == setting) {\n                this.heldMods[i].volume = volumeStart;\n                this.heldMods[i].holdFor = 24;\n                found = true;\n            }\n        }\n        // Default: hold for 24 ticks / 12 parts (half a beat).\n        if (!found)\n            this.heldMods.push({ volume: volumeStart, channelIndex: channelIndex, instrumentIndex: instrumentIndex, setting: setting, holdFor: 24 });\n    }\n\n    snapToStart(): void {\n        this.bar = 0;\n        this.resetEffects();\n        this.snapToBar();\n    }\n\n    goToBar(bar: number): void {\n        this.bar = bar;\n        this.resetEffects();\n        this.playheadInternal = this.bar;\n    }\n\n    snapToBar(): void {\n        this.playheadInternal = this.bar;\n        this.beat = 0;\n        this.part = 0;\n        this.tick = 0;\n        this.tickSampleCountdown = 0;\n    }\n\n    jumpIntoLoop(): void {\n        if (!this.song) return;\n        if (this.bar < this.song.loopStart || this.bar >= this.song.loopStart + this.song.loopLength) {\n            const oldBar = this.bar;\n            this.bar = this.song.loopStart;\n            this.playheadInternal += this.bar - oldBar;\n\n            if (this.playing)\n                this.computeLatestModValues();\n        }\n    }\n\n    goToNextBar(): void {\n        if (!this.song) return;\n        this.prevBar = this.bar;\n        const oldBar = this.bar;\n        this.bar++;\n        if (this.bar >= this.song.barCount) {\n            this.bar = 0;\n        }\n        this.playheadInternal += this.bar - oldBar;\n\n        if (this.playing)\n            this.computeLatestModValues();\n    }\n\n    goToPrevBar(): void {\n        if (!this.song) return;\n        this.prevBar = null;\n        const oldBar = this.bar;\n        this.bar--;\n        if (this.bar < 0 || this.bar >= this.song.barCount) {\n            this.bar = this.song.barCount - 1;\n        }\n        this.playheadInternal += this.bar - oldBar;\n\n        if (this.playing)\n            this.computeLatestModValues();\n    }\n\n    private getNextBar(): number {\n        let nextBar = this.bar + 1;\n        if (this.isRecording) {\n            if (nextBar >= this.song!.barCount) {\n                nextBar = this.song!.barCount - 1;\n            }\n        } else if (this.bar == this.loopBarEnd && !this.renderingSong) {\n            nextBar = this.loopBarStart;\n        }\n        else if (this.loopRepeatCount != 0 && nextBar == Math.max(this.loopBarEnd + 1, this.song!.loopStart + this.song!.loopLength)) {\n            nextBar = this.song!.loopStart;\n        }\n        return nextBar;\n    }\n\n    skipBar(): void {\n        if (!this.song) return;\n        const samplesPerTick = this.getSamplesPerTick();\n        this.prevBar = this.bar; // Bugfix by LeoV\n        if (this.loopBarEnd != this.bar)\n            this.bar++;\n        else {\n            this.bar = this.loopBarStart;\n        }\n        this.beat = 0;\n        this.part = 0;\n        this.tick = 0;\n        this.tickSampleCountdown = samplesPerTick;\n        this.isAtStartOfTick = true;\n\n        if (this.loopRepeatCount != 0 && this.bar == Math.max(this.song.loopStart + this.song.loopLength, this.loopBarEnd)) {\n            this.bar = this.song.loopStart;\n            if (this.loopBarStart != -1)\n                this.bar = this.loopBarStart;\n            if (this.loopRepeatCount > 0) this.loopRepeatCount--;\n        }\n\n    }\n\n    private audioProcessCallback = (audioProcessingEvent: any): void => {\n        const outputBuffer = audioProcessingEvent.outputBuffer;\n        const outputDataL: Float32Array = outputBuffer.getChannelData(0);\n        const outputDataR: Float32Array = outputBuffer.getChannelData(1);\n\n        if (this.browserAutomaticallyClearsAudioBuffer && (outputDataL[0] != 0.0 || outputDataR[0] != 0.0 || outputDataL[outputBuffer.length - 1] != 0.0 || outputDataR[outputBuffer.length - 1] != 0.0)) {\n            // If the buffer is ever initially nonzero, then this must be an older browser that doesn't automatically clear the audio buffer.\n            this.browserAutomaticallyClearsAudioBuffer = false;\n        }\n        if (!this.browserAutomaticallyClearsAudioBuffer) {\n            // If this browser does not clear the buffer automatically, do so manually before continuing.\n            const length = outputBuffer.length;\n            for (let i = 0; i < length; i++) {\n                outputDataL[i] = 0.0;\n                outputDataR[i] = 0.0;\n            }\n        }\n\n        if (!this.isPlayingSong && performance.now() >= this.liveInputEndTime) {\n            this.deactivateAudio();\n        } else {\n            this.synthesize(outputDataL, outputDataR, outputBuffer.length, this.isPlayingSong);\n\n            if (this.oscEnabled) {\n                if (this.oscRefreshEventTimer <= 0) {\n                    events.raise(\"oscilloscopeUpdate\", outputDataL, outputDataR);\n                    this.oscRefreshEventTimer = 2;\n                } else {\n                    this.oscRefreshEventTimer--;\n                }\n            }\n        }\n    }\n\n    private computeSongState(samplesPerTick: number): void {\n        if (this.song == null) return;\n\n        const roundedSamplesPerTick = Math.ceil(samplesPerTick);\n        const samplesPerSecond = this.samplesPerSecond;\n\n        let eqFilterVolume = 1.0; //this.envelopeComputer.lowpassCutoffDecayVolumeCompensation;\n        if (this.song.eqFilterType) {\n            // Simple EQ filter (old style). For analysis, using random filters from normal style since they are N/A in this context.\n            const eqFilterSettingsStart = this.song.eqFilter;\n            if (this.song.eqSubFilters[1] == null)\n                this.song.eqSubFilters[1] = new FilterSettings();\n            const eqFilterSettingsEnd = this.song.eqSubFilters[1];\n\n            // Change location based on slider values\n            let startSimpleFreq = this.song.eqFilterSimpleCut;\n            let startSimpleGain = this.song.eqFilterSimplePeak;\n            let endSimpleFreq = this.song.eqFilterSimpleCut;\n            let endSimpleGain = this.song.eqFilterSimplePeak;\n\n            let filterChanges = false;\n\n            // if (synth.isModActive(Config.modulators.dictionary[\"eq filt cut\"].index, channelIndex, instrumentIndex)) {\n            //     startSimpleFreq = synth.getModValue(Config.modulators.dictionary[\"eq filt cut\"].index, channelIndex, instrumentIndex, false);\n            //     endSimpleFreq = synth.getModValue(Config.modulators.dictionary[\"eq filt cut\"].index, channelIndex, instrumentIndex, true);\n            //     filterChanges = true;\n            // }\n            // if (synth.isModActive(Config.modulators.dictionary[\"eq filt peak\"].index, channelIndex, instrumentIndex)) {\n            //     startSimpleGain = synth.getModValue(Config.modulators.dictionary[\"eq filt peak\"].index, channelIndex, instrumentIndex, false);\n            //     endSimpleGain = synth.getModValue(Config.modulators.dictionary[\"eq filt peak\"].index, channelIndex, instrumentIndex, true);\n            //     filterChanges = true;\n            // }\n\n            let startPoint: FilterControlPoint;\n\n            if (filterChanges) {\n                eqFilterSettingsStart.convertLegacySettingsForSynth(startSimpleFreq, startSimpleGain);\n                eqFilterSettingsEnd.convertLegacySettingsForSynth(endSimpleFreq, endSimpleGain);\n\n                startPoint = eqFilterSettingsStart.controlPoints[0];\n                let endPoint = eqFilterSettingsEnd.controlPoints[0];\n\n                startPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, 1.0, 1.0);\n                endPoint.toCoefficients(Synth.tempFilterEndCoefficients, samplesPerSecond, 1.0, 1.0);\n\n                if (this.songEqFiltersL.length < 1) this.songEqFiltersL[0] = new DynamicBiquadFilter();\n                this.songEqFiltersL[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\n                if (this.songEqFiltersR.length < 1) this.songEqFiltersR[0] = new DynamicBiquadFilter();\n                this.songEqFiltersR[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\n\n            } else {\n                eqFilterSettingsStart.convertLegacySettingsForSynth(startSimpleFreq, startSimpleGain, true);\n\n                startPoint = eqFilterSettingsStart.controlPoints[0];\n\n                startPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, 1.0, 1.0);\n\n                if (this.songEqFiltersL.length < 1) this.songEqFiltersL[0] = new DynamicBiquadFilter();\n                this.songEqFiltersL[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterStartCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\n                if (this.songEqFiltersR.length < 1) this.songEqFiltersR[0] = new DynamicBiquadFilter();\n                this.songEqFiltersR[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterStartCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\n\n            }\n\n            eqFilterVolume *= startPoint.getVolumeCompensationMult();\n\n            this.songEqFilterCount = 1;\n            eqFilterVolume = Math.min(3.0, eqFilterVolume);\n        } else {\n            const eqFilterSettings = (this.song.tmpEqFilterStart != null) ? this.song.tmpEqFilterStart : this.song.eqFilter;\n            //const eqAllFreqsEnvelopeStart = envelopeStarts[InstrumentAutomationIndex.eqFilterAllFreqs];\n            //const eqAllFreqsEnvelopeEnd = envelopeEnds[  InstrumentAutomationIndex.eqFilterAllFreqs];\n            for (let i = 0; i < eqFilterSettings.controlPointCount; i++) {\n                //const eqFreqEnvelopeStart = envelopeStarts[InstrumentAutomationIndex.eqFilterFreq0 + i];\n                //const eqFreqEnvelopeEnd = envelopeEnds[  InstrumentAutomationIndex.eqFilterFreq0 + i];\n                //const eqPeakEnvelopeStart = envelopeStarts[InstrumentAutomationIndex.eqFilterGain0 + i];\n                //const eqPeakEnvelopeEnd = envelopeEnds[  InstrumentAutomationIndex.eqFilterGain0 + i];\n                let startPoint = eqFilterSettings.controlPoints[i];\n                let endPoint = (this.song.tmpEqFilterEnd != null && this.song.tmpEqFilterEnd.controlPoints[i] != null) ? this.song.tmpEqFilterEnd.controlPoints[i] : eqFilterSettings.controlPoints[i];\n\n                // If switching dot type, do it all at once and do not try to interpolate since no valid interpolation exists.\n                if (startPoint.type != endPoint.type) {\n                    startPoint = endPoint;\n                }\n\n                startPoint.toCoefficients(Synth.tempFilterStartCoefficients, samplesPerSecond, /*eqAllFreqsEnvelopeStart * eqFreqEnvelopeStart*/ 1.0, /*eqPeakEnvelopeStart*/ 1.0);\n                endPoint.toCoefficients(Synth.tempFilterEndCoefficients, samplesPerSecond, /*eqAllFreqsEnvelopeEnd   * eqFreqEnvelopeEnd*/   1.0, /*eqPeakEnvelopeEnd*/   1.0);\n                if (this.songEqFiltersL.length <= i) this.songEqFiltersL[i] = new DynamicBiquadFilter();\n                this.songEqFiltersL[i].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\n                if (this.songEqFiltersR.length <= i) this.songEqFiltersR[i] = new DynamicBiquadFilter();\n                this.songEqFiltersR[i].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\n                eqFilterVolume *= startPoint.getVolumeCompensationMult();\n\n            }\n            this.songEqFilterCount = eqFilterSettings.controlPointCount;\n            eqFilterVolume = Math.min(3.0, eqFilterVolume);\n        }\n\n        let eqFilterVolumeStart = eqFilterVolume;\n        let eqFilterVolumeEnd = eqFilterVolume;\n\n        this.songEqFilterVolume = eqFilterVolumeStart;\n        this.songEqFilterVolumeDelta = (eqFilterVolumeEnd - eqFilterVolumeStart) / roundedSamplesPerTick;\n    }\n\n    synthesize(outputDataL: Float32Array, outputDataR: Float32Array, outputBufferLength: number, playSong = true): void {\n        if (this.song == null) {\n            for (let i = 0; i < outputBufferLength; i++) {\n                outputDataL[i] = 0.0;\n                outputDataR[i] = 0.0;\n            }\n            this.deactivateAudio();\n            return;\n        }\n\n        const song = this.song;\n        this.song.inVolumeCap = 0.0 // Reset volume cap for this run\n        this.song.outVolumeCap = 0.0;\n        this.song.outVolumeCapL = 0.0;\n        this.song.outVolumeCapR = 0.0;\n\n        let samplesPerTick = this.getSamplesPerTick();\n        let ended = false;\n\n        // Check the bounds of the playhead:\n        if (this.tickSampleCountdown <= 0 || this.tickSampleCountdown > samplesPerTick) {\n            this.tickSampleCountdown = samplesPerTick;\n            this.isAtStartOfTick = true;\n        }\n        if (playSong) {\n            if (this.beat >= song.beatsPerBar) {\n                this.beat = 0;\n                this.part = 0;\n                this.tick = 0;\n                this.tickSampleCountdown = samplesPerTick;\n                this.isAtStartOfTick = true;\n\n                this.prevBar = this.bar;\n                this.bar = this.getNextBar();\n                if (this.bar <= this.prevBar && this.loopRepeatCount > 0) this.loopRepeatCount--;\n\n            }\n            if (this.bar >= song.barCount) {\n                this.bar = 0;\n                if (this.loopRepeatCount != -1) {\n                    ended = true;\n                    this.pause();\n                }\n            }\n        }\n\n        //const synthStartTime = performance.now();\n\n        this.syncSongState();\n\n        if (this.tempInstrumentSampleBufferL == null || this.tempInstrumentSampleBufferL.length < outputBufferLength || this.tempInstrumentSampleBufferR == null || this.tempInstrumentSampleBufferR.length < outputBufferLength) {\n            this.tempInstrumentSampleBufferL = new Float32Array(outputBufferLength);\n            this.tempInstrumentSampleBufferR = new Float32Array(outputBufferLength);\n        }\n\n        // Post processing parameters:\n        const volume = +this.volume;\n        const limitDecay = 1.0 - Math.pow(0.5, this.song.limitDecay / this.samplesPerSecond);\n        const limitRise = 1.0 - Math.pow(0.5, this.song.limitRise / this.samplesPerSecond);\n        let limit = +this.limit;\n        let skippedBars = [];\n        let firstSkippedBufferIndex = -1;\n\n        let bufferIndex = 0;\n        while (bufferIndex < outputBufferLength && !ended) {\n\n            this.nextBar = this.getNextBar();\n            if (this.nextBar >= song.barCount) this.nextBar = null;\n\n            const samplesLeftInBuffer = outputBufferLength - bufferIndex;\n            const samplesLeftInTick = Math.ceil(this.tickSampleCountdown);\n            const runLength = Math.min(samplesLeftInTick, samplesLeftInBuffer);\n            const runEnd = bufferIndex + runLength;\n\n            // Handle mod synth\n            if (this.isPlayingSong || this.renderingSong) {\n\n                // First modulation pass. Determines active tones.\n                // Runs everything but Dot X/Y mods, to let them always come after morph.\n                for (let channelIndex = song.pitchChannelCount + song.noiseChannelCount; channelIndex < song.getChannelCount(); channelIndex++) {\n                    const channel = song.channels[channelIndex];\n                    const channelState = this.channels[channelIndex];\n\n                    this.determineCurrentActiveTones(song, channelIndex, samplesPerTick, playSong);\n                    for (let instrumentIndex = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n                        const instrumentState = channelState.instruments[instrumentIndex];\n                        for (let i = 0; i < instrumentState.activeModTones.count(); i++) {\n                            const tone = instrumentState.activeModTones.get(i);\n                            const channel = song.channels[channelIndex];\n                            const instrument = channel.instruments[tone.instrumentIndex];\n                            let mod = Config.modCount - 1 - tone.pitches[0];\n\n                            if ((instrument.modulators[mod] == Config.modulators.dictionary[\"pre eq\"].index\n                                || instrument.modulators[mod] == Config.modulators.dictionary[\"post eq\"].index\n                                || instrument.modulators[mod] == Config.modulators.dictionary[\"song eq\"].index)\n                                && instrument.modFilterTypes[mod] != null && instrument.modFilterTypes[mod] > 0) {\n                                continue;\n                            }\n                            this.playModTone(song, channelIndex, samplesPerTick, bufferIndex, runLength, tone, false, false);\n                        }\n                    }\n                }\n\n                // Second modulation pass.\n                // Only for Dot X/Y mods.\n                for (let channelIndex = song.pitchChannelCount + song.noiseChannelCount; channelIndex < song.getChannelCount(); channelIndex++) {\n                    const channel = song.channels[channelIndex];\n                    const channelState = this.channels[channelIndex];\n\n                    for (let instrumentIndex = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n                        const instrumentState = channelState.instruments[instrumentIndex];\n                        for (let i = 0; i < instrumentState.activeModTones.count(); i++) {\n                            const tone = instrumentState.activeModTones.get(i);\n                            const channel = song.channels[channelIndex];\n                            const instrument = channel.instruments[tone.instrumentIndex];\n                            let mod = Config.modCount - 1 - tone.pitches[0];\n\n                            if ((instrument.modulators[mod] == Config.modulators.dictionary[\"pre eq\"].index\n                                || instrument.modulators[mod] == Config.modulators.dictionary[\"post eq\"].index\n                                || instrument.modulators[mod] == Config.modulators.dictionary[\"song eq\"].index)\n                                && instrument.modFilterTypes[mod] != null && instrument.modFilterTypes[mod] > 0) {\n\n                                this.playModTone(song, channelIndex, samplesPerTick, bufferIndex, runLength, tone, false, false);\n                            }\n\n                        }\n                    }\n                }\n            }\n\n            // Handle next bar mods if they were set\n            if (this.wantToSkip) {\n                // Unable to continue, as we have skipped back to a previously visited bar without generating new samples, which means we are infinitely skipping.\n                // In this case processing will return before the designated number of samples are processed. In other words, silence will be generated.\n                let barVisited = skippedBars.includes(this.bar);\n                if (barVisited && bufferIndex == firstSkippedBufferIndex) {\n                    this.pause();\n                    return;\n                }\n                if (firstSkippedBufferIndex == -1) {\n                    firstSkippedBufferIndex = bufferIndex;\n                }\n                if (!barVisited)\n                    skippedBars.push(this.bar);\n                this.wantToSkip = false;\n                this.skipBar();\n                continue;\n            }\n\n            this.computeSongState(samplesPerTick);\n\n            for (let channelIndex = 0; channelIndex < song.pitchChannelCount + song.noiseChannelCount; channelIndex++) {\n                const channel = song.channels[channelIndex];\n                const channelState = this.channels[channelIndex];\n\n                if (this.isAtStartOfTick) {\n                    this.determineCurrentActiveTones(song, channelIndex, samplesPerTick, playSong && !this.countInMetronome);\n                    this.determineLiveInputTones(song, channelIndex, samplesPerTick);\n                }\n                for (let instrumentIndex = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n                    const instrument = channel.instruments[instrumentIndex];\n                    const instrumentState = channelState.instruments[instrumentIndex];\n\n                    if (this.isAtStartOfTick) {\n                        let tonesPlayedInThisInstrument = instrumentState.activeTones.count() + instrumentState.liveInputTones.count();\n\n                        for (let i = 0; i < instrumentState.releasedTones.count(); i++) {\n                            const tone = instrumentState.releasedTones.get(i);\n                            if (tone.ticksSinceReleased >= Math.abs(instrument.getFadeOutTicks())) {\n                                this.freeReleasedTone(instrumentState, i);\n                                i--;\n                                continue;\n                            }\n                            const shouldFadeOutFast = (tonesPlayedInThisInstrument >= Config.maximumTonesPerChannel);\n                            this.computeTone(song, channelIndex, samplesPerTick, tone, true, shouldFadeOutFast);\n                            tonesPlayedInThisInstrument++;\n                        }\n\n                        if (instrumentState.awake) {\n                            if (!instrumentState.computed) {\n                                instrumentState.compute(this, instrument, samplesPerTick, Math.ceil(samplesPerTick), null, channelIndex, instrumentIndex);\n                            }\n\n                            instrumentState.computed = false;\n                            instrumentState.envelopeComputer.clearEnvelopes();\n                        }\n                    }\n\n                    for (let i = 0; i < instrumentState.activeTones.count(); i++) {\n                        const tone = instrumentState.activeTones.get(i);\n                        this.playTone(channelIndex, bufferIndex, runLength, tone);\n                    }\n\n                    for (let i = 0; i < instrumentState.liveInputTones.count(); i++) {\n                        const tone = instrumentState.liveInputTones.get(i);\n                        this.playTone(channelIndex, bufferIndex, runLength, tone);\n                    }\n\n                    for (let i = 0; i < instrumentState.releasedTones.count(); i++) {\n                        const tone = instrumentState.releasedTones.get(i);\n                        this.playTone(channelIndex, bufferIndex, runLength, tone);\n                    }\n\n                    if (instrumentState.awake) {\n                        Synth.effectsSynth(this, outputDataL, outputDataR, bufferIndex, runLength, instrumentState);\n                    }\n\n                    // Update LFO time for instruments (used to be deterministic based on bar position but now vibrato/arp speed messes that up!)\n\n                    const tickSampleCountdown = this.tickSampleCountdown;\n                    const startRatio = 1.0 - (tickSampleCountdown) / samplesPerTick;\n                    const endRatio = 1.0 - (tickSampleCountdown - runLength) / samplesPerTick;\n                    const ticksIntoBar = (this.beat * Config.partsPerBeat + this.part) * Config.ticksPerPart + this.tick;\n                    const partTimeTickStart = (ticksIntoBar) / Config.ticksPerPart;\n                    const partTimeTickEnd = (ticksIntoBar + 1) / Config.ticksPerPart;\n                    const partTimeStart = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * startRatio;\n                    const partTimeEnd = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * endRatio;\n                    let useVibratoSpeed = instrument.vibratoSpeed;\n\n                    instrumentState.vibratoTime = instrumentState.nextVibratoTime;\n\n                    //envelopeable vibrato speed?\n\n                    if (this.isModActive(Config.modulators.dictionary[\"vibrato speed\"].index, channelIndex, instrumentIndex)) {\n                        useVibratoSpeed = this.getModValue(Config.modulators.dictionary[\"vibrato speed\"].index, channelIndex, instrumentIndex);\n                    }\n\n                    if (useVibratoSpeed == 0) {\n                        instrumentState.vibratoTime = 0;\n                        instrumentState.nextVibratoTime = 0;\n                    }\n                    else {\n                        instrumentState.nextVibratoTime += useVibratoSpeed * 0.1 * (partTimeEnd - partTimeStart);\n                    }\n                }\n            }\n\n            if (this.enableMetronome || this.countInMetronome) {\n                if (this.part == 0) {\n                    if (!this.startedMetronome) {\n                        const midBeat = (song.beatsPerBar > 4 && (song.beatsPerBar % 2 == 0) && this.beat == song.beatsPerBar / 2);\n                        const periods = (this.beat == 0) ? 8 : midBeat ? 6 : 4;\n                        const hz = (this.beat == 0) ? 1600 : midBeat ? 1200 : 800;\n                        const amplitude = (this.beat == 0) ? 0.06 : midBeat ? 0.05 : 0.04;\n                        const samplesPerPeriod = this.samplesPerSecond / hz;\n                        const radiansPerSample = Math.PI * 2.0 / samplesPerPeriod;\n                        this.metronomeSamplesRemaining = Math.floor(samplesPerPeriod * periods);\n                        this.metronomeFilter = 2.0 * Math.cos(radiansPerSample);\n                        this.metronomeAmplitude = amplitude * Math.sin(radiansPerSample);\n                        this.metronomePrevAmplitude = 0.0;\n\n                        this.startedMetronome = true;\n                    }\n                    if (this.metronomeSamplesRemaining > 0) {\n                        const stopIndex = Math.min(runEnd, bufferIndex + this.metronomeSamplesRemaining);\n                        this.metronomeSamplesRemaining -= stopIndex - bufferIndex;\n                        for (let i = bufferIndex; i < stopIndex; i++) {\n                            outputDataL[i] += this.metronomeAmplitude;\n                            outputDataR[i] += this.metronomeAmplitude;\n                            const tempAmplitude = this.metronomeFilter * this.metronomeAmplitude - this.metronomePrevAmplitude;\n                            this.metronomePrevAmplitude = this.metronomeAmplitude;\n                            this.metronomeAmplitude = tempAmplitude;\n                        }\n                    }\n                } else {\n                    this.startedMetronome = false;\n                }\n            }\n\n            // Post processing:\n            for (let i = bufferIndex; i < runEnd; i++) {\n                //Song EQ\n                {\n                    let filtersL = this.songEqFiltersL;\n                    let filtersR = this.songEqFiltersR;\n                    const filterCount = this.songEqFilterCount | 0;\n                    let initialFilterInput1L = +this.initialSongEqFilterInput1L;\n                    let initialFilterInput2L = +this.initialSongEqFilterInput2L;\n                    let initialFilterInput1R = +this.initialSongEqFilterInput1R;\n                    let initialFilterInput2R = +this.initialSongEqFilterInput2R;\n                    const applyFilters = Synth.applyFilters;\n                    let eqFilterVolume = +this.songEqFilterVolume;\n                    const eqFilterVolumeDelta = +this.songEqFilterVolumeDelta;\n                    const inputSampleL = outputDataL[i];\n                    let sampleL = inputSampleL;\n                    sampleL = applyFilters(sampleL, initialFilterInput1L, initialFilterInput2L, filterCount, filtersL);\n                    initialFilterInput2L = initialFilterInput1L;\n                    initialFilterInput1L = inputSampleL;\n                    sampleL *= eqFilterVolume;\n                    outputDataL[i] = sampleL;\n                    const inputSampleR = outputDataR[i];\n                    let sampleR = inputSampleR;\n                    sampleR = applyFilters(sampleR, initialFilterInput1R, initialFilterInput2R, filterCount, filtersR);\n                    initialFilterInput2R = initialFilterInput1R;\n                    initialFilterInput1R = inputSampleR;\n                    sampleR *= eqFilterVolume;\n                    outputDataR[i] = sampleR;\n                    eqFilterVolume += eqFilterVolumeDelta;\n                    this.sanitizeFilters(filtersL);\n                    // The filter input here is downstream from another filter so we\n                    // better make sure it's safe too.\n                    if (!(initialFilterInput1L < 100) || !(initialFilterInput2L < 100)) {\n                        initialFilterInput1L = 0.0;\n                        initialFilterInput2L = 0.0;\n                    }\n                    if (Math.abs(initialFilterInput1L) < epsilon) initialFilterInput1L = 0.0;\n                    if (Math.abs(initialFilterInput2L) < epsilon) initialFilterInput2L = 0.0;\n                    this.initialSongEqFilterInput1L = initialFilterInput1L;\n                    this.initialSongEqFilterInput2L = initialFilterInput2L;\n                    this.sanitizeFilters(filtersR);\n                    if (!(initialFilterInput1R < 100) || !(initialFilterInput2R < 100)) {\n                        initialFilterInput1R = 0.0;\n                        initialFilterInput2R = 0.0;\n                    }\n                    if (Math.abs(initialFilterInput1R) < epsilon) initialFilterInput1R = 0.0;\n                    if (Math.abs(initialFilterInput2R) < epsilon) initialFilterInput2R = 0.0;\n                    this.initialSongEqFilterInput1R = initialFilterInput1R;\n                    this.initialSongEqFilterInput2R = initialFilterInput2R;\n                }\n\n                // A compressor/limiter.\n                const sampleL = outputDataL[i] * song.masterGain * song.masterGain;\n                const sampleR = outputDataR[i] * song.masterGain * song.masterGain;\n                const absL = sampleL < 0.0 ? -sampleL : sampleL;\n                const absR = sampleR < 0.0 ? -sampleR : sampleR;\n                const abs = absL > absR ? absL : absR;\n                this.song.inVolumeCap = (this.song.inVolumeCap > abs ? this.song.inVolumeCap : abs); // Analytics, spit out raw input volume\n                // Determines which formula to use. 0 when volume is between [0, compressionThreshold], 1 when between (compressionThreshold, limitThreshold], 2 above\n                const limitRange = (+(abs > song.compressionThreshold)) + (+(abs > song.limitThreshold));\n                // Determine the target amplification based on the range of the curve\n                const limitTarget =\n                    (+(limitRange == 0)) * (((abs + 1 - song.compressionThreshold) * 0.8 + 0.25) * song.compressionRatio + 1.05 * (1 - song.compressionRatio))\n                    + (+(limitRange == 1)) * (1.05)\n                    + (+(limitRange == 2)) * (1.05 * ((abs + 1 - song.limitThreshold) * song.limitRatio + (1 - song.limitThreshold)));\n                // Move the limit towards the target\n                limit += ((limitTarget - limit) * (limit < limitTarget ? limitRise : limitDecay));\n                const limitedVolume = volume / (limit >= 1 ? limit * 1.05 : limit * 0.8 + 0.25);\n                outputDataL[i] = sampleL * limitedVolume;\n                outputDataR[i] = sampleR * limitedVolume;\n\n                this.song.outVolumeCap = (this.song.outVolumeCap > abs * limitedVolume ? this.song.outVolumeCap : abs * limitedVolume); // Analytics, spit out limited output volume\n                this.song.outVolumeCapL = (this.song.outVolumeCapL > absL * limitedVolume ? this.song.outVolumeCapL : absL * limitedVolume);\n                this.song.outVolumeCapR = (this.song.outVolumeCapR > absR * limitedVolume ? this.song.outVolumeCapR : absR * limitedVolume);\n            }\n\n            bufferIndex += runLength;\n\n            this.isAtStartOfTick = false;\n            this.tickSampleCountdown -= runLength;\n            if (this.tickSampleCountdown <= 0) {\n                this.isAtStartOfTick = true;\n\n                // Track how long tones have been released, and free them if there are too many.\n                // Also reset awake InstrumentStates that didn't have any Tones during this tick.\n                for (const channelState of this.channels) {\n                    for (const instrumentState of channelState.instruments) {\n                        for (let i = 0; i < instrumentState.releasedTones.count(); i++) {\n                            const tone = instrumentState.releasedTones.get(i);\n                            if (tone.isOnLastTick) {\n                                this.freeReleasedTone(instrumentState, i);\n                                i--;\n                            } else {\n                                tone.ticksSinceReleased++;\n                            }\n                        }\n                        if (instrumentState.deactivateAfterThisTick) {\n                            instrumentState.deactivate();\n                        }\n                        instrumentState.tonesAddedInThisTick = false;\n                    }\n                }\n                const ticksIntoBar = this.getTicksIntoBar();\n                const tickTimeStart = ticksIntoBar;\n                const secondsPerTick = samplesPerTick / this.samplesPerSecond;\n                const currentPart = this.getCurrentPart();\n                for (let channel = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\n                    for (let instrumentIdx = 0; instrumentIdx < this.song.channels[channel].instruments.length; instrumentIdx++) {\n                        let instrument = this.song.channels[channel].instruments[instrumentIdx];\n                        let instrumentState = this.channels[channel].instruments[instrumentIdx];\n\n                        // Update envelope time, which is used to calculate (all envelopes') position\n                        const envelopeComputer = instrumentState.envelopeComputer;\n                        const envelopeSpeeds: number[] = [];\n                        for (let i = 0; i < Config.maxEnvelopeCount; i++) {\n                            envelopeSpeeds[i] = 0;\n                        }\n                        for (let envelopeIndex = 0; envelopeIndex < instrument.envelopeCount; envelopeIndex++) {\n                            let useEnvelopeSpeed = instrument.envelopeSpeed;\n                            let perEnvelopeSpeed = instrument.envelopes[envelopeIndex].perEnvelopeSpeed;\n                            if (this.isModActive(Config.modulators.dictionary[\"individual envelope speed\"].index, channel, instrumentIdx) && instrument.envelopes[envelopeIndex].tempEnvelopeSpeed != null) {\n                                perEnvelopeSpeed = instrument.envelopes[envelopeIndex].tempEnvelopeSpeed!;\n                            }\n                            if (this.isModActive(Config.modulators.dictionary[\"envelope speed\"].index, channel, instrumentIdx)) {\n                                useEnvelopeSpeed = Math.max(0, Math.min(Config.arpSpeedScale.length - 1, this.getModValue(Config.modulators.dictionary[\"envelope speed\"].index, channel, instrumentIdx, false)));\n                                if (Number.isInteger(useEnvelopeSpeed)) {\n                                    instrumentState.envelopeTime[envelopeIndex] += Config.arpSpeedScale[useEnvelopeSpeed] * perEnvelopeSpeed;\n                                } else {\n                                    // Linear interpolate envelope values\n                                    instrumentState.envelopeTime[envelopeIndex] += ((1 - (useEnvelopeSpeed % 1)) * Config.arpSpeedScale[Math.floor(useEnvelopeSpeed)] + (useEnvelopeSpeed % 1) * Config.arpSpeedScale[Math.ceil(useEnvelopeSpeed)]) * perEnvelopeSpeed;\n                                }\n                            }\n                            else {\n                                instrumentState.envelopeTime[envelopeIndex] += Config.arpSpeedScale[useEnvelopeSpeed] * perEnvelopeSpeed;\n                            }\n                        }\n\n                        if (instrumentState.activeTones.count() > 0) {\n                            const tone = instrumentState.activeTones.get(0);\n                            envelopeComputer.computeEnvelopes(instrument, currentPart, instrumentState.envelopeTime, tickTimeStart, secondsPerTick, tone, envelopeSpeeds, instrumentState, this, channel, instrumentIdx);\n                        }\n                        const envelopeStarts: number[] = envelopeComputer.envelopeStarts;\n                        //const envelopeEnds: number[] = envelopeComputer.envelopeEnds;\n\n                        // Update arpeggio time, which is used to calculate arpeggio position\n                        const arpEnvelopeStart = envelopeStarts[EnvelopeComputeIndex.arpeggioSpeed]; //only discrete for now\n                        //const arpEnvelopeEnd = envelopeEnds[EnvelopeComputeIndex.arpeggioSpeed];\n                        let useArpeggioSpeed = instrument.arpeggioSpeed;\n                        if (this.isModActive(Config.modulators.dictionary[\"arp speed\"].index, channel, instrumentIdx)) {\n                            useArpeggioSpeed = clamp(0, Config.arpSpeedScale.length, arpEnvelopeStart * this.getModValue(Config.modulators.dictionary[\"arp speed\"].index, channel, instrumentIdx, false));\n                            if (Number.isInteger(useArpeggioSpeed)) {\n                                instrumentState.arpTime += Config.arpSpeedScale[useArpeggioSpeed];\n                            } else {\n                                // Linear interpolate arpeggio values\n                                instrumentState.arpTime += (1 - (useArpeggioSpeed % 1)) * Config.arpSpeedScale[Math.floor(useArpeggioSpeed)] + (useArpeggioSpeed % 1) * Config.arpSpeedScale[Math.ceil(useArpeggioSpeed)];\n                            }\n                        }\n                        else {\n                            useArpeggioSpeed = clamp(0, Config.arpSpeedScale.length, arpEnvelopeStart * useArpeggioSpeed);\n                            if (Number.isInteger(useArpeggioSpeed)) {\n                                instrumentState.arpTime += Config.arpSpeedScale[useArpeggioSpeed];\n                            } else {\n                                // Linear interpolate arpeggio values\n                                instrumentState.arpTime += (1 - (useArpeggioSpeed % 1)) * Config.arpSpeedScale[Math.floor(useArpeggioSpeed)] + (useArpeggioSpeed % 1) * Config.arpSpeedScale[Math.ceil(useArpeggioSpeed)];\n                            }\n                        }\n                        envelopeComputer.clearEnvelopes();\n\n                    }\n                }\n\n                // Update next-used filters after each run\n                for (let channel = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\n                    for (let instrumentIdx = 0; instrumentIdx < this.song.channels[channel].instruments.length; instrumentIdx++) {\n                        let instrument = this.song.channels[channel].instruments[instrumentIdx];\n                        for (let effectIdx = 0; effectIdx < instrument.effects.length; effectIdx++) {\n                            let effect = instrument.effects[effectIdx] as Effect;\n                            if (effect.tmpEqFilterEnd != null) {\n                                effect.tmpEqFilterStart = effect.tmpEqFilterEnd;\n                            } else {\n                                effect.tmpEqFilterStart = effect.eqFilter;\n                            }\n                        }\n                        if (instrument.tmpNoteFilterEnd != null) {\n                            instrument.tmpNoteFilterStart = instrument.tmpNoteFilterEnd;\n                        } else {\n                            instrument.tmpNoteFilterStart = instrument.noteFilter;\n                        }\n                    }\n                }\n                if (song.tmpEqFilterEnd != null) {\n                    song.tmpEqFilterStart = song.tmpEqFilterEnd;\n                } else {\n                    song.tmpEqFilterStart = song.eqFilter;\n                }\n\n                this.tick++;\n                this.tickSampleCountdown += samplesPerTick;\n                if (this.tick == Config.ticksPerPart) {\n                    this.tick = 0;\n                    this.part++;\n                    this.liveInputDuration--;\n                    this.liveBassInputDuration--;\n                    // Decrement held modulator counters after each run\n                    for (let i = 0; i < this.heldMods.length; i++) {\n                        this.heldMods[i].holdFor--;\n                        if (this.heldMods[i].holdFor <= 0) {\n                            this.heldMods.splice(i, 1);\n                        }\n                    }\n\n                    if (this.part == Config.partsPerBeat) {\n                        this.part = 0;\n\n                        if (playSong) {\n                            this.beat++;\n                            if (this.beat == song.beatsPerBar) {\n                                // bar changed, reset for next bar:\n                                this.beat = 0;\n\n                                if (this.countInMetronome) {\n                                    this.countInMetronome = false;\n                                } else {\n                                    this.prevBar = this.bar;\n                                    this.bar = this.getNextBar();\n                                    if (this.bar <= this.prevBar && this.loopRepeatCount > 0) this.loopRepeatCount--;\n\n                                    if (this.bar >= song.barCount) {\n                                        this.bar = 0;\n                                        if (this.loopRepeatCount != -1) {\n                                            ended = true;\n                                            this.resetEffects();\n                                            this.pause();\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            // Update mod values so that next values copy to current values\n            for (let setting = 0; setting < Config.modulators.length; setting++) {\n                if (this.nextModValues != null && this.nextModValues[setting] != null)\n                    this.modValues[setting] = this.nextModValues[setting];\n            }\n\n            // Set samples per tick if song tempo mods changed it\n            if (this.isModActive(Config.modulators.dictionary[\"tempo\"].index)) {\n                samplesPerTick = this.getSamplesPerTick();\n                this.tickSampleCountdown = Math.min(this.tickSampleCountdown, samplesPerTick);\n            }\n\n            // Bound LFO times to be within their period (to keep values from getting large)\n            // I figured this modulo math probably doesn't have to happen every LFO tick.\n            for (let channelIndex = 0; channelIndex < this.song.pitchChannelCount + this.song.noiseChannelCount; channelIndex++) {\n                for (let instrumentIndex = 0; instrumentIndex < this.channels[channelIndex].instruments.length; instrumentIndex++) {\n                    const instrumentState = this.channels[channelIndex].instruments[instrumentIndex];\n                    const instrument = this.song.channels[channelIndex].instruments[instrumentIndex];\n                    instrumentState.nextVibratoTime = (instrumentState.nextVibratoTime % (Config.vibratoTypes[instrument.vibratoType].period / (Config.ticksPerPart * samplesPerTick / this.samplesPerSecond)));\n                    instrumentState.arpTime = (instrumentState.arpTime % (2520 * Config.ticksPerArpeggio)); // 2520 = LCM of 4, 5, 6, 7, 8, 9 (arp sizes)\n                    for (let envelopeIndex = 0; envelopeIndex < instrument.envelopeCount; envelopeIndex++) {\n                        instrumentState.envelopeTime[envelopeIndex] = (instrumentState.envelopeTime[envelopeIndex] % (Config.partsPerBeat * Config.ticksPerPart * this.song.beatsPerBar));\n                    }\n                }\n            }\n\n            const maxInstrumentsPerChannel = this.song.getMaxInstrumentsPerChannel();\n            for (let setting = 0; setting < Config.modulators.length; setting++) {\n                for (let channel = 0; channel < this.song.pitchChannelCount + this.song.noiseChannelCount; channel++) {\n                    for (let instrument = 0; instrument < maxInstrumentsPerChannel; instrument++) {\n                        if (this.nextModInsValues != null && this.nextModInsValues[channel] != null && this.nextModInsValues[channel][instrument] != null && this.nextModInsValues[channel][instrument][setting] != null) {\n                            this.modInsValues[channel][instrument][setting] = this.nextModInsValues[channel][instrument][setting];\n                        }\n                    }\n                }\n            }\n        }\n\n        // Optimization: Avoid persistent reverb values in the float denormal range.\n        if (!Number.isFinite(limit) || Math.abs(limit) < epsilon) limit = 0.0;\n        this.limit = limit;\n\n        if (playSong && !this.countInMetronome) {\n            this.playheadInternal = (((this.tick + 1.0 - this.tickSampleCountdown / samplesPerTick) / 2.0 + this.part) / Config.partsPerBeat + this.beat) / song.beatsPerBar + this.bar;\n        }\n\n        /*\n        const synthDuration = performance.now() - synthStartTime;\n        // Performance measurements:\n        samplesAccumulated += outputBufferLength;\n        samplePerformance += synthDuration;\n    \t\n        if (samplesAccumulated >= 44100 * 4) {\n            const secondsGenerated = samplesAccumulated / 44100;\n            const secondsRequired = samplePerformance / 1000;\n            const ratio = secondsRequired / secondsGenerated;\n            console.log(ratio);\n            samplePerformance = 0;\n            samplesAccumulated = 0;\n        }\n        */\n    }\n\n    private freeTone(tone: Tone): void {\n        this.tonePool.pushBack(tone);\n    }\n\n    private newTone(): Tone {\n        if (this.tonePool.count() > 0) {\n            const tone = this.tonePool.popBack();\n            tone.freshlyAllocated = true;\n            return tone;\n        }\n        return new Tone();\n    }\n\n    private releaseTone(instrumentState: InstrumentState, tone: Tone): void {\n        instrumentState.releasedTones.pushFront(tone);\n        tone.atNoteStart = false;\n        tone.passedEndOfNote = true;\n    }\n\n    private freeReleasedTone(instrumentState: InstrumentState, toneIndex: number): void {\n        this.freeTone(instrumentState.releasedTones.get(toneIndex));\n        instrumentState.releasedTones.remove(toneIndex);\n    }\n\n    freeAllTones(): void {\n        for (const channelState of this.channels) {\n            for (const instrumentState of channelState.instruments) {\n                while (instrumentState.activeTones.count() > 0) this.freeTone(instrumentState.activeTones.popBack());\n                while (instrumentState.activeModTones.count() > 0) this.freeTone(instrumentState.activeModTones.popBack());\n                while (instrumentState.releasedTones.count() > 0) this.freeTone(instrumentState.releasedTones.popBack());\n                while (instrumentState.liveInputTones.count() > 0) this.freeTone(instrumentState.liveInputTones.popBack());\n            }\n        }\n    }\n\n    private determineLiveInputTones(song: Song, channelIndex: number, samplesPerTick: number): void {\n        const channel = song.channels[channelIndex];\n        const channelState = this.channels[channelIndex];\n        const pitches: number[] = this.liveInputPitches;\n        const bassPitches: number[] = this.liveBassInputPitches;\n\n        if (this.liveInputPitches.length > 0 || this.liveBassInputPitches.length > 0) {\n            this.computeLatestModValues();\n        }\n\n        for (let instrumentIndex = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n            const instrumentState = channelState.instruments[instrumentIndex];\n            const toneList: Deque<Tone> = instrumentState.liveInputTones;\n            let toneCount = 0;\n            if (this.liveInputDuration > 0 && (channelIndex == this.liveInputChannel) && pitches.length > 0 && this.liveInputInstruments.indexOf(instrumentIndex) != -1) {\n                const instrument = channel.instruments[instrumentIndex];\n\n                if (instrument.getChord().singleTone) {\n                    let tone: Tone;\n                    if (toneList.count() <= toneCount) {\n                        tone = this.newTone();\n                        toneList.pushBack(tone);\n                    } else if (!instrument.getTransition().isSeamless && this.liveInputStarted) {\n                        this.releaseTone(instrumentState, toneList.get(toneCount));\n                        tone = this.newTone();\n                        toneList.set(toneCount, tone);\n                    } else {\n                        tone = toneList.get(toneCount);\n                    }\n                    toneCount++;\n\n                    for (let i = 0; i < pitches.length; i++) {\n                        tone.pitches[i] = pitches[i];\n                    }\n                    tone.pitchCount = pitches.length;\n                    tone.chordSize = 1;\n                    tone.instrumentIndex = instrumentIndex;\n                    tone.note = tone.prevNote = tone.nextNote = null;\n                    tone.atNoteStart = this.liveInputStarted;\n                    tone.forceContinueAtStart = false;\n                    tone.forceContinueAtEnd = false;\n                    this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\n                } else {\n                    //const transition = instrument.getTransition();\n\n                    this.moveTonesIntoOrderedTempMatchedList(toneList, pitches);\n\n                    for (let i = 0; i < pitches.length; i++) {\n                        //const strumOffsetParts = i * instrument.getChord().strumParts;\n\n                        let tone: Tone;\n                        if (this.tempMatchedPitchTones[toneCount] != null) {\n                            tone = this.tempMatchedPitchTones[toneCount]!;\n                            this.tempMatchedPitchTones[toneCount] = null;\n                            if (tone.pitchCount != 1 || tone.pitches[0] != pitches[i]) {\n                                this.releaseTone(instrumentState, tone);\n                                tone = this.newTone();\n                            }\n                            toneList.pushBack(tone);\n                        } else {\n                            tone = this.newTone();\n                            toneList.pushBack(tone);\n                        }\n                        toneCount++;\n\n                        tone.pitches[0] = pitches[i];\n                        tone.pitchCount = 1;\n                        tone.chordSize = pitches.length;\n                        tone.instrumentIndex = instrumentIndex;\n                        tone.note = tone.prevNote = tone.nextNote = null;\n                        tone.atNoteStart = this.liveInputStarted;\n                        tone.forceContinueAtStart = false;\n                        tone.forceContinueAtEnd = false;\n                        this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\n                    }\n                }\n            }\n\n            if (this.liveBassInputDuration > 0 && (channelIndex == this.liveBassInputChannel) && bassPitches.length > 0 && this.liveBassInputInstruments.indexOf(instrumentIndex) != -1) {\n                const instrument = channel.instruments[instrumentIndex];\n\n                if (instrument.getChord().singleTone) {\n                    let tone: Tone;\n                    if (toneList.count() <= toneCount) {\n                        tone = this.newTone();\n                        toneList.pushBack(tone);\n                    } else if (!instrument.getTransition().isSeamless && this.liveInputStarted) {\n                        this.releaseTone(instrumentState, toneList.get(toneCount));\n                        tone = this.newTone();\n                        toneList.set(toneCount, tone);\n                    } else {\n                        tone = toneList.get(toneCount);\n                    }\n                    toneCount++;\n\n                    for (let i = 0; i < bassPitches.length; i++) {\n                        tone.pitches[i] = bassPitches[i];\n                    }\n                    tone.pitchCount = bassPitches.length;\n                    tone.chordSize = 1;\n                    tone.instrumentIndex = instrumentIndex;\n                    tone.note = tone.prevNote = tone.nextNote = null;\n                    tone.atNoteStart = this.liveBassInputStarted;\n                    tone.forceContinueAtStart = false;\n                    tone.forceContinueAtEnd = false;\n                    this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\n                } else {\n                    //const transition = instrument.getTransition();\n\n                    this.moveTonesIntoOrderedTempMatchedList(toneList, bassPitches);\n\n                    for (let i = 0; i < bassPitches.length; i++) {\n                        //const strumOffsetParts = i * instrument.getChord().strumParts;\n\n                        let tone: Tone;\n                        if (this.tempMatchedPitchTones[toneCount] != null) {\n                            tone = this.tempMatchedPitchTones[toneCount]!;\n                            this.tempMatchedPitchTones[toneCount] = null;\n                            if (tone.pitchCount != 1 || tone.pitches[0] != bassPitches[i]) {\n                                this.releaseTone(instrumentState, tone);\n                                tone = this.newTone();\n                            }\n                            toneList.pushBack(tone);\n                        } else {\n                            tone = this.newTone();\n                            toneList.pushBack(tone);\n                        }\n                        toneCount++;\n\n                        tone.pitches[0] = bassPitches[i];\n                        tone.pitchCount = 1;\n                        tone.chordSize = bassPitches.length;\n                        tone.instrumentIndex = instrumentIndex;\n                        tone.note = tone.prevNote = tone.nextNote = null;\n                        tone.atNoteStart = this.liveBassInputStarted;\n                        tone.forceContinueAtStart = false;\n                        tone.forceContinueAtEnd = false;\n                        this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\n                    }\n                }\n            }\n\n            while (toneList.count() > toneCount) {\n                this.releaseTone(instrumentState, toneList.popBack());\n            }\n\n            this.clearTempMatchedPitchTones(toneCount, instrumentState);\n        }\n\n        this.liveInputStarted = false;\n        this.liveBassInputStarted = false;\n    }\n\n    // Returns the chord type of the instrument in the adjacent pattern if it is compatible for a\n    // seamless transition across patterns, otherwise returns null.\n    private adjacentPatternHasCompatibleInstrumentTransition(song: Song, channel: Channel, pattern: Pattern, otherPattern: Pattern, instrumentIndex: number, transition: Transition, chord: Chord, note: Note, otherNote: Note, forceContinue: boolean): Chord | null {\n        if (song.patternInstruments && otherPattern.instruments.indexOf(instrumentIndex) == -1) {\n            // The adjacent pattern does not contain the same instrument as the current pattern.\n\n            if (pattern.instruments.length > 1 || otherPattern.instruments.length > 1) {\n                // The current or adjacent pattern contains more than one instrument, don't bother\n                // trying to connect them.\n                return null;\n            }\n            // Otherwise, the two patterns each contain one instrument, but not the same instrument.\n            // Try to connect them.\n            const otherInstrument = channel.instruments[otherPattern.instruments[0]];\n\n            if (forceContinue) {\n                // Even non-seamless instruments can be connected across patterns if forced.\n                return otherInstrument.getChord();\n            }\n\n            // Otherwise, check that both instruments are seamless across patterns.\n            const otherTransition = otherInstrument.getTransition();\n            if (transition.includeAdjacentPatterns && otherTransition.includeAdjacentPatterns && otherTransition.slides == transition.slides) {\n                return otherInstrument.getChord();\n            } else {\n                return null;\n            }\n        } else {\n            // If both patterns contain the same instrument, check that it is seamless across patterns.\n            return (forceContinue || transition.includeAdjacentPatterns) ? chord : null;\n        }\n    }\n\n    static adjacentNotesHaveMatchingPitches(firstNote: Note, secondNote: Note): boolean {\n        if (firstNote.pitches.length != secondNote.pitches.length) return false;\n        const firstNoteInterval = firstNote.pins[firstNote.pins.length - 1].interval;\n        for (const pitch of firstNote.pitches) {\n            if (secondNote.pitches.indexOf(pitch + firstNoteInterval) == -1) return false;\n        }\n        return true;\n    }\n\n    private moveTonesIntoOrderedTempMatchedList(toneList: Deque<Tone>, notePitches: number[]): void {\n        // The tones are about to seamlessly transition to a new note. The pitches\n        // from the old note may or may not match any of the pitches in the new\n        // note, and not necessarily in order, but if any do match, they'll sound\n        // better if those tones continue to have the same pitch. Attempt to find\n        // the right spot for each old tone in the new chord if possible.\n\n        for (let i = 0; i < toneList.count(); i++) {\n            const tone = toneList.get(i);\n            const pitch = tone.pitches[0] + tone.lastInterval;\n            for (let j = 0; j < notePitches.length; j++) {\n                if (notePitches[j] == pitch) {\n                    this.tempMatchedPitchTones[j] = tone;\n                    toneList.remove(i);\n                    i--;\n                    break;\n                }\n            }\n        }\n\n        // Any tones that didn't get matched should just fill in the gaps.\n        while (toneList.count() > 0) {\n            const tone = toneList.popFront();\n            for (let j = 0; j < this.tempMatchedPitchTones.length; j++) {\n                if (this.tempMatchedPitchTones[j] == null) {\n                    this.tempMatchedPitchTones[j] = tone;\n                    break;\n                }\n            }\n        }\n    }\n\n    private determineCurrentActiveTones(song: Song, channelIndex: number, samplesPerTick: number, playSong: boolean): void {\n        const channel = song.channels[channelIndex];\n        const channelState = this.channels[channelIndex];\n        const pattern: Pattern | null = song.getPattern(channelIndex, this.bar);\n        const currentPart = this.getCurrentPart();\n        const currentTick = this.tick + Config.ticksPerPart * currentPart;\n\n        if (playSong && song.getChannelIsMod(channelIndex)) {\n\n            // For mod channels, notes aren't strictly arranged chronologically. Also, each pitch value could play or not play at a given time. So... a bit more computation involved!\n            // The same transition logic should apply though, even though it isn't really used by mod channels.\n            let notes: (Note | null)[] = [];\n            let prevNotes: (Note | null)[] = [];\n            let nextNotes: (Note | null)[] = [];\n            let fillCount = Config.modCount;\n            while (fillCount--) {\n                notes.push(null);\n                prevNotes.push(null);\n                nextNotes.push(null);\n            }\n\n            if (pattern != null && !channel.muted) {\n                for (let i = 0; i < pattern.notes.length; i++) {\n                    if (pattern.notes[i].end <= currentPart) {\n                        // Actually need to check which note starts closer to the start of this note.\n                        if (prevNotes[pattern.notes[i].pitches[0]] == null || pattern.notes[i].end > (prevNotes[pattern.notes[i].pitches[0]] as Note).start) {\n                            prevNotes[pattern.notes[i].pitches[0]] = pattern.notes[i];\n                        }\n                    }\n                    else if (pattern.notes[i].start <= currentPart && pattern.notes[i].end > currentPart) {\n                        notes[pattern.notes[i].pitches[0]] = pattern.notes[i];\n                    }\n                    else if (pattern.notes[i].start > currentPart) {\n                        // Actually need to check which note starts closer to the end of this note.\n                        if (nextNotes[pattern.notes[i].pitches[0]] == null || pattern.notes[i].start < (nextNotes[pattern.notes[i].pitches[0]] as Note).start) {\n                            nextNotes[pattern.notes[i].pitches[0]] = pattern.notes[i];\n                        }\n                    }\n                }\n            }\n\n            let modToneCount = 0;\n            const newInstrumentIndex = (song.patternInstruments && (pattern != null)) ? pattern!.instruments[0] : 0;\n            const instrumentState = channelState.instruments[newInstrumentIndex];\n            const toneList: Deque<Tone> = instrumentState.activeModTones;\n            for (let mod = 0; mod < Config.modCount; mod++) {\n                if (notes[mod] != null) {\n                    if (prevNotes[mod] != null && (prevNotes[mod] as Note).end != (notes[mod] as Note).start) prevNotes[mod] = null;\n                    if (nextNotes[mod] != null && (nextNotes[mod] as Note).start != (notes[mod] as Note).end) nextNotes[mod] = null;\n\n                }\n\n                if (channelState.singleSeamlessInstrument != null && channelState.singleSeamlessInstrument != newInstrumentIndex && channelState.singleSeamlessInstrument < channelState.instruments.length) {\n                    const sourceInstrumentState = channelState.instruments[channelState.singleSeamlessInstrument];\n                    const destInstrumentState = channelState.instruments[newInstrumentIndex];\n                    while (sourceInstrumentState.activeModTones.count() > 0) {\n                        destInstrumentState.activeModTones.pushFront(sourceInstrumentState.activeModTones.popBack());\n                    }\n                }\n                channelState.singleSeamlessInstrument = newInstrumentIndex;\n\n                if (notes[mod] != null) {\n                    let prevNoteForThisInstrument: Note | null = prevNotes[mod];\n                    let nextNoteForThisInstrument: Note | null = nextNotes[mod];\n\n                    let forceContinueAtStart = false;\n                    let forceContinueAtEnd = false;\n                    const atNoteStart = (Config.ticksPerPart * notes[mod]!.start == currentTick) && this.isAtStartOfTick;\n                    let tone: Tone;\n                    if (toneList.count() <= modToneCount) {\n                        tone = this.newTone();\n                        toneList.pushBack(tone);\n                    } else if (atNoteStart && (prevNoteForThisInstrument == null)) {\n                        const oldTone = toneList.get(modToneCount);\n                        if (oldTone.isOnLastTick) {\n                            this.freeTone(oldTone);\n                        } else {\n                            this.releaseTone(instrumentState, oldTone);\n                        }\n                        tone = this.newTone();\n                        toneList.set(modToneCount, tone);\n                    } else {\n                        tone = toneList.get(modToneCount);\n                    }\n                    modToneCount++;\n\n                    for (let i = 0; i < notes[mod]!.pitches.length; i++) {\n                        tone.pitches[i] = notes[mod]!.pitches[i];\n                    }\n                    tone.pitchCount = notes[mod]!.pitches.length;\n                    tone.chordSize = 1;\n                    tone.instrumentIndex = newInstrumentIndex;\n                    tone.note = notes[mod];\n                    tone.noteStartPart = notes[mod]!.start;\n                    tone.noteEndPart = notes[mod]!.end;\n                    tone.prevNote = prevNoteForThisInstrument;\n                    tone.nextNote = nextNoteForThisInstrument;\n                    tone.prevNotePitchIndex = 0;\n                    tone.nextNotePitchIndex = 0;\n                    tone.atNoteStart = atNoteStart;\n                    tone.passedEndOfNote = false;\n                    tone.forceContinueAtStart = forceContinueAtStart;\n                    tone.forceContinueAtEnd = forceContinueAtEnd;\n                }\n            }\n            // Automatically free or release seamless tones if there's no new note to take over.\n            while (toneList.count() > modToneCount) {\n                const tone = toneList.popBack();\n                const channel = song.channels[channelIndex];\n                if (tone.instrumentIndex < channel.instruments.length && !tone.isOnLastTick) {\n                    const instrumentState = this.channels[channelIndex].instruments[tone.instrumentIndex];\n                    this.releaseTone(instrumentState, tone);\n                } else {\n                    this.freeTone(tone);\n                }\n            }\n\n        }\n        else if (!song.getChannelIsMod(channelIndex)) {\n\n            let note: Note | null = null;\n            let prevNote: Note | null = null;\n            let nextNote: Note | null = null;\n\n            if (playSong && pattern != null && !channel.muted && (!this.isRecording || this.liveInputChannel != channelIndex)) {\n                for (let i = 0; i < pattern.notes.length; i++) {\n                    if (pattern.notes[i].end <= currentPart) {\n                        prevNote = pattern.notes[i];\n                    } else if (pattern.notes[i].start <= currentPart && pattern.notes[i].end > currentPart) {\n                        note = pattern.notes[i];\n                    } else if (pattern.notes[i].start > currentPart) {\n                        nextNote = pattern.notes[i];\n                        break;\n                    }\n                }\n\n                if (note != null) {\n                    if (prevNote != null && prevNote.end != note.start) prevNote = null;\n                    if (nextNote != null && nextNote.start != note.end) nextNote = null;\n                }\n            }\n\n            // Seamless tones from a pattern with a single instrument can be transferred to a different single seamless instrument in the next pattern.\n            if (pattern != null && (!song.layeredInstruments || channel.instruments.length == 1 || (song.patternInstruments && pattern.instruments.length == 1))) {\n                const newInstrumentIndex = song.patternInstruments ? pattern.instruments[0] : 0;\n                if (channelState.singleSeamlessInstrument != null && channelState.singleSeamlessInstrument != newInstrumentIndex && channelState.singleSeamlessInstrument < channelState.instruments.length) {\n                    const sourceInstrumentState = channelState.instruments[channelState.singleSeamlessInstrument];\n                    const destInstrumentState = channelState.instruments[newInstrumentIndex];\n                    while (sourceInstrumentState.activeTones.count() > 0) {\n                        destInstrumentState.activeTones.pushFront(sourceInstrumentState.activeTones.popBack());\n                    }\n                }\n                channelState.singleSeamlessInstrument = newInstrumentIndex;\n            } else {\n                channelState.singleSeamlessInstrument = null;\n            }\n\n            for (let instrumentIndex = 0; instrumentIndex < channel.instruments.length; instrumentIndex++) {\n                const instrumentState = channelState.instruments[instrumentIndex];\n                const toneList: Deque<Tone> = instrumentState.activeTones;\n                let toneCount = 0;\n                if ((note != null) && (!song.patternInstruments || (pattern!.instruments.indexOf(instrumentIndex) != -1))) {\n                    const instrument = channel.instruments[instrumentIndex];\n                    let prevNoteForThisInstrument: Note | null = prevNote;\n                    let nextNoteForThisInstrument: Note | null = nextNote;\n\n                    const partsPerBar = Config.partsPerBeat * song.beatsPerBar;\n                    const transition = instrument.getTransition();\n                    const chord = instrument.getChord();\n                    let forceContinueAtStart = false;\n                    let forceContinueAtEnd = false;\n                    let tonesInPrevNote = 0;\n                    let tonesInNextNote = 0;\n                    if (note.start == 0) {\n                        // If the beginning of the note coincides with the beginning of the pattern,\n                        let prevPattern: Pattern | null = (this.prevBar == null) ? null : song.getPattern(channelIndex, this.prevBar);\n                        if (prevPattern != null) {\n                            const lastNote: Note | null = (prevPattern.notes.length <= 0) ? null : prevPattern.notes[prevPattern.notes.length - 1];\n                            if (lastNote != null && lastNote.end == partsPerBar) {\n                                const patternForcesContinueAtStart = note.continuesLastPattern && Synth.adjacentNotesHaveMatchingPitches(lastNote, note);\n                                const chordOfCompatibleInstrument: Chord | null = this.adjacentPatternHasCompatibleInstrumentTransition(song, channel, pattern!, prevPattern, instrumentIndex, transition, chord, note, lastNote, patternForcesContinueAtStart);\n                                if (chordOfCompatibleInstrument != null) {\n                                    prevNoteForThisInstrument = lastNote;\n                                    tonesInPrevNote = chordOfCompatibleInstrument.singleTone ? 1 : prevNoteForThisInstrument.pitches.length\n                                    forceContinueAtStart = patternForcesContinueAtStart;\n                                }\n                            }\n                        }\n                    } else if (prevNoteForThisInstrument != null) {\n                        tonesInPrevNote = chord.singleTone ? 1 : prevNoteForThisInstrument.pitches.length\n                    }\n                    if (note.end == partsPerBar) {\n                        // If the end of the note coincides with the end of the pattern, look for an\n                        // adjacent note at the beginning of the next pattern.\n                        let nextPattern: Pattern | null = (this.nextBar == null) ? null : song.getPattern(channelIndex, this.nextBar);\n                        if (nextPattern != null) {\n                            const firstNote: Note | null = (nextPattern.notes.length <= 0) ? null : nextPattern.notes[0];\n                            if (firstNote != null && firstNote.start == 0) {\n                                const nextPatternForcesContinueAtStart = firstNote.continuesLastPattern && Synth.adjacentNotesHaveMatchingPitches(note, firstNote);\n                                const chordOfCompatibleInstrument: Chord | null = this.adjacentPatternHasCompatibleInstrumentTransition(song, channel, pattern!, nextPattern, instrumentIndex, transition, chord, note, firstNote, nextPatternForcesContinueAtStart);\n                                if (chordOfCompatibleInstrument != null) {\n                                    nextNoteForThisInstrument = firstNote;\n                                    tonesInNextNote = chordOfCompatibleInstrument.singleTone ? 1 : nextNoteForThisInstrument.pitches.length\n                                    forceContinueAtEnd = nextPatternForcesContinueAtStart;\n                                }\n                            }\n                        }\n                    } else if (nextNoteForThisInstrument != null) {\n                        tonesInNextNote = chord.singleTone ? 1 : nextNoteForThisInstrument.pitches.length\n                    }\n\n                    if (chord.singleTone) {\n                        const atNoteStart = (Config.ticksPerPart * note.start == currentTick);\n                        let tone: Tone;\n                        if (toneList.count() <= toneCount) {\n                            tone = this.newTone();\n                            toneList.pushBack(tone);\n                        } else if (atNoteStart && ((!(transition.isSeamless || instrument.clicklessTransition) && !forceContinueAtStart) || prevNoteForThisInstrument == null)) {\n                            const oldTone = toneList.get(toneCount);\n                            if (oldTone.isOnLastTick) {\n                                this.freeTone(oldTone);\n                            } else {\n                                this.releaseTone(instrumentState, oldTone);\n                            }\n                            tone = this.newTone();\n                            toneList.set(toneCount, tone);\n                        } else {\n                            tone = toneList.get(toneCount);\n                        }\n                        toneCount++;\n\n                        for (let i = 0; i < note.pitches.length; i++) {\n                            tone.pitches[i] = note.pitches[i];\n                        }\n                        tone.pitchCount = note.pitches.length;\n                        tone.chordSize = 1;\n                        tone.instrumentIndex = instrumentIndex;\n                        tone.note = note;\n                        tone.noteStartPart = note.start;\n                        tone.noteEndPart = note.end;\n                        tone.prevNote = prevNoteForThisInstrument;\n                        tone.nextNote = nextNoteForThisInstrument;\n                        tone.prevNotePitchIndex = 0;\n                        tone.nextNotePitchIndex = 0;\n                        tone.atNoteStart = atNoteStart;\n                        tone.passedEndOfNote = false;\n                        tone.forceContinueAtStart = forceContinueAtStart;\n                        tone.forceContinueAtEnd = forceContinueAtEnd;\n                        this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\n                    } else {\n                        const transition = instrument.getTransition();\n\n                        if (((transition.isSeamless && !transition.slides && chord.strumParts == 0) || forceContinueAtStart) && (Config.ticksPerPart * note.start == currentTick) && prevNoteForThisInstrument != null) {\n                            this.moveTonesIntoOrderedTempMatchedList(toneList, note.pitches);\n                        }\n\n                        let strumOffsetParts = 0;\n                        for (let i = 0; i < note.pitches.length; i++) {\n\n                            let prevNoteForThisTone: Note | null = (tonesInPrevNote > i) ? prevNoteForThisInstrument : null;\n                            let noteForThisTone = note;\n                            let nextNoteForThisTone: Note | null = (tonesInNextNote > i) ? nextNoteForThisInstrument : null;\n                            let noteStartPart = noteForThisTone.start + strumOffsetParts;\n                            let passedEndOfNote = false;\n\n                            // Strumming may mean that a note's actual start time may be after the\n                            // note's displayed start time. If the note start hasn't been reached yet,\n                            // carry over the previous tone if available and seamless, otherwise skip\n                            // the new tone until it is ready to start.\n                            if (noteStartPart > currentPart) {\n                                if (toneList.count() > i && (transition.isSeamless || forceContinueAtStart) && prevNoteForThisTone != null) {\n                                    // Continue the previous note's chord until the current one takes over.\n                                    nextNoteForThisTone = noteForThisTone;\n                                    noteForThisTone = prevNoteForThisTone;\n                                    prevNoteForThisTone = null;\n                                    noteStartPart = noteForThisTone.start + strumOffsetParts;\n                                    passedEndOfNote = true;\n                                } else {\n                                    // This and the rest of the tones in the chord shouldn't start yet.\n                                    break;\n                                }\n                            }\n\n                            let noteEndPart = noteForThisTone.end;\n                            if ((transition.isSeamless || forceContinueAtStart) && nextNoteForThisTone != null) {\n                                noteEndPart = Math.min(Config.partsPerBeat * this.song!.beatsPerBar, noteEndPart + strumOffsetParts);\n                            }\n                            if ((!transition.continues && !forceContinueAtStart) || prevNoteForThisTone == null) {\n                                strumOffsetParts += chord.strumParts;\n                            }\n\n                            const atNoteStart = (Config.ticksPerPart * noteStartPart == currentTick);\n                            let tone: Tone;\n                            if (this.tempMatchedPitchTones[toneCount] != null) {\n                                tone = this.tempMatchedPitchTones[toneCount]!;\n                                this.tempMatchedPitchTones[toneCount] = null;\n                                toneList.pushBack(tone);\n                            } else if (toneList.count() <= toneCount) {\n                                tone = this.newTone();\n                                toneList.pushBack(tone);\n                            } else if (atNoteStart && ((!transition.isSeamless && !forceContinueAtStart) || prevNoteForThisTone == null)) {\n                                const oldTone = toneList.get(toneCount);\n                                if (oldTone.isOnLastTick) {\n                                    this.freeTone(oldTone);\n                                } else {\n                                    this.releaseTone(instrumentState, oldTone);\n                                }\n                                tone = this.newTone();\n                                toneList.set(toneCount, tone);\n                            } else {\n                                tone = toneList.get(toneCount);\n                            }\n                            toneCount++;\n\n                            tone.pitches[0] = noteForThisTone.pitches[i];\n                            tone.pitchCount = 1;\n                            tone.chordSize = noteForThisTone.pitches.length;\n                            tone.instrumentIndex = instrumentIndex;\n                            tone.note = noteForThisTone;\n                            tone.noteStartPart = noteStartPart;\n                            tone.noteEndPart = noteEndPart;\n                            tone.prevNote = prevNoteForThisTone;\n                            tone.nextNote = nextNoteForThisTone;\n                            tone.prevNotePitchIndex = i;\n                            tone.nextNotePitchIndex = i;\n                            tone.atNoteStart = atNoteStart;\n                            tone.passedEndOfNote = passedEndOfNote;\n                            tone.forceContinueAtStart = forceContinueAtStart && prevNoteForThisTone != null;\n                            tone.forceContinueAtEnd = forceContinueAtEnd && nextNoteForThisTone != null;\n                            this.computeTone(song, channelIndex, samplesPerTick, tone, false, false);\n                        }\n                    }\n                    if (transition.continues && (toneList.count() <= 0) || (note.pitches.length <= 0)) instrumentState.envelopeComputer.reset(); //stop computing effects envelopes\n                }\n                // Automatically free or release seamless tones if there's no new note to take over.\n                while (toneList.count() > toneCount) {\n                    const tone = toneList.popBack();\n                    const channel = song.channels[channelIndex];\n                    if (tone.instrumentIndex < channel.instruments.length && !tone.isOnLastTick) {\n                        const instrumentState = channelState.instruments[tone.instrumentIndex];\n                        this.releaseTone(instrumentState, tone);\n                    } else {\n                        this.freeTone(tone);\n                    }\n                }\n\n                this.clearTempMatchedPitchTones(toneCount, instrumentState);\n            }\n        }\n    }\n\n    private clearTempMatchedPitchTones(toneCount: number, instrumentState: InstrumentState): void {\n        for (let i = toneCount; i < this.tempMatchedPitchTones.length; i++) {\n            const oldTone: Tone | null = this.tempMatchedPitchTones[i];\n            if (oldTone != null) {\n                if (oldTone.isOnLastTick) {\n                    this.freeTone(oldTone);\n                } else {\n                    this.releaseTone(instrumentState, oldTone);\n                }\n                this.tempMatchedPitchTones[i] = null;\n            }\n        }\n    }\n\n\n    private playTone(channelIndex: number, bufferIndex: number, runLength: number, tone: Tone): void {\n        const channelState = this.channels[channelIndex];\n        const instrumentState = channelState.instruments[tone.instrumentIndex];\n\n        if (instrumentState.synthesizer != null) instrumentState.synthesizer!(this, bufferIndex, runLength, tone, instrumentState);\n        tone.envelopeComputer.clearEnvelopes();\n        instrumentState.envelopeComputer.clearEnvelopes();\n    }\n\n    // Computes mod note position at the start and end of the window and \"plays\" the mod tone, setting appropriate mod data.\n    private playModTone(song: Song, channelIndex: number, samplesPerTick: number, bufferIndex: number, roundedSamplesPerTick: number, tone: Tone, released: boolean, shouldFadeOutFast: boolean): void {\n        const channel = song.channels[channelIndex];\n        const instrument = channel.instruments[tone.instrumentIndex];\n\n        if (tone.note != null) {\n            const ticksIntoBar = this.getTicksIntoBar();\n            const partTimeTickStart = (ticksIntoBar) / Config.ticksPerPart;\n            const partTimeTickEnd = (ticksIntoBar + 1) / Config.ticksPerPart;\n            const tickSampleCountdown = this.tickSampleCountdown;\n            const startRatio = 1.0 - (tickSampleCountdown) / samplesPerTick;\n            const endRatio = 1.0 - (tickSampleCountdown - roundedSamplesPerTick) / samplesPerTick;\n            const partTimeStart = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * startRatio;\n            const partTimeEnd = partTimeTickStart + (partTimeTickEnd - partTimeTickStart) * endRatio;\n            const tickTimeStart = Config.ticksPerPart * partTimeStart;\n            const tickTimeEnd = Config.ticksPerPart * partTimeEnd;\n            const endPinIndex = tone.note.getEndPinIndex(this.getCurrentPart());\n            const startPin = tone.note.pins[endPinIndex - 1];\n            const endPin = tone.note.pins[endPinIndex];\n            const startPinTick = (tone.note.start + startPin.time) * Config.ticksPerPart;\n            const endPinTick = (tone.note.start + endPin.time) * Config.ticksPerPart;\n            const ratioStart = (tickTimeStart - startPinTick) / (endPinTick - startPinTick);\n            const ratioEnd = (tickTimeEnd - startPinTick) / (endPinTick - startPinTick);\n            tone.expression = startPin.size + (endPin.size - startPin.size) * ratioStart;\n            tone.expressionDelta = (startPin.size + (endPin.size - startPin.size) * ratioEnd) - tone.expression;\n\n            Synth.modSynth(this, bufferIndex, roundedSamplesPerTick, tone, instrument);\n        }\n    }\n\n    private static computeChordExpression(chordSize: number): number {\n        return 1.0 / ((chordSize - 1) * 0.25 + 1.0);\n    }\n\n    private computeTone(song: Song, channelIndex: number, samplesPerTick: number, tone: Tone, released: boolean, shouldFadeOutFast: boolean): void {\n        const roundedSamplesPerTick = Math.ceil(samplesPerTick);\n        const channel = song.channels[channelIndex];\n        const channelState = this.channels[channelIndex];\n        const instrument = channel.instruments[tone.instrumentIndex];\n        const instrumentState = channelState.instruments[tone.instrumentIndex];\n        instrumentState.awake = true;\n        instrumentState.tonesAddedInThisTick = true;\n        if (!instrumentState.computed) {\n            instrumentState.compute(this, instrument, samplesPerTick, roundedSamplesPerTick, tone, channelIndex, tone.instrumentIndex);\n        }\n        const transition = instrument.getTransition();\n        const chord = instrument.getChord();\n        const chordExpression = chord.singleTone ? 1.0 : Synth.computeChordExpression(tone.chordSize);\n        const isNoiseChannel = song.getChannelIsNoise(channelIndex);\n        const intervalScale = isNoiseChannel ? Config.noiseInterval : 1;\n        const secondsPerPart = Config.ticksPerPart * samplesPerTick / this.samplesPerSecond;\n        const sampleTime = 1.0 / this.samplesPerSecond;\n        const beatsPerPart = 1.0 / Config.partsPerBeat;\n        const ticksIntoBar = this.getTicksIntoBar();\n        const partTimeStart = (ticksIntoBar) / Config.ticksPerPart;\n        const partTimeEnd = (ticksIntoBar + 1.0) / Config.ticksPerPart;\n        const currentPart = this.getCurrentPart();\n\n        let specialIntervalMult = 1.0;\n        tone.specialIntervalExpressionMult = 1.0;\n\n        //if (synth.isModActive(ModSetting.mstPan, channelIndex, tone.instrumentIndex)) {\n        //    startPan = synth.getModValue(ModSetting.mstPan, false, channel, instrumentIdx, false);\n        //    endPan = synth.getModValue(ModSetting.mstPan, false, channel, instrumentIdx, true);\n        //}\n\n        let toneIsOnLastTick = shouldFadeOutFast;\n        let intervalStart = 0.0;\n        let intervalEnd = 0.0;\n        let fadeExpressionStart = 1.0;\n        let fadeExpressionEnd = 1.0;\n        let chordExpressionStart = chordExpression;\n        let chordExpressionEnd = chordExpression;\n\n        let expressionReferencePitch = 16; // A low \"E\" as a MIDI pitch.\n        let basePitch = Config.keys[song.key].basePitch + (Config.pitchesPerOctave * song.octave);\n        let baseExpression = 1.0;\n        let pitchDamping = 48;\n        if (instrument.type == InstrumentType.spectrum) {\n            baseExpression = Config.spectrumBaseExpression;\n            if (isNoiseChannel) {\n                basePitch = Config.spectrumBasePitch;\n                baseExpression *= 2.0; // Note: spectrum is louder for drum channels than pitch channels!\n            }\n            expressionReferencePitch = Config.spectrumBasePitch;\n            pitchDamping = 28;\n        } else if (instrument.type == InstrumentType.drumset) {\n            basePitch = Config.spectrumBasePitch;\n            baseExpression = Config.drumsetBaseExpression;\n            expressionReferencePitch = basePitch;\n        } else if (instrument.type == InstrumentType.noise) {\n            // dogebox2 code, makes basic noise affected by keys in pitch channels\n            basePitch = isNoiseChannel ? Config.chipNoises[instrument.chipNoise].basePitch : basePitch + Config.chipNoises[instrument.chipNoise].basePitch - 12;\n            // maybe also lower expression in pitch channels?\n            baseExpression = Config.noiseBaseExpression;\n            expressionReferencePitch = basePitch;\n            pitchDamping = Config.chipNoises[instrument.chipNoise].isSoft ? 24.0 : 60.0;\n        } else if (instrument.type == InstrumentType.fm || instrument.type == InstrumentType.fm6op) {\n            baseExpression = Config.fmBaseExpression;\n        } else if (instrument.type == InstrumentType.chip) {\n            baseExpression = Config.chipBaseExpression;\n            if (Config.chipWaves[instrument.chipWave].isCustomSampled) {\n                if (Config.chipWaves[instrument.chipWave].isPercussion) {\n                    basePitch = -84.37 + Math.log2(Config.chipWaves[instrument.chipWave].samples.length / Config.chipWaves[instrument.chipWave].sampleRate!) * -12 - (-60 + Config.chipWaves[instrument.chipWave].rootKey!);\n                } else {\n                    basePitch += -96.37 + Math.log2(Config.chipWaves[instrument.chipWave].samples.length / Config.chipWaves[instrument.chipWave].sampleRate!) * -12 - (-60 + Config.chipWaves[instrument.chipWave].rootKey!);\n                }\n            } else {\n                if (Config.chipWaves[instrument.chipWave].isSampled && !Config.chipWaves[instrument.chipWave].isPercussion) {\n                    basePitch = basePitch - 63 + Config.chipWaves[instrument.chipWave].extraSampleDetune!\n                } else if (Config.chipWaves[instrument.chipWave].isSampled && Config.chipWaves[instrument.chipWave].isPercussion) {\n                    basePitch = -51 + Config.chipWaves[instrument.chipWave].extraSampleDetune!;\n                }\n            }\n        } else if (instrument.type == InstrumentType.customChipWave) {\n            baseExpression = Config.chipBaseExpression;\n        } else if (instrument.type == InstrumentType.harmonics) {\n            baseExpression = Config.harmonicsBaseExpression;\n        } else if (instrument.type == InstrumentType.pwm) {\n            baseExpression = Config.pwmBaseExpression;\n        } else if (instrument.type == InstrumentType.supersaw) {\n            baseExpression = Config.supersawBaseExpression;\n        } else if (instrument.type == InstrumentType.pickedString) {\n            baseExpression = Config.pickedStringBaseExpression;\n        } else if (instrument.type == InstrumentType.mod) {\n            baseExpression = 1.0;\n            expressionReferencePitch = 0;\n            pitchDamping = 1.0;\n            basePitch = 0;\n        } else {\n            throw new Error(\"Unknown instrument type in computeTone.\");\n        }\n\n        if ((tone.atNoteStart && !transition.isSeamless && !tone.forceContinueAtStart) || tone.freshlyAllocated) {\n            tone.reset();\n            if (tone.note != null) tone.chipWaveStartOffset = tone.note.chipWaveStartOffset;\n            instrumentState.envelopeComputer.reset();\n            // advloop addition\n            if (instrument.type == InstrumentType.chip && instrument.isUsingAdvancedLoopControls) {\n                const chipWaveLength = Config.rawRawChipWaves[instrument.chipWave].samples.length - 1;\n                const firstOffset = (tone.chipWaveStartOffset + instrument.chipWaveStartOffset) / chipWaveLength;\n                // const lastOffset = (chipWaveLength - 0.01) / chipWaveLength;\n                // @TODO: This is silly and I should actually figure out how to\n                // properly keep lastOffset as 1.0 and not get it wrapped back\n                // to 0 once it's in `Synth.loopableChipSynth`.\n                const lastOffset = 0.999999999999999;\n                for (let i = 0; i < Config.maxPitchOrOperatorCount; i++) {\n                    tone.phases[i] = instrument.chipWavePlayBackwards ? Math.max(0, Math.min(lastOffset, firstOffset)) : Math.max(0, firstOffset);\n                    tone.directions[i] = instrument.chipWavePlayBackwards ? -1 : 1;\n                    tone.chipWaveCompletions[i] = 0;\n                    tone.chipWavePrevWavesL[i] = 0;\n                    tone.chipWavePrevWavesR[i] = 0;\n                    tone.chipWaveCompletionsLastWaveL[i] = 0;\n                    tone.chipWaveCompletionsLastWaveR[i] = 0;\n                }\n            }\n            // advloop addition\n        }\n        tone.freshlyAllocated = false;\n\n        for (let i = 0; i < Config.maxPitchOrOperatorCount; i++) {\n            tone.phaseDeltas[i] = 0.0;\n            tone.phaseDeltaScales[i] = 0.0;\n            tone.operatorExpressions[i] = 0.0;\n            tone.operatorExpressionDeltas[i] = 0.0;\n        }\n        tone.expression = 0.0;\n        tone.expressionDelta = 0.0;\n        for (let i = 0; i < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); i++) {\n            tone.operatorWaves[i] = Synth.getOperatorWave(instrument.operators[i].waveform, instrument.operators[i].pulseWidth);\n        }\n\n        if (released) {\n            const startTicksSinceReleased = tone.ticksSinceReleased;\n            const endTicksSinceReleased = tone.ticksSinceReleased + 1.0;\n            intervalStart = intervalEnd = tone.lastInterval;\n            const fadeOutTicks = Math.abs(instrument.getFadeOutTicks());\n            fadeExpressionStart = Synth.noteSizeToVolumeMult((1.0 - startTicksSinceReleased / fadeOutTicks) * Config.noteSizeMax);\n            fadeExpressionEnd = Synth.noteSizeToVolumeMult((1.0 - endTicksSinceReleased / fadeOutTicks) * Config.noteSizeMax);\n\n            if (shouldFadeOutFast) {\n                fadeExpressionEnd = 0.0;\n            }\n\n            if (tone.ticksSinceReleased + 1 >= fadeOutTicks) toneIsOnLastTick = true;\n        } else if (tone.note == null) {\n            fadeExpressionStart = fadeExpressionEnd = 1.0;\n            tone.lastInterval = 0;\n            tone.ticksSinceReleased = 0;\n            tone.liveInputSamplesHeld += roundedSamplesPerTick;\n        } else {\n            const note = tone.note;\n            const nextNote: Note | null = tone.nextNote;\n\n            const noteStartPart = tone.noteStartPart;\n            const noteEndPart = tone.noteEndPart;\n\n\n            const endPinIndex = note.getEndPinIndex(currentPart);\n            const startPin = note.pins[endPinIndex - 1];\n            const endPin = note.pins[endPinIndex];\n            const noteStartTick = noteStartPart * Config.ticksPerPart;\n            const noteEndTick = noteEndPart * Config.ticksPerPart;\n            const pinStart = (note.start + startPin.time) * Config.ticksPerPart;\n            const pinEnd = (note.start + endPin.time) * Config.ticksPerPart;\n\n            tone.ticksSinceReleased = 0;\n\n            const tickTimeStart = currentPart * Config.ticksPerPart + this.tick;\n            const tickTimeEnd = tickTimeStart + 1.0;\n            const noteTicksPassedTickStart = tickTimeStart - noteStartTick;\n            const noteTicksPassedTickEnd = tickTimeEnd - noteStartTick;\n            const pinRatioStart = Math.min(1.0, (tickTimeStart - pinStart) / (pinEnd - pinStart));\n            const pinRatioEnd = Math.min(1.0, (tickTimeEnd - pinStart) / (pinEnd - pinStart));\n            fadeExpressionStart = 1.0;\n            fadeExpressionEnd = 1.0;\n            intervalStart = startPin.interval + (endPin.interval - startPin.interval) * pinRatioStart;\n            intervalEnd = startPin.interval + (endPin.interval - startPin.interval) * pinRatioEnd;\n            tone.lastInterval = intervalEnd;\n\n            if ((!transition.isSeamless && !tone.forceContinueAtEnd) || nextNote == null) {\n                const fadeOutTicks = -instrument.getFadeOutTicks();\n                if (fadeOutTicks > 0.0) {\n                    // If the tone should fade out before the end of the note, do so here.\n                    const noteLengthTicks = noteEndTick - noteStartTick;\n                    fadeExpressionStart *= Math.min(1.0, (noteLengthTicks - noteTicksPassedTickStart) / fadeOutTicks);\n                    fadeExpressionEnd *= Math.min(1.0, (noteLengthTicks - noteTicksPassedTickEnd) / fadeOutTicks);\n                    if (tickTimeEnd >= noteStartTick + noteLengthTicks) toneIsOnLastTick = true;\n                }\n            }\n\n        }\n\n        tone.isOnLastTick = toneIsOnLastTick;\n\n        let tmpNoteFilter = instrument.noteFilter;\n        let startPoint: FilterControlPoint;\n        let endPoint: FilterControlPoint;\n\n        if (instrument.noteFilterType) {\n            // Simple EQ filter (old style). For analysis, using random filters from normal style since they are N/A in this context.\n            const noteFilterSettingsStart = instrument.noteFilter;\n            if (instrument.noteSubFilters[1] == null)\n                instrument.noteSubFilters[1] = new FilterSettings();\n            const noteFilterSettingsEnd = instrument.noteSubFilters[1];\n\n            // Change location based on slider values\n            let startSimpleFreq = instrument.noteFilterSimpleCut;\n            let startSimpleGain = instrument.noteFilterSimplePeak;\n            let endSimpleFreq = instrument.noteFilterSimpleCut;\n            let endSimpleGain = instrument.noteFilterSimplePeak;\n            let filterChanges = false;\n\n            if (this.isModActive(Config.modulators.dictionary[\"note filt cut\"].index, channelIndex, tone.instrumentIndex)) {\n                startSimpleFreq = this.getModValue(Config.modulators.dictionary[\"note filt cut\"].index, channelIndex, tone.instrumentIndex, false);\n                endSimpleFreq = this.getModValue(Config.modulators.dictionary[\"note filt cut\"].index, channelIndex, tone.instrumentIndex, true);\n                filterChanges = true;\n            }\n            if (this.isModActive(Config.modulators.dictionary[\"note filt peak\"].index, channelIndex, tone.instrumentIndex)) {\n                startSimpleGain = this.getModValue(Config.modulators.dictionary[\"note filt peak\"].index, channelIndex, tone.instrumentIndex, false);\n                endSimpleGain = this.getModValue(Config.modulators.dictionary[\"note filt peak\"].index, channelIndex, tone.instrumentIndex, true);\n                filterChanges = true;\n            }\n\n            noteFilterSettingsStart.convertLegacySettingsForSynth(startSimpleFreq, startSimpleGain, !filterChanges);\n            noteFilterSettingsEnd.convertLegacySettingsForSynth(endSimpleFreq, endSimpleGain, !filterChanges);\n\n            startPoint = noteFilterSettingsStart.controlPoints[0];\n            endPoint = noteFilterSettingsEnd.controlPoints[0];\n\n            // Temporarily override so that envelope computer uses appropriate computed note filter\n            instrument.noteFilter = noteFilterSettingsStart;\n            instrument.tmpNoteFilterStart = noteFilterSettingsStart;\n        }\n\n        // Compute envelopes *after* resetting the tone, otherwise the envelope computer gets reset too!\n        const envelopeComputer = tone.envelopeComputer;\n        const envelopeSpeeds: number[] = [];\n        for (let i = 0; i < Config.maxEnvelopeCount; i++) {\n            envelopeSpeeds[i] = 0;\n        }\n        for (let envelopeIndex = 0; envelopeIndex < instrument.envelopeCount; envelopeIndex++) {\n            let perEnvelopeSpeed = instrument.envelopes[envelopeIndex].perEnvelopeSpeed;\n            if (this.isModActive(Config.modulators.dictionary[\"individual envelope speed\"].index, channelIndex, tone.instrumentIndex) && instrument.envelopes[envelopeIndex].tempEnvelopeSpeed != null) {\n                perEnvelopeSpeed = instrument.envelopes[envelopeIndex].tempEnvelopeSpeed!;\n            }\n            let useEnvelopeSpeed = Config.arpSpeedScale[instrument.envelopeSpeed] * perEnvelopeSpeed;\n            if (this.isModActive(Config.modulators.dictionary[\"envelope speed\"].index, channelIndex, tone.instrumentIndex)) {\n                useEnvelopeSpeed = Math.max(0, Math.min(Config.arpSpeedScale.length - 1, this.getModValue(Config.modulators.dictionary[\"envelope speed\"].index, channelIndex, tone.instrumentIndex, false)));\n                if (Number.isInteger(useEnvelopeSpeed)) {\n                    useEnvelopeSpeed = Config.arpSpeedScale[useEnvelopeSpeed] * perEnvelopeSpeed;\n                } else {\n                    // Linear interpolate envelope values\n                    useEnvelopeSpeed = (1 - (useEnvelopeSpeed % 1)) * Config.arpSpeedScale[Math.floor(useEnvelopeSpeed)] + (useEnvelopeSpeed % 1) * Config.arpSpeedScale[Math.ceil(useEnvelopeSpeed)] * perEnvelopeSpeed;\n                }\n            }\n            envelopeSpeeds[envelopeIndex] = useEnvelopeSpeed;\n        }\n        envelopeComputer.computeEnvelopes(instrument, currentPart, instrumentState.envelopeTime, Config.ticksPerPart * partTimeStart, samplesPerTick / this.samplesPerSecond, tone, envelopeSpeeds, instrumentState, this, channelIndex, tone.instrumentIndex);\n        const envelopeStarts: number[] = tone.envelopeComputer.envelopeStarts;\n        const envelopeEnds: number[] = tone.envelopeComputer.envelopeEnds;\n        instrument.noteFilter = tmpNoteFilter;\n        if (transition.continues && (tone.prevNote == null || tone.note == null)) {\n            instrumentState.envelopeComputer.reset();\n        }\n\n        if (tone.note != null && transition.slides) {\n            // Slide interval and chordExpression at the start and/or end of the note if necessary.\n            const prevNote: Note | null = tone.prevNote;\n            const nextNote: Note | null = tone.nextNote;\n            if (prevNote != null) {\n                const intervalDiff = prevNote.pitches[tone.prevNotePitchIndex] + prevNote.pins[prevNote.pins.length - 1].interval - tone.pitches[0];\n                if (envelopeComputer.prevSlideStart) intervalStart += intervalDiff * envelopeComputer.prevSlideRatioStart;\n                if (envelopeComputer.prevSlideEnd) intervalEnd += intervalDiff * envelopeComputer.prevSlideRatioEnd;\n                if (!chord.singleTone) {\n                    const chordSizeDiff = prevNote.pitches.length - tone.chordSize;\n                    if (envelopeComputer.prevSlideStart) chordExpressionStart = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.prevSlideRatioStart);\n                    if (envelopeComputer.prevSlideEnd) chordExpressionEnd = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.prevSlideRatioEnd);\n                }\n            }\n            if (nextNote != null) {\n                const intervalDiff = nextNote.pitches[tone.nextNotePitchIndex] - (tone.pitches[0] + tone.note.pins[tone.note.pins.length - 1].interval);\n                if (envelopeComputer.nextSlideStart) intervalStart += intervalDiff * envelopeComputer.nextSlideRatioStart;\n                if (envelopeComputer.nextSlideEnd) intervalEnd += intervalDiff * envelopeComputer.nextSlideRatioEnd;\n                if (!chord.singleTone) {\n                    const chordSizeDiff = nextNote.pitches.length - tone.chordSize;\n                    if (envelopeComputer.nextSlideStart) chordExpressionStart = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.nextSlideRatioStart);\n                    if (envelopeComputer.nextSlideEnd) chordExpressionEnd = Synth.computeChordExpression(tone.chordSize + chordSizeDiff * envelopeComputer.nextSlideRatioEnd);\n                }\n            }\n        }\n\n        if (effectsIncludePitchShift(instrument.mdeffects)) {\n            let pitchShift = Config.justIntonationSemitones[instrument.pitchShift] / intervalScale;\n            let pitchShiftScalarStart = 1.0;\n            let pitchShiftScalarEnd = 1.0;\n            if (this.isModActive(Config.modulators.dictionary[\"pitch shift\"].index, channelIndex, tone.instrumentIndex)) {\n                pitchShift = Config.justIntonationSemitones[Config.justIntonationSemitones.length - 1];\n                pitchShiftScalarStart = (this.getModValue(Config.modulators.dictionary[\"pitch shift\"].index, channelIndex, tone.instrumentIndex, false)) / (Config.pitchShiftCenter);\n                pitchShiftScalarEnd = (this.getModValue(Config.modulators.dictionary[\"pitch shift\"].index, channelIndex, tone.instrumentIndex, true)) / (Config.pitchShiftCenter);\n            }\n            const envelopeStart = envelopeStarts[EnvelopeComputeIndex.pitchShift];\n            const envelopeEnd = envelopeEnds[EnvelopeComputeIndex.pitchShift];\n            intervalStart += pitchShift * envelopeStart * pitchShiftScalarStart;\n            intervalEnd += pitchShift * envelopeEnd * pitchShiftScalarEnd;\n        }\n        if (effectsIncludeDetune(instrument.mdeffects) || this.isModActive(Config.modulators.dictionary[\"song detune\"].index, channelIndex, tone.instrumentIndex)) {\n            const envelopeStart = envelopeStarts[EnvelopeComputeIndex.detune];\n            const envelopeEnd = envelopeEnds[EnvelopeComputeIndex.detune];\n            let modDetuneStart = instrument.detune;\n            let modDetuneEnd = instrument.detune;\n            if (this.isModActive(Config.modulators.dictionary[\"detune\"].index, channelIndex, tone.instrumentIndex)) {\n                modDetuneStart = this.getModValue(Config.modulators.dictionary[\"detune\"].index, channelIndex, tone.instrumentIndex, false) + Config.detuneCenter;\n                modDetuneEnd = this.getModValue(Config.modulators.dictionary[\"detune\"].index, channelIndex, tone.instrumentIndex, true) + Config.detuneCenter;\n            }\n            if (this.isModActive(Config.modulators.dictionary[\"song detune\"].index, channelIndex, tone.instrumentIndex)) {\n                modDetuneStart += 4 * this.getModValue(Config.modulators.dictionary[\"song detune\"].index, channelIndex, tone.instrumentIndex, false);\n                modDetuneEnd += 4 * this.getModValue(Config.modulators.dictionary[\"song detune\"].index, channelIndex, tone.instrumentIndex, true);\n            }\n            intervalStart += detuneToCents(modDetuneStart) * envelopeStart * Config.pitchesPerOctave / (12.0 * 100.0);\n            intervalEnd += detuneToCents(modDetuneEnd) * envelopeEnd * Config.pitchesPerOctave / (12.0 * 100.0);\n        }\n\n        if (effectsIncludeVibrato(instrument.mdeffects)) {\n            let delayTicks: number;\n            let vibratoAmplitudeStart: number;\n            let vibratoAmplitudeEnd: number;\n            // Custom vibrato\n            if (instrument.vibrato == Config.vibratos.length) {\n                delayTicks = instrument.vibratoDelay * 2; // Delay was changed from parts to ticks in BB v9\n                // Special case: if vibrato delay is max, NEVER vibrato.\n                if (instrument.vibratoDelay == Config.modulators.dictionary[\"vibrato delay\"].maxRawVol)\n                    delayTicks = Number.POSITIVE_INFINITY;\n                vibratoAmplitudeStart = instrument.vibratoDepth;\n                vibratoAmplitudeEnd = vibratoAmplitudeStart;\n            } else {\n                delayTicks = Config.vibratos[instrument.vibrato].delayTicks;\n                vibratoAmplitudeStart = Config.vibratos[instrument.vibrato].amplitude;\n                vibratoAmplitudeEnd = vibratoAmplitudeStart;\n            }\n\n            if (this.isModActive(Config.modulators.dictionary[\"vibrato delay\"].index, channelIndex, tone.instrumentIndex)) {\n                delayTicks = this.getModValue(Config.modulators.dictionary[\"vibrato delay\"].index, channelIndex, tone.instrumentIndex, false) * 2; // Delay was changed from parts to ticks in BB v9\n                if (delayTicks == Config.modulators.dictionary[\"vibrato delay\"].maxRawVol * 2)\n                    delayTicks = Number.POSITIVE_INFINITY;\n\n            }\n\n            if (this.isModActive(Config.modulators.dictionary[\"vibrato depth\"].index, channelIndex, tone.instrumentIndex)) {\n                vibratoAmplitudeStart = this.getModValue(Config.modulators.dictionary[\"vibrato depth\"].index, channelIndex, tone.instrumentIndex, false) / 25;\n                vibratoAmplitudeEnd = this.getModValue(Config.modulators.dictionary[\"vibrato depth\"].index, channelIndex, tone.instrumentIndex, true) / 25;\n            }\n\n\n            // To maintain pitch continuity, (mostly for picked string which retriggers impulse\n            // otherwise) remember the vibrato at the end of this run and reuse it at the start\n            // of the next run if available.\n            let vibratoStart: number;\n            if (tone.prevVibrato != null) {\n                vibratoStart = tone.prevVibrato;\n            } else {\n                let vibratoLfoStart = Synth.getLFOAmplitude(instrument, secondsPerPart * instrumentState.vibratoTime);\n                const vibratoDepthEnvelopeStart = envelopeStarts[EnvelopeComputeIndex.vibratoDepth];\n                vibratoStart = vibratoAmplitudeStart * vibratoLfoStart * vibratoDepthEnvelopeStart;\n                if (delayTicks > 0.0) {\n                    const ticksUntilVibratoStart = delayTicks - envelopeComputer.noteTicksStart;\n                    vibratoStart *= Math.max(0.0, Math.min(1.0, 1.0 - ticksUntilVibratoStart / 2.0));\n                }\n            }\n\n            let vibratoLfoEnd = Synth.getLFOAmplitude(instrument, secondsPerPart * instrumentState.nextVibratoTime);\n            const vibratoDepthEnvelopeEnd = envelopeEnds[EnvelopeComputeIndex.vibratoDepth];\n            if (instrument.type != InstrumentType.mod) {\n                let vibratoEnd = vibratoAmplitudeEnd * vibratoLfoEnd * vibratoDepthEnvelopeEnd;\n                if (delayTicks > 0.0) {\n                    const ticksUntilVibratoEnd = delayTicks - envelopeComputer.noteTicksEnd;\n                    vibratoEnd *= Math.max(0.0, Math.min(1.0, 1.0 - ticksUntilVibratoEnd / 2.0));\n                }\n\n                tone.prevVibrato = vibratoEnd;\n\n                intervalStart += vibratoStart;\n                intervalEnd += vibratoEnd;\n            }\n        }\n\n        if ((!transition.isSeamless && !tone.forceContinueAtStart) || tone.prevNote == null) {\n            // Fade in the beginning of the note.\n            const fadeInSeconds = instrument.getFadeInSeconds();\n            if (fadeInSeconds > 0.0) {\n                fadeExpressionStart *= Math.min(1.0, envelopeComputer.noteSecondsStartUnscaled / fadeInSeconds);\n                fadeExpressionEnd *= Math.min(1.0, envelopeComputer.noteSecondsEndUnscaled / fadeInSeconds);\n            }\n        }\n\n\n        if (instrument.type == InstrumentType.drumset && tone.drumsetPitch == null) {\n            // It's possible that the note will change while the user is editing it,\n            // but the tone's pitches don't get updated because the tone has already\n            // ended and is fading out. To avoid an array index out of bounds error, clamp the pitch.\n            tone.drumsetPitch = tone.pitches[0];\n            if (tone.note != null) tone.drumsetPitch += tone.note.pickMainInterval();\n            tone.drumsetPitch = Math.max(0, Math.min(Config.drumCount - 1, tone.drumsetPitch));\n        }\n\n        let noteFilterExpression = envelopeComputer.lowpassCutoffDecayVolumeCompensation;\n\n        const noteAllFreqsEnvelopeStart = envelopeStarts[EnvelopeComputeIndex.noteFilterAllFreqs];\n        const noteAllFreqsEnvelopeEnd = envelopeEnds[EnvelopeComputeIndex.noteFilterAllFreqs];\n\n        // Simple note filter\n        if (instrument.noteFilterType) {\n            const noteFreqEnvelopeStart = envelopeStarts[EnvelopeComputeIndex.noteFilterFreq0];\n            const noteFreqEnvelopeEnd = envelopeEnds[EnvelopeComputeIndex.noteFilterFreq0];\n            const notePeakEnvelopeStart = envelopeStarts[EnvelopeComputeIndex.noteFilterGain0];\n            const notePeakEnvelopeEnd = envelopeEnds[EnvelopeComputeIndex.noteFilterGain0];\n\n            startPoint!.toCoefficients(Synth.tempFilterStartCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeStart * noteFreqEnvelopeStart, notePeakEnvelopeStart);\n            endPoint!.toCoefficients(Synth.tempFilterEndCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeEnd * noteFreqEnvelopeEnd, notePeakEnvelopeEnd);\n\n            if (tone.noteFiltersL.length < 1) tone.noteFiltersL[0] = new DynamicBiquadFilter();\n            if (tone.noteFiltersR.length < 1) tone.noteFiltersR[0] = new DynamicBiquadFilter();\n            tone.noteFiltersL[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint!.type == FilterType.lowPass);\n            tone.noteFiltersR[0].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint!.type == FilterType.lowPass);\n            noteFilterExpression *= startPoint!.getVolumeCompensationMult();\n\n            tone.noteFilterCount = 1;\n        } else {\n            const noteFilterSettings = (instrument.tmpNoteFilterStart != null) ? instrument.tmpNoteFilterStart : instrument.noteFilter;\n\n            for (let i = 0; i < noteFilterSettings.controlPointCount; i++) {\n                const noteFreqEnvelopeStart = envelopeStarts[EnvelopeComputeIndex.noteFilterFreq0 + i];\n                const noteFreqEnvelopeEnd = envelopeEnds[EnvelopeComputeIndex.noteFilterFreq0 + i];\n                const notePeakEnvelopeStart = envelopeStarts[EnvelopeComputeIndex.noteFilterGain0 + i];\n                const notePeakEnvelopeEnd = envelopeEnds[EnvelopeComputeIndex.noteFilterGain0 + i];\n                let startPoint = noteFilterSettings.controlPoints[i];\n                const endPoint = (instrument.tmpNoteFilterEnd != null && instrument.tmpNoteFilterEnd.controlPoints[i] != null) ? instrument.tmpNoteFilterEnd.controlPoints[i] : noteFilterSettings.controlPoints[i];\n\n                // If switching dot type, do it all at once and do not try to interpolate since no valid interpolation exists.\n                if (startPoint.type != endPoint.type) {\n                    startPoint = endPoint;\n                }\n\n                startPoint.toCoefficients(Synth.tempFilterStartCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeStart * noteFreqEnvelopeStart, notePeakEnvelopeStart);\n                endPoint.toCoefficients(Synth.tempFilterEndCoefficients, this.samplesPerSecond, noteAllFreqsEnvelopeEnd * noteFreqEnvelopeEnd, notePeakEnvelopeEnd);\n                if (tone.noteFiltersL.length <= i) tone.noteFiltersL[i] = new DynamicBiquadFilter();\n                if (tone.noteFiltersR.length <= i) tone.noteFiltersR[i] = new DynamicBiquadFilter();\n                tone.noteFiltersL[i].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\n                tone.noteFiltersR[i].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, startPoint.type == FilterType.lowPass);\n                noteFilterExpression *= startPoint.getVolumeCompensationMult();\n            }\n            tone.noteFilterCount = noteFilterSettings.controlPointCount;\n        }\n\n        if (instrument.type == InstrumentType.drumset) {\n            const drumsetEnvelopeComputer = tone.envelopeComputer;\n\n            const drumsetFilterEnvelope = instrument.getDrumsetEnvelope(tone.drumsetPitch!);\n\n            // If the drumset lowpass cutoff decays, compensate by increasing expression.\n            noteFilterExpression *= EnvelopeComputer.getLowpassCutoffDecayVolumeCompensation(drumsetFilterEnvelope);\n\n            drumsetEnvelopeComputer.computeDrumsetEnvelopes(instrument, drumsetFilterEnvelope, beatsPerPart, partTimeStart, partTimeEnd);\n\n            const drumsetFilterEnvelopeStart = drumsetEnvelopeComputer.drumsetFilterEnvelopeStart;\n            const drumsetFilterEnvelopeEnd = drumsetEnvelopeComputer.drumsetFilterEnvelopeEnd;\n\n            const point = this.tempDrumSetControlPoint;\n            point.type = FilterType.lowPass;\n            point.gain = FilterControlPoint.getRoundedSettingValueFromLinearGain(0.50);\n            point.freq = FilterControlPoint.getRoundedSettingValueFromHz(8000.0);\n            // Drumset envelopes are warped to better imitate the legacy simplified 2nd order lowpass at ~48000Hz that I used to use.\n            point.toCoefficients(Synth.tempFilterStartCoefficients, this.samplesPerSecond, drumsetFilterEnvelopeStart * (1.0 + drumsetFilterEnvelopeStart), 1.0);\n            point.toCoefficients(Synth.tempFilterEndCoefficients, this.samplesPerSecond, drumsetFilterEnvelopeEnd * (1.0 + drumsetFilterEnvelopeEnd), 1.0);\n            if (tone.noteFiltersL.length == tone.noteFilterCount) tone.noteFiltersL[tone.noteFilterCount] = new DynamicBiquadFilter();\n            if (tone.noteFiltersR.length == tone.noteFilterCount) tone.noteFiltersR[tone.noteFilterCount] = new DynamicBiquadFilter();\n            tone.noteFiltersL[tone.noteFilterCount].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, true);\n            tone.noteFiltersR[tone.noteFilterCount].loadCoefficientsWithGradient(Synth.tempFilterStartCoefficients, Synth.tempFilterEndCoefficients, 1.0 / roundedSamplesPerTick, true);\n            tone.noteFilterCount++;\n        }\n\n        noteFilterExpression = Math.min(3.0, noteFilterExpression);\n\n        if (instrument.type == InstrumentType.fm || instrument.type == InstrumentType.fm6op) {\n            // phase modulation!\n\n            let sineExpressionBoost = 1.0;\n            let totalCarrierExpression = 0.0;\n\n            let arpeggioInterval = 0;\n            const arpeggiates = chord.arpeggiates;\n            const isMono = chord.name == \"monophonic\";\n            if (tone.pitchCount > 1 && arpeggiates) {\n                const arpeggio = Math.floor(instrumentState.arpTime / Config.ticksPerArpeggio);\n                arpeggioInterval = tone.pitches[getArpeggioPitchIndex(tone.pitchCount, instrument.fastTwoNoteArp, arpeggio)] - tone.pitches[0];\n            }\n\n\n            const carrierCount = (instrument.type == InstrumentType.fm6op ? instrument.customAlgorithm.carrierCount : Config.algorithms[instrument.algorithm].carrierCount);\n            for (let i = 0; i < (instrument.type == InstrumentType.fm6op ? 6 : Config.operatorCount); i++) {\n\n                const associatedCarrierIndex = (instrument.type == InstrumentType.fm6op ? instrument.customAlgorithm.associatedCarrier[i] - 1 : Config.algorithms[instrument.algorithm].associatedCarrier[i] - 1);\n                const pitch = tone.pitches[arpeggiates ? 0 : isMono ? instrument.monoChordTone : ((i < tone.pitchCount) ? i : ((associatedCarrierIndex < tone.pitchCount) ? associatedCarrierIndex : 0))];\n                const freqMult = Config.operatorFrequencies[instrument.operators[i].frequency].mult;\n                const interval = Config.operatorCarrierInterval[associatedCarrierIndex] + arpeggioInterval;\n                const pitchStart = basePitch + (pitch + intervalStart) * intervalScale + interval;\n                const pitchEnd = basePitch + (pitch + intervalEnd) * intervalScale + interval;\n                const baseFreqStart = Instrument.frequencyFromPitch(pitchStart);\n                const baseFreqEnd = Instrument.frequencyFromPitch(pitchEnd);\n                const hzOffset = Config.operatorFrequencies[instrument.operators[i].frequency].hzOffset;\n                const targetFreqStart = freqMult * baseFreqStart + hzOffset;\n                const targetFreqEnd = freqMult * baseFreqEnd + hzOffset;\n\n\n                const freqEnvelopeStart = envelopeStarts[EnvelopeComputeIndex.operatorFrequency0 + i];\n                const freqEnvelopeEnd = envelopeEnds[EnvelopeComputeIndex.operatorFrequency0 + i];\n                let freqStart: number;\n                let freqEnd: number;\n                if (freqEnvelopeStart != 1.0 || freqEnvelopeEnd != 1.0) {\n                    freqStart = Math.pow(2.0, Math.log2(targetFreqStart / baseFreqStart) * freqEnvelopeStart) * baseFreqStart;\n                    freqEnd = Math.pow(2.0, Math.log2(targetFreqEnd / baseFreqEnd) * freqEnvelopeEnd) * baseFreqEnd;\n                } else {\n                    freqStart = targetFreqStart;\n                    freqEnd = targetFreqEnd;\n                }\n                tone.phaseDeltas[i] = freqStart * sampleTime;\n                tone.phaseDeltaScales[i] = Math.pow(freqEnd / freqStart, 1.0 / roundedSamplesPerTick);\n\n                let amplitudeStart = instrument.operators[i].amplitude;\n                let amplitudeEnd = instrument.operators[i].amplitude;\n                if (i < 4) {\n                    if (this.isModActive(Config.modulators.dictionary[\"fm slider 1\"].index + i, channelIndex, tone.instrumentIndex)) {\n                        amplitudeStart *= this.getModValue(Config.modulators.dictionary[\"fm slider 1\"].index + i, channelIndex, tone.instrumentIndex, false) / 15.0;\n                        amplitudeEnd *= this.getModValue(Config.modulators.dictionary[\"fm slider 1\"].index + i, channelIndex, tone.instrumentIndex, true) / 15.0;\n                    }\n                } else {\n                    if (this.isModActive(Config.modulators.dictionary[\"fm slider 5\"].index + i - 4, channelIndex, tone.instrumentIndex)) {\n                        amplitudeStart *= this.getModValue(Config.modulators.dictionary[\"fm slider 5\"].index + i - 4, channelIndex, tone.instrumentIndex, false) / 15.0;\n                        amplitudeEnd *= this.getModValue(Config.modulators.dictionary[\"fm slider 5\"].index + i - 4, channelIndex, tone.instrumentIndex, true) / 15.0;\n                    }\n                }\n\n                const amplitudeCurveStart = Synth.operatorAmplitudeCurve(amplitudeStart);\n                const amplitudeCurveEnd = Synth.operatorAmplitudeCurve(amplitudeEnd);\n                const amplitudeMultStart = amplitudeCurveStart * Config.operatorFrequencies[instrument.operators[i].frequency].amplitudeSign;\n                const amplitudeMultEnd = amplitudeCurveEnd * Config.operatorFrequencies[instrument.operators[i].frequency].amplitudeSign;\n\n                let expressionStart = amplitudeMultStart;\n                let expressionEnd = amplitudeMultEnd;\n\n\n                if (i < carrierCount) {\n                    // carrier\n                    let pitchExpressionStart: number;\n                    if (tone.prevPitchExpressions[i] != null) {\n                        pitchExpressionStart = tone.prevPitchExpressions[i]!;\n                    } else {\n                        pitchExpressionStart = Math.pow(2.0, -(pitchStart - expressionReferencePitch) / pitchDamping);\n                    }\n                    const pitchExpressionEnd = Math.pow(2.0, -(pitchEnd - expressionReferencePitch) / pitchDamping);\n                    tone.prevPitchExpressions[i] = pitchExpressionEnd;\n                    expressionStart *= pitchExpressionStart;\n                    expressionEnd *= pitchExpressionEnd;\n\n                    totalCarrierExpression += amplitudeCurveEnd;\n                } else {\n                    // modulator\n                    expressionStart *= Config.sineWaveLength * 1.5;\n                    expressionEnd *= Config.sineWaveLength * 1.5;\n\n                    sineExpressionBoost *= 1.0 - Math.min(1.0, instrument.operators[i].amplitude / 15);\n                }\n\n                expressionStart *= envelopeStarts[EnvelopeComputeIndex.operatorAmplitude0 + i];\n                expressionEnd *= envelopeEnds[EnvelopeComputeIndex.operatorAmplitude0 + i];\n\n                // Check for mod-related volume delta\n                // @jummbus - This amplification is also applied to modulator FM operators which distorts the sound.\n                // The fix is to apply this only to carriers, but as this is a legacy bug and it can cause some interesting sounds, it's left in.\n                // You can use the post volume modulator instead to avoid this effect.\n\n                if (this.isModActive(Config.modulators.dictionary[\"pre volume\"].index, channelIndex, tone.instrumentIndex)) {\n                    // Linear falloff below 0, normal volume formula above 0. Seems to work best for scaling since the normal volume mult formula has a big gap from -25 to -24.\n                    const startVal = this.getModValue(Config.modulators.dictionary[\"pre volume\"].index, channelIndex, tone.instrumentIndex, false);\n                    const endVal = this.getModValue(Config.modulators.dictionary[\"pre volume\"].index, channelIndex, tone.instrumentIndex, true);\n                    expressionStart *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(startVal));\n                    expressionEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(endVal));\n                }\n\n                tone.operatorExpressions[i] = expressionStart;\n                tone.operatorExpressionDeltas[i] = (expressionEnd - expressionStart) / roundedSamplesPerTick;\n\n            }\n\n            sineExpressionBoost *= (Math.pow(2.0, (2.0 - 1.4 * instrument.feedbackAmplitude / 15.0)) - 1.0) / 3.0;\n            sineExpressionBoost *= 1.0 - Math.min(1.0, Math.max(0.0, totalCarrierExpression - 1) / 2.0);\n            sineExpressionBoost = 1.0 + sineExpressionBoost * 3.0;\n            let expressionStart = baseExpression * sineExpressionBoost * noteFilterExpression * fadeExpressionStart * chordExpressionStart * envelopeStarts[EnvelopeComputeIndex.noteVolume];\n            let expressionEnd = baseExpression * sineExpressionBoost * noteFilterExpression * fadeExpressionEnd * chordExpressionEnd * envelopeEnds[EnvelopeComputeIndex.noteVolume];\n            if (isMono && tone.pitchCount <= instrument.monoChordTone) { //silence if tone doesn't exist\n                expressionStart = 0;\n                expressionEnd = 0;\n            }\n            tone.expression = expressionStart;\n            tone.expressionDelta = (expressionEnd - expressionStart) / roundedSamplesPerTick;\n\n\n\n            let useFeedbackAmplitudeStart = instrument.feedbackAmplitude;\n            let useFeedbackAmplitudeEnd = instrument.feedbackAmplitude;\n            if (this.isModActive(Config.modulators.dictionary[\"fm feedback\"].index, channelIndex, tone.instrumentIndex)) {\n                useFeedbackAmplitudeStart *= this.getModValue(Config.modulators.dictionary[\"fm feedback\"].index, channelIndex, tone.instrumentIndex, false) / 15.0;\n                useFeedbackAmplitudeEnd *= this.getModValue(Config.modulators.dictionary[\"fm feedback\"].index, channelIndex, tone.instrumentIndex, true) / 15.0;\n            }\n\n            let feedbackAmplitudeStart = Config.sineWaveLength * 0.3 * useFeedbackAmplitudeStart / 15.0;\n            const feedbackAmplitudeEnd = Config.sineWaveLength * 0.3 * useFeedbackAmplitudeEnd / 15.0;\n\n            let feedbackStart = feedbackAmplitudeStart * envelopeStarts[EnvelopeComputeIndex.feedbackAmplitude];\n            let feedbackEnd = feedbackAmplitudeEnd * envelopeEnds[EnvelopeComputeIndex.feedbackAmplitude];\n            tone.feedbackMult = feedbackStart;\n            tone.feedbackDelta = (feedbackEnd - feedbackStart) / roundedSamplesPerTick;\n\n\n        } else {\n            const freqEndRatio = Math.pow(2.0, (intervalEnd - intervalStart) * intervalScale / 12.0);\n            const basePhaseDeltaScale = Math.pow(freqEndRatio, 1.0 / roundedSamplesPerTick);\n            const isMono = chord.name == \"monophonic\";\n\n\n            let pitch = tone.pitches[0];\n            if (tone.pitchCount > 1 && (chord.arpeggiates || chord.customInterval || isMono)) {\n                const arpeggio = Math.floor(instrumentState.arpTime / Config.ticksPerArpeggio);\n                if (chord.customInterval) {\n                    const intervalOffset = tone.pitches[1 + getArpeggioPitchIndex(tone.pitchCount - 1, instrument.fastTwoNoteArp, arpeggio)] - tone.pitches[0];\n                    specialIntervalMult = Math.pow(2.0, intervalOffset / 12.0);\n                    tone.specialIntervalExpressionMult = Math.pow(2.0, -intervalOffset / pitchDamping);\n                } else if (chord.arpeggiates) {\n                    pitch = tone.pitches[getArpeggioPitchIndex(tone.pitchCount, instrument.fastTwoNoteArp, arpeggio)];\n                } else {\n                    pitch = tone.pitches[instrument.monoChordTone];\n                }\n            }\n\n            const startPitch = basePitch + (pitch + intervalStart) * intervalScale;\n            const endPitch = basePitch + (pitch + intervalEnd) * intervalScale;\n            let pitchExpressionStart: number;\n            // TODO: use the second element of prevPitchExpressions for the unison voice, compute a separate expression delta for it.\n            if (tone.prevPitchExpressions[0] != null) {\n                pitchExpressionStart = tone.prevPitchExpressions[0]!;\n            } else {\n                pitchExpressionStart = Math.pow(2.0, -(startPitch - expressionReferencePitch) / pitchDamping);\n            }\n            const pitchExpressionEnd = Math.pow(2.0, -(endPitch - expressionReferencePitch) / pitchDamping);\n            tone.prevPitchExpressions[0] = pitchExpressionEnd;\n            let settingsExpressionMult = baseExpression * noteFilterExpression;\n\n            if (instrument.type == InstrumentType.noise) {\n                settingsExpressionMult *= Config.chipNoises[instrument.chipNoise].expression;\n            }\n            if (instrument.type == InstrumentType.chip) {\n                settingsExpressionMult *= Config.chipWaves[instrument.chipWave].expression;\n            }\n            if (instrument.type == InstrumentType.pwm) {\n                const basePulseWidth = getPulseWidthRatio(instrument.pulseWidth);\n\n                // Check for PWM mods to this instrument\n                let pulseWidthModStart = basePulseWidth;\n                let pulseWidthModEnd = basePulseWidth;\n                if (this.isModActive(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex)) {\n                    pulseWidthModStart = (this.getModValue(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex, false)) / (Config.pulseWidthRange * 2);\n                    pulseWidthModEnd = (this.getModValue(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex, true)) / (Config.pulseWidthRange * 2);\n                }\n\n                const pulseWidthStart = pulseWidthModStart * envelopeStarts[EnvelopeComputeIndex.pulseWidth];\n                const pulseWidthEnd = pulseWidthModEnd * envelopeEnds[EnvelopeComputeIndex.pulseWidth];\n                tone.pulseWidth = pulseWidthStart;\n                tone.pulseWidthDelta = (pulseWidthEnd - pulseWidthStart) / roundedSamplesPerTick;\n\n                //decimal offset mods\n                let decimalOffsetModStart = instrument.decimalOffset;\n                if (this.isModActive(Config.modulators.dictionary[\"decimal offset\"].index, channelIndex, tone.instrumentIndex)) {\n                    decimalOffsetModStart = this.getModValue(Config.modulators.dictionary[\"decimal offset\"].index, channelIndex, tone.instrumentIndex, false);\n                }\n\n                const decimalOffsetStart = decimalOffsetModStart * envelopeStarts[EnvelopeComputeIndex.decimalOffset];\n                tone.decimalOffset = decimalOffsetStart;\n\n                tone.pulseWidth -= (tone.decimalOffset) / 10000;\n            }\n            if (instrument.type == InstrumentType.pickedString) {\n                // Check for sustain mods\n                let useSustainStart = instrument.stringSustain;\n                let useSustainEnd = instrument.stringSustain;\n                if (this.isModActive(Config.modulators.dictionary[\"sustain\"].index, channelIndex, tone.instrumentIndex)) {\n                    useSustainStart = this.getModValue(Config.modulators.dictionary[\"sustain\"].index, channelIndex, tone.instrumentIndex, false);\n                    useSustainEnd = this.getModValue(Config.modulators.dictionary[\"sustain\"].index, channelIndex, tone.instrumentIndex, true);\n                }\n\n                tone.stringSustainStart = useSustainStart;\n                tone.stringSustainEnd = useSustainEnd;\n\n                // Increase expression to compensate for string decay.\n                settingsExpressionMult *= Math.pow(2.0, 0.7 * (1.0 - useSustainStart / (Config.stringSustainRange - 1)));\n\n            }\n\n            const startFreq = Instrument.frequencyFromPitch(startPitch);\n            if (instrument.type == InstrumentType.chip || instrument.type == InstrumentType.customChipWave || instrument.type == InstrumentType.harmonics || instrument.type == InstrumentType.pickedString || instrument.type == InstrumentType.spectrum || instrument.type == InstrumentType.pwm || instrument.type == InstrumentType.noise || instrument.type == InstrumentType.drumset) {\n                const unisonVoices = instrument.unisonVoices;\n                const unisonSpread = instrument.unisonSpread;\n                const unisonOffset = instrument.unisonOffset;\n                const unisonExpression = instrument.unisonExpression;\n                const voiceCountExpression = (instrument.type == InstrumentType.pickedString) ? 1 : unisonVoices / 2.0;\n                settingsExpressionMult *= unisonExpression * voiceCountExpression;\n                const unisonEnvelopeStart = envelopeStarts[EnvelopeComputeIndex.unison];\n                const unisonEnvelopeEnd = envelopeEnds[EnvelopeComputeIndex.unison];\n                const unisonStartA = Math.pow(2.0, (unisonOffset + unisonSpread) * unisonEnvelopeStart / 12.0);\n                const unisonEndA = Math.pow(2.0, (unisonOffset + unisonSpread) * unisonEnvelopeEnd / 12.0);\n                tone.phaseDeltas[0] = startFreq * sampleTime * unisonStartA;\n                tone.phaseDeltaScales[0] = basePhaseDeltaScale * Math.pow(unisonEndA / unisonStartA, 1.0 / roundedSamplesPerTick);\n                const divisor = (unisonVoices == 1) ? 1 : (unisonVoices - 1);\n                for (let i = 1; i < unisonVoices; i++) {\n                    const unisonStart = Math.pow(2.0, (unisonOffset + unisonSpread - (2 * i * unisonSpread / divisor)) * unisonEnvelopeStart / 12.0) * (specialIntervalMult);\n                    const unisonEnd = Math.pow(2.0, (unisonOffset + unisonSpread - (2 * i * unisonSpread / divisor)) * unisonEnvelopeEnd / 12.0) * (specialIntervalMult);\n                    tone.phaseDeltas[i] = startFreq * sampleTime * unisonStart;\n                    tone.phaseDeltaScales[i] = basePhaseDeltaScale * Math.pow(unisonEnd / unisonStart, 1.0 / roundedSamplesPerTick);\n                }\n                for (let i = unisonVoices; i < Config.unisonVoicesMax; i++) {\n                    tone.phaseDeltas[i] = tone.phaseDeltas[0];\n                    tone.phaseDeltaScales[i] = tone.phaseDeltaScales[0];\n                }\n\n            } else {\n                tone.phaseDeltas[0] = startFreq * sampleTime;\n                tone.phaseDeltaScales[0] = basePhaseDeltaScale;\n            }\n\n            // TODO: make expressionStart and expressionEnd variables earlier and modify those\n            // instead of these supersawExpression variables.\n            let supersawExpressionStart = 1.0;\n            let supersawExpressionEnd = 1.0;\n            if (instrument.type == InstrumentType.supersaw) {\n                const minFirstVoiceAmplitude = 1.0 / Math.sqrt(Config.supersawVoiceCount);\n\n                // Dynamism mods\n                let useDynamismStart = instrument.supersawDynamism / Config.supersawDynamismMax;\n                let useDynamismEnd = instrument.supersawDynamism / Config.supersawDynamismMax;\n                if (this.isModActive(Config.modulators.dictionary[\"dynamism\"].index, channelIndex, tone.instrumentIndex)) {\n                    useDynamismStart = (this.getModValue(Config.modulators.dictionary[\"dynamism\"].index, channelIndex, tone.instrumentIndex, false)) / Config.supersawDynamismMax;\n                    useDynamismEnd = (this.getModValue(Config.modulators.dictionary[\"dynamism\"].index, channelIndex, tone.instrumentIndex, true)) / Config.supersawDynamismMax;\n                }\n\n                const curvedDynamismStart = 1.0 - Math.pow(Math.max(0.0, 1.0 - useDynamismStart * envelopeStarts[EnvelopeComputeIndex.supersawDynamism]), 0.2);\n                const curvedDynamismEnd = 1.0 - Math.pow(Math.max(0.0, 1.0 - useDynamismEnd * envelopeEnds[EnvelopeComputeIndex.supersawDynamism]), 0.2);\n                const firstVoiceAmplitudeStart = Math.pow(2.0, Math.log2(minFirstVoiceAmplitude) * curvedDynamismStart);\n                const firstVoiceAmplitudeEnd = Math.pow(2.0, Math.log2(minFirstVoiceAmplitude) * curvedDynamismEnd);\n\n                const dynamismStart = Math.sqrt((1.0 / Math.pow(firstVoiceAmplitudeStart, 2.0) - 1.0) / (Config.supersawVoiceCount - 1.0));\n                const dynamismEnd = Math.sqrt((1.0 / Math.pow(firstVoiceAmplitudeEnd, 2.0) - 1.0) / (Config.supersawVoiceCount - 1.0));\n                tone.supersawDynamism = dynamismStart;\n                tone.supersawDynamismDelta = (dynamismEnd - dynamismStart) / roundedSamplesPerTick;\n\n                const initializeSupersaw = (tone.supersawDelayIndex == -1);\n                if (initializeSupersaw) {\n                    // Goal: generate sawtooth phases such that the combined initial amplitude\n                    // cancel out to minimize pop. Algorithm: generate sorted phases, iterate over\n                    // their sawtooth drop points to find a combined zero crossing, then offset the\n                    // phases so they start there.\n\n                    // Generate random phases in ascending order by adding positive randomly\n                    // sized gaps between adjacent phases. For a proper distribution of random\n                    // events, the gaps sizes should be an \"exponential distribution\", which is\n                    // just: -Math.log(Math.random()). At the end, normalize the phases to a 0-1\n                    // range by dividing by the final value of the accumulator.\n                    let accumulator = 0.0;\n                    for (let i = 0; i < Config.supersawVoiceCount; i++) {\n                        tone.phases[i] = accumulator;\n                        accumulator += -Math.log(Math.random());\n                    }\n\n                    const amplitudeSum = 1.0 + (Config.supersawVoiceCount - 1.0) * dynamismStart;\n                    const slope = amplitudeSum;\n\n                    // Find the initial amplitude of the sum of sawtooths with the normalized\n                    // set of phases.\n                    let sample = 0.0;\n                    for (let i = 0; i < Config.supersawVoiceCount; i++) {\n                        const amplitude = (i == 0) ? 1.0 : dynamismStart;\n                        const normalizedPhase = tone.phases[i] / accumulator;\n                        tone.phases[i] = normalizedPhase;\n                        sample += (normalizedPhase - 0.5) * amplitude;\n                    }\n\n                    // Find the phase of the zero crossing of the sum of the sawtooths. You can\n                    // use a constant slope and the distance between sawtooth drops to determine if\n                    // the zero crossing occurs between them. Note that a small phase means that\n                    // the corresponding drop for that wave is far away, and a big phase means the\n                    // drop is nearby, so to iterate forward through the drops we iterate backward\n                    // through the phases.\n                    let zeroCrossingPhase = 1.0;\n                    let prevDrop = 0.0;\n                    for (let i = Config.supersawVoiceCount - 1; i >= 0; i--) {\n                        const nextDrop = 1.0 - tone.phases[i];\n                        const phaseDelta = nextDrop - prevDrop;\n                        if (sample < 0.0) {\n                            const distanceToZeroCrossing = -sample / slope;\n                            if (distanceToZeroCrossing < phaseDelta) {\n                                zeroCrossingPhase = prevDrop + distanceToZeroCrossing;\n                                break;\n                            }\n                        }\n                        const amplitude = (i == 0) ? 1.0 : dynamismStart;\n                        sample += phaseDelta * slope - amplitude;\n                        prevDrop = nextDrop;\n                    }\n                    for (let i = 0; i < Config.supersawVoiceCount; i++) {\n                        tone.phases[i] += zeroCrossingPhase;\n                    }\n\n                    // Randomize the (initially sorted) order of the phases (aside from the\n                    // first one) so that they don't correlate to the detunes that are also\n                    // based on index.\n                    for (let i = 1; i < Config.supersawVoiceCount - 1; i++) {\n                        const swappedIndex = i + Math.floor(Math.random() * (Config.supersawVoiceCount - i));\n                        const temp = tone.phases[i];\n                        tone.phases[i] = tone.phases[swappedIndex];\n                        tone.phases[swappedIndex] = temp;\n                    }\n                }\n\n                const baseSpreadSlider = instrument.supersawSpread / Config.supersawSpreadMax;\n                // Spread mods\n                let useSpreadStart = baseSpreadSlider;\n                let useSpreadEnd = baseSpreadSlider;\n                if (this.isModActive(Config.modulators.dictionary[\"spread\"].index, channelIndex, tone.instrumentIndex)) {\n                    useSpreadStart = (this.getModValue(Config.modulators.dictionary[\"spread\"].index, channelIndex, tone.instrumentIndex, false)) / Config.supersawSpreadMax;\n                    useSpreadEnd = (this.getModValue(Config.modulators.dictionary[\"spread\"].index, channelIndex, tone.instrumentIndex, true)) / Config.supersawSpreadMax;\n                }\n\n                const spreadSliderStart = useSpreadStart * envelopeStarts[EnvelopeComputeIndex.supersawSpread];\n                const spreadSliderEnd = useSpreadEnd * envelopeEnds[EnvelopeComputeIndex.supersawSpread];\n                // Just use the average detune for the current tick in the below loop.\n                const averageSpreadSlider = (spreadSliderStart + spreadSliderEnd) * 0.5;\n                const curvedSpread = Math.pow(1.0 - Math.sqrt(Math.max(0.0, 1.0 - averageSpreadSlider)), 1.75);\n                for (let i = 0; i < Config.supersawVoiceCount; i++) {\n                    // Spread out the detunes around the center;\n                    const offset = (i == 0) ? 0.0 : Math.pow((((i + 1) >> 1) - 0.5 + 0.025 * ((i & 2) - 1)) / (Config.supersawVoiceCount >> 1), 1.1) * ((i & 1) * 2 - 1);\n                    tone.supersawUnisonDetunes[i] = Math.pow(2.0, curvedSpread * offset / 12.0);\n                }\n\n                const baseShape = instrument.supersawShape / Config.supersawShapeMax;\n                // Saw shape mods\n                let useShapeStart = baseShape * envelopeStarts[EnvelopeComputeIndex.supersawShape];\n                let useShapeEnd = baseShape * envelopeEnds[EnvelopeComputeIndex.supersawShape];\n                if (this.isModActive(Config.modulators.dictionary[\"saw shape\"].index, channelIndex, tone.instrumentIndex)) {\n                    useShapeStart = (this.getModValue(Config.modulators.dictionary[\"saw shape\"].index, channelIndex, tone.instrumentIndex, false)) / Config.supersawShapeMax;\n                    useShapeEnd = (this.getModValue(Config.modulators.dictionary[\"saw shape\"].index, channelIndex, tone.instrumentIndex, true)) / Config.supersawShapeMax;\n                }\n\n                const shapeStart = useShapeStart * envelopeStarts[EnvelopeComputeIndex.supersawShape];\n                const shapeEnd = useShapeEnd * envelopeEnds[EnvelopeComputeIndex.supersawShape];\n                tone.supersawShape = shapeStart;\n                tone.supersawShapeDelta = (shapeEnd - shapeStart) / roundedSamplesPerTick;\n\n                //decimal offset mods\n                let decimalOffsetModStart = instrument.decimalOffset;\n                if (this.isModActive(Config.modulators.dictionary[\"decimal offset\"].index, channelIndex, tone.instrumentIndex)) {\n                    decimalOffsetModStart = this.getModValue(Config.modulators.dictionary[\"decimal offset\"].index, channelIndex, tone.instrumentIndex, false);\n                }\n\n                const decimalOffsetStart = decimalOffsetModStart * envelopeStarts[EnvelopeComputeIndex.decimalOffset];\n                // ...is including tone.decimalOffset still necessary?\n                tone.decimalOffset = decimalOffsetStart;\n\n                const basePulseWidth = getPulseWidthRatio(instrument.pulseWidth);\n\n                // Check for PWM mods to this instrument\n                let pulseWidthModStart = basePulseWidth;\n                let pulseWidthModEnd = basePulseWidth;\n                if (this.isModActive(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex)) {\n                    pulseWidthModStart = (this.getModValue(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex, false)) / (Config.pulseWidthRange * 2);\n                    pulseWidthModEnd = (this.getModValue(Config.modulators.dictionary[\"pulse width\"].index, channelIndex, tone.instrumentIndex, true)) / (Config.pulseWidthRange * 2);\n                }\n\n                let pulseWidthStart = pulseWidthModStart * envelopeStarts[EnvelopeComputeIndex.pulseWidth];\n                let pulseWidthEnd = pulseWidthModEnd * envelopeEnds[EnvelopeComputeIndex.pulseWidth];\n                pulseWidthStart -= decimalOffsetStart / 10000;\n                pulseWidthEnd -= decimalOffsetStart / 10000;\n                const phaseDeltaStart = (tone.supersawPrevPhaseDelta != null) ? tone.supersawPrevPhaseDelta : startFreq * sampleTime;\n                const phaseDeltaEnd = startFreq * sampleTime * freqEndRatio;\n                tone.supersawPrevPhaseDelta = phaseDeltaEnd;\n                const delayLengthStart = pulseWidthStart / phaseDeltaStart;\n                const delayLengthEnd = pulseWidthEnd / phaseDeltaEnd;\n                tone.supersawDelayLength = delayLengthStart;\n                tone.supersawDelayLengthDelta = (delayLengthEnd - delayLengthStart) / roundedSamplesPerTick;\n                const minBufferLength = Math.ceil(Math.max(delayLengthStart, delayLengthEnd)) + 2;\n\n                if (tone.supersawDelayLine == null || tone.supersawDelayLine.length <= minBufferLength) {\n                    // The delay line buffer will get reused for other tones so might as well\n                    // start off with a buffer size that is big enough for most notes.\n                    const likelyMaximumLength = Math.ceil(0.5 * this.samplesPerSecond / Instrument.frequencyFromPitch(24));\n                    const newDelayLine: Float32Array = new Float32Array(fittingPowerOfTwo(Math.max(likelyMaximumLength, minBufferLength)));\n                    if (!initializeSupersaw && tone.supersawDelayLine != null) {\n                        // If the tone has already started but the buffer needs to be reallocated,\n                        // transfer the old data to the new buffer.\n                        const oldDelayBufferMask = (tone.supersawDelayLine.length - 1) >> 0;\n                        const startCopyingFromIndex = tone.supersawDelayIndex;\n                        for (let i = 0; i < tone.supersawDelayLine.length; i++) {\n                            newDelayLine[i] = tone.supersawDelayLine[(startCopyingFromIndex + i) & oldDelayBufferMask];\n                        }\n                    }\n                    tone.supersawDelayLine = newDelayLine;\n                    tone.supersawDelayIndex = tone.supersawDelayLine.length;\n                } else if (initializeSupersaw) {\n                    tone.supersawDelayLine.fill(0.0);\n                    tone.supersawDelayIndex = tone.supersawDelayLine.length;\n                }\n\n                const pulseExpressionRatio = Config.pwmBaseExpression / Config.supersawBaseExpression;\n                supersawExpressionStart *= (1.0 + (pulseExpressionRatio - 1.0) * shapeStart) / Math.sqrt(1.0 + (Config.supersawVoiceCount - 1.0) * dynamismStart * dynamismStart);\n                supersawExpressionEnd *= (1.0 + (pulseExpressionRatio - 1.0) * shapeEnd) / Math.sqrt(1.0 + (Config.supersawVoiceCount - 1.0) * dynamismEnd * dynamismEnd);\n            }\n\n            let expressionStart = settingsExpressionMult * fadeExpressionStart * chordExpressionStart * pitchExpressionStart * envelopeStarts[EnvelopeComputeIndex.noteVolume] * supersawExpressionStart;\n            let expressionEnd = settingsExpressionMult * fadeExpressionEnd * chordExpressionEnd * pitchExpressionEnd * envelopeEnds[EnvelopeComputeIndex.noteVolume] * supersawExpressionEnd;\n\n            // Check for mod-related volume delta\n            if (this.isModActive(Config.modulators.dictionary[\"pre volume\"].index, channelIndex, tone.instrumentIndex)) {\n                // Linear falloff below 0, normal volume formula above 0. Seems to work best for scaling since the normal volume mult formula has a big gap from -25 to -24.\n                const startVal = this.getModValue(Config.modulators.dictionary[\"pre volume\"].index, channelIndex, tone.instrumentIndex, false);\n                const endVal = this.getModValue(Config.modulators.dictionary[\"pre volume\"].index, channelIndex, tone.instrumentIndex, true)\n                expressionStart *= ((startVal <= 0) ? ((startVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(startVal));\n                expressionEnd *= ((endVal <= 0) ? ((endVal + Config.volumeRange / 2) / (Config.volumeRange / 2)) : Synth.instrumentVolumeToVolumeMult(endVal));\n            }\n            if (isMono && tone.pitchCount <= instrument.monoChordTone) { //silence if tone doesn't exist\n                expressionStart = 0;\n                expressionEnd = 0;\n                instrumentState.awake = false;\n            }\n\n            tone.expression = expressionStart;\n            tone.expressionDelta = (expressionEnd - expressionStart) / roundedSamplesPerTick;\n\n\n            if (instrument.type == InstrumentType.pickedString) {\n                let stringDecayStart: number;\n                if (tone.prevStringDecay != null) {\n                    stringDecayStart = tone.prevStringDecay;\n                } else {\n                    const sustainEnvelopeStart = tone.envelopeComputer.envelopeStarts[EnvelopeComputeIndex.stringSustain];\n                    stringDecayStart = 1.0 - Math.min(1.0, sustainEnvelopeStart * tone.stringSustainStart / (Config.stringSustainRange - 1));\n                }\n                const sustainEnvelopeEnd = tone.envelopeComputer.envelopeEnds[EnvelopeComputeIndex.stringSustain];\n                let stringDecayEnd = 1.0 - Math.min(1.0, sustainEnvelopeEnd * tone.stringSustainEnd / (Config.stringSustainRange - 1));\n                tone.prevStringDecay = stringDecayEnd;\n\n                //const unison = Config.unisons[instrument.unison];\n                const unisonVoices = instrument.unisonVoices;\n                for (let i = tone.pickedStrings.length; i < unisonVoices; i++) {\n                    tone.pickedStrings[i] = new PickedString();\n                }\n\n                if (tone.atNoteStart && !transition.continues && !tone.forceContinueAtStart) {\n                    for (const pickedString of tone.pickedStrings) {\n                        // Force the picked string to retrigger the attack impulse at the start of the note.\n                        pickedString.delayIndex = -1;\n                    }\n                }\n\n                for (let i = 0; i < unisonVoices; i++) {\n                    tone.pickedStrings[i].update(this, instrumentState, tone, i, roundedSamplesPerTick, stringDecayStart, stringDecayEnd, instrument.stringSustainType);\n                }\n            }\n        }\n    }\n\n    static getLFOAmplitude(instrument: Instrument, secondsIntoBar: number): number {\n        let effect = 0.0;\n        for (const vibratoPeriodSeconds of Config.vibratoTypes[instrument.vibratoType].periodsSeconds) {\n            effect += Math.sin(Math.PI * 2.0 * secondsIntoBar / vibratoPeriodSeconds);\n        }\n        return effect;\n    }\n\n\n    static getInstrumentSynthFunction(instrument: Instrument): Function {\n        if (instrument.type == InstrumentType.fm) {\n            const fingerprint = instrument.algorithm + \"_\" + instrument.feedbackType;\n            if (Synth.fmSynthFunctionCache[fingerprint] == undefined) {\n                const synthSource: string[] = [];\n\n                for (const line of Synth.fmSourceTemplate) {\n                    if (line.indexOf(\"// CARRIER OUTPUTS\") != -1) {\n                        const outputs: string[] = [];\n                        for (let j = 0; j < Config.algorithms[instrument.algorithm].carrierCount; j++) {\n                            outputs.push(\"operator\" + j + \"Scaled\");\n                        }\n                        synthSource.push(line.replace(\"/*operator#Scaled*/\", outputs.join(\" + \")));\n                    } else if (line.indexOf(\"// INSERT OPERATOR COMPUTATION HERE\") != -1) {\n                        for (let j = Config.operatorCount - 1; j >= 0; j--) {\n                            for (const operatorLine of Synth.operatorSourceTemplate) {\n                                if (operatorLine.indexOf(\"/* + operator@Scaled*/\") != -1) {\n                                    let modulators = \"\";\n                                    for (const modulatorNumber of Config.algorithms[instrument.algorithm].modulatedBy[j]) {\n                                        modulators += \" + operator\" + (modulatorNumber - 1) + \"Scaled\";\n                                    }\n\n                                    const feedbackIndices: ReadonlyArray<number> = Config.feedbacks[instrument.feedbackType].indices[j];\n                                    if (feedbackIndices.length > 0) {\n                                        modulators += \" + feedbackMult * (\";\n                                        const feedbacks: string[] = [];\n                                        for (const modulatorNumber of feedbackIndices) {\n                                            feedbacks.push(\"operator\" + (modulatorNumber - 1) + \"Output\");\n                                        }\n                                        modulators += feedbacks.join(\" + \") + \")\";\n                                    }\n                                    synthSource.push(operatorLine.replace(/\\#/g, j + \"\").replace(\"/* + operator@Scaled*/\", modulators));\n                                } else {\n                                    synthSource.push(operatorLine.replace(/\\#/g, j + \"\"));\n                                }\n                            }\n                        }\n                    } else if (line.indexOf(\"#\") != -1) {\n                        for (let j = 0; j < Config.operatorCount; j++) {\n                            synthSource.push(line.replace(/\\#/g, j + \"\"));\n                        }\n                    } else {\n                        synthSource.push(line);\n                    }\n                }\n\n                //console.log(synthSource.join(\"\\n\"));\n\n                const wrappedFmSynth = \"return (synth, bufferIndex, roundedSamplesPerTick, tone, instrument) => {\" + synthSource.join(\"\\n\") + \"}\";\n\n                Synth.fmSynthFunctionCache[fingerprint] = new Function(\"Config\", \"Synth\", wrappedFmSynth)(Config, Synth);\n\n            }\n            return Synth.fmSynthFunctionCache[fingerprint];\n        } else if (instrument.type == InstrumentType.chip) {\n            // advloop addition\n            if (instrument.isUsingAdvancedLoopControls) {\n                return Synth.loopableChipSynth;\n            }\n            // advloop addition\n            return Synth.chipSynth;\n        } else if (instrument.type == InstrumentType.customChipWave) {\n            return Synth.chipSynth;\n        } else if (instrument.type == InstrumentType.harmonics) {\n            return Synth.harmonicsSynth;\n        } else if (instrument.type == InstrumentType.pwm) {\n            return Synth.pulseWidthSynth;\n        } else if (instrument.type == InstrumentType.supersaw) {\n            return Synth.supersawSynth;\n        } else if (instrument.type == InstrumentType.pickedString) {\n            return Synth.pickedStringSynth;\n        } else if (instrument.type == InstrumentType.noise) {\n            return Synth.noiseSynth;\n        } else if (instrument.type == InstrumentType.spectrum) {\n            return Synth.spectrumSynth;\n        } else if (instrument.type == InstrumentType.drumset) {\n            return Synth.drumsetSynth;\n        } else if (instrument.type == InstrumentType.mod) {\n            return Synth.modSynth;\n        } else if (instrument.type == InstrumentType.fm6op) {\n            const fingerprint = instrument.customAlgorithm.name + \"_\" + instrument.customFeedbackType.name;\n            if (Synth.fm6SynthFunctionCache[fingerprint] == undefined) {\n                const synthSource: string[] = [];\n\n                for (const line of Synth.fmSourceTemplate) {\n                    if (line.indexOf(\"// CARRIER OUTPUTS\") != -1) {\n                        const outputs: string[] = [];\n                        for (let j = 0; j < instrument.customAlgorithm.carrierCount; j++) {\n                            outputs.push(\"operator\" + j + \"Scaled\");\n                        }\n                        synthSource.push(line.replace(\"/*operator#Scaled*/\", outputs.join(\" + \")));\n                    } else if (line.indexOf(\"// INSERT OPERATOR COMPUTATION HERE\") != -1) {\n                        for (let j = Config.operatorCount + 2 - 1; j >= 0; j--) {\n                            for (const operatorLine of Synth.operatorSourceTemplate) {\n                                if (operatorLine.indexOf(\"/* + operator@Scaled*/\") != -1) {\n                                    let modulators = \"\";\n                                    for (const modulatorNumber of instrument.customAlgorithm.modulatedBy[j]) {\n                                        modulators += \" + operator\" + (modulatorNumber - 1) + \"Scaled\";\n                                    }\n\n                                    const feedbackIndices: ReadonlyArray<number> = instrument.customFeedbackType.indices[j];\n                                    if (feedbackIndices.length > 0) {\n                                        modulators += \" + feedbackMult * (\";\n                                        const feedbacks: string[] = [];\n                                        for (const modulatorNumber of feedbackIndices) {\n                                            feedbacks.push(\"operator\" + (modulatorNumber - 1) + \"Output\");\n                                        }\n                                        modulators += feedbacks.join(\" + \") + \")\";\n                                    }\n                                    synthSource.push(operatorLine.replace(/\\#/g, j + \"\").replace(\"/* + operator@Scaled*/\", modulators));\n                                } else {\n                                    synthSource.push(operatorLine.replace(/\\#/g, j + \"\"));\n                                }\n                            }\n                        }\n                    } else if (line.indexOf(\"#\") != -1) {\n                        for (let j = 0; j < Config.operatorCount + 2; j++) {\n                            synthSource.push(line.replace(/\\#/g, j + \"\"));\n                        }\n                    } else {\n                        synthSource.push(line);\n                    }\n                }\n\n                //console.log(synthSource.join(\"\\n\"));\n\n                const wrappedFm6Synth = \"return (synth, bufferIndex, roundedSamplesPerTick, tone, instrument) => {\" + synthSource.join(\"\\n\") + \"}\";\n\n                Synth.fm6SynthFunctionCache[fingerprint] = new Function(\"Config\", \"Synth\", wrappedFm6Synth)(Config, Synth);\n            }\n            return Synth.fm6SynthFunctionCache[fingerprint];\n        } else {\n            throw new Error(\"Unrecognized instrument type: \" + instrument.type);\n        }\n    }\n    // advloop addition\n    static wrap(x: number, b: number): number {\n        return (x % b + b) % b;\n    }\n    static loopableChipSynth(synth: Synth, bufferIndex: number, roundedSamplesPerTick: number, tone: Tone, instrumentState: InstrumentState): void {\n        // @TODO:\n        // - Longer declicking? This is more difficult than I thought.\n        //   When determining this automatically is difficult (or the input\n        //   samples are expected to vary too much), this is left up to the\n        //   user.\n        const aliases = (instrumentState.effectsIncludeType(EffectType.distortion) && instrumentState.aliases);\n        // const aliases = false;\n        const dataL: Float32Array = synth.tempInstrumentSampleBufferL!;\n        const dataR: Float32Array = synth.tempInstrumentSampleBufferR!;\n        const waveL: Float32Array = instrumentState.waveL!;\n        const waveR: Float32Array = instrumentState.waveR!;\n        const volumeScale = instrumentState.volumeScale;\n        const waveLength = (aliases && instrumentState.type == 8) ? waveL.length : waveL.length - 1;\n        let chipWaveLoopEnd = Math.max(0, Math.min(waveLength, instrumentState.chipWaveLoopEnd));\n        let chipWaveLoopStart = Math.max(0, Math.min(chipWaveLoopEnd - 1, instrumentState.chipWaveLoopStart));\n        // @TODO: This is where to set things up for the release loop mode.\n        // const ticksSinceReleased = tone.ticksSinceReleased;\n        // if (ticksSinceReleased > 0) {\n        //     chipWaveLoopStart = 0;\n        //     chipWaveLoopEnd = waveLength - 1;\n        // }\n        let chipWaveLoopLength = chipWaveLoopEnd - chipWaveLoopStart;\n        if (chipWaveLoopLength < 2) {\n            chipWaveLoopStart = 0;\n            chipWaveLoopEnd = waveLength;\n            chipWaveLoopLength = waveLength;\n        }\n        const chipWaveLoopMode = instrumentState.chipWaveLoopMode;\n        const chipWavePlayBackwards = instrumentState.chipWavePlayBackwards;\n        const unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\n        if (instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord!.customInterval)\n            tone.phases[1] = tone.phases[0];\n        let phaseDeltaA = tone.phaseDeltas[0] * waveLength;\n        let phaseDeltaB = tone.phaseDeltas[1] * waveLength;\n        let directionA = tone.directions[0];\n        let directionB = tone.directions[1];\n        let chipWaveCompletionA = tone.chipWaveCompletions[0];\n        let chipWaveCompletionB = tone.chipWaveCompletions[1];\n        if (chipWaveLoopMode === 3 || chipWaveLoopMode === 2 || chipWaveLoopMode === 0) {\n            // If playing once or looping, we force the correct direction,\n            // since it shouldn't really change. This is mostly so that if\n            // the mode is changed midway through playback, it won't get\n            // stuck on the wrong direction.\n            if (!chipWavePlayBackwards) {\n                directionA = 1;\n                directionB = 1;\n            } else {\n                directionA = -1;\n                directionB = -1;\n            }\n        }\n        if (chipWaveLoopMode === 0 || chipWaveLoopMode === 1) {\n            // If looping or ping-ponging, we clear the completion status,\n            // as it's not relevant anymore. This is mostly so that if the\n            // mode is changed midway through playback, it won't get stuck\n            // on zero volume.\n            chipWaveCompletionA = 0;\n            chipWaveCompletionB = 0;\n        }\n        let lastWaveLA = tone.chipWaveCompletionsLastWaveL[0];\n        let lastWaveLB = tone.chipWaveCompletionsLastWaveL[1];\n        let lastWaveRA = tone.chipWaveCompletionsLastWaveR[0];\n        let lastWaveRB = tone.chipWaveCompletionsLastWaveR[1];\n        const chipWaveCompletionFadeLength = 1000;\n        const phaseDeltaScaleA = +tone.phaseDeltaScales[0];\n        const phaseDeltaScaleB = +tone.phaseDeltaScales[1];\n        let expression = +tone.expression;\n        const expressionDelta = +tone.expressionDelta;\n        let phaseA = Synth.wrap(tone.phases[0], 1) * waveLength;\n        let phaseB = Synth.wrap(tone.phases[1], 1) * waveLength;\n        let prevWaveIntegralLA = 0;\n        let prevWaveIntegralLB = 0;\n        let prevWaveIntegralRA = 0;\n        let prevWaveIntegralRB = 0;\n        if (!aliases) {\n            const phaseAInt = Math.floor(phaseA);\n            const phaseBInt = Math.floor(phaseB);\n            const indexA = Synth.wrap(phaseAInt, waveLength);\n            const indexB = Synth.wrap(phaseBInt, waveLength);\n            const phaseRatioA = phaseA - phaseAInt;\n            const phaseRatioB = phaseB - phaseBInt;\n            prevWaveIntegralLA = +waveL[indexA];\n            prevWaveIntegralLB = +waveL[indexB];\n            prevWaveIntegralRA = +waveR[indexA];\n            prevWaveIntegralRB = +waveR[indexB];\n            prevWaveIntegralLA += (waveL[Synth.wrap(indexA + 1, waveLength)] - prevWaveIntegralLA) * phaseRatioA;\n            prevWaveIntegralLB += (waveL[Synth.wrap(indexB + 1, waveLength)] - prevWaveIntegralLB) * phaseRatioB;\n            prevWaveIntegralRA += (waveR[Synth.wrap(indexA + 1, waveLength)] - prevWaveIntegralRA) * phaseRatioA;\n            prevWaveIntegralRB += (waveR[Synth.wrap(indexB + 1, waveLength)] - prevWaveIntegralRB) * phaseRatioB;\n        }\n        const filtersL = tone.noteFiltersL;\n        const filtersR = tone.noteFiltersR;\n        const filterCount = tone.noteFilterCount | 0;\n        let initialFilterInputL1 = +tone.initialNoteFilterInputL1;\n        let initialFilterInputR1 = +tone.initialNoteFilterInputR1;\n        let initialFilterInputL2 = +tone.initialNoteFilterInputL2;\n        let initialFilterInputR2 = +tone.initialNoteFilterInputR2;\n        const applyFilters = Synth.applyFilters;\n        const stopIndex = bufferIndex + roundedSamplesPerTick;\n        let prevWaveLA = tone.chipWavePrevWavesL[0];\n        let prevWaveLB = tone.chipWavePrevWavesL[1];\n        let prevWaveRA = tone.chipWavePrevWavesR[0];\n        let prevWaveRB = tone.chipWavePrevWavesR[1];\n        for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n            if (chipWaveCompletionA > 0 && chipWaveCompletionA < chipWaveCompletionFadeLength) {\n                chipWaveCompletionA++;\n            }\n            if (chipWaveCompletionB > 0 && chipWaveCompletionB < chipWaveCompletionFadeLength) {\n                chipWaveCompletionB++;\n            }\n            let wrapped = 0;\n            phaseA += phaseDeltaA * directionA;\n            phaseB += phaseDeltaB * directionB;\n            if (chipWaveLoopMode === 2) {\n                // once\n                if (directionA === 1) {\n                    if (phaseA > waveLength) {\n                        if (chipWaveCompletionA <= 0) {\n                            lastWaveLA = prevWaveLA;\n                            lastWaveRA = prevWaveRA;\n                            chipWaveCompletionA++;\n                        }\n                        wrapped = 1;\n                    }\n                } else if (directionA === -1) {\n                    if (phaseA < 0) {\n                        if (chipWaveCompletionA <= 0) {\n                            lastWaveLA = prevWaveLA;\n                            lastWaveRA = prevWaveRA;\n                            chipWaveCompletionA++;\n                        }\n                        wrapped = 1;\n                    }\n                }\n                if (directionB === 1) {\n                    if (phaseB > waveLength) {\n                        if (chipWaveCompletionB <= 0) {\n                            lastWaveLB = prevWaveLB;\n                            lastWaveRB = prevWaveRB;\n                            chipWaveCompletionB++;\n                        }\n                        wrapped = 1;\n                    }\n                } else if (directionA === -1) {\n                    if (phaseB < 0) {\n                        if (chipWaveCompletionB <= 0) {\n                            lastWaveLB = prevWaveLB;\n                            lastWaveRB = prevWaveRB;\n                            chipWaveCompletionB++;\n                        }\n                        wrapped = 1;\n                    }\n                }\n            } else if (chipWaveLoopMode === 3) {\n                // loop once\n                if (directionA === 1) {\n                    if (phaseA > chipWaveLoopEnd) {\n                        if (chipWaveCompletionA <= 0) {\n                            lastWaveLA = prevWaveLA;\n                            lastWaveRA = prevWaveRA;\n                            chipWaveCompletionA++;\n                        }\n                        wrapped = 1;\n                    }\n                } else if (directionA === -1) {\n                    if (phaseA < chipWaveLoopStart) {\n                        if (chipWaveCompletionA <= 0) {\n                            lastWaveLA = prevWaveLA;\n                            lastWaveRA = prevWaveRA;\n                            chipWaveCompletionA++;\n                        }\n                        wrapped = 1;\n                    }\n                }\n                if (directionB === 1) {\n                    if (phaseB > chipWaveLoopEnd) {\n                        if (chipWaveCompletionB <= 0) {\n                            lastWaveLB = prevWaveLB;\n                            lastWaveRB = prevWaveRB;\n                            chipWaveCompletionB++;\n                        }\n                        wrapped = 1;\n                    }\n                } else if (directionA === -1) {\n                    if (phaseB < chipWaveLoopStart) {\n                        if (chipWaveCompletionB <= 0) {\n                            lastWaveLB = prevWaveLB;\n                            lastWaveRB = prevWaveRB;\n                            chipWaveCompletionB++;\n                        }\n                        wrapped = 1;\n                    }\n                }\n            } else if (chipWaveLoopMode === 0) {\n                // loop\n                if (directionA === 1) {\n                    if (phaseA > chipWaveLoopEnd) {\n                        phaseA = chipWaveLoopStart + Synth.wrap(phaseA - chipWaveLoopEnd, chipWaveLoopLength);\n                        // phaseA = chipWaveLoopStart;\n                        wrapped = 1;\n                    }\n                } else if (directionA === -1) {\n                    if (phaseA < chipWaveLoopStart) {\n                        phaseA = chipWaveLoopEnd - Synth.wrap(chipWaveLoopStart - phaseA, chipWaveLoopLength);\n                        // phaseA = chipWaveLoopEnd;\n                        wrapped = 1;\n                    }\n                }\n                if (directionB === 1) {\n                    if (phaseB > chipWaveLoopEnd) {\n                        phaseB = chipWaveLoopStart + Synth.wrap(phaseB - chipWaveLoopEnd, chipWaveLoopLength);\n                        // phaseB = chipWaveLoopStart;\n                        wrapped = 1;\n                    }\n                } else if (directionB === -1) {\n                    if (phaseB < chipWaveLoopStart) {\n                        phaseB = chipWaveLoopEnd - Synth.wrap(chipWaveLoopStart - phaseB, chipWaveLoopLength);\n                        // phaseB = chipWaveLoopEnd;\n                        wrapped = 1;\n                    }\n                }\n            } else if (chipWaveLoopMode === 1) {\n                // ping-pong\n                if (directionA === 1) {\n                    if (phaseA > chipWaveLoopEnd) {\n                        phaseA = chipWaveLoopEnd - Synth.wrap(phaseA - chipWaveLoopEnd, chipWaveLoopLength);\n                        // phaseA = chipWaveLoopEnd;\n                        directionA = -1;\n                        wrapped = 1;\n                    }\n                } else if (directionA === -1) {\n                    if (phaseA < chipWaveLoopStart) {\n                        phaseA = chipWaveLoopStart + Synth.wrap(chipWaveLoopStart - phaseA, chipWaveLoopLength);\n                        // phaseA = chipWaveLoopStart;\n                        directionA = 1;\n                        wrapped = 1;\n                    }\n                }\n                if (directionB === 1) {\n                    if (phaseB > chipWaveLoopEnd) {\n                        phaseB = chipWaveLoopEnd - Synth.wrap(phaseB - chipWaveLoopEnd, chipWaveLoopLength);\n                        // phaseB = chipWaveLoopEnd;\n                        directionB = -1;\n                        wrapped = 1;\n                    }\n                } else if (directionB === -1) {\n                    if (phaseB < chipWaveLoopStart) {\n                        phaseB = chipWaveLoopStart + Synth.wrap(chipWaveLoopStart - phaseB, chipWaveLoopLength);\n                        // phaseB = chipWaveLoopStart;\n                        directionB = 1;\n                        wrapped = 1;\n                    }\n                }\n            }\n            let waveLA = 0;\n            let waveLB = 0;\n            let waveRA = 0;\n            let waveRB = 0;\n            let inputSampleL = 0;\n            let inputSampleR = 0;\n            if (aliases) {\n                waveLA = waveL[Synth.wrap(Math.floor(phaseA), waveLength)];\n                waveLB = waveL[Synth.wrap(Math.floor(phaseB), waveLength)];\n                waveRA = waveR[Synth.wrap(Math.floor(phaseA), waveLength)];\n                waveRB = waveR[Synth.wrap(Math.floor(phaseB), waveLength)];\n                prevWaveLA = waveLA;\n                prevWaveLB = waveLB;\n                prevWaveRA = waveRA;\n                prevWaveRB = waveRB;\n                const completionFadeA = chipWaveCompletionA > 0 ? ((chipWaveCompletionFadeLength - Math.min(chipWaveCompletionA, chipWaveCompletionFadeLength)) / chipWaveCompletionFadeLength) : 1;\n                const completionFadeB = chipWaveCompletionB > 0 ? ((chipWaveCompletionFadeLength - Math.min(chipWaveCompletionB, chipWaveCompletionFadeLength)) / chipWaveCompletionFadeLength) : 1;\n                inputSampleL = 0;\n                if (chipWaveCompletionA > 0) {\n                    inputSampleL += lastWaveLA * completionFadeA;\n                    inputSampleR += lastWaveLA * completionFadeA;\n                } else {\n                    inputSampleL += waveLA;\n                    inputSampleR += waveRA;\n                }\n                if (chipWaveCompletionB > 0) {\n                    inputSampleL += lastWaveLB * completionFadeB;\n                    inputSampleR += lastWaveRB * completionFadeB;\n                } else {\n                    inputSampleL += waveLB;\n                    inputSampleR += waveRB;\n                }\n            }\n            else {\n                const phaseAInt = Math.floor(phaseA);\n                const phaseBInt = Math.floor(phaseB);\n                const indexA = Synth.wrap(phaseAInt, waveLength);\n                const indexB = Synth.wrap(phaseBInt, waveLength);\n                let nextWaveIntegralLA = waveL[indexA];\n                let nextWaveIntegralLB = waveL[indexB];\n                let nextWaveIntegralRA = waveR[indexA];\n                let nextWaveIntegralRB = waveR[indexB];\n                const phaseRatioA = phaseA - phaseAInt;\n                const phaseRatioB = phaseB - phaseBInt;\n                nextWaveIntegralLA += (waveL[Synth.wrap(indexA + 1, waveLength)] - nextWaveIntegralLA) * phaseRatioA;\n                nextWaveIntegralLB += (waveL[Synth.wrap(indexB + 1, waveLength)] - nextWaveIntegralLB) * phaseRatioB;\n                nextWaveIntegralRA += (waveR[Synth.wrap(indexA + 1, waveLength)] - nextWaveIntegralRA) * phaseRatioA;\n                nextWaveIntegralRB += (waveR[Synth.wrap(indexB + 1, waveLength)] - nextWaveIntegralRB) * phaseRatioB;\n                if (!(chipWaveLoopMode === 0 && chipWaveLoopStart === 0 && chipWaveLoopEnd === waveLength) && wrapped !== 0) {\n                    let pwila = 0;\n                    let pwilb = 0;\n                    let pwira = 0;\n                    let pwirb = 0;\n                    const phaseA_ = Math.max(0, phaseA - phaseDeltaA * directionA);\n                    const phaseB_ = Math.max(0, phaseB - phaseDeltaB * directionB);\n                    const phaseAInt = Math.floor(phaseA_);\n                    const phaseBInt = Math.floor(phaseB_);\n                    const indexA = Synth.wrap(phaseAInt, waveLength);\n                    const indexB = Synth.wrap(phaseBInt, waveLength);\n                    pwila = waveL[indexA];\n                    pwilb = waveL[indexB];\n                    pwira = waveR[indexA];\n                    pwirb = waveR[indexB];\n                    pwila += (waveL[Synth.wrap(indexA + 1, waveLength)] - pwila) * (phaseA_ - phaseAInt) * directionA;\n                    pwilb += (waveL[Synth.wrap(indexB + 1, waveLength)] - pwilb) * (phaseB_ - phaseBInt) * directionB;\n                    pwira += (waveR[Synth.wrap(indexA + 1, waveLength)] - pwira) * (phaseA_ - phaseAInt) * directionA;\n                    pwirb += (waveR[Synth.wrap(indexB + 1, waveLength)] - pwirb) * (phaseB_ - phaseBInt) * directionB;\n                    prevWaveIntegralLA = pwila;\n                    prevWaveIntegralLB = pwilb;\n                    prevWaveIntegralRA = pwira;\n                    prevWaveIntegralRB = pwirb;\n                }\n                if (chipWaveLoopMode === 1 && wrapped !== 0) {\n                    waveLA = prevWaveLA;\n                    waveLB = prevWaveLB;\n                    waveRA = prevWaveRA;\n                    waveRB = prevWaveRB;\n                } else {\n                    waveLA = (nextWaveIntegralLA - prevWaveIntegralLA) / (phaseDeltaA * directionA);\n                    waveLB = (nextWaveIntegralLB - prevWaveIntegralLB) / (phaseDeltaB * directionB);\n                    waveRA = (nextWaveIntegralRA - prevWaveIntegralRA) / (phaseDeltaA * directionA);\n                    waveRB = (nextWaveIntegralRB - prevWaveIntegralRB) / (phaseDeltaB * directionB);\n                }\n                prevWaveLA = waveLA;\n                prevWaveLB = waveLB;\n                prevWaveRA = waveRA;\n                prevWaveRB = waveRB;\n                prevWaveIntegralLA = nextWaveIntegralLA;\n                prevWaveIntegralLB = nextWaveIntegralLB;\n                prevWaveIntegralRA = nextWaveIntegralRA;\n                prevWaveIntegralRB = nextWaveIntegralRB;\n                const completionFadeA = chipWaveCompletionA > 0 ? ((chipWaveCompletionFadeLength - Math.min(chipWaveCompletionA, chipWaveCompletionFadeLength)) / chipWaveCompletionFadeLength) : 1;\n                const completionFadeB = chipWaveCompletionB > 0 ? ((chipWaveCompletionFadeLength - Math.min(chipWaveCompletionB, chipWaveCompletionFadeLength)) / chipWaveCompletionFadeLength) : 1;\n                if (chipWaveCompletionA > 0) {\n                    inputSampleL += lastWaveLA * completionFadeA;\n                    inputSampleR += lastWaveRA * completionFadeA;\n                } else {\n                    inputSampleL += waveLA;\n                    inputSampleR += waveRA;\n                }\n                if (chipWaveCompletionB > 0) {\n                    inputSampleL += lastWaveLB * completionFadeB;\n                    inputSampleR += lastWaveRB * completionFadeB;\n                } else {\n                    inputSampleL += waveLB * unisonSign;\n                    inputSampleR += waveRB * unisonSign;\n                }\n            }\n            const sampleL = applyFilters(inputSampleL * volumeScale, initialFilterInputL1, initialFilterInputL2, filterCount, filtersL);\n            const sampleR = applyFilters(inputSampleR * volumeScale, initialFilterInputR1, initialFilterInputR2, filterCount, filtersR);\n            initialFilterInputL2 = initialFilterInputL1;\n            initialFilterInputR2 = initialFilterInputR1;\n            initialFilterInputL1 = inputSampleL * volumeScale;\n            initialFilterInputR1 = inputSampleR * volumeScale;\n            phaseDeltaA *= phaseDeltaScaleA;\n            phaseDeltaB *= phaseDeltaScaleB;\n            const outputL = sampleL * expression;\n            const outputR = sampleR * expression;\n            expression += expressionDelta;\n            dataL[sampleIndex] += outputL;\n            dataR[sampleIndex] += outputR;\n        }\n        tone.phases[0] = phaseA / waveLength;\n        tone.phases[1] = phaseB / waveLength;\n        tone.phaseDeltas[0] = phaseDeltaA / waveLength;\n        tone.phaseDeltas[1] = phaseDeltaB / waveLength;\n        tone.directions[0] = directionA;\n        tone.directions[1] = directionB;\n        tone.chipWaveCompletions[0] = chipWaveCompletionA;\n        tone.chipWaveCompletions[1] = chipWaveCompletionB;\n        tone.chipWavePrevWavesL[0] = prevWaveLA;\n        tone.chipWavePrevWavesL[1] = prevWaveLB;\n        tone.chipWavePrevWavesR[0] = prevWaveRA;\n        tone.chipWavePrevWavesR[1] = prevWaveRB;\n        tone.chipWaveCompletionsLastWaveL[0] = lastWaveLA;\n        tone.chipWaveCompletionsLastWaveL[1] = lastWaveLB;\n        tone.chipWaveCompletionsLastWaveR[0] = lastWaveRA;\n        tone.chipWaveCompletionsLastWaveR[1] = lastWaveRB;\n        tone.expression = expression;\n        synth.sanitizeFilters(filtersL);\n        synth.sanitizeFilters(filtersR);\n        tone.initialNoteFilterInputL1 = initialFilterInputL1;\n        tone.initialNoteFilterInputR1 = initialFilterInputR1;\n        tone.initialNoteFilterInputL2 = initialFilterInputL2;\n        tone.initialNoteFilterInputR2 = initialFilterInputR2;\n    }\n    private static chipSynth(synth: Synth, bufferIndex: number, roundedSamplesPerTick: number, tone: Tone, instrumentState: InstrumentState): void {\n        const aliases = (instrumentState.effectsIncludeType(EffectType.eqFilter) && instrumentState.aliases);\n        const dataL: Float32Array = synth.tempInstrumentSampleBufferL!;\n        const dataR: Float32Array = synth.tempInstrumentSampleBufferR!;\n        const waveL: Float32Array = instrumentState.waveL!;\n        const waveR: Float32Array = instrumentState.waveR!;\n        const volumeScale = instrumentState.volumeScale;\n\n        const waveLength = (aliases && instrumentState.type == 8) ? waveL.length : waveL.length - 1;\n\n        const unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\n        if (instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord!.customInterval) tone.phases[1] = tone.phases[0];\n        let phaseDeltaA = tone.phaseDeltas[0] * waveLength;\n        let phaseDeltaB = tone.phaseDeltas[1] * waveLength;\n        const phaseDeltaScaleA = +tone.phaseDeltaScales[0];\n        const phaseDeltaScaleB = +tone.phaseDeltaScales[1];\n        let expression = +tone.expression;\n        const expressionDelta = +tone.expressionDelta;\n        let phaseA = (tone.phases[0] % 1) * waveLength;\n        let phaseB = (tone.phases[1] % 1) * waveLength;\n\n        const filtersL: DynamicBiquadFilter[] = tone.noteFiltersL;\n        const filtersR: DynamicBiquadFilter[] = tone.noteFiltersR;\n        const filterCount = tone.noteFilterCount | 0;\n        let initialFilterInputL1 = +tone.initialNoteFilterInputL1;\n        let initialFilterInputR1 = +tone.initialNoteFilterInputR1;\n        let initialFilterInputL2 = +tone.initialNoteFilterInputL2;\n        let initialFilterInputR2 = +tone.initialNoteFilterInputR2;\n        const applyFilters = Synth.applyFilters;\n        let prevWaveIntegralLA = 0;\n        let prevWaveIntegralLB = 0;\n        let prevWaveIntegralRA = 0;\n        let prevWaveIntegralRB = 0;\n\n        if (!aliases) {\n            const phaseAInt = phaseA | 0;\n            const phaseBInt = phaseB | 0;\n            const indexA = phaseAInt % waveLength;\n            const indexB = phaseBInt % waveLength;\n            const phaseRatioA = phaseA - phaseAInt;\n            const phaseRatioB = phaseB - phaseBInt;\n            prevWaveIntegralLA = +waveL[indexA];\n            prevWaveIntegralLB = +waveL[indexB];\n            prevWaveIntegralRA = +waveR[indexA];\n            prevWaveIntegralRB = +waveR[indexB];\n            prevWaveIntegralLA += (waveL[indexA + 1] - prevWaveIntegralLA) * phaseRatioA;\n            prevWaveIntegralLB += (waveL[indexB + 1] - prevWaveIntegralLB) * phaseRatioB;\n            prevWaveIntegralRA += (waveR[indexA + 1] - prevWaveIntegralRA) * phaseRatioA;\n            prevWaveIntegralRB += (waveR[indexB + 1] - prevWaveIntegralRB) * phaseRatioB;\n        }\n\n        const stopIndex = bufferIndex + roundedSamplesPerTick;\n        for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\n            phaseA += phaseDeltaA;\n            phaseB += phaseDeltaB;\n\n            let waveLA: number;\n            let waveLB: number;\n            let waveRA: number;\n            let waveRB: number;\n            let inputSampleL: number;\n            let inputSampleR: number;\n\n            if (aliases) {\n                waveLA = waveL[(0 | phaseA) % waveLength];\n                waveLB = waveL[(0 | phaseB) % waveLength];\n                waveRA = waveR[(0 | phaseA) % waveLength];\n                waveRB = waveR[(0 | phaseB) % waveLength];\n                inputSampleL = waveLA + waveLB;\n                inputSampleR = waveRA + waveRB;\n            } else {\n                const phaseAInt = phaseA | 0;\n                const phaseBInt = phaseB | 0;\n                const indexA = phaseAInt % waveLength;\n                const indexB = phaseBInt % waveLength;\n                let nextWaveIntegralLA = waveL[indexA];\n                let nextWaveIntegralLB = waveL[indexB];\n                let nextWaveIntegralRA = waveR[indexA];\n                let nextWaveIntegralRB = waveR[indexB];\n                const phaseRatioA = phaseA - phaseAInt;\n                const phaseRatioB = phaseB - phaseBInt;\n                nextWaveIntegralLA += (waveL[indexA + 1] - nextWaveIntegralLA) * phaseRatioA;\n                nextWaveIntegralLB += (waveL[indexB + 1] - nextWaveIntegralLB) * phaseRatioB;\n                nextWaveIntegralRA += (waveR[indexA + 1] - nextWaveIntegralRA) * phaseRatioA;\n                nextWaveIntegralRB += (waveR[indexB + 1] - nextWaveIntegralRB) * phaseRatioB;\n                waveLA = (nextWaveIntegralLA - prevWaveIntegralLA) / phaseDeltaA;\n                waveLB = (nextWaveIntegralLB - prevWaveIntegralLB) / phaseDeltaB;\n                waveRA = (nextWaveIntegralRA - prevWaveIntegralRA) / phaseDeltaA;\n                waveRB = (nextWaveIntegralRB - prevWaveIntegralRB) / phaseDeltaB;\n                prevWaveIntegralLA = nextWaveIntegralLA;\n                prevWaveIntegralLB = nextWaveIntegralLB;\n                prevWaveIntegralRA = nextWaveIntegralRA;\n                prevWaveIntegralRB = nextWaveIntegralRB;\n                inputSampleL = waveLA + waveLB * unisonSign;\n                inputSampleR = waveRA + waveRB * unisonSign;\n            }\n\n            const sampleL = applyFilters(inputSampleL * volumeScale, initialFilterInputL1, initialFilterInputL2, filterCount, filtersL);\n            const sampleR = applyFilters(inputSampleR * volumeScale, initialFilterInputR1, initialFilterInputR2, filterCount, filtersR);\n            initialFilterInputL2 = initialFilterInputL1;\n            initialFilterInputR2 = initialFilterInputR1;\n            initialFilterInputL1 = inputSampleL * volumeScale;\n            initialFilterInputR1 = inputSampleR * volumeScale;\n\n            phaseDeltaA *= phaseDeltaScaleA;\n            phaseDeltaB *= phaseDeltaScaleB;\n\n            const outputL = sampleL * expression;\n            const outputR = sampleR * expression;\n            expression += expressionDelta;\n\n            dataL[sampleIndex] += outputL;\n            dataR[sampleIndex] += outputR;\n        }\n\n        tone.phases[0] = phaseA / waveLength;\n        tone.phases[1] = phaseB / waveLength;\n        tone.phaseDeltas[0] = phaseDeltaA / waveLength;\n        tone.phaseDeltas[1] = phaseDeltaB / waveLength;\n        tone.expression = expression;\n\n        synth.sanitizeFilters(filtersL);\n        synth.sanitizeFilters(filtersR);\n        tone.initialNoteFilterInputL1 = initialFilterInputL1;\n        tone.initialNoteFilterInputR1 = initialFilterInputR1;\n        tone.initialNoteFilterInputL2 = initialFilterInputL2;\n        tone.initialNoteFilterInputR2 = initialFilterInputR2;\n    }\n    private static harmonicsSynth(synth: Synth, bufferIndex: number, roundedSamplesPerTick: number, tone: Tone, instrumentState: InstrumentState): void {\n        const data: Float32Array = synth.tempInstrumentSampleBufferL!;\n        const wave: Float32Array = instrumentState.waveL!;\n        const waveLength = wave.length - 1; // The first sample is duplicated at the end, don't double-count it.\n\n        const unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\n        if (instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord!.customInterval) tone.phases[1] = tone.phases[0];\n        let phaseDeltaA = tone.phaseDeltas[0] * waveLength;\n        let phaseDeltaB = tone.phaseDeltas[1] * waveLength;\n        const phaseDeltaScaleA = +tone.phaseDeltaScales[0];\n        const phaseDeltaScaleB = +tone.phaseDeltaScales[1];\n        let expression = +tone.expression;\n        const expressionDelta = +tone.expressionDelta;\n        let phaseA = (tone.phases[0] % 1) * waveLength;\n        let phaseB = (tone.phases[1] % 1) * waveLength;\n\n        const filters: DynamicBiquadFilter[] = tone.noteFiltersL;\n        const filterCount = tone.noteFilterCount | 0;\n        let initialFilterInput1 = +tone.initialNoteFilterInputL1;\n        let initialFilterInput2 = +tone.initialNoteFilterInputL2;\n        const applyFilters = Synth.applyFilters;\n\n        const phaseAInt = phaseA | 0;\n        const phaseBInt = phaseB | 0;\n        const indexA = phaseAInt % waveLength;\n        const indexB = phaseBInt % waveLength;\n        const phaseRatioA = phaseA - phaseAInt;\n        const phaseRatioB = phaseB - phaseBInt;\n        let prevWaveIntegralA = +wave[indexA];\n        let prevWaveIntegralB = +wave[indexB];\n        prevWaveIntegralA += (wave[indexA + 1] - prevWaveIntegralA) * phaseRatioA;\n        prevWaveIntegralB += (wave[indexB + 1] - prevWaveIntegralB) * phaseRatioB;\n\n        const stopIndex = bufferIndex + roundedSamplesPerTick;\n        for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\n            phaseA += phaseDeltaA;\n            phaseB += phaseDeltaB;\n\n            const phaseAInt = phaseA | 0;\n            const phaseBInt = phaseB | 0;\n            const indexA = phaseAInt % waveLength;\n            const indexB = phaseBInt % waveLength;\n            let nextWaveIntegralA = wave[indexA];\n            let nextWaveIntegralB = wave[indexB];\n            const phaseRatioA = phaseA - phaseAInt;\n            const phaseRatioB = phaseB - phaseBInt;\n            nextWaveIntegralA += (wave[indexA + 1] - nextWaveIntegralA) * phaseRatioA;\n            nextWaveIntegralB += (wave[indexB + 1] - nextWaveIntegralB) * phaseRatioB;\n            const waveA = (nextWaveIntegralA - prevWaveIntegralA) / phaseDeltaA;\n            const waveB = (nextWaveIntegralB - prevWaveIntegralB) / phaseDeltaB;\n            prevWaveIntegralA = nextWaveIntegralA;\n            prevWaveIntegralB = nextWaveIntegralB;\n\n            const inputSample = waveA + waveB * unisonSign;\n            const sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n            initialFilterInput2 = initialFilterInput1;\n            initialFilterInput1 = inputSample;\n\n            phaseDeltaA *= phaseDeltaScaleA;\n            phaseDeltaB *= phaseDeltaScaleB;\n\n            const output = sample * expression;\n            expression += expressionDelta;\n\n            data[sampleIndex] += output;\n        }\n\n        tone.phases[0] = phaseA / waveLength;\n        tone.phases[1] = phaseB / waveLength;\n        tone.phaseDeltas[0] = phaseDeltaA / waveLength;\n        tone.phaseDeltas[1] = phaseDeltaB / waveLength;\n        tone.expression = expression;\n\n        synth.sanitizeFilters(filters);\n        tone.initialNoteFilterInputL1 = initialFilterInput1;\n        tone.initialNoteFilterInputL2 = initialFilterInput2;\n    }\n\n    private static pickedStringSynth(synth: Synth, bufferIndex: number, roundedSamplesPerTick: number, tone: Tone, instrumentState: InstrumentState): void {\n        // This algorithm is similar to the Karpluss-Strong algorithm in principle, but with an\n        // all-pass filter for dispersion and with more control over the impulse harmonics.\n        // The source code is processed as a string before being compiled, in order to\n        // handle the unison feature. If unison is disabled or set to none, then only one\n        // string voice is required, otherwise two string voices are required. We only want\n        // to compute the minimum possible number of string voices, so omit the code for\n        // processing extra ones if possible. Any line containing a \"#\" is duplicated for\n        // each required voice, replacing the \"#\" with the voice index.\n\n        const voiceCount = instrumentState.unisonVoices;\n        let pickedStringFunction = Synth.pickedStringFunctionCache[voiceCount];\n        if (pickedStringFunction == undefined) {\n            let pickedStringSource = \"return (synth, bufferIndex, runLength, tone, instrumentState) => {\";\n\n\n            pickedStringSource += `\n\t\t\t\tconst Config = beepbox.Config;\n\t\t\t\tconst Synth = beepbox.Synth;\n                const data = synth.tempInstrumentSampleBufferL;\n\t\t\t\t\n\t\t\t\tlet pickedString# = tone.pickedStrings[#];\n\t\t\t\tlet allPassSample# = +pickedString#.allPassSample;\n\t\t\t\tlet allPassPrevInput# = +pickedString#.allPassPrevInput;\n\t\t\t\tlet sustainFilterSample# = +pickedString#.sustainFilterSample;\n\t\t\t\tlet sustainFilterPrevOutput2# = +pickedString#.sustainFilterPrevOutput2;\n\t\t\t\tlet sustainFilterPrevInput1# = +pickedString#.sustainFilterPrevInput1;\n\t\t\t\tlet sustainFilterPrevInput2# = +pickedString#.sustainFilterPrevInput2;\n\t\t\t\tlet fractionalDelaySample# = +pickedString#.fractionalDelaySample;\n\t\t\t\tconst delayLine# = pickedString#.delayLine;\n\t\t\t\tconst delayBufferMask# = (delayLine#.length - 1) >> 0;\n\t\t\t\tlet delayIndex# = pickedString#.delayIndex|0;\n\t\t\t\tdelayIndex# = (delayIndex# & delayBufferMask#) + delayLine#.length;\n\t\t\t\tlet delayLength# = +pickedString#.prevDelayLength;\n\t\t\t\tconst delayLengthDelta# = +pickedString#.delayLengthDelta;\n\t\t\t\tlet allPassG# = +pickedString#.allPassG;\n\t\t\t\tlet sustainFilterA1# = +pickedString#.sustainFilterA1;\n\t\t\t\tlet sustainFilterA2# = +pickedString#.sustainFilterA2;\n\t\t\t\tlet sustainFilterB0# = +pickedString#.sustainFilterB0;\n\t\t\t\tlet sustainFilterB1# = +pickedString#.sustainFilterB1;\n\t\t\t\tlet sustainFilterB2# = +pickedString#.sustainFilterB2;\n\t\t\t\tconst allPassGDelta# = +pickedString#.allPassGDelta;\n\t\t\t\tconst sustainFilterA1Delta# = +pickedString#.sustainFilterA1Delta;\n\t\t\t\tconst sustainFilterA2Delta# = +pickedString#.sustainFilterA2Delta;\n\t\t\t\tconst sustainFilterB0Delta# = +pickedString#.sustainFilterB0Delta;\n\t\t\t\tconst sustainFilterB1Delta# = +pickedString#.sustainFilterB1Delta;\n\t\t\t\tconst sustainFilterB2Delta# = +pickedString#.sustainFilterB2Delta;\n\t\t\t\t\n\t\t\t\tlet expression = +tone.expression;\n\t\t\t\tconst expressionDelta = +tone.expressionDelta;\n\t\t\t\t\n\t\t\t\tconst unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\n\t\t\t\tconst delayResetOffset# = pickedString#.delayResetOffset|0;\n\t\t\t\t\n\t\t\t\tconst filters = tone.noteFiltersL;\n\t\t\t\tconst filterCount = tone.noteFilterCount|0;\n\t\t\t\tlet initialFilterInput1 = +tone.initialNoteFilterInputL1;\n\t\t\t\tlet initialFilterInput2 = +tone.initialNoteFilterInputL2;\n\t\t\t\tconst applyFilters = Synth.applyFilters;\n\t\t\t\t\n\t\t\t\tconst stopIndex = bufferIndex + runLength;\n\t\t\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\t\t\tconst targetSampleTime# = delayIndex# - delayLength#;\n\t\t\t\t\tconst lowerIndex# = (targetSampleTime# + 0.125) | 0; // Offset to improve stability of all-pass filter.\n\t\t\t\t\tconst upperIndex# = lowerIndex# + 1;\n\t\t\t\t\tconst fractionalDelay# = upperIndex# - targetSampleTime#;\n\t\t\t\t\tconst fractionalDelayG# = (1.0 - fractionalDelay#) / (1.0 + fractionalDelay#); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n\t\t\t\t\tconst prevInput# = delayLine#[lowerIndex# & delayBufferMask#];\n\t\t\t\t\tconst input# = delayLine#[upperIndex# & delayBufferMask#];\n\t\t\t\t\tfractionalDelaySample# = fractionalDelayG# * input# + prevInput# - fractionalDelayG# * fractionalDelaySample#;\n\t\t\t\t\t\n\t\t\t\t\tallPassSample# = fractionalDelaySample# * allPassG# + allPassPrevInput# - allPassG# * allPassSample#;\n\t\t\t\t\tallPassPrevInput# = fractionalDelaySample#;\n\t\t\t\t\t\n\t\t\t\t\tconst sustainFilterPrevOutput1# = sustainFilterSample#;\n\t\t\t\t\tsustainFilterSample# = sustainFilterB0# * allPassSample# + sustainFilterB1# * sustainFilterPrevInput1# + sustainFilterB2# * sustainFilterPrevInput2# - sustainFilterA1# * sustainFilterSample# - sustainFilterA2# * sustainFilterPrevOutput2#;\n\t\t\t\t\tsustainFilterPrevOutput2# = sustainFilterPrevOutput1#;\n\t\t\t\t\tsustainFilterPrevInput2# = sustainFilterPrevInput1#;\n\t\t\t\t\tsustainFilterPrevInput1# = allPassSample#;\n\t\t\t\t\t\n\t\t\t\t\tdelayLine#[delayIndex# & delayBufferMask#] += sustainFilterSample#;\n\t\t\t\t\tdelayLine#[(delayIndex# + delayResetOffset#) & delayBufferMask#] = 0.0;\n\t\t\t\t\tdelayIndex#++;\n\t\t\t\t\t\n\t\t\t\t\tconst inputSample = (`\n\n            const sampleList: string[] = [];\n            for (let voice = 0; voice < voiceCount; voice++) {\n                sampleList.push(\"fractionalDelaySample\" + voice + (voice != 0 ? \" * unisonSign\" : \"\"));\n            }\n\n            pickedStringSource += sampleList.join(\" + \");\n\n            pickedStringSource += `) * expression;\n\t\t\t\t\tconst sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\t\t\tinitialFilterInput1 = inputSample;\n                    data[sampleIndex] += sample;\n\t\t\t\t\t\n\t\t\t\t\texpression += expressionDelta;\n\t\t\t\t\tdelayLength# += delayLengthDelta#;\n\t\t\t\t\tallPassG# += allPassGDelta#;\n\t\t\t\t\tsustainFilterA1# += sustainFilterA1Delta#;\n\t\t\t\t\tsustainFilterA2# += sustainFilterA2Delta#;\n\t\t\t\t\tsustainFilterB0# += sustainFilterB0Delta#;\n\t\t\t\t\tsustainFilterB1# += sustainFilterB1Delta#;\n\t\t\t\t\tsustainFilterB2# += sustainFilterB2Delta#;\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Avoid persistent denormal or NaN values in the delay buffers and filter history.\n\t\t\t\tconst epsilon = (1.0e-24);\n\t\t\t\tif (!Number.isFinite(allPassSample#) || Math.abs(allPassSample#) < epsilon) allPassSample# = 0.0;\n\t\t\t\tif (!Number.isFinite(allPassPrevInput#) || Math.abs(allPassPrevInput#) < epsilon) allPassPrevInput# = 0.0;\n\t\t\t\tif (!Number.isFinite(sustainFilterSample#) || Math.abs(sustainFilterSample#) < epsilon) sustainFilterSample# = 0.0;\n\t\t\t\tif (!Number.isFinite(sustainFilterPrevOutput2#) || Math.abs(sustainFilterPrevOutput2#) < epsilon) sustainFilterPrevOutput2# = 0.0;\n\t\t\t\tif (!Number.isFinite(sustainFilterPrevInput1#) || Math.abs(sustainFilterPrevInput1#) < epsilon) sustainFilterPrevInput1# = 0.0;\n\t\t\t\tif (!Number.isFinite(sustainFilterPrevInput2#) || Math.abs(sustainFilterPrevInput2#) < epsilon) sustainFilterPrevInput2# = 0.0;\n\t\t\t\tif (!Number.isFinite(fractionalDelaySample#) || Math.abs(fractionalDelaySample#) < epsilon) fractionalDelaySample# = 0.0;\n\t\t\t\tpickedString#.allPassSample = allPassSample#;\n\t\t\t\tpickedString#.allPassPrevInput = allPassPrevInput#;\n\t\t\t\tpickedString#.sustainFilterSample = sustainFilterSample#;\n\t\t\t\tpickedString#.sustainFilterPrevOutput2 = sustainFilterPrevOutput2#;\n\t\t\t\tpickedString#.sustainFilterPrevInput1 = sustainFilterPrevInput1#;\n\t\t\t\tpickedString#.sustainFilterPrevInput2 = sustainFilterPrevInput2#;\n\t\t\t\tpickedString#.fractionalDelaySample = fractionalDelaySample#;\n\t\t\t\tpickedString#.delayIndex = delayIndex#;\n\t\t\t\tpickedString#.prevDelayLength = delayLength#;\n\t\t\t\tpickedString#.allPassG = allPassG#;\n\t\t\t\tpickedString#.sustainFilterA1 = sustainFilterA1#;\n\t\t\t\tpickedString#.sustainFilterA2 = sustainFilterA2#;\n\t\t\t\tpickedString#.sustainFilterB0 = sustainFilterB0#;\n\t\t\t\tpickedString#.sustainFilterB1 = sustainFilterB1#;\n\t\t\t\tpickedString#.sustainFilterB2 = sustainFilterB2#;\n\t\t\t\t\n\t\t\t\ttone.expression = expression;\n\t\t\t\t\n\t\t\t\tsynth.sanitizeFilters(filters);\n\t\t\t\ttone.initialNoteFilterInputL1 = initialFilterInput1;\n\t\t\t\ttone.initialNoteFilterInputL2 = initialFilterInput2;\n\t\t\t}`\n\n            // Duplicate lines containing \"#\" for each voice and replace the \"#\" with the voice index.\n            pickedStringSource = pickedStringSource.replace(/^.*\\#.*$/mg, line => {\n                const lines = [];\n                for (let voice = 0; voice < voiceCount; voice++) {\n                    lines.push(line.replace(/\\#/g, String(voice)));\n                }\n                return lines.join(\"\\n\");\n            });\n\n            //console.log(pickedStringSource);\n            pickedStringFunction = new Function(\"Config\", \"Synth\", pickedStringSource)(Config, Synth);\n            Synth.pickedStringFunctionCache[voiceCount] = pickedStringFunction;\n        }\n\n        pickedStringFunction(synth, bufferIndex, roundedSamplesPerTick, tone, instrumentState);\n    }\n\n    private static effectsSynth(synth: Synth, outputDataL: Float32Array, outputDataR: Float32Array, bufferIndex: number, runLength: number, instrumentState: InstrumentState): void {\n        // TODO: If automation is involved, don't assume sliders will stay at zero.\n        // @jummbus - ^ Correct, removed the non-zero checks as modulation can change them.\n\n        const usesDistortion = instrumentState.effectsIncludeType(EffectType.distortion);\n        const usesBitcrusher = instrumentState.effectsIncludeType(EffectType.bitcrusher);\n        const usesEqFilter = instrumentState.effectsIncludeType(EffectType.eqFilter);\n        const usesGain = instrumentState.effectsIncludeType(EffectType.gain);\n        const usesPanning = instrumentState.effectsIncludeType(EffectType.panning);\n        const usesFlanger = instrumentState.effectsIncludeType(EffectType.flanger);\n        const usesChorus = instrumentState.effectsIncludeType(EffectType.chorus);\n        const usesEcho = instrumentState.effectsIncludeType(EffectType.echo);\n        const usesReverb = instrumentState.effectsIncludeType(EffectType.reverb);\n        const usesGranular = instrumentState.effectsIncludeType(EffectType.granular);\n        const usesRingModulation = instrumentState.effectsIncludeType(EffectType.ringModulation);\n        const isStereo = instrumentState.chipWaveInStereo && (instrumentState.synthesizer == Synth.loopableChipSynth || instrumentState.synthesizer == Synth.chipSynth); //TODO: make an instrumentIsStereo function\n        let signature = \"\";\n        for (let i of instrumentState.effects) {\n            if (i != null) {\n                signature = signature + i!.type.toString();\n                if (i!.type == EffectType.panning) signature = signature + i!.panningMode.toString();\n            }\n        }\n\n        let effectsFunction = Synth.effectsFunctionCache[signature];\n        if (effectsFunction == undefined) {\n            let effectsSource = \"return (synth, outputDataL, outputDataR, bufferIndex, runLength, instrumentState) => {\";\n\n            const usesDelays = usesChorus || usesReverb || usesEcho || usesGranular || usesFlanger;\n\n            effectsSource += `\n            let effectState = instrumentState.effects[0]\n\n            const tempInstrumentSampleBufferL = synth.tempInstrumentSampleBufferL;\n            const tempInstrumentSampleBufferR = synth.tempInstrumentSampleBufferR;\n\n            let mixVolume = +instrumentState.mixVolume;\n            const mixVolumeDelta = +instrumentState.mixVolumeDelta;\n            `\n\n            if (usesDelays) {\n                effectsSource += `\n\n                let delayInputMult = +instrumentState.delayInputMult;\n                const delayInputMultDelta = +instrumentState.delayInputMultDelta;`\n            }\n\n            if (usesEqFilter) {\n                effectsSource += `\n\n                let filtersL = [];\n                let filtersR = [];\n\n                let filterCount = [];\n                let initialFilterInputL1 = [];\n                let initialFilterInputR1 = [];\n                let initialFilterInputL2 = [];\n                let initialFilterInputR2 = [];\n                let inputSampleL = [];\n                let inputSampleR = [];\n                const applyFilters = Synth.applyFilters;`\n\n                // this is *supposed* to always be included but it is rather inconvenient to do so...\n                effectsSource += `\n\n                let eqFilterVolume = [];\n                let eqFilterVolumeDelta = [];\n                `\n            }\n            if (usesDistortion) {\n\n                effectsSource += `\n\n                const distortionBaseVolume = +Config.distortionBaseVolume;\n                let distortion = [];\n                let distortionDelta = [];\n                let distortionDrive = [];\n                let distortionDriveDelta = [];\n                const distortionFractionalResolution = 4.0;\n                const distortionOversampleCompensation = distortionBaseVolume / distortionFractionalResolution;\n                const distortionFractionalDelay1 = 1.0 / distortionFractionalResolution;\n                const distortionFractionalDelay2 = 2.0 / distortionFractionalResolution;\n                const distortionFractionalDelay3 = 3.0 / distortionFractionalResolution;\n                const distortionFractionalDelayG1 = (1.0 - distortionFractionalDelay1) / (1.0 + distortionFractionalDelay1); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n                const distortionFractionalDelayG2 = (1.0 - distortionFractionalDelay2) / (1.0 + distortionFractionalDelay2); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n                const distortionFractionalDelayG3 = (1.0 - distortionFractionalDelay3) / (1.0 + distortionFractionalDelay3); // Inlined version of FilterCoefficients.prototype.allPass1stOrderFractionalDelay\n                const distortionNextOutputWeight1 = Math.cos(Math.PI * distortionFractionalDelay1) * 0.5 + 0.5;\n                const distortionNextOutputWeight2 = Math.cos(Math.PI * distortionFractionalDelay2) * 0.5 + 0.5;\n                const distortionNextOutputWeight3 = Math.cos(Math.PI * distortionFractionalDelay3) * 0.5 + 0.5;\n                const distortionPrevOutputWeight1 = 1.0 - distortionNextOutputWeight1;\n                const distortionPrevOutputWeight2 = 1.0 - distortionNextOutputWeight2;\n                const distortionPrevOutputWeight3 = 1.0 - distortionNextOutputWeight3;\n\n                let distortionFractionalInputL1 = [];\n                let distortionFractionalInputL2 = [];\n                let distortionFractionalInputL3 = [];\n                let distortionFractionalInputR1 = [];\n                let distortionFractionalInputR2 = [];\n                let distortionFractionalInputR3 = [];\n                let distortionPrevInputL = [];\n                let distortionPrevInputR = [];\n                let distortionNextOutputL = [];\n                let distortionNextOutputR = [];\n\n                let distortionReverse = [];\n                let distortionNextInputL = [];\n                let distortionNextInputR = [];\n                let distortionOutputL1 = [];\n                let distortionOutputL2 = [];\n                let distortionOutputL3 = [];\n                let distortionOutputR1 = [];\n                let distortionOutputR2 = [];\n                let distortionOutputR3 = [];`\n            }\n            if (usesBitcrusher) {\n                effectsSource += `\n\n                let bitcrusherPrevInputL = [];\n                let bitcrusherPrevInputR = [];\n                let bitcrusherCurrentOutputL = [];\n                let bitcrusherCurrentOutputR = [];\n                let bitcrusherPhase = [];\n                let bitcrusherPhaseDelta = [];\n                let bitcrusherPhaseDeltaScale = [];\n                let bitcrusherScale = [];\n                let bitcrusherScaleScale = [];\n                let bitcrusherFoldLevel = [];\n                let bitcrusherFoldLevelScale = [];\n\n                let lerpedInputL = [];\n                let lerpedInputR = [];\n\n                let bitcrusherWrapLevel = [];\n                let wrappedSampleL = [];\n                let wrappedSampleR = [];\n                let foldedSampleL = [];\n                let foldedSampleR = [];\n                let scaledSampleL = [];\n                let scaledSampleR = [];\n                let oldValueL = [];\n                let oldValueR = [];\n                let newValueL = [];\n                let newValueR = [];`\n            }\n            if (usesFlanger) {\n                effectsSource += `\n\n                const flangerMask = synth.flangerDelayBufferMask >>> 0;\n                let flangerDelayLineL = [];\n                let flangerDelayLineR = [];\n                let flangerDelayPos = [];\n\n                let flanger = [];\n                let flangerDelta = [];\n                let flangerSpeed = [];\n                let flangerSpeedDelta = [];\n                let flangerDepth = [];\n                let flangerDepthDelta = [];\n                let flangerFeedback = [];\n                let flangerFeedbackDelta = [];\n\n                let flangerPhase = [];\n                let flangerRange = [];\n\n                let flangerTapIndexL = [];\n                let flangerTapIndexR = [];\n                let flangerTapEndL = [];\n                let flangerTapEndR = [];\n                let flangerTapDeltaL = [];\n                let flangerTapDeltaR = [];\n\n                let flangerTapRatioL = []; // you don't know how happy i am that this variable exists\n                let flangerTapRatioR = [];\n                let flangerTapLA = [];\n                let flangerTapLB = [];\n                let flangerTapRA = [];\n                let flangerTapRB = [];\n                let flangerTapL = [];\n                let flangerTapR = [];`\n            }\n            if (usesChorus) {\n                effectsSource += `\n\n                const chorusMask = synth.chorusDelayBufferMask >>> 0;\n                let chorusDelayLineL = [];\n                let chorusDelayLineR = [];\n                let chorusDelayPos = [];\n\n                let chorusVoiceMult = [];\n                let chorusVoiceMultDelta = [];\n                let chorusCombinedMult = [];\n                let chorusCombinedMultDelta = [];\n\n                const chorusDuration = +Config.chorusPeriodSeconds;\n                const chorusAngle = Math.PI * 2.0 / (chorusDuration * synth.samplesPerSecond);\n                const chorusRange = synth.samplesPerSecond * Config.chorusDelayRange;\n                const chorusOffset0 = synth.chorusDelayBufferSize - Config.chorusDelayOffsets[0][0] * chorusRange;\n                const chorusOffset1 = synth.chorusDelayBufferSize - Config.chorusDelayOffsets[0][1] * chorusRange;\n                const chorusOffset2 = synth.chorusDelayBufferSize - Config.chorusDelayOffsets[0][2] * chorusRange;\n                const chorusOffset3 = synth.chorusDelayBufferSize - Config.chorusDelayOffsets[1][0] * chorusRange;\n                const chorusOffset4 = synth.chorusDelayBufferSize - Config.chorusDelayOffsets[1][1] * chorusRange;\n                const chorusOffset5 = synth.chorusDelayBufferSize - Config.chorusDelayOffsets[1][2] * chorusRange;\n\n                let chorusPhase = [];\n                let chorusTap0Index = [];\n                let chorusTap1Index = [];\n                let chorusTap2Index = [];\n                let chorusTap3Index = [];\n                let chorusTap4Index = [];\n                let chorusTap5Index = [];\n                let chorusTap0End = [];\n                let chorusTap1End = [];\n                let chorusTap2End = [];\n                let chorusTap3End = [];\n                let chorusTap4End = [];\n                let chorusTap5End = [];\n                let chorusTap0Delta = [];\n                let chorusTap1Delta = [];\n                let chorusTap2Delta = [];\n                let chorusTap3Delta = [];\n                let chorusTap4Delta = [];\n                let chorusTap5Delta = [];\n\n                let chorusTap0Ratio = [];\n                let chorusTap1Ratio = [];\n                let chorusTap2Ratio = [];\n                let chorusTap3Ratio = [];\n                let chorusTap4Ratio = [];\n                let chorusTap5Ratio = [];\n                let chorusTap0A = [];\n                let chorusTap0B = [];\n                let chorusTap1A = [];\n                let chorusTap1B = [];\n                let chorusTap2A = [];\n                let chorusTap2B = [];\n                let chorusTap3A = [];\n                let chorusTap3B = [];\n                let chorusTap4A = [];\n                let chorusTap4B = [];\n                let chorusTap5A = [];\n                let chorusTap5B = [];\n                let chorusTap0 = [];\n                let chorusTap1 = [];\n                let chorusTap2 = [];\n                let chorusTap3 = [];\n                let chorusTap4 = [];\n                let chorusTap5 = [];`\n            }\n            if (usesEcho) {\n                effectsSource += `\n                let echoMult = [];\n                let echoMultDelta = [];\n\n                let echoDelayLineL = [];\n                let echoDelayLineR = [];\n                let echoMask = [];\n\n                let echoDelayPosL = [];\n                let echoDelayPosR = [];\n                let echoDelayOffsetStart = [];\n                let echoDelayOffsetEnd   = [];\n                let echoDelayOffsetRatio = [];\n                let echoDelayOffsetRatioDelta = [];\n                let echoPingPong = [];\n\n                let echoShelfA1 = [];\n                let echoShelfB0 = [];\n                let echoShelfB1 = [];\n                let echoShelfSampleL = [];\n                let echoShelfSampleR = [];\n                let echoShelfPrevInputL = [];\n                let echoShelfPrevInputR = [];\n\n                let echoNextInputL = [];\n                let echoNextInputR = [];\n                let echoTapStartIndexL = [];\n                let echoTapStartIndexR = [];\n                let echoTapEndIndexL   = [];\n                let echoTapEndIndexR   = [];\n                let echoTapStartL = [];\n                let echoTapEndL   = [];\n                let echoTapStartR = [];\n                let echoTapEndR   = [];\n                let echoTapL = [];\n                let echoTapR = [];`\n            }\n            if (usesReverb) {\n                effectsSource += `\n\n                const reverbMask = Config.reverbDelayBufferMask >>> 0; //TODO: Dynamic reverb buffer size.\n                let reverbDelayLine = [];\n                let reverbDelayPos = [];\n\n                let reverb = [];\n                let reverbDelta = [];\n\n                let reverbShelfA1 = [];\n                let reverbShelfB0 = [];\n                let reverbShelfB1 = [];\n                let reverbShelfSample0 = [];\n                let reverbShelfSample1 = [];\n                let reverbShelfSample2 = [];\n                let reverbShelfSample3 = [];\n                let reverbShelfPrevInput0 = [];\n                let reverbShelfPrevInput1 = [];\n                let reverbShelfPrevInput2 = [];\n                let reverbShelfPrevInput3 = [];\n\n                let reverbDelayPos1 = [];\n                let reverbDelayPos2 = [];\n                let reverbDelayPos3 = [];\n                let reverbSample0 = [];\n                let reverbSample1 = [];\n                let reverbSample2 = [];\n                let reverbSample3 = [];\n                let reverbTemp0 = [];\n                let reverbTemp1 = [];\n                let reverbTemp2 = [];\n                let reverbTemp3 = [];\n                let reverbShelfInput0 = [];\n                let reverbShelfInput1 = [];\n                let reverbShelfInput2 = [];\n                let reverbShelfInput3 = [];`\n            }\n            if (usesRingModulation) {\n                effectsSource += `\n\n                let ringModMix = [];\n                let ringModMixDelta = [];\n                let ringModPhase = [];\n                let ringModPhaseDelta = [];\n                let ringModPhaseDeltaScale = [];\n                let ringModWaveformIndex = [];\n                let ringModMixFade = [];\n                let ringModMixFadeDelta = [];\n\n                let ringModPulseWidth = [];\n\n                let waveform = [];\n                let waveformLength = [];\n                let ringModOutputL = [];\n                let ringModOutputR = [];\n                let ringModMixF = [];\n                `\n            }\n            if (usesPanning) {\n                effectsSource += `\n\n                const panningMask = synth.panningDelayBufferMask >>> 0;\n                let panningDelayLineL = [];\n                let panningDelayLineR = [];\n                let panningDelayPos = [];\n                let panningVolumeL      = [];\n                let panningVolumeR      = [];\n                let panningVolumeDeltaL = [];\n                let panningVolumeDeltaR = [];\n                let panningOffsetL      = [];\n                let panningOffsetR      = [];\n                let panningOffsetDeltaL = [];\n                let panningOffsetDeltaR = [];\n                let panningRatioL  = [];\n                let panningRatioR  = [];\n                let panningTapLA   = [];\n                let panningTapLB   = [];\n                let panningTapRA   = [];\n                let panningTapRB   = [];\n                let panningTapL    = [];\n                let panningTapR    = [];`\n            }\n            if (usesGain) {\n                effectsSource += `\n\n                let gain = [];\n                let gainDelta = [];`\n            }\n            if (usesGranular) {\n                effectsSource += `\n\n                let granularWet = [];\n                let granularMixDelta = [];\n                let granularDry = [];\n                let granularDelayLineL = [];\n                let granularDelayLineR = [];\n                let granularGrains = [];\n                let granularGrainCount = [];\n                let granularDelayLineLength = [];\n                let granularDelayLineMask = [];\n                let granularDelayLineIndex = [];\n                let usesRandomGrainLocation = [];\n                let computeGrains = [];\n                let granularOutputL = [];\n                let granularOutputR = [];\n                `\n            }\n\n            for (let i = 0; i < instrumentState.effects.length; i++) {\n                let effectState = instrumentState.effects[i] as EffectState\n                effectsSource += `\n\n                effectState = instrumentState.effects[` + i + `];\n                effectIndex = ` + i + `;\n                `\n\n                if (usesGranular && effectState.type == EffectType.granular) {\n                    effectsSource += `\n\n                    granularWet[effectIndex] = effectState.granularMix;\n                    granularMixDelta[effectIndex] = effectState.granularMixDelta;\n                    granularDry[effectIndex] = 1.0 - granularWet[effectIndex];\n                    granularDelayLineL[effectIndex] = effectState.granularDelayLineL;\n                    granularDelayLineR[effectIndex] = effectState.granularDelayLineR;\n                    granularGrains[effectIndex] = effectState.granularGrains;\n                    granularGrainCount[effectIndex] = effectState.granularGrainsLength;\n                    granularDelayLineLength[effectIndex] = granularDelayLineL.length;\n                    granularDelayLineMask[effectIndex] = granularDelayLineLength[effectIndex] - 1;\n                    granularDelayLineIndex[effectIndex] = effectState.granularDelayLineIndex;\n                    usesRandomGrainLocation[effectIndex] = effectState.usesRandomGrainLocation;\n                    computeGrains[effectIndex] = effectState.computeGrains;\n                    effectState.granularDelayLineDirty = true;\n                    `\n                }\n                else if (usesDistortion && effectState.type == EffectType.distortion) {\n                    // Distortion can sometimes create noticeable aliasing.\n                    // It seems the established industry best practice for distortion antialiasing\n                    // is to upsample the inputs (\"zero stuffing\" followed by a brick wall lowpass\n                    // at the original nyquist frequency), perform the distortion, then downsample\n                    // (the lowpass again followed by dropping in-between samples). This is\n                    // \"mathematically correct\" in that it preserves only the intended frequencies,\n                    // but it has several unfortunate tradeoffs depending on the choice of filter,\n                    // introducing latency and/or time smearing, since no true brick wall filter\n                    // exists. For the time being, I've opted to instead generate in-between input\n                    // samples using fractional delay all-pass filters, and after distorting them,\n                    // I \"downsample\" these with a simple weighted sum.\n\n                    effectsSource += `\n\n                    distortion[effectIndex] = effectState.distortion;\n                    distortionDelta[effectIndex] = effectState.distortionDelta;\n                    distortionDrive[effectIndex] = effectState.distortionDrive;\n                    distortionDriveDelta[effectIndex] = effectState.distortionDriveDelta;\n                    distortionReverse[effectIndex] = 1.0 - distortion[effectIndex];\n\n                    distortionFractionalInputL1[effectIndex] = +effectState.distortionFractionalInputL1;\n                    distortionFractionalInputL2[effectIndex] = +effectState.distortionFractionalInputL2;\n                    distortionFractionalInputL3[effectIndex] = +effectState.distortionFractionalInputL3;\n                    distortionFractionalInputR1[effectIndex] = +effectState.distortionFractionalInputR1;\n                    distortionFractionalInputR2[effectIndex] = +effectState.distortionFractionalInputR2;\n                    distortionFractionalInputR3[effectIndex] = +effectState.distortionFractionalInputR3;\n                    distortionPrevInputL[effectIndex] = +effectState.distortionPrevInputL;\n                    distortionPrevInputR[effectIndex] = +effectState.distortionPrevInputR;\n                    distortionNextOutputL[effectIndex] = +effectState.distortionNextOutputL;\n                    distortionNextOutputR[effectIndex] = +effectState.distortionNextOutputR;`\n                }\n                else if (usesBitcrusher && effectState.type == EffectType.bitcrusher) {\n                    effectsSource += `\n\n                    bitcrusherPrevInputL[effectIndex] = +effectState.bitcrusherPrevInputL;\n                    bitcrusherPrevInputR[effectIndex] = +effectState.bitcrusherPrevInputR;\n                    bitcrusherCurrentOutputL[effectIndex] = +effectState.bitcrusherCurrentOutputL;\n                    bitcrusherCurrentOutputR[effectIndex] = +effectState.bitcrusherCurrentOutputR;\n                    bitcrusherPhase[effectIndex] = +effectState.bitcrusherPhase;\n                    bitcrusherPhaseDelta[effectIndex] = +effectState.bitcrusherPhaseDelta;\n                    bitcrusherPhaseDeltaScale[effectIndex] = +effectState.bitcrusherPhaseDeltaScale;\n                    bitcrusherScale[effectIndex] = +effectState.bitcrusherScale;\n                    bitcrusherScaleScale[effectIndex] = +effectState.bitcrusherScaleScale;\n                    bitcrusherFoldLevel[effectIndex] = +effectState.bitcrusherFoldLevel;\n                    bitcrusherFoldLevelScale[effectIndex] = +effectState.bitcrusherFoldLevelScale;`\n                }\n                else if (usesRingModulation && effectState.type == EffectType.ringModulation) {\n                    effectsSource += `\n\n                    ringModMix[effectIndex] = +effectState.ringModMix;\n                    ringModMixDelta[effectIndex] = +effectState.ringModMixDelta;\n                    ringModPhase[effectIndex] = +effectState.ringModPhase;\n                    ringModPhaseDelta[effectIndex] = +effectState.ringModPhaseDelta;\n                    ringModPhaseDeltaScale[effectIndex] = +effectState.ringModPhaseDeltaScale;\n                    ringModWaveformIndex[effectIndex] = +effectState.ringModWaveformIndex;\n                    ringModMixFade[effectIndex] = +effectState.ringModMixFade;\n                    ringModMixFadeDelta[effectIndex] = +effectState.ringModMixFadeDelta;\n\n                    ringModPulseWidth[effectIndex] = +effectState.ringModPulseWidth;\n\n                    waveform[effectIndex] = Config.operatorWaves[ringModWaveformIndex[effectIndex]].samples;\n                    if (ringModWaveformIndex[effectIndex] == 2) {\n                        waveform[effectIndex] = Synth.getOperatorWave(ringModWaveformIndex[effectIndex], ringModPulseWidth[effectIndex]).samples;\n                    }\n                    waveformLength[effectIndex] = waveform[effectIndex].length - 1;\n                    `\n                }\n                else if (usesEqFilter && effectState.type == EffectType.eqFilter) {\n                    effectsSource += `\n\n                    filtersL[effectIndex] = effectState.eqFiltersL;\n                    filtersR[effectIndex] = effectState.eqFiltersR;\n                    filterCount[effectIndex] = effectState.eqFilterCount|0;\n                    initialFilterInputL1[effectIndex] = +effectState.initialEqFilterInputL1;\n                    initialFilterInputR1[effectIndex] = +effectState.initialEqFilterInputR1;\n                    initialFilterInputL2[effectIndex] = +effectState.initialEqFilterInputL2;\n                    initialFilterInputR2[effectIndex] = +effectState.initialEqFilterInputR2;`\n\n                    // this is *supposed* to always be included but it is rather inconvenient to do so...\n                    effectsSource += `\n\n                    eqFilterVolume[effectIndex] = +effectState.eqFilterVolume;\n                    eqFilterVolumeDelta[effectIndex] = +effectState.eqFilterVolumeDelta;`\n                }\n                else if (usesPanning && effectState.type == EffectType.panning) {\n                    effectsSource += `\n\n                    panningDelayLineL[effectIndex] = effectState.panningDelayLineL;\n                    panningDelayLineR[effectIndex] = effectState.panningDelayLineR;\n                    panningDelayPos[effectIndex] = effectState.panningDelayPos & panningMask;\n                    panningVolumeL[effectIndex]      = +effectState.panningVolumeL;\n                    panningVolumeR[effectIndex]      = +effectState.panningVolumeR;\n                    panningVolumeDeltaL[effectIndex] = +effectState.panningVolumeDeltaL;\n                    panningVolumeDeltaR[effectIndex] = +effectState.panningVolumeDeltaR;\n                    panningOffsetL[effectIndex]      = +effectState.panningOffsetL;\n                    panningOffsetR[effectIndex]      = +effectState.panningOffsetR;\n                    panningOffsetDeltaL[effectIndex] = 1.0 - effectState.panningOffsetDeltaL;\n                    panningOffsetDeltaR[effectIndex] = 1.0 - effectState.panningOffsetDeltaR;`\n                }\n                else if (usesFlanger && effectState.type == EffectType.flanger) {\n                    effectsSource += `\n\n                    flangerDelayLineL[effectIndex] = effectState.flangerDelayLineL;\n                    flangerDelayLineR[effectIndex] = effectState.flangerDelayLineR;\n                    flangerDelayPos[effectIndex] = effectState.flangerDelayPos & flangerMask;\n\n                    flanger[effectIndex] = effectState.flanger;\n                    flangerDelta[effectIndex] = effectState.flangerDelta;\n                    flangerSpeed[effectIndex] = effectState.flangerSpeed;\n                    flangerSpeedDelta[effectIndex] = effectState.flangerSpeedDelta;\n                    flangerDepth[effectIndex] = effectState.flangerDepth;\n                    flangerDepthDelta[effectIndex] = effectState.flangerDepthDelta;\n                    flangerFeedback[effectIndex] = effectState.flangerFeedback;\n                    flangerFeedbackDelta[effectIndex] = effectState.flangerFeedbackDelta;\n\n                    flangerPhase[effectIndex] = effectState.flangerPhase % (Math.PI * 2.0);\n                    flangerRange[effectIndex] = flangerDepth[effectIndex];\n\n                    flangerTapIndexL[effectIndex] = flangerDelayPos[effectIndex] - flangerRange[effectIndex] - flangerRange[effectIndex] * Math.cos(flangerPhase[effectIndex]);\n                    flangerTapIndexR[effectIndex] = flangerDelayPos[effectIndex] - flangerRange[effectIndex] - flangerRange[effectIndex] * Math.sin(flangerPhase[effectIndex]);\n                    flangerPhase[effectIndex] += flangerSpeed[effectIndex] * Config.flangerPeriodMult * runLength;\n                    flangerTapEndL[effectIndex] = flangerDelayPos[effectIndex] - flangerRange[effectIndex] - flangerRange[effectIndex] * Math.cos(flangerPhase[effectIndex]) + runLength;\n                    flangerTapEndR[effectIndex] = flangerDelayPos[effectIndex] - flangerRange[effectIndex] - flangerRange[effectIndex] * Math.sin(flangerPhase[effectIndex]) + runLength;\n                    flangerTapDeltaL[effectIndex] = (flangerTapEndL[effectIndex] - flangerTapIndexL[effectIndex]) / runLength;\n                    flangerTapDeltaR[effectIndex] = (flangerTapEndR[effectIndex] - flangerTapIndexR[effectIndex]) / runLength;`\n                }\n                else if (usesChorus && effectState.type == EffectType.chorus) {\n                    effectsSource += `\n\n                    chorusDelayLineL[effectIndex] = effectState.chorusDelayLineL;\n                    chorusDelayLineR[effectIndex] = effectState.chorusDelayLineR;\n                    effectState.chorusDelayLineDirty = true;\n                    chorusDelayPos[effectIndex] = effectState.chorusDelayPos & chorusMask;\n\n                    chorusVoiceMult[effectIndex] = +effectState.chorusVoiceMult;\n                    chorusVoiceMultDelta[effectIndex] = +effectState.chorusVoiceMultDelta;\n                    chorusCombinedMult[effectIndex] = +effectState.chorusCombinedMult;\n                    chorusCombinedMultDelta[effectIndex] = +effectState.chorusCombinedMultDelta;\n\n                    chorusPhase[effectIndex] = effectState.chorusPhase % (Math.PI * 2.0);\n                    chorusTap0Index[effectIndex] = chorusDelayPos[effectIndex] + chorusOffset0 - chorusRange * Math.sin(chorusPhase[effectIndex] + Config.chorusPhaseOffsets[0][0]);\n                    chorusTap1Index[effectIndex] = chorusDelayPos[effectIndex] + chorusOffset1 - chorusRange * Math.sin(chorusPhase[effectIndex] + Config.chorusPhaseOffsets[0][1]);\n                    chorusTap2Index[effectIndex] = chorusDelayPos[effectIndex] + chorusOffset2 - chorusRange * Math.sin(chorusPhase[effectIndex] + Config.chorusPhaseOffsets[0][2]);\n                    chorusTap3Index[effectIndex] = chorusDelayPos[effectIndex] + chorusOffset3 - chorusRange * Math.sin(chorusPhase[effectIndex] + Config.chorusPhaseOffsets[1][0]);\n                    chorusTap4Index[effectIndex] = chorusDelayPos[effectIndex] + chorusOffset4 - chorusRange * Math.sin(chorusPhase[effectIndex] + Config.chorusPhaseOffsets[1][1]);\n                    chorusTap5Index[effectIndex] = chorusDelayPos[effectIndex] + chorusOffset5 - chorusRange * Math.sin(chorusPhase[effectIndex] + Config.chorusPhaseOffsets[1][2]);\n                    chorusPhase[effectIndex] += chorusAngle * runLength;\n                    chorusTap0End[effectIndex] = chorusDelayPos[effectIndex] + chorusOffset0 - chorusRange * Math.sin(chorusPhase[effectIndex] + Config.chorusPhaseOffsets[0][0]) + runLength;\n                    chorusTap1End[effectIndex] = chorusDelayPos[effectIndex] + chorusOffset1 - chorusRange * Math.sin(chorusPhase[effectIndex] + Config.chorusPhaseOffsets[0][1]) + runLength;\n                    chorusTap2End[effectIndex] = chorusDelayPos[effectIndex] + chorusOffset2 - chorusRange * Math.sin(chorusPhase[effectIndex] + Config.chorusPhaseOffsets[0][2]) + runLength;\n                    chorusTap3End[effectIndex] = chorusDelayPos[effectIndex] + chorusOffset3 - chorusRange * Math.sin(chorusPhase[effectIndex] + Config.chorusPhaseOffsets[1][0]) + runLength;\n                    chorusTap4End[effectIndex] = chorusDelayPos[effectIndex] + chorusOffset4 - chorusRange * Math.sin(chorusPhase[effectIndex] + Config.chorusPhaseOffsets[1][1]) + runLength;\n                    chorusTap5End[effectIndex] = chorusDelayPos[effectIndex] + chorusOffset5 - chorusRange * Math.sin(chorusPhase[effectIndex] + Config.chorusPhaseOffsets[1][2]) + runLength;\n                    chorusTap0Delta[effectIndex] = (chorusTap0End[effectIndex] - chorusTap0Index[effectIndex]) / runLength;\n                    chorusTap1Delta[effectIndex] = (chorusTap1End[effectIndex] - chorusTap1Index[effectIndex]) / runLength;\n                    chorusTap2Delta[effectIndex] = (chorusTap2End[effectIndex] - chorusTap2Index[effectIndex]) / runLength;\n                    chorusTap3Delta[effectIndex] = (chorusTap3End[effectIndex] - chorusTap3Index[effectIndex]) / runLength;\n                    chorusTap4Delta[effectIndex] = (chorusTap4End[effectIndex] - chorusTap4Index[effectIndex]) / runLength;\n                    chorusTap5Delta[effectIndex] = (chorusTap5End[effectIndex] - chorusTap5Index[effectIndex]) / runLength;`\n                }\n                else if (usesEcho && effectState.type == EffectType.echo) {\n                    effectsSource += `\n                    echoMult[effectIndex] = +effectState.echoMult;\n                    echoMultDelta[effectIndex] = +effectState.echoMultDelta;\n\n                    echoDelayLineL[effectIndex] = effectState.echoDelayLineL;\n                    echoDelayLineR[effectIndex] = effectState.echoDelayLineR;\n                    echoMask[effectIndex] = (echoDelayLineL[effectIndex].length - 1) >>> 0;\n                    effectState.echoDelayLineDirty = true;\n\n                    echoDelayPosL[effectIndex] = effectState.echoDelayPosL & echoMask[effectIndex];\n                    echoDelayPosR[effectIndex] = effectState.echoDelayPosR & echoMask[effectIndex];\n                    echoDelayOffsetStart[effectIndex] = (echoDelayLineL[effectIndex].length - effectState.echoDelayOffsetStart) & echoMask[effectIndex];\n                    echoDelayOffsetEnd[effectIndex]   = (echoDelayLineL[effectIndex].length - effectState.echoDelayOffsetEnd) & echoMask[effectIndex];\n                    echoDelayOffsetRatio[effectIndex] = +effectState.echoDelayOffsetRatio;\n                    echoDelayOffsetRatioDelta[effectIndex] = +effectState.echoDelayOffsetRatioDelta;\n                    echoPingPong[effectIndex] = effectState.echoPingPong;\n\n                    echoShelfA1[effectIndex] = +effectState.echoShelfA1;\n                    echoShelfB0[effectIndex] = +effectState.echoShelfB0;\n                    echoShelfB1[effectIndex] = +effectState.echoShelfB1;\n                    echoShelfSampleL[effectIndex] = +effectState.echoShelfSampleL;\n                    echoShelfSampleR[effectIndex] = +effectState.echoShelfSampleR;\n                    echoShelfPrevInputL[effectIndex] = +effectState.echoShelfPrevInputL;\n                    echoShelfPrevInputR[effectIndex] = +effectState.echoShelfPrevInputR;`\n                }\n                else if (usesReverb && effectState.type == EffectType.reverb) {\n                    effectsSource += `\n\n                    reverbDelayLine[effectIndex] = effectState.reverbDelayLine;\n                    effectState.reverbDelayLineDirty = true;\n                    reverbDelayPos[effectIndex] = effectState.reverbDelayPos & reverbMask;\n\n                    reverb[effectIndex] = +effectState.reverbMult;\n                    reverbDelta[effectIndex] = +effectState.reverbMultDelta;\n\n                    reverbShelfA1[effectIndex] = +effectState.reverbShelfA1;\n                    reverbShelfB0[effectIndex] = +effectState.reverbShelfB0;\n                    reverbShelfB1[effectIndex] = +effectState.reverbShelfB1;\n                    reverbShelfSample0[effectIndex] = +effectState.reverbShelfSample0;\n                    reverbShelfSample1[effectIndex] = +effectState.reverbShelfSample1;\n                    reverbShelfSample2[effectIndex] = +effectState.reverbShelfSample2;\n                    reverbShelfSample3[effectIndex] = +effectState.reverbShelfSample3;\n                    reverbShelfPrevInput0[effectIndex] = +effectState.reverbShelfPrevInput0;\n                    reverbShelfPrevInput1[effectIndex] = +effectState.reverbShelfPrevInput1;\n                    reverbShelfPrevInput2[effectIndex] = +effectState.reverbShelfPrevInput2;\n                    reverbShelfPrevInput3[effectIndex] = +effectState.reverbShelfPrevInput3;`\n                }\n                else if (usesGain && effectState.type == EffectType.gain) {\n                    effectsSource += `\n\n                    gain[effectIndex] = +effectState.gain;\n                    gainDelta[effectIndex] = +effectState.gainDelta;`\n                }\n            }\n\n            if (isStereo) {\n                effectsSource += `\n\n                const stopIndex = bufferIndex + runLength;\n                for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n                    let sample = 0.0;\n                    let sampleL = tempInstrumentSampleBufferL[sampleIndex];\n                    let sampleR = tempInstrumentSampleBufferR[sampleIndex];\n                    tempInstrumentSampleBufferL[sampleIndex] = 0.0;\n                    tempInstrumentSampleBufferR[sampleIndex] = 0.0;`\n            } else {\n                effectsSource += `\n\n                const stopIndex = bufferIndex + runLength;\n                for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n                    let sampleL = tempInstrumentSampleBufferL[sampleIndex];\n                    let sampleR = tempInstrumentSampleBufferL[sampleIndex];\n                    tempInstrumentSampleBufferL[sampleIndex] = 0.0;\n                    tempInstrumentSampleBufferR[sampleIndex] = 0.0;`\n            }\n\n            for (let i = 0; i < instrumentState.effects.length; i++) {\n                let effectState = instrumentState.effects[i] as EffectState\n\n                effectsSource += `\n\n                effectIndex = ` + i + `;\n                `\n\n                if (usesBitcrusher && effectState.type == EffectType.bitcrusher) {\n                    effectsSource += `\n\n                    bitcrusherPhase[effectIndex] += bitcrusherPhaseDelta[effectIndex];\n                    if (bitcrusherPhase[effectIndex] < 1.0) {\n                        bitcrusherPrevInputL[effectIndex] = sampleL;\n                        bitcrusherPrevInputR[effectIndex] = sampleR;\n                        sampleL = bitcrusherCurrentOutputL[effectIndex];\n                        sampleR = bitcrusherCurrentOutputR[effectIndex];\n                    } else {\n                        bitcrusherPhase[effectIndex] = bitcrusherPhase[effectIndex] % 1.0;\n\n                        lerpedInputL[effectIndex] = sampleL + (bitcrusherPrevInputL[effectIndex] - sampleL) * (bitcrusherPhase[effectIndex] / bitcrusherPhaseDelta[effectIndex]);\n                        lerpedInputR[effectIndex] = sampleR + (bitcrusherPrevInputR[effectIndex] - sampleR) * (bitcrusherPhase[effectIndex] / bitcrusherPhaseDelta[effectIndex]);\n                        bitcrusherPrevInputL[effectIndex] = sampleL;\n                        bitcrusherPrevInputR[effectIndex] = sampleR;\n\n                        bitcrusherWrapLevel[effectIndex] = bitcrusherFoldLevel[effectIndex] * 4.0;\n                        wrappedSampleL[effectIndex] = (((lerpedInputL[effectIndex] + bitcrusherFoldLevel[effectIndex]) % bitcrusherWrapLevel[effectIndex]) + bitcrusherWrapLevel[effectIndex]) % bitcrusherWrapLevel[effectIndex];\n                        wrappedSampleR[effectIndex] = (((lerpedInputR[effectIndex] + bitcrusherFoldLevel[effectIndex]) % bitcrusherWrapLevel[effectIndex]) + bitcrusherWrapLevel[effectIndex]) % bitcrusherWrapLevel[effectIndex];\n                        foldedSampleL[effectIndex] = bitcrusherFoldLevel[effectIndex] - Math.abs(bitcrusherFoldLevel[effectIndex] * 2.0 - wrappedSampleL[effectIndex]);\n                        foldedSampleR[effectIndex] = bitcrusherFoldLevel[effectIndex] - Math.abs(bitcrusherFoldLevel[effectIndex] * 2.0 - wrappedSampleR[effectIndex]);\n                        scaledSampleL[effectIndex] = foldedSampleL[effectIndex] / bitcrusherScale[effectIndex];\n                        scaledSampleR[effectIndex] = foldedSampleR[effectIndex] / bitcrusherScale[effectIndex];\n                        oldValueL[effectIndex] = bitcrusherCurrentOutputL[effectIndex];\n                        oldValueR[effectIndex] = bitcrusherCurrentOutputR[effectIndex];\n                        newValueL[effectIndex] = (((scaledSampleL[effectIndex] > 0 ? scaledSampleL[effectIndex] + 1 : scaledSampleL[effectIndex])|0)-.5) * bitcrusherScale[effectIndex];\n                        newValueR[effectIndex] = (((scaledSampleR[effectIndex] > 0 ? scaledSampleR[effectIndex] + 1 : scaledSampleR[effectIndex])|0)-.5) * bitcrusherScale[effectIndex];\n\n                        sampleL = oldValueL[effectIndex] + (newValueL[effectIndex] - oldValueL[effectIndex]) * (bitcrusherPhase[effectIndex] / bitcrusherPhaseDelta[effectIndex]);\n                        sampleR = oldValueR[effectIndex] + (newValueR[effectIndex] - oldValueR[effectIndex]) * (bitcrusherPhase[effectIndex] / bitcrusherPhaseDelta[effectIndex]);\n                        bitcrusherCurrentOutputL[effectIndex] = newValueL[effectIndex];\n                        bitcrusherCurrentOutputR[effectIndex] = newValueR[effectIndex];\n                    }\n                    bitcrusherPhaseDelta[effectIndex] *= bitcrusherPhaseDeltaScale[effectIndex];\n                    bitcrusherScale[effectIndex] *= bitcrusherScaleScale[effectIndex];\n                    bitcrusherFoldLevel[effectIndex] *= bitcrusherFoldLevelScale[effectIndex];`\n                }\n                else if (usesDistortion && effectState.type == EffectType.distortion) {\n                    effectsSource += `\n\n                    distortionNextInputL[effectIndex] = sampleL * distortionDrive[effectIndex];\n                    distortionNextInputR[effectIndex] = sampleR * distortionDrive[effectIndex];\n                    sampleL = distortionNextOutputL[effectIndex];\n                    sampleR = distortionNextOutputR[effectIndex];\n                    distortionNextOutputL[effectIndex] = distortionNextInputL[effectIndex] / (distortionReverse[effectIndex] * Math.abs(distortionNextInputL[effectIndex]) + distortion[effectIndex]);\n                    distortionNextOutputR[effectIndex] = distortionNextInputR[effectIndex] / (distortionReverse[effectIndex] * Math.abs(distortionNextInputR[effectIndex]) + distortion[effectIndex]);\n                    distortionFractionalInputL1[effectIndex] = distortionFractionalDelayG1 * distortionNextInputL[effectIndex] + distortionPrevInputL[effectIndex] - distortionFractionalDelayG1 * distortionFractionalInputL1[effectIndex];\n                    distortionFractionalInputL2[effectIndex] = distortionFractionalDelayG2 * distortionNextInputL[effectIndex] + distortionPrevInputL[effectIndex] - distortionFractionalDelayG2 * distortionFractionalInputL2[effectIndex];\n                    distortionFractionalInputL3[effectIndex] = distortionFractionalDelayG3 * distortionNextInputL[effectIndex] + distortionPrevInputL[effectIndex] - distortionFractionalDelayG3 * distortionFractionalInputL3[effectIndex];\n                    distortionFractionalInputR1[effectIndex] = distortionFractionalDelayG1 * distortionNextInputR[effectIndex] + distortionPrevInputR[effectIndex] - distortionFractionalDelayG1 * distortionFractionalInputR1[effectIndex];\n                    distortionFractionalInputR2[effectIndex] = distortionFractionalDelayG2 * distortionNextInputR[effectIndex] + distortionPrevInputR[effectIndex] - distortionFractionalDelayG2 * distortionFractionalInputR2[effectIndex];\n                    distortionFractionalInputR3[effectIndex] = distortionFractionalDelayG3 * distortionNextInputR[effectIndex] + distortionPrevInputR[effectIndex] - distortionFractionalDelayG3 * distortionFractionalInputR3[effectIndex];\n                    distortionOutputL1[effectIndex] = distortionFractionalInputL1[effectIndex] / (distortionReverse[effectIndex] * Math.abs(distortionFractionalInputL1[effectIndex]) + distortion[effectIndex]);\n                    distortionOutputL2[effectIndex] = distortionFractionalInputL2[effectIndex] / (distortionReverse[effectIndex] * Math.abs(distortionFractionalInputL2[effectIndex]) + distortion[effectIndex]);\n                    distortionOutputL3[effectIndex] = distortionFractionalInputL3[effectIndex] / (distortionReverse[effectIndex] * Math.abs(distortionFractionalInputL3[effectIndex]) + distortion[effectIndex]);\n                    distortionOutputR1[effectIndex] = distortionFractionalInputR1[effectIndex] / (distortionReverse[effectIndex] * Math.abs(distortionFractionalInputR1[effectIndex]) + distortion[effectIndex]);\n                    distortionOutputR2[effectIndex] = distortionFractionalInputR2[effectIndex] / (distortionReverse[effectIndex] * Math.abs(distortionFractionalInputR2[effectIndex]) + distortion[effectIndex]);\n                    distortionOutputR3[effectIndex] = distortionFractionalInputR3[effectIndex] / (distortionReverse[effectIndex] * Math.abs(distortionFractionalInputR3[effectIndex]) + distortion[effectIndex]);\n                    distortionNextOutputL[effectIndex] += distortionOutputL1[effectIndex] * distortionNextOutputWeight1 + distortionOutputL2[effectIndex] * distortionNextOutputWeight2 + distortionOutputL3[effectIndex] * distortionNextOutputWeight3;\n                    distortionNextOutputR[effectIndex] += distortionOutputR1[effectIndex] * distortionNextOutputWeight1 + distortionOutputR2[effectIndex] * distortionNextOutputWeight2 + distortionOutputR3[effectIndex] * distortionNextOutputWeight3;\n                    sampleL += distortionOutputL1[effectIndex] * distortionPrevOutputWeight1 + distortionOutputL2[effectIndex] * distortionPrevOutputWeight2 + distortionOutputL3[effectIndex] * distortionPrevOutputWeight3;\n                    sampleR += distortionOutputR1[effectIndex] * distortionPrevOutputWeight1 + distortionOutputR2[effectIndex] * distortionPrevOutputWeight2 + distortionOutputR3[effectIndex] * distortionPrevOutputWeight3;\n                    sampleL *= distortionOversampleCompensation;\n                    sampleR *= distortionOversampleCompensation;\n                    distortionPrevInputL[effectIndex] = distortionNextInputL[effectIndex];\n                    distortionPrevInputR[effectIndex] = distortionNextInputR[effectIndex];\n                    distortion[effectIndex] += distortionDelta[effectIndex];\n                    distortionDrive[effectIndex] += distortionDriveDelta[effectIndex];`\n                }\n                else if (usesGain && effectState.type == EffectType.gain) {\n                    effectsSource += `\n\n                    sampleL *= gain[effectIndex];\n                    sampleR *= gain[effectIndex];\n                    `\n                }\n                else if (usesPanning && effectState.type == EffectType.panning) {\n                    effectsSource += `\n\n                    panningDelayLineL[effectIndex][panningDelayPos[effectIndex]] = sampleL;\n                    panningDelayLineR[effectIndex][panningDelayPos[effectIndex]] = sampleR;\n                    panningRatioL[effectIndex]  = panningOffsetL[effectIndex] % 1;\n                    panningRatioR[effectIndex]  = panningOffsetR[effectIndex] % 1;\n                    panningTapLA[effectIndex]   = panningDelayLineL[effectIndex][(panningOffsetL[effectIndex]) & panningMask];\n                    panningTapLB[effectIndex]   = panningDelayLineL[effectIndex][(panningOffsetL[effectIndex] + 1) & panningMask];\n                    panningTapRA[effectIndex]   = panningDelayLineR[effectIndex][(panningOffsetR[effectIndex]) & panningMask];\n                    panningTapRB[effectIndex]   = panningDelayLineR[effectIndex][(panningOffsetR[effectIndex] + 1) & panningMask];\n                    panningTapL[effectIndex]    = panningTapLA[effectIndex] + (panningTapLB[effectIndex] - panningTapLA[effectIndex]) * panningRatioL[effectIndex];\n                    panningTapR[effectIndex]    = panningTapRA[effectIndex] + (panningTapRB[effectIndex] - panningTapRA[effectIndex]) * panningRatioR[effectIndex];\n                    `\n                    if (effectState.panningMode == 0) {\n                        effectsSource += `\n\n                    sampleL = panningTapL[effectIndex] * panningVolumeL[effectIndex];\n                    sampleR = panningTapR[effectIndex] * panningVolumeR[effectIndex];\n                    panningDelayPos[effectIndex] = (panningDelayPos[effectIndex] + 1) & panningMask;\n                    panningVolumeL[effectIndex] += panningVolumeDeltaL[effectIndex];\n                    panningVolumeR[effectIndex] += panningVolumeDeltaR[effectIndex];\n                    panningOffsetL[effectIndex] += panningOffsetDeltaL[effectIndex];\n                    panningOffsetR[effectIndex] += panningOffsetDeltaR[effectIndex];`\n                    }\n                    else if (effectState.panningMode == 1) {\n                        effectsSource += `\n\n                    sampleL = panningTapL[effectIndex] * panningVolumeL[effectIndex] + Math.max(0, panningVolumeL[effectIndex] - panningVolumeR[effectIndex]) * panningTapR[effectIndex];\n                    sampleR = panningTapR[effectIndex] * panningVolumeR[effectIndex] + Math.max(0, panningVolumeR[effectIndex] - panningVolumeL[effectIndex]) * panningTapL[effectIndex];\n                    panningDelayPos[effectIndex] = (panningDelayPos[effectIndex] + 1) & panningMask;\n                    panningVolumeL[effectIndex] += panningVolumeDeltaL[effectIndex];\n                    panningVolumeR[effectIndex] += panningVolumeDeltaR[effectIndex];\n                    panningOffsetL[effectIndex] += panningOffsetDeltaL[effectIndex];\n                    panningOffsetR[effectIndex] += panningOffsetDeltaR[effectIndex];`\n                    }\n                    else if (effectState.panningMode == 2) {\n                        effectsSource += `\n\n                    sampleL = (panningTapL[effectIndex] + panningTapR[effectIndex]) / 2.0\n                    sampleR = sampleL\n                    sampleL *= panningVolumeL[effectIndex];\n                    sampleR *= panningVolumeR[effectIndex];\n                    panningDelayPos[effectIndex] = (panningDelayPos[effectIndex] + 1) & panningMask;\n                    panningVolumeL[effectIndex] += panningVolumeDeltaL[effectIndex];\n                    panningVolumeR[effectIndex] += panningVolumeDeltaR[effectIndex];\n                    panningOffsetL[effectIndex] += panningOffsetDeltaL[effectIndex];\n                    panningOffsetR[effectIndex] += panningOffsetDeltaR[effectIndex];`\n                    }\n                }\n                else if (usesFlanger && effectState.type == EffectType.flanger) {\n                    effectsSource += `\n\n                    flangerTapRatioL[effectIndex] = flangerTapIndexL[effectIndex] % 1;\n                    flangerTapRatioR[effectIndex] = flangerTapIndexR[effectIndex] % 1;\n                    flangerTapLA[effectIndex] = flangerDelayLineL[effectIndex][(flangerTapIndexL[effectIndex]) & flangerMask];\n                    flangerTapLB[effectIndex] = flangerDelayLineL[effectIndex][(flangerTapIndexL[effectIndex] + 1) & flangerMask];\n                    flangerTapRA[effectIndex] = flangerDelayLineR[effectIndex][(flangerTapIndexR[effectIndex]) & flangerMask];\n                    flangerTapRB[effectIndex] = flangerDelayLineR[effectIndex][(flangerTapIndexR[effectIndex] + 1) & flangerMask];\n                    flangerTapL[effectIndex] = flangerTapLA[effectIndex] + (flangerTapLB[effectIndex] - flangerTapLA[effectIndex]) * flangerTapRatioL[effectIndex];\n                    flangerTapR[effectIndex] = flangerTapRA[effectIndex] + (flangerTapRB[effectIndex] - flangerTapRA[effectIndex]) * flangerTapRatioR[effectIndex];\n\n                    flangerDelayLineL[effectIndex][flangerDelayPos[effectIndex]] = sampleL * delayInputMult;\n                    flangerDelayLineR[effectIndex][flangerDelayPos[effectIndex]] = sampleR * delayInputMult;\n                    sampleL = (sampleL + flanger[effectIndex] * flangerTapL[effectIndex]) * (1 - flanger[effectIndex] * Config.flangerVolumeMult);\n                    sampleR = (sampleR + flanger[effectIndex] * flangerTapR[effectIndex]) * (1 - flanger[effectIndex] * Config.flangerVolumeMult);\n                    flangerDelayLineL[effectIndex][flangerDelayPos[effectIndex]] = flangerDelayLineL[effectIndex][flangerDelayPos[effectIndex]] * (1 - flangerFeedback[effectIndex]) - sampleL * flangerFeedback[effectIndex];\n                    flangerDelayLineR[effectIndex][flangerDelayPos[effectIndex]] = flangerDelayLineR[effectIndex][flangerDelayPos[effectIndex]] * (1 - flangerFeedback[effectIndex]) - sampleR * flangerFeedback[effectIndex];\n                    flangerDelayPos[effectIndex] = (flangerDelayPos[effectIndex] + 1) & flangerMask;\n                    flangerTapIndexL[effectIndex] += flangerTapDeltaL[effectIndex];\n                    flangerTapIndexR[effectIndex] += flangerTapDeltaR[effectIndex];\n\n                    flanger[effectIndex] += flangerDelta[effectIndex];\n                    flangerSpeed[effectIndex] += flangerSpeedDelta[effectIndex];\n                    flangerDepth[effectIndex] += flangerDepthDelta[effectIndex];\n                    flangerFeedback[effectIndex] += flangerFeedbackDelta[effectIndex];`\n                }\n                else if (usesChorus && effectState.type == EffectType.chorus) {\n                    effectsSource += `\n\n                    chorusTap0Ratio[effectIndex] = chorusTap0Index[effectIndex] % 1;\n                    chorusTap1Ratio[effectIndex] = chorusTap1Index[effectIndex] % 1;\n                    chorusTap2Ratio[effectIndex] = chorusTap2Index[effectIndex] % 1;\n                    chorusTap3Ratio[effectIndex] = chorusTap3Index[effectIndex] % 1;\n                    chorusTap4Ratio[effectIndex] = chorusTap4Index[effectIndex] % 1;\n                    chorusTap5Ratio[effectIndex] = chorusTap5Index[effectIndex] % 1;\n                    chorusTap0A[effectIndex] = chorusDelayLineL[effectIndex][(chorusTap0Index[effectIndex]) & chorusMask];\n                    chorusTap0B[effectIndex] = chorusDelayLineL[effectIndex][(chorusTap0Index[effectIndex] + 1) & chorusMask];\n                    chorusTap1A[effectIndex] = chorusDelayLineL[effectIndex][(chorusTap1Index[effectIndex]) & chorusMask];\n                    chorusTap1B[effectIndex] = chorusDelayLineL[effectIndex][(chorusTap1Index[effectIndex] + 1) & chorusMask];\n                    chorusTap2A[effectIndex] = chorusDelayLineL[effectIndex][(chorusTap2Index[effectIndex]) & chorusMask];\n                    chorusTap2B[effectIndex] = chorusDelayLineL[effectIndex][(chorusTap2Index[effectIndex] + 1) & chorusMask];\n                    chorusTap3A[effectIndex] = chorusDelayLineR[effectIndex][(chorusTap3Index[effectIndex]) & chorusMask];\n                    chorusTap3B[effectIndex] = chorusDelayLineR[effectIndex][(chorusTap3Index[effectIndex] + 1) & chorusMask];\n                    chorusTap4A[effectIndex] = chorusDelayLineR[effectIndex][(chorusTap4Index[effectIndex]) & chorusMask];\n                    chorusTap4B[effectIndex] = chorusDelayLineR[effectIndex][(chorusTap4Index[effectIndex] + 1) & chorusMask];\n                    chorusTap5A[effectIndex] = chorusDelayLineR[effectIndex][(chorusTap5Index[effectIndex]) & chorusMask];\n                    chorusTap5B[effectIndex] = chorusDelayLineR[effectIndex][(chorusTap5Index[effectIndex] + 1) & chorusMask];\n                    chorusTap0[effectIndex] = chorusTap0A[effectIndex] + (chorusTap0B[effectIndex] - chorusTap0A[effectIndex]) * chorusTap0Ratio[effectIndex];\n                    chorusTap1[effectIndex] = chorusTap1A[effectIndex] + (chorusTap1B[effectIndex] - chorusTap1A[effectIndex]) * chorusTap1Ratio[effectIndex];\n                    chorusTap2[effectIndex] = chorusTap2A[effectIndex] + (chorusTap2B[effectIndex] - chorusTap2A[effectIndex]) * chorusTap2Ratio[effectIndex];\n                    chorusTap3[effectIndex] = chorusTap3A[effectIndex] + (chorusTap3B[effectIndex] - chorusTap3A[effectIndex]) * chorusTap3Ratio[effectIndex];\n                    chorusTap4[effectIndex] = chorusTap4A[effectIndex] + (chorusTap4B[effectIndex] - chorusTap4A[effectIndex]) * chorusTap4Ratio[effectIndex];\n                    chorusTap5[effectIndex] = chorusTap5A[effectIndex] + (chorusTap5B[effectIndex] - chorusTap5A[effectIndex]) * chorusTap5Ratio[effectIndex];\n                    chorusDelayLineL[effectIndex][chorusDelayPos[effectIndex]] = sampleL * delayInputMult;\n                    chorusDelayLineR[effectIndex][chorusDelayPos[effectIndex]] = sampleR * delayInputMult;\n                    sampleL = chorusCombinedMult[effectIndex] * (sampleL + chorusVoiceMult[effectIndex] * (chorusTap1[effectIndex] - chorusTap0[effectIndex] - chorusTap2[effectIndex]));\n                    sampleR = chorusCombinedMult[effectIndex] * (sampleR + chorusVoiceMult[effectIndex] * (chorusTap4[effectIndex] - chorusTap3[effectIndex] - chorusTap5[effectIndex]));\n                    chorusDelayPos[effectIndex] = (chorusDelayPos[effectIndex] + 1) & chorusMask;\n                    chorusTap0Index[effectIndex] += chorusTap0Delta[effectIndex];\n                    chorusTap1Index[effectIndex] += chorusTap1Delta[effectIndex];\n                    chorusTap2Index[effectIndex] += chorusTap2Delta[effectIndex];\n                    chorusTap3Index[effectIndex] += chorusTap3Delta[effectIndex];\n                    chorusTap4Index[effectIndex] += chorusTap4Delta[effectIndex];\n                    chorusTap5Index[effectIndex] += chorusTap5Delta[effectIndex];\n                    chorusVoiceMult[effectIndex] += chorusVoiceMultDelta[effectIndex];\n                    chorusCombinedMult[effectIndex] += chorusCombinedMultDelta[effectIndex];`\n                }\n                else if (usesEcho && effectState.type == EffectType.echo) {\n                    effectsSource += `\n\n                    echoNextInputL[effectIndex] = (sampleL + sampleR) / 2;\n                    echoNextInputR[effectIndex] = (sampleL + sampleR) / 2;\n                    echoTapStartIndexL[effectIndex] = (echoDelayPosL[effectIndex] + echoDelayOffsetStart[effectIndex]) & echoMask[effectIndex];\n                    echoTapStartIndexR[effectIndex] = (echoDelayPosR[effectIndex] + echoDelayOffsetStart[effectIndex]) & echoMask[effectIndex];\n                    echoTapEndIndexL[effectIndex]   = (echoDelayPosL[effectIndex] + echoDelayOffsetEnd[effectIndex]) & echoMask[effectIndex];\n                    echoTapEndIndexR[effectIndex]   = (echoDelayPosR[effectIndex] + echoDelayOffsetEnd[effectIndex]) & echoMask[effectIndex];\n                    echoTapStartL[effectIndex] = echoDelayLineL[effectIndex][echoTapStartIndexL[effectIndex]];\n                    echoTapEndL[effectIndex]   = echoDelayLineL[effectIndex][echoTapEndIndexL[effectIndex]];\n                    echoTapStartR[effectIndex] = echoDelayLineR[effectIndex][echoTapStartIndexR[effectIndex]];\n                    echoTapEndR[effectIndex]   = echoDelayLineR[effectIndex][echoTapEndIndexR[effectIndex]];\n                    echoTapL[effectIndex] = (echoTapStartL[effectIndex] + (echoTapEndL[effectIndex] - echoTapStartL[effectIndex]) * echoDelayOffsetRatio[effectIndex]) * echoMult[effectIndex];\n                    echoTapR[effectIndex] = (echoTapStartR[effectIndex] + (echoTapEndR[effectIndex] - echoTapStartR[effectIndex]) * echoDelayOffsetRatio[effectIndex]) * echoMult[effectIndex];\n\n                    echoShelfSampleL[effectIndex] = echoShelfB0[effectIndex] * echoTapL[effectIndex] + echoShelfB1[effectIndex] * echoShelfPrevInputL[effectIndex] - echoShelfA1[effectIndex] * echoShelfSampleL[effectIndex];\n                    echoShelfSampleR[effectIndex] = echoShelfB0[effectIndex] * echoTapR[effectIndex] + echoShelfB1[effectIndex] * echoShelfPrevInputR[effectIndex] - echoShelfA1[effectIndex] * echoShelfSampleR[effectIndex];\n                    echoShelfPrevInputL[effectIndex] = echoTapL[effectIndex];\n                    echoShelfPrevInputR[effectIndex] = echoTapR[effectIndex];\n                    sampleL += echoShelfSampleL[effectIndex];\n                    sampleR += echoShelfSampleR[effectIndex];\n\n                    echoDelayLineL[effectIndex][echoDelayPosL[effectIndex]] = (sampleL * (1 - Math.abs(echoPingPong[effectIndex])) + (echoNextInputL[effectIndex] * Math.max(0, echoPingPong[effectIndex]) + echoShelfSampleR[effectIndex]) * Math.abs(echoPingPong[effectIndex])) * delayInputMult;\n                    echoDelayLineR[effectIndex][echoDelayPosR[effectIndex]] = (sampleR * (1 - Math.abs(echoPingPong[effectIndex])) + (echoNextInputR[effectIndex] * Math.max(0, -echoPingPong[effectIndex]) + echoShelfSampleL[effectIndex]) * Math.abs(echoPingPong[effectIndex])) * delayInputMult;\n                    echoDelayPosL[effectIndex] = (echoDelayPosL[effectIndex] + 1) & echoMask[effectIndex];\n                    echoDelayPosR[effectIndex] = (echoDelayPosR[effectIndex] + 1) & echoMask[effectIndex];\n                    echoDelayOffsetRatio[effectIndex] += echoDelayOffsetRatioDelta[effectIndex];\n                    echoMult[effectIndex] += echoMultDelta[effectIndex];\n                    `\n                }\n                else if (usesReverb && effectState.type == EffectType.reverb) {\n                    effectsSource += `\n\n                    // Reverb, implemented using a feedback delay network with a Hadamard matrix and lowpass filters.\n                    // good ratios:    0.555235 + 0.618033 + 0.818 +   1.0 = 2.991268\n                    // Delay lengths:  3041     + 3385     + 4481  +  5477 = 16384 = 2^14\n                    // Buffer offsets: 3041    -> 6426   -> 10907 -> 16384\n                    reverbDelayPos1[effectIndex] = (reverbDelayPos[effectIndex] +  3041) & reverbMask;\n                    reverbDelayPos2[effectIndex] = (reverbDelayPos[effectIndex] +  6426) & reverbMask;\n                    reverbDelayPos3[effectIndex] = (reverbDelayPos[effectIndex] + 10907) & reverbMask;\n                    reverbSample0[effectIndex] = (reverbDelayLine[effectIndex][reverbDelayPos[effectIndex]]);\n                    reverbSample1[effectIndex] = reverbDelayLine[effectIndex][reverbDelayPos1[effectIndex]];\n                    reverbSample2[effectIndex] = reverbDelayLine[effectIndex][reverbDelayPos2[effectIndex]];\n                    reverbSample3[effectIndex] = reverbDelayLine[effectIndex][reverbDelayPos3[effectIndex]];\n                    reverbTemp0[effectIndex] = -(reverbSample0[effectIndex] + sampleL) + reverbSample1[effectIndex];\n                    reverbTemp1[effectIndex] = -(reverbSample0[effectIndex] + sampleR) - reverbSample1[effectIndex];\n                    reverbTemp2[effectIndex] = -reverbSample2[effectIndex] + reverbSample3[effectIndex];\n                    reverbTemp3[effectIndex] = -reverbSample2[effectIndex] - reverbSample3[effectIndex];\n                    reverbShelfInput0[effectIndex] = (reverbTemp0[effectIndex] + reverbTemp2[effectIndex]) * reverb[effectIndex];\n                    reverbShelfInput1[effectIndex] = (reverbTemp1[effectIndex] + reverbTemp3[effectIndex]) * reverb[effectIndex];\n                    reverbShelfInput2[effectIndex] = (reverbTemp0[effectIndex] - reverbTemp2[effectIndex]) * reverb[effectIndex];\n                    reverbShelfInput3[effectIndex] = (reverbTemp1[effectIndex] - reverbTemp3[effectIndex]) * reverb[effectIndex];\n                    reverbShelfSample0[effectIndex] = reverbShelfB0[effectIndex] * reverbShelfInput0[effectIndex] + reverbShelfB1[effectIndex] * reverbShelfPrevInput0[effectIndex] - reverbShelfA1[effectIndex] * reverbShelfSample0[effectIndex];\n                    reverbShelfSample1[effectIndex] = reverbShelfB0[effectIndex] * reverbShelfInput1[effectIndex] + reverbShelfB1[effectIndex] * reverbShelfPrevInput1[effectIndex] - reverbShelfA1[effectIndex] * reverbShelfSample1[effectIndex];\n                    reverbShelfSample2[effectIndex] = reverbShelfB0[effectIndex] * reverbShelfInput2[effectIndex] + reverbShelfB1[effectIndex] * reverbShelfPrevInput2[effectIndex] - reverbShelfA1[effectIndex] * reverbShelfSample2[effectIndex];\n                    reverbShelfSample3[effectIndex] = reverbShelfB0[effectIndex] * reverbShelfInput3[effectIndex] + reverbShelfB1[effectIndex] * reverbShelfPrevInput3[effectIndex] - reverbShelfA1[effectIndex] * reverbShelfSample3[effectIndex];\n                    reverbShelfPrevInput0[effectIndex] = reverbShelfInput0[effectIndex];\n                    reverbShelfPrevInput1[effectIndex] = reverbShelfInput1[effectIndex];\n                    reverbShelfPrevInput2[effectIndex] = reverbShelfInput2[effectIndex];\n                    reverbShelfPrevInput3[effectIndex] = reverbShelfInput3[effectIndex];\n                    reverbDelayLine[effectIndex][reverbDelayPos1[effectIndex]] = reverbShelfSample0[effectIndex] * delayInputMult;\n                    reverbDelayLine[effectIndex][reverbDelayPos2[effectIndex]] = reverbShelfSample1[effectIndex] * delayInputMult;\n                    reverbDelayLine[effectIndex][reverbDelayPos3[effectIndex]] = reverbShelfSample2[effectIndex] * delayInputMult;\n                    reverbDelayLine[effectIndex][reverbDelayPos[effectIndex] ] = reverbShelfSample3[effectIndex] * delayInputMult;\n                    reverbDelayPos[effectIndex] = (reverbDelayPos[effectIndex] + 1) & reverbMask;\n                    sampleL += reverbSample1[effectIndex] + reverbSample2[effectIndex] + reverbSample3[effectIndex];\n                    sampleR += reverbSample0[effectIndex] + reverbSample2[effectIndex] - reverbSample3[effectIndex];\n                    reverb[effectIndex] += reverbDelta[effectIndex];`\n                }\n                else if (usesEqFilter && effectState.type == EffectType.eqFilter) {\n                    effectsSource += `\n\n                    inputSampleL[effectIndex] = sampleL;\n                    inputSampleR[effectIndex] = sampleR;\n                    sampleL = applyFilters(inputSampleL[effectIndex], initialFilterInputL1[effectIndex], initialFilterInputL2[effectIndex], filterCount[effectIndex], filtersL[effectIndex]);\n                    sampleR = applyFilters(inputSampleR[effectIndex], initialFilterInputR1[effectIndex], initialFilterInputR2[effectIndex], filterCount[effectIndex], filtersR[effectIndex]);\n                    initialFilterInputL2[effectIndex] = initialFilterInputL1[effectIndex];\n                    initialFilterInputR2[effectIndex] = initialFilterInputR1[effectIndex];\n                    initialFilterInputL1[effectIndex] = inputSampleL[effectIndex];\n                    initialFilterInputR1[effectIndex] = inputSampleR[effectIndex];`\n\n                    effectsSource += `\n\n                    sampleL *= eqFilterVolume[effectIndex];\n                    sampleR *= eqFilterVolume[effectIndex];\n                    eqFilterVolume[effectIndex] += eqFilterVolumeDelta[effectIndex];`\n                }\n                else if (usesRingModulation && effectState.type == EffectType.ringModulation) {\n                    effectsSource += `\n\n\t\t\t\t\tringModOutputL[effectIndex] = sampleL * waveform[effectIndex][(ringModPhase[effectIndex]*waveformLength[effectIndex])|0];\n\t\t\t\t\tringModOutputR[effectIndex] = sampleR * waveform[effectIndex][(ringModPhase[effectIndex]*waveformLength[effectIndex])|0];\n\t\t\t\t\tringModMixF[effectIndex] = Math.max(0, ringModMix[effectIndex] * ringModMixFade[effectIndex]);\n\t\t\t\t\tsampleL = sampleL * (1 - ringModMixF[effectIndex]) + ringModOutputL[effectIndex] * ringModMixF[effectIndex];\n\t\t\t\t\tsampleR = sampleR * (1 - ringModMixF[effectIndex]) + ringModOutputR[effectIndex] * ringModMixF[effectIndex];\n\n\t\t\t\t\tringModMix[effectIndex] += ringModMixDelta[effectIndex];\n\t\t\t\t\tringModPhase[effectIndex] += ringModPhaseDelta[effectIndex];\n\t\t\t\t\tringModPhase[effectIndex] = ringModPhase[effectIndex] % 1.0;\n\t\t\t\t\tringModPhaseDelta[effectIndex] *= ringModPhaseDeltaScale[effectIndex];\n\t\t\t\t\tringModMixFade[effectIndex] += ringModMixFadeDelta[effectIndex];\n\t\t\t\t\t`\n                }\n                else if (usesGranular && effectState.type == EffectType.granular) {\n                    effectsSource += `\n                    granularOutputL[effectIndex] = 0;\n                    granularOutputR[effectIndex] = 0;\n                    for (let grainIndex = 0; grainIndex < granularGrainCount[effectIndex]; grainIndex++) {\n                        const grain = granularGrains[effectIndex][grainIndex];\n                        if(computeGrains[effectIndex]) {\n                            if(grain.delay > 0) {\n                                grain.delay--;\n                            } else {\n                                const grainDelayLinePosition = grain.delayLinePosition;\n                                const grainDelayLinePositionInt = grainDelayLinePosition | 0;\n                                let grainAgeInSamples = grain.ageInSamples;\n                                const grainMaxAgeInSamples = grain.maxAgeInSamples;\n                                let grainSampleL = granularDelayLineL[effectIndex][((granularDelayLineIndex[effectIndex] + (granularDelayLineLength[effectIndex] - grainDelayLinePositionInt))    ) & granularDelayLineMask];\n                                let grainSampleR = granularDelayLineR[effectIndex][((granularDelayLineIndex[effectIndex] + (granularDelayLineLength[effectIndex] - grainDelayLinePositionInt))    ) & granularDelayLineMask];\n                                `\n                    if (Config.granularEnvelopeType == GranularEnvelopeType.parabolic) {\n                        effectsSource += `\n                                    const grainEnvelope = grain.parabolicEnvelopeAmplitude;\n                                    `\n                    } else if (Config.granularEnvelopeType == GranularEnvelopeType.raisedCosineBell) {\n                        effectsSource += `\n                                    const grainEnvelope = grain.rcbEnvelopeAmplitude;\n                                    `\n                    }\n                    effectsSource += `\n                                grainSampleL *= grainEnvelope;\n                                grainSampleR *= grainEnvelope;\n                                granularOutputL[effectIndex] += grainSampleL;\n                                granularOutputR[effectIndex] += grainSampleR;\n                                if (grainAgeInSamples > grainMaxAgeInSamples) {\n                                    if (granularGrainCount[effectIndex] > 0) {\n                                        // Faster equivalent of .pop, ignoring the order in the array.\n                                        const lastGrainIndex = granularGrainCount[effectIndex] - 1;\n                                        const lastGrain = granularGrains[effectIndex][lastGrainIndex];\n                                        granularGrains[effectIndex][grainIndex] = lastGrain;\n                                        granularGrains[effectIndex][lastGrainIndex] = grain;\n                                        granularGrainCount[effectIndex]--;\n                                        grainIndex--;\n                                        // ^ Dangerous, since this could end up causing an infinite loop,\n                                        // but should be okay in this case.\n                                    }\n                                } else {\n                                    grainAgeInSamples++;\n                                    `\n                    if (Config.granularEnvelopeType == GranularEnvelopeType.parabolic) {\n                        // grain.updateParabolicEnvelope();\n                        // Inlined:\n                        effectsSource += `\n                                        grain.parabolicEnvelopeAmplitude += grain.parabolicEnvelopeSlope;\n                                        grain.parabolicEnvelopeSlope += grain.parabolicEnvelopeCurve;\n                                        `\n                    } else if (Config.granularEnvelopeType == GranularEnvelopeType.raisedCosineBell) {\n                        effectsSource += `\n                                        grain.updateRCBEnvelope();\n                                        `\n                    }\n                    effectsSource += `\n                                    grain.ageInSamples = grainAgeInSamples;\n                                }\n                            }\n                        }\n                    }\n                    granularWet[effectIndex] += granularMixDelta[effectIndex];\n                    granularDry[effectIndex] -= granularMixDelta[effectIndex];\n                    granularOutputL[effectIndex] *= Config.granularOutputLoudnessCompensation;\n                    granularOutputR[effectIndex] *= Config.granularOutputLoudnessCompensation;\n                    granularDelayLineL[effectIndex][granularDelayLineIndex[effectIndex]] = sampleL;\n                    granularDelayLineR[effectIndex][granularDelayLineIndex[effectIndex]] = sampleR;\n                    granularDelayLineIndex[effectIndex] = (granularDelayLineIndex[effectIndex] + 1) & granularDelayLineMask[effectIndex];\n                    sampleL = sampleL * granularDry[effectIndex] + granularOutputL[effectIndex] * granularWet[effectIndex];\n                    sampleR = sampleR * granularDry[effectIndex] + granularOutputR[effectIndex] * granularWet[effectIndex];\n                    `\n                }\n            }\n\n            effectsSource += `\n\n                    outputDataL[sampleIndex] += sampleL * mixVolume;\n                    outputDataR[sampleIndex] += sampleR * mixVolume;\n                    mixVolume += mixVolumeDelta;`\n\n            if (usesDelays) {\n                effectsSource += `\n\n                    delayInputMult += delayInputMultDelta;`\n            }\n\n            effectsSource += `\n                }\n\n                instrumentState.mixVolume = mixVolume;\n\n                // Avoid persistent denormal or NaN values in the delay buffers and filter history.\n                const epsilon = (1.0e-24);`\n\n            if (usesDelays) {\n                effectsSource += `\n\n                instrumentState.delayInputMult = delayInputMult;`\n            }\n\n            for (let i = 0; i < instrumentState.effects.length; i++) {\n                let effectState = instrumentState.effects[i] as EffectState\n                effectsSource += `\n\n                effectState = instrumentState.effects[` + i + `];\n                effectIndex = ` + i + `;\n                `\n\n                if (usesGranular && effectState.type == EffectType.granular) {\n                    effectsSource += `\n                        effectState.granularMix = granularWet[effectIndex];\n                        effectState.granularGrainsLength = granularGrainCount[effectIndex];\n                        effectState.granularDelayLineIndex = granularDelayLineIndex[effectIndex];\n                    `\n                }\n                else if (usesDistortion && effectState.type == EffectType.distortion) {\n                    effectsSource += `\n\n                    effectState.distortion = distortion[effectIndex];\n                    effectState.distortionDrive = distortionDrive[effectIndex];\n\n                    if (!Number.isFinite(distortionFractionalInputL1[effectIndex]) || Math.abs(distortionFractionalInputL1[effectIndex]) < epsilon) distortionFractionalInputL1[effectIndex] = 0.0;\n                    if (!Number.isFinite(distortionFractionalInputL2[effectIndex]) || Math.abs(distortionFractionalInputL2[effectIndex]) < epsilon) distortionFractionalInputL2[effectIndex] = 0.0;\n                    if (!Number.isFinite(distortionFractionalInputL3[effectIndex]) || Math.abs(distortionFractionalInputL3[effectIndex]) < epsilon) distortionFractionalInputL3[effectIndex] = 0.0;\n                    if (!Number.isFinite(distortionFractionalInputR1[effectIndex]) || Math.abs(distortionFractionalInputR1[effectIndex]) < epsilon) distortionFractionalInputR1[effectIndex] = 0.0;\n                    if (!Number.isFinite(distortionFractionalInputR2[effectIndex]) || Math.abs(distortionFractionalInputR2[effectIndex]) < epsilon) distortionFractionalInputR2[effectIndex] = 0.0;\n                    if (!Number.isFinite(distortionFractionalInputR3[effectIndex]) || Math.abs(distortionFractionalInputR3[effectIndex]) < epsilon) distortionFractionalInputR3[effectIndex] = 0.0;\n                    if (!Number.isFinite(distortionPrevInputL[effectIndex]) || Math.abs(distortionPrevInputL[effectIndex]) < epsilon) distortionPrevInputL[effectIndex] = 0.0;\n                    if (!Number.isFinite(distortionPrevInputR[effectIndex]) || Math.abs(distortionPrevInputR[effectIndex]) < epsilon) distortionPrevInputR[effectIndex] = 0.0;\n                    if (!Number.isFinite(distortionNextOutputL[effectIndex]) || Math.abs(distortionNextOutputL[effectIndex]) < epsilon) distortionNextOutputL[effectIndex] = 0.0;\n                    if (!Number.isFinite(distortionNextOutputR[effectIndex]) || Math.abs(distortionNextOutputR[effectIndex]) < epsilon) distortionNextOutputR[effectIndex] = 0.0;\n\n                    effectState.distortionFractionalInputL1 = distortionFractionalInputL1[effectIndex];\n                    effectState.distortionFractionalInputL2 = distortionFractionalInputL2[effectIndex];\n                    effectState.distortionFractionalInputL3 = distortionFractionalInputL3[effectIndex];\n                    effectState.distortionFractionalInputR1 = distortionFractionalInputR1[effectIndex];\n                    effectState.distortionFractionalInputR2 = distortionFractionalInputR2[effectIndex];\n                    effectState.distortionFractionalInputR3 = distortionFractionalInputR3[effectIndex];\n                    effectState.distortionPrevInputL = distortionPrevInputL[effectIndex];\n                    effectState.distortionPrevInputR = distortionPrevInputR[effectIndex];\n                    effectState.distortionNextOutputL = distortionNextOutputL[effectIndex];\n                    effectState.distortionNextOutputR = distortionNextOutputR[effectIndex];`\n                }\n                else if (usesBitcrusher && effectState.type == EffectType.bitcrusher) {\n                    effectsSource += `\n\n                    if (Math.abs(bitcrusherPrevInputL[effectIndex]) < epsilon) bitcrusherPrevInputL[effectIndex] = 0.0;\n                    if (Math.abs(bitcrusherPrevInputR[effectIndex]) < epsilon) bitcrusherPrevInputR[effectIndex] = 0.0;\n                    if (Math.abs(bitcrusherCurrentOutputL[effectIndex]) < epsilon) bitcrusherCurrentOutputL[effectIndex] = 0.0;\n                    if (Math.abs(bitcrusherCurrentOutputR[effectIndex]) < epsilon) bitcrusherCurrentOutputR[effectIndex] = 0.0;\n                    effectState.bitcrusherPrevInputL = bitcrusherPrevInputL[effectIndex];\n                    effectState.bitcrusherPrevInputR = bitcrusherPrevInputR[effectIndex];\n                    effectState.bitcrusherCurrentOutputL = bitcrusherCurrentOutputL[effectIndex];\n                    effectState.bitcrusherCurrentOutputR = bitcrusherCurrentOutputR[effectIndex];\n                    effectState.bitcrusherPhase = bitcrusherPhase[effectIndex];\n                    effectState.bitcrusherPhaseDelta = bitcrusherPhaseDelta[effectIndex];\n                    effectState.bitcrusherScale = bitcrusherScale[effectIndex];\n                    effectState.bitcrusherFoldLevel = bitcrusherFoldLevel[effectIndex];`\n\n                }\n                else if (usesRingModulation && effectState.type == EffectType.ringModulation) {\n                    effectsSource += `\n                    effectState.ringModMix = ringModMix[effectIndex];\n                    effectState.ringModMixDelta = ringModMixDelta[effectIndex];\n                    effectState.ringModPhase = ringModPhase[effectIndex];\n                    effectState.ringModPhaseDelta = ringModPhaseDelta[effectIndex];\n                    effectState.ringModPhaseDeltaScale = ringModPhaseDeltaScale[effectIndex];\n                    effectState.ringModWaveformIndex = ringModWaveformIndex[effectIndex];\n                    effectState.ringModPulseWidth = ringModPulseWidth[effectIndex];\n                    effectState.ringModMixFade = ringModMixFade[effectIndex];\n                    `\n                }\n                else if (usesEqFilter && effectState.type == EffectType.eqFilter) {\n                    effectsSource += `\n\n                        synth.sanitizeFilters(filtersL[effectIndex]);\n                        synth.sanitizeFilters(filtersR[effectIndex]);\n                    // The filter input here is downstream from another filter so we\n                    // better make sure it's safe too.\n                    if (!(initialFilterInputL1[effectIndex] < 100) || !(initialFilterInputL2[effectIndex] < 100) || !(initialFilterInputR1[effectIndex] < 100) || !(initialFilterInputR2[effectIndex] < 100)) {\n                        initialFilterInputL1[effectIndex] = 0.0;\n                        initialFilterInputR2[effectIndex] = 0.0;\n                        initialFilterInputL1[effectIndex] = 0.0;\n                        initialFilterInputR2[effectIndex] = 0.0;\n                    }\n                    if (Math.abs(initialFilterInputL1[effectIndex]) < epsilon) initialFilterInputL1[effectIndex] = 0.0;\n                    if (Math.abs(initialFilterInputL2[effectIndex]) < epsilon) initialFilterInputL2[effectIndex] = 0.0;\n                    if (Math.abs(initialFilterInputR1[effectIndex]) < epsilon) initialFilterInputR1[effectIndex] = 0.0;\n                    if (Math.abs(initialFilterInputR2[effectIndex]) < epsilon) initialFilterInputR2[effectIndex] = 0.0;\n                    effectState.initialEqFilterInputL1 = initialFilterInputL1[effectIndex];\n                    effectState.initialEqFilterInputL2 = initialFilterInputL2[effectIndex];\n                    effectState.initialEqFilterInputR1 = initialFilterInputR1[effectIndex];\n                    effectState.initialEqFilterInputR2 = initialFilterInputR2[effectIndex];\n\n                    instrumentState.eqFilterVolume = eqFilterVolume[effectIndex];`\n                }\n                else if (usesGain && effectState.type == EffectType.gain) {\n                    effectsSource += `\n                    effectState.gain = gain[effectIndex];\n                    `\n                }\n                else if (usesPanning && effectState.type == EffectType.panning) {\n                    effectsSource += `\n\n                    Synth.sanitizeDelayLine(panningDelayLineL[effectIndex], panningDelayPos[effectIndex], panningMask);\n                    Synth.sanitizeDelayLine(panningDelayLineR[effectIndex], panningDelayPos[effectIndex], panningMask);\n                    effectState.panningDelayPos = panningDelayPos[effectIndex];\n                    effectState.panningVolumeL = panningVolumeL[effectIndex];\n                    effectState.panningVolumeR = panningVolumeR[effectIndex];\n                    effectState.panningOffsetL = panningOffsetL[effectIndex];\n                    effectState.panningOffsetR = panningOffsetR[effectIndex];`\n                }\n                else if (usesFlanger && effectState.type == EffectType.flanger) {\n                    effectsSource += `\n\n                    Synth.sanitizeDelayLine(flangerDelayLineL[effectIndex], flangerDelayPos[effectIndex], flangerMask);\n                    Synth.sanitizeDelayLine(flangerDelayLineR[effectIndex], flangerDelayPos[effectIndex], flangerMask);\n                    effectState.flangerPhase = flangerPhase[effectIndex];\n                    effectState.flangerDelayPos = flangerDelayPos[effectIndex];\n                    effectState.flanger = flanger[effectIndex];\n                    effectState.flangerSpeed = flangerSpeed[effectIndex];\n                    effectState.flangerDepth = flangerDepth[effectIndex];\n                    effectState.flangerFeedback = flangerFeedback[effectIndex];`\n                }\n                else if (usesChorus && effectState.type == EffectType.chorus) {\n                    effectsSource += `\n\n                    Synth.sanitizeDelayLine(chorusDelayLineL[effectIndex], chorusDelayPos[effectIndex], chorusMask);\n                    Synth.sanitizeDelayLine(chorusDelayLineR[effectIndex], chorusDelayPos[effectIndex], chorusMask);\n                    effectState.chorusPhase = chorusPhase[effectIndex];\n                    effectState.chorusDelayPos = chorusDelayPos[effectIndex];\n                    effectState.chorusVoiceMult = chorusVoiceMult[effectIndex];\n                    effectState.chorusCombinedMult = chorusCombinedMult[effectIndex];`\n                }\n                else if (usesEcho && effectState.type == EffectType.echo) {\n                    effectsSource += `\n\n                    Synth.sanitizeDelayLine(echoDelayLineL[effectIndex], echoDelayPosL[effectIndex], echoMask[effectIndex]);\n                    Synth.sanitizeDelayLine(echoDelayLineR[effectIndex], echoDelayPosR[effectIndex], echoMask[effectIndex]);\n                    effectState.echoDelayPosL = echoDelayPosL[effectIndex];\n                    effectState.echoDelayPosR = echoDelayPosR[effectIndex];\n                    effectState.echoMult = echoMult[effectIndex];\n                    effectState.echoDelayOffsetRatio = echoDelayOffsetRatio[effectIndex];\n\n                    if (!Number.isFinite(echoShelfSampleL[effectIndex]) || Math.abs(echoShelfSampleL[effectIndex]) < epsilon) echoShelfSampleL[effectIndex] = 0.0;\n                    if (!Number.isFinite(echoShelfSampleR[effectIndex]) || Math.abs(echoShelfSampleR[effectIndex]) < epsilon) echoShelfSampleR[effectIndex] = 0.0;\n                    if (!Number.isFinite(echoShelfPrevInputL[effectIndex]) || Math.abs(echoShelfPrevInputL[effectIndex]) < epsilon) echoShelfPrevInputL[effectIndex] = 0.0;\n                    if (!Number.isFinite(echoShelfPrevInputR[effectIndex]) || Math.abs(echoShelfPrevInputR[effectIndex]) < epsilon) echoShelfPrevInputR[effectIndex] = 0.0;\n                    effectState.echoShelfSampleL = echoShelfSampleL[effectIndex];\n                    effectState.echoShelfSampleR = echoShelfSampleR[effectIndex];\n                    effectState.echoShelfPrevInputL = echoShelfPrevInputL[effectIndex];\n                    effectState.echoShelfPrevInputR = echoShelfPrevInputR[effectIndex];`\n                }\n                else if (usesReverb && effectState.type == EffectType.reverb) {\n                    effectsSource += `\n\n                    Synth.sanitizeDelayLine(reverbDelayLine[effectIndex], reverbDelayPos[effectIndex]        , reverbMask);\n                    Synth.sanitizeDelayLine(reverbDelayLine[effectIndex], reverbDelayPos[effectIndex] +  3041, reverbMask);\n                    Synth.sanitizeDelayLine(reverbDelayLine[effectIndex], reverbDelayPos[effectIndex] +  6426, reverbMask);\n                    Synth.sanitizeDelayLine(reverbDelayLine[effectIndex], reverbDelayPos[effectIndex] + 10907, reverbMask);\n                    effectState.reverbDelayPos = reverbDelayPos[effectIndex];\n                    effectState.reverbMult = reverb[effectIndex];\n\n                    if (!Number.isFinite(reverbShelfSample0[effectIndex]) || Math.abs(reverbShelfSample0[effectIndex]) < epsilon) reverbShelfSample0[effectIndex] = 0.0;\n                    if (!Number.isFinite(reverbShelfSample1[effectIndex]) || Math.abs(reverbShelfSample1[effectIndex]) < epsilon) reverbShelfSample1[effectIndex] = 0.0;\n                    if (!Number.isFinite(reverbShelfSample2[effectIndex]) || Math.abs(reverbShelfSample2[effectIndex]) < epsilon) reverbShelfSample2[effectIndex] = 0.0;\n                    if (!Number.isFinite(reverbShelfSample3[effectIndex]) || Math.abs(reverbShelfSample3[effectIndex]) < epsilon) reverbShelfSample3[effectIndex] = 0.0;\n                    if (!Number.isFinite(reverbShelfPrevInput0[effectIndex]) || Math.abs(reverbShelfPrevInput0[effectIndex]) < epsilon) reverbShelfPrevInput0[effectIndex] = 0.0;\n                    if (!Number.isFinite(reverbShelfPrevInput1[effectIndex]) || Math.abs(reverbShelfPrevInput1[effectIndex]) < epsilon) reverbShelfPrevInput1[effectIndex] = 0.0;\n                    if (!Number.isFinite(reverbShelfPrevInput2[effectIndex]) || Math.abs(reverbShelfPrevInput2[effectIndex]) < epsilon) reverbShelfPrevInput2[effectIndex] = 0.0;\n                    if (!Number.isFinite(reverbShelfPrevInput3[effectIndex]) || Math.abs(reverbShelfPrevInput3[effectIndex]) < epsilon) reverbShelfPrevInput3[effectIndex] = 0.0;\n                    effectState.reverbShelfSample0 = reverbShelfSample0[effectIndex];\n                    effectState.reverbShelfSample1 = reverbShelfSample1[effectIndex];\n                    effectState.reverbShelfSample2 = reverbShelfSample2[effectIndex];\n                    effectState.reverbShelfSample3 = reverbShelfSample3[effectIndex];\n                    effectState.reverbShelfPrevInput0 = reverbShelfPrevInput0[effectIndex];\n                    effectState.reverbShelfPrevInput1 = reverbShelfPrevInput1[effectIndex];\n                    effectState.reverbShelfPrevInput2 = reverbShelfPrevInput2[effectIndex];\n                    effectState.reverbShelfPrevInput3 = reverbShelfPrevInput3[effectIndex];`\n                }\n            }\n\n            effectsSource += \"}\";\n\n            console.log(effectsSource);\n            effectsFunction = new Function(\"Config\", \"Synth\", effectsSource)(Config, Synth);\n            Synth.effectsFunctionCache[signature] = effectsFunction;\n        }\n\n        effectsFunction(synth, outputDataL, outputDataR, bufferIndex, runLength, instrumentState);\n    }\n\n    private static pulseWidthSynth(synth: Synth, bufferIndex: number, roundedSamplesPerTick: number, tone: Tone, instrumentState: InstrumentState): void {\n        const data: Float32Array = synth.tempInstrumentSampleBufferL!;\n\n        const unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\n        if (instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord!.customInterval) tone.phases[1] = tone.phases[0];\n        let phaseDeltaA = tone.phaseDeltas[0];\n        let phaseDeltaB = tone.phaseDeltas[1];\n        const phaseDeltaScaleA = +tone.phaseDeltaScales[0];\n        const phaseDeltaScaleB = +tone.phaseDeltaScales[1];\n        let expression = +tone.expression;\n        const expressionDelta = +tone.expressionDelta;\n        let phaseA = (tone.phases[0] % 1);\n        let phaseB = (tone.phases[1] % 1);\n\n        let pulseWidth = tone.pulseWidth;\n        const pulseWidthDelta = tone.pulseWidthDelta;\n\n        const filters: DynamicBiquadFilter[] = tone.noteFiltersL;\n        const filterCount = tone.noteFilterCount | 0;\n        let initialFilterInput1 = +tone.initialNoteFilterInputL1;\n        let initialFilterInput2 = +tone.initialNoteFilterInputL2;\n        const applyFilters = Synth.applyFilters;\n\n        const stopIndex = bufferIndex + roundedSamplesPerTick;\n        for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\n            const sawPhaseA = phaseA % 1;\n            const sawPhaseB = (phaseA + pulseWidth) % 1;\n            const sawPhaseC = phaseB % 1;\n            const sawPhaseD = (phaseB + pulseWidth) % 1;\n\n            let pulseWaveA = sawPhaseB - sawPhaseA;\n            let pulseWaveB = sawPhaseD - sawPhaseC;\n\n            // This is a PolyBLEP, which smooths out discontinuities at any frequency to reduce aliasing.\n            if (!instrumentState.aliases) {\n                if (sawPhaseA < phaseDeltaA) {\n                    var t = sawPhaseA / phaseDeltaA;\n                    pulseWaveA += (t + t - t * t - 1) * 0.5;\n                } else if (sawPhaseA > 1.0 - phaseDeltaA) {\n                    var t = (sawPhaseA - 1.0) / phaseDeltaA;\n                    pulseWaveA += (t + t + t * t + 1) * 0.5;\n                }\n                if (sawPhaseB < phaseDeltaA) {\n                    var t = sawPhaseB / phaseDeltaA;\n                    pulseWaveA -= (t + t - t * t - 1) * 0.5;\n                } else if (sawPhaseB > 1.0 - phaseDeltaA) {\n                    var t = (sawPhaseB - 1.0) / phaseDeltaA;\n                    pulseWaveA -= (t + t + t * t + 1) * 0.5;\n                }\n\n                if (sawPhaseC < phaseDeltaB) {\n                    var t = sawPhaseC / phaseDeltaB;\n                    pulseWaveB += (t + t - t * t - 1) * 0.5;\n                } else if (sawPhaseC > 1.0 - phaseDeltaB) {\n                    var t = (sawPhaseC - 1.0) / phaseDeltaB;\n                    pulseWaveB += (t + t + t * t + 1) * 0.5;\n                }\n                if (sawPhaseD < phaseDeltaB) {\n                    var t = sawPhaseD / phaseDeltaB;\n                    pulseWaveB -= (t + t - t * t - 1) * 0.5;\n                } else if (sawPhaseD > 1.0 - phaseDeltaB) {\n                    var t = (sawPhaseD - 1.0) / phaseDeltaB;\n                    pulseWaveB -= (t + t + t * t + 1) * 0.5;\n                }\n            }\n\n            const inputSample = pulseWaveA + pulseWaveB * unisonSign;\n            const sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n            initialFilterInput2 = initialFilterInput1;\n            initialFilterInput1 = inputSample;\n\n            phaseA += phaseDeltaA;\n            phaseB += phaseDeltaB;\n            phaseDeltaA *= phaseDeltaScaleA;\n            phaseDeltaB *= phaseDeltaScaleB;\n            pulseWidth += pulseWidthDelta;\n\n            const output = sample * expression;\n            expression += expressionDelta;\n\n            data[sampleIndex] += output;\n        }\n\n        tone.phases[0] = phaseA;\n        tone.phases[1] = phaseB;\n        tone.phaseDeltas[0] = phaseDeltaA;\n        tone.phaseDeltas[1] = phaseDeltaB;\n        tone.expression = expression;\n        tone.pulseWidth = pulseWidth;\n\n        synth.sanitizeFilters(filters);\n        tone.initialNoteFilterInputL1 = initialFilterInput1;\n        tone.initialNoteFilterInputL2 = initialFilterInput2;\n    }\n\n    private static supersawSynth(synth: Synth, bufferIndex: number, runLength: number, tone: Tone, instrumentState: InstrumentState): void {\n        const data: Float32Array = synth.tempInstrumentSampleBufferL!;\n        const voiceCount = Config.supersawVoiceCount | 0;\n\n        let phaseDelta = tone.phaseDeltas[0];\n        const phaseDeltaScale = +tone.phaseDeltaScales[0];\n        let expression = +tone.expression;\n        const expressionDelta = +tone.expressionDelta;\n        let phases: number[] = tone.phases;\n\n        let dynamism = +tone.supersawDynamism;\n        const dynamismDelta = +tone.supersawDynamismDelta;\n        const unisonDetunes: number[] = tone.supersawUnisonDetunes;\n        let shape = +tone.supersawShape;\n        const shapeDelta = +tone.supersawShapeDelta;\n        let delayLength = +tone.supersawDelayLength;\n        const delayLengthDelta = +tone.supersawDelayLengthDelta;\n        const delayLine: Float32Array = tone.supersawDelayLine!;\n        const delayBufferMask = (delayLine.length - 1) >> 0;\n        let delayIndex = tone.supersawDelayIndex | 0;\n        delayIndex = (delayIndex & delayBufferMask) + delayLine.length;\n\n        const filters: DynamicBiquadFilter[] = tone.noteFiltersL;\n        const filterCount = tone.noteFilterCount | 0;\n        let initialFilterInput1 = +tone.initialNoteFilterInputL1;\n        let initialFilterInput2 = +tone.initialNoteFilterInputL2;\n        const applyFilters = Synth.applyFilters;\n\n        const stopIndex = bufferIndex + runLength;\n        for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n            // The phase initially starts at a zero crossing so apply\n            // the delta before first sample to get a nonzero value.\n            let phase = (phases[0] + phaseDelta) % 1.0;\n            let supersawSample = phase - 0.5 * (1.0 + (voiceCount - 1.0) * dynamism);\n\n            // This is a PolyBLEP, which smooths out discontinuities at any frequency to reduce aliasing. \n            if (!instrumentState.aliases) {\n                if (phase < phaseDelta) {\n                    var t = phase / phaseDelta;\n                    supersawSample -= (t + t - t * t - 1) * 0.5;\n                } else if (phase > 1.0 - phaseDelta) {\n                    var t = (phase - 1.0) / phaseDelta;\n                    supersawSample -= (t + t + t * t + 1) * 0.5;\n                }\n            }\n\n            phases[0] = phase;\n\n            for (let i = 1; i < voiceCount; i++) {\n                const detunedPhaseDelta = phaseDelta * unisonDetunes[i];\n                // The phase initially starts at a zero crossing so apply\n                // the delta before first sample to get a nonzero value.\n                let phase = (phases[i] + detunedPhaseDelta) % 1.0;\n                supersawSample += phase * dynamism;\n\n                // This is a PolyBLEP, which smooths out discontinuities at any frequency to reduce aliasing. \n                if (!instrumentState.aliases) {\n                    if (phase < detunedPhaseDelta) {\n                        const t = phase / detunedPhaseDelta;\n                        supersawSample -= (t + t - t * t - 1) * 0.5 * dynamism;\n                    } else if (phase > 1.0 - detunedPhaseDelta) {\n                        const t = (phase - 1.0) / detunedPhaseDelta;\n                        supersawSample -= (t + t + t * t + 1) * 0.5 * dynamism;\n                    }\n                }\n\n                phases[i] = phase;\n            }\n\n            delayLine[delayIndex & delayBufferMask] = supersawSample;\n            const delaySampleTime = delayIndex - delayLength;\n            const lowerIndex = delaySampleTime | 0;\n            const upperIndex = lowerIndex + 1;\n            const delayRatio = delaySampleTime - lowerIndex;\n            const prevDelaySample = delayLine[lowerIndex & delayBufferMask];\n            const nextDelaySample = delayLine[upperIndex & delayBufferMask];\n            const delaySample = prevDelaySample + (nextDelaySample - prevDelaySample) * delayRatio;\n            delayIndex++;\n\n            const inputSample = supersawSample - delaySample * shape;\n            const sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n            initialFilterInput2 = initialFilterInput1;\n            initialFilterInput1 = inputSample;\n\n            phaseDelta *= phaseDeltaScale;\n            dynamism += dynamismDelta;\n            shape += shapeDelta;\n            delayLength += delayLengthDelta;\n\n            const output = sample * expression;\n            expression += expressionDelta;\n\n            data[sampleIndex] += output;\n        }\n\n        tone.phaseDeltas[0] = phaseDelta;\n        tone.expression = expression;\n        tone.supersawDynamism = dynamism;\n        tone.supersawShape = shape;\n        tone.supersawDelayLength = delayLength;\n        tone.supersawDelayIndex = delayIndex;\n\n        synth.sanitizeFilters(filters);\n        tone.initialNoteFilterInputL1 = initialFilterInput1;\n        tone.initialNoteFilterInputL2 = initialFilterInput2;\n    }\n\n    private static fmSourceTemplate: string[] = (`\n\t\tconst data = synth.tempInstrumentSampleBufferL;\n\t\tconst sineWave = Config.sineWave;\n\t\t\t\n\t\t// I'm adding 1000 to the phase to ensure that it's never negative even when modulated by other waves because negative numbers don't work with the modulus operator very well.\n\t\tlet operator#Phase       = +((tone.phases[#] % 1) + 1000) * ` + Config.sineWaveLength + `;\n\t\tlet operator#PhaseDelta  = +tone.phaseDeltas[#] * ` + Config.sineWaveLength + `;\n\t\tlet operator#PhaseDeltaScale = +tone.phaseDeltaScales[#];\n\t\tlet operator#OutputMult  = +tone.operatorExpressions[#];\n\t\tconst operator#OutputDelta = +tone.operatorExpressionDeltas[#];\n\t\tlet operator#Output      = +tone.feedbackOutputs[#];\n        const operator#Wave      = tone.operatorWaves[#].samples;\n\t\tlet feedbackMult         = +tone.feedbackMult;\n\t\tconst feedbackDelta        = +tone.feedbackDelta;\n        let expression = +tone.expression;\n\t\tconst expressionDelta = +tone.expressionDelta;\n\t\t\n\t\tconst filters = tone.noteFiltersL;\n\t\tconst filterCount = tone.noteFilterCount|0;\n\t\tlet initialFilterInput1 = +tone.initialNoteFilterInputL1;\n\t\tlet initialFilterInput2 = +tone.initialNoteFilterInputL2;\n\t\tconst applyFilters = Synth.applyFilters;\n\t\t\n\t\tconst stopIndex = bufferIndex + roundedSamplesPerTick;\n\t\tfor (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n\t\t\t\t// INSERT OPERATOR COMPUTATION HERE\n\t\t\t\tconst fmOutput = (/*operator#Scaled*/); // CARRIER OUTPUTS\n\t\t\t\t\n\t\t\tconst inputSample = fmOutput;\n\t\t\tconst sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n\t\t\tinitialFilterInput2 = initialFilterInput1;\n\t\t\tinitialFilterInput1 = inputSample;\n\t\t\t\t\n\t\t\t\tfeedbackMult += feedbackDelta;\n\t\t\t\toperator#OutputMult += operator#OutputDelta;\n\t\t\t\toperator#Phase += operator#PhaseDelta;\n\t\t\toperator#PhaseDelta *= operator#PhaseDeltaScale;\n\t\t\t\n\t\t\tconst output = sample * expression;\n\t\t\texpression += expressionDelta;\n\n\t\t\tdata[sampleIndex] += output;\n\t\t\t}\n\t\t\t\n\t\t\ttone.phases[#] = operator#Phase / ` + Config.sineWaveLength + `;\n\t\t\ttone.phaseDeltas[#] = operator#PhaseDelta / ` + Config.sineWaveLength + `;\n\t\t\ttone.operatorExpressions[#] = operator#OutputMult;\n\t\t    tone.feedbackOutputs[#] = operator#Output;\n\t\t    tone.feedbackMult = feedbackMult;\n\t\t    tone.expression = expression;\n\t\t\t\n\t\tsynth.sanitizeFilters(filters);\n\t\ttone.initialNoteFilterInputL1 = initialFilterInput1;\n\t\ttone.initialNoteFilterInputL2 = initialFilterInput2;\n\t\t`).split(\"\\n\");\n\n    private static operatorSourceTemplate: string[] = (`\n\t\tconst operator#PhaseMix = operator#Phase/* + operator@Scaled*/;\n\t\tconst operator#PhaseInt = operator#PhaseMix|0;\n\t\tconst operator#Index    = operator#PhaseInt & ` + Config.sineWaveMask + `;\n\t\tconst operator#Sample   = operator#Wave[operator#Index];\n\t\toperator#Output         = operator#Sample + (operator#Wave[operator#Index + 1] - operator#Sample) * (operator#PhaseMix - operator#PhaseInt);\n\t\tconst operator#Scaled   = operator#OutputMult * operator#Output;\n\t\t`).split(\"\\n\");\n\n    private static noiseSynth(synth: Synth, bufferIndex: number, runLength: number, tone: Tone, instrumentState: InstrumentState): void {\n        const data: Float32Array = synth.tempInstrumentSampleBufferL!;\n        const wave: Float32Array = instrumentState.waveL!;\n\n        const unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\n        if (instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord!.customInterval) tone.phases[1] = tone.phases[0];\n        let phaseDeltaA = tone.phaseDeltas[0];\n        let phaseDeltaB = tone.phaseDeltas[1];\n        const phaseDeltaScaleA = +tone.phaseDeltaScales[0];\n        const phaseDeltaScaleB = +tone.phaseDeltaScales[1];\n        let expression = +tone.expression;\n        const expressionDelta = +tone.expressionDelta;\n        let phaseA = (tone.phases[0] % 1) * Config.chipNoiseLength;\n        let phaseB = (tone.phases[1] % 1) * Config.chipNoiseLength;\n        if (tone.phases[0] == 0.0) {\n            // Zero phase means the tone was reset, just give noise a random start phase instead.\n            phaseA = Math.random() * Config.chipNoiseLength;\n            if (instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord!.customInterval) phaseB = phaseA;\n        }\n        if (tone.phases[1] == 0.0 && !(instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord!.customInterval)) {\n            // Zero phase means the tone was reset, just give noise a random start phase instead.\n            phaseB = Math.random() * Config.chipNoiseLength;\n        }\n        const phaseMask = Config.chipNoiseLength - 1;\n        let noiseSampleA = +tone.noiseSampleA;\n        let noiseSampleB = +tone.noiseSampleB;\n\n        const filters: DynamicBiquadFilter[] = tone.noteFiltersL;\n        const filterCount = tone.noteFilterCount | 0;\n        let initialFilterInput1 = +tone.initialNoteFilterInputL1;\n        let initialFilterInput2 = +tone.initialNoteFilterInputL2;\n        const applyFilters = Synth.applyFilters;\n\n        // This is for a \"legacy\" style simplified 1st order lowpass filter with\n        // a cutoff frequency that is relative to the tone's fundamental frequency.\n        const pitchRelativefilterA = Math.min(1.0, phaseDeltaA * instrumentState.noisePitchFilterMult);\n        const pitchRelativefilterB = Math.min(1.0, phaseDeltaB * instrumentState.noisePitchFilterMult);\n\n        const stopIndex = bufferIndex + runLength;\n        for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n            const waveSampleA = wave[phaseA & phaseMask];\n            const waveSampleB = wave[phaseB & phaseMask];\n\n            noiseSampleA += (waveSampleA - noiseSampleA) * pitchRelativefilterA;\n            noiseSampleB += (waveSampleB - noiseSampleB) * pitchRelativefilterB;\n\n            const inputSample = noiseSampleA + noiseSampleB * unisonSign;\n            const sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n            initialFilterInput2 = initialFilterInput1;\n            initialFilterInput1 = inputSample;\n\n            phaseA += phaseDeltaA;\n            phaseB += phaseDeltaB;\n            phaseDeltaA *= phaseDeltaScaleA;\n            phaseDeltaB *= phaseDeltaScaleB;\n\n            const output = sample * expression;\n            expression += expressionDelta;\n\n            data[sampleIndex] += output;\n        }\n\n        tone.phases[0] = phaseA / Config.chipNoiseLength;\n        tone.phases[1] = phaseB / Config.chipNoiseLength;\n        tone.phaseDeltas[0] = phaseDeltaA;\n        tone.phaseDeltas[1] = phaseDeltaB;\n        tone.expression = expression;\n        tone.noiseSampleA = noiseSampleA;\n        tone.noiseSampleB = noiseSampleB;\n\n        synth.sanitizeFilters(filters);\n        tone.initialNoteFilterInputL1 = initialFilterInput1;\n        tone.initialNoteFilterInputL2 = initialFilterInput2;\n    }\n\n    private static spectrumSynth(synth: Synth, bufferIndex: number, runLength: number, tone: Tone, instrumentState: InstrumentState): void {\n        const data: Float32Array = synth.tempInstrumentSampleBufferL!;\n        const wave: Float32Array = instrumentState.waveL!;\n        const samplesInPeriod = (1 << 7);\n\n        const unisonSign = tone.specialIntervalExpressionMult * instrumentState.unisonSign;\n        if (instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord!.customInterval) tone.phases[1] = tone.phases[0];\n        let phaseDeltaA = tone.phaseDeltas[0] * samplesInPeriod;\n        let phaseDeltaB = tone.phaseDeltas[1] * samplesInPeriod;\n        const phaseDeltaScaleA = +tone.phaseDeltaScales[0];\n        const phaseDeltaScaleB = +tone.phaseDeltaScales[1];\n        let expression = +tone.expression;\n        const expressionDelta = +tone.expressionDelta;\n        let noiseSampleA = +tone.noiseSampleA;\n        let noiseSampleB = +tone.noiseSampleB;\n\n        const filters: DynamicBiquadFilter[] = tone.noteFiltersL;\n        const filterCount = tone.noteFilterCount | 0;\n        let initialFilterInput1 = +tone.initialNoteFilterInputL1;\n        let initialFilterInput2 = +tone.initialNoteFilterInputL2;\n        const applyFilters = Synth.applyFilters;\n\n        let phaseA = (tone.phases[0] % 1) * Config.spectrumNoiseLength;\n        let phaseB = (tone.phases[1] % 1) * Config.spectrumNoiseLength;\n        if (tone.phases[0] == 0.0) {\n            // Zero phase means the tone was reset, just give noise a random start phase instead.\n            phaseA = Synth.findRandomZeroCrossing(wave, Config.spectrumNoiseLength) + phaseDeltaA;\n            if (instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord!.customInterval) phaseB = phaseA;\n        }\n        if (tone.phases[1] == 0.0 && !(instrumentState.unisonVoices == 1 && instrumentState.unisonSpread == 0 && !instrumentState.chord!.customInterval)) {\n            // Zero phase means the tone was reset, just give noise a random start phase instead.\n            phaseB = Synth.findRandomZeroCrossing(wave, Config.spectrumNoiseLength) + phaseDeltaB;\n        }\n        const phaseMask = Config.spectrumNoiseLength - 1;\n\n        // This is for a \"legacy\" style simplified 1st order lowpass filter with\n        // a cutoff frequency that is relative to the tone's fundamental frequency.\n        const pitchRelativefilterA = Math.min(1.0, phaseDeltaA);\n        const pitchRelativefilterB = Math.min(1.0, phaseDeltaB);\n\n        const stopIndex = bufferIndex + runLength;\n        for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n            const phaseAInt = phaseA | 0;\n            const phaseBInt = phaseB | 0;\n            const indexA = phaseAInt & phaseMask;\n            const indexB = phaseBInt & phaseMask;\n            let waveSampleA = wave[indexA];\n            let waveSampleB = wave[indexB];\n            const phaseRatioA = phaseA - phaseAInt;\n            const phaseRatioB = phaseB - phaseBInt;\n            waveSampleA += (wave[indexA + 1] - waveSampleA) * phaseRatioA;\n            waveSampleB += (wave[indexB + 1] - waveSampleB) * phaseRatioB;\n\n            noiseSampleA += (waveSampleA - noiseSampleA) * pitchRelativefilterA;\n            noiseSampleB += (waveSampleB - noiseSampleB) * pitchRelativefilterB;\n\n\n            const inputSample = noiseSampleA + noiseSampleB * unisonSign;\n            const sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n            initialFilterInput2 = initialFilterInput1;\n            initialFilterInput1 = inputSample;\n\n            phaseA += phaseDeltaA;\n            phaseB += phaseDeltaB;\n            phaseDeltaA *= phaseDeltaScaleA;\n            phaseDeltaB *= phaseDeltaScaleB;\n\n            const output = sample * expression;\n            expression += expressionDelta;\n\n            data[sampleIndex] += output;\n        }\n\n        tone.phases[0] = phaseA / Config.spectrumNoiseLength;\n        tone.phases[1] = phaseB / Config.spectrumNoiseLength;\n        tone.phaseDeltas[0] = phaseDeltaA / samplesInPeriod;\n        tone.phaseDeltas[1] = phaseDeltaB / samplesInPeriod;\n        tone.expression = expression;\n        tone.noiseSampleA = noiseSampleA;\n        tone.noiseSampleB = noiseSampleB;\n\n        synth.sanitizeFilters(filters);\n        tone.initialNoteFilterInputL1 = initialFilterInput1;\n        tone.initialNoteFilterInputL2 = initialFilterInput2;\n    }\n\n    private static drumsetSynth(synth: Synth, bufferIndex: number, runLength: number, tone: Tone, instrumentState: InstrumentState): void {\n        const data: Float32Array = synth.tempInstrumentSampleBufferL!;\n        let wave: Float32Array = instrumentState.getDrumsetWave(tone.drumsetPitch!);\n        const referenceDelta = InstrumentState.drumsetIndexReferenceDelta(tone.drumsetPitch!);\n        let phaseDelta = tone.phaseDeltas[0] / referenceDelta;\n        const phaseDeltaScale = +tone.phaseDeltaScales[0];\n        let expression = +tone.expression;\n        const expressionDelta = +tone.expressionDelta;\n\n        const filters: DynamicBiquadFilter[] = tone.noteFiltersL;\n        const filterCount = tone.noteFilterCount | 0;\n        let initialFilterInput1 = +tone.initialNoteFilterInputL1;\n        let initialFilterInput2 = +tone.initialNoteFilterInputL2;\n        const applyFilters = Synth.applyFilters;\n\n        let phase = (tone.phases[0] % 1) * Config.spectrumNoiseLength;\n        // Zero phase means the tone was reset, just give noise a random start phase instead.\n        if (tone.phases[0] == 0.0) phase = Synth.findRandomZeroCrossing(wave, Config.spectrumNoiseLength) + phaseDelta;\n        const phaseMask = Config.spectrumNoiseLength - 1;\n\n        const stopIndex = bufferIndex + runLength;\n        for (let sampleIndex = bufferIndex; sampleIndex < stopIndex; sampleIndex++) {\n            const phaseInt = phase | 0;\n            const index = phaseInt & phaseMask;\n            let noiseSample = wave[index];\n            const phaseRatio = phase - phaseInt;\n            noiseSample += (wave[index + 1] - noiseSample) * phaseRatio;\n\n            const inputSample = noiseSample;\n            const sample = applyFilters(inputSample, initialFilterInput1, initialFilterInput2, filterCount, filters);\n            initialFilterInput2 = initialFilterInput1;\n            initialFilterInput1 = inputSample;\n\n            phase += phaseDelta;\n            phaseDelta *= phaseDeltaScale;\n\n            const output = sample * expression;\n            expression += expressionDelta;\n\n            data[sampleIndex] += output;\n        }\n\n        tone.phases[0] = phase / Config.spectrumNoiseLength;\n        tone.phaseDeltas[0] = phaseDelta * referenceDelta;\n        tone.expression = expression;\n\n        synth.sanitizeFilters(filters);\n        tone.initialNoteFilterInputL1 = initialFilterInput1;\n        tone.initialNoteFilterInputL2 = initialFilterInput2;\n    }\n\n    private static modSynth(synth: Synth, stereoBufferIndex: number, roundedSamplesPerTick: number, tone: Tone, instrument: Instrument): void {\n        // Note: present modulator value is tone.expressionStarts[0].\n\n        if (!synth.song) return;\n\n        let mod = Config.modCount - 1 - tone.pitches[0];\n\n        // Flagged as invalid because unused by current settings, skip\n        if (instrument.invalidModulators[mod]) return;\n\n        let setting = instrument.modulators[mod];\n\n        // Generate list of used instruments\n        let usedChannels: number[] = [];\n        let usedInstruments: number[] = [];\n        if (Config.modulators[instrument.modulators[mod]].forSong) {\n            // Instrument doesn't matter for song, just push a random index to run the modsynth once\n            usedInstruments.push(0);\n        } else {\n            // All\n            if (instrument.modInstruments[mod][0] == synth.song.channels[instrument.modChannels[mod][0]].instruments.length) {\n                for (let i = 0; i < synth.song.channels[instrument.modChannels[mod][0]].instruments.length; i++) {\n                    usedInstruments.push(i);\n                    usedChannels.push(0);\n                }\n            }\n            // Active\n            else if (instrument.modInstruments[mod][0] > synth.song.channels[instrument.modChannels[mod][0]].instruments.length) {\n                if (synth.song.getPattern(instrument.modChannels[mod][0], synth.bar) != null) {\n                    usedInstruments = synth.song.getPattern(instrument.modChannels[mod][0], synth.bar)!.instruments;\n                    usedChannels.push(0);\n                }\n            } else {\n                for (let i = 0; i < instrument.modChannels[mod].length; i++) {\n                    usedChannels.push(instrument.modChannels[mod][i]);\n                    usedInstruments.push(instrument.modInstruments[mod][i]);\n                }\n            }\n        }\n\n        for (let instrumentIndex = 0; instrumentIndex < usedInstruments.length; instrumentIndex++) {\n\n            synth.setModValue(tone.expression, tone.expression + tone.expressionDelta, instrument.modChannels[mod][instrumentIndex], usedInstruments[instrumentIndex], setting);\n\n            // If mods are being held (for smoother playback while recording mods), use those values instead.\n            for (let i = 0; i < synth.heldMods.length; i++) {\n                if (Config.modulators[instrument.modulators[mod]].forSong) {\n                    if (synth.heldMods[i].setting == setting)\n                        synth.setModValue(synth.heldMods[i].volume, synth.heldMods[i].volume, instrument.modChannels[mod][instrumentIndex], usedInstruments[instrumentIndex], setting);\n                } else if (synth.heldMods[i].channelIndex == instrument.modChannels[mod][instrumentIndex] && synth.heldMods[i].instrumentIndex == usedInstruments[instrumentIndex] && synth.heldMods[i].setting == setting) {\n                    synth.setModValue(synth.heldMods[i].volume, synth.heldMods[i].volume, instrument.modChannels[mod][instrumentIndex], usedInstruments[instrumentIndex], setting);\n                }\n            }\n\n            // Reset arps, but only at the start of the note\n            if (setting == Config.modulators.dictionary[\"reset arp\"].index && synth.tick == 0 && tone.noteStartPart == synth.beat * Config.partsPerBeat + synth.part) {\n                synth.channels[instrument.modChannels[mod][instrumentIndex]].instruments[usedInstruments[instrumentIndex]].arpTime = 0;\n            }\n            // Reset envelope, but only at the start of the note\n            else if (setting == Config.modulators.dictionary[\"reset envelope\"].index && synth.tick == 0 && tone.noteStartPart == synth.beat * Config.partsPerBeat + synth.part) {\n                let envelopeTarget = instrument.modEnvelopeNumbers[mod];\n                const tgtInstrumentState = synth.channels[instrument.modChannels[mod][instrumentIndex]].instruments[usedInstruments[instrumentIndex]];\n                const tgtInstrument = synth.song.channels[instrument.modChannels[mod][instrumentIndex]].instruments[usedInstruments[instrumentIndex]];\n\n                if (tgtInstrument.envelopeCount > envelopeTarget) {\n                    tgtInstrumentState.envelopeTime[envelopeTarget] = 0;\n                }\n            }\n            // Denote next bar skip\n            else if (setting == Config.modulators.dictionary[\"next bar\"].index) {\n                synth.wantToSkip = true;\n            }\n            // do song eq filter first\n            else if (setting == Config.modulators.dictionary[\"song eq\"].index) {\n                const tgtSong = synth.song\n\n                let dotTarget = instrument.modFilterTypes[mod] | 0;\n\n                if (dotTarget == 0) { // Morph. Figure out the target filter's X/Y coords for this point. If no point exists with this index, or point types don't match, do lerp-out for this point and lerp-in of a new point\n\n                    let pinIdx = 0;\n                    const currentPart = synth.getTicksIntoBar() / Config.ticksPerPart;\n                    while (tone.note!.start + tone.note!.pins[pinIdx].time <= currentPart) pinIdx++;\n                    // 0 to 1 based on distance to next morph\n                    //let lerpStartRatio = (currentPart - tone.note!.pins[pinIdx - 1].time) / (tone.note!.pins[pinIdx].time - tone.note!.pins[pinIdx - 1].time);\n                    let lerpEndRatio = ((currentPart - tone.note!.start + (roundedSamplesPerTick / (synth.getSamplesPerTick() * Config.ticksPerPart)) * Config.ticksPerPart) - tone.note!.pins[pinIdx - 1].time) / (tone.note!.pins[pinIdx].time - tone.note!.pins[pinIdx - 1].time);\n\n                    // Compute the new settings to go to.\n                    if (tgtSong.eqSubFilters[tone.note!.pins[pinIdx - 1].size] != null || tgtSong.eqSubFilters[tone.note!.pins[pinIdx].size] != null) {\n                        tgtSong.tmpEqFilterEnd = FilterSettings.lerpFilters(tgtSong.eqSubFilters[tone.note!.pins[pinIdx - 1].size]!, tgtSong.eqSubFilters[tone.note!.pins[pinIdx].size]!, lerpEndRatio);\n                    } else {\n                        // No mutation will occur to the filter object so we can safely return it without copying\n                        tgtSong.tmpEqFilterEnd = tgtSong.eqFilter;\n                    }\n\n                } // Target (1 is dot 1 X, 2 is dot 1 Y, etc.)\n                else {\n                    // Since we are directly manipulating the filter, make sure it is a new one and not an actual one of the instrument's filters\n                    for (let i = 0; i < Config.filterMorphCount; i++) {\n                        if (tgtSong.tmpEqFilterEnd == tgtSong.eqSubFilters[i] && tgtSong.tmpEqFilterEnd != null) {\n                            tgtSong.tmpEqFilterEnd = new FilterSettings();\n                            tgtSong.tmpEqFilterEnd.fromJsonObject(tgtSong.eqSubFilters[i]!.toJsonObject());\n                        }\n                    }\n                    if (tgtSong.tmpEqFilterEnd == null) {\n                        tgtSong.tmpEqFilterEnd = new FilterSettings();\n                        tgtSong.tmpEqFilterEnd.fromJsonObject(tgtSong.eqFilter.toJsonObject());\n                    }\n\n                    if (tgtSong.tmpEqFilterEnd.controlPointCount > Math.floor((dotTarget - 1) / 2)) {\n                        if (dotTarget % 2) { // X\n                            tgtSong.tmpEqFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].freq = tone.expression + tone.expressionDelta;\n                        } else { // Y\n                            tgtSong.tmpEqFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].gain = tone.expression + tone.expressionDelta;\n                        }\n                    }\n                }\n            }\n            // Extra info for eq filter target needs to be set as well\n            else if (setting == Config.modulators.dictionary[\"post eq\"].index) {\n                const tgtInstrument = synth.song.channels[instrument.modChannels[mod][instrumentIndex]].instruments[usedInstruments[instrumentIndex]];\n                for (let effectIndex = 0; effectIndex < tgtInstrument.effects.length; effectIndex++) {\n                    const tgtEffect = tgtInstrument.effects[effectIndex] as Effect;\n\n                    if (!tgtEffect.eqFilterType) {\n\n                        let dotTarget = instrument.modFilterTypes[mod] | 0;\n\n                        if (dotTarget == 0) { // Morph. Figure out the target filter's X/Y coords for this point. If no point exists with this index, or point types don't match, do lerp-out for this point and lerp-in of a new point\n\n                            let pinIdx = 0;\n                            const currentPart = synth.getTicksIntoBar() / Config.ticksPerPart;\n                            while (tone.note!.start + tone.note!.pins[pinIdx].time <= currentPart) pinIdx++;\n                            // 0 to 1 based on distance to next morph\n                            //let lerpStartRatio = (currentPart - tone.note!.pins[pinIdx - 1].time) / (tone.note!.pins[pinIdx].time - tone.note!.pins[pinIdx - 1].time);\n                            let lerpEndRatio = ((currentPart - tone.note!.start + (roundedSamplesPerTick / (synth.getSamplesPerTick() * Config.ticksPerPart)) * Config.ticksPerPart) - tone.note!.pins[pinIdx - 1].time) / (tone.note!.pins[pinIdx].time - tone.note!.pins[pinIdx - 1].time);\n\n                            // Compute the new settings to go to.\n                            if (tgtEffect.eqSubFilters[tone.note!.pins[pinIdx - 1].size] != null || tgtEffect.eqSubFilters[tone.note!.pins[pinIdx].size] != null) {\n                                tgtEffect.tmpEqFilterEnd = FilterSettings.lerpFilters(tgtEffect.eqSubFilters[tone.note!.pins[pinIdx - 1].size]!, tgtEffect.eqSubFilters[tone.note!.pins[pinIdx].size]!, lerpEndRatio);\n                            } else {\n                                // No mutation will occur to the filter object so we can safely return it without copying\n                                tgtEffect.tmpEqFilterEnd = tgtEffect.eqFilter;\n                            }\n\n                        } // Target (1 is dot 1 X, 2 is dot 1 Y, etc.)\n                        else {\n                            // Since we are directly manipulating the filter, make sure it is a new one and not an actual one of the instrument's filters\n                            for (let i = 0; i < Config.filterMorphCount; i++) {\n                                if (tgtEffect.tmpEqFilterEnd == tgtEffect.eqSubFilters[i] && tgtEffect.tmpEqFilterEnd != null) {\n                                    tgtEffect.tmpEqFilterEnd = new FilterSettings();\n                                    tgtEffect.tmpEqFilterEnd.fromJsonObject(tgtEffect.eqSubFilters[i]!.toJsonObject());\n                                }\n                            }\n                            if (tgtEffect.tmpEqFilterEnd == null) {\n                                tgtEffect.tmpEqFilterEnd = new FilterSettings();\n                                tgtEffect.tmpEqFilterEnd.fromJsonObject(tgtEffect.eqFilter.toJsonObject());\n                            }\n\n                            if (tgtEffect.tmpEqFilterEnd.controlPointCount > Math.floor((dotTarget - 1) / 2)) {\n                                if (dotTarget % 2) { // X\n                                    tgtEffect.tmpEqFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].freq = tone.expression + tone.expressionDelta;\n                                } else { // Y\n                                    tgtEffect.tmpEqFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].gain = tone.expression + tone.expressionDelta;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            // Extra info for note filter target needs to be set as well\n            else if (setting == Config.modulators.dictionary[\"pre eq\"].index) {\n                const tgtInstrument = synth.song.channels[instrument.modChannels[mod][instrumentIndex]].instruments[usedInstruments[instrumentIndex]];\n\n                if (!tgtInstrument.noteFilterType) {\n                    let dotTarget = instrument.modFilterTypes[mod] | 0;\n\n                    if (dotTarget == 0) { // Morph. Figure out the target filter's X/Y coords for this point. If no point exists with this index, or point types don't match, do lerp-out for this point and lerp-in of a new point\n\n                        let pinIdx = 0;\n                        const currentPart = synth.getTicksIntoBar() / Config.ticksPerPart;\n                        while (tone.note!.start + tone.note!.pins[pinIdx].time <= currentPart) pinIdx++;\n                        // 0 to 1 based on distance to next morph\n                        //let lerpStartRatio = (currentPart - tone.note!.pins[pinIdx - 1].time) / (tone.note!.pins[pinIdx].time - tone.note!.pins[pinIdx - 1].time);\n                        let lerpEndRatio = ((currentPart - tone.note!.start + (roundedSamplesPerTick / (synth.getSamplesPerTick() * Config.ticksPerPart)) * Config.ticksPerPart) - tone.note!.pins[pinIdx - 1].time) / (tone.note!.pins[pinIdx].time - tone.note!.pins[pinIdx - 1].time);\n\n                        // Compute the new settings to go to.\n                        if (tgtInstrument.noteSubFilters[tone.note!.pins[pinIdx - 1].size] != null || tgtInstrument.noteSubFilters[tone.note!.pins[pinIdx].size] != null) {\n                            tgtInstrument.tmpNoteFilterEnd = FilterSettings.lerpFilters(tgtInstrument.noteSubFilters[tone.note!.pins[pinIdx - 1].size]!, tgtInstrument.noteSubFilters[tone.note!.pins[pinIdx].size]!, lerpEndRatio);\n                        } else {\n                            // No mutation will occur to the filter object so we can safely return it without copying\n                            tgtInstrument.tmpNoteFilterEnd = tgtInstrument.noteFilter;\n                        }\n\n                    } // Target (1 is dot 1 X, 2 is dot 1 Y, etc.)\n                    else {\n                        // Since we are directly manipulating the filter, make sure it is a new one and not an actual one of the instrument's filters\n\n                        for (let i = 0; i < Config.filterMorphCount; i++) {\n                            if (tgtInstrument.tmpNoteFilterEnd == tgtInstrument.noteSubFilters[i] && tgtInstrument.tmpNoteFilterEnd != null) {\n                                tgtInstrument.tmpNoteFilterEnd = new FilterSettings();\n                                tgtInstrument.tmpNoteFilterEnd.fromJsonObject(tgtInstrument.noteSubFilters[i]!.toJsonObject());\n                            }\n                        }\n                        if (tgtInstrument.tmpNoteFilterEnd == null) {\n                            tgtInstrument.tmpNoteFilterEnd = new FilterSettings();\n                            tgtInstrument.tmpNoteFilterEnd.fromJsonObject(tgtInstrument.noteFilter.toJsonObject());\n                        }\n\n                        if (tgtInstrument.tmpNoteFilterEnd.controlPointCount > Math.floor((dotTarget - 1) / 2)) {\n                            if (dotTarget % 2) { // X\n                                tgtInstrument.tmpNoteFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].freq = tone.expression + tone.expressionDelta;\n                            } else { // Y\n                                tgtInstrument.tmpNoteFilterEnd.controlPoints[Math.floor((dotTarget - 1) / 2)].gain = tone.expression + tone.expressionDelta;\n                            }\n                        }\n                    }\n                }\n            } else if (setting == Config.modulators.dictionary[\"individual envelope speed\"].index) {\n                const tgtInstrument = synth.song.channels[instrument.modChannels[mod][instrumentIndex]].instruments[usedInstruments[instrumentIndex]];\n                let envelopeTarget = instrument.modEnvelopeNumbers[mod];\n\n                let speed = tone.expression + tone.expressionDelta;\n                if (tgtInstrument.envelopeCount > envelopeTarget) {\n                    if (Number.isInteger(speed)) {\n                        tgtInstrument.envelopes[envelopeTarget].tempEnvelopeSpeed = Config.perEnvelopeSpeedIndices[speed];\n                    } else {\n                        //linear interpolation\n                        speed = (1 - (speed % 1)) * Config.perEnvelopeSpeedIndices[Math.floor(speed)] + (speed % 1) * Config.perEnvelopeSpeedIndices[Math.ceil(speed)];\n                        tgtInstrument.envelopes[envelopeTarget].tempEnvelopeSpeed = speed;\n                    }\n                }\n            } else if (setting == Config.modulators.dictionary[\"individual envelope lower bound\"].index) {\n                const tgtInstrument = synth.song.channels[instrument.modChannels[mod][instrumentIndex]].instruments[usedInstruments[instrumentIndex]];\n                let envelopeTarget = instrument.modEnvelopeNumbers[mod];\n\n                let bound = tone.expression + tone.expressionDelta;\n                if (tgtInstrument.envelopeCount > envelopeTarget) {\n                    tgtInstrument.envelopes[envelopeTarget].tempEnvelopeLowerBound = bound / 10;\n                }\n            } else if (setting == Config.modulators.dictionary[\"individual envelope upper bound\"].index) {\n                const tgtInstrument = synth.song.channels[instrument.modChannels[mod][instrumentIndex]].instruments[usedInstruments[instrumentIndex]];\n                let envelopeTarget = instrument.modEnvelopeNumbers[mod];\n\n                let bound = tone.expression + tone.expressionDelta;\n                if (tgtInstrument.envelopeCount > envelopeTarget) {\n                    tgtInstrument.envelopes[envelopeTarget].tempEnvelopeUpperBound = bound / 10;\n                }\n                console.log(tgtInstrument.envelopes[envelopeTarget]);\n            }\n        }\n    }\n\n    static findRandomZeroCrossing(wave: Float32Array, waveLength: number): number { //literally only public to let typescript compile\n        let phase = Math.random() * waveLength;\n        const phaseMask = waveLength - 1;\n\n        // Spectrum and drumset waves sounds best when they start at a zero crossing,\n        // otherwise they pop. Try to find a zero crossing.\n        let indexPrev = phase & phaseMask;\n        let wavePrev = wave[indexPrev];\n        const stride = 16;\n        for (let attemptsRemaining = 128; attemptsRemaining > 0; attemptsRemaining--) {\n            const indexNext = (indexPrev + stride) & phaseMask;\n            const waveNext = wave[indexNext];\n            if (wavePrev * waveNext <= 0.0) {\n                // Found a zero crossing! Now let's narrow it down to two adjacent sample indices.\n                for (let i = 0; i < stride; i++) {\n                    const innerIndexNext = (indexPrev + 1) & phaseMask;\n                    const innerWaveNext = wave[innerIndexNext];\n                    if (wavePrev * innerWaveNext <= 0.0) {\n                        // Found the zero crossing again! Now let's find the exact intersection.\n                        const slope = innerWaveNext - wavePrev;\n                        phase = indexPrev;\n                        if (Math.abs(slope) > 0.00000001) {\n                            phase += -wavePrev / slope;\n                        }\n                        phase = Math.max(0, phase) % waveLength;\n                        break;\n                    } else {\n                        indexPrev = innerIndexNext;\n                        wavePrev = innerWaveNext;\n                    }\n                }\n                break;\n            } else {\n                indexPrev = indexNext;\n                wavePrev = waveNext;\n            }\n        }\n\n        return phase;\n    }\n\n    static instrumentVolumeToVolumeMult(instrumentVolume: number): number {\n        return (instrumentVolume == -Config.volumeRange / 2.0) ? 0.0 : Math.pow(2, Config.volumeLogScale * instrumentVolume);\n    }\n    static volumeMultToInstrumentVolume(volumeMult: number): number {\n        return (volumeMult <= 0.0) ? -Config.volumeRange / 2 : Math.min(Config.volumeRange, (Math.log(volumeMult) / Math.LN2) / Config.volumeLogScale);\n    }\n    static noteSizeToVolumeMult(size: number): number {\n        return Math.pow(Math.max(0.0, size) / Config.noteSizeMax, 1.5);\n    }\n    static volumeMultToNoteSize(volumeMult: number): number {\n        return Math.pow(Math.max(0.0, volumeMult), 1 / 1.5) * Config.noteSizeMax;\n    }\n\n    static getOperatorWave(waveform: number, pulseWidth: number) {\n        if (waveform != 2) {\n            return Config.operatorWaves[waveform];\n        }\n        else {\n            return Config.pwmOperatorWaves[pulseWidth];\n        }\n    }\n\n    getSamplesPerTick(): number {\n        if (this.song == null) return 0;\n        let beatsPerMinute = this.song.getBeatsPerMinute();\n        if (this.isModActive(Config.modulators.dictionary[\"tempo\"].index)) {\n            beatsPerMinute = this.getModValue(Config.modulators.dictionary[\"tempo\"].index);\n        }\n        return this.getSamplesPerTickSpecificBPM(beatsPerMinute);\n    }\n\n    private getSamplesPerTickSpecificBPM(beatsPerMinute: number): number {\n        const beatsPerSecond = beatsPerMinute / 60.0;\n        const partsPerSecond = Config.partsPerBeat * beatsPerSecond;\n        const tickPerSecond = Config.ticksPerPart * partsPerSecond;\n        return this.samplesPerSecond / tickPerSecond;\n    }\n\n    private sanitizeFilters(filters: DynamicBiquadFilter[]): void {\n        let reset = false;\n        for (const filter of filters) {\n            const output1 = Math.abs(filter.output1);\n            const output2 = Math.abs(filter.output2);\n            // If either is a large value, Infinity, or NaN, then just reset all filter history.\n            if (!(output1 < 100) || !(output2 < 100)) {\n                reset = true;\n                break;\n            }\n            if (output1 < epsilon) filter.output1 = 0.0;\n            if (output2 < epsilon) filter.output2 = 0.0;\n        }\n        if (reset) {\n            for (const filter of filters) {\n                filter.output1 = 0.0;\n                filter.output2 = 0.0;\n            }\n        }\n    }\n\n    static sanitizeDelayLine(delayLine: Float32Array, lastIndex: number, mask: number): void {\n        while (true) {\n            lastIndex--;\n            const index = lastIndex & mask;\n            const sample = Math.abs(delayLine[index]);\n            if (Number.isFinite(sample) && (sample == 0.0 || sample >= epsilon)) break;\n            delayLine[index] = 0.0;\n        }\n    }\n\n    static applyFilters(sample: number, input1: number, input2: number, filterCount: number, filters: DynamicBiquadFilter[]): number {\n        for (let i = 0; i < filterCount; i++) {\n            const filter = filters[i];\n            const output1 = filter.output1;\n            const output2 = filter.output2;\n            const a1 = filter.a1;\n            const a2 = filter.a2;\n            const b0 = filter.b0;\n            const b1 = filter.b1;\n            const b2 = filter.b2;\n            sample = b0 * sample + b1 * input1 + b2 * input2 - a1 * output1 - a2 * output2;\n            filter.a1 = a1 + filter.a1Delta;\n            filter.a2 = a2 + filter.a2Delta;\n            if (filter.useMultiplicativeInputCoefficients) {\n                filter.b0 = b0 * filter.b0Delta;\n                filter.b1 = b1 * filter.b1Delta;\n                filter.b2 = b2 * filter.b2Delta;\n            } else {\n                filter.b0 = b0 + filter.b0Delta;\n                filter.b1 = b1 + filter.b1Delta;\n                filter.b2 = b2 + filter.b2Delta;\n            }\n            filter.output2 = output1;\n            filter.output1 = sample;\n            // Updating the input values is waste if the next filter doesn't exist...\n            input2 = output2;\n            input1 = output1;\n        }\n        return sample;\n    }\n\n    computeTicksSinceStart(ofBar = false) {\n        const beatsPerBar = this.song?.beatsPerBar ? this.song?.beatsPerBar : 8;\n        if (ofBar) {\n            return Config.ticksPerPart * Config.partsPerBeat * beatsPerBar * this.bar;\n        } else {\n            return this.tick + Config.ticksPerPart * (this.part + Config.partsPerBeat * (this.beat + beatsPerBar * this.bar));\n        }\n    }\n}\n\n// When compiling synth.ts as a standalone module named \"beepbox\", expose these classes as members to JavaScript:\nexport { Chord, Config, Dictionary, DictionaryArray, Envelope, EnvelopeType, FilterType, InstrumentType, Transition };\n\n"],
  "mappings": "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AA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;ACAA;;;ACAA;;;ACAA;;;ACAA;;;ACAA;;;ACAA;;;ACAA;;;ACAA;;;ACAA;;;ACAA;;;ACAA;;;ACAA;;;ACAA;;;ACAA;;;ACAA;;;ACAA;;;ACAA;;;ACAA;;;ACAA;;;ACAA;;;ACAA;;;ACAA;;;ACAA;;;ACAA;;;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,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,EAAE,GAAG,EAAE,kBAAkB,WAAW,YAAY,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,EAAE,GAAG,EAAE,kBAAkB,WAAW,YAAY,CAAC,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,EAAE,GAAG,EAAE,kBAAkB,WAAW,YAAY,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,EAAE,GAAG,EAAE,kBAAkB,WAAW,YAAY,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,EAAE,GAAG,EAAE,kBAAkB,WAAW,YAAY,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,EAAE,GAAG,EAAE,kBAAkB,WAAW,YAAY,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,EAAE,GAAG,EAAE,kBAAkB,WAAW,YAAY,CAAC,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,IAAI,IAAI,IAAI,CAAC,EAAE,GAAG,EAAE,kBAAkB,WAAW,YAAY,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,IAAI,GAAG,GAAG,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;AAAA,UACxkE,EAAE,MAAM,aAAa,aAAa,KAAK,aAAa,MAAM,UAAU,EAAE,QAAQ,MAAM,YAAY,CAAC,EAAE,QAAQ,aAAa,YAAY,MAAM,cAAc,OAAO,CAAC,GAAG,WAAW,CAAC,eAAe,UAAU,QAAQ,GAAG,cAAc,CAAC,EAAE,QAAQ,YAAY,YAAY,UAAU,cAAc,KAAK,CAAC,GAAG,UAAU,IAAI,UAAU,IAAI,cAAc,UAAU,iBAAiB,GAAG,gBAAgB,IAAI,SAAS,gBAAgB,aAAa,4BAAa,gBAAgB,WAAM,qBAAqB,GAAG,aAAa,CAAC,EAAE,aAAa,UAAO,aAAa,GAAG,GAAG,EAAE,aAAa,SAAM,aAAa,EAAE,GAAG,EAAE,aAAa,SAAM,aAAa,EAAE,GAAG,EAAE,aAAa,SAAM,aAAa,EAAE,CAAC,GAAG,aAAa,CAAC,EAAE,UAAU,sBAAsB,YAAY,UAAU,GAAG,EAAE,UAAU,qBAAqB,YAAY,WAAW,SAAS,EAAE,GAAG,EAAE,UAAU,qBAAqB,YAAY,WAAW,SAAS,EAAE,GAAG,EAAE,UAAU,qBAAqB,YAAY,WAAW,SAAS,EAAE,CAAC,EAAE,EAAE;AAAA,UAC56B,EAAE,MAAM,mBAAmB,aAAa,KAAK,UAAU,EAAE,QAAQ,MAAM,YAAY,CAAC,GAAG,WAAW,CAAC,aAAa,GAAG,cAAc,CAAC,EAAE,QAAQ,YAAY,YAAY,UAAU,cAAc,KAAK,CAAC,GAAG,cAAc,UAAU,iBAAiB,GAAG,gBAAgB,IAAI,SAAS,gBAAgB,aAAa,0BAAW,gBAAgB,WAAM,qBAAqB,GAAG,aAAa,CAAC,EAAE,aAAa,UAAO,aAAa,GAAG,GAAG,EAAE,aAAa,SAAM,aAAa,GAAG,GAAG,EAAE,aAAa,SAAM,aAAa,GAAG,GAAG,EAAE,aAAa,UAAO,aAAa,EAAE,CAAC,GAAG,aAAa,CAAC,EAAE,UAAU,sBAAsB,YAAY,UAAU,GAAG,EAAE,UAAU,qBAAqB,YAAY,aAAa,SAAS,EAAE,GAAG,EAAE,UAAU,qBAAqB,YAAY,aAAa,SAAS,EAAE,GAAG,EAAE,UAAU,qBAAqB,YAAY,WAAW,SAAS,EAAE,GAAG,EAAE,UAAU,qBAAqB,YAAY,WAAW,SAAS,EAAE,GAAG,EAAE,UAAU,qBAAqB,YAAY,UAAU,CAAC,EAAE,EAAE;AAAA,UACr7B,EAAE,MAAM,WAAW,aAAa,IAAI,aAAa,MAAM,UAAU,EAAE,QAAQ,YAAY,YAAY,CAAC,EAAE,QAAQ,QAAQ,YAAY,SAAS,cAAc,OAAO,CAAC,GAAG,WAAW,CAAC,eAAe,eAAe,QAAQ,GAAG,uBAAuB,IAAI,cAAc,CAAC,EAAE,QAAQ,YAAY,YAAY,UAAU,cAAc,IAAI,CAAC,GAAG,UAAU,IAAI,cAAc,UAAU,iBAAiB,GAAG,gBAAgB,IAAI,SAAS,gBAAgB,YAAY,CAAC,KAAK,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,GAAG,aAAa,CAAC,EAAE,UAAU,sBAAsB,YAAY,UAAU,GAAG,EAAE,UAAU,cAAc,YAAY,UAAU,CAAC,EAAE,EAAE;AAAA,UAC1qB,EAAE,MAAM,eAAe,aAAa,IAAI,UAAU,EAAE,QAAQ,YAAY,YAAY,CAAC,GAAG,WAAW,CAAC,eAAe,QAAQ,GAAG,cAAc,CAAC,EAAE,QAAQ,YAAY,YAAY,SAAS,cAAc,OAAO,CAAC,GAAG,UAAU,IAAI,cAAc,UAAU,iBAAiB,GAAG,gBAAgB,IAAI,SAAS,gBAAgB,YAAY,CAAC,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,aAAa,CAAC,EAAE,UAAU,sBAAsB,YAAY,UAAU,CAAC,EAAE,EAAE;AAAA,UACjgB,EAAE,MAAM,aAAa,aAAa,KAAK,aAAa,MAAM,SAAS,MAAM,wBAAwB,MAAM,UAAU,EAAE,QAAQ,YAAY,WAAW,UAAU,cAAc,aAAa,SAAS,SAAS,kBAAkB,MAAM,mBAAmB,IAAI,kBAAkB,WAAW,YAAY,CAAC,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,EAAE,EAAE;AAAA,UAC3Z,EAAE,MAAM,cAAc,aAAa,KAAK,aAAa,MAAM,SAAS,MAAM,wBAAwB,MAAM,UAAU,EAAE,QAAQ,YAAY,WAAW,UAAU,cAAc,aAAa,SAAS,SAAS,kBAAkB,MAAM,mBAAmB,IAAI,kBAAkB,WAAW,YAAY,CAAC,IAAI,KAAK,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,EAAE,EAAE;AAAA,UAC/Z,EAAE,MAAM,gBAAgB,aAAa,KAAK,aAAa,MAAM,SAAS,MAAM,wBAAwB,MAAM,UAAU,EAAE,QAAQ,YAAY,WAAW,UAAU,cAAc,aAAa,SAAS,SAAS,kBAAkB,MAAM,mBAAmB,IAAI,kBAAkB,WAAW,YAAY,CAAC,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,EAAE,EAAE;AAAA,UACha,EAAE,MAAM,cAAc,aAAa,KAAK,aAAa,MAAM,SAAS,MAAM,wBAAwB,IAAI,UAAU,EAAE,QAAQ,YAAY,WAAW,UAAU,cAAc,aAAa,SAAS,WAAW,kBAAkB,KAAM,mBAAmB,IAAI,kBAAkB,WAAW,YAAY,CAAC,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,EAAE,EAAE;AAAA,UAC9Z,EAAE,MAAM,WAAW,aAAa,KAAK,SAAS,MAAM,wBAAwB,IAAI,UAAU,EAAE,QAAQ,YAAY,WAAW,UAAU,cAAc,aAAa,SAAS,SAAS,kBAAkB,KAAM,mBAAmB,IAAI,kBAAkB,WAAW,YAAY,CAAC,KAAK,IAAI,IAAI,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,EAAE,EAAE;AAAA,UACpY,EAAE,MAAM,cAAc,aAAa,KAAK,SAAS,MAAM,wBAAwB,MAAM,UAAU,EAAE,QAAQ,YAAY,WAAW,UAAU,cAAc,aAAa,SAAS,SAAS,kBAAkB,KAAM,mBAAmB,IAAI,kBAAkB,WAAW,YAAY,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,IAAI,IAAI,IAAI,GAAG,GAAG,IAAI,IAAI,GAAG,CAAC,EAAE,EAAE;AAAA,UACnY,EAAE,MAAM,cAAc,aAAa,IAAI,UAAU,EAAE,QAAQ,MAAM,YAAY,CAAC,GAAG,WAAW,CAAC,GAAG,cAAc,UAAU,iBAAiB,GAAG,gBAAgB,IAAI,SAAS,gBAAgB,aAAa,4BAAa,gBAAgB,WAAM,qBAAqB,GAAG,aAAa,CAAC,EAAE,aAAa,SAAM,aAAa,GAAG,GAAG,EAAE,aAAa,SAAM,aAAa,EAAE,GAAG,EAAE,aAAa,SAAM,aAAa,EAAE,GAAG,EAAE,aAAa,SAAM,aAAa,EAAE,CAAC,GAAG,aAAa,CAAC,EAAE,UAAU,qBAAqB,YAAY,WAAW,SAAS,EAAE,GAAG,EAAE,UAAU,cAAc,YAAY,UAAU,CAAC,EAAE,EAAE;AAAA,QAC1jB,CAAC;AAAA,MACL;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QAAmB,SAAkC,UAAU;AAAA,UACjE,EAAE,MAAM,qBAAqB,aAAa,KAAK,aAAa,MAAM,UAAU,EAAE,QAAQ,YAAY,YAAY,CAAC,EAAE,QAAQ,aAAa,YAAY,KAAM,cAAc,OAAO,CAAC,GAAG,WAAW,CAAC,aAAa,GAAG,cAAc,CAAC,EAAE,QAAQ,YAAY,YAAY,SAAS,cAAc,OAAO,CAAC,GAAG,cAAc,UAAU,iBAAiB,QAAQ,gBAAgB,IAAI,SAAS,gBAAgB,YAAY,CAAC,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,GAAG,IAAI,IAAI,GAAG,GAAG,IAAI,GAAG,IAAI,GAAG,IAAI,IAAI,GAAG,IAAI,CAAC,GAAG,aAAa,CAAC,EAAE,UAAU,sBAAsB,YAAY,UAAU,GAAG,EAAE,UAAU,cAAc,YAAY,UAAU,CAAC,EAAE,EAAE;AAAA,UAC5mB,EAAE,MAAM,kBAAkB,aAAa,IAAI,aAAa,MAAM,wBAAwB,GAAG,UAAU,EAAE,QAAQ,QAAQ,YAAY,CAAC,GAAG,WAAW,CAAC,eAAe,QAAQ,GAAG,cAAc,CAAC,EAAE,QAAQ,YAAY,YAAY,SAAS,cAAc,OAAO,CAAC,GAAG,UAAU,IAAI,cAAc,UAAU,iBAAiB,GAAG,gBAAgB,IAAI,SAAS,gBAAgB,QAAQ,YAAY,UAAU,SAAS,aAAa,CAAC,EAAE,UAAU,sBAAsB,YAAY,UAAU,CAAC,EAAE,EAAE;AAAA,UACvd,EAAE,MAAM,eAAe,aAAa,IAAI,wBAAwB,GAAG,UAAU,EAAE,QAAQ,QAAQ,YAAY,CAAC,GAAG,WAAW,CAAC,eAAe,QAAQ,GAAG,cAAc,CAAC,EAAE,QAAQ,YAAY,YAAY,KAAM,cAAc,EAAE,CAAC,GAAG,UAAU,KAAK,cAAc,UAAU,iBAAiB,QAAQ,gBAAgB,IAAI,SAAS,gBAAgB,QAAQ,YAAY,UAAU,SAAS,aAAa,CAAC,EAAE,UAAU,sBAAsB,YAAY,UAAU,CAAC,EAAE,EAAE;AAAA,UAC/b,EAAE,MAAM,cAAc,aAAa,IAAI,aAAa,MAAM,UAAU,EAAE,QAAQ,QAAQ,YAAY,CAAC,GAAG,WAAW,CAAC,eAAe,QAAQ,GAAG,cAAc,CAAC,EAAE,QAAQ,YAAY,YAAY,SAAS,cAAc,IAAI,CAAC,GAAG,UAAU,IAAI,cAAc,UAAU,iBAAiB,QAAQ,gBAAgB,IAAI,SAAS,gBAAgB,QAAQ,YAAY,UAAU,SAAS,aAAa,CAAC,EAAE,UAAU,sBAAsB,YAAY,UAAU,CAAC,EAAE,EAAE;AAAA,UAC1b,EAAE,MAAM,kBAAkB,aAAa,KAAK,aAAa,MAAM,SAAS,MAAM,wBAAwB,IAAI,UAAU,EAAE,QAAQ,YAAY,WAAW,QAAQ,cAAc,QAAQ,SAAS,WAAW,kBAAkB,KAAM,mBAAmB,IAAI,kBAAkB,WAAW,YAAY,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,EAAE,EAAE,EAAE;AAAA,UAC3Z,EAAE,MAAM,YAAY,aAAa,KAAK,aAAa,MAAM,SAAS,MAAM,wBAAwB,IAAI,UAAU,EAAE,QAAQ,YAAY,cAAc,aAAa,WAAW,UAAU,SAAS,WAAW,kBAAkB,MAAM,mBAAmB,GAAG,kBAAkB,WAAW,YAAY,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,EAAE,EAAE;AAAA,UAC1Z,EAAE,MAAM,cAAc,aAAa,KAAK,aAAa,MAAM,UAAU,EAAE,QAAQ,aAAa,YAAY,CAAC,GAAG,WAAW,CAAC,cAAc,WAAW,QAAQ,GAAG,SAAS,SAAS,WAAW,SAAS,UAAU,IAAI,iBAAiB,QAAQ,gBAAgB,IAAI,aAAa,CAAC,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,UAAU,OAAO,aAAa,CAAC,EAAE,UAAU,cAAc,YAAY,UAAU,CAAC,EAAE,EAAE;AAAA,UACtb,EAAE,MAAM,kBAAkB,aAAa,KAAK,aAAa,MAAM,UAAU,EAAE,QAAQ,MAAM,YAAY,CAAC,GAAG,WAAW,CAAC,aAAa,GAAG,cAAc,CAAC,EAAE,QAAQ,YAAY,YAAY,SAAS,cAAc,EAAE,CAAC,GAAG,cAAc,UAAU,iBAAiB,QAAQ,gBAAgB,IAAI,SAAS,YAAY,aAAa,4BAAa,gBAAgB,WAAM,qBAAqB,GAAG,aAAa,CAAC,EAAE,aAAa,SAAM,aAAa,GAAG,GAAG,EAAE,aAAa,SAAM,aAAa,EAAE,GAAG,EAAE,aAAa,UAAO,aAAa,EAAE,GAAG,EAAE,aAAa,SAAM,aAAa,EAAE,CAAC,GAAG,aAAa,CAAC,EAAE,UAAU,sBAAsB,YAAY,WAAW,GAAG,EAAE,UAAU,qBAAqB,YAAY,YAAY,SAAS,EAAE,CAAC,EAAE,EAAE;AAAA,UACrrB,EAAE,MAAM,cAAc,aAAa,KAAK,aAAa,MAAM,SAAS,MAAM,wBAAwB,MAAM,UAAU,EAAE,QAAQ,YAAY,WAAW,UAAU,cAAc,YAAY,SAAS,YAAY,kBAAkB,MAAM,mBAAmB,IAAI,kBAAkB,YAAY,YAAY,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,EAAE,EAAE;AAAA,UACha,EAAE,MAAM,YAAY,aAAa,KAAK,aAAa,MAAM,SAAS,MAAM,wBAAwB,IAAI,UAAU,EAAE,QAAQ,YAAY,WAAW,UAAU,cAAc,aAAa,SAAS,WAAW,kBAAkB,KAAM,mBAAmB,IAAI,kBAAkB,WAAW,YAAY,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,EAAE,EAAE;AAAA,UAC3Z,EAAE,MAAM,WAAW,aAAa,KAAK,aAAa,MAAM,SAAS,MAAM,wBAAwB,IAAI,UAAU,EAAE,QAAQ,YAAY,WAAW,UAAU,cAAc,aAAa,SAAS,SAAS,kBAAkB,MAAM,mBAAmB,IAAI,kBAAkB,WAAW,YAAY,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,EAAE,EAAE;AAAA,UACxZ,EAAE,MAAM,SAAS,aAAa,IAAI,UAAU,EAAE,QAAQ,QAAQ,YAAY,CAAC,GAAG,WAAW,CAAC,aAAa,GAAG,cAAc,CAAC,EAAE,QAAQ,YAAY,YAAY,QAAQ,cAAc,EAAE,CAAC,GAAG,cAAc,UAAU,iBAAiB,QAAQ,gBAAgB,IAAI,SAAS,gBAAgB,QAAQ,cAAc,UAAU,WAAW,aAAa,CAAC,EAAE,UAAU,sBAAsB,YAAY,UAAU,CAAC,EAAE,EAAE;AAAA,UAC3Y,EAAE,MAAM,YAAY,aAAa,IAAI,UAAU,EAAE,QAAQ,MAAM,YAAY,CAAC,EAAE,QAAQ,YAAY,YAAY,SAAS,cAAc,IAAI,CAAC,GAAG,WAAW,CAAC,GAAG,cAAc,UAAU,iBAAiB,QAAQ,gBAAgB,IAAI,SAAS,mBAAmB,aAAa,0BAAW,gBAAgB,WAAM,qBAAqB,GAAG,aAAa,CAAC,EAAE,aAAa,SAAM,aAAa,GAAG,GAAG,EAAE,aAAa,SAAM,aAAa,GAAG,GAAG,EAAE,aAAa,UAAO,aAAa,EAAE,GAAG,EAAE,aAAa,UAAO,aAAa,GAAG,CAAC,GAAG,aAAa,CAAC,EAAE,EAAE;AAAA,UACrgB,EAAE,MAAM,YAAY,aAAa,IAAI,UAAU,EAAE,QAAQ,OAAO,YAAY,CAAC,EAAE,QAAQ,YAAY,YAAY,SAAS,cAAc,EAAE,CAAC,GAAG,WAAW,CAAC,SAAS,GAAG,WAAW,SAAS,cAAc,UAAU,iBAAiB,QAAQ,gBAAgB,IAAI,SAAS,gBAAgB,cAAc,SAAS,aAAa,CAAC,EAAE,UAAU,cAAc,YAAY,WAAW,CAAC,EAAE,EAAE;AAAA,UACjX,EAAE,MAAM,aAAa,aAAa,KAAK,SAAS,MAAM,wBAAwB,IAAI,UAAU,EAAE,QAAQ,YAAY,WAAW,UAAU,cAAc,aAAa,SAAS,WAAW,kBAAkB,KAAM,mBAAmB,IAAI,kBAAkB,WAAW,YAAY,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,EAAE,EAAE,EAAE;AAAA,UAC1Y,EAAE,MAAM,gBAAgB,aAAa,KAAK,SAAS,MAAM,wBAAwB,IAAI,UAAU,EAAE,QAAQ,SAAS,WAAW,UAAU,cAAc,SAAS,SAAS,WAAW,kBAAkB,KAAM,mBAAmB,IAAI,kBAAkB,UAAU,QAAQ,OAAO,EAAE;AAAA,UAC9Q,EAAE,MAAM,YAAY,aAAa,IAAI,UAAU,EAAE,QAAQ,aAAa,YAAY,CAAC,EAAE,QAAQ,YAAY,YAAY,KAAM,cAAc,OAAO,CAAC,GAAG,WAAW,CAAC,WAAW,QAAQ,GAAG,WAAW,SAAS,UAAU,IAAI,cAAc,oBAAoB,iBAAiB,QAAQ,gBAAgB,IAAI,SAAS,gBAAgB,aAAa,CAAC,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,UAAU,QAAQ,aAAa,CAAC,EAAE,EAAE;AAAA,UACrd,EAAE,MAAM,cAAc,aAAa,KAAK,UAAU,EAAE,QAAQ,YAAY,YAAY,CAAC,GAAG,WAAW,CAAC,eAAe,QAAQ,GAAG,cAAc,CAAC,EAAE,QAAQ,YAAY,YAAY,SAAS,cAAc,IAAI,CAAC,GAAG,UAAU,IAAI,cAAc,UAAU,iBAAiB,QAAQ,gBAAgB,IAAI,SAAS,gBAAgB,YAAY,CAAC,KAAK,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,GAAG,CAAC,GAAG,aAAa,CAAC,EAAE,UAAU,sBAAsB,YAAY,UAAU,CAAC,EAAE,EAAE;AAAA,QAC3f,CAAC;AAAA,MACL;AAAA,MACA;AAAA,QACI,MAAM;AAAA,QAAoB,SAAkC,UAAU;AAAA,UAClE,EAAE,MAAM,aAAa,aAAa,KAAK,aAAa,MAAM,SAAS,MAAM,UAAU,EAAE,QAAQ,SAAS,YAAY,CAAC,GAAG,gBAAgB,OAAO,eAAe,GAAG,gBAAgB,GAAG,iBAAiB,CAAC,GAAG,WAAW,CAAC,SAAS,GAAG,OAAO,GAAG,YAAY,IAAI,iBAAiB,GAAG,gBAAgB,GAAG,QAAQ,eAAe,aAAa,CAAC,EAAE,EAAE;AAAA,UACzU,EAAE,MAAM,YAAY,aAAa,KAAK,aAAa,MAAM,SAAS,MAAM,UAAU,EAAE,QAAQ,SAAS,YAAY,CAAC,GAAG,gBAAgB,OAAO,eAAe,GAAG,gBAAgB,GAAG,iBAAiB,CAAC,GAAG,WAAW,CAAC,SAAS,GAAG,OAAO,GAAG,YAAY,IAAI,iBAAiB,GAAG,gBAAgB,GAAG,QAAQ,kBAAkB,aAAa,CAAC,EAAE,EAAE;AAAA;AAAA,UAE3U,EAAE,MAAM,yBAAyB,aAAa,OAAO,UAAU,EAAE,QAAQ,QAAQ,YAAY,CAAC,EAAE,QAAQ,YAAY,YAAY,UAAU,cAAc,OAAO,CAAC,GAAG,gBAAgB,OAAO,eAAe,IAAI,gBAAgB,GAAG,iBAAiB,CAAC,EAAE,QAAQ,YAAY,YAAY,UAAU,cAAc,OAAO,CAAC,GAAG,WAAW,CAAC,WAAW,mBAAmB,eAAe,WAAW,eAAe,cAAc,QAAQ,QAAQ,GAAG,cAAc,UAAU,uBAAuB,OAAO,uBAAuB,GAAG,WAAW,WAAW,gBAAgB,KAAK,gBAAgB,MAAM,gBAAgB,IAAI,eAAe,GAAG,kBAAkB,OAAO,iBAAiB,IAAI,kBAAkB,GAAG,cAAc,CAAC,EAAE,QAAQ,aAAa,YAAY,OAAO,cAAc,QAAQ,GAAG,EAAE,QAAQ,YAAY,YAAY,OAAO,cAAc,EAAE,GAAG,EAAE,QAAQ,QAAQ,YAAY,KAAK,cAAc,QAAQ,GAAG,EAAE,QAAQ,aAAa,YAAY,MAAM,cAAc,OAAO,GAAG,EAAE,QAAQ,QAAQ,YAAY,QAAQ,cAAc,QAAQ,GAAG,EAAE,QAAQ,aAAa,YAAY,KAAK,cAAc,QAAQ,CAAC,GAAG,mBAAmB,CAAC,EAAE,QAAQ,aAAa,YAAY,OAAO,cAAc,QAAQ,GAAG,EAAE,QAAQ,YAAY,YAAY,OAAO,cAAc,EAAE,GAAG,EAAE,QAAQ,QAAQ,YAAY,KAAK,cAAc,QAAQ,GAAG,EAAE,QAAQ,aAAa,YAAY,MAAM,cAAc,OAAO,GAAG,EAAE,QAAQ,QAAQ,YAAY,QAAQ,cAAc,QAAQ,GAAG,EAAE,QAAQ,aAAa,YAAY,KAAK,cAAc,QAAQ,CAAC,GAAG,oBAAoB,KAAK,0BAA0B,IAAI,OAAO,GAAG,YAAY,IAAI,eAAe,IAAI,kBAAkB,OAAO,UAAU,GAAG,iBAAiB,GAAG,gBAAgB,IAAI,QAAQ,aAAa,UAAU,QAAQ,aAAa,CAAC,EAAE,EAAE;AAAA;AAAA,UAE7qD,EAAE,MAAM,gBAAgB,aAAa,OAAO,UAAU,EAAE,QAAQ,MAAM,YAAY,CAAC,EAAE,QAAQ,YAAY,YAAY,UAAU,cAAc,OAAO,CAAC,GAAG,gBAAgB,MAAM,eAAe,IAAI,gBAAgB,GAAG,iBAAiB,CAAC,GAAG,WAAW,CAAC,WAAW,mBAAmB,YAAY,GAAG,cAAc,aAAa,uBAAuB,OAAO,SAAS,mBAAmB,kBAAkB,OAAO,iBAAiB,IAAI,OAAO,GAAG,YAAY,IAAI,iBAAiB,GAAG,gBAAgB,IAAI,aAAa,4BAAa,gBAAgB,WAAM,qBAAqB,IAAI,aAAa,CAAC,EAAE,aAAa,SAAM,aAAa,IAAI,YAAY,QAAQ,cAAc,EAAE,GAAG,EAAE,aAAa,SAAM,aAAa,IAAI,YAAY,QAAQ,cAAc,EAAE,GAAG,EAAE,aAAa,SAAM,aAAa,IAAI,YAAY,QAAQ,cAAc,EAAE,GAAG,EAAE,aAAa,SAAM,aAAa,IAAI,YAAY,QAAQ,cAAc,EAAE,CAAC,GAAG,aAAa,CAAC,EAAE,UAAU,cAAc,YAAY,YAAY,GAAG,EAAE,UAAU,qBAAqB,YAAY,WAAW,SAAS,EAAE,GAAG,EAAE,UAAU,qBAAqB,YAAY,SAAS,SAAS,EAAE,GAAG,EAAE,UAAU,qBAAqB,YAAY,aAAa,SAAS,EAAE,CAAC,EAAE,EAAE;AAAA;AAAA,UAE1oC,EAAE,MAAM,gBAAgB,aAAa,OAAO,UAAU,EAAE,QAAQ,MAAM,YAAY,CAAC,EAAE,QAAQ,YAAY,YAAY,SAAS,cAAc,EAAE,GAAG,EAAE,QAAQ,aAAa,YAAY,OAAO,cAAc,EAAE,GAAG,EAAE,QAAQ,QAAQ,YAAY,KAAM,cAAc,OAAO,CAAC,GAAG,gBAAgB,OAAO,eAAe,IAAI,gBAAgB,GAAG,iBAAiB,CAAC,EAAE,QAAQ,YAAY,YAAY,SAAS,cAAc,EAAE,GAAG,EAAE,QAAQ,aAAa,YAAY,OAAO,cAAc,EAAE,GAAG,EAAE,QAAQ,QAAQ,YAAY,KAAM,cAAc,OAAO,CAAC,GAAG,WAAW,CAAC,WAAW,mBAAmB,eAAe,QAAQ,GAAG,cAAc,aAAa,uBAAuB,OAAO,kBAAkB,MAAM,iBAAiB,GAAG,kBAAkB,GAAG,cAAc,CAAC,EAAE,QAAQ,YAAY,YAAY,SAAS,cAAc,EAAE,CAAC,GAAG,mBAAmB,CAAC,EAAE,QAAQ,YAAY,YAAY,SAAS,cAAc,EAAE,CAAC,GAAG,OAAO,GAAG,YAAY,IAAI,UAAU,GAAG,iBAAiB,GAAG,gBAAgB,IAAI,aAAa,4BAAa,gBAAgB,WAAM,qBAAqB,GAAG,aAAa,CAAC,EAAE,aAAa,SAAM,aAAa,IAAI,YAAY,QAAQ,cAAc,EAAE,GAAG,EAAE,aAAa,SAAM,aAAa,GAAG,YAAY,QAAQ,cAAc,EAAE,GAAG,EAAE,aAAa,SAAM,aAAa,GAAG,YAAY,QAAQ,cAAc,EAAE,GAAG,EAAE,aAAa,UAAO,aAAa,IAAI,YAAY,QAAQ,cAAc,EAAE,CAAC,GAAG,aAAa,CAAC,EAAE,UAAU,sBAAsB,YAAY,QAAQ,GAAG,EAAE,UAAU,qBAAqB,YAAY,WAAW,SAAS,EAAE,GAAG,EAAE,UAAU,qBAAqB,YAAY,WAAW,SAAS,EAAE,GAAG,EAAE,UAAU,qBAAqB,YAAY,WAAW,SAAS,EAAE,CAAC,EAAE,EAAE;AAAA;AAAA,UAErmD,EAAE,MAAM,iBAAiB,aAAa,OAAO,UAAU,EAAE,QAAQ,MAAM,YAAY,CAAC,EAAE,QAAQ,YAAY,YAAY,SAAS,cAAc,OAAO,CAAC,GAAG,gBAAgB,MAAM,eAAe,GAAG,gBAAgB,GAAG,iBAAiB,CAAC,GAAG,WAAW,CAAC,WAAW,mBAAmB,QAAQ,GAAG,cAAc,UAAU,uBAAuB,OAAO,OAAO,GAAG,YAAY,IAAI,UAAU,GAAG,iBAAiB,GAAG,gBAAgB,IAAI,aAAa,4BAAa,gBAAgB,WAAM,qBAAqB,GAAG,aAAa,CAAC,EAAE,aAAa,SAAM,aAAa,IAAI,YAAY,QAAQ,cAAc,EAAE,GAAG,EAAE,aAAa,UAAO,aAAa,GAAG,YAAY,QAAQ,cAAc,EAAE,GAAG,EAAE,aAAa,SAAM,aAAa,GAAG,YAAY,QAAQ,cAAc,EAAE,GAAG,EAAE,aAAa,SAAM,aAAa,GAAG,YAAY,QAAQ,cAAc,EAAE,CAAC,GAAG,aAAa,CAAC,EAAE,UAAU,cAAc,YAAY,QAAQ,GAAG,EAAE,UAAU,cAAc,YAAY,YAAY,CAAC,EAAE,EAAE;AAAA;AAAA,UAEj6B,EAAE,MAAM,gBAAgB,aAAa,OAAO,UAAU,EAAE,QAAQ,MAAM,YAAY,CAAC,GAAG,WAAW,CAAC,YAAY,GAAG,SAAS,mBAAmB,iBAAiB,GAAG,gBAAgB,IAAI,aAAa,4BAAa,gBAAgB,WAAM,qBAAqB,IAAI,aAAa,CAAC,EAAE,aAAa,SAAM,aAAa,GAAG,GAAG,EAAE,aAAa,SAAM,aAAa,EAAE,GAAG,EAAE,aAAa,SAAM,aAAa,EAAE,GAAG,EAAE,aAAa,SAAM,aAAa,GAAG,CAAC,GAAG,aAAa,CAAC,EAAE,UAAU,qBAAqB,YAAY,aAAa,SAAS,EAAE,GAAG,EAAE,UAAU,qBAAqB,YAAY,aAAa,SAAS,EAAE,GAAG,EAAE,UAAU,qBAAqB,YAAY,YAAY,CAAC,EAAE,EAAE;AAAA;AAAA,UAEvoB,EAAE,MAAM,iBAAiB,aAAa,OAAO,UAAU,EAAE,QAAQ,iBAAiB,YAAY,CAAC,EAAE,QAAQ,aAAa,YAAY,QAAQ,cAAc,EAAE,GAAG,EAAE,QAAQ,QAAQ,YAAY,KAAM,cAAc,IAAI,CAAC,GAAG,WAAW,CAAC,eAAe,MAAM,GAAG,cAAc,CAAC,EAAE,QAAQ,YAAY,YAAY,SAAS,cAAc,OAAO,CAAC,GAAG,eAAe,IAAI,kBAAkB,KAAK,iBAAiB,GAAG,gBAAgB,IAAI,aAAa,CAAC,IAAI,KAAK,IAAI,IAAI,GAAG,GAAG,GAAG,KAAK,GAAG,GAAG,GAAG,IAAI,IAAI,GAAG,IAAI,KAAK,GAAG,GAAG,GAAG,GAAG,GAAG,IAAI,GAAG,GAAG,IAAI,GAAG,GAAG,EAAE,GAAG,UAAU,SAAS,iBAAiB,GAAG,aAAa,CAAC,EAAE,UAAU,sBAAsB,YAAY,QAAQ,CAAC,EAAE,EAAE;AAAA;AAAA,UAEloB,EAAE,MAAM,qBAAqB,aAAa,OAAO,UAAU,EAAE,QAAQ,eAAe,YAAY,CAAC,EAAE,QAAQ,YAAY,YAAY,KAAM,cAAc,IAAI,CAAC,GAAG,gBAAgB,MAAM,eAAe,GAAG,gBAAgB,GAAG,iBAAiB,CAAC,GAAG,WAAW,CAAC,WAAW,UAAU,QAAQ,GAAG,OAAO,GAAG,YAAY,IAAI,UAAU,IAAI,UAAU,IAAI,iBAAiB,QAAQ,gBAAgB,IAAI,QAAQ,UAAU,UAAU,cAAc,kBAAkB,EAAE,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,IAAI,GAAG,0BAA0B,EAAE,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,EAAE,GAAG,aAAa,CAAC,EAAE,EAAE;AAAA;AAAA,UAEntD,EAAE,MAAM,iBAAiB,aAAa,OAAO,UAAU,EAAE,QAAQ,eAAe,YAAY,CAAC,EAAE,QAAQ,YAAY,YAAY,UAAU,cAAc,OAAO,CAAC,GAAG,gBAAgB,MAAM,eAAe,IAAI,gBAAgB,GAAG,iBAAiB,CAAC,GAAG,WAAW,CAAC,WAAW,mBAAmB,WAAW,UAAU,QAAQ,GAAG,cAAc,aAAa,uBAAuB,OAAO,WAAW,WAAW,gBAAgB,KAAK,gBAAgB,MAAM,gBAAgB,IAAI,eAAe,GAAG,OAAO,GAAG,YAAY,IAAI,UAAU,IAAI,UAAU,IAAI,iBAAiB,GAAG,gBAAgB,IAAI,QAAQ,UAAU,UAAU,aAAa,kBAAkB,EAAE,KAAK,IAAI,KAAK,IAAI,KAAK,IAAI,KAAK,GAAG,KAAK,GAAG,KAAK,IAAI,KAAK,IAAI,KAAK,KAAK,KAAK,KAAK,KAAK,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,KAAK,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,GAAG,GAAG,0BAA0B,EAAE,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,KAAK,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,GAAG,MAAM,G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CA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,gBACJ;AAEA,sBAAM,WAAqB;AAAA,kBACvB;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AAAA,kBACA;AA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",
  "names": ["e_2", "__values", "EnvelopeType", "InstrumentType", "inverseRealFourierTransform", "scaleElementsByFactor", "drumBuffer", "i", "newBuffer", "_styleElement", "canvas", "_EventUpdateCanvas", "a", "_capacity", "_buffer", "_mask", "_offset", "_count", "_embiggen", "input", "b", "limit", "acc", "_noteSizeFinal", "_prevNoteSizeFinal", "_modifiedEnvelopeIndices", "_modifiedEnvelopeCount", "synth", "synth", "_hash", "_generatedForType", "synth", "PickedStringBrightnessType", "_drumsetIndexToSpectrumOctave", "_bits", "_readIndex", "_index", "_format", "_oldestBeepboxVersion", "_latestBeepboxVersion", "_oldestJummBoxVersion", "_latestJummBoxVersion", "_oldestGoldBoxVersion", "_latestGoldBoxVersion", "_oldestUltraBoxVersion", "_latestUltraBoxVersion", "_oldestSlarmoosBoxVersion", "_latestSlarmoosBoxVersion", "_variant", "i", "usingSubFilterBitfield", "_envelopeFromLegacyIndex", "_clearSamples", "_restoreChipWaveListToDefault", "_parseAndConfigureCustomSample", "channelIndex", "_isProperUrl", "sampleLoadingState", "scale", "a", "channel", "sampleL", "sampleR", "instrumentState", "transition", "startPoint", "endPoint", "expressionStart", "expressionEnd", "synth", "phaseAInt", "phaseBInt", "indexA", "indexB", "phaseRatioA", "phaseRatioB", "phase", "t", "isMobile"]
}
